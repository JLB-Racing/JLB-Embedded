
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002195c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08021b60  08021b60  00031b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080226a4  080226a4  0004010c  2**0
                  CONTENTS
  4 .ARM          00000008  080226a4  080226a4  000326a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080226ac  080226ac  0004010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080226ac  080226ac  000326ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080226bc  080226bc  000326bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080226cc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009dac  20000110  080227d8  00040110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20009ebc  080227d8  00049ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0004010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040142  2**0
                  CONTENTS, READONLY
 13 .debug_info   00058d5c  00000000  00000000  00040185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000880f  00000000  00000000  00098ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003eb0  00000000  00000000  000a16f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000304c  00000000  00000000  000a55a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039973  00000000  00000000  000a85ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042709  00000000  00000000  000e1f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00169416  00000000  00000000  00124668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00012cb4  00000000  00000000  0028da80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  002a0734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000110 	.word	0x20000110
 800021c:	00000000 	.word	0x00000000
 8000220:	08021b44 	.word	0x08021b44

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000114 	.word	0x20000114
 800023c:	08021b44 	.word	0x08021b44

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 bacc 	b.w	80011dc <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f950 	bl	8000ef0 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__mulsc3>:
 8000c5c:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000c60:	ee60 5aa1 	vmul.f32	s11, s1, s3
 8000c64:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000c68:	ee61 4a20 	vmul.f32	s9, s2, s1
 8000c6c:	ee76 7ae5 	vsub.f32	s15, s13, s11
 8000c70:	ee35 7a24 	vadd.f32	s14, s10, s9
 8000c74:	eef4 7a67 	vcmp.f32	s15, s15
 8000c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7c:	eeb4 7a47 	vcmp.f32	s14, s14
 8000c80:	bf6c      	ite	vs
 8000c82:	2301      	movvs	r3, #1
 8000c84:	2300      	movvc	r3, #0
 8000c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	bf78      	it	vc
 8000c90:	2300      	movvc	r3, #0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80c8 	beq.w	8000e28 <__mulsc3+0x1cc>
 8000c98:	eeb0 6ac0 	vabs.f32	s12, s0
 8000c9c:	ed9f 4a90 	vldr	s8, [pc, #576]	; 8000ee0 <__mulsc3+0x284>
 8000ca0:	eef0 3ae0 	vabs.f32	s7, s1
 8000ca4:	eeb4 6a44 	vcmp.f32	s12, s8
 8000ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cac:	bfcc      	ite	gt
 8000cae:	2201      	movgt	r2, #1
 8000cb0:	2200      	movle	r2, #0
 8000cb2:	f340 80be 	ble.w	8000e32 <__mulsc3+0x1d6>
 8000cb6:	ee06 2a10 	vmov	s12, r2
 8000cba:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8000ee0 <__mulsc3+0x284>
 8000cbe:	ee10 2a10 	vmov	r2, s0
 8000cc2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000cc6:	eef4 3a44 	vcmp.f32	s7, s8
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	eeb0 6ac6 	vabs.f32	s12, s12
 8000cd0:	bfb8      	it	lt
 8000cd2:	eeb1 6a46 	vneglt.f32	s12, s12
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cda:	eeb4 1a41 	vcmp.f32	s2, s2
 8000cde:	eeb0 0a46 	vmov.f32	s0, s12
 8000ce2:	bfcc      	ite	gt
 8000ce4:	2201      	movgt	r2, #1
 8000ce6:	2200      	movle	r2, #0
 8000ce8:	ee06 2a10 	vmov	s12, r2
 8000cec:	ee10 2a90 	vmov	r2, s1
 8000cf0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	eeb0 6ac6 	vabs.f32	s12, s12
 8000cfa:	bfb8      	it	lt
 8000cfc:	eeb1 6a46 	vneglt.f32	s12, s12
 8000d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d04:	eef0 0a46 	vmov.f32	s1, s12
 8000d08:	f180 80b7 	bvs.w	8000e7a <__mulsc3+0x21e>
 8000d0c:	eef4 1a61 	vcmp.f32	s3, s3
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	f180 80bb 	bvs.w	8000e8e <__mulsc3+0x232>
 8000d18:	eeb0 6ac1 	vabs.f32	s12, s2
 8000d1c:	ed9f 4a70 	vldr	s8, [pc, #448]	; 8000ee0 <__mulsc3+0x284>
 8000d20:	eeb4 6a44 	vcmp.f32	s12, s8
 8000d24:	eeb0 6ae1 	vabs.f32	s12, s3
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	bfcc      	ite	gt
 8000d2e:	2201      	movgt	r2, #1
 8000d30:	2200      	movle	r2, #0
 8000d32:	dc3c      	bgt.n	8000dae <__mulsc3+0x152>
 8000d34:	eeb4 6a44 	vcmp.f32	s12, s8
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	dc37      	bgt.n	8000dae <__mulsc3+0x152>
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d164      	bne.n	8000e0c <__mulsc3+0x1b0>
 8000d42:	eef0 6ae6 	vabs.f32	s13, s13
 8000d46:	eef4 6a44 	vcmp.f32	s13, s8
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	dc0d      	bgt.n	8000d6c <__mulsc3+0x110>
 8000d50:	eef0 5ae5 	vabs.f32	s11, s11
 8000d54:	eef4 5a44 	vcmp.f32	s11, s8
 8000d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5c:	dc06      	bgt.n	8000d6c <__mulsc3+0x110>
 8000d5e:	eeb0 5ac5 	vabs.f32	s10, s10
 8000d62:	eeb4 5a44 	vcmp.f32	s10, s8
 8000d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6a:	dd6a      	ble.n	8000e42 <__mulsc3+0x1e6>
 8000d6c:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d74:	f180 80a9 	bvs.w	8000eca <__mulsc3+0x26e>
 8000d78:	eef4 0a60 	vcmp.f32	s1, s1
 8000d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d80:	f180 8099 	bvs.w	8000eb6 <__mulsc3+0x25a>
 8000d84:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8c:	f180 8089 	bvs.w	8000ea2 <__mulsc3+0x246>
 8000d90:	eef4 1a61 	vcmp.f32	s3, s3
 8000d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d98:	d738      	bvc.n	8000e0c <__mulsc3+0x1b0>
 8000d9a:	ee11 3a90 	vmov	r3, s3
 8000d9e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000ee4 <__mulsc3+0x288>
 8000da2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8000ee8 <__mulsc3+0x28c>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	fe67 1a27 	vselge.f32	s3, s14, s15
 8000dac:	e02e      	b.n	8000e0c <__mulsc3+0x1b0>
 8000dae:	ee07 2a90 	vmov	s15, r2
 8000db2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000ee0 <__mulsc3+0x284>
 8000db6:	ee11 3a10 	vmov	r3, s2
 8000dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbe:	eeb4 6a47 	vcmp.f32	s12, s14
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	eef0 7ae7 	vabs.f32	s15, s15
 8000dc8:	bfb8      	it	lt
 8000dca:	eef1 7a67 	vneglt.f32	s15, s15
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	eeb4 0a40 	vcmp.f32	s0, s0
 8000dd6:	eeb0 1a67 	vmov.f32	s2, s15
 8000dda:	bfcc      	ite	gt
 8000ddc:	2301      	movgt	r3, #1
 8000dde:	2300      	movle	r3, #0
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	ee11 3a90 	vmov	r3, s3
 8000de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	eef0 7ae7 	vabs.f32	s15, s15
 8000df2:	bfb8      	it	lt
 8000df4:	eef1 7a67 	vneglt.f32	s15, s15
 8000df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfc:	eef0 1a67 	vmov.f32	s3, s15
 8000e00:	d631      	bvs.n	8000e66 <__mulsc3+0x20a>
 8000e02:	eef4 0a60 	vcmp.f32	s1, s1
 8000e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0a:	d622      	bvs.n	8000e52 <__mulsc3+0x1f6>
 8000e0c:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000e10:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000eec <__mulsc3+0x290>
 8000e14:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000e18:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000e1c:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e24:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000e28:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2c:	eef0 0a47 	vmov.f32	s1, s14
 8000e30:	4770      	bx	lr
 8000e32:	eef4 3a44 	vcmp.f32	s7, s8
 8000e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3a:	f73f af3c 	bgt.w	8000cb6 <__mulsc3+0x5a>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e76a      	b.n	8000d18 <__mulsc3+0xbc>
 8000e42:	eef0 4ae4 	vabs.f32	s9, s9
 8000e46:	eef4 4a44 	vcmp.f32	s9, s8
 8000e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4e:	ddeb      	ble.n	8000e28 <__mulsc3+0x1cc>
 8000e50:	e78c      	b.n	8000d6c <__mulsc3+0x110>
 8000e52:	ee10 3a90 	vmov	r3, s1
 8000e56:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000ee4 <__mulsc3+0x288>
 8000e5a:	eddf 7a23 	vldr	s15, [pc, #140]	; 8000ee8 <__mulsc3+0x28c>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	fe67 0a27 	vselge.f32	s1, s14, s15
 8000e64:	e7d2      	b.n	8000e0c <__mulsc3+0x1b0>
 8000e66:	ee10 3a10 	vmov	r3, s0
 8000e6a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000ee4 <__mulsc3+0x288>
 8000e6e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8000ee8 <__mulsc3+0x28c>
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000e78:	e7c3      	b.n	8000e02 <__mulsc3+0x1a6>
 8000e7a:	ee11 2a10 	vmov	r2, s2
 8000e7e:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8000ee4 <__mulsc3+0x288>
 8000e82:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8000ee8 <__mulsc3+0x28c>
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	fe24 1a06 	vselge.f32	s2, s8, s12
 8000e8c:	e73e      	b.n	8000d0c <__mulsc3+0xb0>
 8000e8e:	ee11 2a90 	vmov	r2, s3
 8000e92:	ed9f 4a14 	vldr	s8, [pc, #80]	; 8000ee4 <__mulsc3+0x288>
 8000e96:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8000ee8 <__mulsc3+0x28c>
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	fe64 1a06 	vselge.f32	s3, s8, s12
 8000ea0:	e73a      	b.n	8000d18 <__mulsc3+0xbc>
 8000ea2:	ee11 3a10 	vmov	r3, s2
 8000ea6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ee4 <__mulsc3+0x288>
 8000eaa:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000ee8 <__mulsc3+0x28c>
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	fe27 1a27 	vselge.f32	s2, s14, s15
 8000eb4:	e76c      	b.n	8000d90 <__mulsc3+0x134>
 8000eb6:	ee10 3a90 	vmov	r3, s1
 8000eba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000ee4 <__mulsc3+0x288>
 8000ebe:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000ee8 <__mulsc3+0x28c>
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	fe67 0a27 	vselge.f32	s1, s14, s15
 8000ec8:	e75c      	b.n	8000d84 <__mulsc3+0x128>
 8000eca:	ee10 3a10 	vmov	r3, s0
 8000ece:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000ee4 <__mulsc3+0x288>
 8000ed2:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000ee8 <__mulsc3+0x28c>
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000edc:	e74c      	b.n	8000d78 <__mulsc3+0x11c>
 8000ede:	bf00      	nop
 8000ee0:	7f7fffff 	.word	0x7f7fffff
 8000ee4:	00000000 	.word	0x00000000
 8000ee8:	80000000 	.word	0x80000000
 8000eec:	7f800000 	.word	0x7f800000

08000ef0 <__udivmoddi4>:
 8000ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ef6:	460d      	mov	r5, r1
 8000ef8:	4604      	mov	r4, r0
 8000efa:	460f      	mov	r7, r1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d146      	bne.n	8000f8e <__udivmoddi4+0x9e>
 8000f00:	428a      	cmp	r2, r1
 8000f02:	4694      	mov	ip, r2
 8000f04:	d95e      	bls.n	8000fc4 <__udivmoddi4+0xd4>
 8000f06:	fab2 f382 	clz	r3, r2
 8000f0a:	b143      	cbz	r3, 8000f1e <__udivmoddi4+0x2e>
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	f1c3 0220 	rsb	r2, r3, #32
 8000f14:	409f      	lsls	r7, r3
 8000f16:	409c      	lsls	r4, r3
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	4317      	orrs	r7, r2
 8000f1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f22:	fa1f f58c 	uxth.w	r5, ip
 8000f26:	0c22      	lsrs	r2, r4, #16
 8000f28:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f2c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f30:	fb01 f005 	mul.w	r0, r1, r5
 8000f34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x5e>
 8000f3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f40:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f44:	d202      	bcs.n	8000f4c <__udivmoddi4+0x5c>
 8000f46:	4290      	cmp	r0, r2
 8000f48:	f200 8134 	bhi.w	80011b4 <__udivmoddi4+0x2c4>
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	1a12      	subs	r2, r2, r0
 8000f50:	b2a4      	uxth	r4, r4
 8000f52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f5a:	fb00 f505 	mul.w	r5, r0, r5
 8000f5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f62:	42a5      	cmp	r5, r4
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x88>
 8000f66:	eb1c 0404 	adds.w	r4, ip, r4
 8000f6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f6e:	d202      	bcs.n	8000f76 <__udivmoddi4+0x86>
 8000f70:	42a5      	cmp	r5, r4
 8000f72:	f200 8119 	bhi.w	80011a8 <__udivmoddi4+0x2b8>
 8000f76:	4610      	mov	r0, r2
 8000f78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f7c:	1b64      	subs	r4, r4, r5
 8000f7e:	2100      	movs	r1, #0
 8000f80:	b11e      	cbz	r6, 8000f8a <__udivmoddi4+0x9a>
 8000f82:	40dc      	lsrs	r4, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	e9c6 4300 	strd	r4, r3, [r6]
 8000f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0xb4>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	f000 80fc 	beq.w	8001190 <__udivmoddi4+0x2a0>
 8000f98:	2100      	movs	r1, #0
 8000f9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa4:	fab3 f183 	clz	r1, r3
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	d14c      	bne.n	8001046 <__udivmoddi4+0x156>
 8000fac:	42ab      	cmp	r3, r5
 8000fae:	f0c0 80f2 	bcc.w	8001196 <__udivmoddi4+0x2a6>
 8000fb2:	4282      	cmp	r2, r0
 8000fb4:	f240 80ef 	bls.w	8001196 <__udivmoddi4+0x2a6>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	2e00      	cmp	r6, #0
 8000fbc:	d0e5      	beq.n	8000f8a <__udivmoddi4+0x9a>
 8000fbe:	e9c6 4700 	strd	r4, r7, [r6]
 8000fc2:	e7e2      	b.n	8000f8a <__udivmoddi4+0x9a>
 8000fc4:	b902      	cbnz	r2, 8000fc8 <__udivmoddi4+0xd8>
 8000fc6:	deff      	udf	#255	; 0xff
 8000fc8:	fab2 f382 	clz	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f040 809f 	bne.w	8001110 <__udivmoddi4+0x220>
 8000fd2:	1a8a      	subs	r2, r1, r2
 8000fd4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000fd8:	fa1f f78c 	uxth.w	r7, ip
 8000fdc:	2101      	movs	r1, #1
 8000fde:	fbb2 f5fe 	udiv	r5, r2, lr
 8000fe2:	fb0e 2015 	mls	r0, lr, r5, r2
 8000fe6:	0c22      	lsrs	r2, r4, #16
 8000fe8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fec:	fb07 f005 	mul.w	r0, r7, r5
 8000ff0:	4290      	cmp	r0, r2
 8000ff2:	d90f      	bls.n	8001014 <__udivmoddi4+0x124>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffc:	bf2c      	ite	cs
 8000ffe:	f04f 0901 	movcs.w	r9, #1
 8001002:	f04f 0900 	movcc.w	r9, #0
 8001006:	4290      	cmp	r0, r2
 8001008:	d903      	bls.n	8001012 <__udivmoddi4+0x122>
 800100a:	f1b9 0f00 	cmp.w	r9, #0
 800100e:	f000 80ce 	beq.w	80011ae <__udivmoddi4+0x2be>
 8001012:	4645      	mov	r5, r8
 8001014:	1a12      	subs	r2, r2, r0
 8001016:	b2a4      	uxth	r4, r4
 8001018:	fbb2 f0fe 	udiv	r0, r2, lr
 800101c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001020:	fb00 f707 	mul.w	r7, r0, r7
 8001024:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001028:	42a7      	cmp	r7, r4
 800102a:	d908      	bls.n	800103e <__udivmoddi4+0x14e>
 800102c:	eb1c 0404 	adds.w	r4, ip, r4
 8001030:	f100 32ff 	add.w	r2, r0, #4294967295
 8001034:	d202      	bcs.n	800103c <__udivmoddi4+0x14c>
 8001036:	42a7      	cmp	r7, r4
 8001038:	f200 80b3 	bhi.w	80011a2 <__udivmoddi4+0x2b2>
 800103c:	4610      	mov	r0, r2
 800103e:	1be4      	subs	r4, r4, r7
 8001040:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001044:	e79c      	b.n	8000f80 <__udivmoddi4+0x90>
 8001046:	f1c1 0420 	rsb	r4, r1, #32
 800104a:	408b      	lsls	r3, r1
 800104c:	fa05 fc01 	lsl.w	ip, r5, r1
 8001050:	fa22 f704 	lsr.w	r7, r2, r4
 8001054:	40e5      	lsrs	r5, r4
 8001056:	408a      	lsls	r2, r1
 8001058:	431f      	orrs	r7, r3
 800105a:	fa20 f304 	lsr.w	r3, r0, r4
 800105e:	4088      	lsls	r0, r1
 8001060:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001064:	ea43 030c 	orr.w	r3, r3, ip
 8001068:	fa1f fc87 	uxth.w	ip, r7
 800106c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001070:	fbb5 fef8 	udiv	lr, r5, r8
 8001074:	fb08 551e 	mls	r5, r8, lr, r5
 8001078:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800107c:	fb0e f90c 	mul.w	r9, lr, ip
 8001080:	45a9      	cmp	r9, r5
 8001082:	d90e      	bls.n	80010a2 <__udivmoddi4+0x1b2>
 8001084:	197d      	adds	r5, r7, r5
 8001086:	f10e 3aff 	add.w	sl, lr, #4294967295
 800108a:	bf2c      	ite	cs
 800108c:	f04f 0b01 	movcs.w	fp, #1
 8001090:	f04f 0b00 	movcc.w	fp, #0
 8001094:	45a9      	cmp	r9, r5
 8001096:	d903      	bls.n	80010a0 <__udivmoddi4+0x1b0>
 8001098:	f1bb 0f00 	cmp.w	fp, #0
 800109c:	f000 808d 	beq.w	80011ba <__udivmoddi4+0x2ca>
 80010a0:	46d6      	mov	lr, sl
 80010a2:	eba5 0509 	sub.w	r5, r5, r9
 80010a6:	fa1f f983 	uxth.w	r9, r3
 80010aa:	fbb5 f3f8 	udiv	r3, r5, r8
 80010ae:	fb08 5513 	mls	r5, r8, r3, r5
 80010b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80010b6:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80010ba:	45ac      	cmp	ip, r5
 80010bc:	d906      	bls.n	80010cc <__udivmoddi4+0x1dc>
 80010be:	197d      	adds	r5, r7, r5
 80010c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80010c4:	d201      	bcs.n	80010ca <__udivmoddi4+0x1da>
 80010c6:	45ac      	cmp	ip, r5
 80010c8:	d87e      	bhi.n	80011c8 <__udivmoddi4+0x2d8>
 80010ca:	4643      	mov	r3, r8
 80010cc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80010d0:	eba5 050c 	sub.w	r5, r5, ip
 80010d4:	fba3 9802 	umull	r9, r8, r3, r2
 80010d8:	4545      	cmp	r5, r8
 80010da:	46ce      	mov	lr, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	d302      	bcc.n	80010e6 <__udivmoddi4+0x1f6>
 80010e0:	d106      	bne.n	80010f0 <__udivmoddi4+0x200>
 80010e2:	4548      	cmp	r0, r9
 80010e4:	d204      	bcs.n	80010f0 <__udivmoddi4+0x200>
 80010e6:	3b01      	subs	r3, #1
 80010e8:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ec:	eb68 0c07 	sbc.w	ip, r8, r7
 80010f0:	2e00      	cmp	r6, #0
 80010f2:	d06f      	beq.n	80011d4 <__udivmoddi4+0x2e4>
 80010f4:	ebb0 020e 	subs.w	r2, r0, lr
 80010f8:	eb65 050c 	sbc.w	r5, r5, ip
 80010fc:	40ca      	lsrs	r2, r1
 80010fe:	fa05 f404 	lsl.w	r4, r5, r4
 8001102:	40cd      	lsrs	r5, r1
 8001104:	4618      	mov	r0, r3
 8001106:	4314      	orrs	r4, r2
 8001108:	2100      	movs	r1, #0
 800110a:	e9c6 4500 	strd	r4, r5, [r6]
 800110e:	e73c      	b.n	8000f8a <__udivmoddi4+0x9a>
 8001110:	fa02 fc03 	lsl.w	ip, r2, r3
 8001114:	f1c3 0220 	rsb	r2, r3, #32
 8001118:	4099      	lsls	r1, r3
 800111a:	409c      	lsls	r4, r3
 800111c:	40d5      	lsrs	r5, r2
 800111e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001122:	fa20 f202 	lsr.w	r2, r0, r2
 8001126:	fa1f f78c 	uxth.w	r7, ip
 800112a:	fbb5 f0fe 	udiv	r0, r5, lr
 800112e:	430a      	orrs	r2, r1
 8001130:	fb0e 5510 	mls	r5, lr, r0, r5
 8001134:	0c11      	lsrs	r1, r2, #16
 8001136:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800113a:	fb00 f507 	mul.w	r5, r0, r7
 800113e:	428d      	cmp	r5, r1
 8001140:	d90e      	bls.n	8001160 <__udivmoddi4+0x270>
 8001142:	eb1c 0101 	adds.w	r1, ip, r1
 8001146:	f100 38ff 	add.w	r8, r0, #4294967295
 800114a:	bf2c      	ite	cs
 800114c:	f04f 0901 	movcs.w	r9, #1
 8001150:	f04f 0900 	movcc.w	r9, #0
 8001154:	428d      	cmp	r5, r1
 8001156:	d902      	bls.n	800115e <__udivmoddi4+0x26e>
 8001158:	f1b9 0f00 	cmp.w	r9, #0
 800115c:	d031      	beq.n	80011c2 <__udivmoddi4+0x2d2>
 800115e:	4640      	mov	r0, r8
 8001160:	1b49      	subs	r1, r1, r5
 8001162:	b292      	uxth	r2, r2
 8001164:	fbb1 f5fe 	udiv	r5, r1, lr
 8001168:	fb0e 1115 	mls	r1, lr, r5, r1
 800116c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001170:	fb05 f107 	mul.w	r1, r5, r7
 8001174:	4291      	cmp	r1, r2
 8001176:	d907      	bls.n	8001188 <__udivmoddi4+0x298>
 8001178:	eb1c 0202 	adds.w	r2, ip, r2
 800117c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001180:	d201      	bcs.n	8001186 <__udivmoddi4+0x296>
 8001182:	4291      	cmp	r1, r2
 8001184:	d823      	bhi.n	80011ce <__udivmoddi4+0x2de>
 8001186:	4645      	mov	r5, r8
 8001188:	1a52      	subs	r2, r2, r1
 800118a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800118e:	e726      	b.n	8000fde <__udivmoddi4+0xee>
 8001190:	4631      	mov	r1, r6
 8001192:	4630      	mov	r0, r6
 8001194:	e6f9      	b.n	8000f8a <__udivmoddi4+0x9a>
 8001196:	1a84      	subs	r4, r0, r2
 8001198:	eb65 0203 	sbc.w	r2, r5, r3
 800119c:	2001      	movs	r0, #1
 800119e:	4617      	mov	r7, r2
 80011a0:	e70b      	b.n	8000fba <__udivmoddi4+0xca>
 80011a2:	4464      	add	r4, ip
 80011a4:	3802      	subs	r0, #2
 80011a6:	e74a      	b.n	800103e <__udivmoddi4+0x14e>
 80011a8:	4464      	add	r4, ip
 80011aa:	3802      	subs	r0, #2
 80011ac:	e6e4      	b.n	8000f78 <__udivmoddi4+0x88>
 80011ae:	3d02      	subs	r5, #2
 80011b0:	4462      	add	r2, ip
 80011b2:	e72f      	b.n	8001014 <__udivmoddi4+0x124>
 80011b4:	3902      	subs	r1, #2
 80011b6:	4462      	add	r2, ip
 80011b8:	e6c9      	b.n	8000f4e <__udivmoddi4+0x5e>
 80011ba:	f1ae 0e02 	sub.w	lr, lr, #2
 80011be:	443d      	add	r5, r7
 80011c0:	e76f      	b.n	80010a2 <__udivmoddi4+0x1b2>
 80011c2:	3802      	subs	r0, #2
 80011c4:	4461      	add	r1, ip
 80011c6:	e7cb      	b.n	8001160 <__udivmoddi4+0x270>
 80011c8:	3b02      	subs	r3, #2
 80011ca:	443d      	add	r5, r7
 80011cc:	e77e      	b.n	80010cc <__udivmoddi4+0x1dc>
 80011ce:	3d02      	subs	r5, #2
 80011d0:	4462      	add	r2, ip
 80011d2:	e7d9      	b.n	8001188 <__udivmoddi4+0x298>
 80011d4:	4618      	mov	r0, r3
 80011d6:	4631      	mov	r1, r6
 80011d8:	e6d7      	b.n	8000f8a <__udivmoddi4+0x9a>
 80011da:	bf00      	nop

080011dc <__aeabi_idiv0>:
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_ADC_ConvCpltCallback+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_ADC_ConvCpltCallback+0x68>)
 80011f0:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_ADC_ConvCpltCallback+0x64>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_ADC_ConvCpltCallback+0x68>)
 80011fa:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_ADC_ConvCpltCallback+0x64>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_ADC_ConvCpltCallback+0x68>)
 8001204:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_ADC_ConvCpltCallback+0x64>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_ADC_ConvCpltCallback+0x68>)
 800120e:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_ADC_ConvCpltCallback+0x64>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_ADC_ConvCpltCallback+0x68>)
 8001218:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_ADC_ConvCpltCallback+0x64>)
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_ADC_ConvCpltCallback+0x68>)
 8001222:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_ADC_ConvCpltCallback+0x64>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_ADC_ConvCpltCallback+0x68>)
 800122c:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_ADC_ConvCpltCallback+0x64>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_ADC_ConvCpltCallback+0x68>)
 8001236:	81da      	strh	r2, [r3, #14]

	//vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	2000012c 	.word	0x2000012c
 8001248:	2000014c 	.word	0x2000014c

0800124c <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8001252:	4b9b      	ldr	r3, [pc, #620]	; (80014c0 <_Z18DistanceSensorTaskv+0x274>)
 8001254:	895b      	ldrh	r3, [r3, #10]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800125e:	eddf 6a99 	vldr	s13, [pc, #612]	; 80014c4 <_Z18DistanceSensorTaskv+0x278>
 8001262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001266:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80014c8 <_Z18DistanceSensorTaskv+0x27c>
 800126a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126e:	4b97      	ldr	r3, [pc, #604]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8001274:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <_Z18DistanceSensorTaskv+0x274>)
 8001276:	89db      	ldrh	r3, [r3, #14]
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001280:	eddf 6a90 	vldr	s13, [pc, #576]	; 80014c4 <_Z18DistanceSensorTaskv+0x278>
 8001284:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001288:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80014c8 <_Z18DistanceSensorTaskv+0x27c>
 800128c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001290:	4b8e      	ldr	r3, [pc, #568]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 8001292:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 8001296:	4b8a      	ldr	r3, [pc, #552]	; (80014c0 <_Z18DistanceSensorTaskv+0x274>)
 8001298:	891b      	ldrh	r3, [r3, #8]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012a2:	eddf 6a88 	vldr	s13, [pc, #544]	; 80014c4 <_Z18DistanceSensorTaskv+0x278>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80014c8 <_Z18DistanceSensorTaskv+0x27c>
 80012ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b2:	4b86      	ldr	r3, [pc, #536]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 80012b4:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <_Z18DistanceSensorTaskv+0x274>)
 80012ba:	88db      	ldrh	r3, [r3, #6]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c4:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80014c4 <_Z18DistanceSensorTaskv+0x278>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80014c8 <_Z18DistanceSensorTaskv+0x27c>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	4b7d      	ldr	r3, [pc, #500]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 80012d6:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	e0a1      	b.n	8001424 <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4a7a      	ldr	r2, [pc, #488]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4a77      	ldr	r2, [pc, #476]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 80012f0:	3304      	adds	r3, #4
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 80012fc:	2300      	movs	r3, #0
 80012fe:	71bb      	strb	r3, [r7, #6]
 8001300:	e03a      	b.n	8001378 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	f1c3 0305 	rsb	r3, r3, #5
 8001308:	4618      	mov	r0, r3
 800130a:	ed97 0a00 	vldr	s0, [r7]
 800130e:	f000 f8e5 	bl	80014dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001312:	ec55 4b10 	vmov	r4, r5, d0
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	4a6d      	ldr	r2, [pc, #436]	; (80014d0 <_Z18DistanceSensorTaskv+0x284>)
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f903 	bl	800052c <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f955 	bl	80005dc <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4614      	mov	r4, r2
 8001338:	461d      	mov	r5, r3
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4a63      	ldr	r2, [pc, #396]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800133e:	3304      	adds	r3, #4
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8f0 	bl	800052c <__aeabi_f2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7fe ff8c 	bl	8000270 <__adddf3>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	79fc      	ldrb	r4, [r7, #7]
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc13 	bl	8000b8c <__aeabi_d2f>
 8001366:	4602      	mov	r2, r0
 8001368:	4958      	ldr	r1, [pc, #352]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800136a:	1d23      	adds	r3, r4, #4
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	3301      	adds	r3, #1
 8001376:	71bb      	strb	r3, [r7, #6]
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	2b05      	cmp	r3, #5
 800137c:	d9c1      	bls.n	8001302 <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4a52      	ldr	r2, [pc, #328]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 8001382:	3306      	adds	r3, #6
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 8001392:	3302      	adds	r3, #2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 800139c:	2300      	movs	r3, #0
 800139e:	71bb      	strb	r3, [r7, #6]
 80013a0:	e03a      	b.n	8001418 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	f1c3 0305 	rsb	r3, r3, #5
 80013a8:	4618      	mov	r0, r3
 80013aa:	ed97 0a00 	vldr	s0, [r7]
 80013ae:	f000 f895 	bl	80014dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013b2:	ec55 4b10 	vmov	r4, r5, d0
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <_Z18DistanceSensorTaskv+0x288>)
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8b3 	bl	800052c <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4620      	mov	r0, r4
 80013cc:	4629      	mov	r1, r5
 80013ce:	f7ff f905 	bl	80005dc <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4614      	mov	r4, r2
 80013d8:	461d      	mov	r5, r3
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4a3b      	ldr	r2, [pc, #236]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 80013de:	3306      	adds	r3, #6
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8a0 	bl	800052c <__aeabi_f2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f7fe ff3c 	bl	8000270 <__adddf3>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	79fc      	ldrb	r4, [r7, #7]
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fbc3 	bl	8000b8c <__aeabi_d2f>
 8001406:	4602      	mov	r2, r0
 8001408:	4930      	ldr	r1, [pc, #192]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800140a:	1da3      	adds	r3, r4, #6
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	3301      	adds	r3, #1
 8001416:	71bb      	strb	r3, [r7, #6]
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d9c1      	bls.n	80013a2 <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	3301      	adds	r3, #1
 8001422:	71fb      	strb	r3, [r7, #7]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f43f af5a 	beq.w	80012e0 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800142e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001432:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	da09      	bge.n	8001454 <_Z18DistanceSensorTaskv+0x208>
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 8001442:	edd3 7a07 	vldr	s15, [r3, #28]
 8001446:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800144a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	db0e      	blt.n	8001472 <_Z18DistanceSensorTaskv+0x226>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800145a:	6213      	str	r3, [r2, #32]
		distance_sensor.distance -= 5.0f;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800145e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001462:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800146c:	edc3 7a08 	vstr	s15, [r3, #32]
 8001470:	e018      	b.n	80014a4 <_Z18DistanceSensorTaskv+0x258>
	}
	else
	{
		distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 8001474:	ed93 7a06 	vldr	s14, [r3, #24]
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800147a:	edd3 7a07 	vldr	s15, [r3, #28]
 800147e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001482:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 800148c:	edc3 7a08 	vstr	s15, [r3, #32]
		distance_sensor.distance -= 8.0f;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 8001492:	edd3 7a08 	vldr	s15, [r3, #32]
 8001496:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800149a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 80014a0:	edc3 7a08 	vstr	s15, [r3, #32]

		//distance_sensor.distance = distance_sensor.distance_short[0];
	}

	distance_sensor.distance /= 100.0f;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 80014a6:	ed93 7a08 	vldr	s14, [r3, #32]
 80014aa:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80014d8 <_Z18DistanceSensorTaskv+0x28c>
 80014ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <_Z18DistanceSensorTaskv+0x280>)
 80014b4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdb0      	pop	{r4, r5, r7, pc}
 80014c0:	2000014c 	.word	0x2000014c
 80014c4:	45800000 	.word	0x45800000
 80014c8:	40533333 	.word	0x40533333
 80014cc:	2000015c 	.word	0x2000015c
 80014d0:	20000018 	.word	0x20000018
 80014d4:	20000000 	.word	0x20000000
 80014d8:	42c80000 	.word	0x42c80000

080014dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80014e6:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff f81f 	bl	800052c <__aeabi_f2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	6838      	ldr	r0, [r7, #0]
 80014f4:	f7ff f808 	bl	8000508 <__aeabi_i2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	ec43 2b11 	vmov	d1, r2, r3
 8001500:	ec45 4b10 	vmov	d0, r4, r5
 8001504:	f01b fd98 	bl	801d038 <pow>
 8001508:	eeb0 7a40 	vmov.f32	s14, s0
 800150c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001510:	eeb0 0a47 	vmov.f32	s0, s14
 8001514:	eef0 0a67 	vmov.f32	s1, s15
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001520 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	e05c      	b.n	8001602 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	429a      	cmp	r2, r3
 8001550:	d103      	bne.n	800155a <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	801a      	strh	r2, [r3, #0]
 8001558:	e053      	b.n	8001602 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d927      	bls.n	80015b4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b10      	cmp	r3, #16
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d010      	beq.n	800159e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	b29a      	uxth	r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	b29b      	uxth	r3, r3
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	b29b      	uxth	r3, r3
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	801a      	strh	r2, [r3, #0]
 800159c:	e031      	b.n	8001602 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	801a      	strh	r2, [r3, #0]
 80015b2:	e026      	b.n	8001602 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b10      	cmp	r3, #16
 80015c0:	bf0c      	ite	eq
 80015c2:	2301      	moveq	r3, #1
 80015c4:	2300      	movne	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00a      	beq.n	80015e2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b21a      	sxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	801a      	strh	r2, [r3, #0]
 80015e0:	e00f      	b.n	8001602 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	2000018c 	.word	0x2000018c

08001618 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8001630:	f01a fa3e 	bl	801bab0 <xTaskGetTickCount>
 8001634:	4603      	mov	r3, r0
 8001636:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 8001638:	491e      	ldr	r1, [pc, #120]	; (80016b4 <_Z12Encoder_TaskPv+0x9c>)
 800163a:	481f      	ldr	r0, [pc, #124]	; (80016b8 <_Z12Encoder_TaskPv+0xa0>)
 800163c:	f7ff ff70 	bl	8001520 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <_Z12Encoder_TaskPv+0xa0>)
 8001642:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	1c59      	adds	r1, r3, #1
 800164a:	75f9      	strb	r1, [r7, #23]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	3318      	adds	r3, #24
 8001650:	443b      	add	r3, r7
 8001652:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d101      	bne.n	8001660 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_Z12Encoder_TaskPv+0xa0>)
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 8001668:	2300      	movs	r3, #0
 800166a:	75bb      	strb	r3, [r7, #22]
 800166c:	e018      	b.n	80016a0 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <_Z12Encoder_TaskPv+0xa0>)
 8001670:	ed93 7a02 	vldr	s14, [r3, #8]
 8001674:	7dbb      	ldrb	r3, [r7, #22]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	3318      	adds	r3, #24
 800167a:	443b      	add	r3, r7
 800167c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001688:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800168c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_Z12Encoder_TaskPv+0xa0>)
 8001696:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800169a:	7dbb      	ldrb	r3, [r7, #22]
 800169c:	3301      	adds	r3, #1
 800169e:	75bb      	strb	r3, [r7, #22]
 80016a0:	7dbb      	ldrb	r3, [r7, #22]
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d9e3      	bls.n	800166e <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2101      	movs	r1, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	f01a f88b 	bl	801b7c8 <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 80016b2:	e7c1      	b.n	8001638 <_Z12Encoder_TaskPv+0x20>
 80016b4:	20000ba8 	.word	0x20000ba8
 80016b8:	20000180 	.word	0x20000180

080016bc <_Z12CalculateRPMv>:
	}
}

float CalculateRPM()
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <_Z12CalculateRPMv+0x90>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <_Z12CalculateRPMv+0x94>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	1c59      	adds	r1, r3, #1
 80016d2:	b2c8      	uxtb	r0, r1
 80016d4:	491e      	ldr	r1, [pc, #120]	; (8001750 <_Z12CalculateRPMv+0x94>)
 80016d6:	7008      	strb	r0, [r1, #0]
 80016d8:	491e      	ldr	r1, [pc, #120]	; (8001754 <_Z12CalculateRPMv+0x98>)
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	601a      	str	r2, [r3, #0]

	if(index == 5)
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <_Z12CalculateRPMv+0x94>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d102      	bne.n	80016ee <_Z12CalculateRPMv+0x32>
	{
		index = 0;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <_Z12CalculateRPMv+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
	}

	averaged_rpm = 0.0f;
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	603b      	str	r3, [r7, #0]
	for(i = 0 ; i < 5; ++i)
 80016f4:	2300      	movs	r3, #0
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	e012      	b.n	8001720 <_Z12CalculateRPMv+0x64>
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4a15      	ldr	r2, [pc, #84]	; (8001754 <_Z12CalculateRPMv+0x98>)
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800170a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800170e:	ed97 7a00 	vldr	s14, [r7]
 8001712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001716:	edc7 7a00 	vstr	s15, [r7]
	for(i = 0 ; i < 5; ++i)
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	3301      	adds	r3, #1
 800171e:	71fb      	strb	r3, [r7, #7]
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b04      	cmp	r3, #4
 8001724:	d9e9      	bls.n	80016fa <_Z12CalculateRPMv+0x3e>
	}

	averaged_rpm *= -1.36f;
 8001726:	edd7 7a00 	vldr	s15, [r7]
 800172a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001758 <_Z12CalculateRPMv+0x9c>
 800172e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001732:	edc7 7a00 	vstr	s15, [r7]

	return averaged_rpm;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	ee07 3a90 	vmov	s15, r3
}
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000180 	.word	0x20000180
 8001750:	2000018d 	.word	0x2000018d
 8001754:	20000190 	.word	0x20000190
 8001758:	bfae147b 	.word	0xbfae147b

0800175c <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu;

uint8_t readByteFromIMU(uint8_t address)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af02      	add	r7, sp, #8
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800176a:	1dfa      	adds	r2, r7, #7
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2301      	movs	r3, #1
 8001772:	21d6      	movs	r1, #214	; 0xd6
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <_Z15readByteFromIMUh+0x3c>)
 8001776:	f011 f99f 	bl	8012ab8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 800177a:	f107 020f 	add.w	r2, r7, #15
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	21d7      	movs	r1, #215	; 0xd7
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <_Z15readByteFromIMUh+0x3c>)
 8001788:	f011 fa8a 	bl	8012ca0 <HAL_I2C_Master_Receive>
	return ret;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200007f8 	.word	0x200007f8

0800179c <_Z8IMU_Taskv>:

void IMU_Task()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 80017a2:	4b92      	ldr	r3, [pc, #584]	; (80019ec <_Z8IMU_Taskv+0x250>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d155      	bne.n	8001856 <_Z8IMU_Taskv+0xba>
	{
		uint8_t whoami = 0u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 80017ae:	230f      	movs	r3, #15
 80017b0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 80017b2:	f107 0209 	add.w	r2, r7, #9
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2301      	movs	r3, #1
 80017bc:	21d6      	movs	r1, #214	; 0xd6
 80017be:	488c      	ldr	r0, [pc, #560]	; (80019f0 <_Z8IMU_Taskv+0x254>)
 80017c0:	f011 f97a 	bl	8012ab8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 80017c4:	f107 020a 	add.w	r2, r7, #10
 80017c8:	2364      	movs	r3, #100	; 0x64
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	21d7      	movs	r1, #215	; 0xd7
 80017d0:	4887      	ldr	r0, [pc, #540]	; (80019f0 <_Z8IMU_Taskv+0x254>)
 80017d2:	f011 fa65 	bl	8012ca0 <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 80017d6:	7abb      	ldrb	r3, [r7, #10]
 80017d8:	2b6a      	cmp	r3, #106	; 0x6a
 80017da:	f040 8103 	bne.w	80019e4 <_Z8IMU_Taskv+0x248>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x63};
 80017de:	f246 3310 	movw	r3, #25360	; 0x6310
 80017e2:	80bb      	strh	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80017e4:	1d3a      	adds	r2, r7, #4
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2302      	movs	r3, #2
 80017ec:	21d6      	movs	r1, #214	; 0xd6
 80017ee:	4880      	ldr	r0, [pc, #512]	; (80019f0 <_Z8IMU_Taskv+0x254>)
 80017f0:	f011 f962 	bl	8012ab8 <HAL_I2C_Master_Transmit>

		pData[0] = 0x1A;
 80017f4:	231a      	movs	r3, #26
 80017f6:	713b      	strb	r3, [r7, #4]
		pData[1] = 16;
 80017f8:	2310      	movs	r3, #16
 80017fa:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80017fc:	1d3a      	adds	r2, r7, #4
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2302      	movs	r3, #2
 8001804:	21d6      	movs	r1, #214	; 0xd6
 8001806:	487a      	ldr	r0, [pc, #488]	; (80019f0 <_Z8IMU_Taskv+0x254>)
 8001808:	f011 f956 	bl	8012ab8 <HAL_I2C_Master_Transmit>

		pData[0] = CTRL2_G_ADDR;
 800180c:	2311      	movs	r3, #17
 800180e:	713b      	strb	r3, [r7, #4]
		pData[1] = 0x63;
 8001810:	2363      	movs	r3, #99	; 0x63
 8001812:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8001814:	1d3a      	adds	r2, r7, #4
 8001816:	2364      	movs	r3, #100	; 0x64
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2302      	movs	r3, #2
 800181c:	21d6      	movs	r1, #214	; 0xd6
 800181e:	4874      	ldr	r0, [pc, #464]	; (80019f0 <_Z8IMU_Taskv+0x254>)
 8001820:	f011 f94a 	bl	8012ab8 <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 8001824:	2012      	movs	r0, #18
 8001826:	f7ff ff99 	bl	800175c <_Z15readByteFromIMUh>
 800182a:	4603      	mov	r3, r0
 800182c:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 8001836:	2312      	movs	r3, #18
 8001838:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 800183e:	1d3a      	adds	r2, r7, #4
 8001840:	2364      	movs	r3, #100	; 0x64
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2302      	movs	r3, #2
 8001846:	21d6      	movs	r1, #214	; 0xd6
 8001848:	4869      	ldr	r0, [pc, #420]	; (80019f0 <_Z8IMU_Taskv+0x254>)
 800184a:	f011 f935 	bl	8012ab8 <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 800184e:	4b67      	ldr	r3, [pc, #412]	; (80019ec <_Z8IMU_Taskv+0x250>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e0c7      	b.n	80019e6 <_Z8IMU_Taskv+0x24a>
	}
	else
	{
		uint8_t status = 0u;
 8001856:	2300      	movs	r3, #0
 8001858:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 800185a:	231e      	movs	r3, #30
 800185c:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 800185e:	1cba      	adds	r2, r7, #2
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2301      	movs	r3, #1
 8001866:	21d6      	movs	r1, #214	; 0xd6
 8001868:	4861      	ldr	r0, [pc, #388]	; (80019f0 <_Z8IMU_Taskv+0x254>)
 800186a:	f011 f925 	bl	8012ab8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 800186e:	1cfa      	adds	r2, r7, #3
 8001870:	2364      	movs	r3, #100	; 0x64
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	21d7      	movs	r1, #215	; 0xd7
 8001878:	485d      	ldr	r0, [pc, #372]	; (80019f0 <_Z8IMU_Taskv+0x254>)
 800187a:	f011 fa11 	bl	8012ca0 <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d05f      	beq.n	8001948 <_Z8IMU_Taskv+0x1ac>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 8001888:	2028      	movs	r0, #40	; 0x28
 800188a:	f7ff ff67 	bl	800175c <_Z15readByteFromIMUh>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 8001892:	2029      	movs	r0, #41	; 0x29
 8001894:	f7ff ff62 	bl	800175c <_Z15readByteFromIMUh>
 8001898:	4603      	mov	r3, r0
 800189a:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 800189c:	7bbb      	ldrb	r3, [r7, #14]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b2:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80019f4 <_Z8IMU_Taskv+0x258>
 80018b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80019f8 <_Z8IMU_Taskv+0x25c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <_Z8IMU_Taskv+0x260>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]


			tmp_low = readByteFromIMU(OUTZ_L_XL);
 80018c8:	202c      	movs	r0, #44	; 0x2c
 80018ca:	f7ff ff47 	bl	800175c <_Z15readByteFromIMUh>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_H_XL);
 80018d2:	202d      	movs	r0, #45	; 0x2d
 80018d4:	f7ff ff42 	bl	800175c <_Z15readByteFromIMUh>
 80018d8:	4603      	mov	r3, r0
 80018da:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80019f4 <_Z8IMU_Taskv+0x258>
 80018f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018fa:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80019f8 <_Z8IMU_Taskv+0x25c>
 80018fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <_Z8IMU_Taskv+0x260>)
 8001904:	edc3 7a02 	vstr	s15, [r3, #8]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 8001908:	202a      	movs	r0, #42	; 0x2a
 800190a:	f7ff ff27 	bl	800175c <_Z15readByteFromIMUh>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_H_XL);
 8001912:	202b      	movs	r0, #43	; 0x2b
 8001914:	f7ff ff22 	bl	800175c <_Z15readByteFromIMUh>
 8001918:	4603      	mov	r3, r0
 800191a:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 800191c:	7bbb      	ldrb	r3, [r7, #14]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b21b      	sxth	r3, r3
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80019f4 <_Z8IMU_Taskv+0x258>
 8001936:	ee27 7a87 	vmul.f32	s14, s15, s14
 800193a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80019f8 <_Z8IMU_Taskv+0x25c>
 800193e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <_Z8IMU_Taskv+0x260>)
 8001944:	edc3 7a01 	vstr	s15, [r3, #4]


		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d049      	beq.n	80019e6 <_Z8IMU_Taskv+0x24a>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 8001952:	2026      	movs	r0, #38	; 0x26
 8001954:	f7ff ff02 	bl	800175c <_Z15readByteFromIMUh>
 8001958:	4603      	mov	r3, r0
 800195a:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 800195c:	2027      	movs	r0, #39	; 0x27
 800195e:	f7ff fefd 	bl	800175c <_Z15readByteFromIMUh>
 8001962:	4603      	mov	r3, r0
 8001964:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 8001966:	7b3b      	ldrb	r3, [r7, #12]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	7b7b      	ldrb	r3, [r7, #13]
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21b      	sxth	r3, r3
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001a00 <_Z8IMU_Taskv+0x264>
 8001980:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001984:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80019f8 <_Z8IMU_Taskv+0x25c>
 8001988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001a04 <_Z8IMU_Taskv+0x268>
 8001990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <_Z8IMU_Taskv+0x260>)
 8001996:	edc3 7a03 	vstr	s15, [r3, #12]

			//tmp_low = readByteFromIMU(OUTX_L_G);
			//tmp_high = readByteFromIMU(OUTX_H_G);
			//imu.roll = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;

			tmp_low = readByteFromIMU(OUTY_L_G);
 800199a:	2024      	movs	r0, #36	; 0x24
 800199c:	f7ff fede 	bl	800175c <_Z15readByteFromIMUh>
 80019a0:	4603      	mov	r3, r0
 80019a2:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTY_H_G);
 80019a4:	2025      	movs	r0, #37	; 0x25
 80019a6:	f7ff fed9 	bl	800175c <_Z15readByteFromIMUh>
 80019aa:	4603      	mov	r3, r0
 80019ac:	733b      	strb	r3, [r7, #12]
			imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 80019ae:	7b3b      	ldrb	r3, [r7, #12]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	7b7b      	ldrb	r3, [r7, #13]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001a00 <_Z8IMU_Taskv+0x264>
 80019c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019cc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80019f8 <_Z8IMU_Taskv+0x25c>
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001a04 <_Z8IMU_Taskv+0x268>
 80019d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_Z8IMU_Taskv+0x260>)
 80019de:	edc3 7a04 	vstr	s15, [r3, #16]
 80019e2:	e000      	b.n	80019e6 <_Z8IMU_Taskv+0x24a>
			return;
 80019e4:	bf00      	nop

		}
	}
}
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200001a4 	.word	0x200001a4
 80019f0:	200007f8 	.word	0x200007f8
 80019f4:	3d79db23 	.word	0x3d79db23
 80019f8:	447a0000 	.word	0x447a0000
 80019fc:	200001a8 	.word	0x200001a8
 8001a00:	407423e2 	.word	0x407423e2
 8001a04:	3c8ef998 	.word	0x3c8ef998

08001a08 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fce5 	bl	8002408 <_ZNSaIfED1Ev>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fcc8 	bl	80023e8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ffeb 	bl	8001a48 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 8001a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a8e:	2211      	movs	r2, #17
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]
 8001a9c:	e009      	b.n	8001ab2 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x36>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8001a9e:	f107 0116 	add.w	r1, r7, #22
 8001aa2:	2364      	movs	r3, #100	; 0x64
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4821      	ldr	r0, [pc, #132]	; (8001b2c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb0>)
 8001aa8:	f013 fddb 	bl	8015662 <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d9f2      	bls.n	8001a9e <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x22>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f010 ff36 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3304      	adds	r3, #4
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f010 ff2c 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f010 ff24 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3304      	adds	r3, #4
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3302      	adds	r3, #2
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	2200      	movs	r2, #0
 8001afa:	4619      	mov	r1, r3
 8001afc:	f010 ff1a 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f010 ff12 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f010 ff08 	bl	8012934 <HAL_GPIO_WritePin>

}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000a94 	.word	0x20000a94

08001b30 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f010 fef3 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3304      	adds	r3, #4
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	3302      	adds	r3, #2
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f010 fee9 	bl	8012934 <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
 8001b66:	e010      	b.n	8001b8a <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5a>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, 100);
 8001b76:	f107 0116 	add.w	r1, r7, #22
 8001b7a:	2364      	movs	r3, #100	; 0x64
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	482d      	ldr	r0, [pc, #180]	; (8001c34 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x104>)
 8001b80:	f013 fd6f 	bl	8015662 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	3301      	adds	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d9eb      	bls.n	8001b68 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f010 feca 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	f010 fec2 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f010 feba 	bl	8012934 <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	75fb      	strb	r3, [r7, #23]
 8001bc4:	e010      	b.n	8001be8 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xb8>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, 100);
 8001bd4:	f107 0115 	add.w	r1, r7, #21
 8001bd8:	2364      	movs	r3, #100	; 0x64
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4815      	ldr	r0, [pc, #84]	; (8001c34 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x104>)
 8001bde:	f013 fd40 	bl	8015662 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	3301      	adds	r3, #1
 8001be6:	75fb      	strb	r3, [r7, #23]
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d9eb      	bls.n	8001bc6 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x96>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f010 fe99 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4619      	mov	r1, r3
 8001c12:	f010 fe8f 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	4619      	mov	r1, r3
 8001c26:	f010 fe85 	bl	8012934 <HAL_GPIO_WritePin>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000a94 	.word	0x20000a94

08001c38 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f010 fe71 	bl	8012934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4619      	mov	r1, r3
 8001c62:	f010 fe67 	bl	8012934 <HAL_GPIO_WritePin>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t adc_ic_index, uint8_t *res)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t tmp[2] = {0, 0};
 8001c80:	2300      	movs	r3, #0
 8001c82:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f010 fe4a 	bl	8012934 <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	75fb      	strb	r3, [r7, #23]
 8001ca4:	e017      	b.n	8001cd6 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x66>
	{
		tmp[0] = i << 3u;
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit(&hspi1, tmp, 2, 100);
 8001cae:	f107 0114 	add.w	r1, r7, #20
 8001cb2:	2364      	movs	r3, #100	; 0x64
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x90>)
 8001cb8:	f013 fcd3 	bl	8015662 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, 100);
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	1899      	adds	r1, r3, r2
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	2202      	movs	r2, #2
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x90>)
 8001ccc:	f013 fe37 	bl	801593e <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	d9e4      	bls.n	8001ca6 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x36>
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f010 fe1e 	bl	8012934 <HAL_GPIO_WritePin>

}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000a30 	.word	0x20000a30

08001d04 <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b096      	sub	sp, #88	; 0x58
 8001d08:	af02      	add	r7, sp, #8


#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d10:	e0c1      	b.n	8001e96 <_Z14LineSensorTaskv+0x192>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 8001d12:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4b92      	ldr	r3, [pc, #584]	; (8001f64 <_Z14LineSensorTaskv+0x260>)
 8001d1a:	4a93      	ldr	r2, [pc, #588]	; (8001f68 <_Z14LineSensorTaskv+0x264>)
 8001d1c:	4991      	ldr	r1, [pc, #580]	; (8001f64 <_Z14LineSensorTaskv+0x260>)
 8001d1e:	4893      	ldr	r0, [pc, #588]	; (8001f6c <_Z14LineSensorTaskv+0x268>)
 8001d20:	f7ff feac 	bl	8001a7c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8001d24:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <_Z14LineSensorTaskv+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8001d2c:	bf00      	nop
 8001d2e:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <_Z14LineSensorTaskv+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b95      	cmp	r3, #149	; 0x95
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f3      	bne.n	8001d2e <_Z14LineSensorTaskv+0x2a>

		for(j = 0; j < 4; ++j)
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001d4c:	e094      	b.n	8001e78 <_Z14LineSensorTaskv+0x174>
		{
			uint8_t adc_front_values[16];
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d56:	4987      	ldr	r1, [pc, #540]	; (8001f74 <_Z14LineSensorTaskv+0x270>)
 8001d58:	4887      	ldr	r0, [pc, #540]	; (8001f78 <_Z14LineSensorTaskv+0x274>)
 8001d5a:	f7ff ff89 	bl	8001c70 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d66:	4985      	ldr	r1, [pc, #532]	; (8001f7c <_Z14LineSensorTaskv+0x278>)
 8001d68:	4885      	ldr	r0, [pc, #532]	; (8001f80 <_Z14LineSensorTaskv+0x27c>)
 8001d6a:	f7ff ff81 	bl	8001c70 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 8001d6e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	3350      	adds	r3, #80	; 0x50
 8001d76:	443b      	add	r3, r7
 8001d78:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	b299      	uxth	r1, r3
 8001d82:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	3301      	adds	r3, #1
 8001d8a:	3350      	adds	r3, #80	; 0x50
 8001d8c:	443b      	add	r3, r7
 8001d8e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d98:	00d8      	lsls	r0, r3, #3
 8001d9a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001d9e:	4403      	add	r3, r0
 8001da0:	430a      	orrs	r2, r1
 8001da2:	b291      	uxth	r1, r2
 8001da4:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 8001daa:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001dae:	3304      	adds	r3, #4
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	3350      	adds	r3, #80	; 0x50
 8001db4:	443b      	add	r3, r7
 8001db6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b299      	uxth	r1, r3
 8001dc0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	3301      	adds	r3, #1
 8001dca:	3350      	adds	r3, #80	; 0x50
 8001dcc:	443b      	add	r3, r7
 8001dce:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dd8:	00d8      	lsls	r0, r3, #3
 8001dda:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001dde:	4403      	add	r3, r0
 8001de0:	3304      	adds	r3, #4
 8001de2:	430a      	orrs	r2, r1
 8001de4:	b291      	uxth	r1, r2
 8001de6:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001de8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 8001dec:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	3350      	adds	r3, #80	; 0x50
 8001df4:	443b      	add	r3, r7
 8001df6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b299      	uxth	r1, r3
 8001e00:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	3301      	adds	r3, #1
 8001e08:	3350      	adds	r3, #80	; 0x50
 8001e0a:	443b      	add	r3, r7
 8001e0c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e16:	00d8      	lsls	r0, r3, #3
 8001e18:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001e1c:	4403      	add	r3, r0
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	b291      	uxth	r1, r2
 8001e22:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001e24:	3320      	adds	r3, #32
 8001e26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 8001e2a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001e2e:	3304      	adds	r3, #4
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	3350      	adds	r3, #80	; 0x50
 8001e34:	443b      	add	r3, r7
 8001e36:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	b299      	uxth	r1, r3
 8001e40:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001e44:	3304      	adds	r3, #4
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	3301      	adds	r3, #1
 8001e4a:	3350      	adds	r3, #80	; 0x50
 8001e4c:	443b      	add	r3, r7
 8001e4e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e58:	00d8      	lsls	r0, r3, #3
 8001e5a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001e5e:	4403      	add	r3, r0
 8001e60:	3304      	adds	r3, #4
 8001e62:	430a      	orrs	r2, r1
 8001e64:	b291      	uxth	r1, r2
 8001e66:	4a47      	ldr	r2, [pc, #284]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001e68:	3320      	adds	r3, #32
 8001e6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 8001e6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e72:	3301      	adds	r3, #1
 8001e74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001e78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	f67f af66 	bls.w	8001d4e <_Z14LineSensorTaskv+0x4a>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 8001e82:	4938      	ldr	r1, [pc, #224]	; (8001f64 <_Z14LineSensorTaskv+0x260>)
 8001e84:	4838      	ldr	r0, [pc, #224]	; (8001f68 <_Z14LineSensorTaskv+0x264>)
 8001e86:	f7ff fed7 	bl	8001c38 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 8001e8a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e8e:	3301      	adds	r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001e96:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	f77f af39 	ble.w	8001d12 <_Z14LineSensorTaskv+0xe>
	}

	float denominator_f = 0.0f;
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
	float denominator_r = 0.0f;
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t led_front = 0u;
 8001eac:	2300      	movs	r3, #0
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t led_rear = 0u;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t front_max_index = 0u;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t rear_max_index = 0u;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	for(i = 1; i < 31; ++i)
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001ec6:	e035      	b.n	8001f34 <_Z14LineSensorTaskv+0x230>
	{
		if(ls_data.adc_values_f[i] > ls_data.adc_values_f[front_max_index])
 8001ec8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001ecc:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001ece:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ed2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ed6:	492b      	ldr	r1, [pc, #172]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001ed8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d903      	bls.n	8001ee8 <_Z14LineSensorTaskv+0x1e4>
		{
			front_max_index = i;
 8001ee0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001ee4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
 8001ee8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001eec:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001eee:	3320      	adds	r3, #32
 8001ef0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ef4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001ef8:	4922      	ldr	r1, [pc, #136]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001efa:	3320      	adds	r3, #32
 8001efc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d903      	bls.n	8001f0c <_Z14LineSensorTaskv+0x208>
		{
			rear_max_index = i;
 8001f04:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001f08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		}
		ls_data.front_detection[i] = true;
 8001f0c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001f12:	4413      	add	r3, r2
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		ls_data.rear_detection[i] = true;
 8001f1a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001f1e:	4a19      	ldr	r2, [pc, #100]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001f20:	4413      	add	r3, r2
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8001f28:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001f34:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001f38:	2b1e      	cmp	r3, #30
 8001f3a:	ddc5      	ble.n	8001ec8 <_Z14LineSensorTaskv+0x1c4>
	}

	ls_data.front_detection[0] = true;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	ls_data.front_detection[31] = true;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ls_data.rear_detection[0] = true;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ls_data.rear_detection[31] = true;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <_Z14LineSensorTaskv+0x280>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	for(i = 1; i < 31; ++i)
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001f62:	e090      	b.n	8002086 <_Z14LineSensorTaskv+0x382>
 8001f64:	20000068 	.word	0x20000068
 8001f68:	2000006c 	.word	0x2000006c
 8001f6c:	20000060 	.word	0x20000060
 8001f70:	20000c40 	.word	0x20000c40
 8001f74:	20000040 	.word	0x20000040
 8001f78:	20000030 	.word	0x20000030
 8001f7c:	20000058 	.word	0x20000058
 8001f80:	20000048 	.word	0x20000048
 8001f84:	200001c0 	.word	0x200001c0
	{
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8001f88:	4bcd      	ldr	r3, [pc, #820]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8001f8a:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8001f8e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001f9e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001fa2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001fa6:	4ac6      	ldr	r2, [pc, #792]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8001fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbc:	4bc0      	ldr	r3, [pc, #768]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8001fbe:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8001fc2:	4bbf      	ldr	r3, [pc, #764]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8001fc4:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8001fc8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001fd8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001fdc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001fe0:	4ab7      	ldr	r2, [pc, #732]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff8:	4bb1      	ldr	r3, [pc, #708]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8001ffa:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		denominator_f += (float)(ls_data.adc_values_f[i]);
 8001ffe:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002002:	4aaf      	ldr	r2, [pc, #700]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8002004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002010:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002018:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		denominator_r += (float)(ls_data.adc_values_r[i]);
 800201c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002020:	4aa7      	ldr	r2, [pc, #668]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8002022:	3320      	adds	r3, #32
 8002024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002030:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if(ls_data.adc_values_f[i] > 2000)
 800203c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002040:	4a9f      	ldr	r2, [pc, #636]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8002042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002046:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800204a:	d906      	bls.n	800205a <_Z14LineSensorTaskv+0x356>
		{
			ls_data.front_detection[i] = false;
 800204c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002050:	4a9b      	ldr	r2, [pc, #620]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8002052:	4413      	add	r3, r2
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		}

		if(ls_data.adc_values_r[i] > 2000)
 800205a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800205e:	4a98      	ldr	r2, [pc, #608]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8002060:	3320      	adds	r3, #32
 8002062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002066:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800206a:	d906      	bls.n	800207a <_Z14LineSensorTaskv+0x376>
		{
			ls_data.rear_detection[i] = false;
 800206c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002070:	4a93      	ldr	r2, [pc, #588]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8002072:	4413      	add	r3, r2
 8002074:	2200      	movs	r2, #0
 8002076:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 800207a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800207e:	3301      	adds	r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002086:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800208a:	2b1e      	cmp	r3, #30
 800208c:	f77f af7c 	ble.w	8001f88 <_Z14LineSensorTaskv+0x284>
		}
	}

	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 8002090:	2302      	movs	r3, #2
 8002092:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002096:	e037      	b.n	8002108 <_Z14LineSensorTaskv+0x404>
	{
		if((ls_data.front_detection[i - 1] == true) && (ls_data.front_detection[i + 1] == true))
 8002098:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800209c:	3b01      	subs	r3, #1
 800209e:	4a88      	ldr	r2, [pc, #544]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 80020a0:	4413      	add	r3, r2
 80020a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10f      	bne.n	80020ca <_Z14LineSensorTaskv+0x3c6>
 80020aa:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80020ae:	3301      	adds	r3, #1
 80020b0:	4a83      	ldr	r2, [pc, #524]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 80020b2:	4413      	add	r3, r2
 80020b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <_Z14LineSensorTaskv+0x3c6>
		{
			ls_data.front_detection[i] = true;
 80020bc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80020c0:	4a7f      	ldr	r2, [pc, #508]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 80020c2:	4413      	add	r3, r2
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		if((ls_data.rear_detection[i - 1] == true) && (ls_data.rear_detection[i + 1] == true))
 80020ca:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80020ce:	3b01      	subs	r3, #1
 80020d0:	4a7b      	ldr	r2, [pc, #492]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 80020d2:	4413      	add	r3, r2
 80020d4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10f      	bne.n	80020fc <_Z14LineSensorTaskv+0x3f8>
 80020dc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a77      	ldr	r2, [pc, #476]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 80020e4:	4413      	add	r3, r2
 80020e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <_Z14LineSensorTaskv+0x3f8>
		{
			ls_data.rear_detection[i] = true;
 80020ee:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80020f2:	4a73      	ldr	r2, [pc, #460]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 80020f4:	4413      	add	r3, r2
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 80020fc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002100:	3301      	adds	r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002108:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800210c:	2b1d      	cmp	r3, #29
 800210e:	ddc3      	ble.n	8002098 <_Z14LineSensorTaskv+0x394>
		}
	}

	for(i = 1; i < 31; ++i)
 8002110:	2301      	movs	r3, #1
 8002112:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002116:	e027      	b.n	8002168 <_Z14LineSensorTaskv+0x464>
	{
		if(ls_data.front_detection[i] == false)
 8002118:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800211c:	4a68      	ldr	r2, [pc, #416]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 800211e:	4413      	add	r3, r2
 8002120:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002124:	2b00      	cmp	r3, #0
 8002126:	d108      	bne.n	800213a <_Z14LineSensorTaskv+0x436>
		{
			led_front |= 0x80000000 >> (i);
 8002128:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800212c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002136:	4313      	orrs	r3, r2
 8002138:	643b      	str	r3, [r7, #64]	; 0x40
		}
		if(ls_data.rear_detection[i] == false)
 800213a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800213e:	4a60      	ldr	r2, [pc, #384]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8002140:	4413      	add	r3, r2
 8002142:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d108      	bne.n	800215c <_Z14LineSensorTaskv+0x458>
		{
			led_rear |= 0x80000000 >> (i);
 800214a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800214e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002158:	4313      	orrs	r3, r2
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i = 1; i < 31; ++i)
 800215c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002160:	3301      	adds	r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002168:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800216c:	2b1e      	cmp	r3, #30
 800216e:	ddd3      	ble.n	8002118 <_Z14LineSensorTaskv+0x414>
		}
	}
	uint8_t cluster_start_front = SENSOR_COUNT + 1;
 8002170:	2321      	movs	r3, #33	; 0x21
 8002172:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t cluster_end_front = SENSOR_COUNT + 1;
 8002176:	2321      	movs	r3, #33	; 0x21
 8002178:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t cluster_start_rear = SENSOR_COUNT + 1;
 800217c:	2321      	movs	r3, #33	; 0x21
 800217e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t cluster_end_rear = SENSOR_COUNT + 1;
 8002182:	2321      	movs	r3, #33	; 0x21
 8002184:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t current_idx;
	ls_data.front.clear();
 8002188:	484e      	ldr	r0, [pc, #312]	; (80022c4 <_Z14LineSensorTaskv+0x5c0>)
 800218a:	f000 f97c 	bl	8002486 <_ZNSt6vectorIfSaIfEE5clearEv>
	ls_data.rear.clear();
 800218e:	484e      	ldr	r0, [pc, #312]	; (80022c8 <_Z14LineSensorTaskv+0x5c4>)
 8002190:	f000 f979 	bl	8002486 <_ZNSt6vectorIfSaIfEE5clearEv>
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8002194:	2300      	movs	r3, #0
 8002196:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800219a:	e102      	b.n	80023a2 <_Z14LineSensorTaskv+0x69e>
	{
		if (!ls_data.front_detection[current_idx])
 800219c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021a0:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 80021a2:	4413      	add	r3, r2
 80021a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80021a8:	f083 0301 	eor.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <_Z14LineSensorTaskv+0x4c8>
		{
			if (cluster_start_front == SENSOR_COUNT + 1)
 80021b2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021b6:	2b21      	cmp	r3, #33	; 0x21
 80021b8:	d103      	bne.n	80021c2 <_Z14LineSensorTaskv+0x4be>
			{
				cluster_start_front = current_idx;
 80021ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			}
			cluster_end_front = current_idx;
 80021c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80021ca:	e061      	b.n	8002290 <_Z14LineSensorTaskv+0x58c>
		}
		else
		{
			if (cluster_start_front != SENSOR_COUNT + 1)
 80021cc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021d0:	2b21      	cmp	r3, #33	; 0x21
 80021d2:	d05d      	beq.n	8002290 <_Z14LineSensorTaskv+0x58c>
				// calculate the center of mass of the cluster
				//float cluster_center = (cluster_start_front + 1 + cluster_end_front + 1) / 2.0f;
				// calculate the position of the line relative to the center of the sensor
				//float line_position = cluster_center - 16.5f;
				//line_position = -1.0f * line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				float line_position = 0.0f;
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
				float denominator = 0.0f;
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 80021e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80021ec:	e028      	b.n	8002240 <_Z14LineSensorTaskv+0x53c>
				{
					line_position += ls_data.adc_values_f[i] * i;
 80021ee:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80021f2:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 80021f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220a:	edd7 7a01 	vldr	s15, [r7, #4]
 800220e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002212:	edc7 7a01 	vstr	s15, [r7, #4]
					denominator += ls_data.adc_values_f[i];
 8002216:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800221a:	4a29      	ldr	r2, [pc, #164]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 800221c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002228:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800222c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002230:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 8002234:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002238:	3301      	adds	r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002240:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8002244:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002248:	3301      	adds	r3, #1
 800224a:	429a      	cmp	r2, r3
 800224c:	ddcf      	ble.n	80021ee <_Z14LineSensorTaskv+0x4ea>
				}
				line_position = -1.0f * (((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1));
 800224e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002252:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80022cc <_Z14LineSensorTaskv+0x5c8>
 800225e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002262:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80022d0 <_Z14LineSensorTaskv+0x5cc>
 8002266:	ee27 7a87 	vmul.f32	s14, s15, s14
 800226a:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 800226e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002272:	eef1 7a67 	vneg.f32	s15, s15
 8002276:	edc7 7a01 	vstr	s15, [r7, #4]

				// add the line position to the vector
				ls_data.front.push_back(line_position);
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4811      	ldr	r0, [pc, #68]	; (80022c4 <_Z14LineSensorTaskv+0x5c0>)
 8002280:	f000 f90f 	bl	80024a2 <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_front = SENSOR_COUNT + 1;
 8002284:	2321      	movs	r3, #33	; 0x21
 8002286:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				cluster_end_front = SENSOR_COUNT + 1;
 800228a:	2321      	movs	r3, #33	; 0x21
 800228c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			}
		}

		if (!ls_data.rear_detection[current_idx])
 8002290:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <_Z14LineSensorTaskv+0x5bc>)
 8002296:	4413      	add	r3, r2
 8002298:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <_Z14LineSensorTaskv+0x5d0>
		{
			if (cluster_start_rear == SENSOR_COUNT + 1)
 80022a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022aa:	2b21      	cmp	r3, #33	; 0x21
 80022ac:	d103      	bne.n	80022b6 <_Z14LineSensorTaskv+0x5b2>
			{
				cluster_start_rear = current_idx;
 80022ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
			cluster_end_rear = current_idx;
 80022b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022be:	e06b      	b.n	8002398 <_Z14LineSensorTaskv+0x694>
 80022c0:	200001c0 	.word	0x200001c0
 80022c4:	20000288 	.word	0x20000288
 80022c8:	20000294 	.word	0x20000294
 80022cc:	41840000 	.word	0x41840000
 80022d0:	3e4ccccd 	.word	0x3e4ccccd
		}
		else
		{
			if (cluster_start_rear != SENSOR_COUNT + 1)
 80022d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022d8:	2b21      	cmp	r3, #33	; 0x21
 80022da:	d05d      	beq.n	8002398 <_Z14LineSensorTaskv+0x694>
				//float cluster_center = (cluster_start_rear + 1 + cluster_end_rear + 1) / 2.0f;
				// calculate the position of the line relative to the center of the sensor
				//float line_position = cluster_center - 16.5f;
				//line_position = line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				// add the line position to the vector
				float line_position = 0.0f;
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
				float denominator = 0.0f;
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(i = cluster_start_rear + 1; i <= cluster_end_rear + 1; ++i)
 80022e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022ec:	3301      	adds	r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80022f4:	e02a      	b.n	800234c <_Z14LineSensorTaskv+0x648>
				{
					line_position += ls_data.adc_values_r[i] * i;
 80022f6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80022fa:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <_Z14LineSensorTaskv+0x6c4>)
 80022fc:	3320      	adds	r3, #32
 80022fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002302:	461a      	mov	r2, r3
 8002304:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002314:	edd7 7a00 	vldr	s15, [r7]
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	edc7 7a00 	vstr	s15, [r7]
					denominator += ls_data.adc_values_r[i];
 8002320:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <_Z14LineSensorTaskv+0x6c4>)
 8002326:	3320      	adds	r3, #32
 8002328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002334:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				for(i = cluster_start_rear + 1; i <= cluster_end_rear + 1; ++i)
 8002340:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002344:	3301      	adds	r3, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800234c:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8002350:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002354:	3301      	adds	r3, #1
 8002356:	429a      	cmp	r2, r3
 8002358:	ddcd      	ble.n	80022f6 <_Z14LineSensorTaskv+0x5f2>
				}
				line_position = ((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 800235a:	edd7 6a00 	vldr	s13, [r7]
 800235e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002366:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80023cc <_Z14LineSensorTaskv+0x6c8>
 800236a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800236e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80023d0 <_Z14LineSensorTaskv+0x6cc>
 8002372:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002376:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 800237a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800237e:	edc7 7a00 	vstr	s15, [r7]

				ls_data.rear.push_back(line_position);
 8002382:	463b      	mov	r3, r7
 8002384:	4619      	mov	r1, r3
 8002386:	4813      	ldr	r0, [pc, #76]	; (80023d4 <_Z14LineSensorTaskv+0x6d0>)
 8002388:	f000 f88b 	bl	80024a2 <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_rear = SENSOR_COUNT + 1;
 800238c:	2321      	movs	r3, #33	; 0x21
 800238e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cluster_end_rear = SENSOR_COUNT + 1;
 8002392:	2321      	movs	r3, #33	; 0x21
 8002394:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8002398:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800239c:	3301      	adds	r3, #1
 800239e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80023a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023a6:	2b1f      	cmp	r3, #31
 80023a8:	f67f aef8 	bls.w	800219c <_Z14LineSensorTaskv+0x498>
			}
		}
	}


	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <_Z14LineSensorTaskv+0x6d4>)
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <_Z14LineSensorTaskv+0x6d8>)
 80023b8:	4909      	ldr	r1, [pc, #36]	; (80023e0 <_Z14LineSensorTaskv+0x6dc>)
 80023ba:	480a      	ldr	r0, [pc, #40]	; (80023e4 <_Z14LineSensorTaskv+0x6e0>)
 80023bc:	f7ff fbb8 	bl	8001b30 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>
	//ls_data.position_front = -1.0f * ls_data.position_front * 2.5f / 100.0f / denominator_f;
	//ls_data.position_rear = ls_data.position_rear * 2.5f / 100.0f / denominator_r;


#endif
}
 80023c0:	bf00      	nop
 80023c2:	3750      	adds	r7, #80	; 0x50
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200001c0 	.word	0x200001c0
 80023cc:	41840000 	.word	0x41840000
 80023d0:	3e4ccccd 	.word	0x3e4ccccd
 80023d4:	20000294 	.word	0x20000294
 80023d8:	20000088 	.word	0x20000088
 80023dc:	20000080 	.word	0x20000080
 80023e0:	2000007c 	.word	0x2000007c
 80023e4:	20000074 	.word	0x20000074

080023e8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f87b 	bl	80024ec <_ZNSaIfEC1Ev>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f883 	bl	8002504 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002436:	461a      	mov	r2, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f877 	bl	800252c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff faf5 	bl	8001a30 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681c      	ldr	r4, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f875 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002468:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800246a:	461a      	mov	r2, r3
 800246c:	4629      	mov	r1, r5
 800246e:	4620      	mov	r0, r4
 8002470:	f000 f87a 	bl	8002568 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ffd1 	bl	800241e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bdb0      	pop	{r4, r5, r7, pc}

08002486 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f875 	bl	8002584 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d00c      	beq.n	80024d2 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	f000 f895 	bl	80025f0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	1d1a      	adds	r2, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]
      }
 80024d0:	e008      	b.n	80024e4 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f89e 	bl	8002614 <_ZNSt6vectorIfSaIfEE3endEv>
 80024d8:	4603      	mov	r3, r0
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8aa 	bl	8002638 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f91b 	bl	8002730 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
	{ }
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
	if (__p)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f8fe 	bl	8002746 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f904 	bl	8002784 <_ZSt8_DestroyIPfEvT_S1_>
    }
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	109b      	asrs	r3, r3, #2
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ffd3 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80025ac:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80025ae:	461a      	mov	r2, r3
 80025b0:	4621      	mov	r1, r4
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f7ff ffd8 	bl	8002568 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}

080025c6 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 80025c6:	b590      	push	{r4, r7, lr}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80025d0:	6838      	ldr	r0, [r7, #0]
 80025d2:	f000 f8ed 	bl	80027b0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80025d6:	4603      	mov	r3, r0
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4619      	mov	r1, r3
 80025de:	2004      	movs	r0, #4
 80025e0:	f7ff fa1a 	bl	8001a18 <_ZnwjPv>
 80025e4:	4603      	mov	r3, r0
 80025e6:	601c      	str	r4, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}

080025f0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f8d7 	bl	80027b0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8002602:	4603      	mov	r3, r0
 8002604:	4619      	mov	r1, r3
 8002606:	68b8      	ldr	r0, [r7, #8]
 8002608:	f7ff ffdd 	bl	80025c6 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	1d1a      	adds	r2, r3, #4
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f8cd 	bl	80027c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 8002646:	2101      	movs	r1, #1
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f8cc 	bl	80027e6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800264e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f909 	bl	8002874 <_ZNSt6vectorIfSaIfEE5beginEv>
 8002662:	4603      	mov	r3, r0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	f107 0214 	add.w	r2, r7, #20
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f90f 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002676:	4603      	mov	r3, r0
 8002678:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f91d 	bl	80028be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8002684:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800268a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	18d5      	adds	r5, r2, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f88b 	bl	80027b0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	4629      	mov	r1, r5
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff ffa5 	bl	80025f0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f92d 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80026b4:	4603      	mov	r3, r0
 80026b6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff49 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80026c0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	4621      	mov	r1, r4
 80026c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026c8:	f000 f90d 	bl	80028e6 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 80026cc:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	3304      	adds	r3, #4
 80026d2:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f918 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80026de:	4603      	mov	r3, r0
 80026e0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff34 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80026ea:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f0:	4620      	mov	r0, r4
 80026f2:	f000 f8f8 	bl	80028e6 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 80026f6:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80026f8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8002704:	461a      	mov	r2, r3
 8002706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002708:	f7ff ff10 	bl	800252c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	441a      	add	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	609a      	str	r2, [r3, #8]
    }
 8002724:	bf00      	nop
 8002726:	3730      	adds	r7, #48	; 0x30
 8002728:	46bd      	mov	sp, r7
 800272a:	bdb0      	pop	{r4, r5, r7, pc}
 800272c:	08021b68 	.word	0x08021b68

08002730 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002746:	b580      	push	{r7, lr}
 8002748:	b088      	sub	sp, #32
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 800275e:	f7ff f953 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	  {
	    ::operator delete(__p);
 8002768:	69b8      	ldr	r0, [r7, #24]
 800276a:	f01a fc0f 	bl	801cf8c <_ZdlPv>
	    return;
 800276e:	e005      	b.n	800277c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	69f8      	ldr	r0, [r7, #28]
 8002776:	f000 f96a 	bl	8002a4e <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 800278e:	f7ff f93b 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f8c2 	bl	8002924 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 80027a0:	e003      	b.n	80027aa <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8d6 	bl	8002956 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80027e6:	b590      	push	{r4, r7, lr}
 80027e8:	b087      	sub	sp, #28
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f8ba 	bl	800296c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80027f8:	4604      	mov	r4, r0
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f8c7 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002800:	4603      	mov	r3, r0
 8002802:	1ae2      	subs	r2, r4, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	bf34      	ite	cc
 800280a:	2301      	movcc	r3, #1
 800280c:	2300      	movcs	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f01a fbd7 	bl	801cfc8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f8b7 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002820:	4604      	mov	r4, r0
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8b3 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002828:	4603      	mov	r3, r0
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	f107 0208 	add.w	r2, r7, #8
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f8b9 	bl	80029ae <_ZSt3maxIjERKT_S2_S2_>
 800283c:	4603      	mov	r3, r0
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4423      	add	r3, r4
 8002842:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f8a2 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800284a:	4602      	mov	r2, r0
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4293      	cmp	r3, r2
 8002850:	d306      	bcc.n	8002860 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f88a 	bl	800296c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8002858:	4602      	mov	r2, r0
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	4293      	cmp	r3, r2
 800285e:	d904      	bls.n	800286a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f883 	bl	800296c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8002866:	4603      	mov	r3, r0
 8002868:	e000      	b.n	800286c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 800286a:	697b      	ldr	r3, [r7, #20]
      }
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}

08002874 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff9e 	bl	80027c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f835 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80028a4:	4603      	mov	r3, r0
 80028a6:	681c      	ldr	r4, [r3, #0]
 80028a8:	6838      	ldr	r0, [r7, #0]
 80028aa:	f000 f830 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1ae3      	subs	r3, r4, r3
 80028b4:	109b      	asrs	r3, r3, #2
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}

080028be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f87f 	bl	80029d6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 80028d8:	4603      	mov	r3, r0
 80028da:	e000      	b.n	80028de <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 80028dc:	2300      	movs	r3, #0
      }
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80028e6:	b590      	push	{r4, r7, lr}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af02      	add	r7, sp, #8
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80028f4:	f88d 4000 	strb.w	r4, [sp]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f889 	bl	8002a16 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8002904:	4603      	mov	r3, r0
      }
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bd90      	pop	{r4, r7, pc}

0800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800292e:	e009      	b.n	8002944 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f89b 	bl	8002a6c <_ZSt11__addressofIfEPT_RS0_>
 8002936:	4603      	mov	r3, r0
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f8a2 	bl	8002a82 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d1f1      	bne.n	8002930 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f8b4 	bl	8002ae4 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800297c:	4603      	mov	r3, r0
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f896 	bl	8002ab0 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8002984:	4603      	mov	r3, r0
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	109b      	asrs	r3, r3, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d201      	bcs.n	80029c8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	e000      	b.n	80029ca <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80029c8:	687b      	ldr	r3, [r7, #4]
    }
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80029e8:	f7ff f80e 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f01a facc 	bl	801cf94 <_Znwj>
 80029fc:	4603      	mov	r3, r0
 80029fe:	e006      	b.n	8002a0e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f8b5 	bl	8002b74 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	bf00      	nop
      { return __a.allocate(__n); }
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f865 	bl	8002afa <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8002a30:	4603      	mov	r3, r0
      }
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
    }
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	68b8      	ldr	r0, [r7, #8]
 8002a62:	f01a fa95 	bl	801cf90 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffd5 	bl	8002a3a <_ZSt10destroy_atIfEvPT_>
    }
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002aa0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002ab8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002abc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffea 	bl	8002a98 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ac8:	f107 0208 	add.w	r2, r7, #8
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f82e 	bl	8002b34 <_ZSt3minIjERKT_S2_S2_>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	681b      	ldr	r3, [r3, #0]
      }
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002afa:	b5b0      	push	{r4, r5, r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f85d 	bl	8002bc8 <_ZSt12__niter_baseIPfET_S1_>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	68b8      	ldr	r0, [r7, #8]
 8002b12:	f000 f859 	bl	8002bc8 <_ZSt12__niter_baseIPfET_S1_>
 8002b16:	4605      	mov	r5, r0
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f855 	bl	8002bc8 <_ZSt12__niter_baseIPfET_S1_>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4629      	mov	r1, r5
 8002b24:	4620      	mov	r0, r4
 8002b26:	f000 f85a 	bl	8002bde <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8002b2a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}

08002b34 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d201      	bcs.n	8002b4e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	e000      	b.n	8002b50 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002b4e:	687b      	ldr	r3, [r7, #4]
    }
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002b64:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff ffeb 	bl	8002b5c <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	bf8c      	ite	hi
 8002b8e:	2301      	movhi	r3, #1
 8002b90:	2300      	movls	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d301      	bcc.n	8002bae <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002baa:	f01a fa0a 	bl	801cfc2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002bae:	f01a fa05 	bl	801cfbc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f01a f9ec 	bl	801cf94 <_Znwj>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	bf00      	nop
      }
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZSt12__niter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	109b      	asrs	r3, r3, #2
 8002bf4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	dd06      	ble.n	8002c0a <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	461a      	mov	r2, r3
 8002c02:	68f9      	ldr	r1, [r7, #12]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f01d fcc2 	bl	802058e <memmove>
      return __result + __count;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4413      	add	r3, r2
    }
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_ZN16LineSensorData_sD1Ev>:
	float position_front;
	float position_rear;

	std::vector<float> front;
	std::vector<float> rear;
}LineSensorData_s;
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	33d4      	adds	r3, #212	; 0xd4
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fc12 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	33c8      	adds	r3, #200	; 0xc8
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fc0d 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_Z41__static_initialization_and_destruction_0ii>:
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d116      	bne.n	8002c7e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <_Z41__static_initialization_and_destruction_0ii+0x3e>
LineSensorData_s ls_data = {0u};
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002c5c:	33c8      	adds	r3, #200	; 0xc8
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	480e      	ldr	r0, [pc, #56]	; (8002ca0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002c68:	f7fe fefb 	bl	8001a62 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002c6e:	33d4      	adds	r3, #212	; 0xd4
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	480a      	ldr	r0, [pc, #40]	; (8002ca4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002c7a:	f7fe fef2 	bl	8001a62 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d102      	bne.n	8002c94 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8002c8e:	4803      	ldr	r0, [pc, #12]	; (8002c9c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002c90:	f7ff ffc3 	bl	8002c1a <_ZN16LineSensorData_sD1Ev>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200001c0 	.word	0x200001c0
 8002ca0:	20000288 	.word	0x20000288
 8002ca4:	20000294 	.word	0x20000294

08002ca8 <_GLOBAL__sub_I_ls_data>:
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7ff ffc5 	bl	8002c40 <_Z41__static_initialization_and_destruction_0ii>
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_GLOBAL__sub_D_ls_data>:
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7ff ffbd 	bl	8002c40 <_Z41__static_initialization_and_destruction_0ii>
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cd6:	eef0 7ae7 	vabs.f32	s15, s15
 8002cda:	eeb0 0a67 	vmov.f32	s0, s15
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cf2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cfa:	eeb4 7a67 	vcmp.f32	s14, s15
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	bf6c      	ite	vs
 8002d04:	2301      	movvs	r3, #1
 8002d06:	2300      	movvc	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_ZN3PIDC1Efffffffff>:
};

class PID
{
public:
    PID(float kp, float ki, float kd, float tau, float T, float minOutput, float maxOutput, float deadband, float derivativeFilterAlpha)
 8002d20:	b480      	push	{r7}
 8002d22:	b08b      	sub	sp, #44	; 0x2c
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24
 8002d28:	ed87 0a08 	vstr	s0, [r7, #32]
 8002d2c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002d30:	ed87 1a06 	vstr	s2, [r7, #24]
 8002d34:	edc7 1a05 	vstr	s3, [r7, #20]
 8002d38:	ed87 2a04 	vstr	s4, [r7, #16]
 8002d3c:	edc7 2a03 	vstr	s5, [r7, #12]
 8002d40:	ed87 3a02 	vstr	s6, [r7, #8]
 8002d44:	edc7 3a01 	vstr	s7, [r7, #4]
 8002d48:	ed87 4a00 	vstr	s8, [r7]
        : kp_(kp), ki_(ki), kd_(kd), tau_(tau), T_(T), minOutput_(minOutput), maxOutput_(maxOutput), deadband_(deadband), derivativeFilterAlpha_(derivativeFilterAlpha)
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	6a3a      	ldr	r2, [r7, #32]
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	615a      	str	r2, [r3, #20]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	619a      	str	r2, [r3, #24]
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	61da      	str	r2, [r3, #28]
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	621a      	str	r2, [r3, #32]
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	372c      	adds	r7, #44	; 0x2c
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_ZN3PIDD1Ev>:

    ~PID() {}
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <_ZN3PID6updateEfff>:
    	kp_                    = kp;
		ki_                    = ki;
		kd_                    = kd;
    }

    float update(float setpoint, float processVariable, float dt)
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dcc:	edc7 0a01 	vstr	s1, [r7, #4]
 8002dd0:	ed87 1a00 	vstr	s2, [r7]
    {
        // Small value to avoid division by zero
        const float epsilon = std::numeric_limits<float>::epsilon();
 8002dd4:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8002dd8:	623b      	str	r3, [r7, #32]

        // Check if the time step is very close to zero, return zero output to avoid numerical issues
        if (std::abs(dt) < epsilon) { return 0.0f; }
 8002dda:	ed97 0a00 	vldr	s0, [r7]
 8002dde:	f7ff ff73 	bl	8002cc8 <_ZSt3absf>
 8002de2:	eef0 7a40 	vmov.f32	s15, s0
 8002de6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003010 <_ZN3PID6updateEfff+0x250>
 8002dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	bf4c      	ite	mi
 8002df4:	2301      	movmi	r3, #1
 8002df6:	2300      	movpl	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <_ZN3PID6updateEfff+0x44>
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e0fd      	b.n	8003000 <_ZN3PID6updateEfff+0x240>

        // Calculate the current error between the setpoint and the process variable
        float error = setpoint - processVariable;
 8002e04:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e10:	edc7 7a07 	vstr	s15, [r7, #28]

        // Check if a zero-crossing has occurred (change in sign of error)
        bool zeroCrossed = (prevError_ * error) < 0.0f;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002e1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	bf4c      	ite	mi
 8002e2c:	2301      	movmi	r3, #1
 8002e2e:	2300      	movpl	r3, #0
 8002e30:	76fb      	strb	r3, [r7, #27]

        // Update the integral term if no zero-crossing has occurred
        if (!zeroCrossed)
 8002e32:	7efb      	ldrb	r3, [r7, #27]
 8002e34:	f083 0301 	eor.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d05e      	beq.n	8002efc <_ZN3PID6updateEfff+0x13c>
        {
            // Calculate the integral term without considering saturation
            float unsaturatedIntegral = integral_;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24

            // Integrate positive error if within bounds
            if (error > 0.0f && unsaturatedIntegral < maxOutput_) { unsaturatedIntegral += (error * dt); }
 8002e44:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	dd16      	ble.n	8002e80 <_ZN3PID6updateEfff+0xc0>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	d50c      	bpl.n	8002e80 <_ZN3PID6updateEfff+0xc0>
 8002e66:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e6a:	edd7 7a00 	vldr	s15, [r7]
 8002e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8002e7e:	e01c      	b.n	8002eba <_ZN3PID6updateEfff+0xfa>
            // Integrate negative error if within bounds
            else if (error < 0.0f && unsaturatedIntegral > minOutput_) { unsaturatedIntegral += (error * dt); }
 8002e80:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8c:	d515      	bpl.n	8002eba <_ZN3PID6updateEfff+0xfa>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e94:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	dd0b      	ble.n	8002eba <_ZN3PID6updateEfff+0xfa>
 8002ea2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ea6:	edd7 7a00 	vldr	s15, [r7]
 8002eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            // Handle NaN case: Reset unsaturated integral term to zero
            if (std::isnan(unsaturatedIntegral)) { unsaturatedIntegral = 0.0f; }
 8002eba:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002ebe:	f7ff ff13 	bl	8002ce8 <_ZSt5isnanf>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <_ZN3PID6updateEfff+0x10e>
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24

            // Calculate the adjustment needed due to saturation
            float deltaIntegral = unsaturatedIntegral - integral_;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002ed4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002edc:	edc7 7a05 	vstr	s15, [r7, #20]

            // Back-calculation: Adjust the integral term based on the impact of saturation
            integral_ += (error * dt)/* - deltaIntegral*/;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eea:	edd7 7a00 	vldr	s15, [r7]
 8002eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        {
            // Zero-crossing deadband: Do not update the integral term
        }

        // Anti-windup: Limit the integral term to the specified range
        integral_ = std::clamp(integral_, minOutput_, maxOutput_);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f103 0114 	add.w	r1, r3, #20
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f000 f981 	bl	8003214 <_ZSt5clampIfERKT_S2_S2_S2_>
 8002f12:	4603      	mov	r3, r0
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
        // Deadband: Scale the integral term based on the proximity to the deadband
        //float deadbandFactor = 1.0f - std::min(1.0f, std::abs(error) / (deadband_ + epsilon));
        //integral_ *= deadbandFactor;

        // Calculate the derivative term with low-pass filtering
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f3e:	ed97 6a07 	vldr	s12, [r7, #28]
 8002f42:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f46:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002f4a:	edd7 6a00 	vldr	s13, [r7]
 8002f4e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

        // Calculate the PID controller output using proportional, integral, and derivative terms
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	ed93 7a00 	vldr	s14, [r3]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f72:	eddf 6a27 	vldr	s13, [pc, #156]	; 8003010 <_ZN3PID6updateEfff+0x250>
 8002f76:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002f7a:	ed97 6a00 	vldr	s12, [r7]
 8002f7e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fa2:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8003010 <_ZN3PID6updateEfff+0x250>
 8002fa6:	ee37 6a86 	vadd.f32	s12, s15, s12
 8002faa:	edd7 5a00 	vldr	s11, [r7]
 8002fae:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002fb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd8:	edc7 7a04 	vstr	s15, [r7, #16]

        // Output clamping: Limit the output within the specified range
        output = std::clamp(output, minOutput_, maxOutput_);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f103 0114 	add.w	r1, r3, #20
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f103 0218 	add.w	r2, r3, #24
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 f911 	bl	8003214 <_ZSt5clampIfERKT_S2_S2_S2_>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	613b      	str	r3, [r7, #16]

        // Update the previous error for the next iteration
        prevError_ = error;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

        // Return the calculated PID controller output
        return output;
 8002ffe:	693b      	ldr	r3, [r7, #16]
    }
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eeb0 0a67 	vmov.f32	s0, s15
 8003008:	3728      	adds	r7, #40	; 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	34000000 	.word	0x34000000

08003014 <_Z16MotorControlTaskv>:
PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};
uint32_t tick_counter = 0u;
uint32_t tick_counter_prev = 0u;

void MotorControlTask()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 800301a:	4b6b      	ldr	r3, [pc, #428]	; (80031c8 <_Z16MotorControlTaskv+0x1b4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003022:	d90a      	bls.n	800303a <_Z16MotorControlTaskv+0x26>
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <_Z16MotorControlTaskv+0x1b4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800302c:	d205      	bcs.n	800303a <_Z16MotorControlTaskv+0x26>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 800302e:	2201      	movs	r2, #1
 8003030:	2108      	movs	r1, #8
 8003032:	4866      	ldr	r0, [pc, #408]	; (80031cc <_Z16MotorControlTaskv+0x1b8>)
 8003034:	f00f fc7e 	bl	8012934 <HAL_GPIO_WritePin>
 8003038:	e018      	b.n	800306c <_Z16MotorControlTaskv+0x58>
	}
	else if((motorcontrol.actual_velocity < 0.3f) && (motorcontrol.target_velocity < 0.3f))
 800303a:	4b65      	ldr	r3, [pc, #404]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 800303c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003040:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80031d4 <_Z16MotorControlTaskv+0x1c0>
 8003044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304c:	d50e      	bpl.n	800306c <_Z16MotorControlTaskv+0x58>
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003050:	edd3 7a03 	vldr	s15, [r3, #12]
 8003054:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80031d4 <_Z16MotorControlTaskv+0x1c0>
 8003058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800305c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003060:	d504      	bpl.n	800306c <_Z16MotorControlTaskv+0x58>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	2108      	movs	r1, #8
 8003066:	4859      	ldr	r0, [pc, #356]	; (80031cc <_Z16MotorControlTaskv+0x1b8>)
 8003068:	f00f fc64 	bl	8012934 <HAL_GPIO_WritePin>
	}

	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <_Z16MotorControlTaskv+0x1c4>)
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003078:	eddf 6a58 	vldr	s13, [pc, #352]	; 80031dc <_Z16MotorControlTaskv+0x1c8>
 800307c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003080:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80031e0 <_Z16MotorControlTaskv+0x1cc>
 8003084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003088:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800308c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003090:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003092:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8003096:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <_Z16MotorControlTaskv+0x1c4>)
 8003098:	885b      	ldrh	r3, [r3, #2]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030a2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80031dc <_Z16MotorControlTaskv+0x1c8>
 80030a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030aa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80031e0 <_Z16MotorControlTaskv+0x1cc>
 80030ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80031e4 <_Z16MotorControlTaskv+0x1d0>
 80030b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80030ba:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80031e8 <_Z16MotorControlTaskv+0x1d4>
 80030be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030c2:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 80030c4:	edc3 7a01 	vstr	s15, [r3, #4]


	tick_counter_prev = tick_counter;
 80030c8:	4b48      	ldr	r3, [pc, #288]	; (80031ec <_Z16MotorControlTaskv+0x1d8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a48      	ldr	r2, [pc, #288]	; (80031f0 <_Z16MotorControlTaskv+0x1dc>)
 80030ce:	6013      	str	r3, [r2, #0]
	tick_counter = HAL_GetTick();
 80030d0:	f00d f9d4 	bl	801047c <HAL_GetTick>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4a45      	ldr	r2, [pc, #276]	; (80031ec <_Z16MotorControlTaskv+0x1d8>)
 80030d8:	6013      	str	r3, [r2, #0]
    float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <_Z16MotorControlTaskv+0x1d8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030e6:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <_Z16MotorControlTaskv+0x1dc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030f6:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80031f4 <_Z16MotorControlTaskv+0x1e0>
 80030fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030fe:	edc7 7a01 	vstr	s15, [r7, #4]
	motorcontrol.duty_cycle = motorcontrol_pid.update(motorcontrol.target_velocity, motorcontrol.actual_velocity, dt);
 8003102:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003104:	edd3 7a03 	vldr	s15, [r3, #12]
 8003108:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 800310a:	ed93 7a02 	vldr	s14, [r3, #8]
 800310e:	ed97 1a01 	vldr	s2, [r7, #4]
 8003112:	eef0 0a47 	vmov.f32	s1, s14
 8003116:	eeb0 0a67 	vmov.f32	s0, s15
 800311a:	4837      	ldr	r0, [pc, #220]	; (80031f8 <_Z16MotorControlTaskv+0x1e4>)
 800311c:	f7ff fe50 	bl	8002dc0 <_ZN3PID6updateEfff>
 8003120:	eef0 7a40 	vmov.f32	s15, s0
 8003124:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003126:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle += 0.5f;
 800312a:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 800312c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003130:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003134:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003138:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 800313a:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003140:	edd3 7a04 	vldr	s15, [r3, #16]
 8003144:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80031fc <_Z16MotorControlTaskv+0x1e8>
 8003148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	dd01      	ble.n	8003156 <_Z16MotorControlTaskv+0x142>
 8003152:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <_Z16MotorControlTaskv+0x1ec>)
 8003154:	e001      	b.n	800315a <_Z16MotorControlTaskv+0x146>
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 800315c:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.05f) ? 0.05f : motorcontrol.duty_cycle;
 800315e:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003160:	edd3 7a04 	vldr	s15, [r3, #16]
 8003164:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003204 <_Z16MotorControlTaskv+0x1f0>
 8003168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	d501      	bpl.n	8003176 <_Z16MotorControlTaskv+0x162>
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <_Z16MotorControlTaskv+0x1f4>)
 8003174:	e001      	b.n	800317a <_Z16MotorControlTaskv+0x166>
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 800317c:	6113      	str	r3, [r2, #16]
		motorcontrol.duty_cycle = 0.5f;

	}
*/

    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 8003180:	edd3 7a04 	vldr	s15, [r3, #16]
 8003184:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800320c <_Z16MotorControlTaskv+0x1f8>
 8003188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <_Z16MotorControlTaskv+0x1fc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003194:	ee17 2a90 	vmov	r2, s15
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <_Z16MotorControlTaskv+0x1bc>)
 800319c:	edd3 7a04 	vldr	s15, [r3, #16]
 80031a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800320c <_Z16MotorControlTaskv+0x1f8>
 80031a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800320c <_Z16MotorControlTaskv+0x1f8>
 80031ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <_Z16MotorControlTaskv+0x1fc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b8:	ee17 2a90 	vmov	r2, s15
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34

}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000304 	.word	0x20000304
 80031cc:	42021400 	.word	0x42021400
 80031d0:	200002a0 	.word	0x200002a0
 80031d4:	3e99999a 	.word	0x3e99999a
 80031d8:	2000014c 	.word	0x2000014c
 80031dc:	45800000 	.word	0x45800000
 80031e0:	40533333 	.word	0x40533333
 80031e4:	3fcb851f 	.word	0x3fcb851f
 80031e8:	3c0ce704 	.word	0x3c0ce704
 80031ec:	200002e4 	.word	0x200002e4
 80031f0:	200002e8 	.word	0x200002e8
 80031f4:	447a0000 	.word	0x447a0000
 80031f8:	200002b4 	.word	0x200002b4
 80031fc:	3f733333 	.word	0x3f733333
 8003200:	3f733333 	.word	0x3f733333
 8003204:	3d4ccccd 	.word	0x3d4ccccd
 8003208:	3d4ccccd 	.word	0x3d4ccccd
 800320c:	44e54000 	.word	0x44e54000
 8003210:	20000bf4 	.word	0x20000bf4

08003214 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	ed93 7a00 	vldr	s14, [r3]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	d501      	bpl.n	800323a <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	e00d      	b.n	8003256 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	ed93 7a00 	vldr	s14, [r3]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324e:	d501      	bpl.n	8003254 <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	e000      	b.n	8003256 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8003254:	68fb      	ldr	r3, [r7, #12]
    }
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <_Z41__static_initialization_and_destruction_0ii>:
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d119      	bne.n	80032a8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327a:	4293      	cmp	r3, r2
 800327c:	d114      	bne.n	80032a8 <_Z41__static_initialization_and_destruction_0ii+0x44>
PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};
 800327e:	ed9f 4a12 	vldr	s8, [pc, #72]	; 80032c8 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8003282:	eddf 3a12 	vldr	s7, [pc, #72]	; 80032cc <_Z41__static_initialization_and_destruction_0ii+0x68>
 8003286:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800328a:	eefe 2a00 	vmov.f32	s5, #224	; 0xbf000000 -0.5
 800328e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 80032d0 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8003292:	eddf 1a10 	vldr	s3, [pc, #64]	; 80032d4 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8003296:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80032c8 <_Z41__static_initialization_and_destruction_0ii+0x64>
 800329a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80032d8 <_Z41__static_initialization_and_destruction_0ii+0x74>
 800329e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80032dc <_Z41__static_initialization_and_destruction_0ii+0x78>
 80032a2:	480f      	ldr	r0, [pc, #60]	; (80032e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80032a4:	f7ff fd3c 	bl	8002d20 <_ZN3PIDC1Efffffffff>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d102      	bne.n	80032be <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80032b8:	4809      	ldr	r0, [pc, #36]	; (80032e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80032ba:	f7ff fd75 	bl	8002da8 <_ZN3PIDD1Ev>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	00000000 	.word	0x00000000
 80032cc:	3d4ccccd 	.word	0x3d4ccccd
 80032d0:	3c23d70a 	.word	0x3c23d70a
 80032d4:	3ca3d70a 	.word	0x3ca3d70a
 80032d8:	3f333333 	.word	0x3f333333
 80032dc:	3ea147ae 	.word	0x3ea147ae
 80032e0:	200002b4 	.word	0x200002b4

080032e4 <_GLOBAL__sub_I_motorcontrol>:
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032ec:	2001      	movs	r0, #1
 80032ee:	f7ff ffb9 	bl	8003264 <_Z41__static_initialization_and_destruction_0ii>
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_GLOBAL__sub_D_motorcontrol>:
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7ff ffb1 	bl	8003264 <_Z41__static_initialization_and_destruction_0ii>
 8003302:	bd80      	pop	{r7, pc}

08003304 <_Z10Radio_Initv>:
int pirate_percentage = 0;
bool flood_arrived = false;


void Radio_Init()
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &radio_rxBuffer[character_pointer], 1);
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <_Z10Radio_Initv+0x1c>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <_Z10Radio_Initv+0x20>)
 8003310:	4413      	add	r3, r2
 8003312:	2201      	movs	r2, #1
 8003314:	4619      	mov	r1, r3
 8003316:	4804      	ldr	r0, [pc, #16]	; (8003328 <_Z10Radio_Initv+0x24>)
 8003318:	f015 f866 	bl	80183e8 <HAL_UART_Receive_IT>

}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	200002f8 	.word	0x200002f8
 8003324:	200002ec 	.word	0x200002ec
 8003328:	200008e0 	.word	0x200008e0

0800332c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	6078      	str	r0, [r7, #4]
	uint8_t length = character_pointer - 1;
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_UART_RxCpltCallback+0x8c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	3b01      	subs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	if (radio_rxBuffer[character_pointer - 1] == '\r')
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_UART_RxCpltCallback+0x8c>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	3b01      	subs	r3, #1
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_UART_RxCpltCallback+0x90>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	2b0d      	cmp	r3, #13
 8003348:	d123      	bne.n	8003392 <HAL_UART_RxCpltCallback+0x66>
	{
		// Labirinth countdown message received
		if (length == 1)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_UART_RxCpltCallback+0x30>
		{
			countdown_value = radio_rxBuffer[0] - '0';
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <HAL_UART_RxCpltCallback+0x90>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	3b30      	subs	r3, #48	; 0x30
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_UART_RxCpltCallback+0x94>)
 800335a:	701a      	strb	r2, [r3, #0]
		}
		if (length == 6)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d114      	bne.n	800338c <HAL_UART_RxCpltCallback+0x60>
		{
			//FLOOD message received
			if (!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8003362:	4916      	ldr	r1, [pc, #88]	; (80033bc <HAL_UART_RxCpltCallback+0x90>)
 8003364:	4817      	ldr	r0, [pc, #92]	; (80033c4 <HAL_UART_RxCpltCallback+0x98>)
 8003366:	f7fc ff6b 	bl	8000240 <strcmp>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <HAL_UART_RxCpltCallback+0x4c>
			{
				flood_arrived = true;
 8003370:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <HAL_UART_RxCpltCallback+0x9c>)
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e009      	b.n	800338c <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_UART_RxCpltCallback+0xa0>)
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_UART_RxCpltCallback+0xa4>)
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_UART_RxCpltCallback+0xa8>)
 8003382:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <HAL_UART_RxCpltCallback+0xac>)
 8003384:	4915      	ldr	r1, [pc, #84]	; (80033dc <HAL_UART_RxCpltCallback+0xb0>)
 8003386:	480d      	ldr	r0, [pc, #52]	; (80033bc <HAL_UART_RxCpltCallback+0x90>)
 8003388:	f01d f890 	bl	80204ac <siscanf>
				pirate_percentage += (uint8_t)(radio_rxBuffer[5] - '0' + 1);*/

			}
		}

		character_pointer = 0u;
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_UART_RxCpltCallback+0x8c>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart4, &radio_rxBuffer[character_pointer++], 1);
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_UART_RxCpltCallback+0x8c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	b2d1      	uxtb	r1, r2
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <HAL_UART_RxCpltCallback+0x8c>)
 800339c:	7011      	strb	r1, [r2, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_UART_RxCpltCallback+0x90>)
 80033a2:	4413      	add	r3, r2
 80033a4:	2201      	movs	r2, #1
 80033a6:	4619      	mov	r1, r3
 80033a8:	480d      	ldr	r0, [pc, #52]	; (80033e0 <HAL_UART_RxCpltCallback+0xb4>)
 80033aa:	f015 f81d 	bl	80183e8 <HAL_UART_Receive_IT>

}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200002f8 	.word	0x200002f8
 80033bc:	200002ec 	.word	0x200002ec
 80033c0:	2000008c 	.word	0x2000008c
 80033c4:	08021b84 	.word	0x08021b84
 80033c8:	20000300 	.word	0x20000300
 80033cc:	200002fc 	.word	0x200002fc
 80033d0:	200002fb 	.word	0x200002fb
 80033d4:	200002fa 	.word	0x200002fa
 80033d8:	200002f9 	.word	0x200002f9
 80033dc:	08021b8c 	.word	0x08021b8c
 80033e0:	200008e0 	.word	0x200008e0

080033e4 <_Z16SetSteeringAnglef>:
uint8_t Is_First_Captured = 0;


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	ed87 0a01 	vstr	s0, [r7, #4]
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <_Z16SetSteeringAnglef+0x64>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80033f6:	d91c      	bls.n	8003432 <_Z16SetSteeringAnglef+0x4e>
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <_Z16SetSteeringAnglef+0x64>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8003400:	d217      	bcs.n	8003432 <_Z16SetSteeringAnglef+0x4e>
	{
		uint16_t compare = SERVO_NULL + (angle/ 22.5f * SERVO_RANGE);
 8003402:	ed97 7a01 	vldr	s14, [r7, #4]
 8003406:	eddf 6a11 	vldr	s13, [pc, #68]	; 800344c <_Z16SetSteeringAnglef+0x68>
 800340a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800340e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003450 <_Z16SetSteeringAnglef+0x6c>
 8003412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003416:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003454 <_Z16SetSteeringAnglef+0x70>
 800341a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800341e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003422:	ee17 3a90 	vmov	r3, s15
 8003426:	81fb      	strh	r3, [r7, #14]
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <_Z16SetSteeringAnglef+0x74>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	89fa      	ldrh	r2, [r7, #14]
 800342e:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8003430:	e004      	b.n	800343c <_Z16SetSteeringAnglef+0x58>
	else
	{
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <_Z16SetSteeringAnglef+0x74>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	20000304 	.word	0x20000304
 800344c:	41b40000 	.word	0x41b40000
 8003450:	43c80000 	.word	0x43c80000
 8003454:	44960000 	.word	0x44960000
 8003458:	20000c8c 	.word	0x20000c8c

0800345c <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	// RISING
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7f1b      	ldrb	r3, [r3, #28]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d104      	bne.n	8003476 <HAL_TIM_IC_CaptureCallback+0x1a>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2200      	movs	r2, #0
 8003472:	625a      	str	r2, [r3, #36]	; 0x24
		float refClock = TIMCLOCK/(PRESCALAR);
		float mFactor = 1000000/refClock;

		usWidth_throttle = falling_value*mFactor;
	}
}
 8003474:	e024      	b.n	80034c0 <HAL_TIM_IC_CaptureCallback+0x64>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7f1b      	ldrb	r3, [r3, #28]
 800347a:	2b08      	cmp	r3, #8
 800347c:	d120      	bne.n	80034c0 <HAL_TIM_IC_CaptureCallback+0x64>
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 800347e:	210c      	movs	r1, #12
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f014 f863 	bl	801754c <HAL_TIM_ReadCapturedValue>
 8003486:	4603      	mov	r3, r0
 8003488:	4a0f      	ldr	r2, [pc, #60]	; (80034c8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800348a:	6013      	str	r3, [r2, #0]
		float refClock = TIMCLOCK/(PRESCALAR);
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <HAL_TIM_IC_CaptureCallback+0x70>)
 800348e:	60fb      	str	r3, [r7, #12]
		float mFactor = 1000000/refClock;
 8003490:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80034d0 <HAL_TIM_IC_CaptureCallback+0x74>
 8003494:	ed97 7a03 	vldr	s14, [r7, #12]
 8003498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800349c:	edc7 7a02 	vstr	s15, [r7, #8]
		usWidth_throttle = falling_value*mFactor;
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b8:	ee17 2a90 	vmov	r2, s15
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_TIM_IC_CaptureCallback+0x78>)
 80034be:	601a      	str	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000308 	.word	0x20000308
 80034cc:	49742400 	.word	0x49742400
 80034d0:	49742400 	.word	0x49742400
 80034d4:	20000304 	.word	0x20000304

080034d8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	7138      	strb	r0, [r7, #4]
 80034f8:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 80034fa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	09db      	lsrs	r3, r3, #7
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
 8003514:	bf00      	nop
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	7138      	strb	r0, [r7, #4]
 8003528:	bf00      	nop
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	f1c3 031f 	rsb	r3, r3, #31
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_ZNSt14numeric_limitsIfE7epsilonEv>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
 8003558:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eeb0 0a67 	vmov.f32	s0, s15
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	ed87 0a01 	vstr	s0, [r7, #4]
 8003576:	edc7 0a00 	vstr	s1, [r7]
 800357a:	edd7 0a00 	vldr	s1, [r7]
 800357e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003582:	f019 fe29 	bl	801d1d8 <atan2f>
 8003586:	eef0 7a40 	vmov.f32	s15, s0
 800358a:	eeb0 0a67 	vmov.f32	s0, s15
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	ed87 0a01 	vstr	s0, [r7, #4]
 800359e:	ed97 0a01 	vldr	s0, [r7, #4]
 80035a2:	f019 fe1b 	bl	801d1dc <cosf>
 80035a6:	eef0 7a40 	vmov.f32	s15, s0
 80035aa:	eeb0 0a67 	vmov.f32	s0, s15
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80035be:	edd7 7a01 	vldr	s15, [r7, #4]
 80035c2:	eef0 7ae7 	vabs.f32	s15, s15
 80035c6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	ed87 0a01 	vstr	s0, [r7, #4]
 80035de:	ed97 0a01 	vldr	s0, [r7, #4]
 80035e2:	f019 fe3f 	bl	801d264 <sinf>
 80035e6:	eef0 7a40 	vmov.f32	s15, s0
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_ZSt4log2f>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80035fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8003602:	f019 fe75 	bl	801d2f0 <log2f>
 8003606:	eef0 7a40 	vmov.f32	s15, s0
 800360a:	eeb0 0a67 	vmov.f32	s0, s15
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <_ZNSt7complexIfEC1Eff>:
      typedef float value_type;
      typedef __complex__ float _ComplexT;

      _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }

      _GLIBCXX_CONSTEXPR complex(float __r = 0.0f, float __i = 0.0f)
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003620:	edc7 0a01 	vstr	s1, [r7, #4]
#if __cplusplus >= 201103L
      : _M_value{ __r, __i } { }
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6019      	str	r1, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_ZNKSt7complexIfE4realB5cxx11Ev>:
#if __cplusplus >= 201103L
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // DR 387. std::complex over-encapsulated.
      __attribute ((__abi_tag__ ("cxx11")))
      constexpr float
      real() const { return __real__ _M_value; }
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eeb0 0a67 	vmov.f32	s0, s15
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <_ZNSt7complexIfEmLEf>:
	_M_value -= __f;
	return *this;
      }

      _GLIBCXX20_CONSTEXPR complex&
      operator*=(float __f)
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	ed87 0a00 	vstr	s0, [r7]
      {
	_M_value *= __f;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	ee07 2a10 	vmov	s14, r2
 8003670:	edd7 7a00 	vldr	s15, [r7]
 8003674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003678:	ee06 3a90 	vmov	s13, r3
 800367c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003680:	ee17 1a10 	vmov	r1, s14
 8003684:	ee17 2a90 	vmov	r2, s15
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6019      	str	r1, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
	return *this;
 800368e:	687b      	ldr	r3, [r7, #4]
      }
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_ZNKSt7complexIfE5__repEv>:
	  const _ComplexT __t = __z.__rep();
	  _M_value /= __t;
	  return *this;
	}

      _GLIBCXX_CONSTEXPR _ComplexT __rep() const { return _M_value; }
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	ee07 2a10 	vmov	s14, r2
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eeb0 0a47 	vmov.f32	s0, s14
 80036b6:	eef0 0a67 	vmov.f32	s1, s15
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_ZN3PID9get_debugEv>:
        kp_ = kp;
        ki_ = ki;
        kd_ = kd;
    }

    DebugOutput get_debug()
 80036c4:	b480      	push	{r7}
 80036c6:	b08b      	sub	sp, #44	; 0x2c
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6178      	str	r0, [r7, #20]
    {
    	return {derivative_, integral_, prevError_};
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
 80036de:	69f9      	ldr	r1, [r7, #28]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	ee06 1a90 	vmov	s13, r1
 80036e8:	ee07 2a10 	vmov	s14, r2
 80036ec:	ee07 3a90 	vmov	s15, r3
    }
 80036f0:	eeb0 0a66 	vmov.f32	s0, s13
 80036f4:	eef0 0a47 	vmov.f32	s1, s14
 80036f8:	eeb0 1a67 	vmov.f32	s2, s15
 80036fc:	372c      	adds	r7, #44	; 0x2c
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        Direction prev_direction = Direction::STRAIGHT;

        uint32_t tick_counter = 0u;
        uint32_t tick_counter_prev = 0u;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2210      	movs	r2, #16
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2210      	movs	r2, #16
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	615a      	str	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	619a      	str	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	621a      	str	r2, [r3, #32]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2e      	ldr	r2, [pc, #184]	; (800382c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x124>)
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3374      	adds	r3, #116	; 0x74
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe f972 	bl	8001a62 <_ZNSt6vectorIfSaIfEEC1Ev>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3380      	adds	r3, #128	; 0x80
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe f96d 	bl	8001a62 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	33a8      	adds	r3, #168	; 0xa8
 80037ca:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8003830 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x128>
 80037ce:	eddf 3a19 	vldr	s7, [pc, #100]	; 8003834 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x12c>
 80037d2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 80037d6:	eddf 2a18 	vldr	s5, [pc, #96]	; 8003838 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x130>
 80037da:	ed9f 2a18 	vldr	s4, [pc, #96]	; 800383c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x134>
 80037de:	eddf 1a15 	vldr	s3, [pc, #84]	; 8003834 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x12c>
 80037e2:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8003838 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x130>
 80037e6:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003840 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x138>
 80037ea:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8003844 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x13c>
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fa96 	bl	8002d20 <_ZN3PIDC1Efffffffff>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	33d8      	adds	r3, #216	; 0xd8
 80037f8:	ed9f 4a0f 	vldr	s8, [pc, #60]	; 8003838 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x130>
 80037fc:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8003800:	ed9f 3a11 	vldr	s6, [pc, #68]	; 8003848 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x140>
 8003804:	eddf 2a11 	vldr	s5, [pc, #68]	; 800384c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x144>
 8003808:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 800383c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x134>
 800380c:	eddf 1a09 	vldr	s3, [pc, #36]	; 8003834 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x12c>
 8003810:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8003838 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x130>
 8003814:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8003844 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x13c>
 8003818:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003850 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x148>
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fa7f 	bl	8002d20 <_ZN3PIDC1Efffffffff>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	42c80000 	.word	0x42c80000
 8003830:	3dcccccd 	.word	0x3dcccccd
 8003834:	3d4ccccd 	.word	0x3d4ccccd
 8003838:	00000000 	.word	0x00000000
 800383c:	3ba3d70a 	.word	0x3ba3d70a
 8003840:	3f30a3d7 	.word	0x3f30a3d7
 8003844:	40866666 	.word	0x40866666
 8003848:	41b40000 	.word	0x41b40000
 800384c:	c1b40000 	.word	0xc1b40000
 8003850:	40dccccd 	.word	0x40dccccd

08003854 <_ZN3jlb10ControllerD1Ev>:

        ~Controller() {}
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	33d8      	adds	r3, #216	; 0xd8
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff faa1 	bl	8002da8 <_ZN3PIDD1Ev>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	33a8      	adds	r3, #168	; 0xa8
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fa9c 	bl	8002da8 <_ZN3PIDD1Ev>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3380      	adds	r3, #128	; 0x80
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fdeb 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3374      	adds	r3, #116	; 0x74
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fde6 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	ed2d 8b02 	vpush	{d8}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            std::sort(line_positions.begin(), line_positions.end());
 80038a2:	68b8      	ldr	r0, [r7, #8]
 80038a4:	f7fe ffe6 	bl	8002874 <_ZNSt6vectorIfSaIfEE5beginEv>
 80038a8:	4604      	mov	r4, r0
 80038aa:	68b8      	ldr	r0, [r7, #8]
 80038ac:	f7fe feb2 	bl	8002614 <_ZNSt6vectorIfSaIfEE3endEv>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4619      	mov	r1, r3
 80038b4:	4620      	mov	r0, r4
 80038b6:	f005 fc45 	bl	8009144 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1) { return line_positions[0]; }
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	f7ff f867 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
 80038d0:	2100      	movs	r1, #0
 80038d2:	68b8      	ldr	r0, [r7, #8]
 80038d4:	f005 fc46 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 80038d8:	4603      	mov	r3, r0
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	e114      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            else if (line_positions.size() == 2)
 80038e0:	68b8      	ldr	r0, [r7, #8]
 80038e2:	f7ff f854 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 8096 	beq.w	8003a24 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x194>
            {
                switch (direction)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d00f      	beq.n	8003922 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x92>
 8003902:	2b02      	cmp	r3, #2
 8003904:	f300 808b 	bgt.w	8003a1e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x82>
 800390c:	2b01      	cmp	r3, #1
 800390e:	d07e      	beq.n	8003a0e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x17e>
 8003910:	e085      	b.n	8003a1e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8003912:	2100      	movs	r1, #0
 8003914:	68b8      	ldr	r0, [r7, #8]
 8003916:	f005 fc25 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 800391a:	4603      	mov	r3, r0
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	e0f3      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        if (direction == prev_direction)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	429a      	cmp	r2, r3
 8003930:	d136      	bne.n	80039a0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
                        {
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8003932:	2100      	movs	r1, #0
 8003934:	68b8      	ldr	r0, [r7, #8]
 8003936:	f005 fc15 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 800393a:	4603      	mov	r3, r0
 800393c:	ed93 7a00 	vldr	s14, [r3]
 8003940:	edd7 7a01 	vldr	s15, [r7, #4]
 8003944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003948:	eeb0 0a67 	vmov.f32	s0, s15
 800394c:	f7ff fe32 	bl	80035b4 <_ZSt4fabsf>
 8003950:	eeb0 8a40 	vmov.f32	s16, s0
 8003954:	2101      	movs	r1, #1
 8003956:	68b8      	ldr	r0, [r7, #8]
 8003958:	f005 fc04 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 800395c:	4603      	mov	r3, r0
 800395e:	ed93 7a00 	vldr	s14, [r3]
 8003962:	edd7 7a01 	vldr	s15, [r7, #4]
 8003966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800396a:	eeb0 0a67 	vmov.f32	s0, s15
 800396e:	f7ff fe21 	bl	80035b4 <_ZSt4fabsf>
 8003972:	eef0 7a40 	vmov.f32	s15, s0
 8003976:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d507      	bpl.n	8003990 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x100>
 8003980:	2100      	movs	r1, #0
 8003982:	68b8      	ldr	r0, [r7, #8]
 8003984:	f005 fbee 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003988:	4603      	mov	r3, r0
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	e0bc      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8003990:	2101      	movs	r1, #1
 8003992:	68b8      	ldr	r0, [r7, #8]
 8003994:	f005 fbe6 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003998:	4603      	mov	r3, r0
 800399a:	edd3 7a00 	vldr	s15, [r3]
 800399e:	e0b4      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                        }
                        else { return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1]; }
 80039a0:	2100      	movs	r1, #0
 80039a2:	68b8      	ldr	r0, [r7, #8]
 80039a4:	f005 fbde 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 80039a8:	4603      	mov	r3, r0
 80039aa:	ed93 7a00 	vldr	s14, [r3]
 80039ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ba:	f7ff fdfb 	bl	80035b4 <_ZSt4fabsf>
 80039be:	eeb0 8a40 	vmov.f32	s16, s0
 80039c2:	2101      	movs	r1, #1
 80039c4:	68b8      	ldr	r0, [r7, #8]
 80039c6:	f005 fbcd 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 80039ca:	4603      	mov	r3, r0
 80039cc:	ed93 7a00 	vldr	s14, [r3]
 80039d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80039d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d8:	eeb0 0a67 	vmov.f32	s0, s15
 80039dc:	f7ff fdea 	bl	80035b4 <_ZSt4fabsf>
 80039e0:	eef0 7a40 	vmov.f32	s15, s0
 80039e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	dd07      	ble.n	80039fe <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16e>
 80039ee:	2100      	movs	r1, #0
 80039f0:	68b8      	ldr	r0, [r7, #8]
 80039f2:	f005 fbb7 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 80039f6:	4603      	mov	r3, r0
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	e085      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 80039fe:	2101      	movs	r1, #1
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f005 fbaf 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003a06:	4603      	mov	r3, r0
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	e07d      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[1];
 8003a0e:	2101      	movs	r1, #1
 8003a10:	68b8      	ldr	r0, [r7, #8]
 8003a12:	f005 fba7 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003a16:	4603      	mov	r3, r0
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	e075      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8003a1e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8003b18 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8003a22:	e072      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 3)
 8003a24:	68b8      	ldr	r0, [r7, #8]
 8003a26:	f7fe ffb2 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d026      	beq.n	8003a88 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f8>
            {
                switch (direction)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d00e      	beq.n	8003a62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d2>
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	dc1c      	bgt.n	8003a82 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c2>
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d010      	beq.n	8003a72 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e2>
 8003a50:	e017      	b.n	8003a82 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8003a52:	2100      	movs	r1, #0
 8003a54:	68b8      	ldr	r0, [r7, #8]
 8003a56:	f005 fb85 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	e053      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1];
 8003a62:	2101      	movs	r1, #1
 8003a64:	68b8      	ldr	r0, [r7, #8]
 8003a66:	f005 fb7d 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	e04b      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[2];
 8003a72:	2102      	movs	r1, #2
 8003a74:	68b8      	ldr	r0, [r7, #8]
 8003a76:	f005 fb75 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	e043      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8003a82:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003b18 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8003a86:	e040      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 4)
 8003a88:	68b8      	ldr	r0, [r7, #8]
 8003a8a:	f7fe ff80 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d033      	beq.n	8003b06 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x276>
            {
                switch (direction)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d00e      	beq.n	8003ac6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x236>
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	dc29      	bgt.n	8003b00 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x226>
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d01d      	beq.n	8003af0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x260>
 8003ab4:	e024      	b.n	8003b00 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f005 fb53 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	edd3 7a00 	vldr	s15, [r3]
 8003ac4:	e021      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1] + line_positions[2] / 2.0f;
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	68b8      	ldr	r0, [r7, #8]
 8003aca:	f005 fb4b 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	ed93 8a00 	vldr	s16, [r3]
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	68b8      	ldr	r0, [r7, #8]
 8003ad8:	f005 fb44 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003adc:	4603      	mov	r3, r0
 8003ade:	ed93 7a00 	vldr	s14, [r3]
 8003ae2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aea:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003aee:	e00c      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[3];
 8003af0:	2103      	movs	r1, #3
 8003af2:	68b8      	ldr	r0, [r7, #8]
 8003af4:	f005 fb36 	bl	8009164 <_ZNSt6vectorIfSaIfEEixEj>
 8003af8:	4603      	mov	r3, r0
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	e004      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8003b00:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003b18 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8003b04:	e001      	b.n	8003b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else
            {
                // this should never happen

                return 0.0f;
 8003b06:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003b18 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
            }
        }
 8003b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	ecbd 8b02 	vpop	{d8}
 8003b16:	bd90      	pop	{r4, r7, pc}
	...

08003b20 <_ZN3jlb10Controller18get_control_paramsEv>:

        ControlParams get_control_params()
 8003b20:	b5b0      	push	{r4, r5, r7, lr}
 8003b22:	b09e      	sub	sp, #120	; 0x78
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
        {
        	current_velocity += std::numeric_limits<float>::epsilon();
 8003b28:	f7ff fd14 	bl	8003554 <_ZNSt14numeric_limitsIfE7epsilonEv>
 8003b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

        	//float               d5  = OFFSET + SLOPE * current_velocity;
        	float               d5  = OFFSET_EXP1 + std::log2(current_velocity + OFFSET_EXP2);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003b46:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003d90 <_ZN3jlb10Controller18get_control_paramsEv+0x270>
 8003b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b52:	f7ff fd4f 	bl	80035f4 <_ZSt4log2f>
 8003b56:	eef0 7a40 	vmov.f32	s15, s0
 8003b5a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003b5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b62:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            if ((d5 < D5_MIN) || std::isnan(d5)) d5 = D5_MIN;
 8003b66:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003b6a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b76:	d406      	bmi.n	8003b86 <_ZN3jlb10Controller18get_control_paramsEv+0x66>
 8003b78:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8003b7c:	f7ff f8b4 	bl	8002ce8 <_ZSt5isnanf>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <_ZN3jlb10Controller18get_control_paramsEv+0x6a>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <_ZN3jlb10Controller18get_control_paramsEv+0x6c>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <_ZN3jlb10Controller18get_control_paramsEv+0x76>
 8003b90:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003b94:	677b      	str	r3, [r7, #116]	; 0x74
            float               t5  = d5 / current_velocity;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8003b9c:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8003ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            float               T   = t5 / 3.0f * DAMPING;
 8003ba8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003bac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003bb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bb4:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003d94 <_ZN3jlb10Controller18get_control_paramsEv+0x274>
 8003bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            float               wp  = (1.0f / T) * sqrt(1.0f - DAMPING * DAMPING);
 8003bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003bc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bcc:	ee16 0a90 	vmov	r0, s13
 8003bd0:	f7fc fcac 	bl	800052c <__aeabi_f2d>
 8003bd4:	a36c      	add	r3, pc, #432	; (adr r3, 8003d88 <_ZN3jlb10Controller18get_control_paramsEv+0x268>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fcff 	bl	80005dc <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	f7fc ffd1 	bl	8000b8c <__aeabi_d2f>
 8003bea:	4603      	mov	r3, r0
 8003bec:	66bb      	str	r3, [r7, #104]	; 0x68
            float               phi = acosf(DAMPING);
 8003bee:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <_ZN3jlb10Controller18get_control_paramsEv+0x278>)
 8003bf0:	667b      	str	r3, [r7, #100]	; 0x64
            float               x   = wp / tan(phi);
 8003bf2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003bf4:	f7fc fc9a 	bl	800052c <__aeabi_f2d>
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	460d      	mov	r5, r1
 8003bfc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003bfe:	f7fc fc95 	bl	800052c <__aeabi_f2d>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	ec43 2b10 	vmov	d0, r2, r3
 8003c0a:	f019 fab1 	bl	801d170 <tan>
 8003c0e:	ec53 2b10 	vmov	r2, r3, d0
 8003c12:	4620      	mov	r0, r4
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7fc fe0b 	bl	8000830 <__aeabi_ddiv>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fc ffb3 	bl	8000b8c <__aeabi_d2f>
 8003c26:	4603      	mov	r3, r0
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
            std::complex<float> s1  = std::complex<float>(x, wp);
 8003c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c2e:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8003c32:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fcec 	bl	8003614 <_ZNSt7complexIfEC1Eff>
            std::complex<float> s2  = std::complex<float>(x, -wp);
 8003c3c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003c40:	eef1 7a67 	vneg.f32	s15, s15
 8003c44:	f107 0320 	add.w	r3, r7, #32
 8003c48:	eef0 0a67 	vmov.f32	s1, s15
 8003c4c:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fcdf 	bl	8003614 <_ZNSt7complexIfEC1Eff>

            std::complex<float> kP     = -SENSOR_BASE / (current_velocity * current_velocity) * s1 * s2;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c66:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8003c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8003c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f005 fa81 	bl	8009184 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8003c82:	eeb0 7a40 	vmov.f32	s14, s0
 8003c86:	eef0 7a60 	vmov.f32	s15, s1
 8003c8a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003c8e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003c92:	f107 0220 	add.w	r2, r7, #32
 8003c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f005 fac3 	bl	8009228 <_ZStmlIfESt7complexIT_ERKS2_S4_>
 8003ca2:	eeb0 7a40 	vmov.f32	s14, s0
 8003ca6:	eef0 7a60 	vmov.f32	s15, s1
 8003caa:	ed87 7a06 	vstr	s14, [r7, #24]
 8003cae:	edc7 7a07 	vstr	s15, [r7, #28]
            std::complex<float> kDelta = -SENSOR_BASE / current_velocity * ((s1 + s2) - current_velocity * kP);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8003cb8:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8003cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8003cc4:	f107 0220 	add.w	r2, r7, #32
 8003cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f005 faec 	bl	80092ac <_ZStplIfESt7complexIT_ERKS2_S4_>
 8003cd4:	eeb0 7a40 	vmov.f32	s14, s0
 8003cd8:	eef0 7a60 	vmov.f32	s15, s1
 8003cdc:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8003ce0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	33a4      	adds	r3, #164	; 0xa4
 8003ce8:	f107 0218 	add.w	r2, r7, #24
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f005 fa48 	bl	8009184 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8003cf4:	eeb0 7a40 	vmov.f32	s14, s0
 8003cf8:	eef0 7a60 	vmov.f32	s15, s1
 8003cfc:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8003d00:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8003d04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003d08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f005 fb0e 	bl	8009330 <_ZStmiIfESt7complexIT_ERKS2_S4_>
 8003d14:	eeb0 7a40 	vmov.f32	s14, s0
 8003d18:	eef0 7a60 	vmov.f32	s15, s1
 8003d1c:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8003d20:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8003d24:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003d28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f005 fa28 	bl	8009184 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8003d34:	eeb0 7a40 	vmov.f32	s14, s0
 8003d38:	eef0 7a60 	vmov.f32	s15, s1
 8003d3c:	ed87 7a04 	vstr	s14, [r7, #16]
 8003d40:	edc7 7a05 	vstr	s15, [r7, #20]

            return {kP.real(), kDelta.real()};
 8003d44:	f107 0318 	add.w	r3, r7, #24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fc77 	bl	800363c <_ZNKSt7complexIfE4realB5cxx11Ev>
 8003d4e:	eef0 7a40 	vmov.f32	s15, s0
 8003d52:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8003d56:	f107 0310 	add.w	r3, r7, #16
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fc6e 	bl	800363c <_ZNKSt7complexIfE4realB5cxx11Ev>
 8003d60:	eef0 7a40 	vmov.f32	s15, s0
 8003d64:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8003d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6c:	ee07 2a10 	vmov	s14, r2
 8003d70:	ee07 3a90 	vmov	s15, r3
        }
 8003d74:	eeb0 0a47 	vmov.f32	s0, s14
 8003d78:	eef0 0a67 	vmov.f32	s1, s15
 8003d7c:	3778      	adds	r7, #120	; 0x78
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bdb0      	pop	{r4, r5, r7, pc}
 8003d82:	bf00      	nop
 8003d84:	f3af 8000 	nop.w
 8003d88:	2e2d08eb 	.word	0x2e2d08eb
 8003d8c:	3fd3fbe7 	.word	0x3fd3fbe7
 8003d90:	3fb0a3d7 	.word	0x3fb0a3d7
 8003d94:	3f733333 	.word	0x3f733333
 8003d98:	3ea29749 	.word	0x3ea29749

08003d9c <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>:

        void lateral_control([[maybe_unused]] const float dt)
        {
        	if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	70fb      	strb	r3, [r7, #3]
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>:
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	70fb      	strb	r3, [r7, #3]
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <_ZN3jlb10Controller15lateral_controlEf>:
        void lateral_control([[maybe_unused]] const float dt)
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd2:	b08d      	sub	sp, #52	; 0x34
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	ed87 0a00 	vstr	s0, [r7]
        	if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3334      	adds	r3, #52	; 0x34
 8003de0:	4618      	mov	r0, r3
 8003de2:	f005 fac2 	bl	800936a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8003de6:	4604      	mov	r4, r0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3334      	adds	r3, #52	; 0x34
 8003dec:	4618      	mov	r0, r3
 8003dee:	f005 fac7 	bl	8009380 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4632      	mov	r2, r6
 8003df6:	4619      	mov	r1, r3
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f005 facd 	bl	8009398 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>
 8003dfe:	4603      	mov	r3, r0
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d123      	bne.n	8003e4c <_ZN3jlb10Controller15lateral_controlEf+0x7c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3354      	adds	r3, #84	; 0x54
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f005 faae 	bl	800936a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8003e0e:	4604      	mov	r4, r0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3354      	adds	r3, #84	; 0x54
 8003e14:	4618      	mov	r0, r3
 8003e16:	f005 fab3 	bl	8009380 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	462a      	mov	r2, r5
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4620      	mov	r0, r4
 8003e22:	f005 facf 	bl	80093c4 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>
 8003e26:	4603      	mov	r3, r0
        	if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10f      	bne.n	8003e4c <_ZN3jlb10Controller15lateral_controlEf+0x7c>
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3374      	adds	r3, #116	; 0x74
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fdac 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <_ZN3jlb10Controller15lateral_controlEf+0x7c>
			line_positions_rear.size() == 0)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3380      	adds	r3, #128	; 0x80
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fda4 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003e46:	4603      	mov	r3, r0
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <_ZN3jlb10Controller15lateral_controlEf+0x80>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <_ZN3jlb10Controller15lateral_controlEf+0x82>
 8003e50:	2300      	movs	r3, #0
        	if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d044      	beq.n	8003ee0 <_ZN3jlb10Controller15lateral_controlEf+0x110>
        	{
				if(target_speed <= FAST_SPEED_TURN || target_speed <= LABYRINTH_SPEED || target_speed <= LABYRINTH_SPEED_REVERSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e5c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004090 <_ZN3jlb10Controller15lateral_controlEf+0x2c0>
 8003e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e68:	d914      	bls.n	8003e94 <_ZN3jlb10Controller15lateral_controlEf+0xc4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	d90a      	bls.n	8003e94 <_ZN3jlb10Controller15lateral_controlEf+0xc4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e90:	d900      	bls.n	8003e94 <_ZN3jlb10Controller15lateral_controlEf+0xc4>
				{
					if (target_angle < 0) { target_angle = -deg2rad(MAX_WHEEL_ANGLE); }
					else if (target_angle == 0) { target_angle = 0; }
					else if (target_angle > 0) { target_angle = deg2rad(MAX_WHEEL_ANGLE); }
				}
				return;
 8003e92:	e0f9      	b.n	8004088 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
					if (target_angle < 0) { target_angle = -deg2rad(MAX_WHEEL_ANGLE); }
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea2:	d503      	bpl.n	8003eac <_ZN3jlb10Controller15lateral_controlEf+0xdc>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a7b      	ldr	r2, [pc, #492]	; (8004094 <_ZN3jlb10Controller15lateral_controlEf+0x2c4>)
 8003ea8:	619a      	str	r2, [r3, #24]
				return;
 8003eaa:	e0ed      	b.n	8004088 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
					else if (target_angle == 0) { target_angle = 0; }
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	edd3 7a06 	vldr	s15, [r3, #24]
 8003eb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eba:	d104      	bne.n	8003ec6 <_ZN3jlb10Controller15lateral_controlEf+0xf6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	619a      	str	r2, [r3, #24]
				return;
 8003ec4:	e0e0      	b.n	8004088 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
					else if (target_angle > 0) { target_angle = deg2rad(MAX_WHEEL_ANGLE); }
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed4:	dc00      	bgt.n	8003ed8 <_ZN3jlb10Controller15lateral_controlEf+0x108>
				return;
 8003ed6:	e0d7      	b.n	8004088 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
					else if (target_angle > 0) { target_angle = deg2rad(MAX_WHEEL_ANGLE); }
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a6f      	ldr	r2, [pc, #444]	; (8004098 <_ZN3jlb10Controller15lateral_controlEf+0x2c8>)
 8003edc:	619a      	str	r2, [r3, #24]
				return;
 8003ede:	e0d3      	b.n	8004088 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
        	}

		if (line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3374      	adds	r3, #116	; 0x74
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fd52 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d807      	bhi.n	8003f00 <_ZN3jlb10Controller15lateral_controlEf+0x130>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3380      	adds	r3, #128	; 0x80
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe fd4a 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d901      	bls.n	8003f04 <_ZN3jlb10Controller15lateral_controlEf+0x134>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <_ZN3jlb10Controller15lateral_controlEf+0x136>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 80bd 	bne.w	8004086 <_ZN3jlb10Controller15lateral_controlEf+0x2b6>
            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8003f12:	f107 0310 	add.w	r3, r7, #16
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f005 fa69 	bl	80093f0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f24:	f107 0310 	add.w	r3, r7, #16
 8003f28:	eeb0 0a67 	vmov.f32	s0, s15
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fcae 	bl	8003890 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8003f34:	eef0 7a40 	vmov.f32	s15, s0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	edc3 7a02 	vstr	s15, [r3, #8]
 8003f3e:	f107 0310 	add.w	r3, r7, #16
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fa84 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003f4e:	f107 031c 	add.w	r3, r7, #28
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f005 fa4b 	bl	80093f0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003f60:	f107 031c 	add.w	r3, r7, #28
 8003f64:	eeb0 0a67 	vmov.f32	s0, s15
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fc90 	bl	8003890 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8003f70:	eef0 7a40 	vmov.f32	s15, s0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	edc3 7a03 	vstr	s15, [r3, #12]
 8003f7a:	f107 031c 	add.w	r3, r7, #28
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fa66 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	611a      	str	r2, [r3, #16]
            prev_line_position_rear  = line_position_rear;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	615a      	str	r2, [r3, #20]

            float sensor_rate   = SENSOR_WIDTH / SENSOR_COUNT;
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <_ZN3jlb10Controller15lateral_controlEf+0x2cc>)
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
            float sensor_center = SENSOR_COUNT / 2.0f;
 8003f98:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	edd3 6a02 	vldr	s13, [r3, #8]
 8003fa4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb8:	ee17 2a90 	vmov	r2, s15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	601a      	str	r2, [r3, #0]
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	edd3 6a03 	vldr	s13, [r3, #12]
 8003fc6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fda:	ee17 2a90 	vmov	r2, s15
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	605a      	str	r2, [r3, #4]

            cross_track_error = line_position_front;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]
            heading_error     = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffa:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8004002:	f7ff fab3 	bl	800356c <_ZSt5atan2ff>
 8004006:	eef0 7a40 	vmov.f32	s15, s0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            // lateral_pid.update_params(lat::kP/current_velocity, lat::kI/current_velocity, lat::kD/current_velocity);
            // target_angle = -lateral_pid.update(0, cross_track_error, dt);

            auto [kP, kDelta] = get_control_params();
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fd85 	bl	8003b20 <_ZN3jlb10Controller18get_control_paramsEv>
 8004016:	eeb0 7a40 	vmov.f32	s14, s0
 800401a:	eef0 7a60 	vmov.f32	s15, s1
 800401e:	ed87 7a02 	vstr	s14, [r7, #8]
 8004022:	edc7 7a03 	vstr	s15, [r7, #12]
 8004026:	edd7 7a02 	vldr	s15, [r7, #8]
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 800402a:	eeb1 7a67 	vneg.f32	s14, s15
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	edd3 7a08 	vldr	s15, [r3, #32]
 8004034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
            auto [kP, kDelta] = get_control_params();
 800403e:	edd7 7a03 	vldr	s15, [r7, #12]
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 8004042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	edc3 7a06 	vstr	s15, [r3, #24]

            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	edd3 7a06 	vldr	s15, [r3, #24]
 8004056:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80040a0 <_ZN3jlb10Controller15lateral_controlEf+0x2d0>
 800405a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800405e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004062:	dd02      	ble.n	800406a <_ZN3jlb10Controller15lateral_controlEf+0x29a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a0c      	ldr	r2, [pc, #48]	; (8004098 <_ZN3jlb10Controller15lateral_controlEf+0x2c8>)
 8004068:	619a      	str	r2, [r3, #24]
            if (target_angle < -deg2rad(MAX_WHEEL_ANGLE)) target_angle = -deg2rad(MAX_WHEEL_ANGLE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004070:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80040a4 <_ZN3jlb10Controller15lateral_controlEf+0x2d4>
 8004074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407c:	d504      	bpl.n	8004088 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <_ZN3jlb10Controller15lateral_controlEf+0x2c4>)
 8004082:	619a      	str	r2, [r3, #24]
 8004084:	e000      	b.n	8004088 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
		if (line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8004086:	bf00      	nop
        }
 8004088:	3734      	adds	r7, #52	; 0x34
 800408a:	46bd      	mov	sp, r7
 800408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408e:	bf00      	nop
 8004090:	3f666666 	.word	0x3f666666
 8004094:	bec90fdb 	.word	0xbec90fdb
 8004098:	3ec90fdb 	.word	0x3ec90fdb
 800409c:	3bcccccd 	.word	0x3bcccccd
 80040a0:	3ec90fdb 	.word	0x3ec90fdb
 80040a4:	bec90fdb 	.word	0xbec90fdb

080040a8 <_ZN3jlb10Controller20longitudinal_controlEf>:

        void longitudinal_control([[maybe_unused]] const float dt)
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	ed87 0a00 	vstr	s0, [r7]
            float x      = std::max(dist_error_norm, ang_error_norm);
            target_speed = std::min(reference_speed, reference_speed * (1.0f - (0.1666667f * x) - (0.8333333f * x * x)));
            */

#ifndef SIMULATION
        	if(!((usWidth_throttle > 1800) && (usWidth_throttle < 2800)))
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <_ZN3jlb10Controller20longitudinal_controlEf+0x60>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80040bc:	d904      	bls.n	80040c8 <_ZN3jlb10Controller20longitudinal_controlEf+0x20>
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <_ZN3jlb10Controller20longitudinal_controlEf+0x60>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80040c6:	d304      	bcc.n	80040d2 <_ZN3jlb10Controller20longitudinal_controlEf+0x2a>
			{
				reference_speed = 0.0f;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        	if(reference_speed < reference_speed_prev)
        	{
        		target_speed = current_velocity - MAX_DECELERATION * dt;
        	}
*/
        	target_speed = reference_speed;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	61da      	str	r2, [r3, #28]
            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	edd3 7a07 	vldr	s15, [r3, #28]
 80040e2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80040e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ee:	d400      	bmi.n	80040f2 <_ZN3jlb10Controller20longitudinal_controlEf+0x4a>

            //reference_speed_prev = reference_speed;
            //float object_rate = object_pid.update(obj::FOLLOW_DISTANCE, object_range, dt);
            //target_speed *= std::pow((1 - object_rate), 2);
        }
 80040f0:	e003      	b.n	80040fa <_ZN3jlb10Controller20longitudinal_controlEf+0x52>
            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80040f8:	61da      	str	r2, [r3, #28]
        }
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000304 	.word	0x20000304

0800410c <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
        {
#ifndef SIMULATION
            // TODO: add timestamp
        	tick_counter_prev = tick_counter;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        	tick_counter = HAL_GetTick();
 8004120:	f00c f9ac 	bl	801047c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004148:	ee37 7a67 	vsub.f32	s14, s14, s15
 800414c:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004194 <_ZN3jlb10Controller6updateEv+0x88>
 8004150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004154:	edc7 7a07 	vstr	s15, [r7, #28]
            auto                   control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                 = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_                   = control_timestamp_;
#endif

            lateral_control(dt);
 8004158:	ed97 0a07 	vldr	s0, [r7, #28]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff fe37 	bl	8003dd0 <_ZN3jlb10Controller15lateral_controlEf>
            longitudinal_control(dt);
 8004162:	ed97 0a07 	vldr	s0, [r7, #28]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff ff9e 	bl	80040a8 <_ZN3jlb10Controller20longitudinal_controlEf>

            return {target_angle, target_speed};
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	ee07 2a10 	vmov	s14, r2
 8004180:	ee07 3a90 	vmov	s15, r3
        }
 8004184:	eeb0 0a47 	vmov.f32	s0, s14
 8004188:	eef0 0a67 	vmov.f32	s1, s15
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	447a0000 	.word	0x447a0000

08004198 <_ZN3jlb10Controller16set_object_rangeEf>:

        void set_object_range(const float object_range_) { object_range = object_range_; }
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	ed87 0a00 	vstr	s0, [r7]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e00c      	b.n	80041e2 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x2c>
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	4413      	add	r3, r2
 80041ce:	7819      	ldrb	r1, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4413      	add	r3, r2
 80041d6:	3334      	adds	r3, #52	; 0x34
 80041d8:	460a      	mov	r2, r1
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3301      	adds	r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b1f      	cmp	r3, #31
 80041e6:	d9ef      	bls.n	80041c8 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x12>
            line_positions_front = line_positions_front_;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3374      	adds	r3, #116	; 0x74
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f005 f96f 	bl	80094d2 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 80041f4:	bf00      	nop
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_rear[i] = detection_rear_[i];
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e00c      	b.n	8004228 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x2c>
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	7819      	ldrb	r1, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4413      	add	r3, r2
 800421c:	3354      	adds	r3, #84	; 0x54
 800421e:	460a      	mov	r2, r1
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3301      	adds	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b1f      	cmp	r3, #31
 800422c:	d9ef      	bls.n	800420e <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x12>
            line_positions_rear = line_positions_rear_;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3380      	adds	r3, #128	; 0x80
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4618      	mov	r0, r3
 8004236:	f005 f94c 	bl	80094d2 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 800423a:	bf00      	nop
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_) { current_velocity = current_velocity_; }
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	ed87 0a00 	vstr	s0, [r7]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
        {
            prev_direction = direction;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            direction      = direction_;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <_ZN3jlb10Controller19set_reference_speedEf>:

        void set_reference_speed(const float reference_speed_) { reference_speed = reference_speed_; }
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	ed87 0a00 	vstr	s0, [r7]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f005 fa14 	bl	80096e2 <_ZNSaIN3jlb4EdgeEED1Ev>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f005 f9f7 	bl	80096c2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ffeb 	bl	80042c4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZN3jlb4NodeC1Ecff>:
        char              name;
        float             x;
        float             y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	460b      	mov	r3, r1
 8004302:	ed87 0a01 	vstr	s0, [r7, #4]
 8004306:	edc7 0a00 	vstr	s1, [r7]
 800430a:	72fb      	strb	r3, [r7, #11]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	7afa      	ldrb	r2, [r7, #11]
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	330c      	adds	r3, #12
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ffdb 	bl	80042de <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	330c      	adds	r3, #12
 800433e:	4618      	mov	r0, r3
 8004340:	f005 f9f8 	bl	8009734 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3308      	adds	r3, #8
 800435a:	4618      	mov	r0, r3
 800435c:	f005 fa42 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 800436a:	b590      	push	{r4, r7, lr}
 800436c:	b08d      	sub	sp, #52	; 0x34
 800436e:	af00      	add	r7, sp, #0
 8004370:	6178      	str	r0, [r7, #20]
 8004372:	60fa      	str	r2, [r7, #12]
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	ed87 0a01 	vstr	s0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	74fb      	strb	r3, [r7, #19]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f103 040c 	add.w	r4, r3, #12
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	763b      	strb	r3, [r7, #24]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	f107 0318 	add.w	r3, r7, #24
 8004390:	3308      	adds	r3, #8
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f005 f9e8 	bl	800976a <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439e:	f107 0318 	add.w	r3, r7, #24
 80043a2:	4619      	mov	r1, r3
 80043a4:	4620      	mov	r0, r4
 80043a6:	f005 fa38 	bl	800981a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 80043aa:	f107 0318 	add.w	r3, r7, #24
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ffcd 	bl	800434e <_ZN3jlb4EdgeD1Ev>
 80043b4:	bf00      	nop
 80043b6:	3734      	adds	r7, #52	; 0x34
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd90      	pop	{r4, r7, pc}

080043bc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f005 fa49 	bl	800985c <_ZNSaIN3jlb4NodeEED1Ev>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	f005 fa2c 	bl	800983c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ffeb 	bl	80043d4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 800440e:	af00      	add	r7, sp, #0
 8004410:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004414:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004418:	6018      	str	r0, [r3, #0]
        {
 800441a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800441e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff ffe2 	bl	80043ee <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 800442a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800442e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004432:	681c      	ldr	r4, [r3, #0]
 8004434:	f107 0308 	add.w	r3, r7, #8
 8004438:	eddf 0af3 	vldr	s1, [pc, #972]	; 8004808 <_ZN3jlb5GraphC1Ev+0x400>
 800443c:	ed9f 0af3 	vldr	s0, [pc, #972]	; 800480c <_ZN3jlb5GraphC1Ev+0x404>
 8004440:	2141      	movs	r1, #65	; 0x41
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff58 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	4619      	mov	r1, r3
 800444e:	4620      	mov	r0, r4
 8004450:	f005 fa49 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004454:	f107 0308 	add.w	r3, r7, #8
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ff6a 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 800445e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004462:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004466:	681c      	ldr	r4, [r3, #0]
 8004468:	f107 0320 	add.w	r3, r7, #32
 800446c:	eddf 0aeb 	vldr	s1, [pc, #940]	; 800481c <_ZN3jlb5GraphC1Ev+0x414>
 8004470:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 800480c <_ZN3jlb5GraphC1Ev+0x404>
 8004474:	2142      	movs	r1, #66	; 0x42
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff3e 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 800447c:	f107 0320 	add.w	r3, r7, #32
 8004480:	4619      	mov	r1, r3
 8004482:	4620      	mov	r0, r4
 8004484:	f005 fa2f 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004488:	f107 0320 	add.w	r3, r7, #32
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff50 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8004492:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004496:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800449a:	681c      	ldr	r4, [r3, #0]
 800449c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044a0:	eddf 0adb 	vldr	s1, [pc, #876]	; 8004810 <_ZN3jlb5GraphC1Ev+0x408>
 80044a4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80044a8:	2143      	movs	r1, #67	; 0x43
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff24 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80044b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044b4:	4619      	mov	r1, r3
 80044b6:	4620      	mov	r0, r4
 80044b8:	f005 fa15 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80044bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff36 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 80044c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044ca:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80044ce:	681c      	ldr	r4, [r3, #0]
 80044d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80044d4:	eddf 0acf 	vldr	s1, [pc, #828]	; 8004814 <_ZN3jlb5GraphC1Ev+0x40c>
 80044d8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80044dc:	2144      	movs	r1, #68	; 0x44
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff ff0a 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80044e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80044e8:	4619      	mov	r1, r3
 80044ea:	4620      	mov	r0, r4
 80044ec:	f005 f9fb 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80044f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff1c 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 80044fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004502:	681c      	ldr	r4, [r3, #0]
 8004504:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004508:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800450c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004510:	2145      	movs	r1, #69	; 0x45
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fef0 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 8004518:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800451c:	4619      	mov	r1, r3
 800451e:	4620      	mov	r0, r4
 8004520:	f005 f9e1 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004524:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ff02 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 800452e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004532:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004536:	681c      	ldr	r4, [r3, #0]
 8004538:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800453c:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8004808 <_ZN3jlb5GraphC1Ev+0x400>
 8004540:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 800481c <_ZN3jlb5GraphC1Ev+0x414>
 8004544:	2146      	movs	r1, #70	; 0x46
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fed6 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 800454c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004550:	4619      	mov	r1, r3
 8004552:	4620      	mov	r0, r4
 8004554:	f005 f9c7 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004558:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fee8 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 8004562:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004566:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800456a:	681c      	ldr	r4, [r3, #0]
 800456c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004570:	eddf 0aaa 	vldr	s1, [pc, #680]	; 800481c <_ZN3jlb5GraphC1Ev+0x414>
 8004574:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800481c <_ZN3jlb5GraphC1Ev+0x414>
 8004578:	2147      	movs	r1, #71	; 0x47
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff febc 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 8004580:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004584:	4619      	mov	r1, r3
 8004586:	4620      	mov	r0, r4
 8004588:	f005 f9ad 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800458c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fece 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8004596:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800459a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800459e:	681c      	ldr	r4, [r3, #0]
 80045a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045a4:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8004810 <_ZN3jlb5GraphC1Ev+0x408>
 80045a8:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8004814 <_ZN3jlb5GraphC1Ev+0x40c>
 80045ac:	2148      	movs	r1, #72	; 0x48
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fea2 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80045b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045b8:	4619      	mov	r1, r3
 80045ba:	4620      	mov	r0, r4
 80045bc:	f005 f993 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80045c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff feb4 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 80045ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80045d2:	681c      	ldr	r4, [r3, #0]
 80045d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045d8:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8004814 <_ZN3jlb5GraphC1Ev+0x40c>
 80045dc:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8004814 <_ZN3jlb5GraphC1Ev+0x40c>
 80045e0:	2149      	movs	r1, #73	; 0x49
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fe88 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80045e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045ec:	4619      	mov	r1, r3
 80045ee:	4620      	mov	r0, r4
 80045f0:	f005 f979 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80045f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fe9a 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 80045fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004602:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004606:	681c      	ldr	r4, [r3, #0]
 8004608:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800460c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004610:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8004814 <_ZN3jlb5GraphC1Ev+0x40c>
 8004614:	214a      	movs	r1, #74	; 0x4a
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fe6e 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 800461c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004620:	4619      	mov	r1, r3
 8004622:	4620      	mov	r0, r4
 8004624:	f005 f95f 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004628:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fe80 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 8004632:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004636:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800463a:	681c      	ldr	r4, [r3, #0]
 800463c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004640:	eddf 0a71 	vldr	s1, [pc, #452]	; 8004808 <_ZN3jlb5GraphC1Ev+0x400>
 8004644:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8004808 <_ZN3jlb5GraphC1Ev+0x400>
 8004648:	214b      	movs	r1, #75	; 0x4b
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fe54 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 8004650:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004654:	4619      	mov	r1, r3
 8004656:	4620      	mov	r0, r4
 8004658:	f005 f945 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800465c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fe66 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 8004666:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800466a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800466e:	681c      	ldr	r4, [r3, #0]
 8004670:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004674:	eddf 0a69 	vldr	s1, [pc, #420]	; 800481c <_ZN3jlb5GraphC1Ev+0x414>
 8004678:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8004808 <_ZN3jlb5GraphC1Ev+0x400>
 800467c:	214c      	movs	r1, #76	; 0x4c
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fe3a 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 8004684:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004688:	4619      	mov	r1, r3
 800468a:	4620      	mov	r0, r4
 800468c:	f005 f92b 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004690:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fe4c 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 800469a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800469e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80046a2:	681c      	ldr	r4, [r3, #0]
 80046a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80046a8:	eddf 0a59 	vldr	s1, [pc, #356]	; 8004810 <_ZN3jlb5GraphC1Ev+0x408>
 80046ac:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8004810 <_ZN3jlb5GraphC1Ev+0x408>
 80046b0:	214d      	movs	r1, #77	; 0x4d
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fe20 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80046b8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80046bc:	4619      	mov	r1, r3
 80046be:	4620      	mov	r0, r4
 80046c0:	f005 f911 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80046c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fe32 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 80046ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046d2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80046d6:	681c      	ldr	r4, [r3, #0]
 80046d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80046dc:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8004814 <_ZN3jlb5GraphC1Ev+0x40c>
 80046e0:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8004810 <_ZN3jlb5GraphC1Ev+0x408>
 80046e4:	214e      	movs	r1, #78	; 0x4e
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fe06 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80046ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80046f0:	4619      	mov	r1, r3
 80046f2:	4620      	mov	r0, r4
 80046f4:	f005 f8f7 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80046f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fe18 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 8004702:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004706:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800470a:	681c      	ldr	r4, [r3, #0]
 800470c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004710:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004714:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004810 <_ZN3jlb5GraphC1Ev+0x408>
 8004718:	214f      	movs	r1, #79	; 0x4f
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fdec 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 8004720:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004724:	4619      	mov	r1, r3
 8004726:	4620      	mov	r0, r4
 8004728:	f005 f8dd 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800472c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fdfe 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 8004736:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800473a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800473e:	681c      	ldr	r4, [r3, #0]
 8004740:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004744:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8004748:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800474c:	2150      	movs	r1, #80	; 0x50
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fdd2 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 8004754:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004758:	4619      	mov	r1, r3
 800475a:	4620      	mov	r0, r4
 800475c:	f005 f8c3 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004760:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fde4 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 800476a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800476e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004772:	681c      	ldr	r4, [r3, #0]
 8004774:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004778:	eddf 0a25 	vldr	s1, [pc, #148]	; 8004810 <_ZN3jlb5GraphC1Ev+0x408>
 800477c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004780:	2151      	movs	r1, #81	; 0x51
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fdb8 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 8004788:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800478c:	4619      	mov	r1, r3
 800478e:	4620      	mov	r0, r4
 8004790:	f005 f8a9 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004794:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fdca 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 800479e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047a2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80047ac:	eddf 0a16 	vldr	s1, [pc, #88]	; 8004808 <_ZN3jlb5GraphC1Ev+0x400>
 80047b0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80047b4:	2152      	movs	r1, #82	; 0x52
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fd9e 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80047bc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80047c0:	4619      	mov	r1, r3
 80047c2:	4620      	mov	r0, r4
 80047c4:	f005 f88f 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80047c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fdb0 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 80047d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80047da:	681c      	ldr	r4, [r3, #0]
 80047dc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80047e0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8004814 <_ZN3jlb5GraphC1Ev+0x40c>
 80047e4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80047e8:	2153      	movs	r1, #83	; 0x53
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fd84 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80047f0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80047f4:	4619      	mov	r1, r3
 80047f6:	4620      	mov	r0, r4
 80047f8:	f005 f875 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80047fc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fd96 	bl	8004332 <_ZN3jlb4NodeD1Ev>
 8004806:	e011      	b.n	800482c <_ZN3jlb5GraphC1Ev+0x424>
 8004808:	40866667 	.word	0x40866667
 800480c:	40d33334 	.word	0x40d33334
 8004810:	40666667 	.word	0x40666667
 8004814:	4099999a 	.word	0x4099999a
 8004818:	40d33334 	.word	0x40d33334
 800481c:	40accccd 	.word	0x40accccd
 8004820:	4019999a 	.word	0x4019999a
 8004824:	40866667 	.word	0x40866667
 8004828:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 800482c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004830:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004834:	681c      	ldr	r4, [r3, #0]
 8004836:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800483a:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 800481c <_ZN3jlb5GraphC1Ev+0x414>
 800483e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004842:	2154      	movs	r1, #84	; 0x54
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fd57 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 800484a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800484e:	4619      	mov	r1, r3
 8004850:	4620      	mov	r0, r4
 8004852:	f005 f848 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004856:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fd69 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8004860:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004864:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004868:	681c      	ldr	r4, [r3, #0]
 800486a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800486e:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 8004818 <_ZN3jlb5GraphC1Ev+0x410>
 8004872:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004876:	2155      	movs	r1, #85	; 0x55
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fd3d 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 800487e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004882:	4619      	mov	r1, r3
 8004884:	4620      	mov	r0, r4
 8004886:	f005 f82e 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800488a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fd4f 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8004894:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004898:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800489c:	681c      	ldr	r4, [r3, #0]
 800489e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a2:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 8004824 <_ZN3jlb5GraphC1Ev+0x41c>
 80048a6:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8004820 <_ZN3jlb5GraphC1Ev+0x418>
 80048aa:	2156      	movs	r1, #86	; 0x56
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fd23 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80048b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b6:	4619      	mov	r1, r3
 80048b8:	4620      	mov	r0, r4
 80048ba:	f005 f814 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80048be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fd35 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 80048c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80048d0:	681c      	ldr	r4, [r3, #0]
 80048d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80048d6:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 800481c <_ZN3jlb5GraphC1Ev+0x414>
 80048da:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8004820 <_ZN3jlb5GraphC1Ev+0x418>
 80048de:	2157      	movs	r1, #87	; 0x57
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fd09 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 80048e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80048ea:	4619      	mov	r1, r3
 80048ec:	4620      	mov	r0, r4
 80048ee:	f004 fffa 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80048f2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fd1b 	bl	8004332 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 80048fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004900:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004904:	681c      	ldr	r4, [r3, #0]
 8004906:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800490a:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 8004824 <_ZN3jlb5GraphC1Ev+0x41c>
 800490e:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 8004828 <_ZN3jlb5GraphC1Ev+0x420>
 8004912:	2158      	movs	r1, #88	; 0x58
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fcef 	bl	80042f8 <_ZN3jlb4NodeC1Ecff>
 800491a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800491e:	4619      	mov	r1, r3
 8004920:	4620      	mov	r0, r4
 8004922:	f004 ffe0 	bl	80098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004926:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fd01 	bl	8004332 <_ZN3jlb4NodeD1Ev>

            const auto UNIT           = SQUARE_LENGTH;
 8004930:	4be9      	ldr	r3, [pc, #932]	; (8004cd8 <_ZN3jlb5GraphC1Ev+0x8d0>)
 8004932:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 8004936:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8004938:	a3e5      	add	r3, pc, #916	; (adr r3, 8004cd0 <_ZN3jlb5GraphC1Ev+0x8c8>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 8004942:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 8004946:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800494a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800494e:	2141      	movs	r1, #65	; 0x41
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	f002 ff8c 	bl	800786e <_ZN3jlb5GraphixEc>
 8004956:	4604      	mov	r4, r0
 8004958:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800495c:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8004960:	4ade      	ldr	r2, [pc, #888]	; (8004cdc <_ZN3jlb5GraphC1Ev+0x8d4>)
 8004962:	8812      	ldrh	r2, [r2, #0]
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800496a:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 800496e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004978:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 800497c:	2202      	movs	r2, #2
 800497e:	605a      	str	r2, [r3, #4]
 8004980:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004984:	4618      	mov	r0, r3
 8004986:	f018 fb16 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800498a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800498e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004992:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8004996:	f507 7012 	add.w	r0, r7, #584	; 0x248
 800499a:	ca06      	ldmia	r2, {r1, r2}
 800499c:	f004 ffb4 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80049a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80049a4:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8004ce8 <_ZN3jlb5GraphC1Ev+0x8e0>
 80049a8:	2200      	movs	r2, #0
 80049aa:	2143      	movs	r1, #67	; 0x43
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff fcdc 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80049b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80049b6:	4618      	mov	r0, r3
 80049b8:	f004 ff14 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80049bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049c0:	4618      	mov	r0, r3
 80049c2:	f018 fafa 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 80049c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049ca:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80049ce:	2141      	movs	r1, #65	; 0x41
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	f002 ff4c 	bl	800786e <_ZN3jlb5GraphixEc>
 80049d6:	4604      	mov	r4, r0
 80049d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049dc:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 80049e0:	2243      	movs	r2, #67	; 0x43
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049e8:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80049ec:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049f6:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80049fa:	2201      	movs	r2, #1
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8004a02:	4618      	mov	r0, r3
 8004a04:	f018 fad7 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004a08:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8004a0c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004a10:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 8004a14:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8004a18:	ca06      	ldmia	r2, {r1, r2}
 8004a1a:	f004 ff75 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004a1e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8004a22:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8004ce0 <_ZN3jlb5GraphC1Ev+0x8d8>
 8004a26:	2202      	movs	r2, #2
 8004a28:	2142      	movs	r1, #66	; 0x42
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff fc9d 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004a30:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8004a34:	4618      	mov	r0, r3
 8004a36:	f004 fed5 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004a3a:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f018 fabb 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 8004a44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a4c:	2141      	movs	r1, #65	; 0x41
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	f002 ff0d 	bl	800786e <_ZN3jlb5GraphixEc>
 8004a54:	4604      	mov	r4, r0
 8004a56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a5a:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8004a5e:	2243      	movs	r2, #67	; 0x43
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a66:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8004a6a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a74:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8004a78:	2201      	movs	r2, #1
 8004a7a:	605a      	str	r2, [r3, #4]
 8004a7c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004a80:	4618      	mov	r0, r3
 8004a82:	f018 fa98 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004a86:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004a8a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004a8e:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8004a92:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8004a96:	ca06      	ldmia	r2, {r1, r2}
 8004a98:	f004 ff36 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004a9c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8004aa0:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8004ce8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	2144      	movs	r1, #68	; 0x44
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff fc5e 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004aae:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f004 fe96 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004ab8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004abc:	4618      	mov	r0, r3
 8004abe:	f018 fa7c 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8004ac2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ac6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004aca:	2142      	movs	r1, #66	; 0x42
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	f002 fece 	bl	800786e <_ZN3jlb5GraphixEc>
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ad8:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8004adc:	2245      	movs	r2, #69	; 0x45
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ae4:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8004ae8:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004af2:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8004af6:	2201      	movs	r2, #1
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8004afe:	4618      	mov	r0, r3
 8004b00:	f018 fa59 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004b04:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8004b08:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004b0c:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8004b10:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 8004b14:	ca06      	ldmia	r2, {r1, r2}
 8004b16:	f004 fef7 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b1a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004b1e:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8004ce0 <_ZN3jlb5GraphC1Ev+0x8d8>
 8004b22:	2202      	movs	r2, #2
 8004b24:	2141      	movs	r1, #65	; 0x41
 8004b26:	4620      	mov	r0, r4
 8004b28:	f7ff fc1f 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004b2c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004b30:	4618      	mov	r0, r3
 8004b32:	f004 fe57 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004b36:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f018 fa3d 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8004b40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b44:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b48:	2142      	movs	r1, #66	; 0x42
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	f002 fe8f 	bl	800786e <_ZN3jlb5GraphixEc>
 8004b50:	4604      	mov	r4, r0
 8004b52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b56:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8004b5a:	4a62      	ldr	r2, [pc, #392]	; (8004ce4 <_ZN3jlb5GraphC1Ev+0x8dc>)
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	801a      	strh	r2, [r3, #0]
 8004b60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b64:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004b68:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b72:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004b76:	2202      	movs	r2, #2
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f018 fa19 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004b84:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004b88:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004b8c:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8004b90:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8004b94:	ca06      	ldmia	r2, {r1, r2}
 8004b96:	f004 feb7 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b9a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004b9e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8004ce8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2145      	movs	r1, #69	; 0x45
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f7ff fbdf 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004bac:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f004 fe17 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004bb6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f018 f9fd 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8004bc0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bc4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004bc8:	2142      	movs	r1, #66	; 0x42
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	f002 fe4f 	bl	800786e <_ZN3jlb5GraphixEc>
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bd6:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8004bda:	2245      	movs	r2, #69	; 0x45
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004be2:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8004be6:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bf0:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	605a      	str	r2, [r3, #4]
 8004bf8:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f018 f9da 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004c02:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8004c06:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004c0a:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8004c0e:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 8004c12:	ca06      	ldmia	r2, {r1, r2}
 8004c14:	f004 fe78 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c18:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8004c1c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8004ce8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004c20:	2200      	movs	r2, #0
 8004c22:	2144      	movs	r1, #68	; 0x44
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7ff fba0 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004c2a:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f004 fdd8 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004c34:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f018 f9be 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 8004c3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c42:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c46:	2143      	movs	r1, #67	; 0x43
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	f002 fe10 	bl	800786e <_ZN3jlb5GraphixEc>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c54:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8004c58:	2246      	movs	r2, #70	; 0x46
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c60:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8004c64:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c6e:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8004c72:	2201      	movs	r2, #1
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f018 f99b 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004c80:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8004c84:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004c88:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 8004c8c:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8004c90:	ca06      	ldmia	r2, {r1, r2}
 8004c92:	f004 fe39 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c96:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004c9a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8004ce8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	2141      	movs	r1, #65	; 0x41
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7ff fb61 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ca8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004cac:	4618      	mov	r0, r3
 8004cae:	f004 fd99 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004cb2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f018 f97f 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 8004cbc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cc0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004cc4:	2143      	movs	r1, #67	; 0x43
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	f002 fdd1 	bl	800786e <_ZN3jlb5GraphixEc>
 8004ccc:	e00e      	b.n	8004cec <_ZN3jlb5GraphC1Ev+0x8e4>
 8004cce:	bf00      	nop
 8004cd0:	460698c7 	.word	0x460698c7
 8004cd4:	3fee28c7 	.word	0x3fee28c7
 8004cd8:	3f19999a 	.word	0x3f19999a
 8004cdc:	08021ba0 	.word	0x08021ba0
 8004ce0:	3f99999a 	.word	0x3f99999a
 8004ce4:	08021ba4 	.word	0x08021ba4
 8004ce8:	3f71463a 	.word	0x3f71463a
 8004cec:	4604      	mov	r4, r0
 8004cee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cf2:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8004cf6:	2241      	movs	r2, #65	; 0x41
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cfe:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8004d02:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d0c:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8004d10:	2201      	movs	r2, #1
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f018 f94c 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004d1e:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8004d22:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004d26:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8004d2a:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8004d2e:	ca06      	ldmia	r2, {r1, r2}
 8004d30:	f004 fdea 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004d34:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8004d38:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8004ce8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2146      	movs	r1, #70	; 0x46
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7ff fb12 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004d46:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f004 fd4a 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004d50:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8004d54:	4618      	mov	r0, r3
 8004d56:	f018 f930 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8004d5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d5e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d62:	2144      	movs	r1, #68	; 0x44
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	f002 fd82 	bl	800786e <_ZN3jlb5GraphixEc>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d70:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8004d74:	4ae5      	ldr	r2, [pc, #916]	; (800510c <_ZN3jlb5GraphC1Ev+0xd04>)
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	8019      	strh	r1, [r3, #0]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	0c12      	lsrs	r2, r2, #16
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d86:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8004d8a:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d94:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8004d98:	2203      	movs	r2, #3
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004da0:	4618      	mov	r0, r3
 8004da2:	f018 f908 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004da6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004daa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004dae:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8004db2:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8004db6:	ca06      	ldmia	r2, {r1, r2}
 8004db8:	f004 fda6 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004dbc:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8004dc0:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 800511c <_ZN3jlb5GraphC1Ev+0xd14>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2141      	movs	r1, #65	; 0x41
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7ff face 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004dce:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f004 fd06 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004dd8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f018 f8ec 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8004de2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004de6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004dea:	2144      	movs	r1, #68	; 0x44
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	f002 fd3e 	bl	800786e <_ZN3jlb5GraphixEc>
 8004df2:	4604      	mov	r4, r0
 8004df4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004df8:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8004dfc:	4ac3      	ldr	r2, [pc, #780]	; (800510c <_ZN3jlb5GraphC1Ev+0xd04>)
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	4611      	mov	r1, r2
 8004e02:	8019      	strh	r1, [r3, #0]
 8004e04:	3302      	adds	r3, #2
 8004e06:	0c12      	lsrs	r2, r2, #16
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e0e:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8004e12:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e1c:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8004e20:	2203      	movs	r2, #3
 8004e22:	605a      	str	r2, [r3, #4]
 8004e24:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f018 f8c4 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004e2e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8004e32:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004e36:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 8004e3a:	f507 7051 	add.w	r0, r7, #836	; 0x344
 8004e3e:	ca06      	ldmia	r2, {r1, r2}
 8004e40:	f004 fd62 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004e44:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8004e48:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 800511c <_ZN3jlb5GraphC1Ev+0xd14>
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2142      	movs	r1, #66	; 0x42
 8004e50:	4620      	mov	r0, r4
 8004e52:	f7ff fa8a 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004e56:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f004 fcc2 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004e60:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8004e64:	4618      	mov	r0, r3
 8004e66:	f018 f8a8 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 8004e6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e72:	2144      	movs	r1, #68	; 0x44
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	f002 fcfa 	bl	800786e <_ZN3jlb5GraphixEc>
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e80:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8004e84:	4aa2      	ldr	r2, [pc, #648]	; (8005110 <_ZN3jlb5GraphC1Ev+0xd08>)
 8004e86:	8812      	ldrh	r2, [r2, #0]
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e8e:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8004e92:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e9c:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f018 f884 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004eae:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8004eb2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004eb6:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 8004eba:	f507 7058 	add.w	r0, r7, #864	; 0x360
 8004ebe:	ca06      	ldmia	r2, {r1, r2}
 8004ec0:	f004 fd22 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004ec4:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8004ec8:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800511c <_ZN3jlb5GraphC1Ev+0xd14>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2147      	movs	r1, #71	; 0x47
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f7ff fa4a 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ed6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8004eda:	4618      	mov	r0, r3
 8004edc:	f004 fc82 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004ee0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f018 f868 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 8004eea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004eee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ef2:	2144      	movs	r1, #68	; 0x44
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	f002 fcba 	bl	800786e <_ZN3jlb5GraphixEc>
 8004efa:	4604      	mov	r4, r0
 8004efc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f00:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 8004f04:	4a82      	ldr	r2, [pc, #520]	; (8005110 <_ZN3jlb5GraphC1Ev+0xd08>)
 8004f06:	8812      	ldrh	r2, [r2, #0]
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f0e:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8004f12:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f1c:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8004f20:	2202      	movs	r2, #2
 8004f22:	605a      	str	r2, [r3, #4]
 8004f24:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f018 f844 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004f2e:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8004f32:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004f36:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 8004f3a:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8004f3e:	ca06      	ldmia	r2, {r1, r2}
 8004f40:	f004 fce2 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004f44:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8004f48:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8005114 <_ZN3jlb5GraphC1Ev+0xd0c>
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	2149      	movs	r1, #73	; 0x49
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff fa0a 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004f56:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f004 fc42 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004f60:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8004f64:	4618      	mov	r0, r3
 8004f66:	f018 f828 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 8004f6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f72:	2144      	movs	r1, #68	; 0x44
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f002 fc7a 	bl	800786e <_ZN3jlb5GraphixEc>
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f80:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8004f84:	4a62      	ldr	r2, [pc, #392]	; (8005110 <_ZN3jlb5GraphC1Ev+0xd08>)
 8004f86:	8812      	ldrh	r2, [r2, #0]
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f8e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8004f92:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f9c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f018 f804 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8004fae:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004fb2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004fb6:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8004fba:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8004fbe:	ca06      	ldmia	r2, {r1, r2}
 8004fc0:	f004 fca2 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004fc4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8004fc8:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800511c <_ZN3jlb5GraphC1Ev+0xd14>
 8004fcc:	2201      	movs	r2, #1
 8004fce:	2146      	movs	r1, #70	; 0x46
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7ff f9ca 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004fd6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f004 fc02 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004fe0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f017 ffe8 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 8004fea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ff2:	2145      	movs	r1, #69	; 0x45
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f002 fc3a 	bl	800786e <_ZN3jlb5GraphixEc>
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005000:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8005004:	4a44      	ldr	r2, [pc, #272]	; (8005118 <_ZN3jlb5GraphC1Ev+0xd10>)
 8005006:	8812      	ldrh	r2, [r2, #0]
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800500e:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8005012:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800501c:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8005020:	2202      	movs	r2, #2
 8005022:	605a      	str	r2, [r3, #4]
 8005024:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005028:	4618      	mov	r0, r3
 800502a:	f017 ffc4 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800502e:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005032:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005036:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 800503a:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 800503e:	ca06      	ldmia	r2, {r1, r2}
 8005040:	f004 fc62 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005044:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8005048:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800511c <_ZN3jlb5GraphC1Ev+0xd14>
 800504c:	2200      	movs	r2, #0
 800504e:	2142      	movs	r1, #66	; 0x42
 8005050:	4620      	mov	r0, r4
 8005052:	f7ff f98a 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005056:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800505a:	4618      	mov	r0, r3
 800505c:	f004 fbc2 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005060:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005064:	4618      	mov	r0, r3
 8005066:	f017 ffa8 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 800506a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800506e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005072:	2145      	movs	r1, #69	; 0x45
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	f002 fbfa 	bl	800786e <_ZN3jlb5GraphixEc>
 800507a:	4604      	mov	r4, r0
 800507c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005080:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8005084:	2242      	movs	r2, #66	; 0x42
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800508c:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8005090:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800509a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800509e:	2201      	movs	r2, #1
 80050a0:	605a      	str	r2, [r3, #4]
 80050a2:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f017 ff85 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80050ac:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80050b0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80050b4:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 80050b8:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 80050bc:	ca06      	ldmia	r2, {r1, r2}
 80050be:	f004 fc23 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80050c2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80050c6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005114 <_ZN3jlb5GraphC1Ev+0xd0c>
 80050ca:	2202      	movs	r2, #2
 80050cc:	214a      	movs	r1, #74	; 0x4a
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7ff f94b 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80050d4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80050d8:	4618      	mov	r0, r3
 80050da:	f004 fb83 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80050de:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f017 ff69 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 80050e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050ec:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80050f0:	2145      	movs	r1, #69	; 0x45
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	f002 fbbb 	bl	800786e <_ZN3jlb5GraphixEc>
 80050f8:	4604      	mov	r4, r0
 80050fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050fe:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8005102:	2242      	movs	r2, #66	; 0x42
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800510a:	e009      	b.n	8005120 <_ZN3jlb5GraphC1Ev+0xd18>
 800510c:	08021ba8 	.word	0x08021ba8
 8005110:	08021bac 	.word	0x08021bac
 8005114:	3f99999a 	.word	0x3f99999a
 8005118:	08021bb0 	.word	0x08021bb0
 800511c:	3f71463a 	.word	0x3f71463a
 8005120:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8005124:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800512e:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8005132:	2201      	movs	r2, #1
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800513a:	4618      	mov	r0, r3
 800513c:	f017 ff3b 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005140:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005144:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005148:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 800514c:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8005150:	ca06      	ldmia	r2, {r1, r2}
 8005152:	f004 fbd9 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005156:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800515a:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 800511c <_ZN3jlb5GraphC1Ev+0xd14>
 800515e:	2201      	movs	r2, #1
 8005160:	2147      	movs	r1, #71	; 0x47
 8005162:	4620      	mov	r0, r4
 8005164:	f7ff f901 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005168:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800516c:	4618      	mov	r0, r3
 800516e:	f004 fb39 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005172:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005176:	4618      	mov	r0, r3
 8005178:	f017 ff1f 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 800517c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005180:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005184:	2146      	movs	r1, #70	; 0x46
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	f002 fb71 	bl	800786e <_ZN3jlb5GraphixEc>
 800518c:	4604      	mov	r4, r0
 800518e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005192:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8005196:	4ae4      	ldr	r2, [pc, #912]	; (8005528 <_ZN3jlb5GraphC1Ev+0x1120>)
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	4611      	mov	r1, r2
 800519c:	8019      	strh	r1, [r3, #0]
 800519e:	3302      	adds	r3, #2
 80051a0:	0c12      	lsrs	r2, r2, #16
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051a8:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80051ac:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051b6:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80051ba:	2203      	movs	r2, #3
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80051c2:	4618      	mov	r0, r3
 80051c4:	f017 fef7 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80051c8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80051cc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80051d0:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 80051d4:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 80051d8:	ca06      	ldmia	r2, {r1, r2}
 80051da:	f004 fb95 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80051de:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80051e2:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800552c <_ZN3jlb5GraphC1Ev+0x1124>
 80051e6:	2201      	movs	r2, #1
 80051e8:	2143      	movs	r1, #67	; 0x43
 80051ea:	4620      	mov	r0, r4
 80051ec:	f7ff f8bd 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80051f0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80051f4:	4618      	mov	r0, r3
 80051f6:	f004 faf5 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80051fa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80051fe:	4618      	mov	r0, r3
 8005200:	f017 fedb 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 8005204:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005208:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800520c:	2146      	movs	r1, #70	; 0x46
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	f002 fb2d 	bl	800786e <_ZN3jlb5GraphixEc>
 8005214:	4604      	mov	r4, r0
 8005216:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800521a:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 800521e:	4ac4      	ldr	r2, [pc, #784]	; (8005530 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005220:	8812      	ldrh	r2, [r2, #0]
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005228:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800522c:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005236:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800523a:	2202      	movs	r2, #2
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8005242:	4618      	mov	r0, r3
 8005244:	f017 feb7 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005248:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800524c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005250:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8005254:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8005258:	ca06      	ldmia	r2, {r1, r2}
 800525a:	f004 fb55 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800525e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8005262:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800552c <_ZN3jlb5GraphC1Ev+0x1124>
 8005266:	2200      	movs	r2, #0
 8005268:	2144      	movs	r1, #68	; 0x44
 800526a:	4620      	mov	r0, r4
 800526c:	f7ff f87d 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005270:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8005274:	4618      	mov	r0, r3
 8005276:	f004 fab5 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 800527a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800527e:	4618      	mov	r0, r3
 8005280:	f017 fe9b 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8005284:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005288:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800528c:	2146      	movs	r1, #70	; 0x46
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	f002 faed 	bl	800786e <_ZN3jlb5GraphixEc>
 8005294:	4604      	mov	r4, r0
 8005296:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800529a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800529e:	4aa4      	ldr	r2, [pc, #656]	; (8005530 <_ZN3jlb5GraphC1Ev+0x1128>)
 80052a0:	8812      	ldrh	r2, [r2, #0]
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052a8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80052ac:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052b6:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80052ba:	2202      	movs	r2, #2
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80052c2:	4618      	mov	r0, r3
 80052c4:	f017 fe77 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80052c8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80052cc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80052d0:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 80052d4:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 80052d8:	ca06      	ldmia	r2, {r1, r2}
 80052da:	f004 fb15 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80052de:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80052e2:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005534 <_ZN3jlb5GraphC1Ev+0x112c>
 80052e6:	2202      	movs	r2, #2
 80052e8:	2147      	movs	r1, #71	; 0x47
 80052ea:	4620      	mov	r0, r4
 80052ec:	f7ff f83d 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80052f0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80052f4:	4618      	mov	r0, r3
 80052f6:	f004 fa75 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80052fa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80052fe:	4618      	mov	r0, r3
 8005300:	f017 fe5b 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 8005304:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005308:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800530c:	2146      	movs	r1, #70	; 0x46
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	f002 faad 	bl	800786e <_ZN3jlb5GraphixEc>
 8005314:	4604      	mov	r4, r0
 8005316:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800531a:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 800531e:	4a84      	ldr	r2, [pc, #528]	; (8005530 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005320:	8812      	ldrh	r2, [r2, #0]
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005328:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800532c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005336:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800533a:	2202      	movs	r2, #2
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005342:	4618      	mov	r0, r3
 8005344:	f017 fe37 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005348:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800534c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005350:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005354:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8005358:	ca06      	ldmia	r2, {r1, r2}
 800535a:	f004 fad5 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800535e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005362:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800552c <_ZN3jlb5GraphC1Ev+0x1124>
 8005366:	2201      	movs	r2, #1
 8005368:	2149      	movs	r1, #73	; 0x49
 800536a:	4620      	mov	r0, r4
 800536c:	f7fe fffd 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005370:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005374:	4618      	mov	r0, r3
 8005376:	f004 fa35 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 800537a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800537e:	4618      	mov	r0, r3
 8005380:	f017 fe1b 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8005384:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005388:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800538c:	2146      	movs	r1, #70	; 0x46
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	f002 fa6d 	bl	800786e <_ZN3jlb5GraphixEc>
 8005394:	4604      	mov	r4, r0
 8005396:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800539a:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800539e:	4a62      	ldr	r2, [pc, #392]	; (8005528 <_ZN3jlb5GraphC1Ev+0x1120>)
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	4611      	mov	r1, r2
 80053a4:	8019      	strh	r1, [r3, #0]
 80053a6:	3302      	adds	r3, #2
 80053a8:	0c12      	lsrs	r2, r2, #16
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053b0:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 80053b4:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053be:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 80053c2:	2203      	movs	r2, #3
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80053ca:	4618      	mov	r0, r3
 80053cc:	f017 fdf3 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80053d0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80053d4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80053d8:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 80053dc:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 80053e0:	ca06      	ldmia	r2, {r1, r2}
 80053e2:	f004 fa91 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80053e6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80053ea:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800552c <_ZN3jlb5GraphC1Ev+0x1124>
 80053ee:	2200      	movs	r2, #0
 80053f0:	2148      	movs	r1, #72	; 0x48
 80053f2:	4620      	mov	r0, r4
 80053f4:	f7fe ffb9 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80053f8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80053fc:	4618      	mov	r0, r3
 80053fe:	f004 f9f1 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005402:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005406:	4618      	mov	r0, r3
 8005408:	f017 fdd7 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 800540c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005410:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005414:	2147      	movs	r1, #71	; 0x47
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	f002 fa29 	bl	800786e <_ZN3jlb5GraphixEc>
 800541c:	4604      	mov	r4, r0
 800541e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005422:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8005426:	4a44      	ldr	r2, [pc, #272]	; (8005538 <_ZN3jlb5GraphC1Ev+0x1130>)
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005430:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8005434:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800543e:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8005442:	2202      	movs	r2, #2
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800544a:	4618      	mov	r0, r3
 800544c:	f017 fdb3 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005450:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005454:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005458:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 800545c:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8005460:	ca06      	ldmia	r2, {r1, r2}
 8005462:	f004 fa51 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005466:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800546a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005534 <_ZN3jlb5GraphC1Ev+0x112c>
 800546e:	2202      	movs	r2, #2
 8005470:	2146      	movs	r1, #70	; 0x46
 8005472:	4620      	mov	r0, r4
 8005474:	f7fe ff79 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005478:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800547c:	4618      	mov	r0, r3
 800547e:	f004 f9b1 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005482:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005486:	4618      	mov	r0, r3
 8005488:	f017 fd97 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 800548c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005490:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005494:	2147      	movs	r1, #71	; 0x47
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	f002 f9e9 	bl	800786e <_ZN3jlb5GraphixEc>
 800549c:	4604      	mov	r4, r0
 800549e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054a2:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 80054a6:	4a24      	ldr	r2, [pc, #144]	; (8005538 <_ZN3jlb5GraphC1Ev+0x1130>)
 80054a8:	8812      	ldrh	r2, [r2, #0]
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054b0:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 80054b4:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054be:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 80054c2:	2202      	movs	r2, #2
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80054ca:	4618      	mov	r0, r3
 80054cc:	f017 fd73 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80054d0:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80054d4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80054d8:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 80054dc:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 80054e0:	ca06      	ldmia	r2, {r1, r2}
 80054e2:	f004 fa11 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80054e6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80054ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800552c <_ZN3jlb5GraphC1Ev+0x1124>
 80054ee:	2201      	movs	r2, #1
 80054f0:	2144      	movs	r1, #68	; 0x44
 80054f2:	4620      	mov	r0, r4
 80054f4:	f7fe ff39 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80054f8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f004 f971 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005502:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005506:	4618      	mov	r0, r3
 8005508:	f017 fd57 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 800550c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005510:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005514:	2147      	movs	r1, #71	; 0x47
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	f002 f9a9 	bl	800786e <_ZN3jlb5GraphixEc>
 800551c:	4604      	mov	r4, r0
 800551e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005522:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8005526:	e009      	b.n	800553c <_ZN3jlb5GraphC1Ev+0x1134>
 8005528:	08021bb4 	.word	0x08021bb4
 800552c:	3f71463a 	.word	0x3f71463a
 8005530:	08021bb8 	.word	0x08021bb8
 8005534:	3f99999a 	.word	0x3f99999a
 8005538:	08021bbc 	.word	0x08021bbc
 800553c:	4ae6      	ldr	r2, [pc, #920]	; (80058d8 <_ZN3jlb5GraphC1Ev+0x14d0>)
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	4611      	mov	r1, r2
 8005542:	8019      	strh	r1, [r3, #0]
 8005544:	3302      	adds	r3, #2
 8005546:	0c12      	lsrs	r2, r2, #16
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800554e:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005552:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800555c:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005560:	2203      	movs	r2, #3
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005568:	4618      	mov	r0, r3
 800556a:	f017 fd24 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800556e:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005572:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005576:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 800557a:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 800557e:	ca06      	ldmia	r2, {r1, r2}
 8005580:	f004 f9c2 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005584:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8005588:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 80058dc <_ZN3jlb5GraphC1Ev+0x14d4>
 800558c:	2200      	movs	r2, #0
 800558e:	2145      	movs	r1, #69	; 0x45
 8005590:	4620      	mov	r0, r4
 8005592:	f7fe feea 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005596:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800559a:	4618      	mov	r0, r3
 800559c:	f004 f922 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80055a0:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f017 fd08 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 80055aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055b2:	2147      	movs	r1, #71	; 0x47
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	f002 f95a 	bl	800786e <_ZN3jlb5GraphixEc>
 80055ba:	4604      	mov	r4, r0
 80055bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055c0:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80055c4:	4ac4      	ldr	r2, [pc, #784]	; (80058d8 <_ZN3jlb5GraphC1Ev+0x14d0>)
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	4611      	mov	r1, r2
 80055ca:	8019      	strh	r1, [r3, #0]
 80055cc:	3302      	adds	r3, #2
 80055ce:	0c12      	lsrs	r2, r2, #16
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055d6:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80055da:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055e4:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80055e8:	2203      	movs	r2, #3
 80055ea:	605a      	str	r2, [r3, #4]
 80055ec:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80055f0:	4618      	mov	r0, r3
 80055f2:	f017 fce0 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80055f6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80055fa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80055fe:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 8005602:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 8005606:	ca06      	ldmia	r2, {r1, r2}
 8005608:	f004 f97e 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800560c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005610:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80058dc <_ZN3jlb5GraphC1Ev+0x14d4>
 8005614:	2201      	movs	r2, #1
 8005616:	214a      	movs	r1, #74	; 0x4a
 8005618:	4620      	mov	r0, r4
 800561a:	f7fe fea6 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800561e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005622:	4618      	mov	r0, r3
 8005624:	f004 f8de 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005628:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800562c:	4618      	mov	r0, r3
 800562e:	f017 fcc4 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 8005632:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005636:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800563a:	2147      	movs	r1, #71	; 0x47
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	f002 f916 	bl	800786e <_ZN3jlb5GraphixEc>
 8005642:	4604      	mov	r4, r0
 8005644:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005648:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 800564c:	4aa4      	ldr	r2, [pc, #656]	; (80058e0 <_ZN3jlb5GraphC1Ev+0x14d8>)
 800564e:	8812      	ldrh	r2, [r2, #0]
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005656:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 800565a:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005664:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8005668:	2202      	movs	r2, #2
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8005670:	4618      	mov	r0, r3
 8005672:	f017 fca0 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005676:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800567a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800567e:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 8005682:	f207 5004 	addw	r0, r7, #1284	; 0x504
 8005686:	ca06      	ldmia	r2, {r1, r2}
 8005688:	f004 f93e 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800568c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8005690:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80058dc <_ZN3jlb5GraphC1Ev+0x14d4>
 8005694:	2200      	movs	r2, #0
 8005696:	2149      	movs	r1, #73	; 0x49
 8005698:	4620      	mov	r0, r4
 800569a:	f7fe fe66 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800569e:	f207 5304 	addw	r3, r7, #1284	; 0x504
 80056a2:	4618      	mov	r0, r3
 80056a4:	f004 f89e 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80056a8:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80056ac:	4618      	mov	r0, r3
 80056ae:	f017 fc84 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 80056b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056ba:	2148      	movs	r1, #72	; 0x48
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f002 f8d6 	bl	800786e <_ZN3jlb5GraphixEc>
 80056c2:	4604      	mov	r4, r0
 80056c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056c8:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 80056cc:	4a85      	ldr	r2, [pc, #532]	; (80058e4 <_ZN3jlb5GraphC1Ev+0x14dc>)
 80056ce:	8812      	ldrh	r2, [r2, #0]
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056d6:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80056da:	f207 5234 	addw	r2, r7, #1332	; 0x534
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056e4:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80056e8:	2202      	movs	r2, #2
 80056ea:	605a      	str	r2, [r3, #4]
 80056ec:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80056f0:	4618      	mov	r0, r3
 80056f2:	f017 fc60 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80056f6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80056fa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80056fe:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 8005702:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8005706:	ca06      	ldmia	r2, {r1, r2}
 8005708:	f004 f8fe 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800570c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005710:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80058dc <_ZN3jlb5GraphC1Ev+0x14d4>
 8005714:	2201      	movs	r2, #1
 8005716:	2146      	movs	r1, #70	; 0x46
 8005718:	4620      	mov	r0, r4
 800571a:	f7fe fe26 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800571e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005722:	4618      	mov	r0, r3
 8005724:	f004 f85e 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005728:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800572c:	4618      	mov	r0, r3
 800572e:	f017 fc44 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 8005732:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005736:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800573a:	2148      	movs	r1, #72	; 0x48
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	f002 f896 	bl	800786e <_ZN3jlb5GraphixEc>
 8005742:	4604      	mov	r4, r0
 8005744:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005748:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800574c:	2246      	movs	r2, #70	; 0x46
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005754:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8005758:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005762:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8005766:	2201      	movs	r2, #1
 8005768:	605a      	str	r2, [r3, #4]
 800576a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800576e:	4618      	mov	r0, r3
 8005770:	f017 fc21 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005774:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8005778:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800577c:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8005780:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 8005784:	ca06      	ldmia	r2, {r1, r2}
 8005786:	f004 f8bf 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800578a:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 800578e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80058dc <_ZN3jlb5GraphC1Ev+0x14d4>
 8005792:	2200      	movs	r2, #0
 8005794:	214b      	movs	r1, #75	; 0x4b
 8005796:	4620      	mov	r0, r4
 8005798:	f7fe fde7 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800579c:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 80057a0:	4618      	mov	r0, r3
 80057a2:	f004 f81f 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80057a6:	f207 5354 	addw	r3, r7, #1364	; 0x554
 80057aa:	4618      	mov	r0, r3
 80057ac:	f017 fc05 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 80057b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057b4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057b8:	2148      	movs	r1, #72	; 0x48
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	f002 f857 	bl	800786e <_ZN3jlb5GraphixEc>
 80057c0:	4604      	mov	r4, r0
 80057c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057c6:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 80057ca:	2246      	movs	r2, #70	; 0x46
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057d2:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80057d6:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057e0:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80057e4:	2201      	movs	r2, #1
 80057e6:	605a      	str	r2, [r3, #4]
 80057e8:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80057ec:	4618      	mov	r0, r3
 80057ee:	f017 fbe2 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80057f2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80057f6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80057fa:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 80057fe:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 8005802:	ca06      	ldmia	r2, {r1, r2}
 8005804:	f004 f880 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005808:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800580c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80058ec <_ZN3jlb5GraphC1Ev+0x14e4>
 8005810:	2202      	movs	r2, #2
 8005812:	214d      	movs	r1, #77	; 0x4d
 8005814:	4620      	mov	r0, r4
 8005816:	f7fe fda8 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800581a:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800581e:	4618      	mov	r0, r3
 8005820:	f003 ffe0 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005824:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8005828:	4618      	mov	r0, r3
 800582a:	f017 fbc6 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 800582e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005832:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005836:	2149      	movs	r1, #73	; 0x49
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f002 f818 	bl	800786e <_ZN3jlb5GraphixEc>
 800583e:	4604      	mov	r4, r0
 8005840:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005844:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8005848:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <_ZN3jlb5GraphC1Ev+0x14e0>)
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	4611      	mov	r1, r2
 800584e:	8019      	strh	r1, [r3, #0]
 8005850:	3302      	adds	r3, #2
 8005852:	0c12      	lsrs	r2, r2, #16
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800585a:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800585e:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005868:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800586c:	2203      	movs	r2, #3
 800586e:	605a      	str	r2, [r3, #4]
 8005870:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8005874:	4618      	mov	r0, r3
 8005876:	f017 fb9e 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800587a:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 800587e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005882:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8005886:	f207 5074 	addw	r0, r7, #1396	; 0x574
 800588a:	ca06      	ldmia	r2, {r1, r2}
 800588c:	f004 f83c 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005890:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8005894:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80058dc <_ZN3jlb5GraphC1Ev+0x14d4>
 8005898:	2200      	movs	r2, #0
 800589a:	2146      	movs	r1, #70	; 0x46
 800589c:	4620      	mov	r0, r4
 800589e:	f7fe fd64 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80058a2:	f207 5374 	addw	r3, r7, #1396	; 0x574
 80058a6:	4618      	mov	r0, r3
 80058a8:	f003 ff9c 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80058ac:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80058b0:	4618      	mov	r0, r3
 80058b2:	f017 fb82 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 80058b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058be:	2149      	movs	r1, #73	; 0x49
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	f001 ffd4 	bl	800786e <_ZN3jlb5GraphixEc>
 80058c6:	4604      	mov	r4, r0
 80058c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058cc:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 80058d0:	4a05      	ldr	r2, [pc, #20]	; (80058e8 <_ZN3jlb5GraphC1Ev+0x14e0>)
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	4611      	mov	r1, r2
 80058d6:	e00b      	b.n	80058f0 <_ZN3jlb5GraphC1Ev+0x14e8>
 80058d8:	08021bc0 	.word	0x08021bc0
 80058dc:	3f71463a 	.word	0x3f71463a
 80058e0:	08021bbc 	.word	0x08021bbc
 80058e4:	08021bc4 	.word	0x08021bc4
 80058e8:	08021bc8 	.word	0x08021bc8
 80058ec:	3f99999a 	.word	0x3f99999a
 80058f0:	8019      	strh	r1, [r3, #0]
 80058f2:	3302      	adds	r3, #2
 80058f4:	0c12      	lsrs	r2, r2, #16
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058fc:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8005900:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800590a:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 800590e:	2203      	movs	r2, #3
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8005916:	4618      	mov	r0, r3
 8005918:	f017 fb4d 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800591c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8005920:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005924:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8005928:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 800592c:	ca06      	ldmia	r2, {r1, r2}
 800592e:	f003 ffeb 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005932:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8005936:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 80058ec <_ZN3jlb5GraphC1Ev+0x14e4>
 800593a:	2202      	movs	r2, #2
 800593c:	2144      	movs	r1, #68	; 0x44
 800593e:	4620      	mov	r0, r4
 8005940:	f7fe fd13 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005944:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8005948:	4618      	mov	r0, r3
 800594a:	f003 ff4b 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 800594e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8005952:	4618      	mov	r0, r3
 8005954:	f017 fb31 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8005958:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800595c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005960:	2149      	movs	r1, #73	; 0x49
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	f001 ff83 	bl	800786e <_ZN3jlb5GraphixEc>
 8005968:	4604      	mov	r4, r0
 800596a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800596e:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8005972:	4ae7      	ldr	r2, [pc, #924]	; (8005d10 <_ZN3jlb5GraphC1Ev+0x1908>)
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	4611      	mov	r1, r2
 8005978:	8019      	strh	r1, [r3, #0]
 800597a:	3302      	adds	r3, #2
 800597c:	0c12      	lsrs	r2, r2, #16
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005984:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8005988:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005992:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8005996:	2203      	movs	r2, #3
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 800599e:	4618      	mov	r0, r3
 80059a0:	f017 fb09 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80059a4:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 80059a8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80059ac:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 80059b0:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 80059b4:	ca06      	ldmia	r2, {r1, r2}
 80059b6:	f003 ffa7 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80059ba:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 80059be:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8005d14 <_ZN3jlb5GraphC1Ev+0x190c>
 80059c2:	2201      	movs	r2, #1
 80059c4:	2147      	movs	r1, #71	; 0x47
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7fe fccf 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80059cc:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 80059d0:	4618      	mov	r0, r3
 80059d2:	f003 ff07 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80059d6:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 80059da:	4618      	mov	r0, r3
 80059dc:	f017 faed 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 80059e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059e4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059e8:	2149      	movs	r1, #73	; 0x49
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	f001 ff3f 	bl	800786e <_ZN3jlb5GraphixEc>
 80059f0:	4604      	mov	r4, r0
 80059f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059f6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80059fa:	4ac7      	ldr	r2, [pc, #796]	; (8005d18 <_ZN3jlb5GraphC1Ev+0x1910>)
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	4611      	mov	r1, r2
 8005a00:	8019      	strh	r1, [r3, #0]
 8005a02:	3302      	adds	r3, #2
 8005a04:	0c12      	lsrs	r2, r2, #16
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a0c:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8005a10:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a1a:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8005a1e:	2203      	movs	r2, #3
 8005a20:	605a      	str	r2, [r3, #4]
 8005a22:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f017 fac5 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005a2c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005a30:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a34:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8005a38:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8005a3c:	ca06      	ldmia	r2, {r1, r2}
 8005a3e:	f003 ff63 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005a42:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8005a46:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8005d14 <_ZN3jlb5GraphC1Ev+0x190c>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	214c      	movs	r1, #76	; 0x4c
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7fe fc8b 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005a54:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f003 fec3 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005a5e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f017 faa9 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8005a68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a6c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a70:	2149      	movs	r1, #73	; 0x49
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	f001 fefb 	bl	800786e <_ZN3jlb5GraphixEc>
 8005a78:	4604      	mov	r4, r0
 8005a7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a7e:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8005a82:	4aa5      	ldr	r2, [pc, #660]	; (8005d18 <_ZN3jlb5GraphC1Ev+0x1910>)
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	4611      	mov	r1, r2
 8005a88:	8019      	strh	r1, [r3, #0]
 8005a8a:	3302      	adds	r3, #2
 8005a8c:	0c12      	lsrs	r2, r2, #16
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a94:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8005a98:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005aa2:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f017 fa81 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005ab4:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8005ab8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005abc:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8005ac0:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8005ac4:	ca06      	ldmia	r2, {r1, r2}
 8005ac6:	f003 ff1f 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005aca:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8005ace:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8005d1c <_ZN3jlb5GraphC1Ev+0x1914>
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	214e      	movs	r1, #78	; 0x4e
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f7fe fc47 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005adc:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f003 fe7f 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005ae6:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8005aea:	4618      	mov	r0, r3
 8005aec:	f017 fa65 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8005af0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005af4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005af8:	2149      	movs	r1, #73	; 0x49
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	f001 feb7 	bl	800786e <_ZN3jlb5GraphixEc>
 8005b00:	4604      	mov	r4, r0
 8005b02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b06:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005b0a:	4a83      	ldr	r2, [pc, #524]	; (8005d18 <_ZN3jlb5GraphC1Ev+0x1910>)
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	8019      	strh	r1, [r3, #0]
 8005b12:	3302      	adds	r3, #2
 8005b14:	0c12      	lsrs	r2, r2, #16
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b1c:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005b20:	f207 6214 	addw	r2, r7, #1556	; 0x614
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b2a:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005b2e:	2203      	movs	r2, #3
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8005b36:	4618      	mov	r0, r3
 8005b38:	f017 fa3d 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005b3c:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8005b40:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b44:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8005b48:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8005b4c:	ca06      	ldmia	r2, {r1, r2}
 8005b4e:	f003 fedb 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b52:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8005b56:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8005d14 <_ZN3jlb5GraphC1Ev+0x190c>
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	214b      	movs	r1, #75	; 0x4b
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7fe fc03 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b64:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f003 fe3b 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b6e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8005b72:	4618      	mov	r0, r3
 8005b74:	f017 fa21 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8005b78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b7c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b80:	214a      	movs	r1, #74	; 0x4a
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	f001 fe73 	bl	800786e <_ZN3jlb5GraphixEc>
 8005b88:	4604      	mov	r4, r0
 8005b8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b8e:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8005b92:	224c      	movs	r2, #76	; 0x4c
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b9a:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8005b9e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ba8:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8005bac:	2201      	movs	r2, #1
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f017 f9fe 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005bba:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8005bbe:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005bc2:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8005bc6:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8005bca:	ca06      	ldmia	r2, {r1, r2}
 8005bcc:	f003 fe9c 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005bd0:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8005bd4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8005d14 <_ZN3jlb5GraphC1Ev+0x190c>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2147      	movs	r1, #71	; 0x47
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7fe fbc4 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005be2:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8005be6:	4618      	mov	r0, r3
 8005be8:	f003 fdfc 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005bec:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f017 f9e2 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8005bf6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bfa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005bfe:	214a      	movs	r1, #74	; 0x4a
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	f001 fe34 	bl	800786e <_ZN3jlb5GraphixEc>
 8005c06:	4604      	mov	r4, r0
 8005c08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c0c:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8005c10:	224c      	movs	r2, #76	; 0x4c
 8005c12:	701a      	strb	r2, [r3, #0]
 8005c14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c18:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8005c1c:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c26:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005c32:	4618      	mov	r0, r3
 8005c34:	f017 f9bf 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005c38:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005c3c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c40:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 8005c44:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8005c48:	ca06      	ldmia	r2, {r1, r2}
 8005c4a:	f003 fe5d 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c4e:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8005c52:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005d1c <_ZN3jlb5GraphC1Ev+0x1914>
 8005c56:	2202      	movs	r2, #2
 8005c58:	2145      	movs	r1, #69	; 0x45
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7fe fb85 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c60:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8005c64:	4618      	mov	r0, r3
 8005c66:	f003 fdbd 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c6a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f017 f9a3 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 8005c74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c78:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c7c:	214a      	movs	r1, #74	; 0x4a
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f001 fdf5 	bl	800786e <_ZN3jlb5GraphixEc>
 8005c84:	4604      	mov	r4, r0
 8005c86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c8a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8005c8e:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <_ZN3jlb5GraphC1Ev+0x1918>)
 8005c90:	8812      	ldrh	r2, [r2, #0]
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c98:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8005c9c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ca6:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8005caa:	2202      	movs	r2, #2
 8005cac:	605a      	str	r2, [r3, #4]
 8005cae:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f017 f97f 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005cb8:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8005cbc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005cc0:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8005cc4:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8005cc8:	ca06      	ldmia	r2, {r1, r2}
 8005cca:	f003 fe1d 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005cce:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8005cd2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005d14 <_ZN3jlb5GraphC1Ev+0x190c>
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	214c      	movs	r1, #76	; 0x4c
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f7fe fb45 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005ce0:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f003 fd7d 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005cea:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f017 f963 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8005cf4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cf8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005cfc:	214b      	movs	r1, #75	; 0x4b
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	f001 fdb5 	bl	800786e <_ZN3jlb5GraphixEc>
 8005d04:	4604      	mov	r4, r0
 8005d06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d0a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8005d0e:	e009      	b.n	8005d24 <_ZN3jlb5GraphC1Ev+0x191c>
 8005d10:	08021bc8 	.word	0x08021bc8
 8005d14:	3f71463a 	.word	0x3f71463a
 8005d18:	08021bcc 	.word	0x08021bcc
 8005d1c:	3f99999a 	.word	0x3f99999a
 8005d20:	08021bd0 	.word	0x08021bd0
 8005d24:	4ae4      	ldr	r2, [pc, #912]	; (80060b8 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	4611      	mov	r1, r2
 8005d2a:	8019      	strh	r1, [r3, #0]
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	0c12      	lsrs	r2, r2, #16
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d36:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8005d3a:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d44:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8005d48:	2203      	movs	r2, #3
 8005d4a:	605a      	str	r2, [r3, #4]
 8005d4c:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8005d50:	4618      	mov	r0, r3
 8005d52:	f017 f930 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005d56:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8005d5a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d5e:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 8005d62:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8005d66:	ca06      	ldmia	r2, {r1, r2}
 8005d68:	f003 fdce 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d6c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8005d70:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 80060bc <_ZN3jlb5GraphC1Ev+0x1cb4>
 8005d74:	2201      	movs	r2, #1
 8005d76:	2148      	movs	r1, #72	; 0x48
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7fe faf6 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d7e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8005d82:	4618      	mov	r0, r3
 8005d84:	f003 fd2e 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d88:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f017 f914 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8005d92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d96:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d9a:	214b      	movs	r1, #75	; 0x4b
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	f001 fd66 	bl	800786e <_ZN3jlb5GraphixEc>
 8005da2:	4604      	mov	r4, r0
 8005da4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005da8:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8005dac:	4ac4      	ldr	r2, [pc, #784]	; (80060c0 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8005dae:	8812      	ldrh	r2, [r2, #0]
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005db6:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8005dba:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dc4:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8005dc8:	2202      	movs	r2, #2
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f017 f8f0 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005dd6:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8005dda:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005dde:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 8005de2:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 8005de6:	ca06      	ldmia	r2, {r1, r2}
 8005de8:	f003 fd8e 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005dec:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8005df0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80060bc <_ZN3jlb5GraphC1Ev+0x1cb4>
 8005df4:	2200      	movs	r2, #0
 8005df6:	2149      	movs	r1, #73	; 0x49
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f7fe fab6 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005dfe:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8005e02:	4618      	mov	r0, r3
 8005e04:	f003 fcee 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e08:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f017 f8d4 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 8005e12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e1a:	214b      	movs	r1, #75	; 0x4b
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	f001 fd26 	bl	800786e <_ZN3jlb5GraphixEc>
 8005e22:	4604      	mov	r4, r0
 8005e24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e28:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8005e2c:	4aa4      	ldr	r2, [pc, #656]	; (80060c0 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8005e2e:	8812      	ldrh	r2, [r2, #0]
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e36:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8005e3a:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e44:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8005e48:	2202      	movs	r2, #2
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f017 f8b0 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005e56:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8005e5a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e5e:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 8005e62:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 8005e66:	ca06      	ldmia	r2, {r1, r2}
 8005e68:	f003 fd4e 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e6c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8005e70:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80060c4 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8005e74:	2202      	movs	r2, #2
 8005e76:	214c      	movs	r1, #76	; 0x4c
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f7fe fa76 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e7e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8005e82:	4618      	mov	r0, r3
 8005e84:	f003 fcae 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e88:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f017 f894 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 8005e92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e96:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e9a:	214b      	movs	r1, #75	; 0x4b
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f001 fce6 	bl	800786e <_ZN3jlb5GraphixEc>
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ea8:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8005eac:	4a84      	ldr	r2, [pc, #528]	; (80060c0 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8005eae:	8812      	ldrh	r2, [r2, #0]
 8005eb0:	801a      	strh	r2, [r3, #0]
 8005eb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005eb6:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8005eba:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ec4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8005ec8:	2202      	movs	r2, #2
 8005eca:	605a      	str	r2, [r3, #4]
 8005ecc:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f017 f870 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005ed6:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8005eda:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005ede:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 8005ee2:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 8005ee6:	ca06      	ldmia	r2, {r1, r2}
 8005ee8:	f003 fd0e 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005eec:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8005ef0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80060bc <_ZN3jlb5GraphC1Ev+0x1cb4>
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	214e      	movs	r1, #78	; 0x4e
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7fe fa36 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005efe:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8005f02:	4618      	mov	r0, r3
 8005f04:	f003 fc6e 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f08:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f017 f854 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8005f12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f1a:	214b      	movs	r1, #75	; 0x4b
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	f001 fca6 	bl	800786e <_ZN3jlb5GraphixEc>
 8005f22:	4604      	mov	r4, r0
 8005f24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f28:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8005f2c:	4a62      	ldr	r2, [pc, #392]	; (80060b8 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	4611      	mov	r1, r2
 8005f32:	8019      	strh	r1, [r3, #0]
 8005f34:	3302      	adds	r3, #2
 8005f36:	0c12      	lsrs	r2, r2, #16
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f3e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8005f42:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f4c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8005f50:	2203      	movs	r2, #3
 8005f52:	605a      	str	r2, [r3, #4]
 8005f54:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f017 f82c 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005f5e:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8005f62:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f66:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8005f6a:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 8005f6e:	ca06      	ldmia	r2, {r1, r2}
 8005f70:	f003 fcca 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f74:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8005f78:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80060bc <_ZN3jlb5GraphC1Ev+0x1cb4>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	214d      	movs	r1, #77	; 0x4d
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7fe f9f2 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f86:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f003 fc2a 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f90:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8005f94:	4618      	mov	r0, r3
 8005f96:	f017 f810 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 8005f9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f9e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005fa2:	214c      	movs	r1, #76	; 0x4c
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	f001 fc62 	bl	800786e <_ZN3jlb5GraphixEc>
 8005faa:	4604      	mov	r4, r0
 8005fac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fb0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005fb4:	4a44      	ldr	r2, [pc, #272]	; (80060c8 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8005fb6:	8812      	ldrh	r2, [r2, #0]
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fbe:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005fc2:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fcc:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	605a      	str	r2, [r3, #4]
 8005fd4:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f016 ffec 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8005fde:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8005fe2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005fe6:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 8005fea:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 8005fee:	ca06      	ldmia	r2, {r1, r2}
 8005ff0:	f003 fc8a 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005ff4:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8005ff8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80060c4 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	214b      	movs	r1, #75	; 0x4b
 8006000:	4620      	mov	r0, r4
 8006002:	f7fe f9b2 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006006:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 800600a:	4618      	mov	r0, r3
 800600c:	f003 fbea 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006010:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006014:	4618      	mov	r0, r3
 8006016:	f016 ffd0 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 800601a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800601e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006022:	214c      	movs	r1, #76	; 0x4c
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	f001 fc22 	bl	800786e <_ZN3jlb5GraphixEc>
 800602a:	4604      	mov	r4, r0
 800602c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006030:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8006034:	4a24      	ldr	r2, [pc, #144]	; (80060c8 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8006036:	8812      	ldrh	r2, [r2, #0]
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800603e:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8006042:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800604c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8006050:	2202      	movs	r2, #2
 8006052:	605a      	str	r2, [r3, #4]
 8006054:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006058:	4618      	mov	r0, r3
 800605a:	f016 ffac 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800605e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006062:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006066:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 800606a:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 800606e:	ca06      	ldmia	r2, {r1, r2}
 8006070:	f003 fc4a 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006074:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8006078:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80060bc <_ZN3jlb5GraphC1Ev+0x1cb4>
 800607c:	2201      	movs	r2, #1
 800607e:	2149      	movs	r1, #73	; 0x49
 8006080:	4620      	mov	r0, r4
 8006082:	f7fe f972 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006086:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800608a:	4618      	mov	r0, r3
 800608c:	f003 fbaa 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006090:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006094:	4618      	mov	r0, r3
 8006096:	f016 ff90 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 800609a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800609e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80060a2:	214c      	movs	r1, #76	; 0x4c
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	f001 fbe2 	bl	800786e <_ZN3jlb5GraphixEc>
 80060aa:	4604      	mov	r4, r0
 80060ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060b0:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80060b4:	e00a      	b.n	80060cc <_ZN3jlb5GraphC1Ev+0x1cc4>
 80060b6:	bf00      	nop
 80060b8:	08021bd4 	.word	0x08021bd4
 80060bc:	3f71463a 	.word	0x3f71463a
 80060c0:	08021bd8 	.word	0x08021bd8
 80060c4:	3f99999a 	.word	0x3f99999a
 80060c8:	08021bdc 	.word	0x08021bdc
 80060cc:	4ae4      	ldr	r2, [pc, #912]	; (8006460 <_ZN3jlb5GraphC1Ev+0x2058>)
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	4611      	mov	r1, r2
 80060d2:	8019      	strh	r1, [r3, #0]
 80060d4:	3302      	adds	r3, #2
 80060d6:	0c12      	lsrs	r2, r2, #16
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060de:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80060e2:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060ec:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80060f0:	2203      	movs	r2, #3
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80060f8:	4618      	mov	r0, r3
 80060fa:	f016 ff5c 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80060fe:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006102:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006106:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 800610a:	f207 7034 	addw	r0, r7, #1844	; 0x734
 800610e:	ca06      	ldmia	r2, {r1, r2}
 8006110:	f003 fbfa 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006114:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8006118:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8006464 <_ZN3jlb5GraphC1Ev+0x205c>
 800611c:	2200      	movs	r2, #0
 800611e:	214a      	movs	r1, #74	; 0x4a
 8006120:	4620      	mov	r0, r4
 8006122:	f7fe f922 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006126:	f207 7334 	addw	r3, r7, #1844	; 0x734
 800612a:	4618      	mov	r0, r3
 800612c:	f003 fb5a 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006130:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006134:	4618      	mov	r0, r3
 8006136:	f016 ff40 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 800613a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800613e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006142:	214c      	movs	r1, #76	; 0x4c
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f001 fb92 	bl	800786e <_ZN3jlb5GraphixEc>
 800614a:	4604      	mov	r4, r0
 800614c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006150:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8006154:	4ac2      	ldr	r2, [pc, #776]	; (8006460 <_ZN3jlb5GraphC1Ev+0x2058>)
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	4611      	mov	r1, r2
 800615a:	8019      	strh	r1, [r3, #0]
 800615c:	3302      	adds	r3, #2
 800615e:	0c12      	lsrs	r2, r2, #16
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006166:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 800616a:	f207 7264 	addw	r2, r7, #1892	; 0x764
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006174:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8006178:	2203      	movs	r2, #3
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8006180:	4618      	mov	r0, r3
 8006182:	f016 ff18 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006186:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800618a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800618e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8006192:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8006196:	ca06      	ldmia	r2, {r1, r2}
 8006198:	f003 fbb6 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800619c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80061a0:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8006464 <_ZN3jlb5GraphC1Ev+0x205c>
 80061a4:	2201      	movs	r2, #1
 80061a6:	214f      	movs	r1, #79	; 0x4f
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7fe f8de 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80061ae:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80061b2:	4618      	mov	r0, r3
 80061b4:	f003 fb16 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80061b8:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80061bc:	4618      	mov	r0, r3
 80061be:	f016 fefc 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 80061c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061c6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80061ca:	214c      	movs	r1, #76	; 0x4c
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	f001 fb4e 	bl	800786e <_ZN3jlb5GraphixEc>
 80061d2:	4604      	mov	r4, r0
 80061d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061d8:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80061dc:	4aa2      	ldr	r2, [pc, #648]	; (8006468 <_ZN3jlb5GraphC1Ev+0x2060>)
 80061de:	8812      	ldrh	r2, [r2, #0]
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061e6:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80061ea:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061f4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80061f8:	2202      	movs	r2, #2
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006200:	4618      	mov	r0, r3
 8006202:	f016 fed8 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006206:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800620a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800620e:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 8006212:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 8006216:	ca06      	ldmia	r2, {r1, r2}
 8006218:	f003 fb76 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800621c:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8006220:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8006464 <_ZN3jlb5GraphC1Ev+0x205c>
 8006224:	2200      	movs	r2, #0
 8006226:	214e      	movs	r1, #78	; 0x4e
 8006228:	4620      	mov	r0, r4
 800622a:	f7fe f89e 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800622e:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8006232:	4618      	mov	r0, r3
 8006234:	f003 fad6 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006238:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800623c:	4618      	mov	r0, r3
 800623e:	f016 febc 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8006242:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006246:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800624a:	214d      	movs	r1, #77	; 0x4d
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	f001 fb0e 	bl	800786e <_ZN3jlb5GraphixEc>
 8006252:	4604      	mov	r4, r0
 8006254:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006258:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800625c:	4a83      	ldr	r2, [pc, #524]	; (800646c <_ZN3jlb5GraphC1Ev+0x2064>)
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	4611      	mov	r1, r2
 8006262:	8019      	strh	r1, [r3, #0]
 8006264:	3302      	adds	r3, #2
 8006266:	0c12      	lsrs	r2, r2, #16
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800626e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8006272:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800627c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8006280:	2203      	movs	r2, #3
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006288:	4618      	mov	r0, r3
 800628a:	f016 fe94 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800628e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006292:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006296:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 800629a:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 800629e:	ca06      	ldmia	r2, {r1, r2}
 80062a0:	f003 fb32 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80062a4:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80062a8:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8006470 <_ZN3jlb5GraphC1Ev+0x2068>
 80062ac:	2202      	movs	r2, #2
 80062ae:	2148      	movs	r1, #72	; 0x48
 80062b0:	4620      	mov	r0, r4
 80062b2:	f7fe f85a 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80062b6:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80062ba:	4618      	mov	r0, r3
 80062bc:	f003 fa92 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80062c0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f016 fe78 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 80062ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80062d2:	214d      	movs	r1, #77	; 0x4d
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f001 faca 	bl	800786e <_ZN3jlb5GraphixEc>
 80062da:	4604      	mov	r4, r0
 80062dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062e0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80062e4:	4a61      	ldr	r2, [pc, #388]	; (800646c <_ZN3jlb5GraphC1Ev+0x2064>)
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	4611      	mov	r1, r2
 80062ea:	8019      	strh	r1, [r3, #0]
 80062ec:	3302      	adds	r3, #2
 80062ee:	0c12      	lsrs	r2, r2, #16
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062f6:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80062fa:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006304:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8006308:	2203      	movs	r2, #3
 800630a:	605a      	str	r2, [r3, #4]
 800630c:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006310:	4618      	mov	r0, r3
 8006312:	f016 fe50 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006316:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 800631a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800631e:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 8006322:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 8006326:	ca06      	ldmia	r2, {r1, r2}
 8006328:	f003 faee 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800632c:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006330:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8006464 <_ZN3jlb5GraphC1Ev+0x205c>
 8006334:	2201      	movs	r2, #1
 8006336:	214b      	movs	r1, #75	; 0x4b
 8006338:	4620      	mov	r0, r4
 800633a:	f7fe f816 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800633e:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006342:	4618      	mov	r0, r3
 8006344:	f003 fa4e 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006348:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 800634c:	4618      	mov	r0, r3
 800634e:	f016 fe34 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8006352:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006356:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800635a:	214d      	movs	r1, #77	; 0x4d
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	f001 fa86 	bl	800786e <_ZN3jlb5GraphixEc>
 8006362:	4604      	mov	r4, r0
 8006364:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006368:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800636c:	4a41      	ldr	r2, [pc, #260]	; (8006474 <_ZN3jlb5GraphC1Ev+0x206c>)
 800636e:	8812      	ldrh	r2, [r2, #0]
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006376:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800637a:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006384:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8006388:	2202      	movs	r2, #2
 800638a:	605a      	str	r2, [r3, #4]
 800638c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006390:	4618      	mov	r0, r3
 8006392:	f016 fe10 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006396:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800639a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800639e:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 80063a2:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 80063a6:	ca06      	ldmia	r2, {r1, r2}
 80063a8:	f003 faae 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80063ac:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 80063b0:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006464 <_ZN3jlb5GraphC1Ev+0x205c>
 80063b4:	2200      	movs	r2, #0
 80063b6:	2152      	movs	r1, #82	; 0x52
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7fd ffd6 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80063be:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f003 fa0e 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80063c8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80063cc:	4618      	mov	r0, r3
 80063ce:	f016 fdf4 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 80063d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80063da:	214d      	movs	r1, #77	; 0x4d
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f001 fa46 	bl	800786e <_ZN3jlb5GraphixEc>
 80063e2:	4604      	mov	r4, r0
 80063e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063e8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80063ec:	4a21      	ldr	r2, [pc, #132]	; (8006474 <_ZN3jlb5GraphC1Ev+0x206c>)
 80063ee:	8812      	ldrh	r2, [r2, #0]
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063f6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80063fa:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006404:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8006408:	2202      	movs	r2, #2
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006410:	4618      	mov	r0, r3
 8006412:	f016 fdd0 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006416:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800641a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800641e:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8006422:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 8006426:	ca06      	ldmia	r2, {r1, r2}
 8006428:	f003 fa6e 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800642c:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006430:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006478 <_ZN3jlb5GraphC1Ev+0x2070>
 8006434:	2202      	movs	r2, #2
 8006436:	2151      	movs	r1, #81	; 0x51
 8006438:	4620      	mov	r0, r4
 800643a:	f7fd ff96 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800643e:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006442:	4618      	mov	r0, r3
 8006444:	f003 f9ce 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006448:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800644c:	4618      	mov	r0, r3
 800644e:	f016 fdb4 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8006452:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006456:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800645a:	214d      	movs	r1, #77	; 0x4d
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	e00d      	b.n	800647c <_ZN3jlb5GraphC1Ev+0x2074>
 8006460:	08021be0 	.word	0x08021be0
 8006464:	3f71463a 	.word	0x3f71463a
 8006468:	08021bdc 	.word	0x08021bdc
 800646c:	08021be4 	.word	0x08021be4
 8006470:	3f99999a 	.word	0x3f99999a
 8006474:	08021be8 	.word	0x08021be8
 8006478:	3f19999a 	.word	0x3f19999a
 800647c:	f001 f9f7 	bl	800786e <_ZN3jlb5GraphixEc>
 8006480:	4604      	mov	r4, r0
 8006482:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006486:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800648a:	4ae5      	ldr	r2, [pc, #916]	; (8006820 <_ZN3jlb5GraphC1Ev+0x2418>)
 800648c:	8812      	ldrh	r2, [r2, #0]
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006494:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006498:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064a2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80064a6:	2202      	movs	r2, #2
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80064ae:	4618      	mov	r0, r3
 80064b0:	f016 fd81 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80064b4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80064b8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80064bc:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 80064c0:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 80064c4:	ca06      	ldmia	r2, {r1, r2}
 80064c6:	f003 fa1f 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064ca:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80064ce:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8006824 <_ZN3jlb5GraphC1Ev+0x241c>
 80064d2:	2201      	movs	r2, #1
 80064d4:	2150      	movs	r1, #80	; 0x50
 80064d6:	4620      	mov	r0, r4
 80064d8:	f7fd ff47 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80064dc:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80064e0:	4618      	mov	r0, r3
 80064e2:	f003 f97f 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80064e6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80064ea:	4618      	mov	r0, r3
 80064ec:	f016 fd65 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 80064f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064f4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80064f8:	214e      	movs	r1, #78	; 0x4e
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	f001 f9b7 	bl	800786e <_ZN3jlb5GraphixEc>
 8006500:	4604      	mov	r4, r0
 8006502:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006506:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800650a:	4ac7      	ldr	r2, [pc, #796]	; (8006828 <_ZN3jlb5GraphC1Ev+0x2420>)
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	4611      	mov	r1, r2
 8006510:	8019      	strh	r1, [r3, #0]
 8006512:	3302      	adds	r3, #2
 8006514:	0c12      	lsrs	r2, r2, #16
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800651c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006520:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800652a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800652e:	2203      	movs	r2, #3
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006536:	4618      	mov	r0, r3
 8006538:	f016 fd3d 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800653c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006540:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006544:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8006548:	f607 0014 	addw	r0, r7, #2068	; 0x814
 800654c:	ca06      	ldmia	r2, {r1, r2}
 800654e:	f003 f9db 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006552:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006556:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8006824 <_ZN3jlb5GraphC1Ev+0x241c>
 800655a:	2200      	movs	r2, #0
 800655c:	214b      	movs	r1, #75	; 0x4b
 800655e:	4620      	mov	r0, r4
 8006560:	f7fd ff03 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006564:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006568:	4618      	mov	r0, r3
 800656a:	f003 f93b 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 800656e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006572:	4618      	mov	r0, r3
 8006574:	f016 fd21 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8006578:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800657c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006580:	214e      	movs	r1, #78	; 0x4e
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	f001 f973 	bl	800786e <_ZN3jlb5GraphixEc>
 8006588:	4604      	mov	r4, r0
 800658a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800658e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8006592:	4aa5      	ldr	r2, [pc, #660]	; (8006828 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	4611      	mov	r1, r2
 8006598:	8019      	strh	r1, [r3, #0]
 800659a:	3302      	adds	r3, #2
 800659c:	0c12      	lsrs	r2, r2, #16
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065a4:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80065a8:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065b2:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80065b6:	2203      	movs	r2, #3
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80065be:	4618      	mov	r0, r3
 80065c0:	f016 fcf9 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80065c4:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80065c8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80065cc:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 80065d0:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 80065d4:	ca06      	ldmia	r2, {r1, r2}
 80065d6:	f003 f997 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065da:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80065de:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800682c <_ZN3jlb5GraphC1Ev+0x2424>
 80065e2:	2202      	movs	r2, #2
 80065e4:	2149      	movs	r1, #73	; 0x49
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7fd febf 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80065ec:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80065f0:	4618      	mov	r0, r3
 80065f2:	f003 f8f7 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80065f6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80065fa:	4618      	mov	r0, r3
 80065fc:	f016 fcdd 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8006600:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006604:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006608:	214e      	movs	r1, #78	; 0x4e
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	f001 f92f 	bl	800786e <_ZN3jlb5GraphixEc>
 8006610:	4604      	mov	r4, r0
 8006612:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006616:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800661a:	4a83      	ldr	r2, [pc, #524]	; (8006828 <_ZN3jlb5GraphC1Ev+0x2420>)
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	4611      	mov	r1, r2
 8006620:	8019      	strh	r1, [r3, #0]
 8006622:	3302      	adds	r3, #2
 8006624:	0c12      	lsrs	r2, r2, #16
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800662c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8006630:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800663a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800663e:	2203      	movs	r2, #3
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006646:	4618      	mov	r0, r3
 8006648:	f016 fcb5 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800664c:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006650:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006654:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8006658:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 800665c:	ca06      	ldmia	r2, {r1, r2}
 800665e:	f003 f953 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006662:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8006666:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8006824 <_ZN3jlb5GraphC1Ev+0x241c>
 800666a:	2201      	movs	r2, #1
 800666c:	214c      	movs	r1, #76	; 0x4c
 800666e:	4620      	mov	r0, r4
 8006670:	f7fd fe7b 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006674:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8006678:	4618      	mov	r0, r3
 800667a:	f003 f8b3 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 800667e:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006682:	4618      	mov	r0, r3
 8006684:	f016 fc99 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8006688:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800668c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006690:	214e      	movs	r1, #78	; 0x4e
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	f001 f8eb 	bl	800786e <_ZN3jlb5GraphixEc>
 8006698:	4604      	mov	r4, r0
 800669a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800669e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80066a2:	4a63      	ldr	r2, [pc, #396]	; (8006830 <_ZN3jlb5GraphC1Ev+0x2428>)
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	4611      	mov	r1, r2
 80066a8:	8019      	strh	r1, [r3, #0]
 80066aa:	3302      	adds	r3, #2
 80066ac:	0c12      	lsrs	r2, r2, #16
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066b4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80066b8:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066c2:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80066c6:	2203      	movs	r2, #3
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80066ce:	4618      	mov	r0, r3
 80066d0:	f016 fc71 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80066d4:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80066d8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80066dc:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 80066e0:	f607 0068 	addw	r0, r7, #2152	; 0x868
 80066e4:	ca06      	ldmia	r2, {r1, r2}
 80066e6:	f003 f90f 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80066ea:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80066ee:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8006824 <_ZN3jlb5GraphC1Ev+0x241c>
 80066f2:	2200      	movs	r2, #0
 80066f4:	2154      	movs	r1, #84	; 0x54
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7fd fe37 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80066fc:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8006700:	4618      	mov	r0, r3
 8006702:	f003 f86f 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006706:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800670a:	4618      	mov	r0, r3
 800670c:	f016 fc55 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 8006710:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006714:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006718:	214e      	movs	r1, #78	; 0x4e
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	f001 f8a7 	bl	800786e <_ZN3jlb5GraphixEc>
 8006720:	4604      	mov	r4, r0
 8006722:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006726:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800672a:	4a41      	ldr	r2, [pc, #260]	; (8006830 <_ZN3jlb5GraphC1Ev+0x2428>)
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	4611      	mov	r1, r2
 8006730:	8019      	strh	r1, [r3, #0]
 8006732:	3302      	adds	r3, #2
 8006734:	0c12      	lsrs	r2, r2, #16
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800673c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8006740:	f607 0298 	addw	r2, r7, #2200	; 0x898
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800674a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800674e:	2203      	movs	r2, #3
 8006750:	605a      	str	r2, [r3, #4]
 8006752:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006756:	4618      	mov	r0, r3
 8006758:	f016 fc2d 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800675c:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006760:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006764:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8006768:	f607 0084 	addw	r0, r7, #2180	; 0x884
 800676c:	ca06      	ldmia	r2, {r1, r2}
 800676e:	f003 f8cb 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006772:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8006776:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8006834 <_ZN3jlb5GraphC1Ev+0x242c>
 800677a:	2202      	movs	r2, #2
 800677c:	2153      	movs	r1, #83	; 0x53
 800677e:	4620      	mov	r0, r4
 8006780:	f7fd fdf3 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006784:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8006788:	4618      	mov	r0, r3
 800678a:	f003 f82b 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 800678e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006792:	4618      	mov	r0, r3
 8006794:	f016 fc11 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8006798:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800679c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80067a0:	214e      	movs	r1, #78	; 0x4e
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	f001 f863 	bl	800786e <_ZN3jlb5GraphixEc>
 80067a8:	4604      	mov	r4, r0
 80067aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067ae:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80067b2:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <_ZN3jlb5GraphC1Ev+0x2428>)
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	4611      	mov	r1, r2
 80067b8:	8019      	strh	r1, [r3, #0]
 80067ba:	3302      	adds	r3, #2
 80067bc:	0c12      	lsrs	r2, r2, #16
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067c4:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80067c8:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067d2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80067d6:	2203      	movs	r2, #3
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80067de:	4618      	mov	r0, r3
 80067e0:	f016 fbe9 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80067e4:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80067e8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80067ec:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 80067f0:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 80067f4:	ca06      	ldmia	r2, {r1, r2}
 80067f6:	f003 f887 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80067fa:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80067fe:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8006824 <_ZN3jlb5GraphC1Ev+0x241c>
 8006802:	2201      	movs	r2, #1
 8006804:	2152      	movs	r1, #82	; 0x52
 8006806:	4620      	mov	r0, r4
 8006808:	f7fd fdaf 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800680c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8006810:	4618      	mov	r0, r3
 8006812:	f002 ffe7 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006816:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800681a:	4618      	mov	r0, r3
 800681c:	e00c      	b.n	8006838 <_ZN3jlb5GraphC1Ev+0x2430>
 800681e:	bf00      	nop
 8006820:	08021be8 	.word	0x08021be8
 8006824:	3f71463a 	.word	0x3f71463a
 8006828:	08021bec 	.word	0x08021bec
 800682c:	3f99999a 	.word	0x3f99999a
 8006830:	08021bf0 	.word	0x08021bf0
 8006834:	3f19999a 	.word	0x3f19999a
 8006838:	f016 fbbf 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 800683c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006840:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006844:	214f      	movs	r1, #79	; 0x4f
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	f001 f811 	bl	800786e <_ZN3jlb5GraphixEc>
 800684c:	4604      	mov	r4, r0
 800684e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006852:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8006856:	4aeb      	ldr	r2, [pc, #940]	; (8006c04 <_ZN3jlb5GraphC1Ev+0x27fc>)
 8006858:	6812      	ldr	r2, [r2, #0]
 800685a:	4611      	mov	r1, r2
 800685c:	8019      	strh	r1, [r3, #0]
 800685e:	3302      	adds	r3, #2
 8006860:	0c12      	lsrs	r2, r2, #16
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006868:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800686c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006876:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800687a:	2203      	movs	r2, #3
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8006882:	4618      	mov	r0, r3
 8006884:	f016 fb97 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006888:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800688c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006890:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8006894:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8006898:	ca06      	ldmia	r2, {r1, r2}
 800689a:	f003 f835 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800689e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 80068a2:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8006c14 <_ZN3jlb5GraphC1Ev+0x280c>
 80068a6:	2200      	movs	r2, #0
 80068a8:	214c      	movs	r1, #76	; 0x4c
 80068aa:	4620      	mov	r0, r4
 80068ac:	f7fd fd5d 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80068b0:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 80068b4:	4618      	mov	r0, r3
 80068b6:	f002 ff95 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80068ba:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 80068be:	4618      	mov	r0, r3
 80068c0:	f016 fb7b 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 80068c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068c8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80068cc:	214f      	movs	r1, #79	; 0x4f
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	f000 ffcd 	bl	800786e <_ZN3jlb5GraphixEc>
 80068d4:	4604      	mov	r4, r0
 80068d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068da:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80068de:	224c      	movs	r2, #76	; 0x4c
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068e6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80068ea:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068f4:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80068f8:	2201      	movs	r2, #1
 80068fa:	605a      	str	r2, [r3, #4]
 80068fc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8006900:	4618      	mov	r0, r3
 8006902:	f016 fb58 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006906:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800690a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800690e:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8006912:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 8006916:	ca06      	ldmia	r2, {r1, r2}
 8006918:	f002 fff6 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800691c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006920:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8006c14 <_ZN3jlb5GraphC1Ev+0x280c>
 8006924:	2200      	movs	r2, #0
 8006926:	2155      	movs	r1, #85	; 0x55
 8006928:	4620      	mov	r0, r4
 800692a:	f7fd fd1e 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800692e:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006932:	4618      	mov	r0, r3
 8006934:	f002 ff56 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006938:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800693c:	4618      	mov	r0, r3
 800693e:	f016 fb3c 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 8006942:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006946:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800694a:	214f      	movs	r1, #79	; 0x4f
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	f000 ff8e 	bl	800786e <_ZN3jlb5GraphixEc>
 8006952:	4604      	mov	r4, r0
 8006954:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006958:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800695c:	224c      	movs	r2, #76	; 0x4c
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006964:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8006968:	f607 1208 	addw	r2, r7, #2312	; 0x908
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006972:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8006976:	2201      	movs	r2, #1
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800697e:	4618      	mov	r0, r3
 8006980:	f016 fb19 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006984:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8006988:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800698c:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8006990:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8006994:	ca06      	ldmia	r2, {r1, r2}
 8006996:	f002 ffb7 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800699a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 800699e:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8006c08 <_ZN3jlb5GraphC1Ev+0x2800>
 80069a2:	2202      	movs	r2, #2
 80069a4:	2157      	movs	r1, #87	; 0x57
 80069a6:	4620      	mov	r0, r4
 80069a8:	f7fd fcdf 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069ac:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f002 ff17 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80069b6:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80069ba:	4618      	mov	r0, r3
 80069bc:	f016 fafd 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 80069c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069c4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80069c8:	214f      	movs	r1, #79	; 0x4f
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	f000 ff4f 	bl	800786e <_ZN3jlb5GraphixEc>
 80069d0:	4604      	mov	r4, r0
 80069d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069d6:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80069da:	224c      	movs	r2, #76	; 0x4c
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069e2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80069e6:	f607 1224 	addw	r2, r7, #2340	; 0x924
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069f0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80069f4:	2201      	movs	r2, #1
 80069f6:	605a      	str	r2, [r3, #4]
 80069f8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80069fc:	4618      	mov	r0, r3
 80069fe:	f016 fada 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006a02:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006a06:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a0a:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8006a0e:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 8006a12:	ca06      	ldmia	r2, {r1, r2}
 8006a14:	f002 ff78 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a18:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8006a1c:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8006c14 <_ZN3jlb5GraphC1Ev+0x280c>
 8006a20:	2201      	movs	r2, #1
 8006a22:	2154      	movs	r1, #84	; 0x54
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7fd fca0 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a2a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f002 fed8 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006a34:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f016 fabe 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8006a3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a42:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a46:	2150      	movs	r1, #80	; 0x50
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	f000 ff10 	bl	800786e <_ZN3jlb5GraphixEc>
 8006a4e:	4604      	mov	r4, r0
 8006a50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a54:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8006a58:	2250      	movs	r2, #80	; 0x50
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a60:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8006a64:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a6e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8006a72:	2201      	movs	r2, #1
 8006a74:	605a      	str	r2, [r3, #4]
 8006a76:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f016 fa9b 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006a80:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8006a84:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a88:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8006a8c:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8006a90:	ca06      	ldmia	r2, {r1, r2}
 8006a92:	f002 ff39 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a96:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8006a9a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8006c14 <_ZN3jlb5GraphC1Ev+0x280c>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	214d      	movs	r1, #77	; 0x4d
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7fd fc61 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006aa8:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8006aac:	4618      	mov	r0, r3
 8006aae:	f002 fe99 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ab2:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f016 fa7f 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 8006abc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ac0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ac4:	2150      	movs	r1, #80	; 0x50
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	f000 fed1 	bl	800786e <_ZN3jlb5GraphixEc>
 8006acc:	4604      	mov	r4, r0
 8006ace:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ad2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8006ad6:	2250      	movs	r2, #80	; 0x50
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ade:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8006ae2:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006aec:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8006af0:	2201      	movs	r2, #1
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8006af8:	4618      	mov	r0, r3
 8006afa:	f016 fa5c 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006afe:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8006b02:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b06:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8006b0a:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8006b0e:	ca06      	ldmia	r2, {r1, r2}
 8006b10:	f002 fefa 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b14:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8006b18:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8006c10 <_ZN3jlb5GraphC1Ev+0x2808>
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	2151      	movs	r1, #81	; 0x51
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7fd fc22 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b26:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f002 fe5a 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b30:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8006b34:	4618      	mov	r0, r3
 8006b36:	f016 fa40 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 8006b3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b3e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b42:	2151      	movs	r1, #81	; 0x51
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	f000 fe92 	bl	800786e <_ZN3jlb5GraphixEc>
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b50:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8006b54:	2252      	movs	r2, #82	; 0x52
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b5c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8006b60:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b6a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8006b6e:	2201      	movs	r2, #1
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8006b76:	4618      	mov	r0, r3
 8006b78:	f016 fa1d 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006b7c:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8006b80:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b84:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8006b88:	f607 1064 	addw	r0, r7, #2404	; 0x964
 8006b8c:	ca06      	ldmia	r2, {r1, r2}
 8006b8e:	f002 febb 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b92:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8006b96:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8006c10 <_ZN3jlb5GraphC1Ev+0x2808>
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	2150      	movs	r1, #80	; 0x50
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f7fd fbe3 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006ba4:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f002 fe1b 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006bae:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f016 fa01 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8006bb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bbc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006bc0:	2151      	movs	r1, #81	; 0x51
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	f000 fe53 	bl	800786e <_ZN3jlb5GraphixEc>
 8006bc8:	4604      	mov	r4, r0
 8006bca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bce:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8006bd2:	4a0e      	ldr	r2, [pc, #56]	; (8006c0c <_ZN3jlb5GraphC1Ev+0x2804>)
 8006bd4:	8812      	ldrh	r2, [r2, #0]
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bdc:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8006be0:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bea:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8006bee:	2202      	movs	r2, #2
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f016 f9dd 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006bfc:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8006c00:	e00c      	b.n	8006c1c <_ZN3jlb5GraphC1Ev+0x2814>
 8006c02:	bf00      	nop
 8006c04:	08021bf4 	.word	0x08021bf4
 8006c08:	3fc56fea 	.word	0x3fc56fea
 8006c0c:	08021bf8 	.word	0x08021bf8
 8006c10:	3f19999a 	.word	0x3f19999a
 8006c14:	3f71463a 	.word	0x3f71463a
 8006c18:	401c518f 	.word	0x401c518f
 8006c1c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c20:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8006c24:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8006c28:	ca06      	ldmia	r2, {r1, r2}
 8006c2a:	f002 fe6d 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c2e:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8006c32:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8006c10 <_ZN3jlb5GraphC1Ev+0x2808>
 8006c36:	2202      	movs	r2, #2
 8006c38:	214d      	movs	r1, #77	; 0x4d
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7fd fb95 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c40:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8006c44:	4618      	mov	r0, r3
 8006c46:	f002 fdcd 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006c4a:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f016 f9b3 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 8006c54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c58:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c5c:	2151      	movs	r1, #81	; 0x51
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	f000 fe05 	bl	800786e <_ZN3jlb5GraphixEc>
 8006c64:	4604      	mov	r4, r0
 8006c66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c6a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8006c6e:	2250      	movs	r2, #80	; 0x50
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c76:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8006c7a:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c84:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8006c88:	2201      	movs	r2, #1
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8006c90:	4618      	mov	r0, r3
 8006c92:	f016 f990 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006c96:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8006c9a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c9e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8006ca2:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8006ca6:	ca06      	ldmia	r2, {r1, r2}
 8006ca8:	f002 fe2e 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006cac:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006cb0:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8006c10 <_ZN3jlb5GraphC1Ev+0x2808>
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	2152      	movs	r1, #82	; 0x52
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f7fd fb56 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006cbe:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 fd8e 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006cc8:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f016 f974 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8006cd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cd6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006cda:	2151      	movs	r1, #81	; 0x51
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	f000 fdc6 	bl	800786e <_ZN3jlb5GraphixEc>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ce8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8006cec:	224d      	movs	r2, #77	; 0x4d
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cf4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8006cf8:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d02:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8006d06:	2201      	movs	r2, #1
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f016 f951 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006d14:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006d18:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d1c:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8006d20:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 8006d24:	ca06      	ldmia	r2, {r1, r2}
 8006d26:	f002 fdef 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d2a:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8006d2e:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 8006c14 <_ZN3jlb5GraphC1Ev+0x280c>
 8006d32:	2200      	movs	r2, #0
 8006d34:	2156      	movs	r1, #86	; 0x56
 8006d36:	4620      	mov	r0, r4
 8006d38:	f7fd fb17 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006d3c:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8006d40:	4618      	mov	r0, r3
 8006d42:	f002 fd4f 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006d46:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f016 f935 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8006d50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d54:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d58:	2151      	movs	r1, #81	; 0x51
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	f000 fd87 	bl	800786e <_ZN3jlb5GraphixEc>
 8006d60:	4604      	mov	r4, r0
 8006d62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d66:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8006d6a:	224d      	movs	r2, #77	; 0x4d
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d72:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8006d76:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d80:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8006d84:	2201      	movs	r2, #1
 8006d86:	605a      	str	r2, [r3, #4]
 8006d88:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f016 f912 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006d92:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8006d96:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d9a:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8006d9e:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 8006da2:	ca06      	ldmia	r2, {r1, r2}
 8006da4:	f002 fdb0 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006da8:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8006dac:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8006c18 <_ZN3jlb5GraphC1Ev+0x2810>
 8006db0:	2202      	movs	r2, #2
 8006db2:	2158      	movs	r1, #88	; 0x58
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7fd fad8 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006dba:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f002 fd10 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006dc4:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f016 f8f6 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8006dce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dd2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006dd6:	2152      	movs	r1, #82	; 0x52
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	f000 fd48 	bl	800786e <_ZN3jlb5GraphixEc>
 8006dde:	4604      	mov	r4, r0
 8006de0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006de4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006de8:	4ae6      	ldr	r2, [pc, #920]	; (8007184 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8006dea:	8812      	ldrh	r2, [r2, #0]
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006df2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006df6:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e00:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006e04:	2202      	movs	r2, #2
 8006e06:	605a      	str	r2, [r3, #4]
 8006e08:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f016 f8d2 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006e12:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006e16:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e1a:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8006e1e:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 8006e22:	ca06      	ldmia	r2, {r1, r2}
 8006e24:	f002 fd70 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e28:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8006e2c:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8007188 <_ZN3jlb5GraphC1Ev+0x2d80>
 8006e30:	2202      	movs	r2, #2
 8006e32:	2151      	movs	r1, #81	; 0x51
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7fd fa98 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006e3a:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f002 fcd0 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e44:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f016 f8b6 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 8006e4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e52:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e56:	2152      	movs	r1, #82	; 0x52
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	f000 fd08 	bl	800786e <_ZN3jlb5GraphixEc>
 8006e5e:	4604      	mov	r4, r0
 8006e60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e64:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8006e68:	4ac6      	ldr	r2, [pc, #792]	; (8007184 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8006e6a:	8812      	ldrh	r2, [r2, #0]
 8006e6c:	801a      	strh	r2, [r3, #0]
 8006e6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e72:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8006e76:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e80:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8006e84:	2202      	movs	r2, #2
 8006e86:	605a      	str	r2, [r3, #4]
 8006e88:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f016 f892 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006e92:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8006e96:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e9a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8006e9e:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 8006ea2:	ca06      	ldmia	r2, {r1, r2}
 8006ea4:	f002 fd30 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ea8:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8006eac:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8007194 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	214d      	movs	r1, #77	; 0x4d
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f7fd fa58 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006eba:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f002 fc90 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ec4:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f016 f876 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 8006ece:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ed2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ed6:	2152      	movs	r1, #82	; 0x52
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	f000 fcc8 	bl	800786e <_ZN3jlb5GraphixEc>
 8006ede:	4604      	mov	r4, r0
 8006ee0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ee4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006ee8:	4aa8      	ldr	r2, [pc, #672]	; (800718c <_ZN3jlb5GraphC1Ev+0x2d84>)
 8006eea:	8812      	ldrh	r2, [r2, #0]
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ef2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006ef6:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f00:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006f04:	2202      	movs	r2, #2
 8006f06:	605a      	str	r2, [r3, #4]
 8006f08:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f016 f852 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006f12:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8006f16:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f1a:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8006f1e:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 8006f22:	ca06      	ldmia	r2, {r1, r2}
 8006f24:	f002 fcf0 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006f28:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8006f2c:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8007194 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8006f30:	2200      	movs	r2, #0
 8006f32:	214e      	movs	r1, #78	; 0x4e
 8006f34:	4620      	mov	r0, r4
 8006f36:	f7fd fa18 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f3a:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f002 fc50 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f44:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f016 f836 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 8006f4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f52:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f56:	2152      	movs	r1, #82	; 0x52
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f000 fc88 	bl	800786e <_ZN3jlb5GraphixEc>
 8006f5e:	4604      	mov	r4, r0
 8006f60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f64:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8006f68:	4a88      	ldr	r2, [pc, #544]	; (800718c <_ZN3jlb5GraphC1Ev+0x2d84>)
 8006f6a:	8812      	ldrh	r2, [r2, #0]
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f72:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8006f76:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f80:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8006f84:	2202      	movs	r2, #2
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f016 f812 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8006f92:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8006f96:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f9a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8006f9e:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 8006fa2:	ca06      	ldmia	r2, {r1, r2}
 8006fa4:	f002 fcb0 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006fa8:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8006fac:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8007188 <_ZN3jlb5GraphC1Ev+0x2d80>
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	2153      	movs	r1, #83	; 0x53
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7fd f9d8 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006fba:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 fc10 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006fc4:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f015 fff6 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 8006fce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fd2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006fd6:	2153      	movs	r1, #83	; 0x53
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	f000 fc48 	bl	800786e <_ZN3jlb5GraphixEc>
 8006fde:	4604      	mov	r4, r0
 8006fe0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fe4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8006fe8:	2254      	movs	r2, #84	; 0x54
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ff4:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007002:	2201      	movs	r2, #1
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800700a:	4618      	mov	r0, r3
 800700c:	f015 ffd3 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007010:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8007014:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007018:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 800701c:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 8007020:	ca06      	ldmia	r2, {r1, r2}
 8007022:	f002 fc71 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007026:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800702a:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8007188 <_ZN3jlb5GraphC1Ev+0x2d80>
 800702e:	2202      	movs	r2, #2
 8007030:	2152      	movs	r1, #82	; 0x52
 8007032:	4620      	mov	r0, r4
 8007034:	f7fd f999 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007038:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800703c:	4618      	mov	r0, r3
 800703e:	f002 fbd1 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007042:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8007046:	4618      	mov	r0, r3
 8007048:	f015 ffb7 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 800704c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007050:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007054:	2153      	movs	r1, #83	; 0x53
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	f000 fc09 	bl	800786e <_ZN3jlb5GraphixEc>
 800705c:	4604      	mov	r4, r0
 800705e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007062:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007066:	4a4a      	ldr	r2, [pc, #296]	; (8007190 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8007068:	8812      	ldrh	r2, [r2, #0]
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007070:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007074:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800707e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007082:	2202      	movs	r2, #2
 8007084:	605a      	str	r2, [r3, #4]
 8007086:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 800708a:	4618      	mov	r0, r3
 800708c:	f015 ff93 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007090:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007094:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007098:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800709c:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 80070a0:	ca06      	ldmia	r2, {r1, r2}
 80070a2:	f002 fc31 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80070a6:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 80070aa:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8007188 <_ZN3jlb5GraphC1Ev+0x2d80>
 80070ae:	2202      	movs	r2, #2
 80070b0:	214e      	movs	r1, #78	; 0x4e
 80070b2:	4620      	mov	r0, r4
 80070b4:	f7fd f959 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80070b8:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 80070bc:	4618      	mov	r0, r3
 80070be:	f002 fb91 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80070c2:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80070c6:	4618      	mov	r0, r3
 80070c8:	f015 ff77 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 80070cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070d0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80070d4:	2153      	movs	r1, #83	; 0x53
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	f000 fbc9 	bl	800786e <_ZN3jlb5GraphixEc>
 80070dc:	4604      	mov	r4, r0
 80070de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80070e6:	2252      	movs	r2, #82	; 0x52
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80070f2:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070fc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007100:	2201      	movs	r2, #1
 8007102:	605a      	str	r2, [r3, #4]
 8007104:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007108:	4618      	mov	r0, r3
 800710a:	f015 ff54 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800710e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007112:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007116:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800711a:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 800711e:	ca06      	ldmia	r2, {r1, r2}
 8007120:	f002 fbf2 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007124:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8007128:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007188 <_ZN3jlb5GraphC1Ev+0x2d80>
 800712c:	2202      	movs	r2, #2
 800712e:	2154      	movs	r1, #84	; 0x54
 8007130:	4620      	mov	r0, r4
 8007132:	f7fd f91a 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007136:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800713a:	4618      	mov	r0, r3
 800713c:	f002 fb52 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007140:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007144:	4618      	mov	r0, r3
 8007146:	f015 ff38 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 800714a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800714e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007152:	2153      	movs	r1, #83	; 0x53
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f000 fb8a 	bl	800786e <_ZN3jlb5GraphixEc>
 800715a:	4604      	mov	r4, r0
 800715c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007160:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8007164:	224e      	movs	r2, #78	; 0x4e
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800716c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007170:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800717a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800717e:	2201      	movs	r2, #1
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	e009      	b.n	8007198 <_ZN3jlb5GraphC1Ev+0x2d90>
 8007184:	08021bfc 	.word	0x08021bfc
 8007188:	3f19999a 	.word	0x3f19999a
 800718c:	08021c00 	.word	0x08021c00
 8007190:	08021c04 	.word	0x08021c04
 8007194:	3f71463a 	.word	0x3f71463a
 8007198:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 800719c:	4618      	mov	r0, r3
 800719e:	f015 ff0a 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80071a2:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80071a6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80071aa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80071ae:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 80071b2:	ca06      	ldmia	r2, {r1, r2}
 80071b4:	f002 fba8 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80071b8:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 80071bc:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8007194 <_ZN3jlb5GraphC1Ev+0x2d8c>
 80071c0:	2200      	movs	r2, #0
 80071c2:	2157      	movs	r1, #87	; 0x57
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7fd f8d0 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80071ca:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 80071ce:	4618      	mov	r0, r3
 80071d0:	f002 fb08 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80071d4:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80071d8:	4618      	mov	r0, r3
 80071da:	f015 feee 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 80071de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80071e6:	2153      	movs	r1, #83	; 0x53
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	f000 fb40 	bl	800786e <_ZN3jlb5GraphixEc>
 80071ee:	4604      	mov	r4, r0
 80071f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80071f8:	224e      	movs	r2, #78	; 0x4e
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007200:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007204:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800720e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007212:	2201      	movs	r2, #1
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800721a:	4618      	mov	r0, r3
 800721c:	f015 fecb 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007220:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007224:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007228:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 800722c:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8007230:	ca06      	ldmia	r2, {r1, r2}
 8007232:	f002 fb69 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007236:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800723a:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8007194 <_ZN3jlb5GraphC1Ev+0x2d8c>
 800723e:	2201      	movs	r2, #1
 8007240:	2156      	movs	r1, #86	; 0x56
 8007242:	4620      	mov	r0, r4
 8007244:	f7fd f891 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007248:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800724c:	4618      	mov	r0, r3
 800724e:	f002 fac9 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007252:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007256:	4618      	mov	r0, r3
 8007258:	f015 feaf 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 800725c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007260:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007264:	2154      	movs	r1, #84	; 0x54
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	f000 fb01 	bl	800786e <_ZN3jlb5GraphixEc>
 800726c:	4604      	mov	r4, r0
 800726e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007272:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007276:	4ae9      	ldr	r2, [pc, #932]	; (800761c <_ZN3jlb5GraphC1Ev+0x3214>)
 8007278:	8812      	ldrh	r2, [r2, #0]
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007280:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007284:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800728e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007292:	2202      	movs	r2, #2
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 800729a:	4618      	mov	r0, r3
 800729c:	f015 fe8b 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80072a0:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80072a4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80072a8:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 80072ac:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 80072b0:	ca06      	ldmia	r2, {r1, r2}
 80072b2:	f002 fb29 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80072b6:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 80072ba:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8007620 <_ZN3jlb5GraphC1Ev+0x3218>
 80072be:	2202      	movs	r2, #2
 80072c0:	2153      	movs	r1, #83	; 0x53
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7fd f851 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80072c8:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 80072cc:	4618      	mov	r0, r3
 80072ce:	f002 fa89 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80072d2:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80072d6:	4618      	mov	r0, r3
 80072d8:	f015 fe6f 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 80072dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80072e4:	2154      	movs	r1, #84	; 0x54
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	f000 fac1 	bl	800786e <_ZN3jlb5GraphixEc>
 80072ec:	4604      	mov	r4, r0
 80072ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80072f6:	4ac9      	ldr	r2, [pc, #804]	; (800761c <_ZN3jlb5GraphC1Ev+0x3214>)
 80072f8:	8812      	ldrh	r2, [r2, #0]
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007300:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007304:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800730e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007312:	2202      	movs	r2, #2
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800731a:	4618      	mov	r0, r3
 800731c:	f015 fe4b 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007320:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007324:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007328:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800732c:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8007330:	ca06      	ldmia	r2, {r1, r2}
 8007332:	f002 fae9 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007336:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800733a:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8007630 <_ZN3jlb5GraphC1Ev+0x3228>
 800733e:	2201      	movs	r2, #1
 8007340:	214e      	movs	r1, #78	; 0x4e
 8007342:	4620      	mov	r0, r4
 8007344:	f7fd f811 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007348:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800734c:	4618      	mov	r0, r3
 800734e:	f002 fa49 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007352:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007356:	4618      	mov	r0, r3
 8007358:	f015 fe2f 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 800735c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007360:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007364:	2154      	movs	r1, #84	; 0x54
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	f000 fa81 	bl	800786e <_ZN3jlb5GraphixEc>
 800736c:	4604      	mov	r4, r0
 800736e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007376:	4aab      	ldr	r2, [pc, #684]	; (8007624 <_ZN3jlb5GraphC1Ev+0x321c>)
 8007378:	8812      	ldrh	r2, [r2, #0]
 800737a:	801a      	strh	r2, [r3, #0]
 800737c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007380:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007384:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800738e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007392:	2202      	movs	r2, #2
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800739a:	4618      	mov	r0, r3
 800739c:	f015 fe0b 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80073a0:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 80073a4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80073a8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80073ac:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 80073b0:	ca06      	ldmia	r2, {r1, r2}
 80073b2:	f002 faa9 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80073b6:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 80073ba:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8007630 <_ZN3jlb5GraphC1Ev+0x3228>
 80073be:	2200      	movs	r2, #0
 80073c0:	214f      	movs	r1, #79	; 0x4f
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7fc ffd1 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80073c8:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f002 fa09 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80073d2:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 80073d6:	4618      	mov	r0, r3
 80073d8:	f015 fdef 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 80073dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80073e4:	2154      	movs	r1, #84	; 0x54
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	f000 fa41 	bl	800786e <_ZN3jlb5GraphixEc>
 80073ec:	4604      	mov	r4, r0
 80073ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80073f6:	4a8b      	ldr	r2, [pc, #556]	; (8007624 <_ZN3jlb5GraphC1Ev+0x321c>)
 80073f8:	8812      	ldrh	r2, [r2, #0]
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007400:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007404:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800740e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007412:	2202      	movs	r2, #2
 8007414:	605a      	str	r2, [r3, #4]
 8007416:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800741a:	4618      	mov	r0, r3
 800741c:	f015 fdcb 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007420:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007424:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007428:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800742c:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 8007430:	ca06      	ldmia	r2, {r1, r2}
 8007432:	f002 fa69 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007436:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800743a:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800762c <_ZN3jlb5GraphC1Ev+0x3224>
 800743e:	2202      	movs	r2, #2
 8007440:	2155      	movs	r1, #85	; 0x55
 8007442:	4620      	mov	r0, r4
 8007444:	f7fc ff91 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007448:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800744c:	4618      	mov	r0, r3
 800744e:	f002 f9c9 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007452:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007456:	4618      	mov	r0, r3
 8007458:	f015 fdaf 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 800745c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007460:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007464:	2155      	movs	r1, #85	; 0x55
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	f000 fa01 	bl	800786e <_ZN3jlb5GraphixEc>
 800746c:	4604      	mov	r4, r0
 800746e:	2355      	movs	r3, #85	; 0x55
 8007470:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8007474:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007478:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800747c:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007486:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800748a:	2201      	movs	r2, #1
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007492:	4618      	mov	r0, r3
 8007494:	f015 fd8f 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007498:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800749c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80074a0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80074a4:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 80074a8:	ca06      	ldmia	r2, {r1, r2}
 80074aa:	f002 fa2d 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80074ae:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 80074b2:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800762c <_ZN3jlb5GraphC1Ev+0x3224>
 80074b6:	2202      	movs	r2, #2
 80074b8:	2154      	movs	r1, #84	; 0x54
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7fc ff55 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80074c0:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 80074c4:	4618      	mov	r0, r3
 80074c6:	f002 f98d 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80074ca:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 80074ce:	4618      	mov	r0, r3
 80074d0:	f015 fd73 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 80074d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074d8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80074dc:	2155      	movs	r1, #85	; 0x55
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	f000 f9c5 	bl	800786e <_ZN3jlb5GraphixEc>
 80074e4:	4604      	mov	r4, r0
 80074e6:	2355      	movs	r3, #85	; 0x55
 80074e8:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 80074ec:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 80074f0:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80074f4:	2301      	movs	r3, #1
 80074f6:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 80074fa:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80074fe:	4618      	mov	r0, r3
 8007500:	f015 fd59 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007504:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007508:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 800750c:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8007510:	ca06      	ldmia	r2, {r1, r2}
 8007512:	f002 f9f9 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007516:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800751a:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8007630 <_ZN3jlb5GraphC1Ev+0x3228>
 800751e:	2201      	movs	r2, #1
 8007520:	214f      	movs	r1, #79	; 0x4f
 8007522:	4620      	mov	r0, r4
 8007524:	f7fc ff21 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007528:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800752c:	4618      	mov	r0, r3
 800752e:	f002 f959 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007532:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007536:	4618      	mov	r0, r3
 8007538:	f015 fd3f 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 800753c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007540:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007544:	2156      	movs	r1, #86	; 0x56
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	f000 f991 	bl	800786e <_ZN3jlb5GraphixEc>
 800754c:	4604      	mov	r4, r0
 800754e:	4b36      	ldr	r3, [pc, #216]	; (8007628 <_ZN3jlb5GraphC1Ev+0x3220>)
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8007556:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 800755a:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 800755e:	2302      	movs	r3, #2
 8007560:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8007564:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007568:	4618      	mov	r0, r3
 800756a:	f015 fd24 	bl	801cfb6 <_ZNSaIcEC1Ev>
 800756e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007572:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8007576:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800757a:	ca06      	ldmia	r2, {r1, r2}
 800757c:	f002 f9c4 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007580:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007584:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8007630 <_ZN3jlb5GraphC1Ev+0x3228>
 8007588:	2201      	movs	r2, #1
 800758a:	2151      	movs	r1, #81	; 0x51
 800758c:	4620      	mov	r0, r4
 800758e:	f7fc feec 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007592:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007596:	4618      	mov	r0, r3
 8007598:	f002 f924 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 800759c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 80075a0:	4618      	mov	r0, r3
 80075a2:	f015 fd0a 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 80075a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075aa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80075ae:	2156      	movs	r1, #86	; 0x56
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	f000 f95c 	bl	800786e <_ZN3jlb5GraphixEc>
 80075b6:	4604      	mov	r4, r0
 80075b8:	2351      	movs	r3, #81	; 0x51
 80075ba:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 80075be:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 80075c2:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 80075c6:	2301      	movs	r3, #1
 80075c8:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 80075cc:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80075d0:	4618      	mov	r0, r3
 80075d2:	f015 fcf0 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80075d6:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80075da:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 80075de:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 80075e2:	ca06      	ldmia	r2, {r1, r2}
 80075e4:	f002 f990 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80075e8:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80075ec:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007630 <_ZN3jlb5GraphC1Ev+0x3228>
 80075f0:	2200      	movs	r2, #0
 80075f2:	2153      	movs	r1, #83	; 0x53
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7fc feb8 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80075fa:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80075fe:	4618      	mov	r0, r3
 8007600:	f002 f8f0 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007604:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007608:	4618      	mov	r0, r3
 800760a:	f015 fcd6 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 800760e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007612:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007616:	2156      	movs	r1, #86	; 0x56
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	e00b      	b.n	8007634 <_ZN3jlb5GraphC1Ev+0x322c>
 800761c:	08021c08 	.word	0x08021c08
 8007620:	3f19999a 	.word	0x3f19999a
 8007624:	08021bfc 	.word	0x08021bfc
 8007628:	08021c0c 	.word	0x08021c0c
 800762c:	3f99999a 	.word	0x3f99999a
 8007630:	3f71463a 	.word	0x3f71463a
 8007634:	f000 f91b 	bl	800786e <_ZN3jlb5GraphixEc>
 8007638:	4604      	mov	r4, r0
 800763a:	2351      	movs	r3, #81	; 0x51
 800763c:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 8007640:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8007644:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8007648:	2301      	movs	r3, #1
 800764a:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 800764e:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8007652:	4618      	mov	r0, r3
 8007654:	f015 fcaf 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007658:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800765c:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8007660:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8007664:	ca06      	ldmia	r2, {r1, r2}
 8007666:	f002 f94f 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800766a:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 800766e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800762c <_ZN3jlb5GraphC1Ev+0x3224>
 8007672:	2202      	movs	r2, #2
 8007674:	2157      	movs	r1, #87	; 0x57
 8007676:	4620      	mov	r0, r4
 8007678:	f7fc fe77 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800767c:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8007680:	4618      	mov	r0, r3
 8007682:	f002 f8af 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007686:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800768a:	4618      	mov	r0, r3
 800768c:	f015 fc95 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8007690:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007694:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007698:	2157      	movs	r1, #87	; 0x57
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	f000 f8e7 	bl	800786e <_ZN3jlb5GraphixEc>
 80076a0:	4604      	mov	r4, r0
 80076a2:	234f      	movs	r3, #79	; 0x4f
 80076a4:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 80076a8:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 80076ac:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 80076b0:	2301      	movs	r3, #1
 80076b2:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 80076b6:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80076ba:	4618      	mov	r0, r3
 80076bc:	f015 fc7b 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80076c0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80076c4:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 80076c8:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 80076cc:	ca06      	ldmia	r2, {r1, r2}
 80076ce:	f002 f91b 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80076d2:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80076d6:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 800762c <_ZN3jlb5GraphC1Ev+0x3224>
 80076da:	2202      	movs	r2, #2
 80076dc:	2156      	movs	r1, #86	; 0x56
 80076de:	4620      	mov	r0, r4
 80076e0:	f7fc fe43 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80076e4:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80076e8:	4618      	mov	r0, r3
 80076ea:	f002 f87b 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80076ee:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80076f2:	4618      	mov	r0, r3
 80076f4:	f015 fc61 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 80076f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076fc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007700:	2157      	movs	r1, #87	; 0x57
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	f000 f8b3 	bl	800786e <_ZN3jlb5GraphixEc>
 8007708:	4604      	mov	r4, r0
 800770a:	234f      	movs	r3, #79	; 0x4f
 800770c:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 8007710:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8007714:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 8007718:	2301      	movs	r3, #1
 800771a:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 800771e:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8007722:	4618      	mov	r0, r3
 8007724:	f015 fc47 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007728:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800772c:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 8007730:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 8007734:	ca06      	ldmia	r2, {r1, r2}
 8007736:	f002 f8e7 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800773a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800773e:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8007630 <_ZN3jlb5GraphC1Ev+0x3228>
 8007742:	2201      	movs	r2, #1
 8007744:	2153      	movs	r1, #83	; 0x53
 8007746:	4620      	mov	r0, r4
 8007748:	f7fc fe0f 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800774c:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8007750:	4618      	mov	r0, r3
 8007752:	f002 f847 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007756:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800775a:	4618      	mov	r0, r3
 800775c:	f015 fc2d 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8007760:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007764:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007768:	2157      	movs	r1, #87	; 0x57
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	f000 f87f 	bl	800786e <_ZN3jlb5GraphixEc>
 8007770:	4604      	mov	r4, r0
 8007772:	4b35      	ldr	r3, [pc, #212]	; (8007848 <_ZN3jlb5GraphC1Ev+0x3440>)
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 800777a:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 800777e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8007782:	2302      	movs	r3, #2
 8007784:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8007788:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800778c:	4618      	mov	r0, r3
 800778e:	f015 fc12 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8007792:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007796:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 800779a:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 800779e:	ca06      	ldmia	r2, {r1, r2}
 80077a0:	f002 f8b2 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80077a4:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80077a8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800784c <_ZN3jlb5GraphC1Ev+0x3444>
 80077ac:	2202      	movs	r2, #2
 80077ae:	214f      	movs	r1, #79	; 0x4f
 80077b0:	4620      	mov	r0, r4
 80077b2:	f7fc fdda 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80077b6:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80077ba:	4618      	mov	r0, r3
 80077bc:	f002 f812 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 80077c0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80077c4:	4618      	mov	r0, r3
 80077c6:	f015 fbf8 	bl	801cfba <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 80077ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80077d2:	2158      	movs	r1, #88	; 0x58
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f000 f84a 	bl	800786e <_ZN3jlb5GraphixEc>
 80077da:	4604      	mov	r4, r0
 80077dc:	2358      	movs	r3, #88	; 0x58
 80077de:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 80077e2:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80077e6:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 80077ea:	2301      	movs	r3, #1
 80077ec:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 80077f0:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80077f4:	4618      	mov	r0, r3
 80077f6:	f015 fbde 	bl	801cfb6 <_ZNSaIcEC1Ev>
 80077fa:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80077fe:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 8007802:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 8007806:	ca06      	ldmia	r2, {r1, r2}
 8007808:	f002 f87e 	bl	8009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800780c:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8007810:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8007850 <_ZN3jlb5GraphC1Ev+0x3448>
 8007814:	2202      	movs	r2, #2
 8007816:	2151      	movs	r1, #81	; 0x51
 8007818:	4620      	mov	r0, r4
 800781a:	f7fc fda6 	bl	800436a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800781e:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8007822:	4618      	mov	r0, r3
 8007824:	f001 ffde 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007828:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 800782c:	4618      	mov	r0, r3
 800782e:	f015 fbc4 	bl	801cfba <_ZNSaIcED1Ev>
        }
 8007832:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007836:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 8007842:	46bd      	mov	sp, r7
 8007844:	bd90      	pop	{r4, r7, pc}
 8007846:	bf00      	nop
 8007848:	08021c10 	.word	0x08021c10
 800784c:	3fc56fea 	.word	0x3fc56fea
 8007850:	401c518f 	.word	0x401c518f

08007854 <_ZN3jlb5GraphD1Ev>:

        ~Graph() {}
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4618      	mov	r0, r3
 8007860:	f002 f826 	bl	80098b0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <_ZN3jlb5GraphixEc>:
        Node &operator[](char name)
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
        {
#ifdef SIMULATION
            if (nodes.empty()) throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X') throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	3b41      	subs	r3, #65	; 0x41
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f002 f861 	bl	800994a <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8007888:	4603      	mov	r3, r0
        }
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a0:	d205      	bcs.n	80078ae <_ZSt16__deque_buf_sizej+0x1c>
 80078a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	e000      	b.n	80078b0 <_ZSt16__deque_buf_sizej+0x1e>
 80078ae:	2301      	movs	r3, #1
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f002 f85e 	bl	8009988 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <_ZN3jlb8OdometryC1Efff>:
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        uint32_t tick_counter = 0u;
        uint32_t tick_counter_prev = 0u;
        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	ed87 0a02 	vstr	s0, [r7, #8]
 80078e2:	edc7 0a01 	vstr	s1, [r7, #4]
 80078e6:	ed87 1a00 	vstr	s2, [r7]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	605a      	str	r2, [r3, #4]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	609a      	str	r2, [r3, #8]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	60da      	str	r2, [r3, #12]
 8007906:	ed97 0a00 	vldr	s0, [r7]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fa98 	bl	8007e40 <_ZN3jlb8Odometry15normalize_angleEf>
 8007910:	eef0 7a40 	vmov.f32	s15, s0
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	edc3 7a04 	vstr	s15, [r3, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	615a      	str	r2, [r3, #20]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	619a      	str	r2, [r3, #24]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	61da      	str	r2, [r3, #28]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	621a      	str	r2, [r3, #32]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	625a      	str	r2, [r3, #36]	; 0x24
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	629a      	str	r2, [r3, #40]	; 0x28
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f04f 0200 	mov.w	r2, #0
 8007950:	62da      	str	r2, [r3, #44]	; 0x2c
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	631a      	str	r2, [r3, #48]	; 0x30
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	635a      	str	r2, [r3, #52]	; 0x34
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	333c      	adds	r3, #60	; 0x3c
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff ffa6 	bl	80078bc <_ZNSt5dequeIfSaIfEEC1Ev>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3364      	adds	r3, #100	; 0x64
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff ffa1 	bl	80078bc <_ZNSt5dequeIfSaIfEEC1Ev>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <_ZN3jlb8OdometryD1Ev>:

        ~Odometry() {}
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3364      	adds	r3, #100	; 0x64
 8007998:	4618      	mov	r0, r3
 800799a:	f002 f828 	bl	80099ee <_ZNSt5dequeIfSaIfEED1Ev>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	333c      	adds	r3, #60	; 0x3c
 80079a2:	4618      	mov	r0, r3
 80079a4:	f002 f823 	bl	80099ee <_ZNSt5dequeIfSaIfEED1Ev>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	0000      	movs	r0, r0
 80079b4:	0000      	movs	r0, r0
	...

080079b8 <_ZN3jlb8Odometry12rpm_callbackEf>:

        void rpm_callback(const float wheel_rpm)
 80079b8:	b580      	push	{r7, lr}
 80079ba:	ed2d 8b02 	vpush	{d8}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_wheel_rpm = wheel_rpm;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	619a      	str	r2, [r3, #24]
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 80079ce:	6838      	ldr	r0, [r7, #0]
 80079d0:	f7f8 fdac 	bl	800052c <__aeabi_f2d>
 80079d4:	a33e      	add	r3, pc, #248	; (adr r3, 8007ad0 <_ZN3jlb8Odometry12rpm_callbackEf+0x118>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f7f8 fdff 	bl	80005dc <__aeabi_dmul>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4610      	mov	r0, r2
 80079e4:	4619      	mov	r1, r3
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	4b37      	ldr	r3, [pc, #220]	; (8007ac8 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>)
 80079ec:	f7f8 ff20 	bl	8000830 <__aeabi_ddiv>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4610      	mov	r0, r2
 80079f6:	4619      	mov	r1, r3
 80079f8:	f7f9 f8c8 	bl	8000b8c <__aeabi_d2f>
 80079fc:	4603      	mov	r3, r0
 80079fe:	60fb      	str	r3, [r7, #12]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 8007a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a04:	eeb0 0a67 	vmov.f32	s0, s15
 8007a08:	f7fb fdd4 	bl	80035b4 <_ZSt4fabsf>
 8007a0c:	eef0 7a40 	vmov.f32	s15, s0
 8007a10:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	bfcc      	ite	gt
 8007a1e:	2301      	movgt	r3, #1
 8007a20:	2300      	movle	r3, #0
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d146      	bne.n	8007ab6 <_ZN3jlb8Odometry12rpm_callbackEf+0xfe>

            v_buffer_.push_back(velocity);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	333c      	adds	r3, #60	; 0x3c
 8007a2c:	f107 020c 	add.w	r2, r7, #12
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f002 f800 	bl	8009a38 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE) { v_buffer_.pop_front(); }
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	333c      	adds	r3, #60	; 0x3c
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f002 f81c 	bl	8009a7a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	bf8c      	ite	hi
 8007a48:	2301      	movhi	r3, #1
 8007a4a:	2300      	movls	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <_ZN3jlb8Odometry12rpm_callbackEf+0xa4>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	333c      	adds	r3, #60	; 0x3c
 8007a56:	4618      	mov	r0, r3
 8007a58:	f002 f821 	bl	8009a9e <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007a62:	f107 0310 	add.w	r3, r7, #16
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f002 f83b 	bl	8009ae4 <_ZNSt5dequeIfSaIfEE5beginEv>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007a74:	f107 0320 	add.w	r3, r7, #32
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f002 f841 	bl	8009b02 <_ZNSt5dequeIfSaIfEE3endEv>
 8007a80:	f107 0220 	add.w	r2, r7, #32
 8007a84:	f107 0310 	add.w	r3, r7, #16
 8007a88:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007acc <_ZN3jlb8Odometry12rpm_callbackEf+0x114>
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f002 f851 	bl	8009b36 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8007a94:	eeb0 8a40 	vmov.f32	s16, s0
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	333c      	adds	r3, #60	; 0x3c
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 ffec 	bl	8009a7a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8007aa2:	ee07 0a90 	vmov	s15, r0
 8007aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007aaa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	edc3 7a00 	vstr	s15, [r3]
 8007ab4:	e000      	b.n	8007ab8 <_ZN3jlb8Odometry12rpm_callbackEf+0x100>
            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 8007ab6:	bf00      	nop
        }
 8007ab8:	3730      	adds	r7, #48	; 0x30
 8007aba:	46bd      	mov	sp, r7
 8007abc:	ecbd 8b02 	vpop	{d8}
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	404e0000 	.word	0x404e0000
 8007acc:	00000000 	.word	0x00000000
 8007ad0:	64af6f9d 	.word	0x64af6f9d
 8007ad4:	3fd51c8b 	.word	0x3fd51c8b

08007ad8 <_ZN3jlb8Odometry12imu_callbackEffffff>:

        void imu_callback(const float ang_vel_x, const float ang_vel_y, const float ang_vel_z, const float lin_acc_x, const float lin_acc_y, const float lin_acc_z)
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	ed2d 8b02 	vpush	{d8}
 8007ade:	b090      	sub	sp, #64	; 0x40
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	61f8      	str	r0, [r7, #28]
 8007ae4:	ed87 0a06 	vstr	s0, [r7, #24]
 8007ae8:	edc7 0a05 	vstr	s1, [r7, #20]
 8007aec:	ed87 1a04 	vstr	s2, [r7, #16]
 8007af0:	edc7 1a03 	vstr	s3, [r7, #12]
 8007af4:	ed87 2a02 	vstr	s4, [r7, #8]
 8007af8:	edc7 2a01 	vstr	s5, [r7, #4]
        {
        	meas_ang_vel_z = ang_vel_x;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	625a      	str	r2, [r3, #36]	; 0x24
        	meas_ang_vel_z = ang_vel_y;
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	625a      	str	r2, [r3, #36]	; 0x24
        	meas_ang_vel_z = ang_vel_z;
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	625a      	str	r2, [r3, #36]	; 0x24
        	meas_lin_acc_x = lin_acc_x;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28
        	meas_lin_acc_x = lin_acc_y;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	629a      	str	r2, [r3, #40]	; 0x28
        	meas_lin_acc_x = lin_acc_z;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	629a      	str	r2, [r3, #40]	; 0x28

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 8007b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b24:	eeb0 0a67 	vmov.f32	s0, s15
 8007b28:	f7fb fd44 	bl	80035b4 <_ZSt4fabsf>
 8007b2c:	eef0 7a40 	vmov.f32	s15, s0
 8007b30:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007be4 <_ZN3jlb8Odometry12imu_callbackEffffff+0x10c>
 8007b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3c:	bfcc      	ite	gt
 8007b3e:	2301      	movgt	r3, #1
 8007b40:	2300      	movle	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d146      	bne.n	8007bd6 <_ZN3jlb8Odometry12imu_callbackEffffff+0xfe>

            w_buffer_.push_back(ang_vel_z);
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	3364      	adds	r3, #100	; 0x64
 8007b4c:	f107 0210 	add.w	r2, r7, #16
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 ff70 	bl	8009a38 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE) { w_buffer_.pop_front(); }
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3364      	adds	r3, #100	; 0x64
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 ff8c 	bl	8009a7a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b0a      	cmp	r3, #10
 8007b66:	bf8c      	ite	hi
 8007b68:	2301      	movhi	r3, #1
 8007b6a:	2300      	movls	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <_ZN3jlb8Odometry12imu_callbackEffffff+0xa4>
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	3364      	adds	r3, #100	; 0x64
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 ff91 	bl	8009a9e <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8007b82:	f107 0320 	add.w	r3, r7, #32
 8007b86:	4611      	mov	r1, r2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f001 ffab 	bl	8009ae4 <_ZNSt5dequeIfSaIfEE5beginEv>
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8007b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 ffb1 	bl	8009b02 <_ZNSt5dequeIfSaIfEE3endEv>
 8007ba0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007ba4:	f107 0320 	add.w	r3, r7, #32
 8007ba8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8007be8 <_ZN3jlb8Odometry12imu_callbackEffffff+0x110>
 8007bac:	4611      	mov	r1, r2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 ffc1 	bl	8009b36 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8007bb4:	eeb0 8a40 	vmov.f32	s16, s0
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	3364      	adds	r3, #100	; 0x64
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 ff5c 	bl	8009a7a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8007bc2:	ee07 0a90 	vmov	s15, r0
 8007bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bca:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	edc3 7a01 	vstr	s15, [r3, #4]
 8007bd4:	e000      	b.n	8007bd8 <_ZN3jlb8Odometry12imu_callbackEffffff+0x100>
            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 8007bd6:	bf00      	nop
        }
 8007bd8:	3740      	adds	r7, #64	; 0x40
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	ecbd 8b02 	vpop	{d8}
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	4096cbe4 	.word	0x4096cbe4
	...

08007bf0 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	ed2d 8b02 	vpush	{d8}
 8007bf6:	b08c      	sub	sp, #48	; 0x30
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6178      	str	r0, [r7, #20]
        {
#ifndef SIMULATION
            // TODO: add timestamp and dt
        	tick_counter_prev = tick_counter;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38
        	tick_counter = HAL_GetTick();
 8007c04:	f008 fc3a 	bl	801047c <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	635a      	str	r2, [r3, #52]	; 0x34
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c2a:	eddf 6a75 	vldr	s13, [pc, #468]	; 8007e00 <_ZN3jlb8Odometry11update_odomEv+0x210>
 8007c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c32:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            auto  update_timestamp = std::chrono::steady_clock::now();
            float dt               = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 8007c36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c42:	f340 80b0 	ble.w	8007da6 <_ZN3jlb8Odometry11update_odomEv+0x1b6>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	edd3 7a00 	vldr	s15, [r3]
 8007c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c50:	f7fb fcb0 	bl	80035b4 <_ZSt4fabsf>
 8007c54:	ee10 3a10 	vmov	r3, s0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7f8 fc67 	bl	800052c <__aeabi_f2d>
 8007c5e:	a364      	add	r3, pc, #400	; (adr r3, 8007df0 <_ZN3jlb8Odometry11update_odomEv+0x200>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f7f8 ff2c 	bl	8000ac0 <__aeabi_dcmplt>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <_ZN3jlb8Odometry11update_odomEv+0x84>
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	e001      	b.n	8007c78 <_ZN3jlb8Odometry11update_odomEv+0x88>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	6013      	str	r3, [r2, #0]
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007c82:	eeb0 0a67 	vmov.f32	s0, s15
 8007c86:	f7fb fc95 	bl	80035b4 <_ZSt4fabsf>
 8007c8a:	ee10 3a10 	vmov	r3, s0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7f8 fc4c 	bl	800052c <__aeabi_f2d>
 8007c94:	a358      	add	r3, pc, #352	; (adr r3, 8007df8 <_ZN3jlb8Odometry11update_odomEv+0x208>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f7f8 ff11 	bl	8000ac0 <__aeabi_dcmplt>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <_ZN3jlb8Odometry11update_odomEv+0xba>
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	e001      	b.n	8007cae <_ZN3jlb8Odometry11update_odomEv+0xbe>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 8007cb2:	f04f 0300 	mov.w	r3, #0
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	ed93 8a00 	vldr	s16, [r3]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8007cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8007cc8:	f7fb fc64 	bl	8003594 <_ZSt3cosf>
 8007ccc:	eef0 7a40 	vmov.f32	s15, s0
 8007cd0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8007cda:	eeb0 0a67 	vmov.f32	s0, s15
 8007cde:	f7fb fc79 	bl	80035d4 <_ZSt3sinf>
 8007ce2:	eeb0 7a40 	vmov.f32	s14, s0
 8007ce6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	ee38 7a67 	vsub.f32	s14, s16, s15
 8007cf2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	ed93 8a00 	vldr	s16, [r3]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d16:	eeb0 0a67 	vmov.f32	s0, s15
 8007d1a:	f7fb fc5b 	bl	80035d4 <_ZSt3sinf>
 8007d1e:	eef0 7a40 	vmov.f32	s15, s0
 8007d22:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8007d30:	f7fb fc30 	bl	8003594 <_ZSt3cosf>
 8007d34:	eeb0 7a40 	vmov.f32	s14, s0
 8007d38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d40:	ee38 7a27 	vadd.f32	s14, s16, s15
 8007d44:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	edd3 6a01 	vldr	s13, [r3, #4]
 8007d68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d74:	eeb0 0a67 	vmov.f32	s0, s15
 8007d78:	6978      	ldr	r0, [r7, #20]
 8007d7a:	f000 f861 	bl	8007e40 <_ZN3jlb8Odometry15normalize_angleEf>
 8007d7e:	eef0 7a40 	vmov.f32	s15, s0
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	edc3 7a04 	vstr	s15, [r3, #16]

                distance_traveled_since_checkpoint += vx_t * dt;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	ed93 7a05 	vldr	s14, [r3, #20]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	edd3 6a00 	vldr	s13, [r3]
 8007d94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	edc3 7a05 	vstr	s15, [r3, #20]
            }
#ifdef SIMULATION
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	61bb      	str	r3, [r7, #24]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	623b      	str	r3, [r7, #32]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dbe:	69b8      	ldr	r0, [r7, #24]
 8007dc0:	69f9      	ldr	r1, [r7, #28]
 8007dc2:	6a3a      	ldr	r2, [r7, #32]
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	ee06 0a10 	vmov	s12, r0
 8007dca:	ee06 1a90 	vmov	s13, r1
 8007dce:	ee07 2a10 	vmov	s14, r2
 8007dd2:	ee07 3a90 	vmov	s15, r3
        }
 8007dd6:	eeb0 0a46 	vmov.f32	s0, s12
 8007dda:	eef0 0a66 	vmov.f32	s1, s13
 8007dde:	eeb0 1a47 	vmov.f32	s2, s14
 8007de2:	eef0 1a67 	vmov.f32	s3, s15
 8007de6:	3730      	adds	r7, #48	; 0x30
 8007de8:	46bd      	mov	sp, r7
 8007dea:	ecbd 8b02 	vpop	{d8}
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	eb851eb8 	.word	0xeb851eb8
 8007df4:	3f9eb851 	.word	0x3f9eb851
 8007df8:	eb851eb8 	.word	0xeb851eb8
 8007dfc:	3f8eb851 	.word	0x3f8eb851
 8007e00:	447a0000 	.word	0x447a0000

08007e04 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	ed87 0a03 	vstr	s0, [r7, #12]
 8007e0e:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7f8 fb8a 	bl	800052c <__aeabi_f2d>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	ed97 1b00 	vldr	d1, [r7]
 8007e20:	ec43 2b10 	vmov	d0, r2, r3
 8007e24:	f015 f8da 	bl	801cfdc <fmod>
 8007e28:	eeb0 7a40 	vmov.f32	s14, s0
 8007e2c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8007e30:	eeb0 0a47 	vmov.f32	s0, s14
 8007e34:	eef0 0a67 	vmov.f32	s1, s15
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 8007e4c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8007ea8 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8007e50:	ed97 0a00 	vldr	s0, [r7]
 8007e54:	f7ff ffd6 	bl	8007e04 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8007e58:	ec53 2b10 	vmov	r2, r3, d0
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4619      	mov	r1, r3
 8007e60:	f7f8 fe94 	bl	8000b8c <__aeabi_d2f>
 8007e64:	4603      	mov	r3, r0
 8007e66:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f) { angle += 2.0f * M_PI; }
 8007e68:	edd7 7a00 	vldr	s15, [r7]
 8007e6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e74:	d50f      	bpl.n	8007e96 <_ZN3jlb8Odometry15normalize_angleEf+0x56>
 8007e76:	6838      	ldr	r0, [r7, #0]
 8007e78:	f7f8 fb58 	bl	800052c <__aeabi_f2d>
 8007e7c:	a30a      	add	r3, pc, #40	; (adr r3, 8007ea8 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	f7f8 f9f5 	bl	8000270 <__adddf3>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f7f8 fe7d 	bl	8000b8c <__aeabi_d2f>
 8007e92:	4603      	mov	r3, r0
 8007e94:	603b      	str	r3, [r7, #0]
            return angle;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	ee07 3a90 	vmov	s15, r3
        }
 8007e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	54442d18 	.word	0x54442d18
 8007eac:	401921fb 	.word	0x401921fb

08007eb0 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 8007eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb4:	b094      	sub	sp, #80	; 0x50
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6178      	str	r0, [r7, #20]
 8007eba:	ed87 0a04 	vstr	s0, [r7, #16]
 8007ebe:	edc7 0a03 	vstr	s1, [r7, #12]
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	edd3 7a04 	vldr	s15, [r3, #16]
 8007ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8007ecc:	f7fb fb62 	bl	8003594 <_ZSt3cosf>
 8007ed0:	eef0 7a40 	vmov.f32	s15, s0
 8007ed4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007edc:	ed97 7a04 	vldr	s14, [r7, #16]
 8007ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	edd3 7a04 	vldr	s15, [r3, #16]
 8007ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ef4:	f7fb fb6e 	bl	80035d4 <_ZSt3sinf>
 8007ef8:	eef0 7a40 	vmov.f32	s15, s0
 8007efc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f04:	ed97 7a03 	vldr	s14, [r7, #12]
 8007f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	edc3 7a03 	vstr	s15, [r3, #12]

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0   = std::fabs(theta_t);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f18:	eeb0 0a67 	vmov.f32	s0, s15
 8007f1c:	f7fb fb4a 	bl	80035b4 <_ZSt4fabsf>
 8007f20:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7f8 faff 	bl	800052c <__aeabi_f2d>
 8007f2e:	a396      	add	r3, pc, #600	; (adr r3, 8008188 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f7f8 f99a 	bl	800026c <__aeabi_dsub>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	603a      	str	r2, [r7, #0]
 8007f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f42:	607b      	str	r3, [r7, #4]
 8007f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f48:	f7f8 fe20 	bl	8000b8c <__aeabi_d2f>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48
            float theta_180 = std::fabs(theta_t - M_PI);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7f8 fae9 	bl	800052c <__aeabi_f2d>
 8007f5a:	a38d      	add	r3, pc, #564	; (adr r3, 8008190 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 f984 	bl	800026c <__aeabi_dsub>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4692      	mov	sl, r2
 8007f6a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8007f6e:	4650      	mov	r0, sl
 8007f70:	4659      	mov	r1, fp
 8007f72:	f7f8 fe0b 	bl	8000b8c <__aeabi_d2f>
 8007f76:	4603      	mov	r3, r0
 8007f78:	647b      	str	r3, [r7, #68]	; 0x44
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7f8 fad4 	bl	800052c <__aeabi_f2d>
 8007f84:	a384      	add	r3, pc, #528	; (adr r3, 8008198 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f96f 	bl	800026c <__aeabi_dsub>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4690      	mov	r8, r2
 8007f94:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007f98:	4640      	mov	r0, r8
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	f7f8 fdf6 	bl	8000b8c <__aeabi_d2f>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	643b      	str	r3, [r7, #64]	; 0x40
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7f8 fabf 	bl	800052c <__aeabi_f2d>
 8007fae:	a37c      	add	r3, pc, #496	; (adr r3, 80081a0 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f7f8 f95a 	bl	800026c <__aeabi_dsub>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4614      	mov	r4, r2
 8007fbe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fde1 	bl	8000b8c <__aeabi_d2f>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 8007fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8007fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe6:	61fb      	str	r3, [r7, #28]
 8007fe8:	2305      	movs	r3, #5
 8007fea:	623b      	str	r3, [r7, #32]
 8007fec:	f107 031c 	add.w	r3, r7, #28
 8007ff0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ff4:	f001 fdd1 	bl	8009b9a <_ZSt3minIfET_St16initializer_listIS0_E>
 8007ff8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

            if (min_theta == theta_0) { theta_t = (theta_t + 0.0f) / 2.0f; }
 8007ffc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008000:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008004:	eeb4 7a67 	vcmp.f32	s14, s15
 8008008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800c:	d10e      	bne.n	800802c <_ZN3jlb8Odometry10correctionEff+0x17c>
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	edd3 7a04 	vldr	s15, [r3, #16]
 8008014:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80081a8 <_ZN3jlb8Odometry10correctionEff+0x2f8>
 8008018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800801c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	edc3 7a04 	vstr	s15, [r3, #16]
 800802a:	e09a      	b.n	8008162 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_90) { theta_t = (theta_t + M_PI / 2.0f) / 2.0f; }
 800802c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008030:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008034:	eeb4 7a67 	vcmp.f32	s14, s15
 8008038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803c:	d11d      	bne.n	800807a <_ZN3jlb8Odometry10correctionEff+0x1ca>
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 fa72 	bl	800052c <__aeabi_f2d>
 8008048:	a34f      	add	r3, pc, #316	; (adr r3, 8008188 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 f90f 	bl	8000270 <__adddf3>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008062:	f7f8 fbe5 	bl	8000830 <__aeabi_ddiv>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4610      	mov	r0, r2
 800806c:	4619      	mov	r1, r3
 800806e:	f7f8 fd8d 	bl	8000b8c <__aeabi_d2f>
 8008072:	4602      	mov	r2, r0
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	611a      	str	r2, [r3, #16]
 8008078:	e073      	b.n	8008162 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_180) { theta_t = (theta_t + M_PI) / 2.0f; }
 800807a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800807e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008082:	eeb4 7a67 	vcmp.f32	s14, s15
 8008086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808a:	d11d      	bne.n	80080c8 <_ZN3jlb8Odometry10correctionEff+0x218>
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	4618      	mov	r0, r3
 8008092:	f7f8 fa4b 	bl	800052c <__aeabi_f2d>
 8008096:	a33e      	add	r3, pc, #248	; (adr r3, 8008190 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	f7f8 f8e8 	bl	8000270 <__adddf3>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4610      	mov	r0, r2
 80080a6:	4619      	mov	r1, r3
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080b0:	f7f8 fbbe 	bl	8000830 <__aeabi_ddiv>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4610      	mov	r0, r2
 80080ba:	4619      	mov	r1, r3
 80080bc:	f7f8 fd66 	bl	8000b8c <__aeabi_d2f>
 80080c0:	4602      	mov	r2, r0
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	611a      	str	r2, [r3, #16]
 80080c6:	e04c      	b.n	8008162 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_270) { theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f; }
 80080c8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80080cc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80080d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80080d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d8:	d11d      	bne.n	8008116 <_ZN3jlb8Odometry10correctionEff+0x266>
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7f8 fa24 	bl	800052c <__aeabi_f2d>
 80080e4:	a32c      	add	r3, pc, #176	; (adr r3, 8008198 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 f8c1 	bl	8000270 <__adddf3>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080fe:	f7f8 fb97 	bl	8000830 <__aeabi_ddiv>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4610      	mov	r0, r2
 8008108:	4619      	mov	r1, r3
 800810a:	f7f8 fd3f 	bl	8000b8c <__aeabi_d2f>
 800810e:	4602      	mov	r2, r0
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	611a      	str	r2, [r3, #16]
 8008114:	e025      	b.n	8008162 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }
 8008116:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800811a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800811e:	eeb4 7a67 	vcmp.f32	s14, s15
 8008122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008126:	d11c      	bne.n	8008162 <_ZN3jlb8Odometry10correctionEff+0x2b2>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	4618      	mov	r0, r3
 800812e:	f7f8 f9fd 	bl	800052c <__aeabi_f2d>
 8008132:	a31b      	add	r3, pc, #108	; (adr r3, 80081a0 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f7f8 f89a 	bl	8000270 <__adddf3>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4610      	mov	r0, r2
 8008142:	4619      	mov	r1, r3
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800814c:	f7f8 fb70 	bl	8000830 <__aeabi_ddiv>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4610      	mov	r0, r2
 8008156:	4619      	mov	r1, r3
 8008158:	f7f8 fd18 	bl	8000b8c <__aeabi_d2f>
 800815c:	4602      	mov	r2, r0
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	611a      	str	r2, [r3, #16]

            theta_t = normalize_angle(theta_t);
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	edd3 7a04 	vldr	s15, [r3, #16]
 8008168:	eeb0 0a67 	vmov.f32	s0, s15
 800816c:	6978      	ldr	r0, [r7, #20]
 800816e:	f7ff fe67 	bl	8007e40 <_ZN3jlb8Odometry15normalize_angleEf>
 8008172:	eef0 7a40 	vmov.f32	s15, s0
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	edc3 7a04 	vstr	s15, [r3, #16]
        }
 800817c:	bf00      	nop
 800817e:	3750      	adds	r7, #80	; 0x50
 8008180:	46bd      	mov	sp, r7
 8008182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008186:	bf00      	nop
 8008188:	54442d18 	.word	0x54442d18
 800818c:	3ff921fb 	.word	0x3ff921fb
 8008190:	54442d18 	.word	0x54442d18
 8008194:	400921fb 	.word	0x400921fb
 8008198:	7f3321d2 	.word	0x7f3321d2
 800819c:	4012d97c 	.word	0x4012d97c
 80081a0:	54442d18 	.word	0x54442d18
 80081a4:	401921fb 	.word	0x401921fb
 80081a8:	00000000 	.word	0x00000000

080081ac <_ZN3jlb14CompositeStateC1ENS_9FastStateE>:
        Mission        mission;
        LabyrinthState labyrinth_state;
        FastState      fast_state;
        float          reference_speed = 0.0f;

        CompositeState(FastState fast_state_) : mission{Mission::FAST}, labyrinth_state{LabyrinthState::START}, fast_state{fast_state_}, reference_speed{0.0f} {}
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	605a      	str	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	609a      	str	r2, [r3, #8]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	60da      	str	r2, [r3, #12]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>:
        CompositeState(LabyrinthState labyrinth_state_) : mission{Mission::LABYRINTH}, labyrinth_state{labyrinth_state_}, fast_state{FastState::FOLLOW_SAFETY_CAR}, reference_speed{0.0f} {}
        CompositeState(Mission mission_, LabyrinthState labyrinth_state_, FastState fast_state_, float reference_speed_)
 80081de:	b480      	push	{r7}
 80081e0:	b087      	sub	sp, #28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6178      	str	r0, [r7, #20]
 80081e6:	6139      	str	r1, [r7, #16]
 80081e8:	60fa      	str	r2, [r7, #12]
 80081ea:	60bb      	str	r3, [r7, #8]
 80081ec:	ed87 0a01 	vstr	s0, [r7, #4]
            : mission{mission_}, labyrinth_state{labyrinth_state_}, fast_state{fast_state_}, reference_speed{reference_speed_}
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	609a      	str	r2, [r3, #8]
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	60da      	str	r2, [r3, #12]
        {
        }
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	4618      	mov	r0, r3
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>:
        uint32_t tick_counter_prev = 0u;

        [[maybe_unused]] char previous_node = 'U';
        [[maybe_unused]] char next_node     = 'U';

        ASState(Odometry& odometry_, Controller& controller_, Graph& graph_) : odometry{odometry_}, controller{controller_}, graph{graph_} {}
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	607a      	str	r2, [r7, #4]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	605a      	str	r2, [r3, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	609a      	str	r2, [r3, #8]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	60da      	str	r2, [r3, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	741a      	strb	r2, [r3, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	745a      	strb	r2, [r3, #17]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	749a      	strb	r2, [r3, #18]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	74da      	strb	r2, [r3, #19]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	615a      	str	r2, [r3, #20]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f04f 0200 	mov.w	r2, #0
 8008264:	619a      	str	r2, [r3, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	771a      	strb	r2, [r3, #28]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	621a      	str	r2, [r3, #32]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	625a      	str	r2, [r3, #36]	; 0x24
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2255      	movs	r2, #85	; 0x55
 800827c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2255      	movs	r2, #85	; 0x55
 8008284:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	62da      	str	r2, [r3, #44]	; 0x2c
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	631a      	str	r2, [r3, #48]	; 0x30
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	635a      	str	r2, [r3, #52]	; 0x34
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>:

        void set_states(const CompositeState state_)
 80082a8:	b084      	sub	sp, #16
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	f107 0014 	add.w	r0, r7, #20
 80082b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        {
            mission         = state_.mission;
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	601a      	str	r2, [r3, #0]
            labyrinth_state = state_.labyrinth_state;
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	605a      	str	r2, [r3, #4]
            fast_state      = state_.fast_state;
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	609a      	str	r2, [r3, #8]
        }
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	b004      	add	sp, #16
 80082d8:	4770      	bx	lr

080082da <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <_ZN3jlb7ASState6updateEv>:

        CompositeState update()
 80082f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082f2:	ed2d 8b02 	vpush	{d8}
 80082f6:	b08f      	sub	sp, #60	; 0x3c
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
        {
#ifndef SIMULATION
            // TODO: add timestamp
        	tick_counter_prev = tick_counter;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	6a1a      	ldr	r2, [r3, #32]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	625a      	str	r2, [r3, #36]	; 0x24
        	tick_counter = HAL_GetTick();
 8008306:	f008 f8b9 	bl	801047c <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	621a      	str	r2, [r3, #32]
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	ee07 3a90 	vmov	s15, r3
 8008318:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800832c:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8008644 <_ZN3jlb7ASState6updateEv+0x354>
 8008330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008334:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            auto                   update_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp_ - prev_update_timestamp_).count() / 1000.0f;
            prev_update_timestamp_                   = update_timestamp_;
#endif

            state_transition_time += dt;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	ed93 7a06 	vldr	s14, [r3, #24]
 800833e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	edc3 7a06 	vstr	s15, [r3, #24]
            state_time += dt;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	ed93 7a05 	vldr	s14, [r3, #20]
 8008352:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	edc3 7a05 	vstr	s15, [r3, #20]

            switch (mission)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <_ZN3jlb7ASState6updateEv+0x80>
 8008368:	2b01      	cmp	r3, #1
 800836a:	f000 8176 	beq.w	800865a <_ZN3jlb7ASState6updateEv+0x36a>
                    break;
                }
                default:
                {
                    // this should never happen
                    break;
 800836e:	e29e      	b.n	80088ae <_ZN3jlb7ASState6updateEv+0x5be>
                    bool at_decision_point = under_gate || at_cross_section;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	7c1b      	ldrb	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d103      	bne.n	8008380 <_ZN3jlb7ASState6updateEv+0x90>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	7c5b      	ldrb	r3, [r3, #17]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <_ZN3jlb7ASState6updateEv+0x94>
 8008380:	2301      	movs	r3, #1
 8008382:	e000      	b.n	8008386 <_ZN3jlb7ASState6updateEv+0x96>
 8008384:	2300      	movs	r3, #0
 8008386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (!prev_at_decision_point && at_decision_point)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	7c9b      	ldrb	r3, [r3, #18]
 800838e:	f083 0301 	eor.w	r3, r3, #1
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8157 	beq.w	8008648 <_ZN3jlb7ASState6updateEv+0x358>
 800839a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 8152 	beq.w	8008648 <_ZN3jlb7ASState6updateEv+0x358>
                        float inaccuracy = 0.25f;
 80083a4:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if (std::sqrt(std::pow(graph[next_node].x - odometry.x_t, 2) + std::pow(graph[next_node].y - odometry.y_t, 2)) < inaccuracy)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f7ff fa59 	bl	800786e <_ZN3jlb5GraphixEc>
 80083bc:	4603      	mov	r3, r0
 80083be:	ed93 7a01 	vldr	s14, [r3, #4]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80083ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083ce:	2002      	movs	r0, #2
 80083d0:	eeb0 0a67 	vmov.f32	s0, s15
 80083d4:	f7f9 f882 	bl	80014dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80083d8:	ec55 4b10 	vmov	r4, r5, d0
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f7ff fa40 	bl	800786e <_ZN3jlb5GraphixEc>
 80083ee:	4603      	mov	r3, r0
 80083f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80083fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008400:	2002      	movs	r0, #2
 8008402:	eeb0 0a67 	vmov.f32	s0, s15
 8008406:	f7f9 f869 	bl	80014dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800840a:	ec53 2b10 	vmov	r2, r3, d0
 800840e:	4620      	mov	r0, r4
 8008410:	4629      	mov	r1, r5
 8008412:	f7f7 ff2d 	bl	8000270 <__adddf3>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	ec43 2b17 	vmov	d7, r2, r3
 800841e:	eeb0 0a47 	vmov.f32	s0, s14
 8008422:	eef0 0a67 	vmov.f32	s1, s15
 8008426:	f014 fe77 	bl	801d118 <sqrt>
 800842a:	ec55 4b10 	vmov	r4, r5, d0
 800842e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008430:	f7f8 f87c 	bl	800052c <__aeabi_f2d>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	2101      	movs	r1, #1
 800843a:	460e      	mov	r6, r1
 800843c:	4620      	mov	r0, r4
 800843e:	4629      	mov	r1, r5
 8008440:	f7f8 fb3e 	bl	8000ac0 <__aeabi_dcmplt>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <_ZN3jlb7ASState6updateEv+0x15e>
 800844a:	2300      	movs	r3, #0
 800844c:	461e      	mov	r6, r3
 800844e:	b2f3      	uxtb	r3, r6
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80f9 	beq.w	8008648 <_ZN3jlb7ASState6updateEv+0x358>
                            auto at_node = next_node;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800845c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                unsigned long num_neighbors = graph[at_node].edges.size();
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008464:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff f9ff 	bl	800786e <_ZN3jlb5GraphixEc>
 8008470:	4603      	mov	r3, r0
 8008472:	330c      	adds	r3, #12
 8008474:	4618      	mov	r0, r3
 8008476:	f001 fbad 	bl	8009bd4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800847a:	6278      	str	r0, [r7, #36]	; 0x24
                                auto          selected_edge = rand() % num_neighbors;
 800847c:	f017 ff16 	bl	80202ac <rand>
 8008480:	4603      	mov	r3, r0
 8008482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008484:	fbb3 f2f2 	udiv	r2, r3, r2
 8008488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800848a:	fb01 f202 	mul.w	r2, r1, r2
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	623b      	str	r3, [r7, #32]
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008496:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff f9e6 	bl	800786e <_ZN3jlb5GraphixEc>
 80084a2:	4603      	mov	r3, r0
 80084a4:	330c      	adds	r3, #12
 80084a6:	6a39      	ldr	r1, [r7, #32]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f001 fba9 	bl	8009c00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80084ae:	4603      	mov	r3, r0
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b50      	cmp	r3, #80	; 0x50
 80084b4:	d023      	beq.n	80084fe <_ZN3jlb7ASState6updateEv+0x20e>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80084be:	4611      	mov	r1, r2
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff f9d4 	bl	800786e <_ZN3jlb5GraphixEc>
 80084c6:	4603      	mov	r3, r0
 80084c8:	330c      	adds	r3, #12
 80084ca:	6a39      	ldr	r1, [r7, #32]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 fb97 	bl	8009c00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80084d2:	4603      	mov	r3, r0
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b55      	cmp	r3, #85	; 0x55
 80084d8:	d011      	beq.n	80084fe <_ZN3jlb7ASState6updateEv+0x20e>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff f9c2 	bl	800786e <_ZN3jlb5GraphixEc>
 80084ea:	4603      	mov	r3, r0
 80084ec:	330c      	adds	r3, #12
 80084ee:	6a39      	ldr	r1, [r7, #32]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f001 fb85 	bl	8009c00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80084f6:	4603      	mov	r3, r0
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b58      	cmp	r3, #88	; 0x58
 80084fc:	d101      	bne.n	8008502 <_ZN3jlb7ASState6updateEv+0x212>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <_ZN3jlb7ASState6updateEv+0x214>
 8008502:	2300      	movs	r3, #0
 8008504:	2b00      	cmp	r3, #0
 8008506:	f040 809a 	bne.w	800863e <_ZN3jlb7ASState6updateEv+0x34e>
                                auto prev_nodes = graph[at_node].edges[selected_edge].prev_nodes;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008512:	4611      	mov	r1, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff f9aa 	bl	800786e <_ZN3jlb5GraphixEc>
 800851a:	4603      	mov	r3, r0
 800851c:	330c      	adds	r3, #12
 800851e:	6a39      	ldr	r1, [r7, #32]
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fb6d 	bl	8009c00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008526:	4603      	mov	r3, r0
 8008528:	f103 0208 	add.w	r2, r3, #8
 800852c:	f107 030c 	add.w	r3, r7, #12
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f001 f919 	bl	800976a <_ZNSt6vectorIcSaIcEEC1ERKS1_>
                                if (std::find(prev_nodes.begin(), prev_nodes.end(), previous_node) != prev_nodes.end())
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	4618      	mov	r0, r3
 800853e:	f001 fb72 	bl	8009c26 <_ZNSt6vectorIcSaIcEE5beginEv>
 8008542:	4604      	mov	r4, r0
 8008544:	f107 030c 	add.w	r3, r7, #12
 8008548:	4618      	mov	r0, r3
 800854a:	f001 fb7c 	bl	8009c46 <_ZNSt6vectorIcSaIcEE3endEv>
 800854e:	4601      	mov	r1, r0
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	3328      	adds	r3, #40	; 0x28
 8008554:	461a      	mov	r2, r3
 8008556:	4620      	mov	r0, r4
 8008558:	f001 fb86 	bl	8009c68 <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 800855c:	4603      	mov	r3, r0
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	f107 030c 	add.w	r3, r7, #12
 8008564:	4618      	mov	r0, r3
 8008566:	f001 fb6e 	bl	8009c46 <_ZNSt6vectorIcSaIcEE3endEv>
 800856a:	4603      	mov	r3, r0
 800856c:	61fb      	str	r3, [r7, #28]
 800856e:	f107 021c 	add.w	r2, r7, #28
 8008572:	f107 0318 	add.w	r3, r7, #24
 8008576:	4611      	mov	r1, r2
 8008578:	4618      	mov	r0, r3
 800857a:	f001 fb89 	bl	8009c90 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800857e:	4603      	mov	r3, r0
 8008580:	f083 0301 	eor.w	r3, r3, #1
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d050      	beq.n	800862c <_ZN3jlb7ASState6updateEv+0x33c>
                                    next_node     = graph[at_node].edges[selected_edge].node;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff f96a 	bl	800786e <_ZN3jlb5GraphixEc>
 800859a:	4603      	mov	r3, r0
 800859c:	330c      	adds	r3, #12
 800859e:	6a39      	ldr	r1, [r7, #32]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f001 fb2d 	bl	8009c00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80085a6:	4603      	mov	r3, r0
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                    previous_node = at_node;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80085b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                    controller.set_direction(graph[at_node].edges[selected_edge].direction);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80085c6:	4611      	mov	r1, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff f950 	bl	800786e <_ZN3jlb5GraphixEc>
 80085ce:	4603      	mov	r3, r0
 80085d0:	330c      	adds	r3, #12
 80085d2:	6a39      	ldr	r1, [r7, #32]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fb13 	bl	8009c00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80085da:	4603      	mov	r3, r0
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	4619      	mov	r1, r3
 80085e0:	4620      	mov	r0, r4
 80085e2:	f7fb fe3e 	bl	8004262 <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                                    odometry.correction(graph[previous_node].x, graph[previous_node].y);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f7ff f939 	bl	800786e <_ZN3jlb5GraphixEc>
 80085fc:	4603      	mov	r3, r0
 80085fe:	ed93 8a01 	vldr	s16, [r3, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7ff f92d 	bl	800786e <_ZN3jlb5GraphixEc>
 8008614:	4603      	mov	r3, r0
 8008616:	edd3 7a02 	vldr	s15, [r3, #8]
 800861a:	eef0 0a67 	vmov.f32	s1, s15
 800861e:	eeb0 0a48 	vmov.f32	s0, s16
 8008622:	4620      	mov	r0, r4
 8008624:	f7ff fc44 	bl	8007eb0 <_ZN3jlb8Odometry10correctionEff>
                                    break;
 8008628:	2400      	movs	r4, #0
 800862a:	e000      	b.n	800862e <_ZN3jlb7ASState6updateEv+0x33e>
                            }
 800862c:	2401      	movs	r4, #1
 800862e:	f107 030c 	add.w	r3, r7, #12
 8008632:	4618      	mov	r0, r3
 8008634:	f001 f8d6 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8008638:	2c01      	cmp	r4, #1
 800863a:	d105      	bne.n	8008648 <_ZN3jlb7ASState6updateEv+0x358>
 800863c:	e000      	b.n	8008640 <_ZN3jlb7ASState6updateEv+0x350>
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 800863e:	bf00      	nop
                            }
 8008640:	e70e      	b.n	8008460 <_ZN3jlb7ASState6updateEv+0x170>
 8008642:	bf00      	nop
 8008644:	447a0000 	.word	0x447a0000
                    prev_at_decision_point = at_decision_point;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800864e:	749a      	strb	r2, [r3, #18]
                    reference_speed = LABYRINTH_SPEED;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008656:	60da      	str	r2, [r3, #12]
                    break;
 8008658:	e129      	b.n	80088ae <_ZN3jlb7ASState6updateEv+0x5be>
                    switch (fast_state)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	2b06      	cmp	r3, #6
 8008660:	f200 8123 	bhi.w	80088aa <_ZN3jlb7ASState6updateEv+0x5ba>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <_ZN3jlb7ASState6updateEv+0x37c>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	08008689 	.word	0x08008689
 8008670:	08008693 	.word	0x08008693
 8008674:	0800869d 	.word	0x0800869d
 8008678:	080086a7 	.word	0x080086a7
 800867c:	08008729 	.word	0x08008729
 8008680:	080087ab 	.word	0x080087ab
 8008684:	0800882b 	.word	0x0800882b
                            reference_speed = FAST_SPEED_SAFETY_CAR;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800868e:	60da      	str	r2, [r3, #12]
                            break;
 8008690:	e10c      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            reference_speed = FAST_SPEED_OVERTAKE;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008698:	60da      	str	r2, [r3, #12]
                            break;
 800869a:	e107      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            reference_speed = FAST_SPEED;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80086a2:	60da      	str	r2, [r3, #12]
                            break;
 80086a4:	e102      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            if (current_number_of_lines == 1u && !started_state_transition)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	7cdb      	ldrb	r3, [r3, #19]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d10e      	bne.n	80086cc <_ZN3jlb7ASState6updateEv+0x3dc>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	7f1b      	ldrb	r3, [r3, #28]
 80086b2:	f083 0301 	eor.w	r3, r3, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d007      	beq.n	80086cc <_ZN3jlb7ASState6updateEv+0x3dc>
                                started_state_transition = true;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2201      	movs	r2, #1
 80086c0:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	619a      	str	r2, [r3, #24]
 80086ca:	e00a      	b.n	80086e2 <_ZN3jlb7ASState6updateEv+0x3f2>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	7cdb      	ldrb	r3, [r3, #19]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d006      	beq.n	80086e2 <_ZN3jlb7ASState6updateEv+0x3f2>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	7f1b      	ldrb	r3, [r3, #28]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <_ZN3jlb7ASState6updateEv+0x3f2>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2200      	movs	r2, #0
 80086e0:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	7f1b      	ldrb	r3, [r3, #28]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d019      	beq.n	800871e <_ZN3jlb7ASState6updateEv+0x42e>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80086f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80086f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f8:	dd11      	ble.n	800871e <_ZN3jlb7ASState6updateEv+0x42e>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8008700:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870c:	dd07      	ble.n	800871e <_ZN3jlb7ASState6updateEv+0x42e>
                                fast_state = FastState::OUT_ACCEL_ZONE;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2204      	movs	r2, #4
 8008712:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	615a      	str	r2, [r3, #20]
                                break;
 800871c:	e0c6      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            reference_speed = FAST_SPEED;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008724:	60da      	str	r2, [r3, #12]
                            break;
 8008726:	e0c1      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	7cdb      	ldrb	r3, [r3, #19]
 800872c:	2b03      	cmp	r3, #3
 800872e:	d10e      	bne.n	800874e <_ZN3jlb7ASState6updateEv+0x45e>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	7f1b      	ldrb	r3, [r3, #28]
 8008734:	f083 0301 	eor.w	r3, r3, #1
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <_ZN3jlb7ASState6updateEv+0x45e>
                                started_state_transition = true;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2201      	movs	r2, #1
 8008742:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	619a      	str	r2, [r3, #24]
 800874c:	e00a      	b.n	8008764 <_ZN3jlb7ASState6updateEv+0x474>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	7cdb      	ldrb	r3, [r3, #19]
 8008752:	2b03      	cmp	r3, #3
 8008754:	d006      	beq.n	8008764 <_ZN3jlb7ASState6updateEv+0x474>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	7f1b      	ldrb	r3, [r3, #28]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <_ZN3jlb7ASState6updateEv+0x474>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2200      	movs	r2, #0
 8008762:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	7f1b      	ldrb	r3, [r3, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d019      	beq.n	80087a0 <_ZN3jlb7ASState6updateEv+0x4b0>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877a:	dd11      	ble.n	80087a0 <_ZN3jlb7ASState6updateEv+0x4b0>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008782:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800878a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878e:	dd07      	ble.n	80087a0 <_ZN3jlb7ASState6updateEv+0x4b0>
                                fast_state = FastState::IN_BRAKE_ZONE;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2205      	movs	r2, #5
 8008794:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	f04f 0200 	mov.w	r2, #0
 800879c:	615a      	str	r2, [r3, #20]
                                break;
 800879e:	e085      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            reference_speed = FAST_SPEED;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80087a6:	60da      	str	r2, [r3, #12]
                            break;
 80087a8:	e080      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            if (current_number_of_lines == 1u && !started_state_transition)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	7cdb      	ldrb	r3, [r3, #19]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d10e      	bne.n	80087d0 <_ZN3jlb7ASState6updateEv+0x4e0>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	7f1b      	ldrb	r3, [r3, #28]
 80087b6:	f083 0301 	eor.w	r3, r3, #1
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <_ZN3jlb7ASState6updateEv+0x4e0>
                                started_state_transition = true;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2201      	movs	r2, #1
 80087c4:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	619a      	str	r2, [r3, #24]
 80087ce:	e00a      	b.n	80087e6 <_ZN3jlb7ASState6updateEv+0x4f6>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	7cdb      	ldrb	r3, [r3, #19]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d006      	beq.n	80087e6 <_ZN3jlb7ASState6updateEv+0x4f6>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	7f1b      	ldrb	r3, [r3, #28]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <_ZN3jlb7ASState6updateEv+0x4f6>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2200      	movs	r2, #0
 80087e4:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	7f1b      	ldrb	r3, [r3, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d019      	beq.n	8008822 <_ZN3jlb7ASState6updateEv+0x532>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80087f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80087f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fc:	dd11      	ble.n	8008822 <_ZN3jlb7ASState6updateEv+0x532>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	edd3 7a05 	vldr	s15, [r3, #20]
 8008804:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800880c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008810:	dd07      	ble.n	8008822 <_ZN3jlb7ASState6updateEv+0x532>
                                fast_state = FastState::OUT_BRAKE_ZONE;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2206      	movs	r2, #6
 8008816:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	615a      	str	r2, [r3, #20]
                                break;
 8008820:	e044      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            reference_speed = FAST_SPEED_TURN;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	4a2c      	ldr	r2, [pc, #176]	; (80088d8 <_ZN3jlb7ASState6updateEv+0x5e8>)
 8008826:	60da      	str	r2, [r3, #12]
                            break;
 8008828:	e040      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            if (current_number_of_lines == 3u && !started_state_transition)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	7cdb      	ldrb	r3, [r3, #19]
 800882e:	2b03      	cmp	r3, #3
 8008830:	d10e      	bne.n	8008850 <_ZN3jlb7ASState6updateEv+0x560>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	7f1b      	ldrb	r3, [r3, #28]
 8008836:	f083 0301 	eor.w	r3, r3, #1
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <_ZN3jlb7ASState6updateEv+0x560>
                                started_state_transition = true;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2201      	movs	r2, #1
 8008844:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f04f 0200 	mov.w	r2, #0
 800884c:	619a      	str	r2, [r3, #24]
 800884e:	e00a      	b.n	8008866 <_ZN3jlb7ASState6updateEv+0x576>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	7cdb      	ldrb	r3, [r3, #19]
 8008854:	2b03      	cmp	r3, #3
 8008856:	d006      	beq.n	8008866 <_ZN3jlb7ASState6updateEv+0x576>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	7f1b      	ldrb	r3, [r3, #28]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <_ZN3jlb7ASState6updateEv+0x576>
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	7f1b      	ldrb	r3, [r3, #28]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d019      	beq.n	80088a2 <_ZN3jlb7ASState6updateEv+0x5b2>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	edd3 7a06 	vldr	s15, [r3, #24]
 8008874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887c:	dd11      	ble.n	80088a2 <_ZN3jlb7ASState6updateEv+0x5b2>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	edd3 7a05 	vldr	s15, [r3, #20]
 8008884:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800888c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008890:	dd07      	ble.n	80088a2 <_ZN3jlb7ASState6updateEv+0x5b2>
                                fast_state = FastState::IN_ACCEL_ZONE;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2203      	movs	r2, #3
 8008896:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	615a      	str	r2, [r3, #20]
                                break;
 80088a0:	e004      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            reference_speed = FAST_SPEED_TURN;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	4a0c      	ldr	r2, [pc, #48]	; (80088d8 <_ZN3jlb7ASState6updateEv+0x5e8>)
 80088a6:	60da      	str	r2, [r3, #12]
                            break;
 80088a8:	e000      	b.n	80088ac <_ZN3jlb7ASState6updateEv+0x5bc>
                            break;
 80088aa:	bf00      	nop
                    break;
 80088ac:	bf00      	nop
                }
            }

            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	6819      	ldr	r1, [r3, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	6898      	ldr	r0, [r3, #8]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80088c0:	eeb0 0a67 	vmov.f32	s0, s15
 80088c4:	4603      	mov	r3, r0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff fc89 	bl	80081de <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>
        }
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	373c      	adds	r7, #60	; 0x3c
 80088d0:	46bd      	mov	sp, r7
 80088d2:	ecbd 8b02 	vpop	{d8}
 80088d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d8:	3f666666 	.word	0x3f666666

080088dc <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f014 fb68 	bl	801cfba <_ZNSaIcED1Ev>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base() = default;
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 f9de 	bl	8009cc0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <_ZNSt6vectorIcSaIcEEC1Ev>:
      vector() = default;
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff ffeb 	bl	80088f4 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>:

        std::vector<char> telemetry_data;

#ifndef SIMULATION
        // TODO: initialize UDPClient for STM32
        SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_, const Measurements &measurements_)
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff ffd2 	bl	800890e <_ZNSt6vectorIcSaIcEEC1Ev>
        {
        }
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <_ZN3jlb12SignalSenderD1Ev>:
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_) , client(SENDER_ADDRESS, SENDER_PORT)
        {
        }
#endif

        ~SignalSender() {}
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8008982:	4618      	mov	r0, r3
 8008984:	f000 ff2e 	bl	80097e4 <_ZNSt6vectorIcSaIcEED1Ev>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
namespace jlb
{
    class Logic
    {
    public:
        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 8008992:	b5b0      	push	{r4, r5, r7, lr}
 8008994:	b088      	sub	sp, #32
 8008996:	af02      	add	r7, sp, #8
 8008998:	6178      	str	r0, [r7, #20]
 800899a:	6139      	str	r1, [r7, #16]
 800899c:	ed87 0a03 	vstr	s0, [r7, #12]
 80089a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80089a4:	ed87 1a01 	vstr	s2, [r7, #4]
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	ed97 1a01 	vldr	s2, [r7, #4]
 80089ae:	edd7 0a02 	vldr	s1, [r7, #8]
 80089b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe ff8d 	bl	80078d6 <_ZN3jlb8OdometryC1Efff>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	3390      	adds	r3, #144	; 0x90
 80089c0:	6939      	ldr	r1, [r7, #16]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fa fea0 	bl	8003708 <_ZN3jlb10ControllerC1ENS_9DirectionE>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fb fd1a 	bl	8004408 <_ZN3jlb5GraphC1Ev>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 80089da:	6979      	ldr	r1, [r7, #20]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80089e8:	f7ff fc15 	bl	8008216 <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 80089f2:	6979      	ldr	r1, [r7, #20]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f503 75da 	add.w	r5, r3, #436	; 0x1b4
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	f502 72d2 	add.w	r2, r2, #420	; 0x1a4
 8008a0c:	9201      	str	r2, [sp, #4]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	462b      	mov	r3, r5
 8008a12:	4622      	mov	r2, r4
 8008a14:	f7ff ff88 	bl	8008928 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bdb0      	pop	{r4, r5, r7, pc}

08008a22 <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b090      	sub	sp, #64	; 0x40
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff f8df 	bl	8007bf0 <_ZN3jlb8Odometry11update_odomEv>
 8008a32:	eeb0 6a40 	vmov.f32	s12, s0
 8008a36:	eef0 6a60 	vmov.f32	s13, s1
 8008a3a:	eeb0 7a41 	vmov.f32	s14, s2
 8008a3e:	eef0 7a61 	vmov.f32	s15, s3
 8008a42:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8008a46:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8008a4a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8008a4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            controller.set_current_velocity(vx);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3390      	adds	r3, #144	; 0x90
            auto [vx, x, y, theta] = odometry.update_odom();
 8008a56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
            controller.set_current_velocity(vx);
 8008a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fb fbef 	bl	8004242 <_ZN3jlb10Controller20set_current_velocityEf>

            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 8008a6a:	f107 0318 	add.w	r3, r7, #24
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fc3d 	bl	80082f0 <_ZN3jlb7ASState6updateEv>
            controller.set_reference_speed(reference_speed);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3390      	adds	r3, #144	; 0x90
            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 8008a7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_reference_speed(reference_speed);
 8008a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fb fc02 	bl	800428c <_ZN3jlb10Controller19set_reference_speedEf>

            auto [target_angle, target_speed] = controller.update();
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3390      	adds	r3, #144	; 0x90
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fb fb3d 	bl	800410c <_ZN3jlb10Controller6updateEv>
 8008a92:	eeb0 7a40 	vmov.f32	s14, s0
 8008a96:	eef0 7a60 	vmov.f32	s15, s1
 8008a9a:	ed87 7a04 	vstr	s14, [r7, #16]
 8008a9e:	edc7 7a05 	vstr	s15, [r7, #20]
 8008aa2:	693b      	ldr	r3, [r7, #16]
            return ControlSignal{target_angle, target_speed};
 8008aa4:	63bb      	str	r3, [r7, #56]	; 0x38
            auto [target_angle, target_speed] = controller.update();
 8008aa6:	697b      	ldr	r3, [r7, #20]
            return ControlSignal{target_angle, target_speed};
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aae:	ee07 2a10 	vmov	s14, r2
 8008ab2:	ee07 3a90 	vmov	s15, r3
        }
 8008ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8008aba:	eef0 0a67 	vmov.f32	s1, s15
 8008abe:	3740      	adds	r7, #64	; 0x40
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 8008ac4:	b590      	push	{r4, r7, lr}
 8008ac6:	b089      	sub	sp, #36	; 0x24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
        {
            as_state.current_number_of_lines = static_cast<uint8_t>(line_positions_front_.size());
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7f9 ff5c 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
            controller.set_detection_front(detection_front_, line_positions_front_);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8008ae6:	f107 0314 	add.w	r3, r7, #20
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fc7f 	bl	80093f0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8008af2:	f107 0314 	add.w	r3, r7, #20
 8008af6:	461a      	mov	r2, r3
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	4620      	mov	r0, r4
 8008afc:	f7fb fb5b 	bl	80041b6 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 8008b00:	f107 0314 	add.w	r3, r7, #20
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f9 fca3 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
        }
 8008b0a:	bf00      	nop
 8008b0c:	3724      	adds	r7, #36	; 0x24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd90      	pop	{r4, r7, pc}

08008b12 <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>:
        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_) { controller.set_detection_rear(detection_rear_, line_positions_rear_); }
 8008b12:	b590      	push	{r4, r7, lr}
 8008b14:	b089      	sub	sp, #36	; 0x24
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8008b24:	f107 0314 	add.w	r3, r7, #20
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 fc60 	bl	80093f0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8008b30:	f107 0314 	add.w	r3, r7, #20
 8008b34:	461a      	mov	r2, r3
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f7fb fb5f 	bl	80041fc <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 8008b3e:	f107 0314 	add.w	r3, r7, #20
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7f9 fc84 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
 8008b48:	bf00      	nop
 8008b4a:	3724      	adds	r7, #36	; 0x24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd90      	pop	{r4, r7, pc}

08008b50 <_ZN3jlb5Logic12imu_callbackEffffff>:
        void set_under_gate(const bool under_gate_) { as_state.under_gate = under_gate_; }
        void set_at_cross_section(const bool at_cross_section_) { as_state.at_cross_section = at_cross_section_; }
        void imu_callback(const float ang_vel_x, const float ang_vel_y, const float ang_vel_z, const float lin_acc_x, const float lin_acc_y, const float lin_acc_z) { odometry.imu_callback(ang_vel_x, ang_vel_y, ang_vel_z, lin_acc_x, lin_acc_y, lin_acc_z); }
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	61f8      	str	r0, [r7, #28]
 8008b58:	ed87 0a06 	vstr	s0, [r7, #24]
 8008b5c:	edc7 0a05 	vstr	s1, [r7, #20]
 8008b60:	ed87 1a04 	vstr	s2, [r7, #16]
 8008b64:	edc7 1a03 	vstr	s3, [r7, #12]
 8008b68:	ed87 2a02 	vstr	s4, [r7, #8]
 8008b6c:	edc7 2a01 	vstr	s5, [r7, #4]
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	edd7 2a01 	vldr	s5, [r7, #4]
 8008b76:	ed97 2a02 	vldr	s4, [r7, #8]
 8008b7a:	edd7 1a03 	vldr	s3, [r7, #12]
 8008b7e:	ed97 1a04 	vldr	s2, [r7, #16]
 8008b82:	edd7 0a05 	vldr	s1, [r7, #20]
 8008b86:	ed97 0a06 	vldr	s0, [r7, #24]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe ffa4 	bl	8007ad8 <_ZN3jlb8Odometry12imu_callbackEffffff>
 8008b90:	bf00      	nop
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <_ZN3jlb5Logic12rpm_callbackEf>:
        void rpm_callback(const float motor_rpm_) { odometry.rpm_callback(motor_rpm_); }
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	ed87 0a00 	vstr	s0, [r7]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	ed97 0a00 	vldr	s0, [r7]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe ff04 	bl	80079b8 <_ZN3jlb8Odometry12rpm_callbackEf>
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <_ZN3jlb5Logic16set_object_rangeEf>:
        void set_object_range(const float object_range_) { controller.set_object_range(object_range_); }
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	ed87 0a00 	vstr	s0, [r7]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3390      	adds	r3, #144	; 0x90
 8008bc8:	ed97 0a00 	vldr	s0, [r7]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fb fae3 	bl	8004198 <_ZN3jlb10Controller16set_object_rangeEf>
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>:
        void set_states(const CompositeState state_) { as_state.set_states(state_); }
 8008bda:	b084      	sub	sp, #16
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	f107 0014 	add.w	r0, r7, #20
 8008be8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	f107 0314 	add.w	r3, r7, #20
 8008bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bfc:	f7ff fb54 	bl	80082a8 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c0a:	b004      	add	sp, #16
 8008c0c:	4770      	bx	lr

08008c0e <_ZN3jlb5Logic16set_measurementsERK12Measurements>:
        void send_telemetry() { signal_sender.send_telemetry(); }
        void set_measurements(const Measurements &measurements_) { measurements = measurements_; }
 8008c0e:	b490      	push	{r4, r7}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	6039      	str	r1, [r7, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8008c20:	4613      	mov	r3, r2
 8008c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc90      	pop	{r4, r7}
 8008c30:	4770      	bx	lr

08008c32 <_ZN3jlb5Logic12get_odometryEv>:
        Odom get_odometry() { return {odometry.vx_t, odometry.x_t, odometry.y_t, odometry.theta_t}; }
 8008c32:	b480      	push	{r7}
 8008c34:	b08b      	sub	sp, #44	; 0x2c
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6178      	str	r0, [r7, #20]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	61bb      	str	r3, [r7, #24]
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	61fb      	str	r3, [r7, #28]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	623b      	str	r3, [r7, #32]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
 8008c52:	69b8      	ldr	r0, [r7, #24]
 8008c54:	69f9      	ldr	r1, [r7, #28]
 8008c56:	6a3a      	ldr	r2, [r7, #32]
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	ee06 0a10 	vmov	s12, r0
 8008c5e:	ee06 1a90 	vmov	s13, r1
 8008c62:	ee07 2a10 	vmov	s14, r2
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eeb0 0a46 	vmov.f32	s0, s12
 8008c6e:	eef0 0a66 	vmov.f32	s1, s13
 8008c72:	eeb0 1a47 	vmov.f32	s2, s14
 8008c76:	eef0 1a67 	vmov.f32	s3, s15
 8008c7a:	372c      	adds	r7, #44	; 0x2c
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <_Z19RegistrateUserTasksv>:
const osThreadAttr_t TelemetryTask_attributes =
{ .name = "TelemetryTask", .stack_size = 128 * 8, .priority = (osPriority_t) osPriorityHigh };


void RegistrateUserTasks()
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8008c88:	4a18      	ldr	r2, [pc, #96]	; (8008cec <_Z19RegistrateUserTasksv+0x68>)
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	4818      	ldr	r0, [pc, #96]	; (8008cf0 <_Z19RegistrateUserTasksv+0x6c>)
 8008c8e:	f011 fe79 	bl	801a984 <osThreadNew>
 8008c92:	4603      	mov	r3, r0
 8008c94:	4a17      	ldr	r2, [pc, #92]	; (8008cf4 <_Z19RegistrateUserTasksv+0x70>)
 8008c96:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8008c98:	4a17      	ldr	r2, [pc, #92]	; (8008cf8 <_Z19RegistrateUserTasksv+0x74>)
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4817      	ldr	r0, [pc, #92]	; (8008cfc <_Z19RegistrateUserTasksv+0x78>)
 8008c9e:	f011 fe71 	bl	801a984 <osThreadNew>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4a16      	ldr	r2, [pc, #88]	; (8008d00 <_Z19RegistrateUserTasksv+0x7c>)
 8008ca6:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 8008ca8:	4a16      	ldr	r2, [pc, #88]	; (8008d04 <_Z19RegistrateUserTasksv+0x80>)
 8008caa:	2100      	movs	r1, #0
 8008cac:	4816      	ldr	r0, [pc, #88]	; (8008d08 <_Z19RegistrateUserTasksv+0x84>)
 8008cae:	f011 fe69 	bl	801a984 <osThreadNew>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4a15      	ldr	r2, [pc, #84]	; (8008d0c <_Z19RegistrateUserTasksv+0x88>)
 8008cb6:	6013      	str	r3, [r2, #0]
	IMUTaskHandle = osThreadNew(IMUTask, NULL, &IMUTask_attributes);
 8008cb8:	4a15      	ldr	r2, [pc, #84]	; (8008d10 <_Z19RegistrateUserTasksv+0x8c>)
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4815      	ldr	r0, [pc, #84]	; (8008d14 <_Z19RegistrateUserTasksv+0x90>)
 8008cbe:	f011 fe61 	bl	801a984 <osThreadNew>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	4a14      	ldr	r2, [pc, #80]	; (8008d18 <_Z19RegistrateUserTasksv+0x94>)
 8008cc6:	6013      	str	r3, [r2, #0]
	LSTaskHandle = osThreadNew(LSTask, NULL, &LSTask_attributes);
 8008cc8:	4a14      	ldr	r2, [pc, #80]	; (8008d1c <_Z19RegistrateUserTasksv+0x98>)
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4814      	ldr	r0, [pc, #80]	; (8008d20 <_Z19RegistrateUserTasksv+0x9c>)
 8008cce:	f011 fe59 	bl	801a984 <osThreadNew>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4a13      	ldr	r2, [pc, #76]	; (8008d24 <_Z19RegistrateUserTasksv+0xa0>)
 8008cd6:	6013      	str	r3, [r2, #0]
	TelemetryTaskHandle = osThreadNew(TelemetryTask, NULL, &TelemetryTask_attributes);
 8008cd8:	4a13      	ldr	r2, [pc, #76]	; (8008d28 <_Z19RegistrateUserTasksv+0xa4>)
 8008cda:	2100      	movs	r1, #0
 8008cdc:	4813      	ldr	r0, [pc, #76]	; (8008d2c <_Z19RegistrateUserTasksv+0xa8>)
 8008cde:	f011 fe51 	bl	801a984 <osThreadNew>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4a12      	ldr	r2, [pc, #72]	; (8008d30 <_Z19RegistrateUserTasksv+0xac>)
 8008ce6:	6013      	str	r3, [r2, #0]

}
 8008ce8:	bf00      	nop
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	08021d08 	.word	0x08021d08
 8008cf0:	08008d35 	.word	0x08008d35
 8008cf4:	20000710 	.word	0x20000710
 8008cf8:	08021d2c 	.word	0x08021d2c
 8008cfc:	08008dc9 	.word	0x08008dc9
 8008d00:	20000714 	.word	0x20000714
 8008d04:	08021d50 	.word	0x08021d50
 8008d08:	08001619 	.word	0x08001619
 8008d0c:	20000718 	.word	0x20000718
 8008d10:	08021d74 	.word	0x08021d74
 8008d14:	08008d65 	.word	0x08008d65
 8008d18:	2000071c 	.word	0x2000071c
 8008d1c:	08021d98 	.word	0x08021d98
 8008d20:	08008d87 	.word	0x08008d87
 8008d24:	20000720 	.word	0x20000720
 8008d28:	08021dbc 	.word	0x08021dbc
 8008d2c:	08008da9 	.word	0x08008da9
 8008d30:	20000724 	.word	0x20000724

08008d34 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8008d3c:	f012 feb8 	bl	801bab0 <xTaskGetTickCount>
 8008d40:	4603      	mov	r3, r0
 8008d42:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8008d44:	2208      	movs	r2, #8
 8008d46:	4905      	ldr	r1, [pc, #20]	; (8008d5c <_Z7ADCTaskPv+0x28>)
 8008d48:	4805      	ldr	r0, [pc, #20]	; (8008d60 <_Z7ADCTaskPv+0x2c>)
 8008d4a:	f007 fef9 	bl	8010b40 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 10u);
 8008d4e:	f107 030c 	add.w	r3, r7, #12
 8008d52:	210a      	movs	r1, #10
 8008d54:	4618      	mov	r0, r3
 8008d56:	f012 fd37 	bl	801b7c8 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8008d5a:	e7f3      	b.n	8008d44 <_Z7ADCTaskPv+0x10>
 8008d5c:	2000012c 	.word	0x2000012c
 8008d60:	20000728 	.word	0x20000728

08008d64 <_Z7IMUTaskPv>:
	}
}

void IMUTask(void *argument)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8008d6c:	f012 fea0 	bl	801bab0 <xTaskGetTickCount>
 8008d70:	4603      	mov	r3, r0
 8008d72:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		IMU_Task();
 8008d74:	f7f8 fd12 	bl	800179c <_Z8IMU_Taskv>
		vTaskDelayUntil(&xLastWakeTime, 20u);
 8008d78:	f107 030c 	add.w	r3, r7, #12
 8008d7c:	2114      	movs	r1, #20
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f012 fd22 	bl	801b7c8 <vTaskDelayUntil>
		IMU_Task();
 8008d84:	e7f6      	b.n	8008d74 <_Z7IMUTaskPv+0x10>

08008d86 <_Z6LSTaskPv>:
	}
}

void LSTask(void *argument)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8008d8e:	f012 fe8f 	bl	801bab0 <xTaskGetTickCount>
 8008d92:	4603      	mov	r3, r0
 8008d94:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		LineSensorTask();
 8008d96:	f7f8 ffb5 	bl	8001d04 <_Z14LineSensorTaskv>
		vTaskDelayUntil(&xLastWakeTime, 20u);
 8008d9a:	f107 030c 	add.w	r3, r7, #12
 8008d9e:	2114      	movs	r1, #20
 8008da0:	4618      	mov	r0, r3
 8008da2:	f012 fd11 	bl	801b7c8 <vTaskDelayUntil>
		LineSensorTask();
 8008da6:	e7f6      	b.n	8008d96 <_Z6LSTaskPv+0x10>

08008da8 <_Z13TelemetryTaskPv>:
	}
}

void TelemetryTask(void *argument)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8008db0:	f012 fe7e 	bl	801bab0 <xTaskGetTickCount>
 8008db4:	4603      	mov	r3, r0
 8008db6:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		//logic.send_telemetry();
		vTaskDelayUntil(&xLastWakeTime, 40u);
 8008db8:	f107 030c 	add.w	r3, r7, #12
 8008dbc:	2128      	movs	r1, #40	; 0x28
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f012 fd02 	bl	801b7c8 <vTaskDelayUntil>
 8008dc4:	e7f8      	b.n	8008db8 <_Z13TelemetryTaskPv+0x10>
	...

08008dc8 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b09d      	sub	sp, #116	; 0x74
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8008dd0:	f012 fe6e 	bl	801bab0 <xTaskGetTickCount>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c

	logic.set_states({jlb::FastState::OUT_ACCEL_ZONE});
 8008dd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ddc:	2104      	movs	r1, #4
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7ff f9e4 	bl	80081ac <_ZN3jlb14CompositeStateC1ENS_9FastStateE>
 8008de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dee:	48ae      	ldr	r0, [pc, #696]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8008df0:	f7ff fef3 	bl	8008bda <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 8008df4:	4bad      	ldr	r3, [pc, #692]	; (80090ac <_Z8MainTaskPv+0x2e4>)
 8008df6:	899b      	ldrh	r3, [r3, #12]
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e00:	eddf 6aab 	vldr	s13, [pc, #684]	; 80090b0 <_Z8MainTaskPv+0x2e8>
 8008e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e08:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80090b4 <_Z8MainTaskPv+0x2ec>
 8008e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e10:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80090b8 <_Z8MainTaskPv+0x2f0>
 8008e14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e18:	ee16 0a90 	vmov	r0, s13
 8008e1c:	f7f7 fb86 	bl	800052c <__aeabi_f2d>
 8008e20:	a39f      	add	r3, pc, #636	; (adr r3, 80090a0 <_Z8MainTaskPv+0x2d8>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fbd9 	bl	80005dc <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4610      	mov	r0, r2
 8008e30:	4619      	mov	r1, r3
 8008e32:	f7f7 feab 	bl	8000b8c <__aeabi_d2f>
 8008e36:	4603      	mov	r3, r0
 8008e38:	4aa0      	ldr	r2, [pc, #640]	; (80090bc <_Z8MainTaskPv+0x2f4>)
 8008e3a:	6013      	str	r3, [r2, #0]
		DistanceSensorTask();
 8008e3c:	f7f8 fa06 	bl	800124c <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 8008e40:	f7f8 fc3c 	bl	80016bc <_Z12CalculateRPMv>
 8008e44:	eef0 7a40 	vmov.f32	s15, s0
 8008e48:	4b9d      	ldr	r3, [pc, #628]	; (80090c0 <_Z8MainTaskPv+0x2f8>)
 8008e4a:	edc3 7a00 	vstr	s15, [r3]

		auto [derivative, integral, prev_error] = motorcontrol_pid.get_debug();
 8008e4e:	489d      	ldr	r0, [pc, #628]	; (80090c4 <_Z8MainTaskPv+0x2fc>)
 8008e50:	f7fa fc38 	bl	80036c4 <_ZN3PID9get_debugEv>
 8008e54:	eef0 6a40 	vmov.f32	s13, s0
 8008e58:	eeb0 7a60 	vmov.f32	s14, s1
 8008e5c:	eef0 7a41 	vmov.f32	s15, s2
 8008e60:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8008e64:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8008e68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		logic.imu_callback(lv_battery_voltage,motorcontrol.battery_voltage,imu.yaw,derivative, integral, prev_error);
 8008e6c:	4b93      	ldr	r3, [pc, #588]	; (80090bc <_Z8MainTaskPv+0x2f4>)
 8008e6e:	edd3 7a00 	vldr	s15, [r3]
 8008e72:	4b95      	ldr	r3, [pc, #596]	; (80090c8 <_Z8MainTaskPv+0x300>)
 8008e74:	ed93 7a00 	vldr	s14, [r3]
 8008e78:	4b94      	ldr	r3, [pc, #592]	; (80090cc <_Z8MainTaskPv+0x304>)
 8008e7a:	edd3 6a03 	vldr	s13, [r3, #12]
		auto [derivative, integral, prev_error] = motorcontrol_pid.get_debug();
 8008e7e:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8008e82:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8008e86:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
		logic.imu_callback(lv_battery_voltage,motorcontrol.battery_voltage,imu.yaw,derivative, integral, prev_error);
 8008e8a:	eef0 2a45 	vmov.f32	s5, s10
 8008e8e:	eeb0 2a65 	vmov.f32	s4, s11
 8008e92:	eef0 1a46 	vmov.f32	s3, s12
 8008e96:	eeb0 1a66 	vmov.f32	s2, s13
 8008e9a:	eef0 0a47 	vmov.f32	s1, s14
 8008e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8008ea2:	4881      	ldr	r0, [pc, #516]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8008ea4:	f7ff fe54 	bl	8008b50 <_ZN3jlb5Logic12imu_callbackEffffff>
		logic.rpm_callback(wheel_rpm);
 8008ea8:	4b85      	ldr	r3, [pc, #532]	; (80090c0 <_Z8MainTaskPv+0x2f8>)
 8008eaa:	edd3 7a00 	vldr	s15, [r3]
 8008eae:	eeb0 0a67 	vmov.f32	s0, s15
 8008eb2:	487d      	ldr	r0, [pc, #500]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8008eb4:	f7ff fe70 	bl	8008b98 <_ZN3jlb5Logic12rpm_callbackEf>

		std::reverse(std::begin(ls_data.front_detection), std::end(ls_data.front_detection));
 8008eb8:	4885      	ldr	r0, [pc, #532]	; (80090d0 <_Z8MainTaskPv+0x308>)
 8008eba:	f000 fa56 	bl	800936a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4883      	ldr	r0, [pc, #524]	; (80090d0 <_Z8MainTaskPv+0x308>)
 8008ec2:	f000 fa5d 	bl	8009380 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 ff2f 	bl	8009d2e <_ZSt7reverseIPbEvT_S1_>
		logic.set_detection_front( ls_data.front_detection, ls_data.front);
 8008ed0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ed4:	497f      	ldr	r1, [pc, #508]	; (80090d4 <_Z8MainTaskPv+0x30c>)
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fa8a 	bl	80093f0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8008edc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	497b      	ldr	r1, [pc, #492]	; (80090d0 <_Z8MainTaskPv+0x308>)
 8008ee4:	4870      	ldr	r0, [pc, #448]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8008ee6:	f7ff fded 	bl	8008ac4 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>
 8008eea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f9 faae 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_detection_rear(ls_data.rear_detection, ls_data.rear);
 8008ef4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008ef8:	4977      	ldr	r1, [pc, #476]	; (80090d8 <_Z8MainTaskPv+0x310>)
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 fa78 	bl	80093f0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8008f00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008f04:	461a      	mov	r2, r3
 8008f06:	4975      	ldr	r1, [pc, #468]	; (80090dc <_Z8MainTaskPv+0x314>)
 8008f08:	4867      	ldr	r0, [pc, #412]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8008f0a:	f7ff fe02 	bl	8008b12 <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>
 8008f0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7f9 fa9c 	bl	8002450 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_object_range(distance_sensor.distance);
 8008f18:	4b71      	ldr	r3, [pc, #452]	; (80090e0 <_Z8MainTaskPv+0x318>)
 8008f1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8008f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8008f22:	4861      	ldr	r0, [pc, #388]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8008f24:	f7ff fe48 	bl	8008bb8 <_ZN3jlb5Logic16set_object_rangeEf>

    	tick_counter_before = HAL_GetTick();
 8008f28:	f007 faa8 	bl	801047c <HAL_GetTick>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	4a6d      	ldr	r2, [pc, #436]	; (80090e4 <_Z8MainTaskPv+0x31c>)
 8008f30:	6013      	str	r3, [r2, #0]
		auto [target_angle, target_speed] = logic.update();
 8008f32:	485d      	ldr	r0, [pc, #372]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8008f34:	f7ff fd75 	bl	8008a22 <_ZN3jlb5Logic6updateEv>
 8008f38:	eeb0 7a40 	vmov.f32	s14, s0
 8008f3c:	eef0 7a60 	vmov.f32	s15, s1
 8008f40:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8008f44:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    	tick_counter_after = HAL_GetTick();
 8008f48:	f007 fa98 	bl	801047c <HAL_GetTick>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	4a66      	ldr	r2, [pc, #408]	; (80090e8 <_Z8MainTaskPv+0x320>)
 8008f50:	6013      	str	r3, [r2, #0]
        dt_update = (((float)tick_counter_after) - ((float)(tick_counter_before)));
 8008f52:	4b65      	ldr	r3, [pc, #404]	; (80090e8 <_Z8MainTaskPv+0x320>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f5e:	4b61      	ldr	r3, [pc, #388]	; (80090e4 <_Z8MainTaskPv+0x31c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	ee07 3a90 	vmov	s15, r3
 8008f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f6e:	4b5f      	ldr	r3, [pc, #380]	; (80090ec <_Z8MainTaskPv+0x324>)
 8008f70:	edc3 7a00 	vstr	s15, [r3]

    	tick_counter_before = HAL_GetTick();
 8008f74:	f007 fa82 	bl	801047c <HAL_GetTick>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	4a5a      	ldr	r2, [pc, #360]	; (80090e4 <_Z8MainTaskPv+0x31c>)
 8008f7c:	6013      	str	r3, [r2, #0]
		auto [vx_t, x_t, y_t, theta_t] = logic.get_odometry();
 8008f7e:	484a      	ldr	r0, [pc, #296]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8008f80:	f7ff fe57 	bl	8008c32 <_ZN3jlb5Logic12get_odometryEv>
 8008f84:	eeb0 6a40 	vmov.f32	s12, s0
 8008f88:	eef0 6a60 	vmov.f32	s13, s1
 8008f8c:	eeb0 7a41 	vmov.f32	s14, s2
 8008f90:	eef0 7a61 	vmov.f32	s15, s3
 8008f94:	ed87 6a06 	vstr	s12, [r7, #24]
 8008f98:	edc7 6a07 	vstr	s13, [r7, #28]
 8008f9c:	ed87 7a08 	vstr	s14, [r7, #32]
 8008fa0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	tick_counter_after = HAL_GetTick();
 8008fa4:	f007 fa6a 	bl	801047c <HAL_GetTick>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4a4f      	ldr	r2, [pc, #316]	; (80090e8 <_Z8MainTaskPv+0x320>)
 8008fac:	6013      	str	r3, [r2, #0]
        dt_odo = (((float)tick_counter_after) - ((float)(tick_counter_before)));
 8008fae:	4b4e      	ldr	r3, [pc, #312]	; (80090e8 <_Z8MainTaskPv+0x320>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	ee07 3a90 	vmov	s15, r3
 8008fb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fba:	4b4a      	ldr	r3, [pc, #296]	; (80090e4 <_Z8MainTaskPv+0x31c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fca:	4b49      	ldr	r3, [pc, #292]	; (80090f0 <_Z8MainTaskPv+0x328>)
 8008fcc:	edc3 7a00 	vstr	s15, [r3]
		auto [vx_t, x_t, y_t, theta_t] = logic.get_odometry();
 8008fd0:	69bb      	ldr	r3, [r7, #24]

		motorcontrol.actual_velocity = vx_t;
 8008fd2:	4a3d      	ldr	r2, [pc, #244]	; (80090c8 <_Z8MainTaskPv+0x300>)
 8008fd4:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		motorcontrol.target_velocity = target_speed;
 8008fd8:	4a3b      	ldr	r2, [pc, #236]	; (80090c8 <_Z8MainTaskPv+0x300>)
 8008fda:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 8008fdc:	f7fa f81a 	bl	8003014 <_Z16MotorControlTaskv>

		Measurements meas;
		meas.duty_cycle = motorcontrol.duty_cycle;
 8008fe0:	4b39      	ldr	r3, [pc, #228]	; (80090c8 <_Z8MainTaskPv+0x300>)
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	60bb      	str	r3, [r7, #8]
		meas.motor_current = motorcontrol.motor_current;
 8008fe6:	4b38      	ldr	r3, [pc, #224]	; (80090c8 <_Z8MainTaskPv+0x300>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	60fb      	str	r3, [r7, #12]
		meas.object_range = distance_sensor.distance;
 8008fec:	4b3c      	ldr	r3, [pc, #240]	; (80090e0 <_Z8MainTaskPv+0x318>)
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	613b      	str	r3, [r7, #16]
		meas.wheel_rpm = wheel_rpm;
 8008ff2:	4b33      	ldr	r3, [pc, #204]	; (80090c0 <_Z8MainTaskPv+0x2f8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	617b      	str	r3, [r7, #20]
		logic.set_measurements(meas);
 8008ff8:	f107 0308 	add.w	r3, r7, #8
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	482a      	ldr	r0, [pc, #168]	; (80090a8 <_Z8MainTaskPv+0x2e0>)
 8009000:	f7ff fe05 	bl	8008c0e <_ZN3jlb5Logic16set_measurementsERK12Measurements>
		auto [target_angle, target_speed] = logic.update();
 8009004:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28

		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 8009008:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80090f4 <_Z8MainTaskPv+0x32c>
 800900c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009010:	eddf 6a39 	vldr	s13, [pc, #228]	; 80090f8 <_Z8MainTaskPv+0x330>
 8009014:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009018:	eeb0 0a47 	vmov.f32	s0, s14
 800901c:	f7fa f9e2 	bl	80033e4 <_Z16SetSteeringAnglef>


		// If flood message arrives reset counter and set flood to active
		if((flood_arrived == true) && (flood_counter > 0))
 8009020:	4b36      	ldr	r3, [pc, #216]	; (80090fc <_Z8MainTaskPv+0x334>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d10d      	bne.n	8009044 <_Z8MainTaskPv+0x27c>
 8009028:	4b35      	ldr	r3, [pc, #212]	; (8009100 <_Z8MainTaskPv+0x338>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d009      	beq.n	8009044 <_Z8MainTaskPv+0x27c>
		{
			flood_active = true;
 8009030:	4b34      	ldr	r3, [pc, #208]	; (8009104 <_Z8MainTaskPv+0x33c>)
 8009032:	2201      	movs	r2, #1
 8009034:	701a      	strb	r2, [r3, #0]
			flood_arrived = false;
 8009036:	4b31      	ldr	r3, [pc, #196]	; (80090fc <_Z8MainTaskPv+0x334>)
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
			flood_counter = 40u;
 800903c:	4b30      	ldr	r3, [pc, #192]	; (8009100 <_Z8MainTaskPv+0x338>)
 800903e:	2228      	movs	r2, #40	; 0x28
 8009040:	701a      	strb	r2, [r3, #0]
 8009042:	e005      	b.n	8009050 <_Z8MainTaskPv+0x288>
		}
		//If flood message was not sent decrement counter
		else
		{
			flood_counter--;
 8009044:	4b2e      	ldr	r3, [pc, #184]	; (8009100 <_Z8MainTaskPv+0x338>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	3b01      	subs	r3, #1
 800904a:	b2da      	uxtb	r2, r3
 800904c:	4b2c      	ldr	r3, [pc, #176]	; (8009100 <_Z8MainTaskPv+0x338>)
 800904e:	701a      	strb	r2, [r3, #0]
		}
		//If decrement reaches zero flood is no longer active
		if(flood_counter == 0)
 8009050:	4b2b      	ldr	r3, [pc, #172]	; (8009100 <_Z8MainTaskPv+0x338>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <_Z8MainTaskPv+0x296>
		{
			flood_active = false;
 8009058:	4b2a      	ldr	r3, [pc, #168]	; (8009104 <_Z8MainTaskPv+0x33c>)
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
		}

		tick_counter_main_prev = tick_counter_main;
 800905e:	4b2a      	ldr	r3, [pc, #168]	; (8009108 <_Z8MainTaskPv+0x340>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a2a      	ldr	r2, [pc, #168]	; (800910c <_Z8MainTaskPv+0x344>)
 8009064:	6013      	str	r3, [r2, #0]
    	tick_counter_main = HAL_GetTick();
 8009066:	f007 fa09 	bl	801047c <HAL_GetTick>
 800906a:	4603      	mov	r3, r0
 800906c:	4a26      	ldr	r2, [pc, #152]	; (8009108 <_Z8MainTaskPv+0x340>)
 800906e:	6013      	str	r3, [r2, #0]
        dt_main = (((float)tick_counter_main) - ((float)(tick_counter_main_prev)));
 8009070:	4b25      	ldr	r3, [pc, #148]	; (8009108 <_Z8MainTaskPv+0x340>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	ee07 3a90 	vmov	s15, r3
 8009078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800907c:	4b23      	ldr	r3, [pc, #140]	; (800910c <_Z8MainTaskPv+0x344>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	ee07 3a90 	vmov	s15, r3
 8009084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800908c:	4b20      	ldr	r3, [pc, #128]	; (8009110 <_Z8MainTaskPv+0x348>)
 800908e:	edc3 7a00 	vstr	s15, [r3]
		vTaskDelayUntil(&xLastWakeTime, 10u);
 8009092:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009096:	210a      	movs	r1, #10
 8009098:	4618      	mov	r0, r3
 800909a:	f012 fb95 	bl	801b7c8 <vTaskDelayUntil>
	}
 800909e:	e6a9      	b.n	8008df4 <_Z8MainTaskPv+0x2c>
 80090a0:	2cba732e 	.word	0x2cba732e
 80090a4:	3ff0b626 	.word	0x3ff0b626
 80090a8:	20000338 	.word	0x20000338
 80090ac:	2000014c 	.word	0x2000014c
 80090b0:	45800000 	.word	0x45800000
 80090b4:	40533333 	.word	0x40533333
 80090b8:	3e7df3b6 	.word	0x3e7df3b6
 80090bc:	2000030c 	.word	0x2000030c
 80090c0:	20000310 	.word	0x20000310
 80090c4:	200002b4 	.word	0x200002b4
 80090c8:	200002a0 	.word	0x200002a0
 80090cc:	200001a8 	.word	0x200001a8
 80090d0:	20000240 	.word	0x20000240
 80090d4:	20000288 	.word	0x20000288
 80090d8:	20000294 	.word	0x20000294
 80090dc:	20000260 	.word	0x20000260
 80090e0:	2000015c 	.word	0x2000015c
 80090e4:	2000031c 	.word	0x2000031c
 80090e8:	20000320 	.word	0x20000320
 80090ec:	20000328 	.word	0x20000328
 80090f0:	2000032c 	.word	0x2000032c
 80090f4:	c3340000 	.word	0xc3340000
 80090f8:	4048f5c3 	.word	0x4048f5c3
 80090fc:	20000300 	.word	0x20000300
 8009100:	2000008d 	.word	0x2000008d
 8009104:	20000330 	.word	0x20000330
 8009108:	20000314 	.word	0x20000314
 800910c:	20000318 	.word	0x20000318
 8009110:	20000324 	.word	0x20000324

08009114 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8009114:	b590      	push	{r4, r7, lr}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fe17 	bl	8009d54 <_ZSt12__miter_baseIPKcET_S2_>
 8009126:	4604      	mov	r4, r0
 8009128:	68b8      	ldr	r0, [r7, #8]
 800912a:	f000 fe13 	bl	8009d54 <_ZSt12__miter_baseIPKcET_S2_>
 800912e:	4603      	mov	r3, r0
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	4619      	mov	r1, r3
 8009134:	4620      	mov	r0, r4
 8009136:	f000 fe18 	bl	8009d6a <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800913a:	4603      	mov	r3, r0
    }
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	bd90      	pop	{r4, r7, pc}

08009144 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8009144:	b590      	push	{r4, r7, lr}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800914e:	f7fa f9df 	bl	8003510 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8009152:	4622      	mov	r2, r4
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fe42 	bl	8009de0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	bd90      	pop	{r4, r7, pc}

08009164 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
      }
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>:
    operator*(const _Tp& __x, const complex<_Tp>& __y)
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __y;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	60ba      	str	r2, [r7, #8]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	60fb      	str	r3, [r7, #12]
      __r *= __x;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	edd3 7a00 	vldr	s15, [r3]
 800919e:	f107 0308 	add.w	r3, r7, #8
 80091a2:	eeb0 0a67 	vmov.f32	s0, s15
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fa fa57 	bl	800365a <_ZNSt7complexIfEmLEf>
      return __r;
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	ee07 2a10 	vmov	s14, r2
 80091b4:	ee07 3a90 	vmov	s15, r3
    }
 80091b8:	eeb0 0a47 	vmov.f32	s0, s14
 80091bc:	eef0 0a67 	vmov.f32	s1, s15
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <_ZNSt7complexIfEmLIfEERS0_RKS_IT_E>:
        operator*=(const complex<_Tp>& __z)
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b086      	sub	sp, #24
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
	  const _ComplexT __t = __z.__rep();
 80091d0:	6838      	ldr	r0, [r7, #0]
 80091d2:	f7fa fa63 	bl	800369c <_ZNKSt7complexIfE5__repEv>
 80091d6:	ed87 0a04 	vstr	s0, [r7, #16]
 80091da:	edc7 0a05 	vstr	s1, [r7, #20]
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	60bb      	str	r3, [r7, #8]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	edd3 7a00 	vldr	s15, [r3]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	ed93 7a01 	vldr	s14, [r3, #4]
	  _M_value *= __t;
 80091f2:	eef0 1a47 	vmov.f32	s3, s14
 80091f6:	eeb0 1a67 	vmov.f32	s2, s15
 80091fa:	edd7 0a02 	vldr	s1, [r7, #8]
 80091fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8009202:	f7f7 fd2b 	bl	8000c5c <__mulsc3>
 8009206:	eeb0 7a40 	vmov.f32	s14, s0
 800920a:	eef0 7a60 	vmov.f32	s15, s1
 800920e:	ee17 1a10 	vmov	r1, s14
 8009212:	ee17 2a90 	vmov	r2, s15
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6019      	str	r1, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	605a      	str	r2, [r3, #4]
	  return *this;
 800921e:	687b      	ldr	r3, [r7, #4]
	}
 8009220:	4618      	mov	r0, r3
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <_ZStmlIfESt7complexIT_ERKS2_S4_>:
    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	60ba      	str	r2, [r7, #8]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	60fb      	str	r3, [r7, #12]
      __r *= __y;
 800923c:	f107 0308 	add.w	r3, r7, #8
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff ffbf 	bl	80091c6 <_ZNSt7complexIfEmLIfEERS0_RKS_IT_E>
      return __r;
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	ee07 2a10 	vmov	s14, r2
 8009250:	ee07 3a90 	vmov	s15, r3
    }
 8009254:	eeb0 0a47 	vmov.f32	s0, s14
 8009258:	eef0 0a67 	vmov.f32	s1, s15
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <_ZNSt7complexIfEpLIfEERS0_RKS_IT_E>:
        operator+=(const complex<_Tp>& __z)
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
	  _M_value += __z.__rep();
 800926c:	6838      	ldr	r0, [r7, #0]
 800926e:	f7fa fa15 	bl	800369c <_ZNKSt7complexIfE5__repEv>
 8009272:	eeb0 7a40 	vmov.f32	s14, s0
 8009276:	eef0 7a60 	vmov.f32	s15, s1
 800927a:	eeb0 6a47 	vmov.f32	s12, s14
 800927e:	eef0 6a67 	vmov.f32	s13, s15
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	ed93 7a00 	vldr	s14, [r3]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	edd3 7a01 	vldr	s15, [r3, #4]
 800928e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	ed83 7a00 	vstr	s14, [r3]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	edc3 7a01 	vstr	s15, [r3, #4]
	  return *this;
 80092a2:	687b      	ldr	r3, [r7, #4]
	}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <_ZStplIfESt7complexIT_ERKS2_S4_>:
    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	60ba      	str	r2, [r7, #8]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	60fb      	str	r3, [r7, #12]
      __r += __y;
 80092c0:	f107 0308 	add.w	r3, r7, #8
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff ffcb 	bl	8009262 <_ZNSt7complexIfEpLIfEERS0_RKS_IT_E>
      return __r;
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	ee07 2a10 	vmov	s14, r2
 80092d4:	ee07 3a90 	vmov	s15, r3
    }
 80092d8:	eeb0 0a47 	vmov.f32	s0, s14
 80092dc:	eef0 0a67 	vmov.f32	s1, s15
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <_ZNSt7complexIfEmIIfEERS0_RKS_IT_E>:
        operator-=(const complex<_Tp>& __z)
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
	  _M_value -= __z.__rep();
 80092f0:	6838      	ldr	r0, [r7, #0]
 80092f2:	f7fa f9d3 	bl	800369c <_ZNKSt7complexIfE5__repEv>
 80092f6:	eeb0 7a40 	vmov.f32	s14, s0
 80092fa:	eef0 7a60 	vmov.f32	s15, s1
 80092fe:	eeb0 6a47 	vmov.f32	s12, s14
 8009302:	eef0 6a67 	vmov.f32	s13, s15
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	ed93 7a00 	vldr	s14, [r3]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009312:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009316:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	ed83 7a00 	vstr	s14, [r3]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	edc3 7a01 	vstr	s15, [r3, #4]
	  return *this;
 8009326:	687b      	ldr	r3, [r7, #4]
	}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <_ZStmiIfESt7complexIT_ERKS2_S4_>:
    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	60ba      	str	r2, [r7, #8]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	60fb      	str	r3, [r7, #12]
      __r -= __y;
 8009344:	f107 0308 	add.w	r3, r7, #8
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff ffcb 	bl	80092e6 <_ZNSt7complexIfEmIIfEERS0_RKS_IT_E>
      return __r;
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	ee07 2a10 	vmov	s14, r2
 8009358:	ee07 3a90 	vmov	s15, r3
    }
 800935c:	eeb0 0a47 	vmov.f32	s0, s14
 8009360:	eef0 0a67 	vmov.f32	s1, s15
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3320      	adds	r3, #32
 800938c:	4618      	mov	r0, r3
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 80093a4:	461a      	mov	r2, r3
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fd49 	bl	8009e40 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>
 80093ae:	4602      	mov	r2, r0
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4293      	cmp	r3, r2
 80093b4:	bf0c      	ite	eq
 80093b6:	2301      	moveq	r3, #1
 80093b8:	2300      	movne	r3, #0
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 80093d0:	461a      	mov	r2, r3
 80093d2:	68b9      	ldr	r1, [r7, #8]
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 fd46 	bl	8009e66 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>
 80093da:	4602      	mov	r2, r0
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4293      	cmp	r3, r2
 80093e0:	bf0c      	ite	eq
 80093e2:	2301      	moveq	r3, #1
 80093e4:	2300      	movne	r3, #0
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 80093f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80093fa:	687c      	ldr	r4, [r7, #4]
 80093fc:	6838      	ldr	r0, [r7, #0]
 80093fe:	f7f9 fac6 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8009402:	4605      	mov	r5, r0
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f7f9 fb6c 	bl	8002ae4 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800940c:	4602      	mov	r2, r0
 800940e:	f107 030c 	add.w	r3, r7, #12
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fd39 	bl	8009e8c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 800941a:	f107 030c 	add.w	r3, r7, #12
 800941e:	461a      	mov	r2, r3
 8009420:	4629      	mov	r1, r5
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fd40 	bl	8009ea8 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8009428:	f107 030c 	add.w	r3, r7, #12
 800942c:	4618      	mov	r0, r3
 800942e:	f7f8 ffeb 	bl	8002408 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009432:	6838      	ldr	r0, [r7, #0]
 8009434:	f000 fd4c 	bl	8009ed0 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8009438:	4605      	mov	r5, r0
 800943a:	6838      	ldr	r0, [r7, #0]
 800943c:	f000 fd58 	bl	8009ef0 <_ZNKSt6vectorIfSaIfEE3endEv>
 8009440:	4606      	mov	r6, r0
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	f7f9 f882 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800944e:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009450:	4622      	mov	r2, r4
 8009452:	4631      	mov	r1, r6
 8009454:	4628      	mov	r0, r5
 8009456:	f000 fd5c 	bl	8009f12 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800945a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	605a      	str	r2, [r3, #4]
      }
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800946a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800946a:	b480      	push	{r7}
 800946c:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800946e:	2300      	movs	r3, #0
 8009470:	4618      	mov	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800947a:	b480      	push	{r7}
 800947c:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800947e:	2301      	movs	r3, #1
 8009480:	4618      	mov	r0, r3
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <_ZSteqRKSaIfES1_>:
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
      { return true; }
 8009494:	2301      	movs	r3, #1
 8009496:	4618      	mov	r0, r3
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80094a2:	b590      	push	{r4, r7, lr}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	60b9      	str	r1, [r7, #8]
 80094ac:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 fd9d 	bl	8009fee <_ZSt12__miter_baseIPfET_S1_>
 80094b4:	4604      	mov	r4, r0
 80094b6:	68b8      	ldr	r0, [r7, #8]
 80094b8:	f000 fd99 	bl	8009fee <_ZSt12__miter_baseIPfET_S1_>
 80094bc:	4603      	mov	r3, r0
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	4619      	mov	r1, r3
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fd9e 	bl	800a004 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 80094c8:	4603      	mov	r3, r0
    }
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd90      	pop	{r4, r7, pc}

080094d2 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 80094d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	f000 80e9 	beq.w	80096b8 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 80094e6:	f7ff ffc0 	bl	800946a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d046      	beq.n	800957e <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 80094f0:	f7ff ffc3 	bl	800947a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f083 0301 	eor.w	r3, r3, #1
 80094fa:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d015      	beq.n	800952c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	f7f9 f825 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009508:	4604      	mov	r4, r0
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	4618      	mov	r0, r3
 800950e:	f7f9 fae9 	bl	8002ae4 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009512:	4603      	mov	r3, r0
 8009514:	4619      	mov	r1, r3
 8009516:	4620      	mov	r0, r4
 8009518:	f7ff ffb7 	bl	800948a <_ZSteqRKSaIfES1_>
 800951c:	4603      	mov	r3, r0
 800951e:	f083 0301 	eor.w	r3, r3, #1
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 800952c:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800952e:	2b00      	cmp	r3, #0
 8009530:	d017      	beq.n	8009562 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
		  this->clear();
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7f8 ffa7 	bl	8002486 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800954a:	461a      	mov	r2, r3
 800954c:	f7f8 ffee 	bl	800252c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4618      	mov	r0, r3
 8009566:	f7f8 fff4 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800956a:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f7f9 fab8 	bl	8002ae4 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009574:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8009576:	4619      	mov	r1, r3
 8009578:	4620      	mov	r0, r4
 800957a:	f000 fcdb 	bl	8009f34 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 800957e:	6838      	ldr	r0, [r7, #0]
 8009580:	f7f9 fa05 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8009584:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fcdf 	bl	8009f4a <_ZNKSt6vectorIfSaIfEE8capacityEv>
 800958c:	4602      	mov	r2, r0
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4293      	cmp	r3, r2
 8009592:	bf8c      	ite	hi
 8009594:	2301      	movhi	r3, #1
 8009596:	2300      	movls	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d032      	beq.n	8009604 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800959e:	6838      	ldr	r0, [r7, #0]
 80095a0:	f000 fc96 	bl	8009ed0 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80095a4:	4604      	mov	r4, r0
 80095a6:	6838      	ldr	r0, [r7, #0]
 80095a8:	f000 fca2 	bl	8009ef0 <_ZNKSt6vectorIfSaIfEE3endEv>
 80095ac:	4603      	mov	r3, r0
 80095ae:	4622      	mov	r2, r4
 80095b0:	68f9      	ldr	r1, [r7, #12]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fcd9 	bl	8009f6a <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 80095b8:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681c      	ldr	r4, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7f8 ffc4 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80095ca:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80095cc:	461a      	mov	r2, r3
 80095ce:	4629      	mov	r1, r5
 80095d0:	4620      	mov	r0, r4
 80095d2:	f7f8 ffc9 	bl	8002568 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 80095e8:	461a      	mov	r2, r3
 80095ea:	f7f8 ff9f 	bl	800252c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	441a      	add	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	609a      	str	r2, [r3, #8]
 8009602:	e052      	b.n	80096aa <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	  else if (size() >= __xlen)
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7f9 f9c2 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800960a:	4602      	mov	r2, r0
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4293      	cmp	r3, r2
 8009610:	bf94      	ite	ls
 8009612:	2301      	movls	r3, #1
 8009614:	2300      	movhi	r3, #0
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d020      	beq.n	800965e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800961c:	6838      	ldr	r0, [r7, #0]
 800961e:	f000 fc57 	bl	8009ed0 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8009622:	4604      	mov	r4, r0
 8009624:	6838      	ldr	r0, [r7, #0]
 8009626:	f000 fc63 	bl	8009ef0 <_ZNKSt6vectorIfSaIfEE3endEv>
 800962a:	4605      	mov	r5, r0
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7f9 f921 	bl	8002874 <_ZNSt6vectorIfSaIfEE5beginEv>
 8009632:	4603      	mov	r3, r0
 8009634:	461a      	mov	r2, r3
 8009636:	4629      	mov	r1, r5
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fcb2 	bl	8009fa2 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 800963e:	4604      	mov	r4, r0
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7f8 ffe7 	bl	8002614 <_ZNSt6vectorIfSaIfEE3endEv>
 8009646:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4618      	mov	r0, r3
 800964c:	f7f8 ff81 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009650:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8009652:	461a      	mov	r2, r3
 8009654:	4629      	mov	r1, r5
 8009656:	4620      	mov	r0, r4
 8009658:	f000 fcbb 	bl	8009fd2 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 800965c:	e025      	b.n	80096aa <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	681d      	ldr	r5, [r3, #0]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	681c      	ldr	r4, [r3, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7f9 f991 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800966c:	4603      	mov	r3, r0
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	18e1      	adds	r1, r4, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	4628      	mov	r0, r5
 800967a:	f7ff ff12 	bl	80094a2 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681c      	ldr	r4, [r3, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7f9 f983 	bl	800298e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8009688:	4603      	mov	r3, r0
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4618      	mov	r0, r3
 800969a:	f7f8 ff5a 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800969e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80096a0:	4632      	mov	r2, r6
 80096a2:	4629      	mov	r1, r5
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fcd0 	bl	800a04a <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	441a      	add	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	605a      	str	r2, [r3, #4]
      return *this;
 80096b8:	687b      	ldr	r3, [r7, #4]
    }
 80096ba:	4618      	mov	r0, r3
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096c2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fcce 	bl	800a06c <_ZNSaIN3jlb4EdgeEEC1Ev>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fcd6 	bl	800a084 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689a      	ldr	r2, [r3, #8]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	10db      	asrs	r3, r3, #3
 8009710:	4a07      	ldr	r2, [pc, #28]	; (8009730 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 8009712:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8009716:	461a      	mov	r2, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fcc7 	bl	800a0ac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4618      	mov	r0, r3
 8009722:	f7fa fdc3 	bl	80042ac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	aaaaaaab 	.word	0xaaaaaaab

08009734 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009734:	b5b0      	push	{r4, r5, r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681c      	ldr	r4, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fcc3 	bl	800a0d2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800974c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800974e:	461a      	mov	r2, r3
 8009750:	4629      	mov	r1, r5
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fcc8 	bl	800a0e8 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4618      	mov	r0, r3
 800975c:	f7ff ffcc 	bl	80096f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bdb0      	pop	{r4, r5, r7, pc}

0800976a <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 800976a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976c:	b085      	sub	sp, #20
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8009774:	687c      	ldr	r4, [r7, #4]
 8009776:	6838      	ldr	r0, [r7, #0]
 8009778:	f000 faca 	bl	8009d10 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800977c:	4605      	mov	r5, r0
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fccd 	bl	800a120 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8009786:	4602      	mov	r2, r0
 8009788:	f107 030c 	add.w	r3, r7, #12
 800978c:	4611      	mov	r1, r2
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fcb8 	bl	800a104 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8009794:	f107 030c 	add.w	r3, r7, #12
 8009798:	461a      	mov	r2, r3
 800979a:	4629      	mov	r1, r5
 800979c:	4620      	mov	r0, r4
 800979e:	f000 fcca 	bl	800a136 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	4618      	mov	r0, r3
 80097a8:	f013 fc07 	bl	801cfba <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80097ac:	6838      	ldr	r0, [r7, #0]
 80097ae:	f000 fcd6 	bl	800a15e <_ZNKSt6vectorIcSaIcEE5beginEv>
 80097b2:	4605      	mov	r5, r0
 80097b4:	6838      	ldr	r0, [r7, #0]
 80097b6:	f000 fce2 	bl	800a17e <_ZNKSt6vectorIcSaIcEE3endEv>
 80097ba:	4606      	mov	r6, r0
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fcec 	bl	800a1a0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80097c8:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80097ca:	4622      	mov	r2, r4
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	f000 fcf1 	bl	800a1b6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 80097d4:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	605a      	str	r2, [r3, #4]
      }
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097e4 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80097e4:	b5b0      	push	{r4, r5, r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681c      	ldr	r4, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fcd2 	bl	800a1a0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80097fc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80097fe:	461a      	mov	r2, r3
 8009800:	4629      	mov	r1, r5
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fce8 	bl	800a1d8 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fa68 	bl	8009ce0 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bdb0      	pop	{r4, r5, r7, pc}

0800981a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8009824:	6838      	ldr	r0, [r7, #0]
 8009826:	f000 fce5 	bl	800a1f4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800982a:	4603      	mov	r3, r0
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fceb 	bl	800a20a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fd13 	bl	800a270 <_ZNSaIN3jlb4NodeEEC1Ev>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fd1b 	bl	800a288 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4618      	mov	r0, r3
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <_ZNSaIN3jlb4NodeEED1Ev>:
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4618      	mov	r0, r3
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	10db      	asrs	r3, r3, #3
 800988c:	4a07      	ldr	r2, [pc, #28]	; (80098ac <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev+0x38>)
 800988e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8009892:	461a      	mov	r2, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fd0b 	bl	800a2b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4618      	mov	r0, r3
 800989e:	f7fa fd8d 	bl	80043bc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	aaaaaaab 	.word	0xaaaaaaab

080098b0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80098b0:	b5b0      	push	{r4, r5, r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681c      	ldr	r4, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fd07 	bl	800a2d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 80098c8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80098ca:	461a      	mov	r2, r3
 80098cc:	4629      	mov	r1, r5
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 fd0c 	bl	800a2ec <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      }
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff ffcc 	bl	8009874 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bdb0      	pop	{r4, r5, r7, pc}

080098e6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80098f0:	6838      	ldr	r0, [r7, #0]
 80098f2:	f000 fd09 	bl	800a308 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 80098f6:	4603      	mov	r3, r0
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fd0f 	bl	800a31e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 8009908:	b5b0      	push	{r4, r5, r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	1d38      	adds	r0, r7, #4
 8009912:	e880 0006 	stmia.w	r0, {r1, r2}
 8009916:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fd31 	bl	800a384 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8009922:	1d3b      	adds	r3, r7, #4
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fd3c 	bl	800a3a2 <_ZNKSt16initializer_listIcE5beginEv>
 800992a:	4604      	mov	r4, r0
 800992c:	1d3b      	adds	r3, r7, #4
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fd43 	bl	800a3ba <_ZNKSt16initializer_listIcE3endEv>
 8009934:	4602      	mov	r2, r0
 8009936:	462b      	mov	r3, r5
 8009938:	4621      	mov	r1, r4
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 fd62 	bl	800a404 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bdb0      	pop	{r4, r5, r7, pc}

0800994a <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6819      	ldr	r1, [r3, #0]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	4613      	mov	r3, r2
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4413      	add	r3, r2
 8009960:	00db      	lsls	r3, r3, #3
 8009962:	440b      	add	r3, r1
      }
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7f8 fd45 	bl	8002408 <_ZNSaIfED1Ev>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fd6e 	bl	800a474 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8009998:	2100      	movs	r1, #0
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fd7a 	bl	800a494 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80099c2:	3304      	adds	r3, #4
 80099c4:	461a      	mov	r2, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fdc7 	bl	800a55a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	461a      	mov	r2, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fdda 	bl	800a590 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
    }
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff ffc6 	bl	8009970 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b08a      	sub	sp, #40	; 0x28
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80099f6:	f107 0308 	add.w	r3, r7, #8
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f871 	bl	8009ae4 <_ZNSt5dequeIfSaIfEE5beginEv>
 8009a02:	f107 0318 	add.w	r3, r7, #24
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 f87a 	bl	8009b02 <_ZNSt5dequeIfSaIfEE3endEv>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 fdd8 	bl	800a5c6 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009a16:	4603      	mov	r3, r0
 8009a18:	f107 0218 	add.w	r2, r7, #24
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fddb 	bl	800a5dc <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff ffbe 	bl	80099aa <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4618      	mov	r0, r3
 8009a32:	3728      	adds	r7, #40	; 0x28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d00c      	beq.n	8009a6a <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f7f8 fdc9 	bl	80025f0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	1d1a      	adds	r2, r3, #4
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 8009a68:	e003      	b.n	8009a72 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fdc3 	bl	800a5f8 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 8009a72:	bf00      	nop
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f103 0218 	add.w	r2, r3, #24
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f000 fdf6 	bl	800a680 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 8009a94:	4603      	mov	r3, r0
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d010      	beq.n	8009ad6 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fd85 	bl	800a5c6 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009abc:	4602      	mov	r2, r0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	f000 fe07 	bl	800a6d8 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	1d1a      	adds	r2, r3, #4
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8009ad4:	e002      	b.n	8009adc <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fe0a 	bl	800a6f0 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	3308      	adds	r3, #8
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fe23 	bl	800a740 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3318      	adds	r3, #24
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fe14 	bl	800a740 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 8009b36:	b580      	push	{r7, lr}
 8009b38:	ed2d 8b02 	vpush	{d8}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 8009b48:	e013      	b.n	8009b72 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x3c>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 8009b4a:	1d3b      	adds	r3, r7, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7ff ffe7 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8009b52:	4603      	mov	r3, r0
 8009b54:	ed93 8a00 	vldr	s16, [r3]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 fe40 	bl	800a7de <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	edd3 7a00 	vldr	s15, [r3]
 8009b64:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009b68:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 fe17 	bl	800a7a0 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 8009b72:	68b9      	ldr	r1, [r7, #8]
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 fdff 	bl	800a778 <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f083 0301 	eor.w	r3, r3, #1
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1e1      	bne.n	8009b4a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x14>
      return __init;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	ee07 3a90 	vmov	s15, r3
    }
 8009b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	ecbd 8b02 	vpop	{d8}
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <_ZSt3minIfET_St16initializer_listIS0_E>:
    min(initializer_list<_Tp> __l)
 8009b9a:	b590      	push	{r4, r7, lr}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	463b      	mov	r3, r7
 8009ba2:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::min_element(__l.begin(), __l.end()); }
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fe24 	bl	800a7f6 <_ZNKSt16initializer_listIfE5beginEv>
 8009bae:	4604      	mov	r4, r0
 8009bb0:	463b      	mov	r3, r7
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 fe2b 	bl	800a80e <_ZNKSt16initializer_listIfE3endEv>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 fe38 	bl	800a832 <_ZSt11min_elementIPKfET_S2_S2_>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eeb0 0a67 	vmov.f32	s0, s15
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd90      	pop	{r4, r7, pc}

08009bd4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	10db      	asrs	r3, r3, #3
 8009be8:	4a04      	ldr	r2, [pc, #16]	; (8009bfc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 8009bea:	fb02 f303 	mul.w	r3, r2, r3
 8009bee:	4618      	mov	r0, r3
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	aaaaaaab 	.word	0xaaaaaaab

08009c00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6819      	ldr	r1, [r3, #0]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	4413      	add	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	440b      	add	r3, r1
      }
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	f107 030c 	add.w	r3, r7, #12
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 fe0c 	bl	800a854 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	1d1a      	adds	r2, r3, #4
 8009c52:	f107 030c 	add.w	r3, r7, #12
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fdfb 	bl	800a854 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fdfd 	bl	800a874 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fe06 	bl	800a892 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 8009c86:	4603      	mov	r3, r0
    }
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009c90:	b590      	push	{r4, r7, lr}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7fe fb1d 	bl	80082da <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	681c      	ldr	r4, [r3, #0]
 8009ca4:	6838      	ldr	r0, [r7, #0]
 8009ca6:	f7fe fb18 	bl	80082da <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8009caa:	4603      	mov	r3, r0
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	bf0c      	ite	eq
 8009cb2:	2301      	moveq	r3, #1
 8009cb4:	2300      	movne	r3, #0
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	4618      	mov	r0, r3
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd90      	pop	{r4, r7, pc}

08009cc0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f013 f974 	bl	801cfb6 <_ZNSaIcEC1Ev>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 fdf4 	bl	800a8be <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fdf4 	bl	800a8e6 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fdeb 	bl	80088dc <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <_ZSt7reverseIPbEvT_S1_>:
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
 8009d2e:	b5b0      	push	{r4, r5, r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
      std::__reverse(__first, __last, std::__iterator_category(__first));
 8009d38:	687c      	ldr	r4, [r7, #4]
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 fde5 	bl	800a90c <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8009d42:	462a      	mov	r2, r5
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 fdea 	bl	800a920 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>
    }
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bdb0      	pop	{r4, r5, r7, pc}

08009d54 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009d6a:	b5b0      	push	{r4, r5, r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 fdf3 	bl	800a962 <_ZSt12__niter_baseIPKcET_S2_>
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	68b8      	ldr	r0, [r7, #8]
 8009d80:	f000 fdef 	bl	800a962 <_ZSt12__niter_baseIPKcET_S2_>
 8009d84:	4605      	mov	r5, r0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fdf5 	bl	800a978 <_ZSt12__niter_baseIPcET_S1_>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	4629      	mov	r1, r5
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 fdfa 	bl	800a98e <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	1d3b      	adds	r3, r7, #4
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fe04 	bl	800a9ae <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8009da6:	4603      	mov	r3, r0
    }
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bdb0      	pop	{r4, r5, r7, pc}

08009db0 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009db0:	b590      	push	{r4, r7, lr}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7f8 fda7 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	681c      	ldr	r4, [r3, #0]
 8009dc4:	6838      	ldr	r0, [r7, #0]
 8009dc6:	f7f8 fda2 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	429c      	cmp	r4, r3
 8009dd0:	bf0c      	ite	eq
 8009dd2:	2301      	moveq	r3, #1
 8009dd4:	2300      	movne	r3, #0
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd90      	pop	{r4, r7, pc}

08009de0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8009de0:	b5b0      	push	{r4, r5, r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8009dec:	f107 0208 	add.w	r2, r7, #8
 8009df0:	f107 030c 	add.w	r3, r7, #12
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff ffda 	bl	8009db0 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f083 0301 	eor.w	r3, r3, #1
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d017      	beq.n	8009e38 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 8009e08:	f107 020c 	add.w	r2, r7, #12
 8009e0c:	f107 0308 	add.w	r3, r7, #8
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f8 fd3e 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7f9 fb8b 	bl	8003536 <_ZSt4__lgi>
 8009e20:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8009e22:	005a      	lsls	r2, r3, #1
 8009e24:	462b      	mov	r3, r5
 8009e26:	68b9      	ldr	r1, [r7, #8]
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 fdcc 	bl	800a9c6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8009e2e:	4622      	mov	r2, r4
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fdfe 	bl	800aa34 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8009e38:	bf00      	nop
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bdb0      	pop	{r4, r5, r7, pc}

08009e40 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fe29 	bl	800aaa4 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>
 8009e52:	4622      	mov	r2, r4
 8009e54:	68b9      	ldr	r1, [r7, #8]
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f000 fe37 	bl	800aaca <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>
 8009e5c:	4603      	mov	r3, r0
    }
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd90      	pop	{r4, r7, pc}

08009e66 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 8009e66:	b590      	push	{r4, r7, lr}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	60f8      	str	r0, [r7, #12]
 8009e6e:	60b9      	str	r1, [r7, #8]
 8009e70:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 fe43 	bl	800aafe <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>
 8009e78:	4622      	mov	r2, r4
 8009e7a:	68b9      	ldr	r1, [r7, #8]
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 fe51 	bl	800ab24 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>
 8009e82:	4603      	mov	r3, r0
    }
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd90      	pop	{r4, r7, pc}

08009e8c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fe5c 	bl	800ab58 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fe5a 	bl	800ab72 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 fe68 	bl	800ab96 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	f107 030c 	add.w	r3, r7, #12
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fe73 	bl	800abcc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	1d1a      	adds	r2, r3, #4
 8009efc:	f107 030c 	add.w	r3, r7, #12
 8009f00:	4611      	mov	r1, r2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fe62 	bl	800abcc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
 8009f1e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 fe61 	bl	800abec <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
    }
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	109b      	asrs	r3, r3, #2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b086      	sub	sp, #24
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7f8 fc9e 	bl	80028be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8009f82:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7f8 fae3 	bl	8002552 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009f8c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff ffbd 	bl	8009f12 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8009f98:	697b      	ldr	r3, [r7, #20]
	}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8009fa2:	b590      	push	{r4, r7, lr}
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 fe2e 	bl	800ac10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	68b8      	ldr	r0, [r7, #8]
 8009fb8:	f000 fe2a 	bl	800ac10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fe2f 	bl	800ac26 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 8009fc8:	4603      	mov	r3, r0
    }
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd90      	pop	{r4, r7, pc}

08009fd2 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8009fde:	68b9      	ldr	r1, [r7, #8]
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fe41 	bl	800ac68 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800a004:	b5b0      	push	{r4, r5, r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7f8 fdd9 	bl	8002bc8 <_ZSt12__niter_baseIPfET_S1_>
 800a016:	4604      	mov	r4, r0
 800a018:	68b8      	ldr	r0, [r7, #8]
 800a01a:	f7f8 fdd5 	bl	8002bc8 <_ZSt12__niter_baseIPfET_S1_>
 800a01e:	4605      	mov	r5, r0
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4618      	mov	r0, r3
 800a024:	f7f8 fdd0 	bl	8002bc8 <_ZSt12__niter_baseIPfET_S1_>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	4629      	mov	r1, r5
 800a02e:	4620      	mov	r0, r4
 800a030:	f000 fe30 	bl	800ac94 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 800a034:	4602      	mov	r2, r0
 800a036:	1d3b      	adds	r3, r7, #4
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 fe3a 	bl	800acb4 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800a040:	4603      	mov	r3, r0
    }
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bdb0      	pop	{r4, r5, r7, pc}

0800a04a <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	607a      	str	r2, [r7, #4]
 800a056:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	68b9      	ldr	r1, [r7, #8]
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 fe35 	bl	800accc <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800a062:	4603      	mov	r3, r0
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <_ZNSaIN3jlb4EdgeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fe3b 	bl	800acf0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	605a      	str	r2, [r3, #4]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	609a      	str	r2, [r3, #8]
	{ }
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
	if (__p)
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d005      	beq.n	800a0ca <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	68b9      	ldr	r1, [r7, #8]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 fe1e 	bl	800ad06 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a0f4:	68b9      	ldr	r1, [r7, #8]
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 fe24 	bl	800ad44 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 800a0fc:	bf00      	nop
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fe2c 	bl	800ad70 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4618      	mov	r0, r3
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800a136:	b580      	push	{r7, lr}
 800a138:	b084      	sub	sp, #16
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	4618      	mov	r0, r3
 800a148:	f000 fe1f 	bl	800ad8a <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800a14c:	68b9      	ldr	r1, [r7, #8]
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 fe2d 	bl	800adae <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	f107 030c 	add.w	r3, r7, #12
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 fe37 	bl	800ade2 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	1d1a      	adds	r2, r3, #4
 800a18a:	f107 030c 	add.w	r3, r7, #12
 800a18e:	4611      	mov	r1, r2
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fe26 	bl	800ade2 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	60f8      	str	r0, [r7, #12]
 800a1be:	60b9      	str	r1, [r7, #8]
 800a1c0:	607a      	str	r2, [r7, #4]
 800a1c2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	68b9      	ldr	r1, [r7, #8]
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fe1a 	bl	800ae02 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fe1d 	bl	800ae26 <_ZSt8_DestroyIPcEvT_S1_>
    }
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4618      	mov	r0, r3
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800a20a:	b5b0      	push	{r4, r5, r7, lr}
 800a20c:	b082      	sub	sp, #8
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d012      	beq.n	800a246 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a220:	687c      	ldr	r4, [r7, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685d      	ldr	r5, [r3, #4]
 800a226:	6838      	ldr	r0, [r7, #0]
 800a228:	f000 fe13 	bl	800ae52 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a22c:	4603      	mov	r3, r0
 800a22e:	461a      	mov	r2, r3
 800a230:	4629      	mov	r1, r5
 800a232:	4620      	mov	r0, r4
 800a234:	f000 fe6f 	bl	800af16 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f103 0218 	add.w	r2, r3, #24
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	605a      	str	r2, [r3, #4]
 800a244:	e00c      	b.n	800a260 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fe77 	bl	800af3a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800a24c:	4604      	mov	r4, r0
 800a24e:	6838      	ldr	r0, [r7, #0]
 800a250:	f000 fdff 	bl	800ae52 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a254:	4603      	mov	r3, r0
 800a256:	461a      	mov	r2, r3
 800a258:	4621      	mov	r1, r4
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fe7e 	bl	800af5c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 ff05 	bl	800b070 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 800a266:	4603      	mov	r3, r0
      }
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bdb0      	pop	{r4, r5, r7, pc}

0800a270 <_ZNSaIN3jlb4NodeEEC1Ev>:
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 ff14 	bl	800b0a6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4618      	mov	r0, r3
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	605a      	str	r2, [r3, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	609a      	str	r2, [r3, #8]
	{ }
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
	if (__p)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d005      	beq.n	800a2ce <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fef7 	bl	800b0bc <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 800a2ce:	bf00      	nop
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 fefd 	bl	800b0fa <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800a31e:	b5b0      	push	{r4, r5, r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	429a      	cmp	r2, r3
 800a332:	d012      	beq.n	800a35a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a334:	687c      	ldr	r4, [r7, #4]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685d      	ldr	r5, [r3, #4]
 800a33a:	6838      	ldr	r0, [r7, #0]
 800a33c:	f000 fef3 	bl	800b126 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a340:	4603      	mov	r3, r0
 800a342:	461a      	mov	r2, r3
 800a344:	4629      	mov	r1, r5
 800a346:	4620      	mov	r0, r4
 800a348:	f000 ff2f 	bl	800b1aa <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	f103 0218 	add.w	r2, r3, #24
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	605a      	str	r2, [r3, #4]
 800a358:	e00c      	b.n	800a374 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 ff37 	bl	800b1ce <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800a360:	4604      	mov	r4, r0
 800a362:	6838      	ldr	r0, [r7, #0]
 800a364:	f000 fedf 	bl	800b126 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	4621      	mov	r1, r4
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 ff3e 	bl	800b1f0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 ffcf 	bl	800b318 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800a37a:	4603      	mov	r3, r0
      }
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bdb0      	pop	{r4, r5, r7, pc}

0800a384 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	4618      	mov	r0, r3
 800a394:	f000 fcf9 	bl	800ad8a <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4618      	mov	r0, r3
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800a3ba:	b590      	push	{r4, r7, lr}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff ffed 	bl	800a3a2 <_ZNKSt16initializer_listIcE5beginEv>
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 ffbf 	bl	800b34e <_ZNKSt16initializer_listIcE4sizeEv>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	4423      	add	r3, r4
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd90      	pop	{r4, r7, pc}

0800a3dc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800a3dc:	b5b0      	push	{r4, r5, r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800a3e6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800a3e8:	1d3b      	adds	r3, r7, #4
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 ffbb 	bl	800b366 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 ffc0 	bl	800b37a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800a3fa:	4603      	mov	r3, r0
    }
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bdb0      	pop	{r4, r5, r7, pc}

0800a404 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800a404:	b590      	push	{r4, r7, lr}
 800a406:	b087      	sub	sp, #28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	68b8      	ldr	r0, [r7, #8]
 800a416:	f7ff ffe1 	bl	800a3dc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800a41a:	4603      	mov	r3, r0
 800a41c:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800a41e:	68fc      	ldr	r4, [r7, #12]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff febc 	bl	800a1a0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800a428:	4603      	mov	r3, r0
 800a42a:	4619      	mov	r1, r3
 800a42c:	6978      	ldr	r0, [r7, #20]
 800a42e:	f000 ffb3 	bl	800b398 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 800a432:	4603      	mov	r3, r0
 800a434:	4619      	mov	r1, r3
 800a436:	4620      	mov	r0, r4
 800a438:	f000 ffd6 	bl	800b3e8 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800a43c:	4602      	mov	r2, r0
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	441a      	add	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fea3 	bl	800a1a0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800a45a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800a45c:	4622      	mov	r2, r4
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	68b8      	ldr	r0, [r7, #8]
 800a462:	f000 ffd5 	bl	800b410 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 800a466:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	605a      	str	r2, [r3, #4]
	}
 800a46c:	bf00      	nop
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd90      	pop	{r4, r7, pc}

0800a474 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7f8 f835 	bl	80024ec <_ZNSaIfEC1Ev>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 ffd4 	bl	800b432 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800a494:	b590      	push	{r4, r7, lr}
 800a496:	b089      	sub	sp, #36	; 0x24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800a49e:	2004      	movs	r0, #4
 800a4a0:	f7fd f9f7 	bl	8007892 <_ZSt16__deque_buf_sizej>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800a4b0:	2308      	movs	r3, #8
 800a4b2:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	3302      	adds	r3, #2
 800a4b8:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800a4ba:	f107 0210 	add.w	r2, r7, #16
 800a4be:	f107 030c 	add.w	r3, r7, #12
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7f8 fa72 	bl	80029ae <_ZSt3maxIjERKT_S2_S2_>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 ffc3 	bl	800b464 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6859      	ldr	r1, [r3, #4]
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	1acb      	subs	r3, r1, r3
 800a4f0:	085b      	lsrs	r3, r3, #1
 800a4f2:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800a4f4:	4413      	add	r3, r2
 800a4f6:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	4413      	add	r3, r2
 800a500:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	69b9      	ldr	r1, [r7, #24]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 ffc9 	bl	800b49e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3308      	adds	r3, #8
 800a510:	69b9      	ldr	r1, [r7, #24]
 800a512:	4618      	mov	r0, r3
 800a514:	f000 ffde 	bl	800b4d4 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f103 0218 	add.w	r2, r3, #24
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	3b04      	subs	r3, #4
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f000 ffd5 	bl	800b4d4 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800a536:	2004      	movs	r0, #4
 800a538:	f7fd f9ab 	bl	8007892 <_ZSt16__deque_buf_sizej>
 800a53c:	4602      	mov	r2, r0
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	fbb3 f1f2 	udiv	r1, r3, r2
 800a544:	fb01 f202 	mul.w	r2, r1, r2
 800a548:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	619a      	str	r2, [r3, #24]
    }
 800a552:	bf00      	nop
 800a554:	3724      	adds	r7, #36	; 0x24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd90      	pop	{r4, r7, pc}

0800a55a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b086      	sub	sp, #24
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	617b      	str	r3, [r7, #20]
 800a56a:	e008      	b.n	800a57e <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x24>
	_M_deallocate_node(*__n);
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4619      	mov	r1, r3
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 ffc7 	bl	800b506 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	3304      	adds	r3, #4
 800a57c:	617b      	str	r3, [r7, #20]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d3f2      	bcc.n	800a56c <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x12>
    }
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a59c:	f107 0314 	add.w	r3, r7, #20
 800a5a0:	68f9      	ldr	r1, [r7, #12]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 ffc2 	bl	800b52c <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800a5a8:	f107 0314 	add.w	r3, r7, #20
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	68b9      	ldr	r1, [r7, #8]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 ffd7 	bl	800b564 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
      }
 800a5b6:	f107 0314 	add.w	r3, r7, #20
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 ffc7 	bl	800b54e <_ZNSaIPfED1Ev>
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800a5dc:	b480      	push	{r7}
 800a5de:	b08d      	sub	sp, #52	; 0x34
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800a5ea:	bf00      	nop
 800a5ec:	3734      	adds	r7, #52	; 0x34
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800a5f8:	b5b0      	push	{r4, r5, r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff fa39 	bl	8009a7a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800a608:	4604      	mov	r4, r0
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 ffc9 	bl	800b5a2 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 800a610:	4603      	mov	r3, r0
 800a612:	429c      	cmp	r4, r3
 800a614:	bf0c      	ite	eq
 800a616:	2301      	moveq	r3, #1
 800a618:	2300      	movne	r3, #0
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 800a620:	4816      	ldr	r0, [pc, #88]	; (800a67c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 800a622:	f012 fcd1 	bl	801cfc8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800a626:	2101      	movs	r1, #1
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 ffcb 	bl	800b5c4 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	1d1c      	adds	r4, r3, #4
 800a636:	4610      	mov	r0, r2
 800a638:	f000 ffdf 	bl	800b5fa <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800a63c:	4603      	mov	r3, r0
 800a63e:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800a640:	687c      	ldr	r4, [r7, #4]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699d      	ldr	r5, [r3, #24]
 800a646:	6838      	ldr	r0, [r7, #0]
 800a648:	f7f8 f8b2 	bl	80027b0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	4629      	mov	r1, r5
 800a652:	4620      	mov	r0, r4
 800a654:	f7f7 ffcc 	bl	80025f0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f103 0218 	add.w	r2, r3, #24
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a662:	3304      	adds	r3, #4
 800a664:	4619      	mov	r1, r3
 800a666:	4610      	mov	r0, r2
 800a668:	f000 ff34 	bl	800b4d4 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69da      	ldr	r2, [r3, #28]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bdb0      	pop	{r4, r5, r7, pc}
 800a67c:	08021c54 	.word	0x08021c54

0800a680 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800a68a:	f000 ffc8 	bl	800b61e <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800a68e:	4603      	mov	r3, r0
 800a690:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	109b      	asrs	r3, r3, #2
 800a69e:	461a      	mov	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bf14      	ite	ne
 800a6a8:	2301      	movne	r3, #1
 800a6aa:	2300      	moveq	r3, #0
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	6811      	ldr	r1, [r2, #0]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	6852      	ldr	r2, [r2, #4]
 800a6bc:	1a8a      	subs	r2, r1, r2
 800a6be:	1092      	asrs	r2, r2, #2
 800a6c0:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	6891      	ldr	r1, [r2, #8]
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	6812      	ldr	r2, [r2, #0]
 800a6ca:	1a8a      	subs	r2, r1, r2
 800a6cc:	1092      	asrs	r2, r2, #2
 800a6ce:	4413      	add	r3, r2
      }
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a6e2:	6838      	ldr	r0, [r7, #0]
 800a6e4:	f7f8 f9a9 	bl	8002a3a <_ZSt10destroy_atIfEvPT_>
	}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff ff63 	bl	800a5c6 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a700:	4602      	mov	r2, r0
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	4619      	mov	r1, r3
 800a708:	4610      	mov	r0, r2
 800a70a:	f7ff ffe5 	bl	800a6d8 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	4619      	mov	r1, r3
 800a716:	4610      	mov	r0, r2
 800a718:	f000 fef5 	bl	800b506 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f103 0208 	add.w	r2, r3, #8
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	3304      	adds	r3, #4
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f000 fed2 	bl	800b4d4 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	609a      	str	r2, [r3, #8]
    }
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	609a      	str	r2, [r3, #8]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68da      	ldr	r2, [r3, #12]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4618      	mov	r0, r3
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	bf0c      	ite	eq
 800a78e:	2301      	moveq	r3, #1
 800a790:	2300      	movne	r3, #0
 800a792:	b2db      	uxtb	r3, r3
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	++_M_cur;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	1d1a      	adds	r2, r3, #4
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d10a      	bne.n	800a7d4 <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fe84 	bl	800b4d4 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	601a      	str	r2, [r3, #0]
	return *this;
 800a7d4:	687b      	ldr	r3, [r7, #4]
      }
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <_ZNKSt16initializer_listIfE5beginEv>:
      begin() const noexcept { return _M_array; }
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <_ZNKSt16initializer_listIfE3endEv>:
      end() const noexcept { return begin() + size(); }
 800a80e:	b590      	push	{r4, r7, lr}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff ffed 	bl	800a7f6 <_ZNKSt16initializer_listIfE5beginEv>
 800a81c:	4604      	mov	r4, r0
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 ff05 	bl	800b62e <_ZNKSt16initializer_listIfE4sizeEv>
 800a824:	4603      	mov	r3, r0
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4423      	add	r3, r4
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd90      	pop	{r4, r7, pc}

0800a832 <_ZSt11min_elementIPKfET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the smallest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800a832:	b590      	push	{r4, r7, lr}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__min_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800a83c:	f7f8 fe68 	bl	8003510 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800a840:	4622      	mov	r2, r4
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 ff18 	bl	800b67a <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 800a84a:	4603      	mov	r3, r0
    }
 800a84c:	4618      	mov	r0, r3
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	bd90      	pop	{r4, r7, pc}

0800a854 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800a87c:	f107 030c 	add.w	r3, r7, #12
 800a880:	6879      	ldr	r1, [r7, #4]
 800a882:	4618      	mov	r0, r3
 800a884:	f000 ff24 	bl	800b6d0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800a892:	b590      	push	{r4, r7, lr}
 800a894:	b085      	sub	sp, #20
 800a896:	af00      	add	r7, sp, #0
 800a898:	60f8      	str	r0, [r7, #12]
 800a89a:	60b9      	str	r1, [r7, #8]
 800a89c:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 800a89e:	f107 030c 	add.w	r3, r7, #12
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 ff23 	bl	800b6ee <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 800a8a8:	4623      	mov	r3, r4
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 ff6e 	bl	800b790 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 800a8b4:	4603      	mov	r3, r0
    }
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd90      	pop	{r4, r7, pc}

0800a8be <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	605a      	str	r2, [r3, #4]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	609a      	str	r2, [r3, #8]
	{ }
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	607a      	str	r2, [r7, #4]
	if (__p)
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	68b9      	ldr	r1, [r7, #8]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 ffdf 	bl	800b8c2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>:
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	429a      	cmp	r2, r3
 800a932:	d012      	beq.n	800a95a <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3a>
      --__last;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	3b01      	subs	r3, #1
 800a938:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800a93a:	e009      	b.n	800a950 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x30>
	  std::iter_swap(__first, __last);
 800a93c:	68b9      	ldr	r1, [r7, #8]
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 ffe9 	bl	800b916 <_ZSt9iter_swapIPbS0_EvT_T0_>
	  ++__first;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3301      	adds	r3, #1
 800a948:	60fb      	str	r3, [r7, #12]
	  --__last;
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	429a      	cmp	r2, r3
 800a956:	d3f1      	bcc.n	800a93c <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x1c>
 800a958:	e000      	b.n	800a95c <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3c>
	return;
 800a95a:	bf00      	nop
    }
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800a962:	b480      	push	{r7}
 800a964:	b083      	sub	sp, #12
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4618      	mov	r0, r3
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4618      	mov	r0, r3
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 ffc6 	bl	800b930 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	6039      	str	r1, [r7, #0]
    { return __res; }
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800a9c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c8:	b087      	sub	sp, #28
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	60b9      	str	r1, [r7, #8]
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800a9d4:	e01b      	b.n	800aa0e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d106      	bne.n	800a9ea <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800a9dc:	4633      	mov	r3, r6
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	68b9      	ldr	r1, [r7, #8]
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 ffdf 	bl	800b9a6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 800a9e8:	e021      	b.n	800aa2e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800a9f0:	462a      	mov	r2, r5
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 ffed 	bl	800b9d4 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800a9fe:	4623      	mov	r3, r4
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	68b9      	ldr	r1, [r7, #8]
 800aa04:	6978      	ldr	r0, [r7, #20]
 800aa06:	f7ff ffde 	bl	800a9c6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800aa0e:	f107 020c 	add.w	r2, r7, #12
 800aa12:	f107 0308 	add.w	r3, r7, #8
 800aa16:	4611      	mov	r1, r2
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7f7 ff3b 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b10      	cmp	r3, #16
 800aa22:	bfcc      	ite	gt
 800aa24:	2301      	movgt	r3, #1
 800aa26:	2300      	movle	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1d3      	bne.n	800a9d6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 800aa2e:	371c      	adds	r7, #28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa34 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800aa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800aa40:	f107 020c 	add.w	r2, r7, #12
 800aa44:	f107 0308 	add.w	r3, r7, #8
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f7 ff22 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b10      	cmp	r3, #16
 800aa54:	bfcc      	ite	gt
 800aa56:	2301      	movgt	r3, #1
 800aa58:	2300      	movle	r3, #0
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d018      	beq.n	800aa92 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800aa60:	f107 030c 	add.w	r3, r7, #12
 800aa64:	2110      	movs	r1, #16
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fff4 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	4632      	mov	r2, r6
 800aa70:	4619      	mov	r1, r3
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f001 f85f 	bl	800bb36 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800aa78:	f107 030c 	add.w	r3, r7, #12
 800aa7c:	2110      	movs	r1, #16
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 ffe8 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800aa84:	4603      	mov	r3, r0
 800aa86:	462a      	mov	r2, r5
 800aa88:	68b9      	ldr	r1, [r7, #8]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f001 f8bc 	bl	800bc08 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800aa90:	e004      	b.n	800aa9c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800aa92:	4622      	mov	r2, r4
 800aa94:	68b9      	ldr	r1, [r7, #8]
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f001 f84d 	bl	800bb36 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800aa9c:	bf00      	nop
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaa4 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 800aaa4:	b5b0      	push	{r4, r5, r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800aaac:	1d3b      	adds	r3, r7, #4
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 f8d2 	bl	800bc58 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800aab4:	f107 030c 	add.w	r3, r7, #12
 800aab8:	4629      	mov	r1, r5
 800aaba:	4618      	mov	r0, r3
 800aabc:	f001 f8d7 	bl	800bc6e <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800aac0:	bf00      	nop
 800aac2:	4620      	mov	r0, r4
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bdb0      	pop	{r4, r5, r7, pc}

0800aaca <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800aaca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aacc:	b085      	sub	sp, #20
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800aad6:	68fc      	ldr	r4, [r7, #12]
 800aad8:	7938      	ldrb	r0, [r7, #4]
 800aada:	f001 f8d6 	bl	800bc8a <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800aade:	f107 030c 	add.w	r3, r7, #12
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7ff ff12 	bl	800a90c <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800aae8:	4633      	mov	r3, r6
 800aaea:	462a      	mov	r2, r5
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f001 f8f2 	bl	800bcd8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800aaf4:	4603      	mov	r3, r0
    }
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aafe <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 800aafe:	b5b0      	push	{r4, r5, r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800ab06:	1d3b      	adds	r3, r7, #4
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 f964 	bl	800bdd6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800ab0e:	f107 030c 	add.w	r3, r7, #12
 800ab12:	4629      	mov	r1, r5
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 f969 	bl	800bdec <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800ab1a:	bf00      	nop
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bdb0      	pop	{r4, r5, r7, pc}

0800ab24 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800ab24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800ab30:	68fc      	ldr	r4, [r7, #12]
 800ab32:	7938      	ldrb	r0, [r7, #4]
 800ab34:	f001 f968 	bl	800be08 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800ab38:	f107 030c 	add.w	r3, r7, #12
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff fee5 	bl	800a90c <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800ab42:	4633      	mov	r3, r6
 800ab44:	462a      	mov	r2, r5
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f001 f984 	bl	800be56 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800ab4e:	4603      	mov	r3, r0
    }
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab58 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 f9f5 	bl	800bf54 <_ZNSaIfEC1ERKS_>
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b082      	sub	sp, #8
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f001 f9e8 	bl	800bf54 <_ZNSaIfEC1ERKS_>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f7 fcbc 	bl	8002504 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7f7 fe8b 	bl	80028be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800aba8:	4602      	mov	r2, r0
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	441a      	add	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	609a      	str	r2, [r3, #8]
      }
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4618      	mov	r0, r3
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800abf8:	2301      	movs	r3, #1
 800abfa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f001 f9b5 	bl	800bf70 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800ac06:	4603      	mov	r3, r0
    }
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ac26:	b5b0      	push	{r4, r5, r7, lr}
 800ac28:	b084      	sub	sp, #16
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f001 f9ac 	bl	800bf90 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f001 f9a8 	bl	800bf90 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800ac40:	4605      	mov	r5, r0
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f001 f9b2 	bl	800bfac <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f001 f9ba 	bl	800bfc8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800ac54:	4603      	mov	r3, r0
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 f9c5 	bl	800bfe8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800ac5e:	4603      	mov	r3, r0
    }
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bdb0      	pop	{r4, r5, r7, pc}

0800ac68 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800ac72:	f7f6 fec9 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f001 f9c9 	bl	800c016 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 800ac84:	e003      	b.n	800ac8e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f001 f9eb 	bl	800c064 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f001 f9e8 	bl	800c07a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800acaa:	4603      	mov	r3, r0
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
    { return __res; }
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800acd8:	2301      	movs	r3, #1
 800acda:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f001 f9e7 	bl	800c0b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 800ace6:	4603      	mov	r3, r0
    }
 800ace8:	4618      	mov	r0, r3
 800acea:	3718      	adds	r7, #24
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b088      	sub	sp, #32
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	61fb      	str	r3, [r7, #28]
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	61bb      	str	r3, [r7, #24]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800ad1e:	f7f6 fe73 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800ad28:	69b8      	ldr	r0, [r7, #24]
 800ad2a:	f012 f92f 	bl	801cf8c <_ZdlPv>
	    return;
 800ad2e:	e005      	b.n	800ad3c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	69b9      	ldr	r1, [r7, #24]
 800ad34:	69f8      	ldr	r0, [r7, #28]
 800ad36:	f002 f8d2 	bl	800cede <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800ad3a:	bf00      	nop
 800ad3c:	bf00      	nop
 800ad3e:	3720      	adds	r7, #32
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800ad4e:	f7f6 fe5b 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d004      	beq.n	800ad62 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f001 f9ba 	bl	800c0d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 800ad60:	e003      	b.n	800ad6a <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f001 f9b5 	bl	800c0d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f012 f91b 	bl	801cfb8 <_ZNSaIcEC1ERKS_>
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f012 f90e 	bl	801cfb8 <_ZNSaIcEC1ERKS_>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff fd8d 	bl	800a8be <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fb14 	bl	800b3e8 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800adc0:	4602      	mov	r2, r0
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	441a      	add	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	609a      	str	r2, [r3, #8]
      }
 800adda:	bf00      	nop
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4618      	mov	r0, r3
 800adf8:	370c      	adds	r7, #12
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b086      	sub	sp, #24
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	60f8      	str	r0, [r7, #12]
 800ae0a:	60b9      	str	r1, [r7, #8]
 800ae0c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	68b9      	ldr	r1, [r7, #8]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f001 f975 	bl	800c106 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 800ae1c:	4603      	mov	r3, r0
    }
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b082      	sub	sp, #8
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800ae30:	f7f6 fdea 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f001 f972 	bl	800c126 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 800ae42:	e003      	b.n	800ae4c <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f001 f986 	bl	800c158 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	4611      	mov	r1, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f001 f978 	bl	800c16e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	4611      	mov	r1, r2
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff ffe5 	bl	800ae68 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	701a      	strb	r2, [r3, #0]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	605a      	str	r2, [r3, #4]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f103 0208 	add.w	r2, r3, #8
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f7ff ffda 	bl	800ae88 <_ZNSt6vectorIcSaIcEEC1EOS1_>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	695a      	ldr	r2, [r3, #20]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	615a      	str	r2, [r3, #20]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800aee6:	b5b0      	push	{r4, r5, r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800aef0:	6838      	ldr	r0, [r7, #0]
 800aef2:	f7ff ffae 	bl	800ae52 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800aef6:	4605      	mov	r5, r0
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4619      	mov	r1, r3
 800aefc:	2018      	movs	r0, #24
 800aefe:	f7f6 fd8b 	bl	8001a18 <_ZnwjPv>
 800af02:	4604      	mov	r4, r0
 800af04:	4629      	mov	r1, r5
 800af06:	4620      	mov	r0, r4
 800af08:	f7ff ffce 	bl	800aea8 <_ZN3jlb4EdgeC1EOS0_>
 800af0c:	4623      	mov	r3, r4
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bdb0      	pop	{r4, r5, r7, pc}

0800af16 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff ff95 	bl	800ae52 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800af28:	4603      	mov	r3, r0
 800af2a:	4619      	mov	r1, r3
 800af2c:	68b8      	ldr	r0, [r7, #8]
 800af2e:	f7ff ffda 	bl	800aee6 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	1d1a      	adds	r2, r3, #4
 800af46:	f107 030c 	add.w	r3, r7, #12
 800af4a:	4611      	mov	r1, r2
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 f929 	bl	800c1a4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800af5c:	b5b0      	push	{r4, r5, r7, lr}
 800af5e:	b08c      	sub	sp, #48	; 0x30
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800af68:	4a3f      	ldr	r2, [pc, #252]	; (800b068 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 800af6a:	2101      	movs	r1, #1
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f001 f929 	bl	800c1c4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 800af72:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f001 f966 	bl	800c252 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800af86:	4603      	mov	r3, r0
 800af88:	617b      	str	r3, [r7, #20]
 800af8a:	f107 0214 	add.w	r2, r7, #20
 800af8e:	f107 0308 	add.w	r3, r7, #8
 800af92:	4611      	mov	r1, r2
 800af94:	4618      	mov	r0, r3
 800af96:	f001 f96d 	bl	800c274 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800af9a:	4603      	mov	r3, r0
 800af9c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afa2:	4618      	mov	r0, r3
 800afa4:	f001 f980 	bl	800c2a8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800afa8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800afae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800afb0:	6a3a      	ldr	r2, [r7, #32]
 800afb2:	4613      	mov	r3, r2
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	4413      	add	r3, r2
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	189d      	adds	r5, r3, r2
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7ff ff46 	bl	800ae52 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800afc6:	4603      	mov	r3, r0
 800afc8:	461a      	mov	r2, r3
 800afca:	4629      	mov	r1, r5
 800afcc:	4620      	mov	r0, r4
 800afce:	f7ff ffa2 	bl	800af16 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800afd2:	2300      	movs	r3, #0
 800afd4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800afd6:	f107 0308 	add.w	r3, r7, #8
 800afda:	4618      	mov	r0, r3
 800afdc:	f001 f98c 	bl	800c2f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800afe0:	4603      	mov	r3, r0
 800afe2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff f873 	bl	800a0d2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800afec:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800afee:	69fa      	ldr	r2, [r7, #28]
 800aff0:	4621      	mov	r1, r4
 800aff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aff4:	f001 f96c 	bl	800c2d0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800aff8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	3318      	adds	r3, #24
 800affe:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b000:	f107 0308 	add.w	r3, r7, #8
 800b004:	4618      	mov	r0, r3
 800b006:	f001 f977 	bl	800c2f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800b00a:	4603      	mov	r3, r0
 800b00c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff f85e 	bl	800a0d2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800b016:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b01c:	4620      	mov	r0, r4
 800b01e:	f001 f957 	bl	800c2d0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800b022:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800b024:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	689a      	ldr	r2, [r3, #8]
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	10db      	asrs	r3, r3, #3
 800b030:	4a0e      	ldr	r2, [pc, #56]	; (800b06c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 800b032:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800b036:	461a      	mov	r2, r3
 800b038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b03a:	f7ff f837 	bl	800a0ac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	69fa      	ldr	r2, [r7, #28]
 800b042:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b04a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b04c:	4613      	mov	r3, r2
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	4413      	add	r3, r2
 800b052:	00db      	lsls	r3, r3, #3
 800b054:	461a      	mov	r2, r3
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	441a      	add	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	609a      	str	r2, [r3, #8]
    }
 800b05e:	bf00      	nop
 800b060:	3730      	adds	r7, #48	; 0x30
 800b062:	46bd      	mov	sp, r7
 800b064:	bdb0      	pop	{r4, r5, r7, pc}
 800b066:	bf00      	nop
 800b068:	08021c84 	.word	0x08021c84
 800b06c:	aaaaaaab 	.word	0xaaaaaaab

0800b070 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff ff5e 	bl	800af3a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800b07e:	4603      	mov	r3, r0
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	f107 030c 	add.w	r3, r7, #12
 800b086:	2101      	movs	r1, #1
 800b088:	4618      	mov	r0, r3
 800b08a:	f001 f94c 	bl	800c326 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 800b08e:	4603      	mov	r3, r0
 800b090:	60bb      	str	r3, [r7, #8]
 800b092:	f107 0308 	add.w	r3, r7, #8
 800b096:	4618      	mov	r0, r3
 800b098:	f001 f961 	bl	800c35e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800b09c:	4603      	mov	r3, r0
      }
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b088      	sub	sp, #32
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	61bb      	str	r3, [r7, #24]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b0d4:	f7f6 fc98 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b0de:	69b8      	ldr	r0, [r7, #24]
 800b0e0:	f011 ff54 	bl	801cf8c <_ZdlPv>
	    return;
 800b0e4:	e005      	b.n	800b0f2 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	69b9      	ldr	r1, [r7, #24]
 800b0ea:	69f8      	ldr	r0, [r7, #28]
 800b0ec:	f001 ffc1 	bl	800d072 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800b104:	f7f6 fc80 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d004      	beq.n	800b118 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 f930 	bl	800c376 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 800b116:	e003      	b.n	800b120 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 f92b 	bl	800c376 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4618      	mov	r0, r3
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	781a      	ldrb	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	701a      	strb	r2, [r3, #0]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	605a      	str	r2, [r3, #4]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	689a      	ldr	r2, [r3, #8]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	609a      	str	r2, [r3, #8]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f103 020c 	add.w	r2, r3, #12
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	330c      	adds	r3, #12
 800b168:	4619      	mov	r1, r3
 800b16a:	4610      	mov	r0, r2
 800b16c:	f001 f91c 	bl	800c3a8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800b17a:	b5b0      	push	{r4, r5, r7, lr}
 800b17c:	b082      	sub	sp, #8
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800b184:	6838      	ldr	r0, [r7, #0]
 800b186:	f7ff ffce 	bl	800b126 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b18a:	4605      	mov	r5, r0
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4619      	mov	r1, r3
 800b190:	2018      	movs	r0, #24
 800b192:	f7f6 fc41 	bl	8001a18 <_ZnwjPv>
 800b196:	4604      	mov	r4, r0
 800b198:	4629      	mov	r1, r5
 800b19a:	4620      	mov	r0, r4
 800b19c:	f7ff ffce 	bl	800b13c <_ZN3jlb4NodeC1ERKS0_>
 800b1a0:	4623      	mov	r3, r4
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bdb0      	pop	{r4, r5, r7, pc}

0800b1aa <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	60f8      	str	r0, [r7, #12]
 800b1b2:	60b9      	str	r1, [r7, #8]
 800b1b4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff ffb5 	bl	800b126 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	4619      	mov	r1, r3
 800b1c0:	68b8      	ldr	r0, [r7, #8]
 800b1c2:	f7ff ffda 	bl	800b17a <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800b1c6:	bf00      	nop
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b084      	sub	sp, #16
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	1d1a      	adds	r2, r3, #4
 800b1da:	f107 030c 	add.w	r3, r7, #12
 800b1de:	4611      	mov	r1, r2
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 f91e 	bl	800c422 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800b1f0:	b5b0      	push	{r4, r5, r7, lr}
 800b1f2:	b08c      	sub	sp, #48	; 0x30
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800b1fc:	4a44      	ldr	r2, [pc, #272]	; (800b310 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 800b1fe:	2101      	movs	r1, #1
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f001 f91e 	bl	800c442 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 800b206:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f001 f95b 	bl	800c4d0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 800b21a:	4603      	mov	r3, r0
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	f107 0214 	add.w	r2, r7, #20
 800b222:	f107 0308 	add.w	r3, r7, #8
 800b226:	4611      	mov	r1, r2
 800b228:	4618      	mov	r0, r3
 800b22a:	f001 f961 	bl	800c4f0 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b22e:	4603      	mov	r3, r0
 800b230:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b236:	4618      	mov	r0, r3
 800b238:	f001 f974 	bl	800c524 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 800b23c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800b242:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b244:	6a3a      	ldr	r2, [r7, #32]
 800b246:	4613      	mov	r3, r2
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	4413      	add	r3, r2
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	189d      	adds	r5, r3, r2
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff ff66 	bl	800b126 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b25a:	4603      	mov	r3, r0
 800b25c:	461a      	mov	r2, r3
 800b25e:	4629      	mov	r1, r5
 800b260:	4620      	mov	r0, r4
 800b262:	f7ff ffa2 	bl	800b1aa <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800b266:	2300      	movs	r3, #0
 800b268:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800b26a:	f107 0308 	add.w	r3, r7, #8
 800b26e:	4618      	mov	r0, r3
 800b270:	f001 f96c 	bl	800c54c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800b274:	4603      	mov	r3, r0
 800b276:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff f82b 	bl	800a2d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800b280:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800b282:	69fa      	ldr	r2, [r7, #28]
 800b284:	4621      	mov	r1, r4
 800b286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b288:	f001 f96b 	bl	800c562 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800b28c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	3318      	adds	r3, #24
 800b292:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 800b294:	f107 0308 	add.w	r3, r7, #8
 800b298:	4618      	mov	r0, r3
 800b29a:	f001 f957 	bl	800c54c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff f816 	bl	800a2d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800b2aa:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f001 f956 	bl	800c562 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800b2b6:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7ff f80b 	bl	800a2d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2c8:	f7ff f810 	bl	800a2ec <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800b2cc:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	689a      	ldr	r2, [r3, #8]
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	10db      	asrs	r3, r3, #3
 800b2d8:	4a0e      	ldr	r2, [pc, #56]	; (800b314 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800b2da:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800b2de:	461a      	mov	r2, r3
 800b2e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2e2:	f7fe ffe5 	bl	800a2b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	69fa      	ldr	r2, [r7, #28]
 800b2ea:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b2f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	4413      	add	r3, r2
 800b2fa:	00db      	lsls	r3, r3, #3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	441a      	add	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	609a      	str	r2, [r3, #8]
    }
 800b306:	bf00      	nop
 800b308:	3730      	adds	r7, #48	; 0x30
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bdb0      	pop	{r4, r5, r7, pc}
 800b30e:	bf00      	nop
 800b310:	08021c84 	.word	0x08021c84
 800b314:	aaaaaaab 	.word	0xaaaaaaab

0800b318 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff ff54 	bl	800b1ce <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800b326:	4603      	mov	r3, r0
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	f107 030c 	add.w	r3, r7, #12
 800b32e:	2101      	movs	r1, #1
 800b330:	4618      	mov	r0, r3
 800b332:	f001 f92f 	bl	800c594 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 800b336:	4603      	mov	r3, r0
 800b338:	60bb      	str	r3, [r7, #8]
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	4618      	mov	r0, r3
 800b340:	f001 f944 	bl	800c5cc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 800b344:	4603      	mov	r3, r0
      }
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	4618      	mov	r0, r3
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b37a:	b480      	push	{r7}
 800b37c:	b085      	sub	sp, #20
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	1ad3      	subs	r3, r2, r3
    }
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b398:	b590      	push	{r4, r7, lr}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b3a2:	f107 030c 	add.w	r3, r7, #12
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f011 fe05 	bl	801cfb8 <_ZNSaIcEC1ERKS_>
 800b3ae:	f107 030c 	add.w	r3, r7, #12
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f001 f922 	bl	800c5fc <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	bf8c      	ite	hi
 800b3c0:	2301      	movhi	r3, #1
 800b3c2:	2300      	movls	r3, #0
 800b3c4:	b2dc      	uxtb	r4, r3
 800b3c6:	f107 030c 	add.w	r3, r7, #12
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f011 fdf5 	bl	801cfba <_ZNSaIcED1Ev>
 800b3d0:	2c00      	cmp	r4, #0
 800b3d2:	d002      	beq.n	800b3da <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800b3d4:	4803      	ldr	r0, [pc, #12]	; (800b3e4 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800b3d6:	f011 fdf7 	bl	801cfc8 <_ZSt20__throw_length_errorPKc>
	return __n;
 800b3da:	687b      	ldr	r3, [r7, #4]
      }
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd90      	pop	{r4, r7, pc}
 800b3e4:	08021ca0 	.word	0x08021ca0

0800b3e8 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d006      	beq.n	800b406 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 fab4 	bl	800b96a <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800b402:	4603      	mov	r3, r0
 800b404:	e000      	b.n	800b408 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800b406:	2300      	movs	r3, #0
      }
 800b408:	4618      	mov	r0, r3
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f001 f904 	bl	800c630 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 800b428:	4603      	mov	r3, r0
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	605a      	str	r2, [r3, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3308      	adds	r3, #8
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 f902 	bl	800c654 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3318      	adds	r3, #24
 800b454:	4618      	mov	r0, r3
 800b456:	f001 f8fd 	bl	800c654 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4618      	mov	r0, r3
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800b46e:	f107 030c 	add.w	r3, r7, #12
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f859 	bl	800b52c <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800b47a:	f107 030c 	add.w	r3, r7, #12
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	4618      	mov	r0, r3
 800b482:	f001 f8fe 	bl	800c682 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 800b486:	4604      	mov	r4, r0
 800b488:	bf00      	nop
      }
 800b48a:	f107 030c 	add.w	r3, r7, #12
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 f85d 	bl	800b54e <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800b494:	4623      	mov	r3, r4
      }
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd90      	pop	{r4, r7, pc}

0800b49e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b086      	sub	sp, #24
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	617b      	str	r3, [r7, #20]
 800b4ae:	e008      	b.n	800b4c2 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f8a2 	bl	800b5fa <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	617b      	str	r3, [r7, #20]
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d3f2      	bcc.n	800b4b0 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 800b4ca:	bf00      	nop
 800b4cc:	bf00      	nop
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800b4d4:	b590      	push	{r4, r7, lr}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685c      	ldr	r4, [r3, #4]
 800b4f0:	f000 f895 	bl	800b61e <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	18e2      	adds	r2, r4, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	609a      	str	r2, [r3, #8]
      }
 800b4fe:	bf00      	nop
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	bd90      	pop	{r4, r7, pc}

0800b506 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800b506:	b590      	push	{r4, r7, lr}
 800b508:	b083      	sub	sp, #12
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800b510:	687c      	ldr	r4, [r7, #4]
 800b512:	2004      	movs	r0, #4
 800b514:	f7fc f9bd 	bl	8007892 <_ZSt16__deque_buf_sizej>
 800b518:	4603      	mov	r3, r0
 800b51a:	461a      	mov	r2, r3
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	4620      	mov	r0, r4
 800b520:	f7f7 f911 	bl	8002746 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd90      	pop	{r4, r7, pc}

0800b52c <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800b536:	6838      	ldr	r0, [r7, #0]
 800b538:	f001 f8c3 	bl	800c6c2 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800b53c:	4603      	mov	r3, r0
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f001 f8c9 	bl	800c6d8 <_ZNSaIPfEC1IfEERKSaIT_E>
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4618      	mov	r0, r3
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	61bb      	str	r3, [r7, #24]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b57c:	f7f6 fa44 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 800b586:	69b8      	ldr	r0, [r7, #24]
 800b588:	f011 fd00 	bl	801cf8c <_ZdlPv>
	    return;
 800b58c:	e005      	b.n	800b59a <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	69b9      	ldr	r1, [r7, #24]
 800b592:	69f8      	ldr	r0, [r7, #28]
 800b594:	f001 fe81 	bl	800d29a <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 800b598:	bf00      	nop
 800b59a:	bf00      	nop
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f001 f888 	bl	800c6c2 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f001 f89c 	bl	800c6f2 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800b5d6:	6879      	ldr	r1, [r7, #4]
 800b5d8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	6809      	ldr	r1, [r1, #0]
 800b5de:	1a41      	subs	r1, r0, r1
 800b5e0:	1089      	asrs	r1, r1, #2
 800b5e2:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d904      	bls.n	800b5f2 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 f8ca 	bl	800c786 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800b5fa:	b590      	push	{r4, r7, lr}
 800b5fc:	b083      	sub	sp, #12
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800b602:	687c      	ldr	r4, [r7, #4]
 800b604:	2004      	movs	r0, #4
 800b606:	f7fc f944 	bl	8007892 <_ZSt16__deque_buf_sizej>
 800b60a:	4603      	mov	r3, r0
 800b60c:	4619      	mov	r1, r3
 800b60e:	4620      	mov	r0, r4
 800b610:	f7f7 f9e1 	bl	80029d6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800b614:	4603      	mov	r3, r0
      }
 800b616:	4618      	mov	r0, r3
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd90      	pop	{r4, r7, pc}

0800b61e <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800b61e:	b580      	push	{r7, lr}
 800b620:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800b622:	2004      	movs	r0, #4
 800b624:	f7fc f935 	bl	8007892 <_ZSt16__deque_buf_sizej>
 800b628:	4603      	mov	r3, r0
 800b62a:	4618      	mov	r0, r3
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <_ZNKSt16initializer_listIfE4sizeEv>:
 800b62e:	b480      	push	{r7}
 800b630:	b083      	sub	sp, #12
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800b646:	b480      	push	{r7}
 800b648:	b085      	sub	sp, #20
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	60b9      	str	r1, [r7, #8]
 800b650:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	ed93 7a00 	vldr	s14, [r3]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	edd3 7a00 	vldr	s15, [r3]
 800b65e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b666:	bf4c      	ite	mi
 800b668:	2301      	movmi	r3, #1
 800b66a:	2300      	movpl	r3, #0
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	4618      	mov	r0, r3
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b086      	sub	sp, #24
 800b67e:	af00      	add	r7, sp, #0
 800b680:	60f8      	str	r0, [r7, #12]
 800b682:	60b9      	str	r1, [r7, #8]
 800b684:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d101      	bne.n	800b692 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
	return __first;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	e01a      	b.n	800b6c8 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b696:	e00a      	b.n	800b6ae <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	if (__comp(__first, __result))
 800b698:	1d3b      	adds	r3, r7, #4
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	68f9      	ldr	r1, [r7, #12]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff ffd1 	bl	800b646 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	  __result = __first;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	bf14      	ite	ne
 800b6bc:	2301      	movne	r3, #1
 800b6be:	2300      	moveq	r3, #0
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e8      	bne.n	800b698 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1e>
      return __result;
 800b6c6:	697b      	ldr	r3, [r7, #20]
    }
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	601a      	str	r2, [r3, #0]
      { }
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 800b6ee:	b480      	push	{r7}
 800b6f0:	b083      	sub	sp, #12
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b702:	b590      	push	{r4, r7, lr}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7fc fde4 	bl	80082da <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800b712:	4603      	mov	r3, r0
 800b714:	681c      	ldr	r4, [r3, #0]
 800b716:	6838      	ldr	r0, [r7, #0]
 800b718:	f7fc fddf 	bl	80082da <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800b71c:	4603      	mov	r3, r0
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	1ae3      	subs	r3, r4, r3
 800b722:	4618      	mov	r0, r3
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	bd90      	pop	{r4, r7, pc}

0800b72a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800b72a:	b480      	push	{r7}
 800b72c:	b083      	sub	sp, #12
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4618      	mov	r0, r3
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 800b742:	b580      	push	{r7, lr}
 800b744:	b082      	sub	sp, #8
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800b74c:	463b      	mov	r3, r7
 800b74e:	4618      	mov	r0, r3
 800b750:	f7ff ffeb 	bl	800b72a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800b754:	4603      	mov	r3, r0
 800b756:	781a      	ldrb	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	429a      	cmp	r2, r3
 800b760:	bf0c      	ite	eq
 800b762:	2301      	moveq	r3, #1
 800b764:	2300      	movne	r3, #0
 800b766:	b2db      	uxtb	r3, r3
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	1c5a      	adds	r2, r3, #1
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	601a      	str	r2, [r3, #0]
	return *this;
 800b782:	687b      	ldr	r3, [r7, #4]
      }
 800b784:	4618      	mov	r0, r3
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800b79e:	f107 020c 	add.w	r2, r7, #12
 800b7a2:	f107 0308 	add.w	r3, r7, #8
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff ffaa 	bl	800b702 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	109b      	asrs	r3, r3, #2
 800b7b2:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800b7b4:	e03e      	b.n	800b834 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800b7b6:	1d3b      	adds	r3, r7, #4
 800b7b8:	68f9      	ldr	r1, [r7, #12]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7ff ffc1 	bl	800b742 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	e077      	b.n	800b8ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800b7ca:	f107 030c 	add.w	r3, r7, #12
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7ff ffce 	bl	800b770 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800b7d4:	1d3b      	adds	r3, r7, #4
 800b7d6:	68f9      	ldr	r1, [r7, #12]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7ff ffb2 	bl	800b742 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d001      	beq.n	800b7e8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	e068      	b.n	800b8ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800b7e8:	f107 030c 	add.w	r3, r7, #12
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7ff ffbf 	bl	800b770 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800b7f2:	1d3b      	adds	r3, r7, #4
 800b7f4:	68f9      	ldr	r1, [r7, #12]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff ffa3 	bl	800b742 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	e059      	b.n	800b8ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800b806:	f107 030c 	add.w	r3, r7, #12
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff ffb0 	bl	800b770 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800b810:	1d3b      	adds	r3, r7, #4
 800b812:	68f9      	ldr	r1, [r7, #12]
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff ff94 	bl	800b742 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	e04a      	b.n	800b8ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800b824:	f107 030c 	add.w	r3, r7, #12
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff ffa1 	bl	800b770 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	3b01      	subs	r3, #1
 800b832:	617b      	str	r3, [r7, #20]
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	2b00      	cmp	r3, #0
 800b838:	dcbd      	bgt.n	800b7b6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800b83a:	f107 020c 	add.w	r2, r7, #12
 800b83e:	f107 0308 	add.w	r3, r7, #8
 800b842:	4611      	mov	r1, r2
 800b844:	4618      	mov	r0, r3
 800b846:	f7ff ff5c 	bl	800b702 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d006      	beq.n	800b85e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 800b850:	2b03      	cmp	r3, #3
 800b852:	dc31      	bgt.n	800b8b8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 800b854:	2b01      	cmp	r3, #1
 800b856:	d020      	beq.n	800b89a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d00f      	beq.n	800b87c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 800b85c:	e02c      	b.n	800b8b8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 800b85e:	1d3b      	adds	r3, r7, #4
 800b860:	68f9      	ldr	r1, [r7, #12]
 800b862:	4618      	mov	r0, r3
 800b864:	f7ff ff6d 	bl	800b742 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	e023      	b.n	800b8ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800b872:	f107 030c 	add.w	r3, r7, #12
 800b876:	4618      	mov	r0, r3
 800b878:	f7ff ff7a 	bl	800b770 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800b87c:	1d3b      	adds	r3, r7, #4
 800b87e:	68f9      	ldr	r1, [r7, #12]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff ff5e 	bl	800b742 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	e014      	b.n	800b8ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800b890:	f107 030c 	add.w	r3, r7, #12
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff ff6b 	bl	800b770 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800b89a:	1d3b      	adds	r3, r7, #4
 800b89c:	68f9      	ldr	r1, [r7, #12]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff ff4f 	bl	800b742 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	e005      	b.n	800b8ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800b8ae:	f107 030c 	add.w	r3, r7, #12
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff ff5c 	bl	800b770 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
    }
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b088      	sub	sp, #32
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	60f8      	str	r0, [r7, #12]
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	607a      	str	r2, [r7, #4]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	61fb      	str	r3, [r7, #28]
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	61bb      	str	r3, [r7, #24]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b8da:	f7f6 f895 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 800b8e4:	69b8      	ldr	r0, [r7, #24]
 800b8e6:	f011 fb51 	bl	801cf8c <_ZdlPv>
	    return;
 800b8ea:	e005      	b.n	800b8f8 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	69b9      	ldr	r1, [r7, #24]
 800b8f0:	69f8      	ldr	r0, [r7, #28]
 800b8f2:	f001 fd32 	bl	800d35a <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	3720      	adds	r7, #32
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <_ZSt9iter_swapIPbS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 ffc9 	bl	800c8ba <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800b93c:	f7f6 f864 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d006      	beq.n	800b954 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	68b9      	ldr	r1, [r7, #8]
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f000 ffd4 	bl	800c8f8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 800b950:	4603      	mov	r3, r0
 800b952:	e006      	b.n	800b962 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	68b9      	ldr	r1, [r7, #8]
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f000 ffef 	bl	800c93c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800b95e:	4603      	mov	r3, r0
 800b960:	bf00      	nop
    }
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b084      	sub	sp, #16
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	6039      	str	r1, [r7, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	60fb      	str	r3, [r7, #12]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b97c:	f7f6 f844 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d004      	beq.n	800b990 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b986:	68b8      	ldr	r0, [r7, #8]
 800b988:	f011 fb04 	bl	801cf94 <_Znwj>
 800b98c:	4603      	mov	r3, r0
 800b98e:	e006      	b.n	800b99e <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b990:	2200      	movs	r2, #0
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f001 fd0e 	bl	800d3b6 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800b99a:	4603      	mov	r3, r0
 800b99c:	bf00      	nop
      { return __a.allocate(__n); }
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800b9a6:	b590      	push	{r4, r7, lr}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	60f8      	str	r0, [r7, #12]
 800b9ae:	60b9      	str	r1, [r7, #8]
 800b9b0:	607a      	str	r2, [r7, #4]
 800b9b2:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	68b9      	ldr	r1, [r7, #8]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f001 f81a 	bl	800c9f4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800b9c0:	463b      	mov	r3, r7
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	68b9      	ldr	r1, [r7, #8]
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f001 f862 	bl	800ca90 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 800b9cc:	bf00      	nop
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd90      	pop	{r4, r7, pc}

0800b9d4 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800b9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d6:	b089      	sub	sp, #36	; 0x24
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800b9e0:	f107 020c 	add.w	r2, r7, #12
 800b9e4:	f107 0308 	add.w	r3, r7, #8
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7f6 ff52 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	0fda      	lsrs	r2, r3, #31
 800b9f4:	4413      	add	r3, r2
 800b9f6:	105b      	asrs	r3, r3, #1
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f107 030c 	add.w	r3, r7, #12
 800b9fe:	4611      	mov	r1, r2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 f827 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ba06:	4603      	mov	r3, r0
 800ba08:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800ba0a:	f107 030c 	add.w	r3, r7, #12
 800ba0e:	2101      	movs	r1, #1
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 f81f 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ba16:	4604      	mov	r4, r0
 800ba18:	f107 0308 	add.w	r3, r7, #8
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f001 f85d 	bl	800cade <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 800ba24:	4603      	mov	r3, r0
 800ba26:	f88d 5000 	strb.w	r5, [sp]
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f001 f86e 	bl	800cb10 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800ba34:	f107 030c 	add.w	r3, r7, #12
 800ba38:	2101      	movs	r1, #1
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 f80a 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ba40:	4633      	mov	r3, r6
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	68b9      	ldr	r1, [r7, #8]
 800ba46:	f001 f8b8 	bl	800cbba <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 800ba4a:	4603      	mov	r3, r0
    }
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	371c      	adds	r7, #28
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	f107 020c 	add.w	r2, r7, #12
 800ba6e:	f107 0308 	add.w	r3, r7, #8
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7f6 fea6 	bl	80027c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	1d1a      	adds	r2, r3, #4
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	601a      	str	r2, [r3, #0]
	return *this;
 800ba96:	687b      	ldr	r3, [r7, #4]
      }
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800babc:	b580      	push	{r7, lr}
 800babe:	ed2d 8b02 	vpush	{d8}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800bacc:	f107 0308 	add.w	r3, r7, #8
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff ffe7 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bad6:	4603      	mov	r3, r0
 800bad8:	ed93 8a00 	vldr	s16, [r3]
 800badc:	1d3b      	adds	r3, r7, #4
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff ffe0 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bae4:	4603      	mov	r3, r0
 800bae6:	edd3 7a00 	vldr	s15, [r3]
 800baea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf2:	bf4c      	ite	mi
 800baf4:	2301      	movmi	r3, #1
 800baf6:	2300      	movpl	r3, #0
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	ecbd 8b02 	vpop	{d8}
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800bb06:	b590      	push	{r4, r7, lr}
 800bb08:	b085      	sub	sp, #20
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	60b9      	str	r1, [r7, #8]
 800bb10:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f001 f8a4 	bl	800cc60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800bb18:	4604      	mov	r4, r0
 800bb1a:	68b8      	ldr	r0, [r7, #8]
 800bb1c:	f001 f8a0 	bl	800cc60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800bb20:	4603      	mov	r3, r0
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	4619      	mov	r1, r3
 800bb26:	4620      	mov	r0, r4
 800bb28:	f001 f8a5 	bl	800cc76 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 800bb2c:	4603      	mov	r3, r0
    }
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd90      	pop	{r4, r7, pc}

0800bb36 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800bb36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb38:	b087      	sub	sp, #28
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800bb42:	f107 0208 	add.w	r2, r7, #8
 800bb46:	f107 030c 	add.w	r3, r7, #12
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe f92f 	bl	8009db0 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d153      	bne.n	800bc00 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800bb58:	f107 030c 	add.w	r3, r7, #12
 800bb5c:	2101      	movs	r1, #1
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff ff78 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800bb64:	4603      	mov	r3, r0
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	e03b      	b.n	800bbe2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 800bb6a:	1d3b      	adds	r3, r7, #4
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	6979      	ldr	r1, [r7, #20]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7ff ffa3 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d026      	beq.n	800bbca <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800bb7c:	f107 0314 	add.w	r3, r7, #20
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff ff8f 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bb86:	4603      	mov	r3, r0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fd ffc9 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800bb94:	f107 0314 	add.w	r3, r7, #20
 800bb98:	2101      	movs	r1, #1
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7ff ff5a 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800bba0:	4603      	mov	r3, r0
 800bba2:	461a      	mov	r2, r3
 800bba4:	6979      	ldr	r1, [r7, #20]
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff ffad 	bl	800bb06 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 800bbac:	f107 0310 	add.w	r3, r7, #16
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fd ffb5 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	681c      	ldr	r4, [r3, #0]
 800bbba:	f107 030c 	add.w	r3, r7, #12
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff ff70 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	601c      	str	r4, [r3, #0]
 800bbc8:	e006      	b.n	800bbd8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f7f7 fca8 	bl	8003520 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	6978      	ldr	r0, [r7, #20]
 800bbd4:	f001 f890 	bl	800ccf8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800bbd8:	f107 0314 	add.w	r3, r7, #20
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7ff ff51 	bl	800ba84 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800bbe2:	f107 0208 	add.w	r2, r7, #8
 800bbe6:	f107 0314 	add.w	r3, r7, #20
 800bbea:	4611      	mov	r1, r2
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fe f8df 	bl	8009db0 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	f083 0301 	eor.w	r3, r3, #1
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1b5      	bne.n	800bb6a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 800bbfe:	e000      	b.n	800bc02 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 800bc00:	bf00      	nop
    }
 800bc02:	371c      	adds	r7, #28
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc08 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800bc08:	b5b0      	push	{r4, r5, r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	617b      	str	r3, [r7, #20]
 800bc18:	e00b      	b.n	800bc32 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f7f7 fc80 	bl	8003520 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800bc20:	4621      	mov	r1, r4
 800bc22:	6978      	ldr	r0, [r7, #20]
 800bc24:	f001 f868 	bl	800ccf8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800bc28:	f107 0314 	add.w	r3, r7, #20
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff ff29 	bl	800ba84 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800bc32:	f107 0208 	add.w	r2, r7, #8
 800bc36:	f107 0314 	add.w	r3, r7, #20
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fe f8b7 	bl	8009db0 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f083 0301 	eor.w	r3, r3, #1
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1e5      	bne.n	800bc1a <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 800bc4e:	bf00      	nop
 800bc50:	bf00      	nop
 800bc52:	3718      	adds	r7, #24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bdb0      	pop	{r4, r5, r7, pc}

0800bc58 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4618      	mov	r0, r3
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800bc78:	463b      	mov	r3, r7
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7ff ffec 	bl	800bc58 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800bc8a:	b5b0      	push	{r4, r5, r7, lr}
 800bc8c:	b084      	sub	sp, #16
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800bc92:	1d3b      	adds	r3, r7, #4
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7ff ffdf 	bl	800bc58 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800bc9a:	f107 030c 	add.w	r3, r7, #12
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4618      	mov	r0, r3
 800bca2:	f001 f874 	bl	800cd8e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800bca6:	bf00      	nop
 800bca8:	4620      	mov	r0, r4
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bdb0      	pop	{r4, r5, r7, pc}

0800bcb0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	f7f8 f86a 	bl	8003d9c <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f083 0301 	eor.w	r3, r3, #1
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	713a      	strb	r2, [r7, #4]
 800bce4:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	109b      	asrs	r3, r3, #2
 800bcee:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800bcf0:	e036      	b.n	800bd60 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800bcf2:	1d3b      	adds	r3, r7, #4
 800bcf4:	68f9      	ldr	r1, [r7, #12]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff ffda 	bl	800bcb0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	e063      	b.n	800bdce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bd0c:	1d3b      	adds	r3, r7, #4
 800bd0e:	68f9      	ldr	r1, [r7, #12]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7ff ffcd 	bl	800bcb0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	e056      	b.n	800bdce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3301      	adds	r3, #1
 800bd24:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bd26:	1d3b      	adds	r3, r7, #4
 800bd28:	68f9      	ldr	r1, [r7, #12]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff ffc0 	bl	800bcb0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	e049      	b.n	800bdce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bd40:	1d3b      	adds	r3, r7, #4
 800bd42:	68f9      	ldr	r1, [r7, #12]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff ffb3 	bl	800bcb0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	e03c      	b.n	800bdce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	3301      	adds	r3, #1
 800bd58:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	dcc5      	bgt.n	800bcf2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d006      	beq.n	800bd7e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	dc2b      	bgt.n	800bdcc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d01c      	beq.n	800bdb2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d00d      	beq.n	800bd98 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800bd7c:	e026      	b.n	800bdcc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800bd7e:	1d3b      	adds	r3, r7, #4
 800bd80:	68f9      	ldr	r1, [r7, #12]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff ff94 	bl	800bcb0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	e01d      	b.n	800bdce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3301      	adds	r3, #1
 800bd96:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bd98:	1d3b      	adds	r3, r7, #4
 800bd9a:	68f9      	ldr	r1, [r7, #12]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff ff87 	bl	800bcb0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d001      	beq.n	800bdac <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	e010      	b.n	800bdce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bdb2:	1d3b      	adds	r3, r7, #4
 800bdb4:	68f9      	ldr	r1, [r7, #12]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff ff7a 	bl	800bcb0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	e003      	b.n	800bdce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	60fb      	str	r3, [r7, #12]
	  return __last;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
    }
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800bdd6:	b480      	push	{r7}
 800bdd8:	b083      	sub	sp, #12
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff ffec 	bl	800bdd6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800be10:	1d3b      	adds	r3, r7, #4
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff ffdf 	bl	800bdd6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800be18:	f107 030c 	add.w	r3, r7, #12
 800be1c:	4629      	mov	r1, r5
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 ffc3 	bl	800cdaa <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800be24:	bf00      	nop
 800be26:	4620      	mov	r0, r4
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bdb0      	pop	{r4, r5, r7, pc}

0800be2e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	4619      	mov	r1, r3
 800be40:	4610      	mov	r0, r2
 800be42:	f7f7 ffb8 	bl	8003db6 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>
 800be46:	4603      	mov	r3, r0
 800be48:	f083 0301 	eor.w	r3, r3, #1
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	4618      	mov	r0, r3
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800be56:	b580      	push	{r7, lr}
 800be58:	b086      	sub	sp, #24
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	60b9      	str	r1, [r7, #8]
 800be60:	713a      	strb	r2, [r7, #4]
 800be62:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	109b      	asrs	r3, r3, #2
 800be6c:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800be6e:	e036      	b.n	800bede <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800be70:	1d3b      	adds	r3, r7, #4
 800be72:	68f9      	ldr	r1, [r7, #12]
 800be74:	4618      	mov	r0, r3
 800be76:	f7ff ffda 	bl	800be2e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	e063      	b.n	800bf4c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3301      	adds	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800be8a:	1d3b      	adds	r3, r7, #4
 800be8c:	68f9      	ldr	r1, [r7, #12]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7ff ffcd 	bl	800be2e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	e056      	b.n	800bf4c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3301      	adds	r3, #1
 800bea2:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bea4:	1d3b      	adds	r3, r7, #4
 800bea6:	68f9      	ldr	r1, [r7, #12]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff ffc0 	bl	800be2e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d001      	beq.n	800beb8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	e049      	b.n	800bf4c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3301      	adds	r3, #1
 800bebc:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bebe:	1d3b      	adds	r3, r7, #4
 800bec0:	68f9      	ldr	r1, [r7, #12]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff ffb3 	bl	800be2e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d001      	beq.n	800bed2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	e03c      	b.n	800bf4c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3301      	adds	r3, #1
 800bed6:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	3b01      	subs	r3, #1
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dcc5      	bgt.n	800be70 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	2b03      	cmp	r3, #3
 800beec:	d006      	beq.n	800befc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800beee:	2b03      	cmp	r3, #3
 800bef0:	dc2b      	bgt.n	800bf4a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d01c      	beq.n	800bf30 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d00d      	beq.n	800bf16 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800befa:	e026      	b.n	800bf4a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800befc:	1d3b      	adds	r3, r7, #4
 800befe:	68f9      	ldr	r1, [r7, #12]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff ff94 	bl	800be2e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	e01d      	b.n	800bf4c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3301      	adds	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bf16:	1d3b      	adds	r3, r7, #4
 800bf18:	68f9      	ldr	r1, [r7, #12]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff ff87 	bl	800be2e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	e010      	b.n	800bf4c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800bf30:	1d3b      	adds	r3, r7, #4
 800bf32:	68f9      	ldr	r1, [r7, #12]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7ff ff7a 	bl	800be2e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	e003      	b.n	800bf4c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3301      	adds	r3, #1
 800bf48:	60fb      	str	r3, [r7, #12]
	  return __last;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
    }
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800bf5e:	6839      	ldr	r1, [r7, #0]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 ff30 	bl	800cdc6 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	68b9      	ldr	r1, [r7, #8]
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f000 ff2c 	bl	800cdde <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800bf86:	4603      	mov	r3, r0
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800bf98:	1d3b      	adds	r3, r7, #4
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 ff37 	bl	800ce0e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800bfb4:	1d3b      	adds	r3, r7, #4
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7f6 fca9 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 ff23 	bl	800ce24 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff ffda 	bl	800bfac <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800bff8:	4602      	mov	r2, r0
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	1a9b      	subs	r3, r3, r2
 800bffe:	109b      	asrs	r3, r3, #2
 800c000:	461a      	mov	r2, r3
 800c002:	1d3b      	adds	r3, r7, #4
 800c004:	4611      	mov	r1, r2
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff fd24 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c00c:	4603      	mov	r3, r0
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c016:	b580      	push	{r7, lr}
 800c018:	b082      	sub	sp, #8
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c020:	e00f      	b.n	800c042 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 800c022:	1d3b      	adds	r3, r7, #4
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fd3d 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c02a:	4603      	mov	r3, r0
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7f6 fd1d 	bl	8002a6c <_ZSt11__addressofIfEPT_RS0_>
 800c032:	4603      	mov	r3, r0
 800c034:	4618      	mov	r0, r3
 800c036:	f7f6 fd24 	bl	8002a82 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800c03a:	1d3b      	adds	r3, r7, #4
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fd21 	bl	800ba84 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800c042:	463a      	mov	r2, r7
 800c044:	1d3b      	adds	r3, r7, #4
 800c046:	4611      	mov	r1, r2
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fd feb1 	bl	8009db0 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800c04e:	4603      	mov	r3, r0
 800c050:	f083 0301 	eor.w	r3, r3, #1
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e3      	bne.n	800c022 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xc>
	}
 800c05a:	bf00      	nop
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
 800c06e:	bf00      	nop
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
 800c080:	60f8      	str	r0, [r7, #12]
 800c082:	60b9      	str	r1, [r7, #8]
 800c084:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800c086:	f7f5 fcbf 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d006      	beq.n	800c09e <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	68b9      	ldr	r1, [r7, #8]
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f000 fee2 	bl	800ce5e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 800c09a:	4603      	mov	r3, r0
 800c09c:	e006      	b.n	800c0ac <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 fefe 	bl	800cea4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	bf00      	nop
    }
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	68b9      	ldr	r1, [r7, #8]
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7fd f9ec 	bl	80094a2 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c0de:	e009      	b.n	800c0f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 ff0e 	bl	800cf02 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 ff15 	bl	800cf18 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3318      	adds	r3, #24
 800c0f2:	607b      	str	r3, [r7, #4]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d1f1      	bne.n	800c0e0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 800c0fc:	bf00      	nop
 800c0fe:	bf00      	nop
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800c106:	b580      	push	{r7, lr}
 800c108:	b084      	sub	sp, #16
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	60f8      	str	r0, [r7, #12]
 800c10e:	60b9      	str	r1, [r7, #8]
 800c110:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	68b9      	ldr	r1, [r7, #8]
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f000 ff09 	bl	800cf2e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800c11c:	4603      	mov	r3, r0
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c126:	b580      	push	{r7, lr}
 800c128:	b082      	sub	sp, #8
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c130:	e009      	b.n	800c146 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fc1c 	bl	800c970 <_ZSt11__addressofIcEPT_RS0_>
 800c138:	4603      	mov	r3, r0
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 ff0f 	bl	800cf5e <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3301      	adds	r3, #1
 800c144:	607b      	str	r3, [r7, #4]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d1f1      	bne.n	800c132 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 800c14e:	bf00      	nop
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800c16e:	b590      	push	{r4, r7, lr}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800c178:	6838      	ldr	r0, [r7, #0]
 800c17a:	f000 fefb 	bl	800cf74 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800c17e:	4603      	mov	r3, r0
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f010 ff18 	bl	801cfb8 <_ZNSaIcEC1ERKS_>
 800c188:	687c      	ldr	r4, [r7, #4]
 800c18a:	6838      	ldr	r0, [r7, #0]
 800c18c:	f000 fef2 	bl	800cf74 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800c190:	4603      	mov	r3, r0
 800c192:	4619      	mov	r1, r3
 800c194:	4620      	mov	r0, r4
 800c196:	f000 fef8 	bl	800cf8a <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4618      	mov	r0, r3
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd90      	pop	{r4, r7, pc}

0800c1a4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	601a      	str	r2, [r3, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c1c4:	b590      	push	{r4, r7, lr}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 fefd 	bl	800cfd0 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f7fd fcfb 	bl	8009bd4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	1ae2      	subs	r2, r4, r3
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	bf34      	ite	cc
 800c1e8:	2301      	movcc	r3, #1
 800c1ea:	2300      	movcs	r3, #0
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d002      	beq.n	800c1f8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f010 fee8 	bl	801cfc8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f7fd fceb 	bl	8009bd4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800c1fe:	4604      	mov	r4, r0
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7fd fce7 	bl	8009bd4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800c206:	4603      	mov	r3, r0
 800c208:	613b      	str	r3, [r7, #16]
 800c20a:	f107 0208 	add.w	r2, r7, #8
 800c20e:	f107 0310 	add.w	r3, r7, #16
 800c212:	4611      	mov	r1, r2
 800c214:	4618      	mov	r0, r3
 800c216:	f7f6 fbca 	bl	80029ae <_ZSt3maxIjERKT_S2_S2_>
 800c21a:	4603      	mov	r3, r0
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4423      	add	r3, r4
 800c220:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7fd fcd6 	bl	8009bd4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800c228:	4602      	mov	r2, r0
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d306      	bcc.n	800c23e <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f000 fecd 	bl	800cfd0 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800c236:	4602      	mov	r2, r0
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d904      	bls.n	800c248 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f000 fec6 	bl	800cfd0 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800c244:	4603      	mov	r3, r0
 800c246:	e000      	b.n	800c24a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800c248:	697b      	ldr	r3, [r7, #20]
      }
 800c24a:	4618      	mov	r0, r3
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd90      	pop	{r4, r7, pc}

0800c252 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c252:	b580      	push	{r7, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	f107 030c 	add.w	r3, r7, #12
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff ff9e 	bl	800c1a4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
	...

0800c274 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c274:	b590      	push	{r4, r7, lr}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f83a 	bl	800c2f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c284:	4603      	mov	r3, r0
 800c286:	681c      	ldr	r4, [r3, #0]
 800c288:	6838      	ldr	r0, [r7, #0]
 800c28a:	f000 f835 	bl	800c2f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c28e:	4603      	mov	r3, r0
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	1ae3      	subs	r3, r4, r3
 800c294:	10db      	asrs	r3, r3, #3
 800c296:	4a03      	ldr	r2, [pc, #12]	; (800c2a4 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800c298:	fb02 f303 	mul.w	r3, r2, r3
 800c29c:	4618      	mov	r0, r3
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd90      	pop	{r4, r7, pc}
 800c2a4:	aaaaaaab 	.word	0xaaaaaaab

0800c2a8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d006      	beq.n	800c2c6 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 fe98 	bl	800cff2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	e000      	b.n	800c2c8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 800c2c6:	2300      	movs	r3, #0
      }
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af02      	add	r7, sp, #8
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c2de:	f88d 4000 	strb.w	r4, [sp]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 fea5 	bl	800d038 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c2ee:	4603      	mov	r3, r0
      }
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd90      	pop	{r4, r7, pc}

0800c2f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4618      	mov	r0, r3
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800c318:	6838      	ldr	r0, [r7, #0]
 800c31a:	f000 fe9f 	bl	800d05c <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 800c31e:	bf00      	nop
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6819      	ldr	r1, [r3, #0]
 800c334:	683a      	ldr	r2, [r7, #0]
 800c336:	4613      	mov	r3, r2
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	4413      	add	r3, r2
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	425b      	negs	r3, r3
 800c340:	440b      	add	r3, r1
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	f107 020c 	add.w	r2, r7, #12
 800c348:	f107 0308 	add.w	r3, r7, #8
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7ff ff28 	bl	800c1a4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c376:	b580      	push	{r7, lr}
 800c378:	b082      	sub	sp, #8
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c380:	e009      	b.n	800c396 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fe87 	bl	800d096 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800c388:	4603      	mov	r3, r0
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 fe8e 	bl	800d0ac <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	3318      	adds	r3, #24
 800c394:	607b      	str	r3, [r7, #4]
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d1f1      	bne.n	800c382 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800c3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800c3b2:	687c      	ldr	r4, [r7, #4]
 800c3b4:	6838      	ldr	r0, [r7, #0]
 800c3b6:	f7fd fc0d 	bl	8009bd4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fe8d 	bl	800d0de <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 fe78 	bl	800d0c2 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 800c3d2:	f107 030c 	add.w	r3, r7, #12
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	4629      	mov	r1, r5
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 fe8a 	bl	800d0f4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 800c3e0:	f107 030c 	add.w	r3, r7, #12
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fd f97c 	bl	80096e2 <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c3ea:	6838      	ldr	r0, [r7, #0]
 800c3ec:	f000 fe96 	bl	800d11c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	6838      	ldr	r0, [r7, #0]
 800c3f4:	f000 fea2 	bl	800d13c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4618      	mov	r0, r3
 800c402:	f7fd fe66 	bl	800a0d2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c406:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c408:	4622      	mov	r2, r4
 800c40a:	4631      	mov	r1, r6
 800c40c:	4628      	mov	r0, r5
 800c40e:	f000 fea6 	bl	800d15e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800c412:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	605a      	str	r2, [r3, #4]
      }
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c422 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c422:	b480      	push	{r7}
 800c424:	b083      	sub	sp, #12
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4618      	mov	r0, r3
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c442:	b590      	push	{r4, r7, lr}
 800c444:	b087      	sub	sp, #28
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f000 fe96 	bl	800d180 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800c454:	4604      	mov	r4, r0
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 fea4 	bl	800d1a4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800c45c:	4603      	mov	r3, r0
 800c45e:	1ae2      	subs	r2, r4, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	429a      	cmp	r2, r3
 800c464:	bf34      	ite	cc
 800c466:	2301      	movcc	r3, #1
 800c468:	2300      	movcs	r3, #0
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f010 fda9 	bl	801cfc8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 fe94 	bl	800d1a4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800c47c:	4604      	mov	r4, r0
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 fe90 	bl	800d1a4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800c484:	4603      	mov	r3, r0
 800c486:	613b      	str	r3, [r7, #16]
 800c488:	f107 0208 	add.w	r2, r7, #8
 800c48c:	f107 0310 	add.w	r3, r7, #16
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f7f6 fa8b 	bl	80029ae <_ZSt3maxIjERKT_S2_S2_>
 800c498:	4603      	mov	r3, r0
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4423      	add	r3, r4
 800c49e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 fe7f 	bl	800d1a4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d306      	bcc.n	800c4bc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f000 fe66 	bl	800d180 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d904      	bls.n	800c4c6 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f000 fe5f 	bl	800d180 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	e000      	b.n	800c4c8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800c4c6:	697b      	ldr	r3, [r7, #20]
      }
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	371c      	adds	r7, #28
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd90      	pop	{r4, r7, pc}

0800c4d0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	f107 030c 	add.w	r3, r7, #12
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff ff9e 	bl	800c422 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c4f0:	b590      	push	{r4, r7, lr}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f826 	bl	800c54c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c500:	4603      	mov	r3, r0
 800c502:	681c      	ldr	r4, [r3, #0]
 800c504:	6838      	ldr	r0, [r7, #0]
 800c506:	f000 f821 	bl	800c54c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c50a:	4603      	mov	r3, r0
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	1ae3      	subs	r3, r4, r3
 800c510:	10db      	asrs	r3, r3, #3
 800c512:	4a03      	ldr	r2, [pc, #12]	; (800c520 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800c514:	fb02 f303 	mul.w	r3, r2, r3
 800c518:	4618      	mov	r0, r3
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd90      	pop	{r4, r7, pc}
 800c520:	aaaaaaab 	.word	0xaaaaaaab

0800c524 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d006      	beq.n	800c542 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	4618      	mov	r0, r3
 800c53a:	f000 fe49 	bl	800d1d0 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 800c53e:	4603      	mov	r3, r0
 800c540:	e000      	b.n	800c544 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800c542:	2300      	movs	r3, #0
      }
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4618      	mov	r0, r3
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800c562:	b590      	push	{r4, r7, lr}
 800c564:	b085      	sub	sp, #20
 800c566:	af00      	add	r7, sp, #0
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	607a      	str	r2, [r7, #4]
 800c56e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 fe50 	bl	800d216 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800c576:	4604      	mov	r4, r0
 800c578:	68b8      	ldr	r0, [r7, #8]
 800c57a:	f000 fe4c 	bl	800d216 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800c57e:	4601      	mov	r1, r0
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	4620      	mov	r0, r4
 800c586:	f000 fe51 	bl	800d22c <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800c58a:	4603      	mov	r3, r0
    }
 800c58c:	4618      	mov	r0, r3
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	bd90      	pop	{r4, r7, pc}

0800c594 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6819      	ldr	r1, [r3, #0]
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	4413      	add	r3, r2
 800c5aa:	00db      	lsls	r3, r3, #3
 800c5ac:	425b      	negs	r3, r3
 800c5ae:	440b      	add	r3, r1
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	f107 020c 	add.w	r2, r7, #12
 800c5b6:	f107 0308 	add.w	r3, r7, #8
 800c5ba:	4611      	mov	r1, r2
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff ff30 	bl	800c422 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800c5ec:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800c604:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c608:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7ff ffea 	bl	800c5e4 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800c610:	4603      	mov	r3, r0
 800c612:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800c614:	f107 0208 	add.w	r2, r7, #8
 800c618:	f107 030c 	add.w	r3, r7, #12
 800c61c:	4611      	mov	r1, r2
 800c61e:	4618      	mov	r0, r3
 800c620:	f7f6 fa88 	bl	8002b34 <_ZSt3minIjERKT_S2_S2_>
 800c624:	4603      	mov	r3, r0
 800c626:	681b      	ldr	r3, [r3, #0]
      }
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800c63c:	2301      	movs	r3, #1
 800c63e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	68b9      	ldr	r1, [r7, #8]
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f000 fe0d 	bl	800d264 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 800c64a:	4603      	mov	r3, r0
    }
 800c64c:	4618      	mov	r0, r3
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	601a      	str	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	605a      	str	r2, [r3, #4]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	609a      	str	r2, [r3, #8]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	60da      	str	r2, [r3, #12]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4618      	mov	r0, r3
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800c682:	b580      	push	{r7, lr}
 800c684:	b084      	sub	sp, #16
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	6039      	str	r1, [r7, #0]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800c694:	f7f5 f9b8 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d006      	beq.n	800c6ac <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f010 fc76 	bl	801cf94 <_Znwj>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	e006      	b.n	800c6ba <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	68b9      	ldr	r1, [r7, #8]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f001 f8cc 	bl	800d84e <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	bf00      	nop
      { return __a.allocate(__n); }
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fdce 	bl	800d284 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800c6fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c6fe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7f6 f9c9 	bl	8002a98 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800c706:	4603      	mov	r3, r0
 800c708:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800c70a:	f107 0208 	add.w	r2, r7, #8
 800c70e:	f107 030c 	add.w	r3, r7, #12
 800c712:	4611      	mov	r1, r2
 800c714:	4618      	mov	r0, r3
 800c716:	f7f6 fa0d 	bl	8002b34 <_ZSt3minIjERKT_S2_S2_>
 800c71a:	4603      	mov	r3, r0
 800c71c:	681b      	ldr	r3, [r3, #0]
      }
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800c726:	b590      	push	{r4, r7, lr}
 800c728:	b085      	sub	sp, #20
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	60f8      	str	r0, [r7, #12]
 800c72e:	60b9      	str	r1, [r7, #8]
 800c730:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 fdc0 	bl	800d2b8 <_ZSt12__miter_baseIPPfET_S2_>
 800c738:	4604      	mov	r4, r0
 800c73a:	68b8      	ldr	r0, [r7, #8]
 800c73c:	f000 fdbc 	bl	800d2b8 <_ZSt12__miter_baseIPPfET_S2_>
 800c740:	4603      	mov	r3, r0
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	4619      	mov	r1, r3
 800c746:	4620      	mov	r0, r4
 800c748:	f000 fdc1 	bl	800d2ce <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 800c74c:	4603      	mov	r3, r0
    }
 800c74e:	4618      	mov	r0, r3
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	bd90      	pop	{r4, r7, pc}

0800c756 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800c756:	b590      	push	{r4, r7, lr}
 800c758:	b085      	sub	sp, #20
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	60f8      	str	r0, [r7, #12]
 800c75e:	60b9      	str	r1, [r7, #8]
 800c760:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f000 fda8 	bl	800d2b8 <_ZSt12__miter_baseIPPfET_S2_>
 800c768:	4604      	mov	r4, r0
 800c76a:	68b8      	ldr	r0, [r7, #8]
 800c76c:	f000 fda4 	bl	800d2b8 <_ZSt12__miter_baseIPPfET_S2_>
 800c770:	4603      	mov	r3, r0
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	4619      	mov	r1, r3
 800c776:	4620      	mov	r0, r4
 800c778:	f000 fdcc 	bl	800d314 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 800c77c:	4603      	mov	r3, r0
    }
 800c77e:	4618      	mov	r0, r3
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	bd90      	pop	{r4, r7, pc}

0800c786 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800c786:	b590      	push	{r4, r7, lr}
 800c788:	b08b      	sub	sp, #44	; 0x2c
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	60f8      	str	r0, [r7, #12]
 800c78e:	60b9      	str	r1, [r7, #8]
 800c790:	4613      	mov	r3, r2
 800c792:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	695b      	ldr	r3, [r3, #20]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	109b      	asrs	r3, r3, #2
 800c7a0:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800c7a2:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	6a3a      	ldr	r2, [r7, #32]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	685a      	ldr	r2, [r3, #4]
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d92d      	bls.n	800c814 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	1acb      	subs	r3, r1, r3
 800c7c4:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800c7c6:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800c7c8:	79fb      	ldrb	r3, [r7, #7]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	e000      	b.n	800c7d6 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800c7d8:	4413      	add	r3, r2
 800c7da:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d209      	bcs.n	800c7fa <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	f7ff ff97 	bl	800c726 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 800c7f8:	e048      	b.n	800c88c <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800c802:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800c808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c80a:	4413      	add	r3, r2
 800c80c:	461a      	mov	r2, r3
 800c80e:	f7ff ffa2 	bl	800c756 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 800c812:	e03b      	b.n	800c88c <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3304      	adds	r3, #4
 800c81c:	f107 0208 	add.w	r2, r7, #8
 800c820:	4611      	mov	r1, r2
 800c822:	4618      	mov	r0, r3
 800c824:	f7f6 f8c3 	bl	80029ae <_ZSt3maxIjERKT_S2_S2_>
 800c828:	4603      	mov	r3, r0
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800c82e:	3302      	adds	r3, #2
 800c830:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	69b9      	ldr	r1, [r7, #24]
 800c836:	4618      	mov	r0, r3
 800c838:	f7fe fe14 	bl	800b464 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800c83c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800c83e:	69ba      	ldr	r2, [r7, #24]
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	085b      	lsrs	r3, r3, #1
 800c846:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	e000      	b.n	800c856 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 800c854:	2300      	movs	r3, #0
 800c856:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	4413      	add	r3, r2
 800c85c:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800c866:	3304      	adds	r3, #4
 800c868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86a:	4619      	mov	r1, r3
 800c86c:	f7ff ff5b 	bl	800c726 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6819      	ldr	r1, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f7fd fe88 	bl	800a590 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	69ba      	ldr	r2, [r7, #24]
 800c88a:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3308      	adds	r3, #8
 800c890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c892:	4618      	mov	r0, r3
 800c894:	f7fe fe1e 	bl	800b4d4 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f103 0018 	add.w	r0, r3, #24
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8aa:	4413      	add	r3, r2
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	f7fe fe11 	bl	800b4d4 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 800c8b2:	bf00      	nop
 800c8b4:	372c      	adds	r7, #44	; 0x2c
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd90      	pop	{r4, r7, pc}

0800c8ba <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fd5f 	bl	800d388 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 800c8d0:	6838      	ldr	r0, [r7, #0]
 800c8d2:	f000 fd59 	bl	800d388 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	781a      	ldrb	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c8de:	f107 030f 	add.w	r3, r7, #15
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fd50 	bl	800d388 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	781a      	ldrb	r2, [r3, #0]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	701a      	strb	r2, [r3, #0]
    }
 800c8f0:	bf00      	nop
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800c8f8:	b480      	push	{r7}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	617b      	str	r3, [r7, #20]
 800c90c:	e00c      	b.n	800c928 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	781a      	ldrb	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	701a      	strb	r2, [r3, #0]
	      ++__first;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3301      	adds	r3, #1
 800c91a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3301      	adds	r3, #1
 800c920:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	3b01      	subs	r3, #1
 800c926:	617b      	str	r3, [r7, #20]
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	dcef      	bgt.n	800c90e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 800c92e:	687b      	ldr	r3, [r7, #4]
	}
 800c930:	4618      	mov	r0, r3
 800c932:	371c      	adds	r7, #28
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d005      	beq.n	800c962 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	461a      	mov	r2, r3
 800c95a:	68f9      	ldr	r1, [r7, #12]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f013 fe16 	bl	802058e <memmove>
	  return __result + _Num;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	4413      	add	r3, r2
	}
 800c968:	4618      	mov	r0, r3
 800c96a:	3718      	adds	r7, #24
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 800c986:	b480      	push	{r7}
 800c988:	b085      	sub	sp, #20
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d009      	beq.n	800c9b2 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d201      	bcs.n	800c9ae <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 800c9aa:	23ff      	movs	r3, #255	; 0xff
 800c9ac:	e002      	b.n	800c9b4 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e000      	b.n	800c9b4 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800c9b2:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3714      	adds	r7, #20
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c9c0:	b590      	push	{r4, r7, lr}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7f5 ff9f 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	6838      	ldr	r0, [r7, #0]
 800c9d4:	f7f5 ff9b 	bl	800290e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	461a      	mov	r2, r3
 800c9dc:	4621      	mov	r1, r4
 800c9de:	4804      	ldr	r0, [pc, #16]	; (800c9f0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 800c9e0:	f7ff ffd1 	bl	800c986 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd90      	pop	{r4, r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	08021d04 	.word	0x08021d04

0800c9f4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800c9f4:	b590      	push	{r4, r7, lr}
 800c9f6:	b087      	sub	sp, #28
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800ca02:	463b      	mov	r3, r7
 800ca04:	461a      	mov	r2, r3
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 fcf6 	bl	800d3fa <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	613b      	str	r3, [r7, #16]
 800ca12:	e013      	b.n	800ca3c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 800ca14:	463b      	mov	r3, r7
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	6939      	ldr	r1, [r7, #16]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff f84e 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d005      	beq.n	800ca32 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800ca26:	463b      	mov	r3, r7
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	68b9      	ldr	r1, [r7, #8]
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 fd3a 	bl	800d4a6 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800ca32:	f107 0310 	add.w	r3, r7, #16
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff f824 	bl	800ba84 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800ca3c:	1d3a      	adds	r2, r7, #4
 800ca3e:	f107 0310 	add.w	r3, r7, #16
 800ca42:	4611      	mov	r1, r2
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7ff ffbb 	bl	800c9c0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	f107 0314 	add.w	r3, r7, #20
 800ca50:	2100      	movs	r1, #0
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7f6 fd40 	bl	80034d8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800ca58:	7d39      	ldrb	r1, [r7, #20]
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f7f6 fd48 	bl	80034f0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1d6      	bne.n	800ca14 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 800ca66:	bf00      	nop
 800ca68:	bf00      	nop
 800ca6a:	371c      	adds	r7, #28
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd90      	pop	{r4, r7, pc}

0800ca70 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
	--_M_current;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	1f1a      	subs	r2, r3, #4
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	601a      	str	r2, [r3, #0]
	return *this;
 800ca82:	687b      	ldr	r3, [r7, #4]
      }
 800ca84:	4618      	mov	r0, r3
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800ca9c:	e00a      	b.n	800cab4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 800ca9e:	f107 0308 	add.w	r3, r7, #8
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7ff ffe4 	bl	800ca70 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	68b9      	ldr	r1, [r7, #8]
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f000 fcf9 	bl	800d4a6 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 800cab4:	f107 020c 	add.w	r2, r7, #12
 800cab8:	f107 0308 	add.w	r3, r7, #8
 800cabc:	4611      	mov	r1, r2
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7f5 fee8 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	bfcc      	ite	gt
 800caca:	2301      	movgt	r3, #1
 800cacc:	2300      	movle	r3, #0
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1e4      	bne.n	800ca9e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800cade:	b580      	push	{r7, lr}
 800cae0:	b084      	sub	sp, #16
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	425b      	negs	r3, r3
 800caf2:	4413      	add	r3, r2
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	f107 020c 	add.w	r2, r7, #12
 800cafa:	f107 0308 	add.w	r3, r7, #8
 800cafe:	4611      	mov	r1, r2
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7f5 fe60 	bl	80027c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	68b9      	ldr	r1, [r7, #8]
 800cb22:	f107 0018 	add.w	r0, r7, #24
 800cb26:	f7fe ffc9 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d020      	beq.n	800cb72 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	6879      	ldr	r1, [r7, #4]
 800cb34:	f107 0018 	add.w	r0, r7, #24
 800cb38:	f7fe ffc0 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d004      	beq.n	800cb4c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f000 fcee 	bl	800d526 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800cb4a:	e032      	b.n	800cbb2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	f107 0018 	add.w	r0, r7, #24
 800cb54:	f7fe ffb2 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d004      	beq.n	800cb68 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f000 fce0 	bl	800d526 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800cb66:	e024      	b.n	800cbb2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800cb68:	68b9      	ldr	r1, [r7, #8]
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f000 fcdb 	bl	800d526 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800cb70:	e01f      	b.n	800cbb2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	68b9      	ldr	r1, [r7, #8]
 800cb76:	f107 0018 	add.w	r0, r7, #24
 800cb7a:	f7fe ff9f 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d004      	beq.n	800cb8e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f000 fccd 	bl	800d526 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800cb8c:	e011      	b.n	800cbb2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	6879      	ldr	r1, [r7, #4]
 800cb92:	f107 0018 	add.w	r0, r7, #24
 800cb96:	f7fe ff91 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d004      	beq.n	800cbaa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 fcbf 	bl	800d526 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800cba8:	e003      	b.n	800cbb2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f000 fcba 	bl	800d526 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800cbb2:	bf00      	nop
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800cbba:	b590      	push	{r4, r7, lr}
 800cbbc:	b087      	sub	sp, #28
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	607a      	str	r2, [r7, #4]
 800cbc6:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800cbc8:	e004      	b.n	800cbd4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 800cbca:	f107 030c 	add.w	r3, r7, #12
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe ff58 	bl	800ba84 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800cbd4:	463b      	mov	r3, r7
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	68f9      	ldr	r1, [r7, #12]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe ff6e 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1f1      	bne.n	800cbca <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 800cbe6:	f107 0308 	add.w	r3, r7, #8
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff ff40 	bl	800ca70 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800cbf0:	e004      	b.n	800cbfc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff ff3a 	bl	800ca70 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800cbfc:	463b      	mov	r3, r7
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	6879      	ldr	r1, [r7, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe ff5a 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1f1      	bne.n	800cbf2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 800cc0e:	f107 0208 	add.w	r2, r7, #8
 800cc12:	f107 030c 	add.w	r3, r7, #12
 800cc16:	4611      	mov	r1, r2
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7ff fed1 	bl	800c9c0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800cc1e:	4604      	mov	r4, r0
 800cc20:	f107 0314 	add.w	r3, r7, #20
 800cc24:	2100      	movs	r1, #0
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7f6 fc56 	bl	80034d8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800cc2c:	7d39      	ldrb	r1, [r7, #20]
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f7f6 fc5e 	bl	80034f0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800cc34:	4603      	mov	r3, r0
 800cc36:	f083 0301 	eor.w	r3, r3, #1
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	e009      	b.n	800cc58 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f000 fc6d 	bl	800d526 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 800cc4c:	f107 030c 	add.w	r3, r7, #12
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7fe ff17 	bl	800ba84 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800cc56:	e7bd      	b.n	800cbd4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 800cc58:	4618      	mov	r0, r3
 800cc5a:	371c      	adds	r7, #28
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd90      	pop	{r4, r7, pc}

0800cc60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	370c      	adds	r7, #12
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800cc76:	b5b0      	push	{r4, r5, r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	60f8      	str	r0, [r7, #12]
 800cc7e:	60b9      	str	r1, [r7, #8]
 800cc80:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f7ff f992 	bl	800bfac <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800cc88:	4604      	mov	r4, r0
 800cc8a:	68b8      	ldr	r0, [r7, #8]
 800cc8c:	f7ff f98e 	bl	800bfac <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800cc90:	4605      	mov	r5, r0
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f7ff f98a 	bl	800bfac <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f000 fc58 	bl	800d554 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800cca4:	4603      	mov	r3, r0
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff f99d 	bl	800bfe8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800ccae:	4603      	mov	r3, r0
    }
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bdb0      	pop	{r4, r5, r7, pc}

0800ccb8 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	ed2d 8b02 	vpush	{d8}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	ed93 8a00 	vldr	s16, [r3]
 800ccce:	1d3b      	adds	r3, r7, #4
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fe fee7 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	edd3 7a00 	vldr	s15, [r3]
 800ccdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce4:	bf4c      	ite	mi
 800cce6:	2301      	movmi	r3, #1
 800cce8:	2300      	movpl	r3, #0
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	ecbd 8b02 	vpop	{d8}
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800ccf8:	b590      	push	{r4, r7, lr}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800cd02:	1d3b      	adds	r3, r7, #4
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fe fecd 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fc ff07 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cd12:	4603      	mov	r3, r0
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	60bb      	str	r3, [r7, #8]
      --__next;
 800cd1c:	f107 0308 	add.w	r3, r7, #8
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7ff fea5 	bl	800ca70 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800cd26:	e017      	b.n	800cd58 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800cd28:	f107 0308 	add.w	r3, r7, #8
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe feb9 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800cd32:	4603      	mov	r3, r0
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fc fef3 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	681c      	ldr	r4, [r3, #0]
 800cd3e:	1d3b      	adds	r3, r7, #4
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe feaf 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800cd46:	4603      	mov	r3, r0
 800cd48:	601c      	str	r4, [r3, #0]
	  __last = __next;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	607b      	str	r3, [r7, #4]
	  --__next;
 800cd4e:	f107 0308 	add.w	r3, r7, #8
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff fe8c 	bl	800ca70 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800cd58:	f107 010c 	add.w	r1, r7, #12
 800cd5c:	463b      	mov	r3, r7
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7ff ffa9 	bl	800ccb8 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1dd      	bne.n	800cd28 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800cd6c:	f107 030c 	add.w	r3, r7, #12
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fc fed5 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cd76:	4603      	mov	r3, r0
 800cd78:	681c      	ldr	r4, [r3, #0]
 800cd7a:	1d3b      	adds	r3, r7, #4
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7fe fe91 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800cd82:	4603      	mov	r3, r0
 800cd84:	601c      	str	r4, [r3, #0]
    }
 800cd86:	bf00      	nop
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd90      	pop	{r4, r7, pc}

0800cd8e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800cd98:	463b      	mov	r3, r7
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe ff5c 	bl	800bc58 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b082      	sub	sp, #8
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800cdb4:	463b      	mov	r3, r7
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff f80d 	bl	800bdd6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800cdde:	b590      	push	{r4, r7, lr}
 800cde0:	b085      	sub	sp, #20
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	60f8      	str	r0, [r7, #12]
 800cde6:	60b9      	str	r1, [r7, #8]
 800cde8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f7fd ff10 	bl	800ac10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	68b8      	ldr	r0, [r7, #8]
 800cdf4:	f7fd ff0c 	bl	800ac10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f000 fbb8 	bl	800d574 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 800ce04:	4603      	mov	r3, r0
    }
 800ce06:	4618      	mov	r0, r3
 800ce08:	3714      	adds	r7, #20
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd90      	pop	{r4, r7, pc}

0800ce0e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ce0e:	b480      	push	{r7}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800ce30:	f7f4 fdea 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d006      	beq.n	800ce48 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	68b9      	ldr	r1, [r7, #8]
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f000 fbbb 	bl	800d5ba <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 800ce44:	4603      	mov	r3, r0
 800ce46:	e006      	b.n	800ce56 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	68b9      	ldr	r1, [r7, #8]
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f000 f829 	bl	800cea4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800ce52:	4603      	mov	r3, r0
 800ce54:	bf00      	nop
    }
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800ce5e:	b480      	push	{r7}
 800ce60:	b087      	sub	sp, #28
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	60b9      	str	r1, [r7, #8]
 800ce68:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	109b      	asrs	r3, r3, #2
 800ce72:	617b      	str	r3, [r7, #20]
 800ce74:	e00c      	b.n	800ce90 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x32>
	      *__result = *__first;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	601a      	str	r2, [r3, #0]
	      ++__first;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3304      	adds	r3, #4
 800ce82:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3304      	adds	r3, #4
 800ce88:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	617b      	str	r3, [r7, #20]
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	dcef      	bgt.n	800ce76 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800ce96:	687b      	ldr	r3, [r7, #4]
	}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	371c      	adds	r7, #28
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	109b      	asrs	r3, r3, #2
 800ceb8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d006      	beq.n	800cece <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	461a      	mov	r2, r3
 800cec6:	68f9      	ldr	r1, [r7, #12]
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f013 fb60 	bl	802058e <memmove>
	  return __result + _Num;
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	4413      	add	r3, r2
	}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3718      	adds	r7, #24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800cede:	b580      	push	{r7, lr}
 800cee0:	b084      	sub	sp, #16
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	4613      	mov	r3, r2
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	4413      	add	r3, r2
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	4619      	mov	r1, r3
 800cef6:	68b8      	ldr	r0, [r7, #8]
 800cef8:	f010 f84a 	bl	801cf90 <_ZdlPvj>
      }
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf02:	b480      	push	{r7}
 800cf04:	b083      	sub	sp, #12
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f89b 	bl	800d05c <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 800cf26:	bf00      	nop
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800cf2e:	b590      	push	{r4, r7, lr}
 800cf30:	b085      	sub	sp, #20
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	60f8      	str	r0, [r7, #12]
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f000 fb60 	bl	800d600 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800cf40:	4604      	mov	r4, r0
 800cf42:	68b8      	ldr	r0, [r7, #8]
 800cf44:	f000 fb5c 	bl	800d600 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f000 fb61 	bl	800d616 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 800cf54:	4603      	mov	r3, r0
    }
 800cf56:	4618      	mov	r0, r3
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd90      	pop	{r4, r7, pc}

0800cf5e <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa04 	bl	800d374 <_ZSt10destroy_atIcEvPT_>
    }
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800cf8a:	b480      	push	{r7}
 800cf8c:	b083      	sub	sp, #12
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
 800cf92:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	685a      	ldr	r2, [r3, #4]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	609a      	str	r2, [r3, #8]
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	689a      	ldr	r2, [r3, #8]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	605a      	str	r2, [r3, #4]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	601a      	str	r2, [r3, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 f87f 	bl	800d0de <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fb48 	bl	800d678 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	6039      	str	r1, [r7, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800d004:	f7f4 fd00 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d009      	beq.n	800d022 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	4613      	mov	r3, r2
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	4413      	add	r3, r2
 800d016:	00db      	lsls	r3, r3, #3
 800d018:	4618      	mov	r0, r3
 800d01a:	f00f ffbb 	bl	801cf94 <_Znwj>
 800d01e:	4603      	mov	r3, r0
 800d020:	e006      	b.n	800d030 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800d022:	2200      	movs	r2, #0
 800d024:	68b9      	ldr	r1, [r7, #8]
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f000 fd72 	bl	800db10 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 800d02c:	4603      	mov	r3, r0
 800d02e:	bf00      	nop
      { return __a.allocate(__n); }
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
 800d044:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	68b9      	ldr	r1, [r7, #8]
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f000 fb2f 	bl	800d6b0 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800d052:	4603      	mov	r3, r0
      }
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7f7 f972 	bl	800434e <_ZN3jlb4EdgeD1Ev>
    }
 800d06a:	bf00      	nop
 800d06c:	3708      	adds	r7, #8
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	60b9      	str	r1, [r7, #8]
 800d07c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	4613      	mov	r3, r2
 800d082:	005b      	lsls	r3, r3, #1
 800d084:	4413      	add	r3, r2
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	4619      	mov	r1, r3
 800d08a:	68b8      	ldr	r0, [r7, #8]
 800d08c:	f00f ff80 	bl	801cf90 <_ZdlPvj>
      }
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d096:	b480      	push	{r7}
 800d098:	b083      	sub	sp, #12
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f8ca 	bl	800d24e <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b082      	sub	sp, #8
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
 800d0ca:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 fb0a 	bl	800d6ea <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d0de:	b480      	push	{r7}
 800d0e0:	b083      	sub	sp, #12
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6879      	ldr	r1, [r7, #4]
 800d104:	4618      	mov	r0, r3
 800d106:	f000 fafd 	bl	800d704 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 fb0b 	bl	800d728 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	4618      	mov	r0, r3
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	f107 030c 	add.w	r3, r7, #12
 800d12a:	4611      	mov	r1, r2
 800d12c:	4618      	mov	r0, r3
 800d12e:	f000 fb19 	bl	800d764 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	1d1a      	adds	r2, r3, #4
 800d148:	f107 030c 	add.w	r3, r7, #12
 800d14c:	4611      	mov	r1, r2
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 fb08 	bl	800d764 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d15e:	b580      	push	{r7, lr}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	60f8      	str	r0, [r7, #12]
 800d166:	60b9      	str	r1, [r7, #8]
 800d168:	607a      	str	r2, [r7, #4]
 800d16a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f000 fb07 	bl	800d784 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800d176:	4603      	mov	r3, r0
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 fb36 	bl	800d7fc <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d190:	4603      	mov	r3, r0
 800d192:	4618      	mov	r0, r3
 800d194:	f000 fb16 	bl	800d7c4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 800d198:	4603      	mov	r3, r0
 800d19a:	4618      	mov	r0, r3
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
	...

0800d1a4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	10db      	asrs	r3, r3, #3
 800d1b8:	4a04      	ldr	r2, [pc, #16]	; (800d1cc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 800d1ba:	fb02 f303 	mul.w	r3, r2, r3
 800d1be:	4618      	mov	r0, r3
 800d1c0:	370c      	adds	r7, #12
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	aaaaaaab 	.word	0xaaaaaaab

0800d1d0 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	60fb      	str	r3, [r7, #12]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800d1e2:	f7f4 fc11 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d009      	beq.n	800d200 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f00f fecc 	bl	801cf94 <_Znwj>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	e006      	b.n	800d20e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800d200:	2200      	movs	r2, #0
 800d202:	68b9      	ldr	r1, [r7, #8]
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f000 fd4f 	bl	800dca8 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 800d20a:	4603      	mov	r3, r0
 800d20c:	bf00      	nop
      { return __a.allocate(__n); }
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800d216:	b480      	push	{r7}
 800d218:	b083      	sub	sp, #12
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
 800d238:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	68b9      	ldr	r1, [r7, #8]
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f000 fae7 	bl	800d812 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 800d244:	4603      	mov	r3, r0
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 800d24e:	b580      	push	{r7, lr}
 800d250:	b082      	sub	sp, #8
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f7f7 f86b 	bl	8004332 <_ZN3jlb4NodeD1Ev>
    }
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	68b9      	ldr	r1, [r7, #8]
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f7fb ff4d 	bl	8009114 <_ZSt4copyIPKcPcET0_T_S4_S3_>
 800d27a:	4603      	mov	r3, r0
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4618      	mov	r0, r3
 800d290:	370c      	adds	r7, #12
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	60b9      	str	r1, [r7, #8]
 800d2a4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	68b8      	ldr	r0, [r7, #8]
 800d2ae:	f00f fe6f 	bl	801cf90 <_ZdlPvj>
      }
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d2ce:	b5b0      	push	{r4, r5, r7, lr}
 800d2d0:	b084      	sub	sp, #16
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f000 fae1 	bl	800d8a2 <_ZSt12__niter_baseIPPfET_S2_>
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	68b8      	ldr	r0, [r7, #8]
 800d2e4:	f000 fadd 	bl	800d8a2 <_ZSt12__niter_baseIPPfET_S2_>
 800d2e8:	4605      	mov	r5, r0
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f000 fad8 	bl	800d8a2 <_ZSt12__niter_baseIPPfET_S2_>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f000 fadd 	bl	800d8b8 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800d2fe:	4602      	mov	r2, r0
 800d300:	1d3b      	adds	r3, r7, #4
 800d302:	4611      	mov	r1, r2
 800d304:	4618      	mov	r0, r3
 800d306:	f000 fae7 	bl	800d8d8 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800d30a:	4603      	mov	r3, r0
    }
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bdb0      	pop	{r4, r5, r7, pc}

0800d314 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800d314:	b5b0      	push	{r4, r5, r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f000 fabe 	bl	800d8a2 <_ZSt12__niter_baseIPPfET_S2_>
 800d326:	4604      	mov	r4, r0
 800d328:	68b8      	ldr	r0, [r7, #8]
 800d32a:	f000 faba 	bl	800d8a2 <_ZSt12__niter_baseIPPfET_S2_>
 800d32e:	4605      	mov	r5, r0
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4618      	mov	r0, r3
 800d334:	f000 fab5 	bl	800d8a2 <_ZSt12__niter_baseIPPfET_S2_>
 800d338:	4603      	mov	r3, r0
 800d33a:	461a      	mov	r2, r3
 800d33c:	4629      	mov	r1, r5
 800d33e:	4620      	mov	r0, r4
 800d340:	f000 fad6 	bl	800d8f0 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800d344:	4602      	mov	r2, r0
 800d346:	1d3b      	adds	r3, r7, #4
 800d348:	4611      	mov	r1, r2
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 fac4 	bl	800d8d8 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800d350:	4603      	mov	r3, r0
    }
 800d352:	4618      	mov	r0, r3
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bdb0      	pop	{r4, r5, r7, pc}

0800d35a <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	60f8      	str	r0, [r7, #12]
 800d362:	60b9      	str	r1, [r7, #8]
 800d364:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	68b8      	ldr	r0, [r7, #8]
 800d36a:	f00f fe11 	bl	801cf90 <_ZdlPvj>
      }
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
    }
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4618      	mov	r0, r3
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d39e:	b480      	push	{r7}
 800d3a0:	b083      	sub	sp, #12
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d3a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	370c      	adds	r7, #12
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b084      	sub	sp, #16
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	60f8      	str	r0, [r7, #12]
 800d3be:	60b9      	str	r1, [r7, #8]
 800d3c0:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f7ff ffeb 	bl	800d39e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	bf8c      	ite	hi
 800d3d0:	2301      	movhi	r3, #1
 800d3d2:	2300      	movls	r3, #0
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	bf14      	ite	ne
 800d3da:	2301      	movne	r3, #1
 800d3dc:	2300      	moveq	r3, #0
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 800d3e4:	f00f fdea 	bl	801cfbc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d3e8:	68b8      	ldr	r0, [r7, #8]
 800d3ea:	f00f fdd3 	bl	801cf94 <_Znwj>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	bf00      	nop
      }
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800d3fa:	b590      	push	{r4, r7, lr}
 800d3fc:	b089      	sub	sp, #36	; 0x24
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	60f8      	str	r0, [r7, #12]
 800d402:	60b9      	str	r1, [r7, #8]
 800d404:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800d406:	f107 020c 	add.w	r2, r7, #12
 800d40a:	f107 0308 	add.w	r3, r7, #8
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f7f5 fa3f 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d416:	4603      	mov	r3, r0
 800d418:	2b01      	cmp	r3, #1
 800d41a:	bfd4      	ite	le
 800d41c:	2301      	movle	r3, #1
 800d41e:	2300      	movgt	r3, #0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d139      	bne.n	800d49a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 800d426:	f107 020c 	add.w	r2, r7, #12
 800d42a:	f107 0308 	add.w	r3, r7, #8
 800d42e:	4611      	mov	r1, r2
 800d430:	4618      	mov	r0, r3
 800d432:	f7f5 fa2f 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d436:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	3b02      	subs	r3, #2
 800d43c:	0fda      	lsrs	r2, r3, #31
 800d43e:	4413      	add	r3, r2
 800d440:	105b      	asrs	r3, r3, #1
 800d442:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800d444:	f107 030c 	add.w	r3, r7, #12
 800d448:	69f9      	ldr	r1, [r7, #28]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fb02 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d450:	4603      	mov	r3, r0
 800d452:	617b      	str	r3, [r7, #20]
 800d454:	f107 0314 	add.w	r3, r7, #20
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fe fb23 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d45e:	4603      	mov	r3, r0
 800d460:	4618      	mov	r0, r3
 800d462:	f7fc fb5d 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d466:	4603      	mov	r3, r0
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800d46c:	f107 0310 	add.w	r3, r7, #16
 800d470:	4618      	mov	r0, r3
 800d472:	f7fc fb55 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d476:	4603      	mov	r3, r0
 800d478:	edd3 7a00 	vldr	s15, [r3]
 800d47c:	4623      	mov	r3, r4
 800d47e:	eeb0 0a67 	vmov.f32	s0, s15
 800d482:	69ba      	ldr	r2, [r7, #24]
 800d484:	69f9      	ldr	r1, [r7, #28]
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f000 fa42 	bl	800d910 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d005      	beq.n	800d49e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	3b01      	subs	r3, #1
 800d496:	61fb      	str	r3, [r7, #28]
      while (true)
 800d498:	e7d4      	b.n	800d444 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 800d49a:	bf00      	nop
 800d49c:	e000      	b.n	800d4a0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 800d49e:	bf00      	nop
    }
 800d4a0:	3724      	adds	r7, #36	; 0x24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd90      	pop	{r4, r7, pc}

0800d4a6 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800d4a6:	b5b0      	push	{r4, r5, r7, lr}
 800d4a8:	b086      	sub	sp, #24
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	60f8      	str	r0, [r7, #12]
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	607a      	str	r2, [r7, #4]
 800d4b2:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800d4b4:	1d3b      	adds	r3, r7, #4
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe faf4 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fc fb2e 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800d4ca:	f107 030c 	add.w	r3, r7, #12
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7fe fae8 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fc fb22 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	681c      	ldr	r4, [r3, #0]
 800d4e0:	1d3b      	adds	r3, r7, #4
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fe fade 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 800d4ec:	f107 020c 	add.w	r2, r7, #12
 800d4f0:	f107 0308 	add.w	r3, r7, #8
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7f5 f9cc 	bl	8002894 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d4fc:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800d4fe:	f107 0314 	add.w	r3, r7, #20
 800d502:	4618      	mov	r0, r3
 800d504:	f7fc fb0c 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d508:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800d50a:	edd3 7a00 	vldr	s15, [r3]
 800d50e:	462b      	mov	r3, r5
 800d510:	eeb0 0a67 	vmov.f32	s0, s15
 800d514:	4622      	mov	r2, r4
 800d516:	2100      	movs	r1, #0
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f9f9 	bl	800d910 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 800d51e:	bf00      	nop
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bdb0      	pop	{r4, r5, r7, pc}

0800d526 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800d526:	b590      	push	{r4, r7, lr}
 800d528:	b083      	sub	sp, #12
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800d530:	1d3b      	adds	r3, r7, #4
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe fab6 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d538:	4604      	mov	r4, r0
 800d53a:	463b      	mov	r3, r7
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fe fab1 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d542:	4603      	mov	r3, r0
 800d544:	4619      	mov	r1, r3
 800d546:	4620      	mov	r0, r4
 800d548:	f000 fa8a 	bl	800da60 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	bd90      	pop	{r4, r7, pc}

0800d554 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	68b9      	ldr	r1, [r7, #8]
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f000 fa9a 	bl	800da9e <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800d56a:	4603      	mov	r3, r0
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d574:	b5b0      	push	{r4, r5, r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f7fe fd05 	bl	800bf90 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800d586:	4604      	mov	r4, r0
 800d588:	68b8      	ldr	r0, [r7, #8]
 800d58a:	f7fe fd01 	bl	800bf90 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800d58e:	4605      	mov	r5, r0
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4618      	mov	r0, r3
 800d594:	f7f5 fb18 	bl	8002bc8 <_ZSt12__niter_baseIPfET_S1_>
 800d598:	4603      	mov	r3, r0
 800d59a:	461a      	mov	r2, r3
 800d59c:	4629      	mov	r1, r5
 800d59e:	4620      	mov	r0, r4
 800d5a0:	f7fe fd12 	bl	800bfc8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	1d3b      	adds	r3, r7, #4
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fd fb82 	bl	800acb4 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800d5b0:	4603      	mov	r3, r0
    }
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bdb0      	pop	{r4, r5, r7, pc}

0800d5ba <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800d5ba:	b480      	push	{r7}
 800d5bc:	b087      	sub	sp, #28
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	1ad3      	subs	r3, r2, r3
 800d5cc:	109b      	asrs	r3, r3, #2
 800d5ce:	617b      	str	r3, [r7, #20]
 800d5d0:	e00c      	b.n	800d5ec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	601a      	str	r2, [r3, #0]
	      ++__first;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	3304      	adds	r3, #4
 800d5de:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	617b      	str	r3, [r7, #20]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	dcef      	bgt.n	800d5d2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 800d5f2:	687b      	ldr	r3, [r7, #4]
	}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	371c      	adds	r7, #28
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4618      	mov	r0, r3
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d616:	b5b0      	push	{r4, r5, r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	60f8      	str	r0, [r7, #12]
 800d61e:	60b9      	str	r1, [r7, #8]
 800d620:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f000 fa58 	bl	800dad8 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800d628:	4604      	mov	r4, r0
 800d62a:	68b8      	ldr	r0, [r7, #8]
 800d62c:	f000 fa54 	bl	800dad8 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800d630:	4605      	mov	r5, r0
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4618      	mov	r0, r3
 800d636:	f7fd f99f 	bl	800a978 <_ZSt12__niter_baseIPcET_S1_>
 800d63a:	4603      	mov	r3, r0
 800d63c:	461a      	mov	r2, r3
 800d63e:	4629      	mov	r1, r5
 800d640:	4620      	mov	r0, r4
 800d642:	f7fd f9a4 	bl	800a98e <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800d646:	4602      	mov	r2, r0
 800d648:	1d3b      	adds	r3, r7, #4
 800d64a:	4611      	mov	r1, r2
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fd f9ae 	bl	800a9ae <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800d652:	4603      	mov	r3, r0
    }
 800d654:	4618      	mov	r0, r3
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bdb0      	pop	{r4, r5, r7, pc}

0800d65c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800d664:	4b03      	ldr	r3, [pc, #12]	; (800d674 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 800d666:	4618      	mov	r0, r3
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	0aaaaaaa 	.word	0x0aaaaaaa

0800d678 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800d680:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800d682:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff ffe9 	bl	800d65c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 800d68a:	4603      	mov	r3, r0
 800d68c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d68e:	f107 0208 	add.w	r2, r7, #8
 800d692:	f107 030c 	add.w	r3, r7, #12
 800d696:	4611      	mov	r1, r2
 800d698:	4618      	mov	r0, r3
 800d69a:	f7f5 fa4b 	bl	8002b34 <_ZSt3minIjERKT_S2_S2_>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	681b      	ldr	r3, [r3, #0]
      }
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	05555555 	.word	0x05555555

0800d6b0 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d6b0:	b5b0      	push	{r4, r5, r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
 800d6bc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f000 fa56 	bl	800db70 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	68b8      	ldr	r0, [r7, #8]
 800d6c8:	f000 fa52 	bl	800db70 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fa4e 	bl	800db70 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	4629      	mov	r1, r5
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f000 fa53 	bl	800db86 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800d6e0:	4603      	mov	r3, r0
    }
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bdb0      	pop	{r4, r5, r7, pc}

0800d6ea <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d6f4:	6839      	ldr	r1, [r7, #0]
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 fa6b 	bl	800dbd2 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fa5e 	bl	800dbd2 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fc fcb3 	bl	800a084 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4618      	mov	r0, r3
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7fe fdb7 	bl	800c2a8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800d73a:	4602      	mov	r2, r0
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6819      	ldr	r1, [r3, #0]
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	4613      	mov	r3, r2
 800d750:	005b      	lsls	r3, r3, #1
 800d752:	4413      	add	r3, r2
 800d754:	00db      	lsls	r3, r3, #3
 800d756:	18ca      	adds	r2, r1, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	609a      	str	r2, [r3, #8]
      }
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d790:	2301      	movs	r3, #1
 800d792:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 fa44 	bl	800dc26 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800d79e:	4603      	mov	r3, r0
    }
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3718      	adds	r7, #24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800d7b0:	4b03      	ldr	r3, [pc, #12]	; (800d7c0 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	0aaaaaaa 	.word	0x0aaaaaaa

0800d7c4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800d7cc:	4b0a      	ldr	r3, [pc, #40]	; (800d7f8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800d7ce:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff ffe9 	bl	800d7a8 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d7da:	f107 0208 	add.w	r2, r7, #8
 800d7de:	f107 030c 	add.w	r3, r7, #12
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7f5 f9a5 	bl	8002b34 <_ZSt3minIjERKT_S2_S2_>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	681b      	ldr	r3, [r3, #0]
      }
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3710      	adds	r7, #16
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	05555555 	.word	0x05555555

0800d7fc <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4618      	mov	r0, r3
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr

0800d812 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d812:	b580      	push	{r7, lr}
 800d814:	b086      	sub	sp, #24
 800d816:	af00      	add	r7, sp, #0
 800d818:	60f8      	str	r0, [r7, #12]
 800d81a:	60b9      	str	r1, [r7, #8]
 800d81c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d81e:	2301      	movs	r3, #1
 800d820:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	68b9      	ldr	r1, [r7, #8]
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 fa6e 	bl	800dd08 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 800d82c:	4603      	mov	r3, r0
    }
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d836:	b480      	push	{r7}
 800d838:	b083      	sub	sp, #12
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d83e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800d842:	4618      	mov	r0, r3
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	60f8      	str	r0, [r7, #12]
 800d856:	60b9      	str	r1, [r7, #8]
 800d858:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f7ff ffeb 	bl	800d836 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 800d860:	4602      	mov	r2, r0
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	4293      	cmp	r3, r2
 800d866:	bf8c      	ite	hi
 800d868:	2301      	movhi	r3, #1
 800d86a:	2300      	movls	r3, #0
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	2b00      	cmp	r3, #0
 800d870:	bf14      	ite	ne
 800d872:	2301      	movne	r3, #1
 800d874:	2300      	moveq	r3, #0
 800d876:	b2db      	uxtb	r3, r3
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d007      	beq.n	800d88c <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d882:	d301      	bcc.n	800d888 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d884:	f00f fb9d 	bl	801cfc2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d888:	f00f fb98 	bl	801cfbc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4618      	mov	r0, r3
 800d892:	f00f fb7f 	bl	801cf94 <_Znwj>
 800d896:	4603      	mov	r3, r0
 800d898:	bf00      	nop
      }
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 800d8a2:	b480      	push	{r7}
 800d8a4:	b083      	sub	sp, #12
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	68b9      	ldr	r1, [r7, #8]
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f000 fa3d 	bl	800dd48 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
    { return __res; }
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	68b9      	ldr	r1, [r7, #8]
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f000 fa3e 	bl	800dd82 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800d906:	4603      	mov	r3, r0
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800d910:	b590      	push	{r4, r7, lr}
 800d912:	b08f      	sub	sp, #60	; 0x3c
 800d914:	af00      	add	r7, sp, #0
 800d916:	6178      	str	r0, [r7, #20]
 800d918:	6139      	str	r1, [r7, #16]
 800d91a:	60fa      	str	r2, [r7, #12]
 800d91c:	ed87 0a02 	vstr	s0, [r7, #8]
 800d920:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800d92a:	e042      	b.n	800d9b2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800d92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d92e:	3301      	adds	r3, #1
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800d934:	f107 0314 	add.w	r3, r7, #20
 800d938:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe f88a 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d940:	4604      	mov	r4, r0
 800d942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d944:	1e5a      	subs	r2, r3, #1
 800d946:	f107 0314 	add.w	r3, r7, #20
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe f881 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d952:	4602      	mov	r2, r0
 800d954:	1d3b      	adds	r3, r7, #4
 800d956:	4621      	mov	r1, r4
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fe f8af 	bl	800babc <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 800d964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d966:	3b01      	subs	r3, #1
 800d968:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800d96a:	f107 0314 	add.w	r3, r7, #20
 800d96e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d970:	4618      	mov	r0, r3
 800d972:	f7fe f86f 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d976:	4603      	mov	r3, r0
 800d978:	623b      	str	r3, [r7, #32]
 800d97a:	f107 0320 	add.w	r3, r7, #32
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe f890 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d984:	4603      	mov	r3, r0
 800d986:	4618      	mov	r0, r3
 800d988:	f7fc f8ca 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d98c:	4603      	mov	r3, r0
 800d98e:	681c      	ldr	r4, [r3, #0]
 800d990:	f107 0314 	add.w	r3, r7, #20
 800d994:	6939      	ldr	r1, [r7, #16]
 800d996:	4618      	mov	r0, r3
 800d998:	f7fe f85c 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d99c:	4603      	mov	r3, r0
 800d99e:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fe f87d 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 800d9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b0:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	0fda      	lsrs	r2, r3, #31
 800d9b8:	4413      	add	r3, r2
 800d9ba:	105b      	asrs	r3, r3, #1
 800d9bc:	461a      	mov	r2, r3
 800d9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	dbb3      	blt.n	800d92c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f003 0301 	and.w	r3, r3, #1
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d133      	bne.n	800da36 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3b02      	subs	r3, #2
 800d9d2:	0fda      	lsrs	r2, r3, #31
 800d9d4:	4413      	add	r3, r2
 800d9d6:	105b      	asrs	r3, r3, #1
 800d9d8:	461a      	mov	r2, r3
 800d9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d12a      	bne.n	800da36 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 800d9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800d9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ea:	1e5a      	subs	r2, r3, #1
 800d9ec:	f107 0314 	add.w	r3, r7, #20
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fe f82e 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da00:	4618      	mov	r0, r3
 800da02:	f7fe f84f 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800da06:	4603      	mov	r3, r0
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fc f889 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800da0e:	4603      	mov	r3, r0
 800da10:	681c      	ldr	r4, [r3, #0]
 800da12:	f107 0314 	add.w	r3, r7, #20
 800da16:	6939      	ldr	r1, [r7, #16]
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fe f81b 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800da1e:	4603      	mov	r3, r0
 800da20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe f83c 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800da2c:	4603      	mov	r3, r0
 800da2e:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 800da30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da32:	3b01      	subs	r3, #1
 800da34:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 800da36:	f107 0308 	add.w	r3, r7, #8
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fc f870 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800da40:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800da42:	edd3 7a00 	vldr	s15, [r3]
 800da46:	f107 031c 	add.w	r3, r7, #28
 800da4a:	eeb0 0a67 	vmov.f32	s0, s15
 800da4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da50:	6939      	ldr	r1, [r7, #16]
 800da52:	6978      	ldr	r0, [r7, #20]
 800da54:	f000 f9cf 	bl	800ddf6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 800da58:	bf00      	nop
 800da5a:	373c      	adds	r7, #60	; 0x3c
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd90      	pop	{r4, r7, pc}

0800da60 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f7fc f858 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800da70:	4603      	mov	r3, r0
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800da76:	6838      	ldr	r0, [r7, #0]
 800da78:	f7fc f852 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800da7c:	4603      	mov	r3, r0
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800da84:	f107 030c 	add.w	r3, r7, #12
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fc f849 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800da8e:	4603      	mov	r3, r0
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	601a      	str	r2, [r3, #0]
    }
 800da96:	bf00      	nop
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b084      	sub	sp, #16
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	60f8      	str	r0, [r7, #12]
 800daa6:	60b9      	str	r1, [r7, #8]
 800daa8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800daaa:	f7f3 ffad 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d006      	beq.n	800dac2 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	68b9      	ldr	r1, [r7, #8]
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f000 fa09 	bl	800ded0 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 800dabe:	4603      	mov	r3, r0
 800dac0:	e006      	b.n	800dad0 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	68b9      	ldr	r1, [r7, #8]
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f000 fa26 	bl	800df18 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 800dacc:	4603      	mov	r3, r0
								 __result);
 800dace:	bf00      	nop
    }
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800dae0:	1d3b      	adds	r3, r7, #4
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fd ff0c 	bl	800b900 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800dae8:	4603      	mov	r3, r0
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800dafc:	4b03      	ldr	r3, [pc, #12]	; (800db0c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 800dafe:	4618      	mov	r0, r3
 800db00:	370c      	adds	r7, #12
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	05555555 	.word	0x05555555

0800db10 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f7ff ffe9 	bl	800daf4 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 800db22:	4602      	mov	r2, r0
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	4293      	cmp	r3, r2
 800db28:	bf8c      	ite	hi
 800db2a:	2301      	movhi	r3, #1
 800db2c:	2300      	movls	r3, #0
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	2b00      	cmp	r3, #0
 800db32:	bf14      	ite	ne
 800db34:	2301      	movne	r3, #1
 800db36:	2300      	moveq	r3, #0
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d007      	beq.n	800db4e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	4a0a      	ldr	r2, [pc, #40]	; (800db6c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d901      	bls.n	800db4a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800db46:	f00f fa3c 	bl	801cfc2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800db4a:	f00f fa37 	bl	801cfbc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	4613      	mov	r3, r2
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	4413      	add	r3, r2
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	4618      	mov	r0, r3
 800db5a:	f00f fa1b 	bl	801cf94 <_Znwj>
 800db5e:	4603      	mov	r3, r0
 800db60:	bf00      	nop
      }
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	0aaaaaaa 	.word	0x0aaaaaaa

0800db70 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
    { return __it; }
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4618      	mov	r0, r3
 800db7c:	370c      	adds	r7, #12
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800db86:	b590      	push	{r4, r7, lr}
 800db88:	b087      	sub	sp, #28
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	60f8      	str	r0, [r7, #12]
 800db8e:	60b9      	str	r1, [r7, #8]
 800db90:	607a      	str	r2, [r7, #4]
 800db92:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800db98:	e012      	b.n	800dbc0 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800db9a:	6978      	ldr	r0, [r7, #20]
 800db9c:	f7ff f9b1 	bl	800cf02 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800dba0:	4604      	mov	r4, r0
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	f7ff f9ad 	bl	800cf02 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	683a      	ldr	r2, [r7, #0]
 800dbac:	4619      	mov	r1, r3
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f000 f9d4 	bl	800df5c <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	3318      	adds	r3, #24
 800dbb8:	60fb      	str	r3, [r7, #12]
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	3318      	adds	r3, #24
 800dbbe:	617b      	str	r3, [r7, #20]
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d1e8      	bne.n	800db9a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800dbc8:	697b      	ldr	r3, [r7, #20]
    }
 800dbca:	4618      	mov	r0, r3
 800dbcc:	371c      	adds	r7, #28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd90      	pop	{r4, r7, pc}

0800dbd2 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b082      	sub	sp, #8
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 f9d7 	bl	800df92 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3708      	adds	r7, #8
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800dbee:	b480      	push	{r7}
 800dbf0:	b083      	sub	sp, #12
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f103 0218 	add.w	r2, r3, #24
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	601a      	str	r2, [r3, #0]
	return *this;
 800dc18:	687b      	ldr	r3, [r7, #4]
      }
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800dc26:	b590      	push	{r4, r7, lr}
 800dc28:	b087      	sub	sp, #28
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	60f8      	str	r0, [r7, #12]
 800dc2e:	60b9      	str	r1, [r7, #8]
 800dc30:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800dc36:	e015      	b.n	800dc64 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800dc38:	6978      	ldr	r0, [r7, #20]
 800dc3a:	f7ff f962 	bl	800cf02 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800dc3e:	4604      	mov	r4, r0
 800dc40:	f107 030c 	add.w	r3, r7, #12
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 f9c8 	bl	800dfda <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f000 f9ee 	bl	800e030 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800dc54:	f107 030c 	add.w	r3, r7, #12
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff ffd3 	bl	800dc04 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	3318      	adds	r3, #24
 800dc62:	617b      	str	r3, [r7, #20]
 800dc64:	f107 0208 	add.w	r2, r7, #8
 800dc68:	f107 030c 	add.w	r3, r7, #12
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 f99b 	bl	800dfaa <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800dc74:	4603      	mov	r3, r0
 800dc76:	f083 0301 	eor.w	r3, r3, #1
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1db      	bne.n	800dc38 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 800dc80:	697b      	ldr	r3, [r7, #20]
	}
 800dc82:	4618      	mov	r0, r3
 800dc84:	371c      	adds	r7, #28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd90      	pop	{r4, r7, pc}
	...

0800dc8c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800dc94:	4b03      	ldr	r3, [pc, #12]	; (800dca4 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 800dc96:	4618      	mov	r0, r3
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	05555555 	.word	0x05555555

0800dca8 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7ff ffe9 	bl	800dc8c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	bf8c      	ite	hi
 800dcc2:	2301      	movhi	r3, #1
 800dcc4:	2300      	movls	r3, #0
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	bf14      	ite	ne
 800dccc:	2301      	movne	r3, #1
 800dcce:	2300      	moveq	r3, #0
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d007      	beq.n	800dce6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	4a0a      	ldr	r2, [pc, #40]	; (800dd04 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d901      	bls.n	800dce2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800dcde:	f00f f970 	bl	801cfc2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800dce2:	f00f f96b 	bl	801cfbc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	4613      	mov	r3, r2
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	4413      	add	r3, r2
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f00f f94f 	bl	801cf94 <_Znwj>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	bf00      	nop
      }
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	0aaaaaaa 	.word	0x0aaaaaaa

0800dd08 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800dd18:	e00d      	b.n	800dd36 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800dd1a:	6978      	ldr	r0, [r7, #20]
 800dd1c:	f7ff f9bb 	bl	800d096 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800dd20:	4603      	mov	r3, r0
 800dd22:	68f9      	ldr	r1, [r7, #12]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 f999 	bl	800e05c <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3318      	adds	r3, #24
 800dd2e:	60fb      	str	r3, [r7, #12]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	3318      	adds	r3, #24
 800dd34:	617b      	str	r3, [r7, #20]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d1ed      	bne.n	800dd1a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 800dd3e:	697b      	ldr	r3, [r7, #20]
	}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3718      	adds	r7, #24
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800dd54:	f7f3 fe58 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d006      	beq.n	800dd6c <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	68b9      	ldr	r1, [r7, #8]
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	f000 f990 	bl	800e088 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	e006      	b.n	800dd7a <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	68b9      	ldr	r1, [r7, #8]
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f000 f9ac 	bl	800e0ce <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 800dd76:	4603      	mov	r3, r0
 800dd78:	bf00      	nop
    }
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b084      	sub	sp, #16
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	60f8      	str	r0, [r7, #12]
 800dd8a:	60b9      	str	r1, [r7, #8]
 800dd8c:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800dd8e:	f7f3 fe3b 	bl	8001a08 <_ZSt21is_constant_evaluatedv>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d006      	beq.n	800dda6 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	68b9      	ldr	r1, [r7, #8]
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f000 f9b3 	bl	800e108 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 800dda2:	4603      	mov	r3, r0
 800dda4:	e006      	b.n	800ddb4 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	68b9      	ldr	r1, [r7, #8]
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 f9cf 	bl	800e14e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 800ddb0:	4603      	mov	r3, r0
								 __result);
 800ddb2:	bf00      	nop
    }
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 800ddc8:	f107 0308 	add.w	r3, r7, #8
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fd fe69 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	ed93 7a00 	vldr	s14, [r3]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	edd3 7a00 	vldr	s15, [r3]
 800ddde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde6:	bf4c      	ite	mi
 800dde8:	2301      	movmi	r3, #1
 800ddea:	2300      	movpl	r3, #0
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800ddf6:	b590      	push	{r4, r7, lr}
 800ddf8:	b08b      	sub	sp, #44	; 0x2c
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6178      	str	r0, [r7, #20]
 800ddfe:	6139      	str	r1, [r7, #16]
 800de00:	60fa      	str	r2, [r7, #12]
 800de02:	ed87 0a02 	vstr	s0, [r7, #8]
 800de06:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	0fda      	lsrs	r2, r3, #31
 800de0e:	4413      	add	r3, r2
 800de10:	105b      	asrs	r3, r3, #1
 800de12:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800de14:	e029      	b.n	800de6a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800de16:	f107 0314 	add.w	r3, r7, #20
 800de1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fd fe19 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800de22:	4603      	mov	r3, r0
 800de24:	61bb      	str	r3, [r7, #24]
 800de26:	f107 0318 	add.w	r3, r7, #24
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fd fe3a 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800de30:	4603      	mov	r3, r0
 800de32:	4618      	mov	r0, r3
 800de34:	f7fb fe74 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800de38:	4603      	mov	r3, r0
 800de3a:	681c      	ldr	r4, [r3, #0]
 800de3c:	f107 0314 	add.w	r3, r7, #20
 800de40:	6939      	ldr	r1, [r7, #16]
 800de42:	4618      	mov	r0, r3
 800de44:	f7fd fe06 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800de48:	4603      	mov	r3, r0
 800de4a:	61fb      	str	r3, [r7, #28]
 800de4c:	f107 031c 	add.w	r3, r7, #28
 800de50:	4618      	mov	r0, r3
 800de52:	f7fd fe27 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800de56:	4603      	mov	r3, r0
 800de58:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	3b01      	subs	r3, #1
 800de62:	0fda      	lsrs	r2, r3, #31
 800de64:	4413      	add	r3, r2
 800de66:	105b      	asrs	r3, r3, #1
 800de68:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800de6a:	693a      	ldr	r2, [r7, #16]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	429a      	cmp	r2, r3
 800de70:	dd11      	ble.n	800de96 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 800de72:	f107 0314 	add.w	r3, r7, #20
 800de76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fd fdeb 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800de7e:	4601      	mov	r1, r0
 800de80:	f107 0308 	add.w	r3, r7, #8
 800de84:	461a      	mov	r2, r3
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7ff ff98 	bl	800ddbc <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 800de92:	2301      	movs	r3, #1
 800de94:	e000      	b.n	800de98 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 800de96:	2300      	movs	r3, #0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1bc      	bne.n	800de16 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800de9c:	f107 0308 	add.w	r3, r7, #8
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fb fe3d 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800dea6:	4603      	mov	r3, r0
 800dea8:	681c      	ldr	r4, [r3, #0]
 800deaa:	f107 0314 	add.w	r3, r7, #20
 800deae:	6939      	ldr	r1, [r7, #16]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fd fdcf 	bl	800ba54 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800deb6:	4603      	mov	r3, r0
 800deb8:	623b      	str	r3, [r7, #32]
 800deba:	f107 0320 	add.w	r3, r7, #32
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fd fdf0 	bl	800baa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800dec4:	4603      	mov	r3, r0
 800dec6:	601c      	str	r4, [r3, #0]
    }
 800dec8:	bf00      	nop
 800deca:	372c      	adds	r7, #44	; 0x2c
 800decc:	46bd      	mov	sp, r7
 800dece:	bd90      	pop	{r4, r7, pc}

0800ded0 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	109b      	asrs	r3, r3, #2
 800dee4:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800dee6:	e00f      	b.n	800df08 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	3b04      	subs	r3, #4
 800deec:	60bb      	str	r3, [r7, #8]
 800deee:	68b8      	ldr	r0, [r7, #8]
 800def0:	f7fb fe16 	bl	8009b20 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800def4:	4603      	mov	r3, r0
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3b04      	subs	r3, #4
 800defc:	607b      	str	r3, [r7, #4]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	3b01      	subs	r3, #1
 800df06:	617b      	str	r3, [r7, #20]
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	dcec      	bgt.n	800dee8 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800df0e:	687b      	ldr	r3, [r7, #4]
	}
 800df10:	4618      	mov	r0, r3
 800df12:	3718      	adds	r7, #24
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	109b      	asrs	r3, r3, #2
 800df2c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00a      	beq.n	800df4a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	425b      	negs	r3, r3
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	18d0      	adds	r0, r2, r3
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	461a      	mov	r2, r3
 800df44:	68f9      	ldr	r1, [r7, #12]
 800df46:	f012 fb22 	bl	802058e <memmove>
	  return __result - _Num;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	425b      	negs	r3, r3
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	4413      	add	r3, r2
	}
 800df54:	4618      	mov	r0, r3
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800df68:	68b8      	ldr	r0, [r7, #8]
 800df6a:	f7fc f943 	bl	800a1f4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800df6e:	4603      	mov	r3, r0
 800df70:	461a      	mov	r2, r3
 800df72:	68f9      	ldr	r1, [r7, #12]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7fc ffce 	bl	800af16 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800df7a:	68b8      	ldr	r0, [r7, #8]
 800df7c:	f7fe ffc1 	bl	800cf02 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800df80:	4603      	mov	r3, r0
 800df82:	4619      	mov	r1, r3
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f7fe f9c2 	bl	800c30e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 800df8a:	bf00      	nop
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800df92:	b480      	push	{r7}
 800df94:	b083      	sub	sp, #12
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	6039      	str	r1, [r7, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	370c      	adds	r7, #12
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800dfaa:	b590      	push	{r4, r7, lr}
 800dfac:	b083      	sub	sp, #12
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff fe1a 	bl	800dbee <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	681c      	ldr	r4, [r3, #0]
 800dfbe:	6838      	ldr	r0, [r7, #0]
 800dfc0:	f7ff fe15 	bl	800dbee <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	429c      	cmp	r4, r3
 800dfca:	bf0c      	ite	eq
 800dfcc:	2301      	moveq	r3, #1
 800dfce:	2300      	movne	r3, #0
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	370c      	adds	r7, #12
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd90      	pop	{r4, r7, pc}

0800dfda <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800dfda:	b480      	push	{r7}
 800dfdc:	b083      	sub	sp, #12
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	370c      	adds	r7, #12
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr

0800dff2 <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	6039      	str	r1, [r7, #0]
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	781a      	ldrb	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	701a      	strb	r2, [r3, #0]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	685a      	ldr	r2, [r3, #4]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	605a      	str	r2, [r3, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f103 0208 	add.w	r2, r3, #8
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	3308      	adds	r3, #8
 800e016:	4619      	mov	r1, r3
 800e018:	4610      	mov	r0, r2
 800e01a:	f7fb fba6 	bl	800976a <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	695a      	ldr	r2, [r3, #20]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	615a      	str	r2, [r3, #20]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4618      	mov	r0, r3
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800e030:	b590      	push	{r4, r7, lr}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e03a:	6838      	ldr	r0, [r7, #0]
 800e03c:	f000 f8a9 	bl	800e192 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e040:	4604      	mov	r4, r0
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4619      	mov	r1, r3
 800e046:	2018      	movs	r0, #24
 800e048:	f7f3 fce6 	bl	8001a18 <_ZnwjPv>
 800e04c:	4603      	mov	r3, r0
 800e04e:	4621      	mov	r1, r4
 800e050:	4618      	mov	r0, r3
 800e052:	f7ff ffce 	bl	800dff2 <_ZN3jlb4EdgeC1ERKS0_>
    }
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd90      	pop	{r4, r7, pc}

0800e05c <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e066:	6838      	ldr	r0, [r7, #0]
 800e068:	f000 f89e 	bl	800e1a8 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e06c:	4604      	mov	r4, r0
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4619      	mov	r1, r3
 800e072:	2018      	movs	r0, #24
 800e074:	f7f3 fcd0 	bl	8001a18 <_ZnwjPv>
 800e078:	4603      	mov	r3, r0
 800e07a:	4621      	mov	r1, r4
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fd f85d 	bl	800b13c <_ZN3jlb4NodeC1ERKS0_>
    }
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	bd90      	pop	{r4, r7, pc}

0800e088 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800e088:	b480      	push	{r7}
 800e08a:	b087      	sub	sp, #28
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800e094:	68ba      	ldr	r2, [r7, #8]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	1ad3      	subs	r3, r2, r3
 800e09a:	109b      	asrs	r3, r3, #2
 800e09c:	617b      	str	r3, [r7, #20]
 800e09e:	e00c      	b.n	800e0ba <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x32>
	      *__result = *__first;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	601a      	str	r2, [r3, #0]
	      ++__first;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	617b      	str	r3, [r7, #20]
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	dcef      	bgt.n	800e0a0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 800e0c0:	687b      	ldr	r3, [r7, #4]
	}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	371c      	adds	r7, #28
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b086      	sub	sp, #24
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	60f8      	str	r0, [r7, #12]
 800e0d6:	60b9      	str	r1, [r7, #8]
 800e0d8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	109b      	asrs	r3, r3, #2
 800e0e2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d006      	beq.n	800e0f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	68f9      	ldr	r1, [r7, #12]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f012 fa4b 	bl	802058e <memmove>
	  return __result + _Num;
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	4413      	add	r3, r2
	}
 800e100:	4618      	mov	r0, r3
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800e114:	68ba      	ldr	r2, [r7, #8]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	109b      	asrs	r3, r3, #2
 800e11c:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800e11e:	e00c      	b.n	800e13a <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x32>
	    *--__result = *--__last;
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	3b04      	subs	r3, #4
 800e124:	60bb      	str	r3, [r7, #8]
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3b04      	subs	r3, #4
 800e12e:	607b      	str	r3, [r7, #4]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	3b01      	subs	r3, #1
 800e138:	617b      	str	r3, [r7, #20]
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	dcef      	bgt.n	800e120 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 800e140:	687b      	ldr	r3, [r7, #4]
	}
 800e142:	4618      	mov	r0, r3
 800e144:	371c      	adds	r7, #28
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr

0800e14e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800e14e:	b580      	push	{r7, lr}
 800e150:	b086      	sub	sp, #24
 800e152:	af00      	add	r7, sp, #0
 800e154:	60f8      	str	r0, [r7, #12]
 800e156:	60b9      	str	r1, [r7, #8]
 800e158:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	109b      	asrs	r3, r3, #2
 800e162:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00a      	beq.n	800e180 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	425b      	negs	r3, r3
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	18d0      	adds	r0, r2, r3
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	461a      	mov	r2, r3
 800e17a:	68f9      	ldr	r1, [r7, #12]
 800e17c:	f012 fa07 	bl	802058e <memmove>
	  return __result - _Num;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	425b      	negs	r3, r3
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	4413      	add	r3, r2
	}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <_ZN3jlb5LogicD1Ev>:
    class Logic
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fa fbd1 	bl	8008974 <_ZN3jlb12SignalSenderD1Ev>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7f9 fb3b 	bl	8007854 <_ZN3jlb5GraphD1Ev>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3390      	adds	r3, #144	; 0x90
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7f5 fb36 	bl	8003854 <_ZN3jlb10ControllerD1Ev>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7f9 fbce 	bl	800798c <_ZN3jlb8OdometryD1Ev>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
	...

0800e1fc <_Z41__static_initialization_and_destruction_0ii>:
}
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d10e      	bne.n	800e22a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e212:	4293      	cmp	r3, r2
 800e214:	d109      	bne.n	800e22a <_Z41__static_initialization_and_destruction_0ii+0x2e>
jlb::Logic logic;
 800e216:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800e248 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800e21a:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800e248 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800e21e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800e248 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800e222:	2102      	movs	r1, #2
 800e224:	4809      	ldr	r0, [pc, #36]	; (800e24c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800e226:	f7fa fbb4 	bl	8008992 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d107      	bne.n	800e240 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e236:	4293      	cmp	r3, r2
 800e238:	d102      	bne.n	800e240 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800e23a:	4804      	ldr	r0, [pc, #16]	; (800e24c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800e23c:	f7ff ffbf 	bl	800e1be <_ZN3jlb5LogicD1Ev>
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	00000000 	.word	0x00000000
 800e24c:	20000338 	.word	0x20000338

0800e250 <_GLOBAL__sub_I_motor_battery_voltage>:
 800e250:	b580      	push	{r7, lr}
 800e252:	af00      	add	r7, sp, #0
 800e254:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e258:	2001      	movs	r0, #1
 800e25a:	f7ff ffcf 	bl	800e1fc <_Z41__static_initialization_and_destruction_0ii>
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <_GLOBAL__sub_D_motor_battery_voltage>:
 800e260:	b580      	push	{r7, lr}
 800e262:	af00      	add	r7, sp, #0
 800e264:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e268:	2000      	movs	r0, #0
 800e26a:	f7ff ffc7 	bl	800e1fc <_Z41__static_initialization_and_destruction_0ii>
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e278:	4b08      	ldr	r3, [pc, #32]	; (800e29c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e27a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e27c:	4907      	ldr	r1, [pc, #28]	; (800e29c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4313      	orrs	r3, r2
 800e282:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e284:	4b05      	ldr	r3, [pc, #20]	; (800e29c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4013      	ands	r3, r2
 800e28c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e28e:	68fb      	ldr	r3, [r7, #12]
}
 800e290:	bf00      	nop
 800e292:	3714      	adds	r7, #20
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	40021000 	.word	0x40021000

0800e2a0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b085      	sub	sp, #20
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800e2a8:	4b08      	ldr	r3, [pc, #32]	; (800e2cc <LL_APB1_GRP2_EnableClock+0x2c>)
 800e2aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e2ac:	4907      	ldr	r1, [pc, #28]	; (800e2cc <LL_APB1_GRP2_EnableClock+0x2c>)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800e2b4:	4b05      	ldr	r3, [pc, #20]	; (800e2cc <LL_APB1_GRP2_EnableClock+0x2c>)
 800e2b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e2be:	68fb      	ldr	r3, [r7, #12]
}
 800e2c0:	bf00      	nop
 800e2c2:	3714      	adds	r7, #20
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	40021000 	.word	0x40021000

0800e2d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e2d4:	f002 f8a3 	bl	801041e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e2d8:	f000 f862 	bl	800e3a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e2dc:	f000 ffba 	bl	800f254 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800e2e0:	f000 ff8e 	bl	800f200 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 800e2e4:	f000 fa62 	bl	800e7ac <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 800e2e8:	f000 fb82 	bl	800e9f0 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 800e2ec:	f000 ff24 	bl	800f138 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 800e2f0:	f000 ff58 	bl	800f1a4 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 800e2f4:	f000 fabc 	bl	800e870 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 800e2f8:	f000 fbce 	bl	800ea98 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 800e2fc:	f000 fc0e 	bl	800eb1c <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 800e300:	f000 fc4e 	bl	800eba0 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 800e304:	f000 fc8e 	bl	800ec24 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800e308:	f000 fd2e 	bl	800ed68 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 800e30c:	f000 fb10 	bl	800e930 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800e310:	f000 f8b6 	bl	800e480 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 800e314:	f000 fd88 	bl	800ee28 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 800e318:	f000 f9dc 	bl	800e6d4 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 800e31c:	f000 fa28 	bl	800e770 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 800e320:	f000 fe22 	bl	800ef68 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 800e324:	f000 fe60 	bl	800efe8 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 800e328:	f7f4 ffec 	bl	8003304 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800e32c:	2100      	movs	r1, #0
 800e32e:	4814      	ldr	r0, [pc, #80]	; (800e380 <main+0xb0>)
 800e330:	f008 f98c 	bl	801664c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800e334:	2100      	movs	r1, #0
 800e336:	4813      	ldr	r0, [pc, #76]	; (800e384 <main+0xb4>)
 800e338:	f008 f988 	bl	801664c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800e33c:	210c      	movs	r1, #12
 800e33e:	4811      	ldr	r0, [pc, #68]	; (800e384 <main+0xb4>)
 800e340:	f008 f984 	bl	801664c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800e344:	213c      	movs	r1, #60	; 0x3c
 800e346:	4810      	ldr	r0, [pc, #64]	; (800e388 <main+0xb8>)
 800e348:	f008 fcd8 	bl	8016cfc <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 800e34c:	480f      	ldr	r0, [pc, #60]	; (800e38c <main+0xbc>)
 800e34e:	f008 f84d 	bl	80163ec <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800e352:	2108      	movs	r1, #8
 800e354:	480e      	ldr	r0, [pc, #56]	; (800e390 <main+0xc0>)
 800e356:	f008 fae1 	bl	801691c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 800e35a:	210c      	movs	r1, #12
 800e35c:	480c      	ldr	r0, [pc, #48]	; (800e390 <main+0xc0>)
 800e35e:	f008 fadd 	bl	801691c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800e362:	f00c fac5 	bl	801a8f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800e366:	4a0b      	ldr	r2, [pc, #44]	; (800e394 <main+0xc4>)
 800e368:	2100      	movs	r1, #0
 800e36a:	480b      	ldr	r0, [pc, #44]	; (800e398 <main+0xc8>)
 800e36c:	f00c fb0a 	bl	801a984 <osThreadNew>
 800e370:	4603      	mov	r3, r0
 800e372:	4a0a      	ldr	r2, [pc, #40]	; (800e39c <main+0xcc>)
 800e374:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 800e376:	f7fa fc85 	bl	8008c84 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800e37a:	f00c fadd 	bl	801a938 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800e37e:	e7fe      	b.n	800e37e <main+0xae>
 800e380:	20000c8c 	.word	0x20000c8c
 800e384:	20000bf4 	.word	0x20000bf4
 800e388:	20000ba8 	.word	0x20000ba8
 800e38c:	20000c40 	.word	0x20000c40
 800e390:	20000b5c 	.word	0x20000b5c
 800e394:	08021de0 	.word	0x08021de0
 800e398:	0800f4b9 	.word	0x0800f4b9
 800e39c:	20000fcc 	.word	0x20000fcc

0800e3a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b098      	sub	sp, #96	; 0x60
 800e3a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e3a6:	f107 0318 	add.w	r3, r7, #24
 800e3aa:	2248      	movs	r2, #72	; 0x48
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f012 f907 	bl	80205c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e3b4:	1d3b      	adds	r3, r7, #4
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	605a      	str	r2, [r3, #4]
 800e3bc:	609a      	str	r2, [r3, #8]
 800e3be:	60da      	str	r2, [r3, #12]
 800e3c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	f005 f9de 	bl	8013784 <HAL_PWREx_ControlVoltageScaling>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bf14      	ite	ne
 800e3ce:	2301      	movne	r3, #1
 800e3d0:	2300      	moveq	r3, #0
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800e3d8:	f001 f88d 	bl	800f4f6 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800e3dc:	f005 f9b4 	bl	8013748 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800e3e0:	4b26      	ldr	r3, [pc, #152]	; (800e47c <_Z18SystemClock_Configv+0xdc>)
 800e3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3e6:	4a25      	ldr	r2, [pc, #148]	; (800e47c <_Z18SystemClock_Configv+0xdc>)
 800e3e8:	f023 0318 	bic.w	r3, r3, #24
 800e3ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 800e3f0:	2334      	movs	r3, #52	; 0x34
 800e3f2:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800e3f4:	2381      	movs	r3, #129	; 0x81
 800e3f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800e400:	2300      	movs	r3, #0
 800e402:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800e404:	2360      	movs	r3, #96	; 0x60
 800e406:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e408:	2302      	movs	r3, #2
 800e40a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800e40c:	2301      	movs	r3, #1
 800e40e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800e410:	2301      	movs	r3, #1
 800e412:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800e414:	2337      	movs	r3, #55	; 0x37
 800e416:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800e418:	2307      	movs	r3, #7
 800e41a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800e41c:	2302      	movs	r3, #2
 800e41e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800e420:	2302      	movs	r3, #2
 800e422:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e424:	f107 0318 	add.w	r3, r7, #24
 800e428:	4618      	mov	r0, r3
 800e42a:	f005 fa3b 	bl	80138a4 <HAL_RCC_OscConfig>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	bf14      	ite	ne
 800e434:	2301      	movne	r3, #1
 800e436:	2300      	moveq	r3, #0
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800e43e:	f001 f85a 	bl	800f4f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e442:	230f      	movs	r3, #15
 800e444:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e446:	2303      	movs	r3, #3
 800e448:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e44a:	2300      	movs	r3, #0
 800e44c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800e44e:	2300      	movs	r3, #0
 800e450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e452:	2300      	movs	r3, #0
 800e454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e456:	1d3b      	adds	r3, r7, #4
 800e458:	2105      	movs	r1, #5
 800e45a:	4618      	mov	r0, r3
 800e45c:	f005 fef8 	bl	8014250 <HAL_RCC_ClockConfig>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	bf14      	ite	ne
 800e466:	2301      	movne	r3, #1
 800e468:	2300      	moveq	r3, #0
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800e470:	f001 f841 	bl	800f4f6 <Error_Handler>
  }
}
 800e474:	bf00      	nop
 800e476:	3760      	adds	r7, #96	; 0x60
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	40021000 	.word	0x40021000

0800e480 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08a      	sub	sp, #40	; 0x28
 800e484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800e486:	f107 031c 	add.w	r3, r7, #28
 800e48a:	2200      	movs	r2, #0
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	605a      	str	r2, [r3, #4]
 800e490:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e492:	1d3b      	adds	r3, r7, #4
 800e494:	2200      	movs	r2, #0
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	605a      	str	r2, [r3, #4]
 800e49a:	609a      	str	r2, [r3, #8]
 800e49c:	60da      	str	r2, [r3, #12]
 800e49e:	611a      	str	r2, [r3, #16]
 800e4a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800e4a2:	4b82      	ldr	r3, [pc, #520]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4a4:	4a82      	ldr	r2, [pc, #520]	; (800e6b0 <_ZL12MX_ADC1_Initv+0x230>)
 800e4a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e4a8:	4b80      	ldr	r3, [pc, #512]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e4ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e4b0:	4b7e      	ldr	r3, [pc, #504]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e4b6:	4b7d      	ldr	r3, [pc, #500]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800e4bc:	4b7b      	ldr	r3, [pc, #492]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4be:	2201      	movs	r2, #1
 800e4c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800e4c2:	4b7a      	ldr	r3, [pc, #488]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4c4:	2208      	movs	r2, #8
 800e4c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800e4c8:	4b78      	ldr	r3, [pc, #480]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e4ce:	4b77      	ldr	r3, [pc, #476]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 800e4d4:	4b75      	ldr	r3, [pc, #468]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4d6:	2208      	movs	r2, #8
 800e4d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e4da:	4b74      	ldr	r3, [pc, #464]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e4e2:	4b72      	ldr	r3, [pc, #456]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e4e8:	4b70      	ldr	r3, [pc, #448]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800e4ee:	4b6f      	ldr	r3, [pc, #444]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e4f6:	4b6d      	ldr	r3, [pc, #436]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e4f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e4fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800e4fe:	4b6b      	ldr	r3, [pc, #428]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e500:	2201      	movs	r2, #1
 800e502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 800e506:	4b69      	ldr	r3, [pc, #420]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e508:	2214      	movs	r2, #20
 800e50a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 800e50c:	4b67      	ldr	r3, [pc, #412]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e50e:	22c0      	movs	r2, #192	; 0xc0
 800e510:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800e512:	4b66      	ldr	r3, [pc, #408]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e514:	2200      	movs	r2, #0
 800e516:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800e518:	4b64      	ldr	r3, [pc, #400]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e51a:	2201      	movs	r2, #1
 800e51c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e51e:	4863      	ldr	r0, [pc, #396]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e520:	f002 f9c2 	bl	80108a8 <HAL_ADC_Init>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	bf14      	ite	ne
 800e52a:	2301      	movne	r3, #1
 800e52c:	2300      	moveq	r3, #0
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 800e534:	f000 ffdf 	bl	800f4f6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800e538:	2300      	movs	r3, #0
 800e53a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800e53c:	f107 031c 	add.w	r3, r7, #28
 800e540:	4619      	mov	r1, r3
 800e542:	485a      	ldr	r0, [pc, #360]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e544:	f003 fb44 	bl	8011bd0 <HAL_ADCEx_MultiModeConfigChannel>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	bf14      	ite	ne
 800e54e:	2301      	movne	r3, #1
 800e550:	2300      	moveq	r3, #0
 800e552:	b2db      	uxtb	r3, r3
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 800e558:	f000 ffcd 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800e55c:	4b55      	ldr	r3, [pc, #340]	; (800e6b4 <_ZL12MX_ADC1_Initv+0x234>)
 800e55e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e560:	2306      	movs	r3, #6
 800e562:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800e564:	2301      	movs	r3, #1
 800e566:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e568:	237f      	movs	r3, #127	; 0x7f
 800e56a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e56c:	2304      	movs	r3, #4
 800e56e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800e570:	2300      	movs	r3, #0
 800e572:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e574:	1d3b      	adds	r3, r7, #4
 800e576:	4619      	mov	r1, r3
 800e578:	484c      	ldr	r0, [pc, #304]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e57a:	f002 fdcd 	bl	8011118 <HAL_ADC_ConfigChannel>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	bf14      	ite	ne
 800e584:	2301      	movne	r3, #1
 800e586:	2300      	moveq	r3, #0
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 800e58e:	f000 ffb2 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800e592:	4b49      	ldr	r3, [pc, #292]	; (800e6b8 <_ZL12MX_ADC1_Initv+0x238>)
 800e594:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800e596:	230c      	movs	r3, #12
 800e598:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e59a:	1d3b      	adds	r3, r7, #4
 800e59c:	4619      	mov	r1, r3
 800e59e:	4843      	ldr	r0, [pc, #268]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e5a0:	f002 fdba 	bl	8011118 <HAL_ADC_ConfigChannel>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	bf14      	ite	ne
 800e5aa:	2301      	movne	r3, #1
 800e5ac:	2300      	moveq	r3, #0
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 800e5b4:	f000 ff9f 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800e5b8:	4b40      	ldr	r3, [pc, #256]	; (800e6bc <_ZL12MX_ADC1_Initv+0x23c>)
 800e5ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800e5bc:	2312      	movs	r3, #18
 800e5be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e5c0:	1d3b      	adds	r3, r7, #4
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	4839      	ldr	r0, [pc, #228]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e5c6:	f002 fda7 	bl	8011118 <HAL_ADC_ConfigChannel>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	bf14      	ite	ne
 800e5d0:	2301      	movne	r3, #1
 800e5d2:	2300      	moveq	r3, #0
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 800e5da:	f000 ff8c 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800e5de:	4b38      	ldr	r3, [pc, #224]	; (800e6c0 <_ZL12MX_ADC1_Initv+0x240>)
 800e5e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800e5e2:	2318      	movs	r3, #24
 800e5e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e5e6:	1d3b      	adds	r3, r7, #4
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4830      	ldr	r0, [pc, #192]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e5ec:	f002 fd94 	bl	8011118 <HAL_ADC_ConfigChannel>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	bf14      	ite	ne
 800e5f6:	2301      	movne	r3, #1
 800e5f8:	2300      	moveq	r3, #0
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 800e600:	f000 ff79 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800e604:	4b2f      	ldr	r3, [pc, #188]	; (800e6c4 <_ZL12MX_ADC1_Initv+0x244>)
 800e606:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800e608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e60c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e60e:	1d3b      	adds	r3, r7, #4
 800e610:	4619      	mov	r1, r3
 800e612:	4826      	ldr	r0, [pc, #152]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e614:	f002 fd80 	bl	8011118 <HAL_ADC_ConfigChannel>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	bf14      	ite	ne
 800e61e:	2301      	movne	r3, #1
 800e620:	2300      	moveq	r3, #0
 800e622:	b2db      	uxtb	r3, r3
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 800e628:	f000 ff65 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800e62c:	4b26      	ldr	r3, [pc, #152]	; (800e6c8 <_ZL12MX_ADC1_Initv+0x248>)
 800e62e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800e630:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e636:	1d3b      	adds	r3, r7, #4
 800e638:	4619      	mov	r1, r3
 800e63a:	481c      	ldr	r0, [pc, #112]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e63c:	f002 fd6c 	bl	8011118 <HAL_ADC_ConfigChannel>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	bf14      	ite	ne
 800e646:	2301      	movne	r3, #1
 800e648:	2300      	moveq	r3, #0
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 800e650:	f000 ff51 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800e654:	4b1d      	ldr	r3, [pc, #116]	; (800e6cc <_ZL12MX_ADC1_Initv+0x24c>)
 800e656:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800e658:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800e65c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e65e:	1d3b      	adds	r3, r7, #4
 800e660:	4619      	mov	r1, r3
 800e662:	4812      	ldr	r0, [pc, #72]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e664:	f002 fd58 	bl	8011118 <HAL_ADC_ConfigChannel>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	bf14      	ite	ne
 800e66e:	2301      	movne	r3, #1
 800e670:	2300      	moveq	r3, #0
 800e672:	b2db      	uxtb	r3, r3
 800e674:	2b00      	cmp	r3, #0
 800e676:	d001      	beq.n	800e67c <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 800e678:	f000 ff3d 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800e67c:	4b14      	ldr	r3, [pc, #80]	; (800e6d0 <_ZL12MX_ADC1_Initv+0x250>)
 800e67e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800e680:	f44f 7389 	mov.w	r3, #274	; 0x112
 800e684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e686:	1d3b      	adds	r3, r7, #4
 800e688:	4619      	mov	r1, r3
 800e68a:	4808      	ldr	r0, [pc, #32]	; (800e6ac <_ZL12MX_ADC1_Initv+0x22c>)
 800e68c:	f002 fd44 	bl	8011118 <HAL_ADC_ConfigChannel>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	bf14      	ite	ne
 800e696:	2301      	movne	r3, #1
 800e698:	2300      	moveq	r3, #0
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d001      	beq.n	800e6a4 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 800e6a0:	f000 ff29 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e6a4:	bf00      	nop
 800e6a6:	3728      	adds	r7, #40	; 0x28
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	20000728 	.word	0x20000728
 800e6b0:	42028000 	.word	0x42028000
 800e6b4:	04300002 	.word	0x04300002
 800e6b8:	08600004 	.word	0x08600004
 800e6bc:	0c900008 	.word	0x0c900008
 800e6c0:	1d500080 	.word	0x1d500080
 800e6c4:	21800100 	.word	0x21800100
 800e6c8:	25b00200 	.word	0x25b00200
 800e6cc:	32601000 	.word	0x32601000
 800e6d0:	43210000 	.word	0x43210000

0800e6d4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800e6d8:	4b22      	ldr	r3, [pc, #136]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e6da:	4a23      	ldr	r2, [pc, #140]	; (800e768 <_ZL12MX_I2C1_Initv+0x94>)
 800e6dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 800e6de:	4b21      	ldr	r3, [pc, #132]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e6e0:	4a22      	ldr	r2, [pc, #136]	; (800e76c <_ZL12MX_I2C1_Initv+0x98>)
 800e6e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800e6e4:	4b1f      	ldr	r3, [pc, #124]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e6ea:	4b1e      	ldr	r3, [pc, #120]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e6f0:	4b1c      	ldr	r3, [pc, #112]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800e6f6:	4b1b      	ldr	r3, [pc, #108]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800e6fc:	4b19      	ldr	r3, [pc, #100]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e6fe:	2200      	movs	r2, #0
 800e700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e702:	4b18      	ldr	r3, [pc, #96]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e704:	2200      	movs	r2, #0
 800e706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e708:	4b16      	ldr	r3, [pc, #88]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800e70e:	4815      	ldr	r0, [pc, #84]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e710:	f004 f942 	bl	8012998 <HAL_I2C_Init>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	bf14      	ite	ne
 800e71a:	2301      	movne	r3, #1
 800e71c:	2300      	moveq	r3, #0
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800e724:	f000 fee7 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800e728:	2100      	movs	r1, #0
 800e72a:	480e      	ldr	r0, [pc, #56]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e72c:	f004 fe40 	bl	80133b0 <HAL_I2CEx_ConfigAnalogFilter>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	bf14      	ite	ne
 800e736:	2301      	movne	r3, #1
 800e738:	2300      	moveq	r3, #0
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800e740:	f000 fed9 	bl	800f4f6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800e744:	2100      	movs	r1, #0
 800e746:	4807      	ldr	r0, [pc, #28]	; (800e764 <_ZL12MX_I2C1_Initv+0x90>)
 800e748:	f004 fe7d 	bl	8013446 <HAL_I2CEx_ConfigDigitalFilter>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	bf14      	ite	ne
 800e752:	2301      	movne	r3, #1
 800e754:	2300      	moveq	r3, #0
 800e756:	b2db      	uxtb	r3, r3
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d001      	beq.n	800e760 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800e75c:	f000 fecb 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800e760:	bf00      	nop
 800e762:	bd80      	pop	{r7, pc}
 800e764:	200007f8 	.word	0x200007f8
 800e768:	40005400 	.word	0x40005400
 800e76c:	60514452 	.word	0x60514452

0800e770 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800e774:	2000      	movs	r0, #0
 800e776:	f004 feb3 	bl	80134e0 <HAL_ICACHE_ConfigAssociativityMode>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	bf14      	ite	ne
 800e780:	2301      	movne	r3, #1
 800e782:	2300      	moveq	r3, #0
 800e784:	b2db      	uxtb	r3, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 800e78a:	f000 feb4 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800e78e:	f004 fec7 	bl	8013520 <HAL_ICACHE_Enable>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	bf14      	ite	ne
 800e798:	2301      	movne	r3, #1
 800e79a:	2300      	moveq	r3, #0
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 800e7a2:	f000 fea8 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800e7a6:	bf00      	nop
 800e7a8:	bd80      	pop	{r7, pc}
	...

0800e7ac <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e7b0:	4b2c      	ldr	r3, [pc, #176]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7b2:	4a2d      	ldr	r2, [pc, #180]	; (800e868 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 800e7b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800e7b6:	4b2b      	ldr	r3, [pc, #172]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7b8:	4a2c      	ldr	r2, [pc, #176]	; (800e86c <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 800e7ba:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e7bc:	4b29      	ldr	r3, [pc, #164]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e7c2:	4b28      	ldr	r3, [pc, #160]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e7c8:	4b26      	ldr	r3, [pc, #152]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e7ce:	4b25      	ldr	r3, [pc, #148]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7d0:	220c      	movs	r2, #12
 800e7d2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e7d4:	4b23      	ldr	r3, [pc, #140]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e7da:	4b22      	ldr	r3, [pc, #136]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800e7e0:	4b20      	ldr	r3, [pc, #128]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e7e6:	4b1f      	ldr	r3, [pc, #124]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800e7ec:	4b1d      	ldr	r3, [pc, #116]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e7f2:	481c      	ldr	r0, [pc, #112]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e7f4:	f009 fda8 	bl	8018348 <HAL_UART_Init>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	bf14      	ite	ne
 800e7fe:	2301      	movne	r3, #1
 800e800:	2300      	moveq	r3, #0
 800e802:	b2db      	uxtb	r3, r3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d001      	beq.n	800e80c <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 800e808:	f000 fe75 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e80c:	2100      	movs	r1, #0
 800e80e:	4815      	ldr	r0, [pc, #84]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e810:	f00b fd6b 	bl	801a2ea <HAL_UARTEx_SetTxFifoThreshold>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	bf14      	ite	ne
 800e81a:	2301      	movne	r3, #1
 800e81c:	2300      	moveq	r3, #0
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	d001      	beq.n	800e828 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 800e824:	f000 fe67 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e828:	2100      	movs	r1, #0
 800e82a:	480e      	ldr	r0, [pc, #56]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e82c:	f00b fd9b 	bl	801a366 <HAL_UARTEx_SetRxFifoThreshold>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	bf14      	ite	ne
 800e836:	2301      	movne	r3, #1
 800e838:	2300      	moveq	r3, #0
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d001      	beq.n	800e844 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 800e840:	f000 fe59 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800e844:	4807      	ldr	r0, [pc, #28]	; (800e864 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800e846:	f00b fd17 	bl	801a278 <HAL_UARTEx_DisableFifoMode>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	bf14      	ite	ne
 800e850:	2301      	movne	r3, #1
 800e852:	2300      	moveq	r3, #0
 800e854:	b2db      	uxtb	r3, r3
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 800e85a:	f000 fe4c 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e85e:	bf00      	nop
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	2000084c 	.word	0x2000084c
 800e868:	40008000 	.word	0x40008000
 800e86c:	00033324 	.word	0x00033324

0800e870 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800e874:	4b2c      	ldr	r3, [pc, #176]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e876:	4a2d      	ldr	r2, [pc, #180]	; (800e92c <_ZL13MX_UART4_Initv+0xbc>)
 800e878:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e87a:	4b2b      	ldr	r3, [pc, #172]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e87c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e880:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e882:	4b29      	ldr	r3, [pc, #164]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e884:	2200      	movs	r2, #0
 800e886:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e888:	4b27      	ldr	r3, [pc, #156]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e88a:	2200      	movs	r2, #0
 800e88c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e88e:	4b26      	ldr	r3, [pc, #152]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e890:	2200      	movs	r2, #0
 800e892:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 800e894:	4b24      	ldr	r3, [pc, #144]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e896:	2204      	movs	r2, #4
 800e898:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e89a:	4b23      	ldr	r3, [pc, #140]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e8a0:	4b21      	ldr	r3, [pc, #132]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e8a6:	4b20      	ldr	r3, [pc, #128]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800e8ac:	4b1e      	ldr	r3, [pc, #120]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e8b2:	4b1d      	ldr	r3, [pc, #116]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e8b8:	481b      	ldr	r0, [pc, #108]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e8ba:	f009 fd45 	bl	8018348 <HAL_UART_Init>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	bf14      	ite	ne
 800e8c4:	2301      	movne	r3, #1
 800e8c6:	2300      	moveq	r3, #0
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d001      	beq.n	800e8d2 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 800e8ce:	f000 fe12 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	4814      	ldr	r0, [pc, #80]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e8d6:	f00b fd08 	bl	801a2ea <HAL_UARTEx_SetTxFifoThreshold>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bf14      	ite	ne
 800e8e0:	2301      	movne	r3, #1
 800e8e2:	2300      	moveq	r3, #0
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 800e8ea:	f000 fe04 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	480d      	ldr	r0, [pc, #52]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e8f2:	f00b fd38 	bl	801a366 <HAL_UARTEx_SetRxFifoThreshold>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	bf14      	ite	ne
 800e8fc:	2301      	movne	r3, #1
 800e8fe:	2300      	moveq	r3, #0
 800e900:	b2db      	uxtb	r3, r3
 800e902:	2b00      	cmp	r3, #0
 800e904:	d001      	beq.n	800e90a <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 800e906:	f000 fdf6 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800e90a:	4807      	ldr	r0, [pc, #28]	; (800e928 <_ZL13MX_UART4_Initv+0xb8>)
 800e90c:	f00b fcb4 	bl	801a278 <HAL_UARTEx_DisableFifoMode>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	bf14      	ite	ne
 800e916:	2301      	movne	r3, #1
 800e918:	2300      	moveq	r3, #0
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d001      	beq.n	800e924 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 800e920:	f000 fde9 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800e924:	bf00      	nop
 800e926:	bd80      	pop	{r7, pc}
 800e928:	200008e0 	.word	0x200008e0
 800e92c:	40004c00 	.word	0x40004c00

0800e930 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800e934:	4b2c      	ldr	r3, [pc, #176]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e936:	4a2d      	ldr	r2, [pc, #180]	; (800e9ec <_ZL19MX_USART2_UART_Initv+0xbc>)
 800e938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800e93a:	4b2b      	ldr	r3, [pc, #172]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e93c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e942:	4b29      	ldr	r3, [pc, #164]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e944:	2200      	movs	r2, #0
 800e946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e948:	4b27      	ldr	r3, [pc, #156]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e94e:	4b26      	ldr	r3, [pc, #152]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e950:	2200      	movs	r2, #0
 800e952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800e954:	4b24      	ldr	r3, [pc, #144]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e956:	2208      	movs	r2, #8
 800e958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e95a:	4b23      	ldr	r3, [pc, #140]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e960:	4b21      	ldr	r3, [pc, #132]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e962:	2200      	movs	r2, #0
 800e964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e966:	4b20      	ldr	r3, [pc, #128]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e968:	2200      	movs	r2, #0
 800e96a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800e96c:	4b1e      	ldr	r3, [pc, #120]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e96e:	2200      	movs	r2, #0
 800e970:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e972:	4b1d      	ldr	r3, [pc, #116]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e974:	2200      	movs	r2, #0
 800e976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800e978:	481b      	ldr	r0, [pc, #108]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e97a:	f009 fce5 	bl	8018348 <HAL_UART_Init>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	bf14      	ite	ne
 800e984:	2301      	movne	r3, #1
 800e986:	2300      	moveq	r3, #0
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800e98e:	f000 fdb2 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e992:	2100      	movs	r1, #0
 800e994:	4814      	ldr	r0, [pc, #80]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e996:	f00b fca8 	bl	801a2ea <HAL_UARTEx_SetTxFifoThreshold>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	bf14      	ite	ne
 800e9a0:	2301      	movne	r3, #1
 800e9a2:	2300      	moveq	r3, #0
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800e9aa:	f000 fda4 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	480d      	ldr	r0, [pc, #52]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e9b2:	f00b fcd8 	bl	801a366 <HAL_UARTEx_SetRxFifoThreshold>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	bf14      	ite	ne
 800e9bc:	2301      	movne	r3, #1
 800e9be:	2300      	moveq	r3, #0
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d001      	beq.n	800e9ca <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800e9c6:	f000 fd96 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800e9ca:	4807      	ldr	r0, [pc, #28]	; (800e9e8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800e9cc:	f00b fc54 	bl	801a278 <HAL_UARTEx_DisableFifoMode>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	bf14      	ite	ne
 800e9d6:	2301      	movne	r3, #1
 800e9d8:	2300      	moveq	r3, #0
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d001      	beq.n	800e9e4 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 800e9e0:	f000 fd89 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800e9e4:	bf00      	nop
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	20000974 	.word	0x20000974
 800e9ec:	40004400 	.word	0x40004400

0800e9f0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800e9f6:	463b      	mov	r3, r7
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	601a      	str	r2, [r3, #0]
 800e9fc:	605a      	str	r2, [r3, #4]
 800e9fe:	609a      	str	r2, [r3, #8]
 800ea00:	60da      	str	r2, [r3, #12]
 800ea02:	611a      	str	r2, [r3, #16]
 800ea04:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800ea06:	4b22      	ldr	r3, [pc, #136]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea08:	4a22      	ldr	r2, [pc, #136]	; (800ea94 <_ZL11MX_RTC_Initv+0xa4>)
 800ea0a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ea0c:	4b20      	ldr	r3, [pc, #128]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ea12:	4b1f      	ldr	r3, [pc, #124]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea14:	227f      	movs	r2, #127	; 0x7f
 800ea16:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ea18:	4b1d      	ldr	r3, [pc, #116]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea1a:	22ff      	movs	r2, #255	; 0xff
 800ea1c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ea1e:	4b1c      	ldr	r3, [pc, #112]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800ea24:	4b1a      	ldr	r3, [pc, #104]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ea2a:	4b19      	ldr	r3, [pc, #100]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ea30:	4b17      	ldr	r3, [pc, #92]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ea36:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800ea38:	4b15      	ldr	r3, [pc, #84]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ea3e:	4814      	ldr	r0, [pc, #80]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea40:	f006 fc32 	bl	80152a8 <HAL_RTC_Init>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	bf14      	ite	ne
 800ea4a:	2301      	movne	r3, #1
 800ea4c:	2300      	moveq	r3, #0
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d001      	beq.n	800ea58 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 800ea54:	f000 fd4f 	bl	800f4f6 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800ea60:	2300      	movs	r3, #0
 800ea62:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800ea68:	463b      	mov	r3, r7
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	4808      	ldr	r0, [pc, #32]	; (800ea90 <_ZL11MX_RTC_Initv+0xa0>)
 800ea6e:	f006 fd29 	bl	80154c4 <HAL_RTCEx_PrivilegeModeSet>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bf14      	ite	ne
 800ea78:	2301      	movne	r3, #1
 800ea7a:	2300      	moveq	r3, #0
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d001      	beq.n	800ea86 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 800ea82:	f000 fd38 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800ea86:	bf00      	nop
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20000a08 	.word	0x20000a08
 800ea94:	40002800 	.word	0x40002800

0800ea98 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800ea9c:	4b1d      	ldr	r3, [pc, #116]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800ea9e:	4a1e      	ldr	r2, [pc, #120]	; (800eb18 <_ZL12MX_SPI1_Initv+0x80>)
 800eaa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800eaa2:	4b1c      	ldr	r3, [pc, #112]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eaa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800eaa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800eaaa:	4b1a      	ldr	r3, [pc, #104]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eaac:	2200      	movs	r2, #0
 800eaae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800eab0:	4b18      	ldr	r3, [pc, #96]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eab2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800eab6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800eab8:	4b16      	ldr	r3, [pc, #88]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800eabe:	4b15      	ldr	r3, [pc, #84]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800eac4:	4b13      	ldr	r3, [pc, #76]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eaca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800eacc:	4b11      	ldr	r3, [pc, #68]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eace:	2228      	movs	r2, #40	; 0x28
 800ead0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ead2:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ead8:	4b0e      	ldr	r3, [pc, #56]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eada:	2200      	movs	r2, #0
 800eadc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eade:	4b0d      	ldr	r3, [pc, #52]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800eae4:	4b0b      	ldr	r3, [pc, #44]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eae6:	2207      	movs	r2, #7
 800eae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800eaea:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eaec:	2200      	movs	r2, #0
 800eaee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800eaf0:	4b08      	ldr	r3, [pc, #32]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eaf2:	2208      	movs	r2, #8
 800eaf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800eaf6:	4807      	ldr	r0, [pc, #28]	; (800eb14 <_ZL12MX_SPI1_Initv+0x7c>)
 800eaf8:	f006 fd10 	bl	801551c <HAL_SPI_Init>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	bf14      	ite	ne
 800eb02:	2301      	movne	r3, #1
 800eb04:	2300      	moveq	r3, #0
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d001      	beq.n	800eb10 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 800eb0c:	f000 fcf3 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800eb10:	bf00      	nop
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	20000a30 	.word	0x20000a30
 800eb18:	40013000 	.word	0x40013000

0800eb1c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800eb20:	4b1d      	ldr	r3, [pc, #116]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb22:	4a1e      	ldr	r2, [pc, #120]	; (800eb9c <_ZL12MX_SPI2_Initv+0x80>)
 800eb24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800eb26:	4b1c      	ldr	r3, [pc, #112]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb28:	f44f 7282 	mov.w	r2, #260	; 0x104
 800eb2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800eb2e:	4b1a      	ldr	r3, [pc, #104]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800eb34:	4b18      	ldr	r3, [pc, #96]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800eb3a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800eb3c:	4b16      	ldr	r3, [pc, #88]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb3e:	2200      	movs	r2, #0
 800eb40:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800eb42:	4b15      	ldr	r3, [pc, #84]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800eb48:	4b13      	ldr	r3, [pc, #76]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb4e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800eb50:	4b11      	ldr	r3, [pc, #68]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb52:	2218      	movs	r2, #24
 800eb54:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800eb56:	4b10      	ldr	r3, [pc, #64]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb58:	2280      	movs	r2, #128	; 0x80
 800eb5a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800eb5c:	4b0e      	ldr	r3, [pc, #56]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb62:	4b0d      	ldr	r3, [pc, #52]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800eb68:	4b0b      	ldr	r3, [pc, #44]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb6a:	2207      	movs	r2, #7
 800eb6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800eb6e:	4b0a      	ldr	r3, [pc, #40]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800eb74:	4b08      	ldr	r3, [pc, #32]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb76:	2208      	movs	r2, #8
 800eb78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800eb7a:	4807      	ldr	r0, [pc, #28]	; (800eb98 <_ZL12MX_SPI2_Initv+0x7c>)
 800eb7c:	f006 fcce 	bl	801551c <HAL_SPI_Init>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	bf14      	ite	ne
 800eb86:	2301      	movne	r3, #1
 800eb88:	2300      	moveq	r3, #0
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800eb90:	f000 fcb1 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800eb94:	bf00      	nop
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	20000a94 	.word	0x20000a94
 800eb9c:	40003800 	.word	0x40003800

0800eba0 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800eba4:	4b1d      	ldr	r3, [pc, #116]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800eba6:	4a1e      	ldr	r2, [pc, #120]	; (800ec20 <_ZL12MX_SPI3_Initv+0x80>)
 800eba8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ebaa:	4b1c      	ldr	r3, [pc, #112]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebac:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ebb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ebb2:	4b1a      	ldr	r3, [pc, #104]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ebb8:	4b18      	ldr	r3, [pc, #96]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ebbe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ebc0:	4b16      	ldr	r3, [pc, #88]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ebc6:	4b15      	ldr	r3, [pc, #84]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ebcc:	4b13      	ldr	r3, [pc, #76]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebd2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ebd4:	4b11      	ldr	r3, [pc, #68]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebd6:	2218      	movs	r2, #24
 800ebd8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ebda:	4b10      	ldr	r3, [pc, #64]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebdc:	2200      	movs	r2, #0
 800ebde:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ebe0:	4b0e      	ldr	r3, [pc, #56]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ebe6:	4b0d      	ldr	r3, [pc, #52]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800ebec:	4b0b      	ldr	r3, [pc, #44]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebee:	2207      	movs	r2, #7
 800ebf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800ebf2:	4b0a      	ldr	r3, [pc, #40]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ebf8:	4b08      	ldr	r3, [pc, #32]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ebfa:	2208      	movs	r2, #8
 800ebfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ebfe:	4807      	ldr	r0, [pc, #28]	; (800ec1c <_ZL12MX_SPI3_Initv+0x7c>)
 800ec00:	f006 fc8c 	bl	801551c <HAL_SPI_Init>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	bf14      	ite	ne
 800ec0a:	2301      	movne	r3, #1
 800ec0c:	2300      	moveq	r3, #0
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 800ec14:	f000 fc6f 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ec18:	bf00      	nop
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	20000af8 	.word	0x20000af8
 800ec20:	40003c00 	.word	0x40003c00

0800ec24 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b08c      	sub	sp, #48	; 0x30
 800ec28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ec2a:	f107 0320 	add.w	r3, r7, #32
 800ec2e:	2200      	movs	r2, #0
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	605a      	str	r2, [r3, #4]
 800ec34:	609a      	str	r2, [r3, #8]
 800ec36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ec38:	f107 0314 	add.w	r3, r7, #20
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	605a      	str	r2, [r3, #4]
 800ec42:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ec44:	1d3b      	adds	r3, r7, #4
 800ec46:	2200      	movs	r2, #0
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	605a      	str	r2, [r3, #4]
 800ec4c:	609a      	str	r2, [r3, #8]
 800ec4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ec50:	4b43      	ldr	r3, [pc, #268]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ec52:	4a44      	ldr	r2, [pc, #272]	; (800ed64 <_ZL12MX_TIM1_Initv+0x140>)
 800ec54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 800ec56:	4b42      	ldr	r3, [pc, #264]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ec58:	226e      	movs	r2, #110	; 0x6e
 800ec5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec5c:	4b40      	ldr	r3, [pc, #256]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 800ec62:	4b3f      	ldr	r3, [pc, #252]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ec64:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ec68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ec6a:	4b3d      	ldr	r3, [pc, #244]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ec70:	4b3b      	ldr	r3, [pc, #236]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ec76:	4b3a      	ldr	r3, [pc, #232]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ec78:	2280      	movs	r2, #128	; 0x80
 800ec7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ec7c:	4838      	ldr	r0, [pc, #224]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ec7e:	f007 fb5d 	bl	801633c <HAL_TIM_Base_Init>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	bf14      	ite	ne
 800ec88:	2301      	movne	r3, #1
 800ec8a:	2300      	moveq	r3, #0
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d001      	beq.n	800ec96 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 800ec92:	f000 fc30 	bl	800f4f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ec96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ec9c:	f107 0320 	add.w	r3, r7, #32
 800eca0:	4619      	mov	r1, r3
 800eca2:	482f      	ldr	r0, [pc, #188]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800eca4:	f008 fb88 	bl	80173b8 <HAL_TIM_ConfigClockSource>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	bf14      	ite	ne
 800ecae:	2301      	movne	r3, #1
 800ecb0:	2300      	moveq	r3, #0
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 800ecb8:	f000 fc1d 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800ecbc:	4828      	ldr	r0, [pc, #160]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ecbe:	f007 fdcb 	bl	8016858 <HAL_TIM_IC_Init>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	bf14      	ite	ne
 800ecc8:	2301      	movne	r3, #1
 800ecca:	2300      	moveq	r3, #0
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800ecd2:	f000 fc10 	bl	800f4f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ecde:	2300      	movs	r3, #0
 800ece0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ece2:	f107 0314 	add.w	r3, r7, #20
 800ece6:	4619      	mov	r1, r3
 800ece8:	481d      	ldr	r0, [pc, #116]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ecea:	f009 f9e7 	bl	80180bc <HAL_TIMEx_MasterConfigSynchronization>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	bf14      	ite	ne
 800ecf4:	2301      	movne	r3, #1
 800ecf6:	2300      	moveq	r3, #0
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800ecfe:	f000 fbfa 	bl	800f4f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ed02:	2300      	movs	r3, #0
 800ed04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ed06:	2301      	movs	r3, #1
 800ed08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ed12:	1d3b      	adds	r3, r7, #4
 800ed14:	2208      	movs	r2, #8
 800ed16:	4619      	mov	r1, r3
 800ed18:	4811      	ldr	r0, [pc, #68]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ed1a:	f008 f99c 	bl	8017056 <HAL_TIM_IC_ConfigChannel>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	bf14      	ite	ne
 800ed24:	2301      	movne	r3, #1
 800ed26:	2300      	moveq	r3, #0
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800ed2e:	f000 fbe2 	bl	800f4f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ed32:	2302      	movs	r3, #2
 800ed34:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800ed36:	1d3b      	adds	r3, r7, #4
 800ed38:	220c      	movs	r2, #12
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	4808      	ldr	r0, [pc, #32]	; (800ed60 <_ZL12MX_TIM1_Initv+0x13c>)
 800ed3e:	f008 f98a 	bl	8017056 <HAL_TIM_IC_ConfigChannel>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	bf14      	ite	ne
 800ed48:	2301      	movne	r3, #1
 800ed4a:	2300      	moveq	r3, #0
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d001      	beq.n	800ed56 <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 800ed52:	f000 fbd0 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ed56:	bf00      	nop
 800ed58:	3730      	adds	r7, #48	; 0x30
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	20000b5c 	.word	0x20000b5c
 800ed64:	40012c00 	.word	0x40012c00

0800ed68 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b08c      	sub	sp, #48	; 0x30
 800ed6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ed6e:	f107 030c 	add.w	r3, r7, #12
 800ed72:	2224      	movs	r2, #36	; 0x24
 800ed74:	2100      	movs	r1, #0
 800ed76:	4618      	mov	r0, r3
 800ed78:	f011 fc23 	bl	80205c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ed7c:	463b      	mov	r3, r7
 800ed7e:	2200      	movs	r2, #0
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	605a      	str	r2, [r3, #4]
 800ed84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ed86:	4b26      	ldr	r3, [pc, #152]	; (800ee20 <_ZL12MX_TIM3_Initv+0xb8>)
 800ed88:	4a26      	ldr	r2, [pc, #152]	; (800ee24 <_ZL12MX_TIM3_Initv+0xbc>)
 800ed8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ed8c:	4b24      	ldr	r3, [pc, #144]	; (800ee20 <_ZL12MX_TIM3_Initv+0xb8>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ed92:	4b23      	ldr	r3, [pc, #140]	; (800ee20 <_ZL12MX_TIM3_Initv+0xb8>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800ed98:	4b21      	ldr	r3, [pc, #132]	; (800ee20 <_ZL12MX_TIM3_Initv+0xb8>)
 800ed9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eda0:	4b1f      	ldr	r3, [pc, #124]	; (800ee20 <_ZL12MX_TIM3_Initv+0xb8>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eda6:	4b1e      	ldr	r3, [pc, #120]	; (800ee20 <_ZL12MX_TIM3_Initv+0xb8>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800edac:	2303      	movs	r3, #3
 800edae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800edb0:	2300      	movs	r3, #0
 800edb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800edb4:	2301      	movs	r3, #1
 800edb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800edb8:	2300      	movs	r3, #0
 800edba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800edc0:	2300      	movs	r3, #0
 800edc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800edc4:	2301      	movs	r3, #1
 800edc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800edc8:	2300      	movs	r3, #0
 800edca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800edd0:	f107 030c 	add.w	r3, r7, #12
 800edd4:	4619      	mov	r1, r3
 800edd6:	4812      	ldr	r0, [pc, #72]	; (800ee20 <_ZL12MX_TIM3_Initv+0xb8>)
 800edd8:	f007 feea 	bl	8016bb0 <HAL_TIM_Encoder_Init>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	bf14      	ite	ne
 800ede2:	2301      	movne	r3, #1
 800ede4:	2300      	moveq	r3, #0
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 800edec:	f000 fb83 	bl	800f4f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800edf0:	2300      	movs	r3, #0
 800edf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800edf4:	2300      	movs	r3, #0
 800edf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800edf8:	463b      	mov	r3, r7
 800edfa:	4619      	mov	r1, r3
 800edfc:	4808      	ldr	r0, [pc, #32]	; (800ee20 <_ZL12MX_TIM3_Initv+0xb8>)
 800edfe:	f009 f95d 	bl	80180bc <HAL_TIMEx_MasterConfigSynchronization>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	bf14      	ite	ne
 800ee08:	2301      	movne	r3, #1
 800ee0a:	2300      	moveq	r3, #0
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d001      	beq.n	800ee16 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800ee12:	f000 fb70 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ee16:	bf00      	nop
 800ee18:	3730      	adds	r7, #48	; 0x30
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	20000ba8 	.word	0x20000ba8
 800ee24:	40000400 	.word	0x40000400

0800ee28 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08e      	sub	sp, #56	; 0x38
 800ee2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ee2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee32:	2200      	movs	r2, #0
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	605a      	str	r2, [r3, #4]
 800ee38:	609a      	str	r2, [r3, #8]
 800ee3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ee3c:	f107 031c 	add.w	r3, r7, #28
 800ee40:	2200      	movs	r2, #0
 800ee42:	601a      	str	r2, [r3, #0]
 800ee44:	605a      	str	r2, [r3, #4]
 800ee46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ee48:	463b      	mov	r3, r7
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	601a      	str	r2, [r3, #0]
 800ee4e:	605a      	str	r2, [r3, #4]
 800ee50:	609a      	str	r2, [r3, #8]
 800ee52:	60da      	str	r2, [r3, #12]
 800ee54:	611a      	str	r2, [r3, #16]
 800ee56:	615a      	str	r2, [r3, #20]
 800ee58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800ee5a:	4b41      	ldr	r3, [pc, #260]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ee5c:	4a41      	ldr	r2, [pc, #260]	; (800ef64 <_ZL12MX_TIM5_Initv+0x13c>)
 800ee5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800ee60:	4b3f      	ldr	r3, [pc, #252]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800ee66:	4b3e      	ldr	r3, [pc, #248]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ee68:	2220      	movs	r2, #32
 800ee6a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 800ee6c:	4b3c      	ldr	r3, [pc, #240]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ee6e:	f240 722a 	movw	r2, #1834	; 0x72a
 800ee72:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ee74:	4b3a      	ldr	r3, [pc, #232]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ee76:	2200      	movs	r2, #0
 800ee78:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ee7a:	4b39      	ldr	r3, [pc, #228]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ee7c:	2280      	movs	r2, #128	; 0x80
 800ee7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ee80:	4837      	ldr	r0, [pc, #220]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ee82:	f007 fa5b 	bl	801633c <HAL_TIM_Base_Init>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	bf14      	ite	ne
 800ee8c:	2301      	movne	r3, #1
 800ee8e:	2300      	moveq	r3, #0
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d001      	beq.n	800ee9a <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800ee96:	f000 fb2e 	bl	800f4f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ee9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800eea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eea4:	4619      	mov	r1, r3
 800eea6:	482e      	ldr	r0, [pc, #184]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800eea8:	f008 fa86 	bl	80173b8 <HAL_TIM_ConfigClockSource>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	bf14      	ite	ne
 800eeb2:	2301      	movne	r3, #1
 800eeb4:	2300      	moveq	r3, #0
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d001      	beq.n	800eec0 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800eebc:	f000 fb1b 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800eec0:	4827      	ldr	r0, [pc, #156]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800eec2:	f007 fb6b 	bl	801659c <HAL_TIM_PWM_Init>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	bf14      	ite	ne
 800eecc:	2301      	movne	r3, #1
 800eece:	2300      	moveq	r3, #0
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d001      	beq.n	800eeda <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800eed6:	f000 fb0e 	bl	800f4f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eeda:	2300      	movs	r3, #0
 800eedc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eede:	2300      	movs	r3, #0
 800eee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800eee2:	f107 031c 	add.w	r3, r7, #28
 800eee6:	4619      	mov	r1, r3
 800eee8:	481d      	ldr	r0, [pc, #116]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800eeea:	f009 f8e7 	bl	80180bc <HAL_TIMEx_MasterConfigSynchronization>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	bf14      	ite	ne
 800eef4:	2301      	movne	r3, #1
 800eef6:	2300      	moveq	r3, #0
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d001      	beq.n	800ef02 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800eefe:	f000 fafa 	bl	800f4f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ef02:	2360      	movs	r3, #96	; 0x60
 800ef04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ef12:	463b      	mov	r3, r7
 800ef14:	2200      	movs	r2, #0
 800ef16:	4619      	mov	r1, r3
 800ef18:	4811      	ldr	r0, [pc, #68]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ef1a:	f008 f939 	bl	8017190 <HAL_TIM_PWM_ConfigChannel>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	bf14      	ite	ne
 800ef24:	2301      	movne	r3, #1
 800ef26:	2300      	moveq	r3, #0
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d001      	beq.n	800ef32 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800ef2e:	f000 fae2 	bl	800f4f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ef32:	463b      	mov	r3, r7
 800ef34:	220c      	movs	r2, #12
 800ef36:	4619      	mov	r1, r3
 800ef38:	4809      	ldr	r0, [pc, #36]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ef3a:	f008 f929 	bl	8017190 <HAL_TIM_PWM_ConfigChannel>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	bf14      	ite	ne
 800ef44:	2301      	movne	r3, #1
 800ef46:	2300      	moveq	r3, #0
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800ef4e:	f000 fad2 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800ef52:	4803      	ldr	r0, [pc, #12]	; (800ef60 <_ZL12MX_TIM5_Initv+0x138>)
 800ef54:	f000 ff2c 	bl	800fdb0 <HAL_TIM_MspPostInit>

}
 800ef58:	bf00      	nop
 800ef5a:	3738      	adds	r7, #56	; 0x38
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	20000bf4 	.word	0x20000bf4
 800ef64:	40000c00 	.word	0x40000c00

0800ef68 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ef6e:	1d3b      	adds	r3, r7, #4
 800ef70:	2200      	movs	r2, #0
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	605a      	str	r2, [r3, #4]
 800ef76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ef78:	4b19      	ldr	r3, [pc, #100]	; (800efe0 <_ZL12MX_TIM6_Initv+0x78>)
 800ef7a:	4a1a      	ldr	r2, [pc, #104]	; (800efe4 <_ZL12MX_TIM6_Initv+0x7c>)
 800ef7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 800ef7e:	4b18      	ldr	r3, [pc, #96]	; (800efe0 <_ZL12MX_TIM6_Initv+0x78>)
 800ef80:	226e      	movs	r2, #110	; 0x6e
 800ef82:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ef84:	4b16      	ldr	r3, [pc, #88]	; (800efe0 <_ZL12MX_TIM6_Initv+0x78>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800ef8a:	4b15      	ldr	r3, [pc, #84]	; (800efe0 <_ZL12MX_TIM6_Initv+0x78>)
 800ef8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef90:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ef92:	4b13      	ldr	r3, [pc, #76]	; (800efe0 <_ZL12MX_TIM6_Initv+0x78>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ef98:	4811      	ldr	r0, [pc, #68]	; (800efe0 <_ZL12MX_TIM6_Initv+0x78>)
 800ef9a:	f007 f9cf 	bl	801633c <HAL_TIM_Base_Init>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	bf14      	ite	ne
 800efa4:	2301      	movne	r3, #1
 800efa6:	2300      	moveq	r3, #0
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d001      	beq.n	800efb2 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800efae:	f000 faa2 	bl	800f4f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800efb2:	2300      	movs	r3, #0
 800efb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800efb6:	2300      	movs	r3, #0
 800efb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800efba:	1d3b      	adds	r3, r7, #4
 800efbc:	4619      	mov	r1, r3
 800efbe:	4808      	ldr	r0, [pc, #32]	; (800efe0 <_ZL12MX_TIM6_Initv+0x78>)
 800efc0:	f009 f87c 	bl	80180bc <HAL_TIMEx_MasterConfigSynchronization>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	bf14      	ite	ne
 800efca:	2301      	movne	r3, #1
 800efcc:	2300      	moveq	r3, #0
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d001      	beq.n	800efd8 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800efd4:	f000 fa8f 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800efd8:	bf00      	nop
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	20000c40 	.word	0x20000c40
 800efe4:	40001000 	.word	0x40001000

0800efe8 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b098      	sub	sp, #96	; 0x60
 800efec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800efee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800eff2:	2200      	movs	r2, #0
 800eff4:	601a      	str	r2, [r3, #0]
 800eff6:	605a      	str	r2, [r3, #4]
 800eff8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800effa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800effe:	2200      	movs	r2, #0
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	605a      	str	r2, [r3, #4]
 800f004:	609a      	str	r2, [r3, #8]
 800f006:	60da      	str	r2, [r3, #12]
 800f008:	611a      	str	r2, [r3, #16]
 800f00a:	615a      	str	r2, [r3, #20]
 800f00c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f00e:	1d3b      	adds	r3, r7, #4
 800f010:	2234      	movs	r2, #52	; 0x34
 800f012:	2100      	movs	r1, #0
 800f014:	4618      	mov	r0, r3
 800f016:	f011 fad4 	bl	80205c2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f01a:	4b45      	ldr	r3, [pc, #276]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f01c:	4a45      	ldr	r2, [pc, #276]	; (800f134 <_ZL12MX_TIM8_Initv+0x14c>)
 800f01e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 800f020:	4b43      	ldr	r3, [pc, #268]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f022:	226e      	movs	r2, #110	; 0x6e
 800f024:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f026:	4b42      	ldr	r3, [pc, #264]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f028:	2200      	movs	r2, #0
 800f02a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 800f02c:	4b40      	ldr	r3, [pc, #256]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f02e:	f242 7210 	movw	r2, #10000	; 0x2710
 800f032:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f034:	4b3e      	ldr	r3, [pc, #248]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f036:	2200      	movs	r2, #0
 800f038:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f03a:	4b3d      	ldr	r3, [pc, #244]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f040:	4b3b      	ldr	r3, [pc, #236]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f042:	2200      	movs	r2, #0
 800f044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f046:	483a      	ldr	r0, [pc, #232]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f048:	f007 faa8 	bl	801659c <HAL_TIM_PWM_Init>
 800f04c:	4603      	mov	r3, r0
 800f04e:	2b00      	cmp	r3, #0
 800f050:	bf14      	ite	ne
 800f052:	2301      	movne	r3, #1
 800f054:	2300      	moveq	r3, #0
 800f056:	b2db      	uxtb	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 800f05c:	f000 fa4b 	bl	800f4f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f060:	2300      	movs	r3, #0
 800f062:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f064:	2300      	movs	r3, #0
 800f066:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f068:	2300      	movs	r3, #0
 800f06a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f06c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f070:	4619      	mov	r1, r3
 800f072:	482f      	ldr	r0, [pc, #188]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f074:	f009 f822 	bl	80180bc <HAL_TIMEx_MasterConfigSynchronization>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	bf14      	ite	ne
 800f07e:	2301      	movne	r3, #1
 800f080:	2300      	moveq	r3, #0
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d001      	beq.n	800f08c <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 800f088:	f000 fa35 	bl	800f4f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f08c:	2360      	movs	r3, #96	; 0x60
 800f08e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800f090:	2300      	movs	r3, #0
 800f092:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f094:	2300      	movs	r3, #0
 800f096:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f098:	2300      	movs	r3, #0
 800f09a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f09c:	2300      	movs	r3, #0
 800f09e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f0a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	481f      	ldr	r0, [pc, #124]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f0b2:	f008 f86d 	bl	8017190 <HAL_TIM_PWM_ConfigChannel>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	bf14      	ite	ne
 800f0bc:	2301      	movne	r3, #1
 800f0be:	2300      	moveq	r3, #0
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d001      	beq.n	800f0ca <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 800f0c6:	f000 fa16 	bl	800f4f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f0de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f0e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f0f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f0f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f0fe:	2300      	movs	r3, #0
 800f100:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f102:	1d3b      	adds	r3, r7, #4
 800f104:	4619      	mov	r1, r3
 800f106:	480a      	ldr	r0, [pc, #40]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f108:	f009 f860 	bl	80181cc <HAL_TIMEx_ConfigBreakDeadTime>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	bf14      	ite	ne
 800f112:	2301      	movne	r3, #1
 800f114:	2300      	moveq	r3, #0
 800f116:	b2db      	uxtb	r3, r3
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d001      	beq.n	800f120 <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 800f11c:	f000 f9eb 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f120:	4803      	ldr	r0, [pc, #12]	; (800f130 <_ZL12MX_TIM8_Initv+0x148>)
 800f122:	f000 fe45 	bl	800fdb0 <HAL_TIM_MspPostInit>

}
 800f126:	bf00      	nop
 800f128:	3760      	adds	r7, #96	; 0x60
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20000c8c 	.word	0x20000c8c
 800f134:	40013400 	.word	0x40013400

0800f138 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f13e:	463b      	mov	r3, r7
 800f140:	2200      	movs	r2, #0
 800f142:	601a      	str	r2, [r3, #0]
 800f144:	605a      	str	r2, [r3, #4]
 800f146:	609a      	str	r2, [r3, #8]
 800f148:	60da      	str	r2, [r3, #12]
 800f14a:	611a      	str	r2, [r3, #16]
 800f14c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800f14e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f152:	f7ff f8a5 	bl	800e2a0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800f156:	2002      	movs	r0, #2
 800f158:	f7ff f88a 	bl	800e270 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800f15c:	2001      	movs	r0, #1
 800f15e:	f7ff f887 	bl	800e270 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800f162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f166:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800f168:	2303      	movs	r3, #3
 800f16a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f16c:	2300      	movs	r3, #0
 800f16e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f170:	463b      	mov	r3, r7
 800f172:	4619      	mov	r1, r3
 800f174:	4809      	ldr	r0, [pc, #36]	; (800f19c <_ZL13MX_UCPD1_Initv+0x64>)
 800f176:	f00b face 	bl	801a716 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800f17a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f17e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800f180:	2303      	movs	r3, #3
 800f182:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800f184:	2300      	movs	r3, #0
 800f186:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f188:	463b      	mov	r3, r7
 800f18a:	4619      	mov	r1, r3
 800f18c:	4804      	ldr	r0, [pc, #16]	; (800f1a0 <_ZL13MX_UCPD1_Initv+0x68>)
 800f18e:	f00b fac2 	bl	801a716 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800f192:	bf00      	nop
 800f194:	3718      	adds	r7, #24
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	42020400 	.word	0x42020400
 800f1a0:	42020000 	.word	0x42020000

0800f1a4 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800f1a8:	4b13      	ldr	r3, [pc, #76]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1aa:	4a14      	ldr	r2, [pc, #80]	; (800f1fc <_ZL15MX_USB_PCD_Initv+0x58>)
 800f1ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f1ae:	4b12      	ldr	r3, [pc, #72]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1b0:	2208      	movs	r2, #8
 800f1b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f1b4:	4b10      	ldr	r3, [pc, #64]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1b6:	2202      	movs	r2, #2
 800f1b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f1ba:	4b0f      	ldr	r3, [pc, #60]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1bc:	2202      	movs	r2, #2
 800f1be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f1c0:	4b0d      	ldr	r3, [pc, #52]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f1c6:	4b0c      	ldr	r3, [pc, #48]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f1cc:	4b0a      	ldr	r3, [pc, #40]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f1d2:	4b09      	ldr	r3, [pc, #36]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f1d8:	4807      	ldr	r0, [pc, #28]	; (800f1f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 800f1da:	f004 f9b1 	bl	8013540 <HAL_PCD_Init>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bf14      	ite	ne
 800f1e4:	2301      	movne	r3, #1
 800f1e6:	2300      	moveq	r3, #0
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d001      	beq.n	800f1f2 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 800f1ee:	f000 f982 	bl	800f4f6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800f1f2:	bf00      	nop
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	20000cd8 	.word	0x20000cd8
 800f1fc:	4000d400 	.word	0x4000d400

0800f200 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800f206:	4b12      	ldr	r3, [pc, #72]	; (800f250 <_ZL11MX_DMA_Initv+0x50>)
 800f208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f20a:	4a11      	ldr	r2, [pc, #68]	; (800f250 <_ZL11MX_DMA_Initv+0x50>)
 800f20c:	f043 0304 	orr.w	r3, r3, #4
 800f210:	6493      	str	r3, [r2, #72]	; 0x48
 800f212:	4b0f      	ldr	r3, [pc, #60]	; (800f250 <_ZL11MX_DMA_Initv+0x50>)
 800f214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f216:	f003 0304 	and.w	r3, r3, #4
 800f21a:	607b      	str	r3, [r7, #4]
 800f21c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f21e:	4b0c      	ldr	r3, [pc, #48]	; (800f250 <_ZL11MX_DMA_Initv+0x50>)
 800f220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f222:	4a0b      	ldr	r2, [pc, #44]	; (800f250 <_ZL11MX_DMA_Initv+0x50>)
 800f224:	f043 0301 	orr.w	r3, r3, #1
 800f228:	6493      	str	r3, [r2, #72]	; 0x48
 800f22a:	4b09      	ldr	r3, [pc, #36]	; (800f250 <_ZL11MX_DMA_Initv+0x50>)
 800f22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f22e:	f003 0301 	and.w	r3, r3, #1
 800f232:	603b      	str	r3, [r7, #0]
 800f234:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800f236:	2200      	movs	r2, #0
 800f238:	2105      	movs	r1, #5
 800f23a:	201d      	movs	r0, #29
 800f23c:	f002 fe24 	bl	8011e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800f240:	201d      	movs	r0, #29
 800f242:	f002 fe3b 	bl	8011ebc <HAL_NVIC_EnableIRQ>

}
 800f246:	bf00      	nop
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	40021000 	.word	0x40021000

0800f254 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b08c      	sub	sp, #48	; 0x30
 800f258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f25a:	f107 031c 	add.w	r3, r7, #28
 800f25e:	2200      	movs	r2, #0
 800f260:	601a      	str	r2, [r3, #0]
 800f262:	605a      	str	r2, [r3, #4]
 800f264:	609a      	str	r2, [r3, #8]
 800f266:	60da      	str	r2, [r3, #12]
 800f268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f26a:	4b8b      	ldr	r3, [pc, #556]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f26e:	4a8a      	ldr	r2, [pc, #552]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f270:	f043 0310 	orr.w	r3, r3, #16
 800f274:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f276:	4b88      	ldr	r3, [pc, #544]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f27a:	f003 0310 	and.w	r3, r3, #16
 800f27e:	61bb      	str	r3, [r7, #24]
 800f280:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f282:	4b85      	ldr	r3, [pc, #532]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f286:	4a84      	ldr	r2, [pc, #528]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f288:	f043 0304 	orr.w	r3, r3, #4
 800f28c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f28e:	4b82      	ldr	r3, [pc, #520]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f292:	f003 0304 	and.w	r3, r3, #4
 800f296:	617b      	str	r3, [r7, #20]
 800f298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800f29a:	4b7f      	ldr	r3, [pc, #508]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f29e:	4a7e      	ldr	r2, [pc, #504]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2a0:	f043 0320 	orr.w	r3, r3, #32
 800f2a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f2a6:	4b7c      	ldr	r3, [pc, #496]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2aa:	f003 0320 	and.w	r3, r3, #32
 800f2ae:	613b      	str	r3, [r7, #16]
 800f2b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2b2:	4b79      	ldr	r3, [pc, #484]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2b6:	4a78      	ldr	r2, [pc, #480]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2b8:	f043 0301 	orr.w	r3, r3, #1
 800f2bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f2be:	4b76      	ldr	r3, [pc, #472]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2c2:	f003 0301 	and.w	r3, r3, #1
 800f2c6:	60fb      	str	r3, [r7, #12]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f2ca:	4b73      	ldr	r3, [pc, #460]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2ce:	4a72      	ldr	r2, [pc, #456]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2d0:	f043 0302 	orr.w	r3, r3, #2
 800f2d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f2d6:	4b70      	ldr	r3, [pc, #448]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2da:	f003 0302 	and.w	r3, r3, #2
 800f2de:	60bb      	str	r3, [r7, #8]
 800f2e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f2e2:	4b6d      	ldr	r3, [pc, #436]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2e6:	4a6c      	ldr	r2, [pc, #432]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2e8:	f043 0308 	orr.w	r3, r3, #8
 800f2ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f2ee:	4b6a      	ldr	r3, [pc, #424]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2f2:	f003 0308 	and.w	r3, r3, #8
 800f2f6:	607b      	str	r3, [r7, #4]
 800f2f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f2fa:	4b67      	ldr	r3, [pc, #412]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2fe:	4a66      	ldr	r2, [pc, #408]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f304:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f306:	4b64      	ldr	r3, [pc, #400]	; (800f498 <_ZL12MX_GPIO_Initv+0x244>)
 800f308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f30e:	603b      	str	r3, [r7, #0]
 800f310:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800f312:	f004 fa93 	bl	801383c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 800f316:	2200      	movs	r2, #0
 800f318:	f24e 0108 	movw	r1, #57352	; 0xe008
 800f31c:	485f      	ldr	r0, [pc, #380]	; (800f49c <_ZL12MX_GPIO_Initv+0x248>)
 800f31e:	f003 fb09 	bl	8012934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800f322:	2200      	movs	r2, #0
 800f324:	21a4      	movs	r1, #164	; 0xa4
 800f326:	485e      	ldr	r0, [pc, #376]	; (800f4a0 <_ZL12MX_GPIO_Initv+0x24c>)
 800f328:	f003 fb04 	bl	8012934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 800f32c:	2200      	movs	r2, #0
 800f32e:	f64f 7187 	movw	r1, #65415	; 0xff87
 800f332:	485c      	ldr	r0, [pc, #368]	; (800f4a4 <_ZL12MX_GPIO_Initv+0x250>)
 800f334:	f003 fafe 	bl	8012934 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800f338:	2200      	movs	r2, #0
 800f33a:	2180      	movs	r1, #128	; 0x80
 800f33c:	485a      	ldr	r0, [pc, #360]	; (800f4a8 <_ZL12MX_GPIO_Initv+0x254>)
 800f33e:	f003 faf9 	bl	8012934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800f342:	2200      	movs	r2, #0
 800f344:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f348:	4858      	ldr	r0, [pc, #352]	; (800f4ac <_ZL12MX_GPIO_Initv+0x258>)
 800f34a:	f003 faf3 	bl	8012934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 800f34e:	2200      	movs	r2, #0
 800f350:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 800f354:	4856      	ldr	r0, [pc, #344]	; (800f4b0 <_ZL12MX_GPIO_Initv+0x25c>)
 800f356:	f003 faed 	bl	8012934 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 800f35a:	2308      	movs	r3, #8
 800f35c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f35e:	2301      	movs	r3, #1
 800f360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f362:	2302      	movs	r3, #2
 800f364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f366:	2303      	movs	r3, #3
 800f368:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f36a:	f107 031c 	add.w	r3, r7, #28
 800f36e:	4619      	mov	r1, r3
 800f370:	484a      	ldr	r0, [pc, #296]	; (800f49c <_ZL12MX_GPIO_Initv+0x248>)
 800f372:	f003 f95f 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 800f376:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800f37a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f37c:	2300      	movs	r3, #0
 800f37e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f380:	2300      	movs	r3, #0
 800f382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f384:	f107 031c 	add.w	r3, r7, #28
 800f388:	4619      	mov	r1, r3
 800f38a:	4844      	ldr	r0, [pc, #272]	; (800f49c <_ZL12MX_GPIO_Initv+0x248>)
 800f38c:	f003 f952 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 800f390:	23a4      	movs	r3, #164	; 0xa4
 800f392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f394:	2301      	movs	r3, #1
 800f396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f398:	2300      	movs	r3, #0
 800f39a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f39c:	2300      	movs	r3, #0
 800f39e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f3a0:	f107 031c 	add.w	r3, r7, #28
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	483e      	ldr	r0, [pc, #248]	; (800f4a0 <_ZL12MX_GPIO_Initv+0x24c>)
 800f3a8:	f003 f944 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 800f3ac:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800f3b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f3be:	f107 031c 	add.w	r3, r7, #28
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	4835      	ldr	r0, [pc, #212]	; (800f49c <_ZL12MX_GPIO_Initv+0x248>)
 800f3c6:	f003 f935 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 800f3ca:	f643 6301 	movw	r3, #15873	; 0x3e01
 800f3ce:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f3d8:	f107 031c 	add.w	r3, r7, #28
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4835      	ldr	r0, [pc, #212]	; (800f4b4 <_ZL12MX_GPIO_Initv+0x260>)
 800f3e0:	f003 f928 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800f3e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f3e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f3ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800f3ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800f3f4:	f107 031c 	add.w	r3, r7, #28
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4829      	ldr	r0, [pc, #164]	; (800f4a0 <_ZL12MX_GPIO_Initv+0x24c>)
 800f3fc:	f003 f91a 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 800f400:	f64f 7387 	movw	r3, #65415	; 0xff87
 800f404:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f406:	2301      	movs	r3, #1
 800f408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f40a:	2300      	movs	r3, #0
 800f40c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f40e:	2300      	movs	r3, #0
 800f410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f412:	f107 031c 	add.w	r3, r7, #28
 800f416:	4619      	mov	r1, r3
 800f418:	4822      	ldr	r0, [pc, #136]	; (800f4a4 <_ZL12MX_GPIO_Initv+0x250>)
 800f41a:	f003 f90b 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 800f41e:	2370      	movs	r3, #112	; 0x70
 800f420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f422:	2300      	movs	r3, #0
 800f424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f426:	2300      	movs	r3, #0
 800f428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f42a:	f107 031c 	add.w	r3, r7, #28
 800f42e:	4619      	mov	r1, r3
 800f430:	481f      	ldr	r0, [pc, #124]	; (800f4b0 <_ZL12MX_GPIO_Initv+0x25c>)
 800f432:	f003 f8ff 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800f436:	2380      	movs	r3, #128	; 0x80
 800f438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f43a:	2301      	movs	r3, #1
 800f43c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f43e:	2300      	movs	r3, #0
 800f440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f442:	2300      	movs	r3, #0
 800f444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800f446:	f107 031c 	add.w	r3, r7, #28
 800f44a:	4619      	mov	r1, r3
 800f44c:	4816      	ldr	r0, [pc, #88]	; (800f4a8 <_ZL12MX_GPIO_Initv+0x254>)
 800f44e:	f003 f8f1 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800f452:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f458:	2301      	movs	r3, #1
 800f45a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f45c:	2300      	movs	r3, #0
 800f45e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f460:	2300      	movs	r3, #0
 800f462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800f464:	f107 031c 	add.w	r3, r7, #28
 800f468:	4619      	mov	r1, r3
 800f46a:	4810      	ldr	r0, [pc, #64]	; (800f4ac <_ZL12MX_GPIO_Initv+0x258>)
 800f46c:	f003 f8e2 	bl	8012634 <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 800f470:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 800f474:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f476:	2301      	movs	r3, #1
 800f478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f47a:	2300      	movs	r3, #0
 800f47c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f47e:	2300      	movs	r3, #0
 800f480:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f482:	f107 031c 	add.w	r3, r7, #28
 800f486:	4619      	mov	r1, r3
 800f488:	4809      	ldr	r0, [pc, #36]	; (800f4b0 <_ZL12MX_GPIO_Initv+0x25c>)
 800f48a:	f003 f8d3 	bl	8012634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800f48e:	bf00      	nop
 800f490:	3730      	adds	r7, #48	; 0x30
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	40021000 	.word	0x40021000
 800f49c:	42021400 	.word	0x42021400
 800f4a0:	42020400 	.word	0x42020400
 800f4a4:	42020c00 	.word	0x42020c00
 800f4a8:	42020800 	.word	0x42020800
 800f4ac:	42020000 	.word	0x42020000
 800f4b0:	42021800 	.word	0x42021800
 800f4b4:	42021000 	.word	0x42021000

0800f4b8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800f4c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f4c4:	4803      	ldr	r0, [pc, #12]	; (800f4d4 <_Z16StartDefaultTaskPv+0x1c>)
 800f4c6:	f003 fa4d 	bl	8012964 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 800f4ca:	2064      	movs	r0, #100	; 0x64
 800f4cc:	f00c f9da 	bl	801b884 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800f4d0:	e7f6      	b.n	800f4c0 <_Z16StartDefaultTaskPv+0x8>
 800f4d2:	bf00      	nop
 800f4d4:	42020000 	.word	0x42020000

0800f4d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4e8:	d101      	bne.n	800f4ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800f4ea:	f000 ffb3 	bl	8010454 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800f4ee:	bf00      	nop
 800f4f0:	3708      	adds	r7, #8
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f4f6:	b480      	push	{r7}
 800f4f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f4fa:	b672      	cpsid	i
}
 800f4fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f4fe:	e7fe      	b.n	800f4fe <Error_Handler+0x8>

0800f500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f506:	4b11      	ldr	r3, [pc, #68]	; (800f54c <HAL_MspInit+0x4c>)
 800f508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f50a:	4a10      	ldr	r2, [pc, #64]	; (800f54c <HAL_MspInit+0x4c>)
 800f50c:	f043 0301 	orr.w	r3, r3, #1
 800f510:	6613      	str	r3, [r2, #96]	; 0x60
 800f512:	4b0e      	ldr	r3, [pc, #56]	; (800f54c <HAL_MspInit+0x4c>)
 800f514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f516:	f003 0301 	and.w	r3, r3, #1
 800f51a:	607b      	str	r3, [r7, #4]
 800f51c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f51e:	4b0b      	ldr	r3, [pc, #44]	; (800f54c <HAL_MspInit+0x4c>)
 800f520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f522:	4a0a      	ldr	r2, [pc, #40]	; (800f54c <HAL_MspInit+0x4c>)
 800f524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f528:	6593      	str	r3, [r2, #88]	; 0x58
 800f52a:	4b08      	ldr	r3, [pc, #32]	; (800f54c <HAL_MspInit+0x4c>)
 800f52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f52e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f532:	603b      	str	r3, [r7, #0]
 800f534:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800f536:	2200      	movs	r2, #0
 800f538:	2107      	movs	r1, #7
 800f53a:	f06f 0001 	mvn.w	r0, #1
 800f53e:	f002 fca3 	bl	8011e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f542:	bf00      	nop
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	40021000 	.word	0x40021000

0800f550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08c      	sub	sp, #48	; 0x30
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f558:	f107 031c 	add.w	r3, r7, #28
 800f55c:	2200      	movs	r2, #0
 800f55e:	601a      	str	r2, [r3, #0]
 800f560:	605a      	str	r2, [r3, #4]
 800f562:	609a      	str	r2, [r3, #8]
 800f564:	60da      	str	r2, [r3, #12]
 800f566:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a4b      	ldr	r2, [pc, #300]	; (800f69c <HAL_ADC_MspInit+0x14c>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	f040 8090 	bne.w	800f694 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800f574:	4b4a      	ldr	r3, [pc, #296]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f578:	4a49      	ldr	r2, [pc, #292]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f57a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f57e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f580:	4b47      	ldr	r3, [pc, #284]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f588:	61bb      	str	r3, [r7, #24]
 800f58a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f58c:	4b44      	ldr	r3, [pc, #272]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f590:	4a43      	ldr	r2, [pc, #268]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f592:	f043 0304 	orr.w	r3, r3, #4
 800f596:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f598:	4b41      	ldr	r3, [pc, #260]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f59a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f59c:	f003 0304 	and.w	r3, r3, #4
 800f5a0:	617b      	str	r3, [r7, #20]
 800f5a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5a4:	4b3e      	ldr	r3, [pc, #248]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f5a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5a8:	4a3d      	ldr	r2, [pc, #244]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f5aa:	f043 0301 	orr.w	r3, r3, #1
 800f5ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f5b0:	4b3b      	ldr	r3, [pc, #236]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f5b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5b4:	f003 0301 	and.w	r3, r3, #1
 800f5b8:	613b      	str	r3, [r7, #16]
 800f5ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f5bc:	4b38      	ldr	r3, [pc, #224]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f5be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5c0:	4a37      	ldr	r2, [pc, #220]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f5c2:	f043 0302 	orr.w	r3, r3, #2
 800f5c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f5c8:	4b35      	ldr	r3, [pc, #212]	; (800f6a0 <HAL_ADC_MspInit+0x150>)
 800f5ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5cc:	f003 0302 	and.w	r3, r3, #2
 800f5d0:	60fb      	str	r3, [r7, #12]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 800f5d4:	230f      	movs	r3, #15
 800f5d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5d8:	2303      	movs	r3, #3
 800f5da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5e0:	f107 031c 	add.w	r3, r7, #28
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	482f      	ldr	r0, [pc, #188]	; (800f6a4 <HAL_ADC_MspInit+0x154>)
 800f5e8:	f003 f824 	bl	8012634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 800f5ec:	239c      	movs	r3, #156	; 0x9c
 800f5ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5f8:	f107 031c 	add.w	r3, r7, #28
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	482a      	ldr	r0, [pc, #168]	; (800f6a8 <HAL_ADC_MspInit+0x158>)
 800f600:	f003 f818 	bl	8012634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 800f604:	2303      	movs	r3, #3
 800f606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f608:	2303      	movs	r3, #3
 800f60a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f60c:	2300      	movs	r3, #0
 800f60e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f610:	f107 031c 	add.w	r3, r7, #28
 800f614:	4619      	mov	r1, r3
 800f616:	4825      	ldr	r0, [pc, #148]	; (800f6ac <HAL_ADC_MspInit+0x15c>)
 800f618:	f003 f80c 	bl	8012634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800f61c:	4b24      	ldr	r3, [pc, #144]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f61e:	4a25      	ldr	r2, [pc, #148]	; (800f6b4 <HAL_ADC_MspInit+0x164>)
 800f620:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800f622:	4b23      	ldr	r3, [pc, #140]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f624:	2205      	movs	r2, #5
 800f626:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f628:	4b21      	ldr	r3, [pc, #132]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f62a:	2200      	movs	r2, #0
 800f62c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f62e:	4b20      	ldr	r3, [pc, #128]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f630:	2200      	movs	r2, #0
 800f632:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f634:	4b1e      	ldr	r3, [pc, #120]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f636:	2280      	movs	r2, #128	; 0x80
 800f638:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f63a:	4b1d      	ldr	r3, [pc, #116]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f63c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f640:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f642:	4b1b      	ldr	r3, [pc, #108]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f648:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f64a:	4b19      	ldr	r3, [pc, #100]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800f650:	4b17      	ldr	r3, [pc, #92]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f652:	2200      	movs	r2, #0
 800f654:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f656:	4816      	ldr	r0, [pc, #88]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f658:	f002 fc3e 	bl	8011ed8 <HAL_DMA_Init>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d001      	beq.n	800f666 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800f662:	f7ff ff48 	bl	800f4f6 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800f666:	2110      	movs	r1, #16
 800f668:	4811      	ldr	r0, [pc, #68]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f66a:	f002 ff13 	bl	8012494 <HAL_DMA_ConfigChannelAttributes>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d001      	beq.n	800f678 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 800f674:	f7ff ff3f 	bl	800f4f6 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a0d      	ldr	r2, [pc, #52]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f67c:	651a      	str	r2, [r3, #80]	; 0x50
 800f67e:	4a0c      	ldr	r2, [pc, #48]	; (800f6b0 <HAL_ADC_MspInit+0x160>)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800f684:	2200      	movs	r2, #0
 800f686:	2105      	movs	r1, #5
 800f688:	2025      	movs	r0, #37	; 0x25
 800f68a:	f002 fbfd 	bl	8011e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800f68e:	2025      	movs	r0, #37	; 0x25
 800f690:	f002 fc14 	bl	8011ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800f694:	bf00      	nop
 800f696:	3730      	adds	r7, #48	; 0x30
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	42028000 	.word	0x42028000
 800f6a0:	40021000 	.word	0x40021000
 800f6a4:	42020800 	.word	0x42020800
 800f6a8:	42020000 	.word	0x42020000
 800f6ac:	42020400 	.word	0x42020400
 800f6b0:	20000790 	.word	0x20000790
 800f6b4:	40020008 	.word	0x40020008

0800f6b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b0ae      	sub	sp, #184	; 0xb8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	601a      	str	r2, [r3, #0]
 800f6c8:	605a      	str	r2, [r3, #4]
 800f6ca:	609a      	str	r2, [r3, #8]
 800f6cc:	60da      	str	r2, [r3, #12]
 800f6ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f6d0:	f107 0310 	add.w	r3, r7, #16
 800f6d4:	2294      	movs	r2, #148	; 0x94
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f010 ff72 	bl	80205c2 <memset>
  if(hi2c->Instance==I2C1)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4a21      	ldr	r2, [pc, #132]	; (800f768 <HAL_I2C_MspInit+0xb0>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d13b      	bne.n	800f760 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800f6e8:	2340      	movs	r3, #64	; 0x40
 800f6ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f6f0:	f107 0310 	add.w	r3, r7, #16
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f005 f8c1 	bl	801487c <HAL_RCCEx_PeriphCLKConfig>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800f700:	f7ff fef9 	bl	800f4f6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f704:	4b19      	ldr	r3, [pc, #100]	; (800f76c <HAL_I2C_MspInit+0xb4>)
 800f706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f708:	4a18      	ldr	r2, [pc, #96]	; (800f76c <HAL_I2C_MspInit+0xb4>)
 800f70a:	f043 0302 	orr.w	r3, r3, #2
 800f70e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f710:	4b16      	ldr	r3, [pc, #88]	; (800f76c <HAL_I2C_MspInit+0xb4>)
 800f712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f714:	f003 0302 	and.w	r3, r3, #2
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800f71c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f724:	2312      	movs	r3, #18
 800f726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f72a:	2300      	movs	r3, #0
 800f72c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f730:	2300      	movs	r3, #0
 800f732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f736:	2304      	movs	r3, #4
 800f738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f73c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f740:	4619      	mov	r1, r3
 800f742:	480b      	ldr	r0, [pc, #44]	; (800f770 <HAL_I2C_MspInit+0xb8>)
 800f744:	f002 ff76 	bl	8012634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f748:	4b08      	ldr	r3, [pc, #32]	; (800f76c <HAL_I2C_MspInit+0xb4>)
 800f74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f74c:	4a07      	ldr	r2, [pc, #28]	; (800f76c <HAL_I2C_MspInit+0xb4>)
 800f74e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f752:	6593      	str	r3, [r2, #88]	; 0x58
 800f754:	4b05      	ldr	r3, [pc, #20]	; (800f76c <HAL_I2C_MspInit+0xb4>)
 800f756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f75c:	60bb      	str	r3, [r7, #8]
 800f75e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800f760:	bf00      	nop
 800f762:	37b8      	adds	r7, #184	; 0xb8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	40005400 	.word	0x40005400
 800f76c:	40021000 	.word	0x40021000
 800f770:	42020400 	.word	0x42020400

0800f774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b0b2      	sub	sp, #200	; 0xc8
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f77c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f780:	2200      	movs	r2, #0
 800f782:	601a      	str	r2, [r3, #0]
 800f784:	605a      	str	r2, [r3, #4]
 800f786:	609a      	str	r2, [r3, #8]
 800f788:	60da      	str	r2, [r3, #12]
 800f78a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f78c:	f107 0320 	add.w	r3, r7, #32
 800f790:	2294      	movs	r2, #148	; 0x94
 800f792:	2100      	movs	r1, #0
 800f794:	4618      	mov	r0, r3
 800f796:	f010 ff14 	bl	80205c2 <memset>
  if(huart->Instance==LPUART1)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a67      	ldr	r2, [pc, #412]	; (800f93c <HAL_UART_MspInit+0x1c8>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d13e      	bne.n	800f822 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800f7a4:	2320      	movs	r3, #32
 800f7a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f7ac:	f107 0320 	add.w	r3, r7, #32
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f005 f863 	bl	801487c <HAL_RCCEx_PeriphCLKConfig>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d001      	beq.n	800f7c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800f7bc:	f7ff fe9b 	bl	800f4f6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800f7c0:	4b5f      	ldr	r3, [pc, #380]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f7c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7c4:	4a5e      	ldr	r2, [pc, #376]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f7c6:	f043 0301 	orr.w	r3, r3, #1
 800f7ca:	65d3      	str	r3, [r2, #92]	; 0x5c
 800f7cc:	4b5c      	ldr	r3, [pc, #368]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7d0:	f003 0301 	and.w	r3, r3, #1
 800f7d4:	61fb      	str	r3, [r7, #28]
 800f7d6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f7d8:	4b59      	ldr	r3, [pc, #356]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f7da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7dc:	4a58      	ldr	r2, [pc, #352]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f7e4:	4b56      	ldr	r3, [pc, #344]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7ec:	61bb      	str	r3, [r7, #24]
 800f7ee:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800f7f0:	f004 f824 	bl	801383c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800f7f4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800f7f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7fc:	2302      	movs	r3, #2
 800f7fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f802:	2300      	movs	r3, #0
 800f804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f808:	2300      	movs	r3, #0
 800f80a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800f80e:	2308      	movs	r3, #8
 800f810:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f814:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f818:	4619      	mov	r1, r3
 800f81a:	484a      	ldr	r0, [pc, #296]	; (800f944 <HAL_UART_MspInit+0x1d0>)
 800f81c:	f002 ff0a 	bl	8012634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800f820:	e088      	b.n	800f934 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4a48      	ldr	r2, [pc, #288]	; (800f948 <HAL_UART_MspInit+0x1d4>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d143      	bne.n	800f8b4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800f82c:	2308      	movs	r3, #8
 800f82e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800f830:	2300      	movs	r3, #0
 800f832:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f834:	f107 0320 	add.w	r3, r7, #32
 800f838:	4618      	mov	r0, r3
 800f83a:	f005 f81f 	bl	801487c <HAL_RCCEx_PeriphCLKConfig>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d001      	beq.n	800f848 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800f844:	f7ff fe57 	bl	800f4f6 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800f848:	4b3d      	ldr	r3, [pc, #244]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f84a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f84c:	4a3c      	ldr	r2, [pc, #240]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f84e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f852:	6593      	str	r3, [r2, #88]	; 0x58
 800f854:	4b3a      	ldr	r3, [pc, #232]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f85c:	617b      	str	r3, [r7, #20]
 800f85e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f860:	4b37      	ldr	r3, [pc, #220]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f864:	4a36      	ldr	r2, [pc, #216]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f866:	f043 0301 	orr.w	r3, r3, #1
 800f86a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f86c:	4b34      	ldr	r3, [pc, #208]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f86e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f870:	f003 0301 	and.w	r3, r3, #1
 800f874:	613b      	str	r3, [r7, #16]
 800f876:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f878:	2303      	movs	r3, #3
 800f87a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f87e:	2302      	movs	r3, #2
 800f880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f884:	2300      	movs	r3, #0
 800f886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f88a:	2300      	movs	r3, #0
 800f88c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800f890:	2308      	movs	r3, #8
 800f892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f896:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f89a:	4619      	mov	r1, r3
 800f89c:	482b      	ldr	r0, [pc, #172]	; (800f94c <HAL_UART_MspInit+0x1d8>)
 800f89e:	f002 fec9 	bl	8012634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	2105      	movs	r1, #5
 800f8a6:	2040      	movs	r0, #64	; 0x40
 800f8a8:	f002 faee 	bl	8011e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800f8ac:	2040      	movs	r0, #64	; 0x40
 800f8ae:	f002 fb05 	bl	8011ebc <HAL_NVIC_EnableIRQ>
}
 800f8b2:	e03f      	b.n	800f934 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a25      	ldr	r2, [pc, #148]	; (800f950 <HAL_UART_MspInit+0x1dc>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d13a      	bne.n	800f934 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800f8be:	2302      	movs	r3, #2
 800f8c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f8c6:	f107 0320 	add.w	r3, r7, #32
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f004 ffd6 	bl	801487c <HAL_RCCEx_PeriphCLKConfig>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d001      	beq.n	800f8da <HAL_UART_MspInit+0x166>
      Error_Handler();
 800f8d6:	f7ff fe0e 	bl	800f4f6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800f8da:	4b19      	ldr	r3, [pc, #100]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8de:	4a18      	ldr	r2, [pc, #96]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f8e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8e4:	6593      	str	r3, [r2, #88]	; 0x58
 800f8e6:	4b16      	ldr	r3, [pc, #88]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8ee:	60fb      	str	r3, [r7, #12]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f8f2:	4b13      	ldr	r3, [pc, #76]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8f6:	4a12      	ldr	r2, [pc, #72]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f8f8:	f043 0308 	orr.w	r3, r3, #8
 800f8fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f8fe:	4b10      	ldr	r3, [pc, #64]	; (800f940 <HAL_UART_MspInit+0x1cc>)
 800f900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f902:	f003 0308 	and.w	r3, r3, #8
 800f906:	60bb      	str	r3, [r7, #8]
 800f908:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 800f90a:	2360      	movs	r3, #96	; 0x60
 800f90c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f910:	2302      	movs	r3, #2
 800f912:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f916:	2300      	movs	r3, #0
 800f918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f91c:	2300      	movs	r3, #0
 800f91e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f922:	2307      	movs	r3, #7
 800f924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f928:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f92c:	4619      	mov	r1, r3
 800f92e:	4809      	ldr	r0, [pc, #36]	; (800f954 <HAL_UART_MspInit+0x1e0>)
 800f930:	f002 fe80 	bl	8012634 <HAL_GPIO_Init>
}
 800f934:	bf00      	nop
 800f936:	37c8      	adds	r7, #200	; 0xc8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	40008000 	.word	0x40008000
 800f940:	40021000 	.word	0x40021000
 800f944:	42021800 	.word	0x42021800
 800f948:	40004c00 	.word	0x40004c00
 800f94c:	42020000 	.word	0x42020000
 800f950:	40004400 	.word	0x40004400
 800f954:	42020c00 	.word	0x42020c00

0800f958 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b0a8      	sub	sp, #160	; 0xa0
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f960:	f107 030c 	add.w	r3, r7, #12
 800f964:	2294      	movs	r2, #148	; 0x94
 800f966:	2100      	movs	r1, #0
 800f968:	4618      	mov	r0, r3
 800f96a:	f010 fe2a 	bl	80205c2 <memset>
  if(hrtc->Instance==RTC)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4a16      	ldr	r2, [pc, #88]	; (800f9cc <HAL_RTC_MspInit+0x74>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d124      	bne.n	800f9c2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800f978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f97c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800f97e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f986:	f107 030c 	add.w	r3, r7, #12
 800f98a:	4618      	mov	r0, r3
 800f98c:	f004 ff76 	bl	801487c <HAL_RCCEx_PeriphCLKConfig>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d001      	beq.n	800f99a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800f996:	f7ff fdae 	bl	800f4f6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800f99a:	4b0d      	ldr	r3, [pc, #52]	; (800f9d0 <HAL_RTC_MspInit+0x78>)
 800f99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9a0:	4a0b      	ldr	r2, [pc, #44]	; (800f9d0 <HAL_RTC_MspInit+0x78>)
 800f9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800f9aa:	4b09      	ldr	r3, [pc, #36]	; (800f9d0 <HAL_RTC_MspInit+0x78>)
 800f9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ae:	4a08      	ldr	r2, [pc, #32]	; (800f9d0 <HAL_RTC_MspInit+0x78>)
 800f9b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f9b4:	6593      	str	r3, [r2, #88]	; 0x58
 800f9b6:	4b06      	ldr	r3, [pc, #24]	; (800f9d0 <HAL_RTC_MspInit+0x78>)
 800f9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9be:	60bb      	str	r3, [r7, #8]
 800f9c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800f9c2:	bf00      	nop
 800f9c4:	37a0      	adds	r7, #160	; 0xa0
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	40002800 	.word	0x40002800
 800f9d0:	40021000 	.word	0x40021000

0800f9d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b090      	sub	sp, #64	; 0x40
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f9dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	601a      	str	r2, [r3, #0]
 800f9e4:	605a      	str	r2, [r3, #4]
 800f9e6:	609a      	str	r2, [r3, #8]
 800f9e8:	60da      	str	r2, [r3, #12]
 800f9ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a62      	ldr	r2, [pc, #392]	; (800fb7c <HAL_SPI_MspInit+0x1a8>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d145      	bne.n	800fa82 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f9f6:	4b62      	ldr	r3, [pc, #392]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800f9f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f9fa:	4a61      	ldr	r2, [pc, #388]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800f9fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fa00:	6613      	str	r3, [r2, #96]	; 0x60
 800fa02:	4b5f      	ldr	r3, [pc, #380]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fa06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fa0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa0e:	4b5c      	ldr	r3, [pc, #368]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa12:	4a5b      	ldr	r2, [pc, #364]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa14:	f043 0301 	orr.w	r3, r3, #1
 800fa18:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fa1a:	4b59      	ldr	r3, [pc, #356]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa1e:	f003 0301 	and.w	r3, r3, #1
 800fa22:	627b      	str	r3, [r7, #36]	; 0x24
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800fa26:	4b56      	ldr	r3, [pc, #344]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa2a:	4a55      	ldr	r2, [pc, #340]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa2c:	f043 0310 	orr.w	r3, r3, #16
 800fa30:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fa32:	4b53      	ldr	r3, [pc, #332]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa36:	f003 0310 	and.w	r3, r3, #16
 800fa3a:	623b      	str	r3, [r7, #32]
 800fa3c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 800fa3e:	2360      	movs	r3, #96	; 0x60
 800fa40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa42:	2302      	movs	r3, #2
 800fa44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800fa4e:	2305      	movs	r3, #5
 800fa50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fa56:	4619      	mov	r1, r3
 800fa58:	484a      	ldr	r0, [pc, #296]	; (800fb84 <HAL_SPI_MspInit+0x1b0>)
 800fa5a:	f002 fdeb 	bl	8012634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 800fa5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa64:	2302      	movs	r3, #2
 800fa66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800fa70:	2305      	movs	r3, #5
 800fa72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 800fa74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fa78:	4619      	mov	r1, r3
 800fa7a:	4843      	ldr	r0, [pc, #268]	; (800fb88 <HAL_SPI_MspInit+0x1b4>)
 800fa7c:	f002 fdda 	bl	8012634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800fa80:	e078      	b.n	800fb74 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a41      	ldr	r2, [pc, #260]	; (800fb8c <HAL_SPI_MspInit+0x1b8>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d145      	bne.n	800fb18 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800fa8c:	4b3c      	ldr	r3, [pc, #240]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa90:	4a3b      	ldr	r2, [pc, #236]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fa96:	6593      	str	r3, [r2, #88]	; 0x58
 800fa98:	4b39      	ldr	r3, [pc, #228]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fa9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800faa0:	61fb      	str	r3, [r7, #28]
 800faa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800faa4:	4b36      	ldr	r3, [pc, #216]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800faa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faa8:	4a35      	ldr	r2, [pc, #212]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800faaa:	f043 0302 	orr.w	r3, r3, #2
 800faae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fab0:	4b33      	ldr	r3, [pc, #204]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fab4:	f003 0302 	and.w	r3, r3, #2
 800fab8:	61bb      	str	r3, [r7, #24]
 800faba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800fabc:	4b30      	ldr	r3, [pc, #192]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fabe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fac0:	4a2f      	ldr	r2, [pc, #188]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fac2:	f043 0308 	orr.w	r3, r3, #8
 800fac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fac8:	4b2d      	ldr	r3, [pc, #180]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800faca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800facc:	f003 0308 	and.w	r3, r3, #8
 800fad0:	617b      	str	r3, [r7, #20]
 800fad2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800fad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fada:	2302      	movs	r3, #2
 800fadc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fade:	2300      	movs	r3, #0
 800fae0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fae2:	2300      	movs	r3, #0
 800fae4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800fae6:	2305      	movs	r3, #5
 800fae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800faea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800faee:	4619      	mov	r1, r3
 800faf0:	4827      	ldr	r0, [pc, #156]	; (800fb90 <HAL_SPI_MspInit+0x1bc>)
 800faf2:	f002 fd9f 	bl	8012634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800faf6:	2318      	movs	r3, #24
 800faf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fafa:	2302      	movs	r3, #2
 800fafc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fafe:	2300      	movs	r3, #0
 800fb00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb02:	2300      	movs	r3, #0
 800fb04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800fb06:	2305      	movs	r3, #5
 800fb08:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fb0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb0e:	4619      	mov	r1, r3
 800fb10:	4820      	ldr	r0, [pc, #128]	; (800fb94 <HAL_SPI_MspInit+0x1c0>)
 800fb12:	f002 fd8f 	bl	8012634 <HAL_GPIO_Init>
}
 800fb16:	e02d      	b.n	800fb74 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a1e      	ldr	r2, [pc, #120]	; (800fb98 <HAL_SPI_MspInit+0x1c4>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d128      	bne.n	800fb74 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800fb22:	4b17      	ldr	r3, [pc, #92]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fb24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb26:	4a16      	ldr	r2, [pc, #88]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fb28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb2c:	6593      	str	r3, [r2, #88]	; 0x58
 800fb2e:	4b14      	ldr	r3, [pc, #80]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fb30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb36:	613b      	str	r3, [r7, #16]
 800fb38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fb3a:	4b11      	ldr	r3, [pc, #68]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fb3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb3e:	4a10      	ldr	r2, [pc, #64]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fb40:	f043 0304 	orr.w	r3, r3, #4
 800fb44:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fb46:	4b0e      	ldr	r3, [pc, #56]	; (800fb80 <HAL_SPI_MspInit+0x1ac>)
 800fb48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb4a:	f003 0304 	and.w	r3, r3, #4
 800fb4e:	60fb      	str	r3, [r7, #12]
 800fb50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800fb52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fb56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb58:	2302      	movs	r3, #2
 800fb5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb60:	2300      	movs	r3, #0
 800fb62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800fb64:	2306      	movs	r3, #6
 800fb66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fb68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	480b      	ldr	r0, [pc, #44]	; (800fb9c <HAL_SPI_MspInit+0x1c8>)
 800fb70:	f002 fd60 	bl	8012634 <HAL_GPIO_Init>
}
 800fb74:	bf00      	nop
 800fb76:	3740      	adds	r7, #64	; 0x40
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	40013000 	.word	0x40013000
 800fb80:	40021000 	.word	0x40021000
 800fb84:	42020000 	.word	0x42020000
 800fb88:	42021000 	.word	0x42021000
 800fb8c:	40003800 	.word	0x40003800
 800fb90:	42020400 	.word	0x42020400
 800fb94:	42020c00 	.word	0x42020c00
 800fb98:	40003c00 	.word	0x40003c00
 800fb9c:	42020800 	.word	0x42020800

0800fba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08c      	sub	sp, #48	; 0x30
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fba8:	f107 031c 	add.w	r3, r7, #28
 800fbac:	2200      	movs	r2, #0
 800fbae:	601a      	str	r2, [r3, #0]
 800fbb0:	605a      	str	r2, [r3, #4]
 800fbb2:	609a      	str	r2, [r3, #8]
 800fbb4:	60da      	str	r2, [r3, #12]
 800fbb6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	4a40      	ldr	r2, [pc, #256]	; (800fcc0 <HAL_TIM_Base_MspInit+0x120>)
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d14e      	bne.n	800fc60 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800fbc2:	4b40      	ldr	r3, [pc, #256]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fbc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbc6:	4a3f      	ldr	r2, [pc, #252]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fbc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fbcc:	6613      	str	r3, [r2, #96]	; 0x60
 800fbce:	4b3d      	ldr	r3, [pc, #244]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fbd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbd6:	61bb      	str	r3, [r7, #24]
 800fbd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800fbda:	4b3a      	ldr	r3, [pc, #232]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fbdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbde:	4a39      	ldr	r2, [pc, #228]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fbe0:	f043 0310 	orr.w	r3, r3, #16
 800fbe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fbe6:	4b37      	ldr	r3, [pc, #220]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fbe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbea:	f003 0310 	and.w	r3, r3, #16
 800fbee:	617b      	str	r3, [r7, #20]
 800fbf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbf2:	4b34      	ldr	r3, [pc, #208]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fbf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbf6:	4a33      	ldr	r2, [pc, #204]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fbf8:	f043 0301 	orr.w	r3, r3, #1
 800fbfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fbfe:	4b31      	ldr	r3, [pc, #196]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fc00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc02:	f003 0301 	and.w	r3, r3, #1
 800fc06:	613b      	str	r3, [r7, #16]
 800fc08:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 800fc0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc10:	2302      	movs	r3, #2
 800fc12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc14:	2300      	movs	r3, #0
 800fc16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 800fc20:	f107 031c 	add.w	r3, r7, #28
 800fc24:	4619      	mov	r1, r3
 800fc26:	4828      	ldr	r0, [pc, #160]	; (800fcc8 <HAL_TIM_Base_MspInit+0x128>)
 800fc28:	f002 fd04 	bl	8012634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 800fc2c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800fc30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc32:	2302      	movs	r3, #2
 800fc34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc36:	2300      	movs	r3, #0
 800fc38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc42:	f107 031c 	add.w	r3, r7, #28
 800fc46:	4619      	mov	r1, r3
 800fc48:	4820      	ldr	r0, [pc, #128]	; (800fccc <HAL_TIM_Base_MspInit+0x12c>)
 800fc4a:	f002 fcf3 	bl	8012634 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2105      	movs	r1, #5
 800fc52:	202c      	movs	r0, #44	; 0x2c
 800fc54:	f002 f918 	bl	8011e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800fc58:	202c      	movs	r0, #44	; 0x2c
 800fc5a:	f002 f92f 	bl	8011ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800fc5e:	e02a      	b.n	800fcb6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a1a      	ldr	r2, [pc, #104]	; (800fcd0 <HAL_TIM_Base_MspInit+0x130>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d10c      	bne.n	800fc84 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800fc6a:	4b16      	ldr	r3, [pc, #88]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fc6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc6e:	4a15      	ldr	r2, [pc, #84]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fc70:	f043 0308 	orr.w	r3, r3, #8
 800fc74:	6593      	str	r3, [r2, #88]	; 0x58
 800fc76:	4b13      	ldr	r3, [pc, #76]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fc78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc7a:	f003 0308 	and.w	r3, r3, #8
 800fc7e:	60fb      	str	r3, [r7, #12]
 800fc80:	68fb      	ldr	r3, [r7, #12]
}
 800fc82:	e018      	b.n	800fcb6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a12      	ldr	r2, [pc, #72]	; (800fcd4 <HAL_TIM_Base_MspInit+0x134>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d113      	bne.n	800fcb6 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800fc8e:	4b0d      	ldr	r3, [pc, #52]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fc90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc92:	4a0c      	ldr	r2, [pc, #48]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fc94:	f043 0310 	orr.w	r3, r3, #16
 800fc98:	6593      	str	r3, [r2, #88]	; 0x58
 800fc9a:	4b0a      	ldr	r3, [pc, #40]	; (800fcc4 <HAL_TIM_Base_MspInit+0x124>)
 800fc9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc9e:	f003 0310 	and.w	r3, r3, #16
 800fca2:	60bb      	str	r3, [r7, #8]
 800fca4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 800fca6:	2200      	movs	r2, #0
 800fca8:	2105      	movs	r1, #5
 800fcaa:	2031      	movs	r0, #49	; 0x31
 800fcac:	f002 f8ec 	bl	8011e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800fcb0:	2031      	movs	r0, #49	; 0x31
 800fcb2:	f002 f903 	bl	8011ebc <HAL_NVIC_EnableIRQ>
}
 800fcb6:	bf00      	nop
 800fcb8:	3730      	adds	r7, #48	; 0x30
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	40012c00 	.word	0x40012c00
 800fcc4:	40021000 	.word	0x40021000
 800fcc8:	42021000 	.word	0x42021000
 800fccc:	42020000 	.word	0x42020000
 800fcd0:	40000c00 	.word	0x40000c00
 800fcd4:	40001000 	.word	0x40001000

0800fcd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b08a      	sub	sp, #40	; 0x28
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fce0:	f107 0314 	add.w	r3, r7, #20
 800fce4:	2200      	movs	r2, #0
 800fce6:	601a      	str	r2, [r3, #0]
 800fce8:	605a      	str	r2, [r3, #4]
 800fcea:	609a      	str	r2, [r3, #8]
 800fcec:	60da      	str	r2, [r3, #12]
 800fcee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a1b      	ldr	r2, [pc, #108]	; (800fd64 <HAL_TIM_Encoder_MspInit+0x8c>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d12f      	bne.n	800fd5a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800fcfa:	4b1b      	ldr	r3, [pc, #108]	; (800fd68 <HAL_TIM_Encoder_MspInit+0x90>)
 800fcfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcfe:	4a1a      	ldr	r2, [pc, #104]	; (800fd68 <HAL_TIM_Encoder_MspInit+0x90>)
 800fd00:	f043 0302 	orr.w	r3, r3, #2
 800fd04:	6593      	str	r3, [r2, #88]	; 0x58
 800fd06:	4b18      	ldr	r3, [pc, #96]	; (800fd68 <HAL_TIM_Encoder_MspInit+0x90>)
 800fd08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd0a:	f003 0302 	and.w	r3, r3, #2
 800fd0e:	613b      	str	r3, [r7, #16]
 800fd10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800fd12:	4b15      	ldr	r3, [pc, #84]	; (800fd68 <HAL_TIM_Encoder_MspInit+0x90>)
 800fd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd16:	4a14      	ldr	r2, [pc, #80]	; (800fd68 <HAL_TIM_Encoder_MspInit+0x90>)
 800fd18:	f043 0310 	orr.w	r3, r3, #16
 800fd1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fd1e:	4b12      	ldr	r3, [pc, #72]	; (800fd68 <HAL_TIM_Encoder_MspInit+0x90>)
 800fd20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd22:	f003 0310 	and.w	r3, r3, #16
 800fd26:	60fb      	str	r3, [r7, #12]
 800fd28:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 800fd2a:	2318      	movs	r3, #24
 800fd2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd2e:	2302      	movs	r3, #2
 800fd30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd32:	2300      	movs	r3, #0
 800fd34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd36:	2300      	movs	r3, #0
 800fd38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800fd3a:	2302      	movs	r3, #2
 800fd3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800fd3e:	f107 0314 	add.w	r3, r7, #20
 800fd42:	4619      	mov	r1, r3
 800fd44:	4809      	ldr	r0, [pc, #36]	; (800fd6c <HAL_TIM_Encoder_MspInit+0x94>)
 800fd46:	f002 fc75 	bl	8012634 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	2105      	movs	r1, #5
 800fd4e:	202e      	movs	r0, #46	; 0x2e
 800fd50:	f002 f89a 	bl	8011e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800fd54:	202e      	movs	r0, #46	; 0x2e
 800fd56:	f002 f8b1 	bl	8011ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800fd5a:	bf00      	nop
 800fd5c:	3728      	adds	r7, #40	; 0x28
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	40000400 	.word	0x40000400
 800fd68:	40021000 	.word	0x40021000
 800fd6c:	42021000 	.word	0x42021000

0800fd70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a0a      	ldr	r2, [pc, #40]	; (800fda8 <HAL_TIM_PWM_MspInit+0x38>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d10b      	bne.n	800fd9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800fd82:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <HAL_TIM_PWM_MspInit+0x3c>)
 800fd84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd86:	4a09      	ldr	r2, [pc, #36]	; (800fdac <HAL_TIM_PWM_MspInit+0x3c>)
 800fd88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fd8c:	6613      	str	r3, [r2, #96]	; 0x60
 800fd8e:	4b07      	ldr	r3, [pc, #28]	; (800fdac <HAL_TIM_PWM_MspInit+0x3c>)
 800fd90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd96:	60fb      	str	r3, [r7, #12]
 800fd98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800fd9a:	bf00      	nop
 800fd9c:	3714      	adds	r7, #20
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	40013400 	.word	0x40013400
 800fdac:	40021000 	.word	0x40021000

0800fdb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b08a      	sub	sp, #40	; 0x28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fdb8:	f107 0314 	add.w	r3, r7, #20
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	601a      	str	r2, [r3, #0]
 800fdc0:	605a      	str	r2, [r3, #4]
 800fdc2:	609a      	str	r2, [r3, #8]
 800fdc4:	60da      	str	r2, [r3, #12]
 800fdc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4a22      	ldr	r2, [pc, #136]	; (800fe58 <HAL_TIM_MspPostInit+0xa8>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d11d      	bne.n	800fe0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800fdd2:	4b22      	ldr	r3, [pc, #136]	; (800fe5c <HAL_TIM_MspPostInit+0xac>)
 800fdd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdd6:	4a21      	ldr	r2, [pc, #132]	; (800fe5c <HAL_TIM_MspPostInit+0xac>)
 800fdd8:	f043 0320 	orr.w	r3, r3, #32
 800fddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fdde:	4b1f      	ldr	r3, [pc, #124]	; (800fe5c <HAL_TIM_MspPostInit+0xac>)
 800fde0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fde2:	f003 0320 	and.w	r3, r3, #32
 800fde6:	613b      	str	r3, [r7, #16]
 800fde8:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 800fdea:	f44f 7310 	mov.w	r3, #576	; 0x240
 800fdee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800fe00:	f107 0314 	add.w	r3, r7, #20
 800fe04:	4619      	mov	r1, r3
 800fe06:	4816      	ldr	r0, [pc, #88]	; (800fe60 <HAL_TIM_MspPostInit+0xb0>)
 800fe08:	f002 fc14 	bl	8012634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800fe0c:	e020      	b.n	800fe50 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	4a14      	ldr	r2, [pc, #80]	; (800fe64 <HAL_TIM_MspPostInit+0xb4>)
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d11b      	bne.n	800fe50 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fe18:	4b10      	ldr	r3, [pc, #64]	; (800fe5c <HAL_TIM_MspPostInit+0xac>)
 800fe1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe1c:	4a0f      	ldr	r2, [pc, #60]	; (800fe5c <HAL_TIM_MspPostInit+0xac>)
 800fe1e:	f043 0304 	orr.w	r3, r3, #4
 800fe22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fe24:	4b0d      	ldr	r3, [pc, #52]	; (800fe5c <HAL_TIM_MspPostInit+0xac>)
 800fe26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe28:	f003 0304 	and.w	r3, r3, #4
 800fe2c:	60fb      	str	r3, [r7, #12]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fe30:	2340      	movs	r3, #64	; 0x40
 800fe32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe34:	2302      	movs	r3, #2
 800fe36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800fe40:	2303      	movs	r3, #3
 800fe42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fe44:	f107 0314 	add.w	r3, r7, #20
 800fe48:	4619      	mov	r1, r3
 800fe4a:	4807      	ldr	r0, [pc, #28]	; (800fe68 <HAL_TIM_MspPostInit+0xb8>)
 800fe4c:	f002 fbf2 	bl	8012634 <HAL_GPIO_Init>
}
 800fe50:	bf00      	nop
 800fe52:	3728      	adds	r7, #40	; 0x28
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	40000c00 	.word	0x40000c00
 800fe5c:	40021000 	.word	0x40021000
 800fe60:	42021400 	.word	0x42021400
 800fe64:	40013400 	.word	0x40013400
 800fe68:	42020800 	.word	0x42020800

0800fe6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b0ae      	sub	sp, #184	; 0xb8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fe78:	2200      	movs	r2, #0
 800fe7a:	601a      	str	r2, [r3, #0]
 800fe7c:	605a      	str	r2, [r3, #4]
 800fe7e:	609a      	str	r2, [r3, #8]
 800fe80:	60da      	str	r2, [r3, #12]
 800fe82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fe84:	f107 0310 	add.w	r3, r7, #16
 800fe88:	2294      	movs	r2, #148	; 0x94
 800fe8a:	2100      	movs	r1, #0
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f010 fb98 	bl	80205c2 <memset>
  if(hpcd->Instance==USB)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4a22      	ldr	r2, [pc, #136]	; (800ff20 <HAL_PCD_MspInit+0xb4>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d13d      	bne.n	800ff18 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fe9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fea0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fea2:	2300      	movs	r3, #0
 800fea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fea8:	f107 0310 	add.w	r3, r7, #16
 800feac:	4618      	mov	r0, r3
 800feae:	f004 fce5 	bl	801487c <HAL_RCCEx_PeriphCLKConfig>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d001      	beq.n	800febc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800feb8:	f7ff fb1d 	bl	800f4f6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800febc:	4b19      	ldr	r3, [pc, #100]	; (800ff24 <HAL_PCD_MspInit+0xb8>)
 800febe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fec0:	4a18      	ldr	r2, [pc, #96]	; (800ff24 <HAL_PCD_MspInit+0xb8>)
 800fec2:	f043 0301 	orr.w	r3, r3, #1
 800fec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fec8:	4b16      	ldr	r3, [pc, #88]	; (800ff24 <HAL_PCD_MspInit+0xb8>)
 800feca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fecc:	f003 0301 	and.w	r3, r3, #1
 800fed0:	60fb      	str	r3, [r7, #12]
 800fed2:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fed4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fedc:	2302      	movs	r3, #2
 800fede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fee2:	2300      	movs	r3, #0
 800fee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fee8:	2300      	movs	r3, #0
 800feea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800feee:	230a      	movs	r3, #10
 800fef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fef8:	4619      	mov	r1, r3
 800fefa:	480b      	ldr	r0, [pc, #44]	; (800ff28 <HAL_PCD_MspInit+0xbc>)
 800fefc:	f002 fb9a 	bl	8012634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ff00:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <HAL_PCD_MspInit+0xb8>)
 800ff02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff04:	4a07      	ldr	r2, [pc, #28]	; (800ff24 <HAL_PCD_MspInit+0xb8>)
 800ff06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ff0a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800ff0c:	4b05      	ldr	r3, [pc, #20]	; (800ff24 <HAL_PCD_MspInit+0xb8>)
 800ff0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ff14:	60bb      	str	r3, [r7, #8]
 800ff16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800ff18:	bf00      	nop
 800ff1a:	37b8      	adds	r7, #184	; 0xb8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	4000d400 	.word	0x4000d400
 800ff24:	40021000 	.word	0x40021000
 800ff28:	42020000 	.word	0x42020000

0800ff2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b08c      	sub	sp, #48	; 0x30
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	202d      	movs	r0, #45	; 0x2d
 800ff42:	f001 ffa1 	bl	8011e88 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ff46:	202d      	movs	r0, #45	; 0x2d
 800ff48:	f001 ffb8 	bl	8011ebc <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800ff4c:	4b1f      	ldr	r3, [pc, #124]	; (800ffcc <HAL_InitTick+0xa0>)
 800ff4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff50:	4a1e      	ldr	r2, [pc, #120]	; (800ffcc <HAL_InitTick+0xa0>)
 800ff52:	f043 0301 	orr.w	r3, r3, #1
 800ff56:	6593      	str	r3, [r2, #88]	; 0x58
 800ff58:	4b1c      	ldr	r3, [pc, #112]	; (800ffcc <HAL_InitTick+0xa0>)
 800ff5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff5c:	f003 0301 	and.w	r3, r3, #1
 800ff60:	60fb      	str	r3, [r7, #12]
 800ff62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ff64:	f107 0210 	add.w	r2, r7, #16
 800ff68:	f107 0314 	add.w	r3, r7, #20
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f004 fb80 	bl	8014674 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800ff74:	f004 fb56 	bl	8014624 <HAL_RCC_GetPCLK1Freq>
 800ff78:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ff7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7c:	4a14      	ldr	r2, [pc, #80]	; (800ffd0 <HAL_InitTick+0xa4>)
 800ff7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff82:	0c9b      	lsrs	r3, r3, #18
 800ff84:	3b01      	subs	r3, #1
 800ff86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800ff88:	4b12      	ldr	r3, [pc, #72]	; (800ffd4 <HAL_InitTick+0xa8>)
 800ff8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ff8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800ff90:	4b10      	ldr	r3, [pc, #64]	; (800ffd4 <HAL_InitTick+0xa8>)
 800ff92:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ff96:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ff98:	4a0e      	ldr	r2, [pc, #56]	; (800ffd4 <HAL_InitTick+0xa8>)
 800ff9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800ff9e:	4b0d      	ldr	r3, [pc, #52]	; (800ffd4 <HAL_InitTick+0xa8>)
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ffa4:	4b0b      	ldr	r3, [pc, #44]	; (800ffd4 <HAL_InitTick+0xa8>)
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800ffaa:	480a      	ldr	r0, [pc, #40]	; (800ffd4 <HAL_InitTick+0xa8>)
 800ffac:	f006 f9c6 	bl	801633c <HAL_TIM_Base_Init>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d104      	bne.n	800ffc0 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ffb6:	4807      	ldr	r0, [pc, #28]	; (800ffd4 <HAL_InitTick+0xa8>)
 800ffb8:	f006 fa80 	bl	80164bc <HAL_TIM_Base_Start_IT>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	e000      	b.n	800ffc2 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 800ffc0:	2301      	movs	r3, #1
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3730      	adds	r7, #48	; 0x30
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	40021000 	.word	0x40021000
 800ffd0:	431bde83 	.word	0x431bde83
 800ffd4:	20000fd0 	.word	0x20000fd0

0800ffd8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ffdc:	f3bf 8f4f 	dsb	sy
}
 800ffe0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ffe2:	4b06      	ldr	r3, [pc, #24]	; (800fffc <__NVIC_SystemReset+0x24>)
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ffea:	4904      	ldr	r1, [pc, #16]	; (800fffc <__NVIC_SystemReset+0x24>)
 800ffec:	4b04      	ldr	r3, [pc, #16]	; (8010000 <__NVIC_SystemReset+0x28>)
 800ffee:	4313      	orrs	r3, r2
 800fff0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fff2:	f3bf 8f4f 	dsb	sy
}
 800fff6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800fff8:	bf00      	nop
 800fffa:	e7fd      	b.n	800fff8 <__NVIC_SystemReset+0x20>
 800fffc:	e000ed00 	.word	0xe000ed00
 8010000:	05fa0004 	.word	0x05fa0004

08010004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010004:	b480      	push	{r7}
 8010006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010008:	e7fe      	b.n	8010008 <NMI_Handler+0x4>

0801000a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 801000e:	f7ff ffe3 	bl	800ffd8 <__NVIC_SystemReset>

08010012 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010012:	b480      	push	{r7}
 8010014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010016:	e7fe      	b.n	8010016 <MemManage_Handler+0x4>

08010018 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010018:	b480      	push	{r7}
 801001a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801001c:	e7fe      	b.n	801001c <BusFault_Handler+0x4>

0801001e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801001e:	b480      	push	{r7}
 8010020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010022:	e7fe      	b.n	8010022 <UsageFault_Handler+0x4>

08010024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010024:	b480      	push	{r7}
 8010026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010028:	bf00      	nop
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
	...

08010034 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010038:	4802      	ldr	r0, [pc, #8]	; (8010044 <DMA1_Channel1_IRQHandler+0x10>)
 801003a:	f002 f92b 	bl	8012294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801003e:	bf00      	nop
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	20000790 	.word	0x20000790

08010048 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 801004c:	4802      	ldr	r0, [pc, #8]	; (8010058 <ADC1_2_IRQHandler+0x10>)
 801004e:	f000 fe2b 	bl	8010ca8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8010052:	bf00      	nop
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	20000728 	.word	0x20000728

0801005c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8010060:	4802      	ldr	r0, [pc, #8]	; (801006c <TIM1_CC_IRQHandler+0x10>)
 8010062:	f006 fed9 	bl	8016e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8010066:	bf00      	nop
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	20000b5c 	.word	0x20000b5c

08010070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8010074:	4802      	ldr	r0, [pc, #8]	; (8010080 <TIM2_IRQHandler+0x10>)
 8010076:	f006 fecf 	bl	8016e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801007a:	bf00      	nop
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	20000fd0 	.word	0x20000fd0

08010084 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8010088:	4802      	ldr	r0, [pc, #8]	; (8010094 <TIM3_IRQHandler+0x10>)
 801008a:	f006 fec5 	bl	8016e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801008e:	bf00      	nop
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	20000ba8 	.word	0x20000ba8

08010098 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801009c:	4802      	ldr	r0, [pc, #8]	; (80100a8 <TIM6_IRQHandler+0x10>)
 801009e:	f006 febb 	bl	8016e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80100a2:	bf00      	nop
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	20000c40 	.word	0x20000c40

080100ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80100b0:	4802      	ldr	r0, [pc, #8]	; (80100bc <UART4_IRQHandler+0x10>)
 80100b2:	f008 f9e5 	bl	8018480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80100b6:	bf00      	nop
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	200008e0 	.word	0x200008e0

080100c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80100c0:	b480      	push	{r7}
 80100c2:	af00      	add	r7, sp, #0
  return 1;
 80100c4:	2301      	movs	r3, #1
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <_kill>:

int _kill(int pid, int sig)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80100da:	f010 fb15 	bl	8020708 <__errno>
 80100de:	4603      	mov	r3, r0
 80100e0:	2216      	movs	r2, #22
 80100e2:	601a      	str	r2, [r3, #0]
  return -1;
 80100e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <_exit>:

void _exit (int status)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80100f8:	f04f 31ff 	mov.w	r1, #4294967295
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7ff ffe7 	bl	80100d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8010102:	e7fe      	b.n	8010102 <_exit+0x12>

08010104 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b086      	sub	sp, #24
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010110:	2300      	movs	r3, #0
 8010112:	617b      	str	r3, [r7, #20]
 8010114:	e00a      	b.n	801012c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010116:	f3af 8000 	nop.w
 801011a:	4601      	mov	r1, r0
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	1c5a      	adds	r2, r3, #1
 8010120:	60ba      	str	r2, [r7, #8]
 8010122:	b2ca      	uxtb	r2, r1
 8010124:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	3301      	adds	r3, #1
 801012a:	617b      	str	r3, [r7, #20]
 801012c:	697a      	ldr	r2, [r7, #20]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	429a      	cmp	r2, r3
 8010132:	dbf0      	blt.n	8010116 <_read+0x12>
  }

  return len;
 8010134:	687b      	ldr	r3, [r7, #4]
}
 8010136:	4618      	mov	r0, r3
 8010138:	3718      	adds	r7, #24
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b086      	sub	sp, #24
 8010142:	af00      	add	r7, sp, #0
 8010144:	60f8      	str	r0, [r7, #12]
 8010146:	60b9      	str	r1, [r7, #8]
 8010148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801014a:	2300      	movs	r3, #0
 801014c:	617b      	str	r3, [r7, #20]
 801014e:	e009      	b.n	8010164 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	1c5a      	adds	r2, r3, #1
 8010154:	60ba      	str	r2, [r7, #8]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	4618      	mov	r0, r3
 801015a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	3301      	adds	r3, #1
 8010162:	617b      	str	r3, [r7, #20]
 8010164:	697a      	ldr	r2, [r7, #20]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	429a      	cmp	r2, r3
 801016a:	dbf1      	blt.n	8010150 <_write+0x12>
  }
  return len;
 801016c:	687b      	ldr	r3, [r7, #4]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3718      	adds	r7, #24
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <_close>:

int _close(int file)
{
 8010176:	b480      	push	{r7}
 8010178:	b083      	sub	sp, #12
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801017e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010182:	4618      	mov	r0, r3
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801018e:	b480      	push	{r7}
 8010190:	b083      	sub	sp, #12
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801019e:	605a      	str	r2, [r3, #4]
  return 0;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	370c      	adds	r7, #12
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr

080101ae <_isatty>:

int _isatty(int file)
{
 80101ae:	b480      	push	{r7}
 80101b0:	b083      	sub	sp, #12
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80101b6:	2301      	movs	r3, #1
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	370c      	adds	r7, #12
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr

080101c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3714      	adds	r7, #20
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr
	...

080101e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80101e8:	4a14      	ldr	r2, [pc, #80]	; (801023c <_sbrk+0x5c>)
 80101ea:	4b15      	ldr	r3, [pc, #84]	; (8010240 <_sbrk+0x60>)
 80101ec:	1ad3      	subs	r3, r2, r3
 80101ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80101f4:	4b13      	ldr	r3, [pc, #76]	; (8010244 <_sbrk+0x64>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d102      	bne.n	8010202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80101fc:	4b11      	ldr	r3, [pc, #68]	; (8010244 <_sbrk+0x64>)
 80101fe:	4a12      	ldr	r2, [pc, #72]	; (8010248 <_sbrk+0x68>)
 8010200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010202:	4b10      	ldr	r3, [pc, #64]	; (8010244 <_sbrk+0x64>)
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4413      	add	r3, r2
 801020a:	693a      	ldr	r2, [r7, #16]
 801020c:	429a      	cmp	r2, r3
 801020e:	d207      	bcs.n	8010220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010210:	f010 fa7a 	bl	8020708 <__errno>
 8010214:	4603      	mov	r3, r0
 8010216:	220c      	movs	r2, #12
 8010218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801021a:	f04f 33ff 	mov.w	r3, #4294967295
 801021e:	e009      	b.n	8010234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010220:	4b08      	ldr	r3, [pc, #32]	; (8010244 <_sbrk+0x64>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010226:	4b07      	ldr	r3, [pc, #28]	; (8010244 <_sbrk+0x64>)
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4413      	add	r3, r2
 801022e:	4a05      	ldr	r2, [pc, #20]	; (8010244 <_sbrk+0x64>)
 8010230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010232:	68fb      	ldr	r3, [r7, #12]
}
 8010234:	4618      	mov	r0, r3
 8010236:	3718      	adds	r7, #24
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	20030000 	.word	0x20030000
 8010240:	00000400 	.word	0x00000400
 8010244:	2000101c 	.word	0x2000101c
 8010248:	20009ec0 	.word	0x20009ec0

0801024c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 801024c:	b480      	push	{r7}
 801024e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8010250:	4b06      	ldr	r3, [pc, #24]	; (801026c <SystemInit+0x20>)
 8010252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010256:	4a05      	ldr	r2, [pc, #20]	; (801026c <SystemInit+0x20>)
 8010258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801025c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8010260:	bf00      	nop
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	e000ed00 	.word	0xe000ed00

08010270 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8010270:	b480      	push	{r7}
 8010272:	b087      	sub	sp, #28
 8010274:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8010276:	4b4f      	ldr	r3, [pc, #316]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f003 0308 	and.w	r3, r3, #8
 801027e:	2b00      	cmp	r3, #0
 8010280:	d107      	bne.n	8010292 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8010282:	4b4c      	ldr	r3, [pc, #304]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 8010284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010288:	0a1b      	lsrs	r3, r3, #8
 801028a:	f003 030f 	and.w	r3, r3, #15
 801028e:	617b      	str	r3, [r7, #20]
 8010290:	e005      	b.n	801029e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8010292:	4b48      	ldr	r3, [pc, #288]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	091b      	lsrs	r3, r3, #4
 8010298:	f003 030f 	and.w	r3, r3, #15
 801029c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 801029e:	4a46      	ldr	r2, [pc, #280]	; (80103b8 <SystemCoreClockUpdate+0x148>)
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102a6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80102a8:	4b42      	ldr	r3, [pc, #264]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	f003 030c 	and.w	r3, r3, #12
 80102b0:	2b0c      	cmp	r3, #12
 80102b2:	d866      	bhi.n	8010382 <SystemCoreClockUpdate+0x112>
 80102b4:	a201      	add	r2, pc, #4	; (adr r2, 80102bc <SystemCoreClockUpdate+0x4c>)
 80102b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ba:	bf00      	nop
 80102bc:	080102f1 	.word	0x080102f1
 80102c0:	08010383 	.word	0x08010383
 80102c4:	08010383 	.word	0x08010383
 80102c8:	08010383 	.word	0x08010383
 80102cc:	080102f9 	.word	0x080102f9
 80102d0:	08010383 	.word	0x08010383
 80102d4:	08010383 	.word	0x08010383
 80102d8:	08010383 	.word	0x08010383
 80102dc:	08010301 	.word	0x08010301
 80102e0:	08010383 	.word	0x08010383
 80102e4:	08010383 	.word	0x08010383
 80102e8:	08010383 	.word	0x08010383
 80102ec:	08010309 	.word	0x08010309
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80102f0:	4a32      	ldr	r2, [pc, #200]	; (80103bc <SystemCoreClockUpdate+0x14c>)
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	6013      	str	r3, [r2, #0]
      break;
 80102f6:	e048      	b.n	801038a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80102f8:	4b30      	ldr	r3, [pc, #192]	; (80103bc <SystemCoreClockUpdate+0x14c>)
 80102fa:	4a31      	ldr	r2, [pc, #196]	; (80103c0 <SystemCoreClockUpdate+0x150>)
 80102fc:	601a      	str	r2, [r3, #0]
      break;
 80102fe:	e044      	b.n	801038a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8010300:	4b2e      	ldr	r3, [pc, #184]	; (80103bc <SystemCoreClockUpdate+0x14c>)
 8010302:	4a30      	ldr	r2, [pc, #192]	; (80103c4 <SystemCoreClockUpdate+0x154>)
 8010304:	601a      	str	r2, [r3, #0]
      break;
 8010306:	e040      	b.n	801038a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8010308:	4b2a      	ldr	r3, [pc, #168]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 801030a:	68db      	ldr	r3, [r3, #12]
 801030c:	f003 0303 	and.w	r3, r3, #3
 8010310:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8010312:	4b28      	ldr	r3, [pc, #160]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	091b      	lsrs	r3, r3, #4
 8010318:	f003 030f 	and.w	r3, r3, #15
 801031c:	3301      	adds	r3, #1
 801031e:	60bb      	str	r3, [r7, #8]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2b02      	cmp	r3, #2
 8010324:	d003      	beq.n	801032e <SystemCoreClockUpdate+0xbe>
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b03      	cmp	r3, #3
 801032a:	d006      	beq.n	801033a <SystemCoreClockUpdate+0xca>
 801032c:	e00b      	b.n	8010346 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 801032e:	4a24      	ldr	r2, [pc, #144]	; (80103c0 <SystemCoreClockUpdate+0x150>)
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	fbb2 f3f3 	udiv	r3, r2, r3
 8010336:	613b      	str	r3, [r7, #16]
          break;
 8010338:	e00b      	b.n	8010352 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 801033a:	4a22      	ldr	r2, [pc, #136]	; (80103c4 <SystemCoreClockUpdate+0x154>)
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010342:	613b      	str	r3, [r7, #16]
          break;
 8010344:	e005      	b.n	8010352 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8010346:	697a      	ldr	r2, [r7, #20]
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	fbb2 f3f3 	udiv	r3, r2, r3
 801034e:	613b      	str	r3, [r7, #16]
          break;
 8010350:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8010352:	4b18      	ldr	r3, [pc, #96]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	0a1b      	lsrs	r3, r3, #8
 8010358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	fb02 f303 	mul.w	r3, r2, r3
 8010362:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8010364:	4b13      	ldr	r3, [pc, #76]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 8010366:	68db      	ldr	r3, [r3, #12]
 8010368:	0e5b      	lsrs	r3, r3, #25
 801036a:	f003 0303 	and.w	r3, r3, #3
 801036e:	3301      	adds	r3, #1
 8010370:	005b      	lsls	r3, r3, #1
 8010372:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8010374:	693a      	ldr	r2, [r7, #16]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	fbb2 f3f3 	udiv	r3, r2, r3
 801037c:	4a0f      	ldr	r2, [pc, #60]	; (80103bc <SystemCoreClockUpdate+0x14c>)
 801037e:	6013      	str	r3, [r2, #0]
      break;
 8010380:	e003      	b.n	801038a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8010382:	4a0e      	ldr	r2, [pc, #56]	; (80103bc <SystemCoreClockUpdate+0x14c>)
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	6013      	str	r3, [r2, #0]
      break;
 8010388:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 801038a:	4b0a      	ldr	r3, [pc, #40]	; (80103b4 <SystemCoreClockUpdate+0x144>)
 801038c:	689b      	ldr	r3, [r3, #8]
 801038e:	091b      	lsrs	r3, r3, #4
 8010390:	f003 030f 	and.w	r3, r3, #15
 8010394:	4a0c      	ldr	r2, [pc, #48]	; (80103c8 <SystemCoreClockUpdate+0x158>)
 8010396:	5cd3      	ldrb	r3, [r2, r3]
 8010398:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 801039a:	4b08      	ldr	r3, [pc, #32]	; (80103bc <SystemCoreClockUpdate+0x14c>)
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	fa22 f303 	lsr.w	r3, r2, r3
 80103a4:	4a05      	ldr	r2, [pc, #20]	; (80103bc <SystemCoreClockUpdate+0x14c>)
 80103a6:	6013      	str	r3, [r2, #0]
}
 80103a8:	bf00      	nop
 80103aa:	371c      	adds	r7, #28
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	40021000 	.word	0x40021000
 80103b8:	08021e1c 	.word	0x08021e1c
 80103bc:	20000090 	.word	0x20000090
 80103c0:	00f42400 	.word	0x00f42400
 80103c4:	007a1200 	.word	0x007a1200
 80103c8:	08021e04 	.word	0x08021e04

080103cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80103cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80103d0:	f7ff ff3c 	bl	801024c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80103d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80103d6:	e003      	b.n	80103e0 <LoopCopyDataInit>

080103d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80103d8:	4b0b      	ldr	r3, [pc, #44]	; (8010408 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80103da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80103dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80103de:	3104      	adds	r1, #4

080103e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80103e0:	480a      	ldr	r0, [pc, #40]	; (801040c <LoopForever+0xa>)
	ldr	r3, =_edata
 80103e2:	4b0b      	ldr	r3, [pc, #44]	; (8010410 <LoopForever+0xe>)
	adds	r2, r0, r1
 80103e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80103e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80103e8:	d3f6      	bcc.n	80103d8 <CopyDataInit>
	ldr	r2, =_sbss
 80103ea:	4a0a      	ldr	r2, [pc, #40]	; (8010414 <LoopForever+0x12>)
	b	LoopFillZerobss
 80103ec:	e002      	b.n	80103f4 <LoopFillZerobss>

080103ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80103ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80103f0:	f842 3b04 	str.w	r3, [r2], #4

080103f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80103f4:	4b08      	ldr	r3, [pc, #32]	; (8010418 <LoopForever+0x16>)
	cmp	r2, r3
 80103f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80103f8:	d3f9      	bcc.n	80103ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80103fa:	f010 f98b 	bl	8020714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80103fe:	f7fd ff67 	bl	800e2d0 <main>

08010402 <LoopForever>:

LoopForever:
    b LoopForever
 8010402:	e7fe      	b.n	8010402 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8010404:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8010408:	080226cc 	.word	0x080226cc
	ldr	r0, =_sdata
 801040c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8010410:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 8010414:	20000110 	.word	0x20000110
	ldr	r3, = _ebss
 8010418:	20009ebc 	.word	0x20009ebc

0801041c <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801041c:	e7fe      	b.n	801041c <COMP_IRQHandler>

0801041e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b082      	sub	sp, #8
 8010422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8010424:	2300      	movs	r3, #0
 8010426:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8010428:	2004      	movs	r0, #4
 801042a:	f001 fd22 	bl	8011e72 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 801042e:	f7ff ff1f 	bl	8010270 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010432:	2007      	movs	r0, #7
 8010434:	f7ff fd7a 	bl	800ff2c <HAL_InitTick>
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d002      	beq.n	8010444 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 801043e:	2301      	movs	r3, #1
 8010440:	71fb      	strb	r3, [r7, #7]
 8010442:	e001      	b.n	8010448 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8010444:	f7ff f85c 	bl	800f500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8010448:	79fb      	ldrb	r3, [r7, #7]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
	...

08010454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010454:	b480      	push	{r7}
 8010456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010458:	4b06      	ldr	r3, [pc, #24]	; (8010474 <HAL_IncTick+0x20>)
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	461a      	mov	r2, r3
 801045e:	4b06      	ldr	r3, [pc, #24]	; (8010478 <HAL_IncTick+0x24>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4413      	add	r3, r2
 8010464:	4a04      	ldr	r2, [pc, #16]	; (8010478 <HAL_IncTick+0x24>)
 8010466:	6013      	str	r3, [r2, #0]
}
 8010468:	bf00      	nop
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr
 8010472:	bf00      	nop
 8010474:	20000098 	.word	0x20000098
 8010478:	20001020 	.word	0x20001020

0801047c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801047c:	b480      	push	{r7}
 801047e:	af00      	add	r7, sp, #0
  return uwTick;
 8010480:	4b03      	ldr	r3, [pc, #12]	; (8010490 <HAL_GetTick+0x14>)
 8010482:	681b      	ldr	r3, [r3, #0]
}
 8010484:	4618      	mov	r0, r3
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	20001020 	.word	0x20001020

08010494 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	431a      	orrs	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	609a      	str	r2, [r3, #8]
}
 80104ae:	bf00      	nop
 80104b0:	370c      	adds	r7, #12
 80104b2:	46bd      	mov	sp, r7
 80104b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b8:	4770      	bx	lr

080104ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80104ba:	b480      	push	{r7}
 80104bc:	b083      	sub	sp, #12
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
 80104c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	431a      	orrs	r2, r3
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	609a      	str	r2, [r3, #8]
}
 80104d4:	bf00      	nop
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b087      	sub	sp, #28
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
 8010508:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	3360      	adds	r3, #96	; 0x60
 801050e:	461a      	mov	r2, r3
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	4413      	add	r3, r2
 8010516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	4b08      	ldr	r3, [pc, #32]	; (8010540 <LL_ADC_SetOffset+0x44>)
 801051e:	4013      	ands	r3, r2
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8010526:	683a      	ldr	r2, [r7, #0]
 8010528:	430a      	orrs	r2, r1
 801052a:	4313      	orrs	r3, r2
 801052c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8010534:	bf00      	nop
 8010536:	371c      	adds	r7, #28
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr
 8010540:	03fff000 	.word	0x03fff000

08010544 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	3360      	adds	r3, #96	; 0x60
 8010552:	461a      	mov	r2, r3
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4413      	add	r3, r2
 801055a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8010564:	4618      	mov	r0, r3
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8010570:	b480      	push	{r7}
 8010572:	b087      	sub	sp, #28
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3360      	adds	r3, #96	; 0x60
 8010580:	461a      	mov	r2, r3
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	009b      	lsls	r3, r3, #2
 8010586:	4413      	add	r3, r2
 8010588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	431a      	orrs	r2, r3
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 801059a:	bf00      	nop
 801059c:	371c      	adds	r7, #28
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr

080105a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80105a6:	b480      	push	{r7}
 80105a8:	b083      	sub	sp, #12
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
 80105ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	695b      	ldr	r3, [r3, #20]
 80105b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	431a      	orrs	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	615a      	str	r2, [r3, #20]
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d101      	bne.n	80105e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80105e0:	2301      	movs	r3, #1
 80105e2:	e000      	b.n	80105e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	370c      	adds	r7, #12
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr

080105f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80105f2:	b480      	push	{r7}
 80105f4:	b087      	sub	sp, #28
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	60f8      	str	r0, [r7, #12]
 80105fa:	60b9      	str	r1, [r7, #8]
 80105fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3330      	adds	r3, #48	; 0x30
 8010602:	461a      	mov	r2, r3
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	0a1b      	lsrs	r3, r3, #8
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	f003 030c 	and.w	r3, r3, #12
 801060e:	4413      	add	r3, r2
 8010610:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	f003 031f 	and.w	r3, r3, #31
 801061c:	211f      	movs	r1, #31
 801061e:	fa01 f303 	lsl.w	r3, r1, r3
 8010622:	43db      	mvns	r3, r3
 8010624:	401a      	ands	r2, r3
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	0e9b      	lsrs	r3, r3, #26
 801062a:	f003 011f 	and.w	r1, r3, #31
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	f003 031f 	and.w	r3, r3, #31
 8010634:	fa01 f303 	lsl.w	r3, r1, r3
 8010638:	431a      	orrs	r2, r3
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 801063e:	bf00      	nop
 8010640:	371c      	adds	r7, #28
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr

0801064a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 801064a:	b480      	push	{r7}
 801064c:	b083      	sub	sp, #12
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d101      	bne.n	8010662 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 801065e:	2301      	movs	r3, #1
 8010660:	e000      	b.n	8010664 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8010662:	2300      	movs	r3, #0
}
 8010664:	4618      	mov	r0, r3
 8010666:	370c      	adds	r7, #12
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8010670:	b480      	push	{r7}
 8010672:	b087      	sub	sp, #28
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	3314      	adds	r3, #20
 8010680:	461a      	mov	r2, r3
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	0e5b      	lsrs	r3, r3, #25
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	f003 0304 	and.w	r3, r3, #4
 801068c:	4413      	add	r3, r2
 801068e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	0d1b      	lsrs	r3, r3, #20
 8010698:	f003 031f 	and.w	r3, r3, #31
 801069c:	2107      	movs	r1, #7
 801069e:	fa01 f303 	lsl.w	r3, r1, r3
 80106a2:	43db      	mvns	r3, r3
 80106a4:	401a      	ands	r2, r3
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	0d1b      	lsrs	r3, r3, #20
 80106aa:	f003 031f 	and.w	r3, r3, #31
 80106ae:	6879      	ldr	r1, [r7, #4]
 80106b0:	fa01 f303 	lsl.w	r3, r1, r3
 80106b4:	431a      	orrs	r2, r3
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80106ba:	bf00      	nop
 80106bc:	371c      	adds	r7, #28
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr
	...

080106c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106e0:	43db      	mvns	r3, r3
 80106e2:	401a      	ands	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f003 0318 	and.w	r3, r3, #24
 80106ea:	4908      	ldr	r1, [pc, #32]	; (801070c <LL_ADC_SetChannelSingleDiff+0x44>)
 80106ec:	40d9      	lsrs	r1, r3
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	400b      	ands	r3, r1
 80106f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106f6:	431a      	orrs	r2, r3
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80106fe:	bf00      	nop
 8010700:	3714      	adds	r7, #20
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop
 801070c:	0007ffff 	.word	0x0007ffff

08010710 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	689b      	ldr	r3, [r3, #8]
 801071c:	f003 031f 	and.w	r3, r3, #31
}
 8010720:	4618      	mov	r0, r3
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr

0801072c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	689b      	ldr	r3, [r3, #8]
 8010738:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 801073c:	4618      	mov	r0, r3
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8010758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	6093      	str	r3, [r2, #8]
}
 8010760:	bf00      	nop
 8010762:	370c      	adds	r7, #12
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 801076c:	b480      	push	{r7}
 801076e:	b083      	sub	sp, #12
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801077c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010780:	d101      	bne.n	8010786 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8010782:	2301      	movs	r3, #1
 8010784:	e000      	b.n	8010788 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	689b      	ldr	r3, [r3, #8]
 80107a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80107a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80107a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80107b0:	bf00      	nop
 80107b2:	370c      	adds	r7, #12
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr

080107bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107d0:	d101      	bne.n	80107d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80107d2:	2301      	movs	r3, #1
 80107d4:	e000      	b.n	80107d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	370c      	adds	r7, #12
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr

080107e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80107f8:	f043 0201 	orr.w	r2, r3, #1
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8010800:	bf00      	nop
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	f003 0301 	and.w	r3, r3, #1
 801081c:	2b01      	cmp	r3, #1
 801081e:	d101      	bne.n	8010824 <LL_ADC_IsEnabled+0x18>
 8010820:	2301      	movs	r3, #1
 8010822:	e000      	b.n	8010826 <LL_ADC_IsEnabled+0x1a>
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr

08010832 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8010832:	b480      	push	{r7}
 8010834:	b083      	sub	sp, #12
 8010836:	af00      	add	r7, sp, #0
 8010838:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010842:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010846:	f043 0204 	orr.w	r2, r3, #4
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 801084e:	bf00      	nop
 8010850:	370c      	adds	r7, #12
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr

0801085a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 801085a:	b480      	push	{r7}
 801085c:	b083      	sub	sp, #12
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	f003 0304 	and.w	r3, r3, #4
 801086a:	2b04      	cmp	r3, #4
 801086c:	d101      	bne.n	8010872 <LL_ADC_REG_IsConversionOngoing+0x18>
 801086e:	2301      	movs	r3, #1
 8010870:	e000      	b.n	8010874 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	f003 0308 	and.w	r3, r3, #8
 8010890:	2b08      	cmp	r3, #8
 8010892:	d101      	bne.n	8010898 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8010894:	2301      	movs	r3, #1
 8010896:	e000      	b.n	801089a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8010898:	2300      	movs	r3, #0
}
 801089a:	4618      	mov	r0, r3
 801089c:	370c      	adds	r7, #12
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr
	...

080108a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80108a8:	b590      	push	{r4, r7, lr}
 80108aa:	b089      	sub	sp, #36	; 0x24
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80108b0:	2300      	movs	r3, #0
 80108b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80108be:	2301      	movs	r3, #1
 80108c0:	e12e      	b.n	8010b20 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	691b      	ldr	r3, [r3, #16]
 80108c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d109      	bne.n	80108e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f7fe fe3d 	bl	800f550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7ff ff3f 	bl	801076c <LL_ADC_IsDeepPowerDownEnabled>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d004      	beq.n	80108fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7ff ff25 	bl	8010748 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4618      	mov	r0, r3
 8010904:	f7ff ff5a 	bl	80107bc <LL_ADC_IsInternalRegulatorEnabled>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d115      	bne.n	801093a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff ff3e 	bl	8010794 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8010918:	4b83      	ldr	r3, [pc, #524]	; (8010b28 <HAL_ADC_Init+0x280>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	099b      	lsrs	r3, r3, #6
 801091e:	4a83      	ldr	r2, [pc, #524]	; (8010b2c <HAL_ADC_Init+0x284>)
 8010920:	fba2 2303 	umull	r2, r3, r2, r3
 8010924:	099b      	lsrs	r3, r3, #6
 8010926:	3301      	adds	r3, #1
 8010928:	005b      	lsls	r3, r3, #1
 801092a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 801092c:	e002      	b.n	8010934 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	3b01      	subs	r3, #1
 8010932:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1f9      	bne.n	801092e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4618      	mov	r0, r3
 8010940:	f7ff ff3c 	bl	80107bc <LL_ADC_IsInternalRegulatorEnabled>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d10d      	bne.n	8010966 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801094e:	f043 0210 	orr.w	r2, r3, #16
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801095a:	f043 0201 	orr.w	r2, r3, #1
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8010962:	2301      	movs	r3, #1
 8010964:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4618      	mov	r0, r3
 801096c:	f7ff ff75 	bl	801085a <LL_ADC_REG_IsConversionOngoing>
 8010970:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010976:	f003 0310 	and.w	r3, r3, #16
 801097a:	2b00      	cmp	r3, #0
 801097c:	f040 80c7 	bne.w	8010b0e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	2b00      	cmp	r3, #0
 8010984:	f040 80c3 	bne.w	8010b0e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801098c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8010990:	f043 0202 	orr.w	r2, r3, #2
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4618      	mov	r0, r3
 801099e:	f7ff ff35 	bl	801080c <LL_ADC_IsEnabled>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d110      	bne.n	80109ca <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80109a8:	4861      	ldr	r0, [pc, #388]	; (8010b30 <HAL_ADC_Init+0x288>)
 80109aa:	f7ff ff2f 	bl	801080c <LL_ADC_IsEnabled>
 80109ae:	4604      	mov	r4, r0
 80109b0:	4860      	ldr	r0, [pc, #384]	; (8010b34 <HAL_ADC_Init+0x28c>)
 80109b2:	f7ff ff2b 	bl	801080c <LL_ADC_IsEnabled>
 80109b6:	4603      	mov	r3, r0
 80109b8:	4323      	orrs	r3, r4
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d105      	bne.n	80109ca <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	4619      	mov	r1, r3
 80109c4:	485c      	ldr	r0, [pc, #368]	; (8010b38 <HAL_ADC_Init+0x290>)
 80109c6:	f7ff fd65 	bl	8010494 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	7e5b      	ldrb	r3, [r3, #25]
 80109ce:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80109d4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80109da:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80109e0:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80109e8:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80109ea:	4313      	orrs	r3, r2
 80109ec:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d106      	bne.n	8010a06 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fc:	3b01      	subs	r3, #1
 80109fe:	045b      	lsls	r3, r3, #17
 8010a00:	69ba      	ldr	r2, [r7, #24]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d009      	beq.n	8010a22 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a12:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a1a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8010a1c:	69ba      	ldr	r2, [r7, #24]
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	68da      	ldr	r2, [r3, #12]
 8010a28:	4b44      	ldr	r3, [pc, #272]	; (8010b3c <HAL_ADC_Init+0x294>)
 8010a2a:	4013      	ands	r3, r2
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	6812      	ldr	r2, [r2, #0]
 8010a30:	69b9      	ldr	r1, [r7, #24]
 8010a32:	430b      	orrs	r3, r1
 8010a34:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7ff ff20 	bl	8010880 <LL_ADC_INJ_IsConversionOngoing>
 8010a40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d140      	bne.n	8010aca <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d13d      	bne.n	8010aca <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	7e1b      	ldrb	r3, [r3, #24]
 8010a56:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8010a58:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a60:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8010a62:	4313      	orrs	r3, r2
 8010a64:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a70:	f023 0306 	bic.w	r3, r3, #6
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	6812      	ldr	r2, [r2, #0]
 8010a78:	69b9      	ldr	r1, [r7, #24]
 8010a7a:	430b      	orrs	r3, r1
 8010a7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d118      	bne.n	8010aba <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	691b      	ldr	r3, [r3, #16]
 8010a8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010a92:	f023 0304 	bic.w	r3, r3, #4
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010a9e:	4311      	orrs	r1, r2
 8010aa0:	687a      	ldr	r2, [r7, #4]
 8010aa2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8010aa4:	4311      	orrs	r1, r2
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010aaa:	430a      	orrs	r2, r1
 8010aac:	431a      	orrs	r2, r3
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f042 0201 	orr.w	r2, r2, #1
 8010ab6:	611a      	str	r2, [r3, #16]
 8010ab8:	e007      	b.n	8010aca <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	691a      	ldr	r2, [r3, #16]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f022 0201 	bic.w	r2, r2, #1
 8010ac8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	691b      	ldr	r3, [r3, #16]
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d10c      	bne.n	8010aec <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ad8:	f023 010f 	bic.w	r1, r3, #15
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	69db      	ldr	r3, [r3, #28]
 8010ae0:	1e5a      	subs	r2, r3, #1
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	430a      	orrs	r2, r1
 8010ae8:	631a      	str	r2, [r3, #48]	; 0x30
 8010aea:	e007      	b.n	8010afc <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f022 020f 	bic.w	r2, r2, #15
 8010afa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b00:	f023 0303 	bic.w	r3, r3, #3
 8010b04:	f043 0201 	orr.w	r2, r3, #1
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	659a      	str	r2, [r3, #88]	; 0x58
 8010b0c:	e007      	b.n	8010b1e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b12:	f043 0210 	orr.w	r2, r3, #16
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8010b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3724      	adds	r7, #36	; 0x24
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd90      	pop	{r4, r7, pc}
 8010b28:	20000090 	.word	0x20000090
 8010b2c:	053e2d63 	.word	0x053e2d63
 8010b30:	42028000 	.word	0x42028000
 8010b34:	42028100 	.word	0x42028100
 8010b38:	42028300 	.word	0x42028300
 8010b3c:	fff0c007 	.word	0xfff0c007

08010b40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b086      	sub	sp, #24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010b4c:	4850      	ldr	r0, [pc, #320]	; (8010c90 <HAL_ADC_Start_DMA+0x150>)
 8010b4e:	f7ff fddf 	bl	8010710 <LL_ADC_GetMultimode>
 8010b52:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff fe7e 	bl	801085a <LL_ADC_REG_IsConversionOngoing>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f040 808e 	bne.w	8010c82 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d101      	bne.n	8010b74 <HAL_ADC_Start_DMA+0x34>
 8010b70:	2302      	movs	r3, #2
 8010b72:	e089      	b.n	8010c88 <HAL_ADC_Start_DMA+0x148>
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	2201      	movs	r2, #1
 8010b78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d005      	beq.n	8010b8e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	2b05      	cmp	r3, #5
 8010b86:	d002      	beq.n	8010b8e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	2b09      	cmp	r3, #9
 8010b8c:	d172      	bne.n	8010c74 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f000 feac 	bl	80118ec <ADC_Enable>
 8010b94:	4603      	mov	r3, r0
 8010b96:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8010b98:	7dfb      	ldrb	r3, [r7, #23]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d165      	bne.n	8010c6a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ba2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010ba6:	f023 0301 	bic.w	r3, r3, #1
 8010baa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a37      	ldr	r2, [pc, #220]	; (8010c94 <HAL_ADC_Start_DMA+0x154>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d002      	beq.n	8010bc2 <HAL_ADC_Start_DMA+0x82>
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	e000      	b.n	8010bc4 <HAL_ADC_Start_DMA+0x84>
 8010bc2:	4b35      	ldr	r3, [pc, #212]	; (8010c98 <HAL_ADC_Start_DMA+0x158>)
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	6812      	ldr	r2, [r2, #0]
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d002      	beq.n	8010bd2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d105      	bne.n	8010bde <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d006      	beq.n	8010bf8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010bee:	f023 0206 	bic.w	r2, r3, #6
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8010bf6:	e002      	b.n	8010bfe <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c02:	4a26      	ldr	r2, [pc, #152]	; (8010c9c <HAL_ADC_Start_DMA+0x15c>)
 8010c04:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c0a:	4a25      	ldr	r2, [pc, #148]	; (8010ca0 <HAL_ADC_Start_DMA+0x160>)
 8010c0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c12:	4a24      	ldr	r2, [pc, #144]	; (8010ca4 <HAL_ADC_Start_DMA+0x164>)
 8010c14:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	221c      	movs	r2, #28
 8010c1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f042 0210 	orr.w	r2, r2, #16
 8010c34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	68da      	ldr	r2, [r3, #12]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f042 0201 	orr.w	r2, r2, #1
 8010c44:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	3340      	adds	r3, #64	; 0x40
 8010c50:	4619      	mov	r1, r3
 8010c52:	68ba      	ldr	r2, [r7, #8]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f001 f9e7 	bl	8012028 <HAL_DMA_Start_IT>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7ff fde5 	bl	8010832 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8010c68:	e00d      	b.n	8010c86 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8010c72:	e008      	b.n	8010c86 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8010c74:	2301      	movs	r3, #1
 8010c76:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8010c80:	e001      	b.n	8010c86 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8010c82:	2302      	movs	r3, #2
 8010c84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8010c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3718      	adds	r7, #24
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	42028300 	.word	0x42028300
 8010c94:	42028100 	.word	0x42028100
 8010c98:	42028000 	.word	0x42028000
 8010c9c:	080119f9 	.word	0x080119f9
 8010ca0:	08011ad1 	.word	0x08011ad1
 8010ca4:	08011aed 	.word	0x08011aed

08010ca8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b08a      	sub	sp, #40	; 0x28
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010cc4:	4882      	ldr	r0, [pc, #520]	; (8010ed0 <HAL_ADC_IRQHandler+0x228>)
 8010cc6:	f7ff fd23 	bl	8010710 <LL_ADC_GetMultimode>
 8010cca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	f003 0302 	and.w	r3, r3, #2
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d017      	beq.n	8010d06 <HAL_ADC_IRQHandler+0x5e>
 8010cd6:	69bb      	ldr	r3, [r7, #24]
 8010cd8:	f003 0302 	and.w	r3, r3, #2
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d012      	beq.n	8010d06 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ce4:	f003 0310 	and.w	r3, r3, #16
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d105      	bne.n	8010cf8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cf0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 ff5f 	bl	8011bbc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2202      	movs	r2, #2
 8010d04:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	f003 0304 	and.w	r3, r3, #4
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d004      	beq.n	8010d1a <HAL_ADC_IRQHandler+0x72>
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	f003 0304 	and.w	r3, r3, #4
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10a      	bne.n	8010d30 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8010d1a:	69fb      	ldr	r3, [r7, #28]
 8010d1c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	f000 8083 	beq.w	8010e2c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	f003 0308 	and.w	r3, r3, #8
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d07d      	beq.n	8010e2c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d34:	f003 0310 	and.w	r3, r3, #16
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d105      	bne.n	8010d48 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7ff fc3d 	bl	80105cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d062      	beq.n	8010e1e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4a5d      	ldr	r2, [pc, #372]	; (8010ed4 <HAL_ADC_IRQHandler+0x22c>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d002      	beq.n	8010d68 <HAL_ADC_IRQHandler+0xc0>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	e000      	b.n	8010d6a <HAL_ADC_IRQHandler+0xc2>
 8010d68:	4b5b      	ldr	r3, [pc, #364]	; (8010ed8 <HAL_ADC_IRQHandler+0x230>)
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	6812      	ldr	r2, [r2, #0]
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d008      	beq.n	8010d84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d005      	beq.n	8010d84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	2b05      	cmp	r3, #5
 8010d7c:	d002      	beq.n	8010d84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	2b09      	cmp	r3, #9
 8010d82:	d104      	bne.n	8010d8e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	623b      	str	r3, [r7, #32]
 8010d8c:	e00c      	b.n	8010da8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4a50      	ldr	r2, [pc, #320]	; (8010ed4 <HAL_ADC_IRQHandler+0x22c>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d002      	beq.n	8010d9e <HAL_ADC_IRQHandler+0xf6>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	e000      	b.n	8010da0 <HAL_ADC_IRQHandler+0xf8>
 8010d9e:	4b4e      	ldr	r3, [pc, #312]	; (8010ed8 <HAL_ADC_IRQHandler+0x230>)
 8010da0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8010da8:	6a3b      	ldr	r3, [r7, #32]
 8010daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d135      	bne.n	8010e1e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	f003 0308 	and.w	r3, r3, #8
 8010dbc:	2b08      	cmp	r3, #8
 8010dbe:	d12e      	bne.n	8010e1e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7ff fd48 	bl	801085a <LL_ADC_REG_IsConversionOngoing>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d11a      	bne.n	8010e06 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	685a      	ldr	r2, [r3, #4]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f022 020c 	bic.w	r2, r2, #12
 8010dde:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d112      	bne.n	8010e1e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dfc:	f043 0201 	orr.w	r2, r3, #1
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	659a      	str	r2, [r3, #88]	; 0x58
 8010e04:	e00b      	b.n	8010e1e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e0a:	f043 0210 	orr.w	r2, r3, #16
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e16:	f043 0201 	orr.w	r2, r3, #1
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7f0 f9de 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	220c      	movs	r2, #12
 8010e2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	f003 0320 	and.w	r3, r3, #32
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d004      	beq.n	8010e40 <HAL_ADC_IRQHandler+0x198>
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	f003 0320 	and.w	r3, r3, #32
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d10b      	bne.n	8010e58 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f000 809f 	beq.w	8010f8a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f000 8099 	beq.w	8010f8a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e5c:	f003 0310 	and.w	r3, r3, #16
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d105      	bne.n	8010e70 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7ff fbe8 	bl	801064a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8010e7a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7ff fba3 	bl	80105cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8010e86:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a11      	ldr	r2, [pc, #68]	; (8010ed4 <HAL_ADC_IRQHandler+0x22c>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d002      	beq.n	8010e98 <HAL_ADC_IRQHandler+0x1f0>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	e000      	b.n	8010e9a <HAL_ADC_IRQHandler+0x1f2>
 8010e98:	4b0f      	ldr	r3, [pc, #60]	; (8010ed8 <HAL_ADC_IRQHandler+0x230>)
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	6812      	ldr	r2, [r2, #0]
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d008      	beq.n	8010eb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d005      	beq.n	8010eb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	2b06      	cmp	r3, #6
 8010eac:	d002      	beq.n	8010eb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	2b07      	cmp	r3, #7
 8010eb2:	d104      	bne.n	8010ebe <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68db      	ldr	r3, [r3, #12]
 8010eba:	623b      	str	r3, [r7, #32]
 8010ebc:	e013      	b.n	8010ee6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a04      	ldr	r2, [pc, #16]	; (8010ed4 <HAL_ADC_IRQHandler+0x22c>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d009      	beq.n	8010edc <HAL_ADC_IRQHandler+0x234>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	e007      	b.n	8010ede <HAL_ADC_IRQHandler+0x236>
 8010ece:	bf00      	nop
 8010ed0:	42028300 	.word	0x42028300
 8010ed4:	42028100 	.word	0x42028100
 8010ed8:	42028000 	.word	0x42028000
 8010edc:	4b7d      	ldr	r3, [pc, #500]	; (80110d4 <HAL_ADC_IRQHandler+0x42c>)
 8010ede:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d047      	beq.n	8010f7c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8010eec:	6a3b      	ldr	r3, [r7, #32]
 8010eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d007      	beq.n	8010f06 <HAL_ADC_IRQHandler+0x25e>
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d03f      	beq.n	8010f7c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d13a      	bne.n	8010f7c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f10:	2b40      	cmp	r3, #64	; 0x40
 8010f12:	d133      	bne.n	8010f7c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8010f14:	6a3b      	ldr	r3, [r7, #32]
 8010f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d12e      	bne.n	8010f7c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ff fcac 	bl	8010880 <LL_ADC_INJ_IsConversionOngoing>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d11a      	bne.n	8010f64 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	685a      	ldr	r2, [r3, #4]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010f3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d112      	bne.n	8010f7c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f5a:	f043 0201 	orr.w	r2, r3, #1
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	659a      	str	r2, [r3, #88]	; 0x58
 8010f62:	e00b      	b.n	8010f7c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f68:	f043 0210 	orr.w	r2, r3, #16
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f74:	f043 0201 	orr.w	r2, r3, #1
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 fdf5 	bl	8011b6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	2260      	movs	r2, #96	; 0x60
 8010f88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d011      	beq.n	8010fb8 <HAL_ADC_IRQHandler+0x310>
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00c      	beq.n	8010fb8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 f8a0 	bl	80110f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2280      	movs	r2, #128	; 0x80
 8010fb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d012      	beq.n	8010fe8 <HAL_ADC_IRQHandler+0x340>
 8010fc2:	69bb      	ldr	r3, [r7, #24]
 8010fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d00d      	beq.n	8010fe8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 fddb 	bl	8011b94 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010fe6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d012      	beq.n	8011018 <HAL_ADC_IRQHandler+0x370>
 8010ff2:	69bb      	ldr	r3, [r7, #24]
 8010ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00d      	beq.n	8011018 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011000:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 fdcd 	bl	8011ba8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011016:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	f003 0310 	and.w	r3, r3, #16
 801101e:	2b00      	cmp	r3, #0
 8011020:	d036      	beq.n	8011090 <HAL_ADC_IRQHandler+0x3e8>
 8011022:	69bb      	ldr	r3, [r7, #24]
 8011024:	f003 0310 	and.w	r3, r3, #16
 8011028:	2b00      	cmp	r3, #0
 801102a:	d031      	beq.n	8011090 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011030:	2b00      	cmp	r3, #0
 8011032:	d102      	bne.n	801103a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8011034:	2301      	movs	r3, #1
 8011036:	627b      	str	r3, [r7, #36]	; 0x24
 8011038:	e014      	b.n	8011064 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d008      	beq.n	8011052 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8011040:	4825      	ldr	r0, [pc, #148]	; (80110d8 <HAL_ADC_IRQHandler+0x430>)
 8011042:	f7ff fb73 	bl	801072c <LL_ADC_GetMultiDMATransfer>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00b      	beq.n	8011064 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 801104c:	2301      	movs	r3, #1
 801104e:	627b      	str	r3, [r7, #36]	; 0x24
 8011050:	e008      	b.n	8011064 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	f003 0301 	and.w	r3, r3, #1
 801105c:	2b00      	cmp	r3, #0
 801105e:	d001      	beq.n	8011064 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8011060:	2301      	movs	r3, #1
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8011064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011066:	2b01      	cmp	r3, #1
 8011068:	d10e      	bne.n	8011088 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801106e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801107a:	f043 0202 	orr.w	r2, r3, #2
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 f83e 	bl	8011104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2210      	movs	r2, #16
 801108e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011096:	2b00      	cmp	r3, #0
 8011098:	d018      	beq.n	80110cc <HAL_ADC_IRQHandler+0x424>
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d013      	beq.n	80110cc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110a8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110b4:	f043 0208 	orr.w	r2, r3, #8
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80110c4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f000 fd5a 	bl	8011b80 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80110cc:	bf00      	nop
 80110ce:	3728      	adds	r7, #40	; 0x28
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	42028000 	.word	0x42028000
 80110d8:	42028300 	.word	0x42028300

080110dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80110e4:	bf00      	nop
 80110e6:	370c      	adds	r7, #12
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80110f8:	bf00      	nop
 80110fa:	370c      	adds	r7, #12
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr

08011104 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801110c:	bf00      	nop
 801110e:	370c      	adds	r7, #12
 8011110:	46bd      	mov	sp, r7
 8011112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011116:	4770      	bx	lr

08011118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8011118:	b590      	push	{r4, r7, lr}
 801111a:	b0b7      	sub	sp, #220	; 0xdc
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011122:	2300      	movs	r3, #0
 8011124:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8011128:	2300      	movs	r3, #0
 801112a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011132:	2b01      	cmp	r3, #1
 8011134:	d101      	bne.n	801113a <HAL_ADC_ConfigChannel+0x22>
 8011136:	2302      	movs	r3, #2
 8011138:	e3c1      	b.n	80118be <HAL_ADC_ConfigChannel+0x7a6>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2201      	movs	r2, #1
 801113e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	4618      	mov	r0, r3
 8011148:	f7ff fb87 	bl	801085a <LL_ADC_REG_IsConversionOngoing>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	f040 83a6 	bne.w	80118a0 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6818      	ldr	r0, [r3, #0]
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	6859      	ldr	r1, [r3, #4]
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	461a      	mov	r2, r3
 8011162:	f7ff fa46 	bl	80105f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4618      	mov	r0, r3
 801116c:	f7ff fb75 	bl	801085a <LL_ADC_REG_IsConversionOngoing>
 8011170:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff fb81 	bl	8010880 <LL_ADC_INJ_IsConversionOngoing>
 801117e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8011182:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011186:	2b00      	cmp	r3, #0
 8011188:	f040 81c1 	bne.w	801150e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801118c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011190:	2b00      	cmp	r3, #0
 8011192:	f040 81bc 	bne.w	801150e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	689b      	ldr	r3, [r3, #8]
 801119a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801119e:	d10f      	bne.n	80111c0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6818      	ldr	r0, [r3, #0]
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2200      	movs	r2, #0
 80111aa:	4619      	mov	r1, r3
 80111ac:	f7ff fa60 	bl	8010670 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7ff f9f4 	bl	80105a6 <LL_ADC_SetSamplingTimeCommonConfig>
 80111be:	e00e      	b.n	80111de <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6818      	ldr	r0, [r3, #0]
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	6819      	ldr	r1, [r3, #0]
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	689b      	ldr	r3, [r3, #8]
 80111cc:	461a      	mov	r2, r3
 80111ce:	f7ff fa4f 	bl	8010670 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	2100      	movs	r1, #0
 80111d8:	4618      	mov	r0, r3
 80111da:	f7ff f9e4 	bl	80105a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	695a      	ldr	r2, [r3, #20]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	08db      	lsrs	r3, r3, #3
 80111ea:	f003 0303 	and.w	r3, r3, #3
 80111ee:	005b      	lsls	r3, r3, #1
 80111f0:	fa02 f303 	lsl.w	r3, r2, r3
 80111f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	691b      	ldr	r3, [r3, #16]
 80111fc:	2b04      	cmp	r3, #4
 80111fe:	d00a      	beq.n	8011216 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6818      	ldr	r0, [r3, #0]
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	6919      	ldr	r1, [r3, #16]
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011210:	f7ff f974 	bl	80104fc <LL_ADC_SetOffset>
 8011214:	e17b      	b.n	801150e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2100      	movs	r1, #0
 801121c:	4618      	mov	r0, r3
 801121e:	f7ff f991 	bl	8010544 <LL_ADC_GetOffsetChannel>
 8011222:	4603      	mov	r3, r0
 8011224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011228:	2b00      	cmp	r3, #0
 801122a:	d10a      	bne.n	8011242 <HAL_ADC_ConfigChannel+0x12a>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2100      	movs	r1, #0
 8011232:	4618      	mov	r0, r3
 8011234:	f7ff f986 	bl	8010544 <LL_ADC_GetOffsetChannel>
 8011238:	4603      	mov	r3, r0
 801123a:	0e9b      	lsrs	r3, r3, #26
 801123c:	f003 021f 	and.w	r2, r3, #31
 8011240:	e01e      	b.n	8011280 <HAL_ADC_ConfigChannel+0x168>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2100      	movs	r1, #0
 8011248:	4618      	mov	r0, r3
 801124a:	f7ff f97b 	bl	8010544 <LL_ADC_GetOffsetChannel>
 801124e:	4603      	mov	r3, r0
 8011250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011258:	fa93 f3a3 	rbit	r3, r3
 801125c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8011260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8011268:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d101      	bne.n	8011274 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8011270:	2320      	movs	r3, #32
 8011272:	e004      	b.n	801127e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8011274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011278:	fab3 f383 	clz	r3, r3
 801127c:	b2db      	uxtb	r3, r3
 801127e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011288:	2b00      	cmp	r3, #0
 801128a:	d105      	bne.n	8011298 <HAL_ADC_ConfigChannel+0x180>
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	0e9b      	lsrs	r3, r3, #26
 8011292:	f003 031f 	and.w	r3, r3, #31
 8011296:	e018      	b.n	80112ca <HAL_ADC_ConfigChannel+0x1b2>
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80112a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80112a4:	fa93 f3a3 	rbit	r3, r3
 80112a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80112ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80112b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80112b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d101      	bne.n	80112c0 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80112bc:	2320      	movs	r3, #32
 80112be:	e004      	b.n	80112ca <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80112c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80112c4:	fab3 f383 	clz	r3, r3
 80112c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d106      	bne.n	80112dc <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2200      	movs	r2, #0
 80112d4:	2100      	movs	r1, #0
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7ff f94a 	bl	8010570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2101      	movs	r1, #1
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff f92e 	bl	8010544 <LL_ADC_GetOffsetChannel>
 80112e8:	4603      	mov	r3, r0
 80112ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d10a      	bne.n	8011308 <HAL_ADC_ConfigChannel+0x1f0>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2101      	movs	r1, #1
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7ff f923 	bl	8010544 <LL_ADC_GetOffsetChannel>
 80112fe:	4603      	mov	r3, r0
 8011300:	0e9b      	lsrs	r3, r3, #26
 8011302:	f003 021f 	and.w	r2, r3, #31
 8011306:	e01e      	b.n	8011346 <HAL_ADC_ConfigChannel+0x22e>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2101      	movs	r1, #1
 801130e:	4618      	mov	r0, r3
 8011310:	f7ff f918 	bl	8010544 <LL_ADC_GetOffsetChannel>
 8011314:	4603      	mov	r3, r0
 8011316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801131a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801131e:	fa93 f3a3 	rbit	r3, r3
 8011322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8011326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801132a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801132e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011332:	2b00      	cmp	r3, #0
 8011334:	d101      	bne.n	801133a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8011336:	2320      	movs	r3, #32
 8011338:	e004      	b.n	8011344 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 801133a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801133e:	fab3 f383 	clz	r3, r3
 8011342:	b2db      	uxtb	r3, r3
 8011344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801134e:	2b00      	cmp	r3, #0
 8011350:	d105      	bne.n	801135e <HAL_ADC_ConfigChannel+0x246>
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	0e9b      	lsrs	r3, r3, #26
 8011358:	f003 031f 	and.w	r3, r3, #31
 801135c:	e018      	b.n	8011390 <HAL_ADC_ConfigChannel+0x278>
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801136a:	fa93 f3a3 	rbit	r3, r3
 801136e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8011372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801137a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801137e:	2b00      	cmp	r3, #0
 8011380:	d101      	bne.n	8011386 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8011382:	2320      	movs	r3, #32
 8011384:	e004      	b.n	8011390 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8011386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801138a:	fab3 f383 	clz	r3, r3
 801138e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8011390:	429a      	cmp	r2, r3
 8011392:	d106      	bne.n	80113a2 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2200      	movs	r2, #0
 801139a:	2101      	movs	r1, #1
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff f8e7 	bl	8010570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2102      	movs	r1, #2
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7ff f8cb 	bl	8010544 <LL_ADC_GetOffsetChannel>
 80113ae:	4603      	mov	r3, r0
 80113b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d10a      	bne.n	80113ce <HAL_ADC_ConfigChannel+0x2b6>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2102      	movs	r1, #2
 80113be:	4618      	mov	r0, r3
 80113c0:	f7ff f8c0 	bl	8010544 <LL_ADC_GetOffsetChannel>
 80113c4:	4603      	mov	r3, r0
 80113c6:	0e9b      	lsrs	r3, r3, #26
 80113c8:	f003 021f 	and.w	r2, r3, #31
 80113cc:	e01e      	b.n	801140c <HAL_ADC_ConfigChannel+0x2f4>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2102      	movs	r1, #2
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7ff f8b5 	bl	8010544 <LL_ADC_GetOffsetChannel>
 80113da:	4603      	mov	r3, r0
 80113dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80113e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80113e4:	fa93 f3a3 	rbit	r3, r3
 80113e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80113ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80113f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80113f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d101      	bne.n	8011400 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80113fc:	2320      	movs	r3, #32
 80113fe:	e004      	b.n	801140a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8011400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011404:	fab3 f383 	clz	r3, r3
 8011408:	b2db      	uxtb	r3, r3
 801140a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011414:	2b00      	cmp	r3, #0
 8011416:	d105      	bne.n	8011424 <HAL_ADC_ConfigChannel+0x30c>
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	0e9b      	lsrs	r3, r3, #26
 801141e:	f003 031f 	and.w	r3, r3, #31
 8011422:	e016      	b.n	8011452 <HAL_ADC_ConfigChannel+0x33a>
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801142c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011430:	fa93 f3a3 	rbit	r3, r3
 8011434:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8011436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801143c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011440:	2b00      	cmp	r3, #0
 8011442:	d101      	bne.n	8011448 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8011444:	2320      	movs	r3, #32
 8011446:	e004      	b.n	8011452 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8011448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801144c:	fab3 f383 	clz	r3, r3
 8011450:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8011452:	429a      	cmp	r2, r3
 8011454:	d106      	bne.n	8011464 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	2200      	movs	r2, #0
 801145c:	2102      	movs	r1, #2
 801145e:	4618      	mov	r0, r3
 8011460:	f7ff f886 	bl	8010570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2103      	movs	r1, #3
 801146a:	4618      	mov	r0, r3
 801146c:	f7ff f86a 	bl	8010544 <LL_ADC_GetOffsetChannel>
 8011470:	4603      	mov	r3, r0
 8011472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011476:	2b00      	cmp	r3, #0
 8011478:	d10a      	bne.n	8011490 <HAL_ADC_ConfigChannel+0x378>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2103      	movs	r1, #3
 8011480:	4618      	mov	r0, r3
 8011482:	f7ff f85f 	bl	8010544 <LL_ADC_GetOffsetChannel>
 8011486:	4603      	mov	r3, r0
 8011488:	0e9b      	lsrs	r3, r3, #26
 801148a:	f003 021f 	and.w	r2, r3, #31
 801148e:	e017      	b.n	80114c0 <HAL_ADC_ConfigChannel+0x3a8>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2103      	movs	r1, #3
 8011496:	4618      	mov	r0, r3
 8011498:	f7ff f854 	bl	8010544 <LL_ADC_GetOffsetChannel>
 801149c:	4603      	mov	r3, r0
 801149e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80114a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80114a2:	fa93 f3a3 	rbit	r3, r3
 80114a6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80114a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114aa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80114ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d101      	bne.n	80114b6 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80114b2:	2320      	movs	r3, #32
 80114b4:	e003      	b.n	80114be <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80114b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114b8:	fab3 f383 	clz	r3, r3
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d105      	bne.n	80114d8 <HAL_ADC_ConfigChannel+0x3c0>
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	0e9b      	lsrs	r3, r3, #26
 80114d2:	f003 031f 	and.w	r3, r3, #31
 80114d6:	e011      	b.n	80114fc <HAL_ADC_ConfigChannel+0x3e4>
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80114de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114e0:	fa93 f3a3 	rbit	r3, r3
 80114e4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80114e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80114ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d101      	bne.n	80114f4 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80114f0:	2320      	movs	r3, #32
 80114f2:	e003      	b.n	80114fc <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80114f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114f6:	fab3 f383 	clz	r3, r3
 80114fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d106      	bne.n	801150e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	2200      	movs	r2, #0
 8011506:	2103      	movs	r1, #3
 8011508:	4618      	mov	r0, r3
 801150a:	f7ff f831 	bl	8010570 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	4618      	mov	r0, r3
 8011514:	f7ff f97a 	bl	801080c <LL_ADC_IsEnabled>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	f040 81c9 	bne.w	80118b2 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6818      	ldr	r0, [r3, #0]
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	6819      	ldr	r1, [r3, #0]
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	461a      	mov	r2, r3
 801152e:	f7ff f8cb 	bl	80106c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	4a8f      	ldr	r2, [pc, #572]	; (8011774 <HAL_ADC_ConfigChannel+0x65c>)
 8011538:	4293      	cmp	r3, r2
 801153a:	f040 8131 	bne.w	80117a0 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10b      	bne.n	8011566 <HAL_ADC_ConfigChannel+0x44e>
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	0e9b      	lsrs	r3, r3, #26
 8011554:	3301      	adds	r3, #1
 8011556:	f003 031f 	and.w	r3, r3, #31
 801155a:	2b09      	cmp	r3, #9
 801155c:	bf94      	ite	ls
 801155e:	2301      	movls	r3, #1
 8011560:	2300      	movhi	r3, #0
 8011562:	b2db      	uxtb	r3, r3
 8011564:	e019      	b.n	801159a <HAL_ADC_ConfigChannel+0x482>
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801156c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801156e:	fa93 f3a3 	rbit	r3, r3
 8011572:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8011574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011576:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8011578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801157a:	2b00      	cmp	r3, #0
 801157c:	d101      	bne.n	8011582 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 801157e:	2320      	movs	r3, #32
 8011580:	e003      	b.n	801158a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8011582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011584:	fab3 f383 	clz	r3, r3
 8011588:	b2db      	uxtb	r3, r3
 801158a:	3301      	adds	r3, #1
 801158c:	f003 031f 	and.w	r3, r3, #31
 8011590:	2b09      	cmp	r3, #9
 8011592:	bf94      	ite	ls
 8011594:	2301      	movls	r3, #1
 8011596:	2300      	movhi	r3, #0
 8011598:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801159a:	2b00      	cmp	r3, #0
 801159c:	d079      	beq.n	8011692 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d107      	bne.n	80115ba <HAL_ADC_ConfigChannel+0x4a2>
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	0e9b      	lsrs	r3, r3, #26
 80115b0:	3301      	adds	r3, #1
 80115b2:	069b      	lsls	r3, r3, #26
 80115b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80115b8:	e015      	b.n	80115e6 <HAL_ADC_ConfigChannel+0x4ce>
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80115c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115c2:	fa93 f3a3 	rbit	r3, r3
 80115c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80115c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80115cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d101      	bne.n	80115d6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80115d2:	2320      	movs	r3, #32
 80115d4:	e003      	b.n	80115de <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80115d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115d8:	fab3 f383 	clz	r3, r3
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	3301      	adds	r3, #1
 80115e0:	069b      	lsls	r3, r3, #26
 80115e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d109      	bne.n	8011606 <HAL_ADC_ConfigChannel+0x4ee>
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	0e9b      	lsrs	r3, r3, #26
 80115f8:	3301      	adds	r3, #1
 80115fa:	f003 031f 	and.w	r3, r3, #31
 80115fe:	2101      	movs	r1, #1
 8011600:	fa01 f303 	lsl.w	r3, r1, r3
 8011604:	e017      	b.n	8011636 <HAL_ADC_ConfigChannel+0x51e>
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801160c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801160e:	fa93 f3a3 	rbit	r3, r3
 8011612:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8011614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011616:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8011618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801161a:	2b00      	cmp	r3, #0
 801161c:	d101      	bne.n	8011622 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 801161e:	2320      	movs	r3, #32
 8011620:	e003      	b.n	801162a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8011622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011624:	fab3 f383 	clz	r3, r3
 8011628:	b2db      	uxtb	r3, r3
 801162a:	3301      	adds	r3, #1
 801162c:	f003 031f 	and.w	r3, r3, #31
 8011630:	2101      	movs	r1, #1
 8011632:	fa01 f303 	lsl.w	r3, r1, r3
 8011636:	ea42 0103 	orr.w	r1, r2, r3
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10a      	bne.n	801165c <HAL_ADC_ConfigChannel+0x544>
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	0e9b      	lsrs	r3, r3, #26
 801164c:	3301      	adds	r3, #1
 801164e:	f003 021f 	and.w	r2, r3, #31
 8011652:	4613      	mov	r3, r2
 8011654:	005b      	lsls	r3, r3, #1
 8011656:	4413      	add	r3, r2
 8011658:	051b      	lsls	r3, r3, #20
 801165a:	e018      	b.n	801168e <HAL_ADC_ConfigChannel+0x576>
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011664:	fa93 f3a3 	rbit	r3, r3
 8011668:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801166a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801166e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011670:	2b00      	cmp	r3, #0
 8011672:	d101      	bne.n	8011678 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8011674:	2320      	movs	r3, #32
 8011676:	e003      	b.n	8011680 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8011678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801167a:	fab3 f383 	clz	r3, r3
 801167e:	b2db      	uxtb	r3, r3
 8011680:	3301      	adds	r3, #1
 8011682:	f003 021f 	and.w	r2, r3, #31
 8011686:	4613      	mov	r3, r2
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	4413      	add	r3, r2
 801168c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801168e:	430b      	orrs	r3, r1
 8011690:	e081      	b.n	8011796 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801169a:	2b00      	cmp	r3, #0
 801169c:	d107      	bne.n	80116ae <HAL_ADC_ConfigChannel+0x596>
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	0e9b      	lsrs	r3, r3, #26
 80116a4:	3301      	adds	r3, #1
 80116a6:	069b      	lsls	r3, r3, #26
 80116a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80116ac:	e015      	b.n	80116da <HAL_ADC_ConfigChannel+0x5c2>
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80116b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b6:	fa93 f3a3 	rbit	r3, r3
 80116ba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80116bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116be:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80116c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d101      	bne.n	80116ca <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80116c6:	2320      	movs	r3, #32
 80116c8:	e003      	b.n	80116d2 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80116ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116cc:	fab3 f383 	clz	r3, r3
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	3301      	adds	r3, #1
 80116d4:	069b      	lsls	r3, r3, #26
 80116d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d109      	bne.n	80116fa <HAL_ADC_ConfigChannel+0x5e2>
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	0e9b      	lsrs	r3, r3, #26
 80116ec:	3301      	adds	r3, #1
 80116ee:	f003 031f 	and.w	r3, r3, #31
 80116f2:	2101      	movs	r1, #1
 80116f4:	fa01 f303 	lsl.w	r3, r1, r3
 80116f8:	e017      	b.n	801172a <HAL_ADC_ConfigChannel+0x612>
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011700:	6a3b      	ldr	r3, [r7, #32]
 8011702:	fa93 f3a3 	rbit	r3, r3
 8011706:	61fb      	str	r3, [r7, #28]
  return result;
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170e:	2b00      	cmp	r3, #0
 8011710:	d101      	bne.n	8011716 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8011712:	2320      	movs	r3, #32
 8011714:	e003      	b.n	801171e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8011716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011718:	fab3 f383 	clz	r3, r3
 801171c:	b2db      	uxtb	r3, r3
 801171e:	3301      	adds	r3, #1
 8011720:	f003 031f 	and.w	r3, r3, #31
 8011724:	2101      	movs	r1, #1
 8011726:	fa01 f303 	lsl.w	r3, r1, r3
 801172a:	ea42 0103 	orr.w	r1, r2, r3
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011736:	2b00      	cmp	r3, #0
 8011738:	d10d      	bne.n	8011756 <HAL_ADC_ConfigChannel+0x63e>
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	0e9b      	lsrs	r3, r3, #26
 8011740:	3301      	adds	r3, #1
 8011742:	f003 021f 	and.w	r2, r3, #31
 8011746:	4613      	mov	r3, r2
 8011748:	005b      	lsls	r3, r3, #1
 801174a:	4413      	add	r3, r2
 801174c:	3b1e      	subs	r3, #30
 801174e:	051b      	lsls	r3, r3, #20
 8011750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011754:	e01e      	b.n	8011794 <HAL_ADC_ConfigChannel+0x67c>
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	fa93 f3a3 	rbit	r3, r3
 8011762:	613b      	str	r3, [r7, #16]
  return result;
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d104      	bne.n	8011778 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 801176e:	2320      	movs	r3, #32
 8011770:	e006      	b.n	8011780 <HAL_ADC_ConfigChannel+0x668>
 8011772:	bf00      	nop
 8011774:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	fab3 f383 	clz	r3, r3
 801177e:	b2db      	uxtb	r3, r3
 8011780:	3301      	adds	r3, #1
 8011782:	f003 021f 	and.w	r2, r3, #31
 8011786:	4613      	mov	r3, r2
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	4413      	add	r3, r2
 801178c:	3b1e      	subs	r3, #30
 801178e:	051b      	lsls	r3, r3, #20
 8011790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011794:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8011796:	683a      	ldr	r2, [r7, #0]
 8011798:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801179a:	4619      	mov	r1, r3
 801179c:	f7fe ff68 	bl	8010670 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	681a      	ldr	r2, [r3, #0]
 80117a4:	4b48      	ldr	r3, [pc, #288]	; (80118c8 <HAL_ADC_ConfigChannel+0x7b0>)
 80117a6:	4013      	ands	r3, r2
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f000 8082 	beq.w	80118b2 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80117ae:	4847      	ldr	r0, [pc, #284]	; (80118cc <HAL_ADC_ConfigChannel+0x7b4>)
 80117b0:	f7fe fe96 	bl	80104e0 <LL_ADC_GetCommonPathInternalCh>
 80117b4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80117b8:	4845      	ldr	r0, [pc, #276]	; (80118d0 <HAL_ADC_ConfigChannel+0x7b8>)
 80117ba:	f7ff f827 	bl	801080c <LL_ADC_IsEnabled>
 80117be:	4604      	mov	r4, r0
 80117c0:	4844      	ldr	r0, [pc, #272]	; (80118d4 <HAL_ADC_ConfigChannel+0x7bc>)
 80117c2:	f7ff f823 	bl	801080c <LL_ADC_IsEnabled>
 80117c6:	4603      	mov	r3, r0
 80117c8:	4323      	orrs	r3, r4
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d15e      	bne.n	801188c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	4a41      	ldr	r2, [pc, #260]	; (80118d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d127      	bne.n	8011828 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80117d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80117dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d121      	bne.n	8011828 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4a39      	ldr	r2, [pc, #228]	; (80118d0 <HAL_ADC_ConfigChannel+0x7b8>)
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d161      	bne.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80117ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80117f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80117f6:	4619      	mov	r1, r3
 80117f8:	4834      	ldr	r0, [pc, #208]	; (80118cc <HAL_ADC_ConfigChannel+0x7b4>)
 80117fa:	f7fe fe5e 	bl	80104ba <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80117fe:	4b37      	ldr	r3, [pc, #220]	; (80118dc <HAL_ADC_ConfigChannel+0x7c4>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	099b      	lsrs	r3, r3, #6
 8011804:	4a36      	ldr	r2, [pc, #216]	; (80118e0 <HAL_ADC_ConfigChannel+0x7c8>)
 8011806:	fba2 2303 	umull	r2, r3, r2, r3
 801180a:	099b      	lsrs	r3, r3, #6
 801180c:	1c5a      	adds	r2, r3, #1
 801180e:	4613      	mov	r3, r2
 8011810:	005b      	lsls	r3, r3, #1
 8011812:	4413      	add	r3, r2
 8011814:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8011816:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8011818:	e002      	b.n	8011820 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	3b01      	subs	r3, #1
 801181e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1f9      	bne.n	801181a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8011826:	e044      	b.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	4a2d      	ldr	r2, [pc, #180]	; (80118e4 <HAL_ADC_ConfigChannel+0x7cc>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d113      	bne.n	801185a <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8011832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801183a:	2b00      	cmp	r3, #0
 801183c:	d10d      	bne.n	801185a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4a23      	ldr	r2, [pc, #140]	; (80118d0 <HAL_ADC_ConfigChannel+0x7b8>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d134      	bne.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801184c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011850:	4619      	mov	r1, r3
 8011852:	481e      	ldr	r0, [pc, #120]	; (80118cc <HAL_ADC_ConfigChannel+0x7b4>)
 8011854:	f7fe fe31 	bl	80104ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8011858:	e02b      	b.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4a22      	ldr	r2, [pc, #136]	; (80118e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8011860:	4293      	cmp	r3, r2
 8011862:	d126      	bne.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8011864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801186c:	2b00      	cmp	r3, #0
 801186e:	d120      	bne.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a16      	ldr	r2, [pc, #88]	; (80118d0 <HAL_ADC_ConfigChannel+0x7b8>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d11b      	bne.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801187a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801187e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011882:	4619      	mov	r1, r3
 8011884:	4811      	ldr	r0, [pc, #68]	; (80118cc <HAL_ADC_ConfigChannel+0x7b4>)
 8011886:	f7fe fe18 	bl	80104ba <LL_ADC_SetCommonPathInternalCh>
 801188a:	e012      	b.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011890:	f043 0220 	orr.w	r2, r3, #32
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8011898:	2301      	movs	r3, #1
 801189a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 801189e:	e008      	b.n	80118b2 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118a4:	f043 0220 	orr.w	r2, r3, #32
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80118ac:	2301      	movs	r3, #1
 80118ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2200      	movs	r2, #0
 80118b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80118ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80118be:	4618      	mov	r0, r3
 80118c0:	37dc      	adds	r7, #220	; 0xdc
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd90      	pop	{r4, r7, pc}
 80118c6:	bf00      	nop
 80118c8:	80080000 	.word	0x80080000
 80118cc:	42028300 	.word	0x42028300
 80118d0:	42028000 	.word	0x42028000
 80118d4:	42028100 	.word	0x42028100
 80118d8:	c7520000 	.word	0xc7520000
 80118dc:	20000090 	.word	0x20000090
 80118e0:	053e2d63 	.word	0x053e2d63
 80118e4:	cb840000 	.word	0xcb840000
 80118e8:	80000001 	.word	0x80000001

080118ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80118f4:	2300      	movs	r3, #0
 80118f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7fe ff85 	bl	801080c <LL_ADC_IsEnabled>
 8011902:	4603      	mov	r3, r0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d169      	bne.n	80119dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	689a      	ldr	r2, [r3, #8]
 801190e:	4b36      	ldr	r3, [pc, #216]	; (80119e8 <ADC_Enable+0xfc>)
 8011910:	4013      	ands	r3, r2
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00d      	beq.n	8011932 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801191a:	f043 0210 	orr.w	r2, r3, #16
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011926:	f043 0201 	orr.w	r2, r3, #1
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 801192e:	2301      	movs	r3, #1
 8011930:	e055      	b.n	80119de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4618      	mov	r0, r3
 8011938:	f7fe ff54 	bl	80107e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 801193c:	482b      	ldr	r0, [pc, #172]	; (80119ec <ADC_Enable+0x100>)
 801193e:	f7fe fdcf 	bl	80104e0 <LL_ADC_GetCommonPathInternalCh>
 8011942:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8011944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8011948:	2b00      	cmp	r3, #0
 801194a:	d013      	beq.n	8011974 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801194c:	4b28      	ldr	r3, [pc, #160]	; (80119f0 <ADC_Enable+0x104>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	099b      	lsrs	r3, r3, #6
 8011952:	4a28      	ldr	r2, [pc, #160]	; (80119f4 <ADC_Enable+0x108>)
 8011954:	fba2 2303 	umull	r2, r3, r2, r3
 8011958:	099b      	lsrs	r3, r3, #6
 801195a:	1c5a      	adds	r2, r3, #1
 801195c:	4613      	mov	r3, r2
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	4413      	add	r3, r2
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8011966:	e002      	b.n	801196e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	3b01      	subs	r3, #1
 801196c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d1f9      	bne.n	8011968 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8011974:	f7fe fd82 	bl	801047c <HAL_GetTick>
 8011978:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801197a:	e028      	b.n	80119ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	4618      	mov	r0, r3
 8011982:	f7fe ff43 	bl	801080c <LL_ADC_IsEnabled>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d104      	bne.n	8011996 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	4618      	mov	r0, r3
 8011992:	f7fe ff27 	bl	80107e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8011996:	f7fe fd71 	bl	801047c <HAL_GetTick>
 801199a:	4602      	mov	r2, r0
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	2b02      	cmp	r3, #2
 80119a2:	d914      	bls.n	80119ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f003 0301 	and.w	r3, r3, #1
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d00d      	beq.n	80119ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119b6:	f043 0210 	orr.w	r2, r3, #16
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119c2:	f043 0201 	orr.w	r2, r3, #1
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80119ca:	2301      	movs	r3, #1
 80119cc:	e007      	b.n	80119de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f003 0301 	and.w	r3, r3, #1
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d1cf      	bne.n	801197c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80119dc:	2300      	movs	r3, #0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	8000003f 	.word	0x8000003f
 80119ec:	42028300 	.word	0x42028300
 80119f0:	20000090 	.word	0x20000090
 80119f4:	053e2d63 	.word	0x053e2d63

080119f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a04:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d14b      	bne.n	8011aaa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f003 0308 	and.w	r3, r3, #8
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d021      	beq.n	8011a70 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fe fdcb 	bl	80105cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d032      	beq.n	8011aa2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d12b      	bne.n	8011aa2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d11f      	bne.n	8011aa2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a66:	f043 0201 	orr.w	r2, r3, #1
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8011a6e:	e018      	b.n	8011aa2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	f003 0302 	and.w	r3, r3, #2
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d111      	bne.n	8011aa2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d105      	bne.n	8011aa2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a9a:	f043 0201 	orr.w	r2, r3, #1
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011aa2:	68f8      	ldr	r0, [r7, #12]
 8011aa4:	f7ef fb9c 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8011aa8:	e00e      	b.n	8011ac8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011aae:	f003 0310 	and.w	r3, r3, #16
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d003      	beq.n	8011abe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8011ab6:	68f8      	ldr	r0, [r7, #12]
 8011ab8:	f7ff fb24 	bl	8011104 <HAL_ADC_ErrorCallback>
}
 8011abc:	e004      	b.n	8011ac8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	4798      	blx	r3
}
 8011ac8:	bf00      	nop
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011adc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	f7ff fafc 	bl	80110dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011ae4:	bf00      	nop
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011af8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b0a:	f043 0204 	orr.w	r2, r3, #4
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8011b12:	68f8      	ldr	r0, [r7, #12]
 8011b14:	f7ff faf6 	bl	8011104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011b18:	bf00      	nop
 8011b1a:	3710      	adds	r7, #16
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <LL_ADC_IsEnabled>:
{
 8011b20:	b480      	push	{r7}
 8011b22:	b083      	sub	sp, #12
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	689b      	ldr	r3, [r3, #8]
 8011b2c:	f003 0301 	and.w	r3, r3, #1
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d101      	bne.n	8011b38 <LL_ADC_IsEnabled+0x18>
 8011b34:	2301      	movs	r3, #1
 8011b36:	e000      	b.n	8011b3a <LL_ADC_IsEnabled+0x1a>
 8011b38:	2300      	movs	r3, #0
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	370c      	adds	r7, #12
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b44:	4770      	bx	lr

08011b46 <LL_ADC_REG_IsConversionOngoing>:
{
 8011b46:	b480      	push	{r7}
 8011b48:	b083      	sub	sp, #12
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	689b      	ldr	r3, [r3, #8]
 8011b52:	f003 0304 	and.w	r3, r3, #4
 8011b56:	2b04      	cmp	r3, #4
 8011b58:	d101      	bne.n	8011b5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e000      	b.n	8011b60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8011b5e:	2300      	movs	r3, #0
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr

08011b6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8011b74:	bf00      	nop
 8011b76:	370c      	adds	r7, #12
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr

08011b80 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b083      	sub	sp, #12
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8011b88:	bf00      	nop
 8011b8a:	370c      	adds	r7, #12
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8011b9c:	bf00      	nop
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8011bb0:	bf00      	nop
 8011bb2:	370c      	adds	r7, #12
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8011bd0:	b590      	push	{r4, r7, lr}
 8011bd2:	b0a1      	sub	sp, #132	; 0x84
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d101      	bne.n	8011bee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8011bea:	2302      	movs	r3, #2
 8011bec:	e089      	b.n	8011d02 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4a42      	ldr	r2, [pc, #264]	; (8011d0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8011c04:	4293      	cmp	r3, r2
 8011c06:	d102      	bne.n	8011c0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8011c08:	4b41      	ldr	r3, [pc, #260]	; (8011d10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8011c0a:	60fb      	str	r3, [r7, #12]
 8011c0c:	e001      	b.n	8011c12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d10b      	bne.n	8011c30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c1c:	f043 0220 	orr.w	r2, r3, #32
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2200      	movs	r2, #0
 8011c28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	e068      	b.n	8011d02 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7ff ff87 	bl	8011b46 <LL_ADC_REG_IsConversionOngoing>
 8011c38:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7ff ff81 	bl	8011b46 <LL_ADC_REG_IsConversionOngoing>
 8011c44:	4603      	mov	r3, r0
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d14a      	bne.n	8011ce0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8011c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d147      	bne.n	8011ce0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8011c50:	4b30      	ldr	r3, [pc, #192]	; (8011d14 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8011c52:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d027      	beq.n	8011cac <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8011c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c5e:	689b      	ldr	r3, [r3, #8]
 8011c60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	6859      	ldr	r1, [r3, #4]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c6e:	035b      	lsls	r3, r3, #13
 8011c70:	430b      	orrs	r3, r1
 8011c72:	431a      	orrs	r2, r3
 8011c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8011c78:	4824      	ldr	r0, [pc, #144]	; (8011d0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8011c7a:	f7ff ff51 	bl	8011b20 <LL_ADC_IsEnabled>
 8011c7e:	4604      	mov	r4, r0
 8011c80:	4823      	ldr	r0, [pc, #140]	; (8011d10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8011c82:	f7ff ff4d 	bl	8011b20 <LL_ADC_IsEnabled>
 8011c86:	4603      	mov	r3, r0
 8011c88:	4323      	orrs	r3, r4
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d132      	bne.n	8011cf4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8011c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c90:	689b      	ldr	r3, [r3, #8]
 8011c92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8011c96:	f023 030f 	bic.w	r3, r3, #15
 8011c9a:	683a      	ldr	r2, [r7, #0]
 8011c9c:	6811      	ldr	r1, [r2, #0]
 8011c9e:	683a      	ldr	r2, [r7, #0]
 8011ca0:	6892      	ldr	r2, [r2, #8]
 8011ca2:	430a      	orrs	r2, r1
 8011ca4:	431a      	orrs	r2, r3
 8011ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ca8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8011caa:	e023      	b.n	8011cf4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8011cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cae:	689b      	ldr	r3, [r3, #8]
 8011cb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8011cb8:	4814      	ldr	r0, [pc, #80]	; (8011d0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8011cba:	f7ff ff31 	bl	8011b20 <LL_ADC_IsEnabled>
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	4813      	ldr	r0, [pc, #76]	; (8011d10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8011cc2:	f7ff ff2d 	bl	8011b20 <LL_ADC_IsEnabled>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	4323      	orrs	r3, r4
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d112      	bne.n	8011cf4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8011cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8011cd6:	f023 030f 	bic.w	r3, r3, #15
 8011cda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011cdc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8011cde:	e009      	b.n	8011cf4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ce4:	f043 0220 	orr.w	r2, r3, #32
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8011cec:	2301      	movs	r3, #1
 8011cee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8011cf2:	e000      	b.n	8011cf6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8011cf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8011cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3784      	adds	r7, #132	; 0x84
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd90      	pop	{r4, r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	42028000 	.word	0x42028000
 8011d10:	42028100 	.word	0x42028100
 8011d14:	42028300 	.word	0x42028300

08011d18 <__NVIC_SetPriorityGrouping>:
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b085      	sub	sp, #20
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f003 0307 	and.w	r3, r3, #7
 8011d26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011d28:	4b0c      	ldr	r3, [pc, #48]	; (8011d5c <__NVIC_SetPriorityGrouping+0x44>)
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011d34:	4013      	ands	r3, r2
 8011d36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011d4a:	4a04      	ldr	r2, [pc, #16]	; (8011d5c <__NVIC_SetPriorityGrouping+0x44>)
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	60d3      	str	r3, [r2, #12]
}
 8011d50:	bf00      	nop
 8011d52:	3714      	adds	r7, #20
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	e000ed00 	.word	0xe000ed00

08011d60 <__NVIC_GetPriorityGrouping>:
{
 8011d60:	b480      	push	{r7}
 8011d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011d64:	4b04      	ldr	r3, [pc, #16]	; (8011d78 <__NVIC_GetPriorityGrouping+0x18>)
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	0a1b      	lsrs	r3, r3, #8
 8011d6a:	f003 0307 	and.w	r3, r3, #7
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	46bd      	mov	sp, r7
 8011d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d76:	4770      	bx	lr
 8011d78:	e000ed00 	.word	0xe000ed00

08011d7c <__NVIC_EnableIRQ>:
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b083      	sub	sp, #12
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	4603      	mov	r3, r0
 8011d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	db0b      	blt.n	8011da6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d8e:	79fb      	ldrb	r3, [r7, #7]
 8011d90:	f003 021f 	and.w	r2, r3, #31
 8011d94:	4907      	ldr	r1, [pc, #28]	; (8011db4 <__NVIC_EnableIRQ+0x38>)
 8011d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d9a:	095b      	lsrs	r3, r3, #5
 8011d9c:	2001      	movs	r0, #1
 8011d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8011da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011da6:	bf00      	nop
 8011da8:	370c      	adds	r7, #12
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop
 8011db4:	e000e100 	.word	0xe000e100

08011db8 <__NVIC_SetPriority>:
{
 8011db8:	b480      	push	{r7}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	6039      	str	r1, [r7, #0]
 8011dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	db0a      	blt.n	8011de2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	490c      	ldr	r1, [pc, #48]	; (8011e04 <__NVIC_SetPriority+0x4c>)
 8011dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011dd6:	0152      	lsls	r2, r2, #5
 8011dd8:	b2d2      	uxtb	r2, r2
 8011dda:	440b      	add	r3, r1
 8011ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011de0:	e00a      	b.n	8011df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	4908      	ldr	r1, [pc, #32]	; (8011e08 <__NVIC_SetPriority+0x50>)
 8011de8:	79fb      	ldrb	r3, [r7, #7]
 8011dea:	f003 030f 	and.w	r3, r3, #15
 8011dee:	3b04      	subs	r3, #4
 8011df0:	0152      	lsls	r2, r2, #5
 8011df2:	b2d2      	uxtb	r2, r2
 8011df4:	440b      	add	r3, r1
 8011df6:	761a      	strb	r2, [r3, #24]
}
 8011df8:	bf00      	nop
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr
 8011e04:	e000e100 	.word	0xe000e100
 8011e08:	e000ed00 	.word	0xe000ed00

08011e0c <NVIC_EncodePriority>:
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b089      	sub	sp, #36	; 0x24
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	60f8      	str	r0, [r7, #12]
 8011e14:	60b9      	str	r1, [r7, #8]
 8011e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	f003 0307 	and.w	r3, r3, #7
 8011e1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	f1c3 0307 	rsb	r3, r3, #7
 8011e26:	2b03      	cmp	r3, #3
 8011e28:	bf28      	it	cs
 8011e2a:	2303      	movcs	r3, #3
 8011e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	3303      	adds	r3, #3
 8011e32:	2b06      	cmp	r3, #6
 8011e34:	d902      	bls.n	8011e3c <NVIC_EncodePriority+0x30>
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	3b04      	subs	r3, #4
 8011e3a:	e000      	b.n	8011e3e <NVIC_EncodePriority+0x32>
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011e40:	f04f 32ff 	mov.w	r2, #4294967295
 8011e44:	69bb      	ldr	r3, [r7, #24]
 8011e46:	fa02 f303 	lsl.w	r3, r2, r3
 8011e4a:	43da      	mvns	r2, r3
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	401a      	ands	r2, r3
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011e54:	f04f 31ff 	mov.w	r1, #4294967295
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8011e5e:	43d9      	mvns	r1, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011e64:	4313      	orrs	r3, r2
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3724      	adds	r7, #36	; 0x24
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr

08011e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011e72:	b580      	push	{r7, lr}
 8011e74:	b082      	sub	sp, #8
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7ff ff4c 	bl	8011d18 <__NVIC_SetPriorityGrouping>
}
 8011e80:	bf00      	nop
 8011e82:	3708      	adds	r7, #8
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	4603      	mov	r3, r0
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]
 8011e94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011e96:	f7ff ff63 	bl	8011d60 <__NVIC_GetPriorityGrouping>
 8011e9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	68b9      	ldr	r1, [r7, #8]
 8011ea0:	6978      	ldr	r0, [r7, #20]
 8011ea2:	f7ff ffb3 	bl	8011e0c <NVIC_EncodePriority>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eac:	4611      	mov	r1, r2
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7ff ff82 	bl	8011db8 <__NVIC_SetPriority>
}
 8011eb4:	bf00      	nop
 8011eb6:	3718      	adds	r7, #24
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7ff ff56 	bl	8011d7c <__NVIC_EnableIRQ>
}
 8011ed0:	bf00      	nop
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d101      	bne.n	8011eea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e08d      	b.n	8012006 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	461a      	mov	r2, r3
 8011ef0:	4b47      	ldr	r3, [pc, #284]	; (8012010 <HAL_DMA_Init+0x138>)
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d80f      	bhi.n	8011f16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	461a      	mov	r2, r3
 8011efc:	4b45      	ldr	r3, [pc, #276]	; (8012014 <HAL_DMA_Init+0x13c>)
 8011efe:	4413      	add	r3, r2
 8011f00:	4a45      	ldr	r2, [pc, #276]	; (8012018 <HAL_DMA_Init+0x140>)
 8011f02:	fba2 2303 	umull	r2, r3, r2, r3
 8011f06:	091b      	lsrs	r3, r3, #4
 8011f08:	009a      	lsls	r2, r3, #2
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4a42      	ldr	r2, [pc, #264]	; (801201c <HAL_DMA_Init+0x144>)
 8011f12:	649a      	str	r2, [r3, #72]	; 0x48
 8011f14:	e00e      	b.n	8011f34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	4b40      	ldr	r3, [pc, #256]	; (8012020 <HAL_DMA_Init+0x148>)
 8011f1e:	4413      	add	r3, r2
 8011f20:	4a3d      	ldr	r2, [pc, #244]	; (8012018 <HAL_DMA_Init+0x140>)
 8011f22:	fba2 2303 	umull	r2, r3, r2, r3
 8011f26:	091b      	lsrs	r3, r3, #4
 8011f28:	009a      	lsls	r2, r3, #2
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	4a3c      	ldr	r2, [pc, #240]	; (8012024 <HAL_DMA_Init+0x14c>)
 8011f32:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2202      	movs	r2, #2
 8011f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8011f4a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8011f4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8011f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	691b      	ldr	r3, [r3, #16]
 8011f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	699b      	ldr	r3, [r3, #24]
 8011f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6a1b      	ldr	r3, [r3, #32]
 8011f76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8011f78:	68fa      	ldr	r2, [r7, #12]
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	68fa      	ldr	r2, [r7, #12]
 8011f84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 faf2 	bl	8012570 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f94:	d102      	bne.n	8011f9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	685a      	ldr	r2, [r3, #4]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fa4:	b2d2      	uxtb	r2, r2
 8011fa6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011fb0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d010      	beq.n	8011fdc <HAL_DMA_Init+0x104>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	2b04      	cmp	r3, #4
 8011fc0:	d80c      	bhi.n	8011fdc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 fb12 	bl	80125ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fcc:	2200      	movs	r2, #0
 8011fce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011fd8:	605a      	str	r2, [r3, #4]
 8011fda:	e008      	b.n	8011fee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2200      	movs	r2, #0
 8012000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8012004:	2300      	movs	r3, #0
}
 8012006:	4618      	mov	r0, r3
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	40020407 	.word	0x40020407
 8012014:	bffdfff8 	.word	0xbffdfff8
 8012018:	cccccccd 	.word	0xcccccccd
 801201c:	40020000 	.word	0x40020000
 8012020:	bffdfbf8 	.word	0xbffdfbf8
 8012024:	40020400 	.word	0x40020400

08012028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b086      	sub	sp, #24
 801202c:	af00      	add	r7, sp, #0
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	607a      	str	r2, [r7, #4]
 8012034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012036:	2300      	movs	r3, #0
 8012038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012040:	2b01      	cmp	r3, #1
 8012042:	d101      	bne.n	8012048 <HAL_DMA_Start_IT+0x20>
 8012044:	2302      	movs	r3, #2
 8012046:	e066      	b.n	8012116 <HAL_DMA_Start_IT+0xee>
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2201      	movs	r2, #1
 801204c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012056:	b2db      	uxtb	r3, r3
 8012058:	2b01      	cmp	r3, #1
 801205a:	d155      	bne.n	8012108 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2202      	movs	r2, #2
 8012060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2200      	movs	r2, #0
 8012068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	681a      	ldr	r2, [r3, #0]
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	f022 0201 	bic.w	r2, r2, #1
 8012078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	68b9      	ldr	r1, [r7, #8]
 8012080:	68f8      	ldr	r0, [r7, #12]
 8012082:	f000 fa37 	bl	80124f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801208a:	2b00      	cmp	r3, #0
 801208c:	d008      	beq.n	80120a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f042 020e 	orr.w	r2, r2, #14
 801209c:	601a      	str	r2, [r3, #0]
 801209e:	e00f      	b.n	80120c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f022 0204 	bic.w	r2, r2, #4
 80120ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	f042 020a 	orr.w	r2, r2, #10
 80120be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d007      	beq.n	80120de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120d2:	681a      	ldr	r2, [r3, #0]
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120dc:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d007      	beq.n	80120f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f042 0201 	orr.w	r2, r2, #1
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	e005      	b.n	8012114 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	2200      	movs	r2, #0
 801210c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8012110:	2302      	movs	r3, #2
 8012112:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8012114:	7dfb      	ldrb	r3, [r7, #23]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3718      	adds	r7, #24
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801211e:	b480      	push	{r7}
 8012120:	b085      	sub	sp, #20
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012126:	2300      	movs	r3, #0
 8012128:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012130:	b2db      	uxtb	r3, r3
 8012132:	2b02      	cmp	r3, #2
 8012134:	d008      	beq.n	8012148 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2204      	movs	r2, #4
 801213a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2200      	movs	r2, #0
 8012140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8012144:	2301      	movs	r3, #1
 8012146:	e040      	b.n	80121ca <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f022 020e 	bic.w	r2, r2, #14
 8012156:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012166:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f022 0201 	bic.w	r2, r2, #1
 8012176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801217c:	f003 021c 	and.w	r2, r3, #28
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012184:	2101      	movs	r1, #1
 8012186:	fa01 f202 	lsl.w	r2, r1, r2
 801218a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8012194:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00c      	beq.n	80121b8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121a2:	681a      	ldr	r2, [r3, #0]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80121ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80121b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2201      	movs	r2, #1
 80121bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2200      	movs	r2, #0
 80121c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80121c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3714      	adds	r7, #20
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80121d6:	b580      	push	{r7, lr}
 80121d8:	b084      	sub	sp, #16
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80121de:	2300      	movs	r3, #0
 80121e0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	2b02      	cmp	r3, #2
 80121ec:	d005      	beq.n	80121fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2204      	movs	r2, #4
 80121f2:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80121f4:	2301      	movs	r3, #1
 80121f6:	73fb      	strb	r3, [r7, #15]
 80121f8:	e047      	b.n	801228a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f022 020e 	bic.w	r2, r2, #14
 8012208:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f022 0201 	bic.w	r2, r2, #1
 8012218:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801222e:	f003 021c 	and.w	r2, r3, #28
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012236:	2101      	movs	r1, #1
 8012238:	fa01 f202 	lsl.w	r2, r1, r2
 801223c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012242:	687a      	ldr	r2, [r7, #4]
 8012244:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8012246:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801224c:	2b00      	cmp	r3, #0
 801224e:	d00c      	beq.n	801226a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801225a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801225e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012268:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2201      	movs	r2, #1
 801226e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2200      	movs	r2, #0
 8012276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801227e:	2b00      	cmp	r3, #0
 8012280:	d003      	beq.n	801228a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	4798      	blx	r3
    }
  }
  return status;
 801228a:	7bfb      	ldrb	r3, [r7, #15]
}
 801228c:	4618      	mov	r0, r3
 801228e:	3710      	adds	r7, #16
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122b0:	f003 031c 	and.w	r3, r3, #28
 80122b4:	2204      	movs	r2, #4
 80122b6:	409a      	lsls	r2, r3
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	4013      	ands	r3, r2
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d053      	beq.n	8012368 <HAL_DMA_IRQHandler+0xd4>
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	f003 0304 	and.w	r3, r3, #4
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d04e      	beq.n	8012368 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d024      	beq.n	8012322 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122dc:	f003 021c 	and.w	r2, r3, #28
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122e4:	2104      	movs	r1, #4
 80122e6:	fa01 f202 	lsl.w	r2, r1, r2
 80122ea:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d109      	bne.n	801230e <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f000 80c0 	beq.w	8012484 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801230c:	e0ba      	b.n	8012484 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012312:	2b00      	cmp	r3, #0
 8012314:	f000 80b6 	beq.w	8012484 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8012320:	e0b0      	b.n	8012484 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f003 0320 	and.w	r3, r3, #32
 801232c:	2b00      	cmp	r3, #0
 801232e:	d107      	bne.n	8012340 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	681a      	ldr	r2, [r3, #0]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f022 0204 	bic.w	r2, r2, #4
 801233e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012344:	f003 021c 	and.w	r2, r3, #28
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801234c:	2104      	movs	r1, #4
 801234e:	fa01 f202 	lsl.w	r2, r1, r2
 8012352:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012358:	2b00      	cmp	r3, #0
 801235a:	f000 8093 	beq.w	8012484 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8012366:	e08d      	b.n	8012484 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801236c:	f003 031c 	and.w	r3, r3, #28
 8012370:	2202      	movs	r2, #2
 8012372:	409a      	lsls	r2, r3
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	4013      	ands	r3, r2
 8012378:	2b00      	cmp	r3, #0
 801237a:	d04e      	beq.n	801241a <HAL_DMA_IRQHandler+0x186>
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	f003 0302 	and.w	r3, r3, #2
 8012382:	2b00      	cmp	r3, #0
 8012384:	d049      	beq.n	801241a <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012390:	2b00      	cmp	r3, #0
 8012392:	d018      	beq.n	80123c6 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d108      	bne.n	80123b4 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d06e      	beq.n	8012488 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80123b2:	e069      	b.n	8012488 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d065      	beq.n	8012488 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80123c4:	e060      	b.n	8012488 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f003 0320 	and.w	r3, r3, #32
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d10b      	bne.n	80123ec <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	f022 020a 	bic.w	r2, r2, #10
 80123e2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2201      	movs	r2, #1
 80123e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123f0:	f003 021c 	and.w	r2, r3, #28
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80123f8:	2102      	movs	r1, #2
 80123fa:	fa01 f202 	lsl.w	r2, r1, r2
 80123fe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801240c:	2b00      	cmp	r3, #0
 801240e:	d03b      	beq.n	8012488 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8012418:	e036      	b.n	8012488 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801241e:	f003 031c 	and.w	r3, r3, #28
 8012422:	2208      	movs	r2, #8
 8012424:	409a      	lsls	r2, r3
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	4013      	ands	r3, r2
 801242a:	2b00      	cmp	r3, #0
 801242c:	d02e      	beq.n	801248c <HAL_DMA_IRQHandler+0x1f8>
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	f003 0308 	and.w	r3, r3, #8
 8012434:	2b00      	cmp	r3, #0
 8012436:	d029      	beq.n	801248c <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	f022 020e 	bic.w	r2, r2, #14
 8012446:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801244c:	f003 021c 	and.w	r2, r3, #28
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012454:	2101      	movs	r1, #1
 8012456:	fa01 f202 	lsl.w	r2, r1, r2
 801245a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2201      	movs	r2, #1
 8012460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2201      	movs	r2, #1
 8012466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2200      	movs	r2, #0
 801246e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012476:	2b00      	cmp	r3, #0
 8012478:	d008      	beq.n	801248c <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012482:	e002      	b.n	801248a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8012484:	bf00      	nop
 8012486:	e000      	b.n	801248a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8012488:	bf00      	nop
  return;
 801248a:	bf00      	nop
 801248c:	bf00      	nop
}
 801248e:	3710      	adds	r7, #16
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8012494:	b480      	push	{r7}
 8012496:	b085      	sub	sp, #20
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801249e:	2300      	movs	r3, #0
 80124a0:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d103      	bne.n	80124b0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80124a8:	2301      	movs	r3, #1
 80124aa:	72fb      	strb	r3, [r7, #11]
    return status;
 80124ac:	7afb      	ldrb	r3, [r7, #11]
 80124ae:	e01b      	b.n	80124e8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	f003 0310 	and.w	r3, r3, #16
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d00d      	beq.n	80124de <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d004      	beq.n	80124d6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80124d2:	60fb      	str	r3, [r7, #12]
 80124d4:	e003      	b.n	80124de <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80124dc:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	601a      	str	r2, [r3, #0]

  return status;
 80124e6:	7afb      	ldrb	r3, [r7, #11]
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	3714      	adds	r7, #20
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80124f4:	b480      	push	{r7}
 80124f6:	b085      	sub	sp, #20
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
 8012500:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012506:	68fa      	ldr	r2, [r7, #12]
 8012508:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801250a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012510:	2b00      	cmp	r3, #0
 8012512:	d004      	beq.n	801251e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801251c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012522:	f003 021c 	and.w	r2, r3, #28
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801252a:	2101      	movs	r1, #1
 801252c:	fa01 f202 	lsl.w	r2, r1, r2
 8012530:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	683a      	ldr	r2, [r7, #0]
 8012538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	2b10      	cmp	r3, #16
 8012540:	d108      	bne.n	8012554 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	68ba      	ldr	r2, [r7, #8]
 8012550:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8012552:	e007      	b.n	8012564 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	60da      	str	r2, [r3, #12]
}
 8012564:	bf00      	nop
 8012566:	3714      	adds	r7, #20
 8012568:	46bd      	mov	sp, r7
 801256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256e:	4770      	bx	lr

08012570 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012570:	b480      	push	{r7}
 8012572:	b085      	sub	sp, #20
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	461a      	mov	r2, r3
 801257e:	4b17      	ldr	r3, [pc, #92]	; (80125dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8012580:	429a      	cmp	r2, r3
 8012582:	d80a      	bhi.n	801259a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012588:	089b      	lsrs	r3, r3, #2
 801258a:	009b      	lsls	r3, r3, #2
 801258c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012590:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	6513      	str	r3, [r2, #80]	; 0x50
 8012598:	e007      	b.n	80125aa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801259e:	089b      	lsrs	r3, r3, #2
 80125a0:	009a      	lsls	r2, r3, #2
 80125a2:	4b0f      	ldr	r3, [pc, #60]	; (80125e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80125a4:	4413      	add	r3, r2
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	3b08      	subs	r3, #8
 80125b2:	4a0c      	ldr	r2, [pc, #48]	; (80125e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80125b4:	fba2 2303 	umull	r2, r3, r2, r3
 80125b8:	091b      	lsrs	r3, r3, #4
 80125ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4a0a      	ldr	r2, [pc, #40]	; (80125e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80125c0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	f003 031f 	and.w	r3, r3, #31
 80125c8:	2201      	movs	r2, #1
 80125ca:	409a      	lsls	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	659a      	str	r2, [r3, #88]	; 0x58
}
 80125d0:	bf00      	nop
 80125d2:	3714      	adds	r7, #20
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr
 80125dc:	40020407 	.word	0x40020407
 80125e0:	40020820 	.word	0x40020820
 80125e4:	cccccccd 	.word	0xcccccccd
 80125e8:	40020880 	.word	0x40020880

080125ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b085      	sub	sp, #20
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80125fc:	68fa      	ldr	r2, [r7, #12]
 80125fe:	4b0b      	ldr	r3, [pc, #44]	; (801262c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8012600:	4413      	add	r3, r2
 8012602:	009b      	lsls	r3, r3, #2
 8012604:	461a      	mov	r2, r3
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4a08      	ldr	r2, [pc, #32]	; (8012630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801260e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	3b01      	subs	r3, #1
 8012614:	f003 0303 	and.w	r3, r3, #3
 8012618:	2201      	movs	r2, #1
 801261a:	409a      	lsls	r2, r3
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8012620:	bf00      	nop
 8012622:	3714      	adds	r7, #20
 8012624:	46bd      	mov	sp, r7
 8012626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262a:	4770      	bx	lr
 801262c:	1000823f 	.word	0x1000823f
 8012630:	40020940 	.word	0x40020940

08012634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012634:	b480      	push	{r7}
 8012636:	b087      	sub	sp, #28
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 801263e:	2300      	movs	r3, #0
 8012640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8012642:	e158      	b.n	80128f6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	2101      	movs	r1, #1
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	fa01 f303 	lsl.w	r3, r1, r3
 8012650:	4013      	ands	r3, r2
 8012652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2b00      	cmp	r3, #0
 8012658:	f000 814a 	beq.w	80128f0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	f003 0303 	and.w	r3, r3, #3
 8012664:	2b01      	cmp	r3, #1
 8012666:	d005      	beq.n	8012674 <HAL_GPIO_Init+0x40>
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	f003 0303 	and.w	r3, r3, #3
 8012670:	2b02      	cmp	r3, #2
 8012672:	d130      	bne.n	80126d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	689b      	ldr	r3, [r3, #8]
 8012678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	2203      	movs	r2, #3
 8012680:	fa02 f303 	lsl.w	r3, r2, r3
 8012684:	43db      	mvns	r3, r3
 8012686:	693a      	ldr	r2, [r7, #16]
 8012688:	4013      	ands	r3, r2
 801268a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	68da      	ldr	r2, [r3, #12]
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	005b      	lsls	r3, r3, #1
 8012694:	fa02 f303 	lsl.w	r3, r2, r3
 8012698:	693a      	ldr	r2, [r7, #16]
 801269a:	4313      	orrs	r3, r2
 801269c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	693a      	ldr	r2, [r7, #16]
 80126a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80126aa:	2201      	movs	r2, #1
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	fa02 f303 	lsl.w	r3, r2, r3
 80126b2:	43db      	mvns	r3, r3
 80126b4:	693a      	ldr	r2, [r7, #16]
 80126b6:	4013      	ands	r3, r2
 80126b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	091b      	lsrs	r3, r3, #4
 80126c0:	f003 0201 	and.w	r2, r3, #1
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	fa02 f303 	lsl.w	r3, r2, r3
 80126ca:	693a      	ldr	r2, [r7, #16]
 80126cc:	4313      	orrs	r3, r2
 80126ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	693a      	ldr	r2, [r7, #16]
 80126d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	f003 0303 	and.w	r3, r3, #3
 80126de:	2b03      	cmp	r3, #3
 80126e0:	d017      	beq.n	8012712 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	005b      	lsls	r3, r3, #1
 80126ec:	2203      	movs	r2, #3
 80126ee:	fa02 f303 	lsl.w	r3, r2, r3
 80126f2:	43db      	mvns	r3, r3
 80126f4:	693a      	ldr	r2, [r7, #16]
 80126f6:	4013      	ands	r3, r2
 80126f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	689a      	ldr	r2, [r3, #8]
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	005b      	lsls	r3, r3, #1
 8012702:	fa02 f303 	lsl.w	r3, r2, r3
 8012706:	693a      	ldr	r2, [r7, #16]
 8012708:	4313      	orrs	r3, r2
 801270a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	693a      	ldr	r2, [r7, #16]
 8012710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	f003 0303 	and.w	r3, r3, #3
 801271a:	2b02      	cmp	r3, #2
 801271c:	d123      	bne.n	8012766 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	08da      	lsrs	r2, r3, #3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	3208      	adds	r2, #8
 8012726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801272a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	f003 0307 	and.w	r3, r3, #7
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	220f      	movs	r2, #15
 8012736:	fa02 f303 	lsl.w	r3, r2, r3
 801273a:	43db      	mvns	r3, r3
 801273c:	693a      	ldr	r2, [r7, #16]
 801273e:	4013      	ands	r3, r2
 8012740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	691a      	ldr	r2, [r3, #16]
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	f003 0307 	and.w	r3, r3, #7
 801274c:	009b      	lsls	r3, r3, #2
 801274e:	fa02 f303 	lsl.w	r3, r2, r3
 8012752:	693a      	ldr	r2, [r7, #16]
 8012754:	4313      	orrs	r3, r2
 8012756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	08da      	lsrs	r2, r3, #3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	3208      	adds	r2, #8
 8012760:	6939      	ldr	r1, [r7, #16]
 8012762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	005b      	lsls	r3, r3, #1
 8012770:	2203      	movs	r2, #3
 8012772:	fa02 f303 	lsl.w	r3, r2, r3
 8012776:	43db      	mvns	r3, r3
 8012778:	693a      	ldr	r2, [r7, #16]
 801277a:	4013      	ands	r3, r2
 801277c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	f003 0203 	and.w	r2, r3, #3
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	005b      	lsls	r3, r3, #1
 801278a:	fa02 f303 	lsl.w	r3, r2, r3
 801278e:	693a      	ldr	r2, [r7, #16]
 8012790:	4313      	orrs	r3, r2
 8012792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	693a      	ldr	r2, [r7, #16]
 8012798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f000 80a4 	beq.w	80128f0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80127a8:	4a5a      	ldr	r2, [pc, #360]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	089b      	lsrs	r3, r3, #2
 80127ae:	3318      	adds	r3, #24
 80127b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127b4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	f003 0303 	and.w	r3, r3, #3
 80127bc:	00db      	lsls	r3, r3, #3
 80127be:	220f      	movs	r2, #15
 80127c0:	fa02 f303 	lsl.w	r3, r2, r3
 80127c4:	43db      	mvns	r3, r3
 80127c6:	693a      	ldr	r2, [r7, #16]
 80127c8:	4013      	ands	r3, r2
 80127ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4a52      	ldr	r2, [pc, #328]	; (8012918 <HAL_GPIO_Init+0x2e4>)
 80127d0:	4293      	cmp	r3, r2
 80127d2:	d025      	beq.n	8012820 <HAL_GPIO_Init+0x1ec>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	4a51      	ldr	r2, [pc, #324]	; (801291c <HAL_GPIO_Init+0x2e8>)
 80127d8:	4293      	cmp	r3, r2
 80127da:	d01f      	beq.n	801281c <HAL_GPIO_Init+0x1e8>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	4a50      	ldr	r2, [pc, #320]	; (8012920 <HAL_GPIO_Init+0x2ec>)
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d019      	beq.n	8012818 <HAL_GPIO_Init+0x1e4>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	4a4f      	ldr	r2, [pc, #316]	; (8012924 <HAL_GPIO_Init+0x2f0>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d013      	beq.n	8012814 <HAL_GPIO_Init+0x1e0>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	4a4e      	ldr	r2, [pc, #312]	; (8012928 <HAL_GPIO_Init+0x2f4>)
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d00d      	beq.n	8012810 <HAL_GPIO_Init+0x1dc>
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	4a4d      	ldr	r2, [pc, #308]	; (801292c <HAL_GPIO_Init+0x2f8>)
 80127f8:	4293      	cmp	r3, r2
 80127fa:	d007      	beq.n	801280c <HAL_GPIO_Init+0x1d8>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	4a4c      	ldr	r2, [pc, #304]	; (8012930 <HAL_GPIO_Init+0x2fc>)
 8012800:	4293      	cmp	r3, r2
 8012802:	d101      	bne.n	8012808 <HAL_GPIO_Init+0x1d4>
 8012804:	2306      	movs	r3, #6
 8012806:	e00c      	b.n	8012822 <HAL_GPIO_Init+0x1ee>
 8012808:	2307      	movs	r3, #7
 801280a:	e00a      	b.n	8012822 <HAL_GPIO_Init+0x1ee>
 801280c:	2305      	movs	r3, #5
 801280e:	e008      	b.n	8012822 <HAL_GPIO_Init+0x1ee>
 8012810:	2304      	movs	r3, #4
 8012812:	e006      	b.n	8012822 <HAL_GPIO_Init+0x1ee>
 8012814:	2303      	movs	r3, #3
 8012816:	e004      	b.n	8012822 <HAL_GPIO_Init+0x1ee>
 8012818:	2302      	movs	r3, #2
 801281a:	e002      	b.n	8012822 <HAL_GPIO_Init+0x1ee>
 801281c:	2301      	movs	r3, #1
 801281e:	e000      	b.n	8012822 <HAL_GPIO_Init+0x1ee>
 8012820:	2300      	movs	r3, #0
 8012822:	697a      	ldr	r2, [r7, #20]
 8012824:	f002 0203 	and.w	r2, r2, #3
 8012828:	00d2      	lsls	r2, r2, #3
 801282a:	4093      	lsls	r3, r2
 801282c:	693a      	ldr	r2, [r7, #16]
 801282e:	4313      	orrs	r3, r2
 8012830:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8012832:	4938      	ldr	r1, [pc, #224]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	089b      	lsrs	r3, r3, #2
 8012838:	3318      	adds	r3, #24
 801283a:	693a      	ldr	r2, [r7, #16]
 801283c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8012840:	4b34      	ldr	r3, [pc, #208]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	43db      	mvns	r3, r3
 801284a:	693a      	ldr	r2, [r7, #16]
 801284c:	4013      	ands	r3, r2
 801284e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	685b      	ldr	r3, [r3, #4]
 8012854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012858:	2b00      	cmp	r3, #0
 801285a:	d003      	beq.n	8012864 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 801285c:	693a      	ldr	r2, [r7, #16]
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	4313      	orrs	r3, r2
 8012862:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8012864:	4a2b      	ldr	r2, [pc, #172]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801286a:	4b2a      	ldr	r3, [pc, #168]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	43db      	mvns	r3, r3
 8012874:	693a      	ldr	r2, [r7, #16]
 8012876:	4013      	ands	r3, r2
 8012878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012882:	2b00      	cmp	r3, #0
 8012884:	d003      	beq.n	801288e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8012886:	693a      	ldr	r2, [r7, #16]
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	4313      	orrs	r3, r2
 801288c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801288e:	4a21      	ldr	r2, [pc, #132]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8012894:	4b1f      	ldr	r3, [pc, #124]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 8012896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801289a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	43db      	mvns	r3, r3
 80128a0:	693a      	ldr	r2, [r7, #16]
 80128a2:	4013      	ands	r3, r2
 80128a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d003      	beq.n	80128ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80128b2:	693a      	ldr	r2, [r7, #16]
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	4313      	orrs	r3, r2
 80128b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80128ba:	4a16      	ldr	r2, [pc, #88]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80128c2:	4b14      	ldr	r3, [pc, #80]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 80128c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	43db      	mvns	r3, r3
 80128ce:	693a      	ldr	r2, [r7, #16]
 80128d0:	4013      	ands	r3, r2
 80128d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d003      	beq.n	80128e8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80128e0:	693a      	ldr	r2, [r7, #16]
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	4313      	orrs	r3, r2
 80128e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80128e8:	4a0a      	ldr	r2, [pc, #40]	; (8012914 <HAL_GPIO_Init+0x2e0>)
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	3301      	adds	r3, #1
 80128f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	fa22 f303 	lsr.w	r3, r2, r3
 8012900:	2b00      	cmp	r3, #0
 8012902:	f47f ae9f 	bne.w	8012644 <HAL_GPIO_Init+0x10>
  }
}
 8012906:	bf00      	nop
 8012908:	bf00      	nop
 801290a:	371c      	adds	r7, #28
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr
 8012914:	4002f400 	.word	0x4002f400
 8012918:	42020000 	.word	0x42020000
 801291c:	42020400 	.word	0x42020400
 8012920:	42020800 	.word	0x42020800
 8012924:	42020c00 	.word	0x42020c00
 8012928:	42021000 	.word	0x42021000
 801292c:	42021400 	.word	0x42021400
 8012930:	42021800 	.word	0x42021800

08012934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012934:	b480      	push	{r7}
 8012936:	b083      	sub	sp, #12
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	460b      	mov	r3, r1
 801293e:	807b      	strh	r3, [r7, #2]
 8012940:	4613      	mov	r3, r2
 8012942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012944:	787b      	ldrb	r3, [r7, #1]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d003      	beq.n	8012952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801294a:	887a      	ldrh	r2, [r7, #2]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8012950:	e002      	b.n	8012958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012952:	887a      	ldrh	r2, [r7, #2]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012958:	bf00      	nop
 801295a:	370c      	adds	r7, #12
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr

08012964 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8012964:	b480      	push	{r7}
 8012966:	b085      	sub	sp, #20
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	460b      	mov	r3, r1
 801296e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	695b      	ldr	r3, [r3, #20]
 8012974:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8012976:	887a      	ldrh	r2, [r7, #2]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	4013      	ands	r3, r2
 801297c:	041a      	lsls	r2, r3, #16
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	43d9      	mvns	r1, r3
 8012982:	887b      	ldrh	r3, [r7, #2]
 8012984:	400b      	ands	r3, r1
 8012986:	431a      	orrs	r2, r3
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	619a      	str	r2, [r3, #24]
}
 801298c:	bf00      	nop
 801298e:	3714      	adds	r7, #20
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d101      	bne.n	80129aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80129a6:	2301      	movs	r3, #1
 80129a8:	e081      	b.n	8012aae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d106      	bne.n	80129c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2200      	movs	r2, #0
 80129ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f7fc fe7a 	bl	800f6b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2224      	movs	r2, #36	; 0x24
 80129c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f022 0201 	bic.w	r2, r2, #1
 80129da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	685a      	ldr	r2, [r3, #4]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80129e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	689a      	ldr	r2, [r3, #8]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80129f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	68db      	ldr	r3, [r3, #12]
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d107      	bne.n	8012a12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	689a      	ldr	r2, [r3, #8]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012a0e:	609a      	str	r2, [r3, #8]
 8012a10:	e006      	b.n	8012a20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	689a      	ldr	r2, [r3, #8]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8012a1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	68db      	ldr	r3, [r3, #12]
 8012a24:	2b02      	cmp	r3, #2
 8012a26:	d104      	bne.n	8012a32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	6812      	ldr	r2, [r2, #0]
 8012a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	68da      	ldr	r2, [r3, #12]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	691a      	ldr	r2, [r3, #16]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	695b      	ldr	r3, [r3, #20]
 8012a5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	699b      	ldr	r3, [r3, #24]
 8012a66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	430a      	orrs	r2, r1
 8012a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	69d9      	ldr	r1, [r3, #28]
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6a1a      	ldr	r2, [r3, #32]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	430a      	orrs	r2, r1
 8012a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f042 0201 	orr.w	r2, r2, #1
 8012a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2200      	movs	r2, #0
 8012a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2220      	movs	r2, #32
 8012a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3708      	adds	r7, #8
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
	...

08012ab8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b088      	sub	sp, #32
 8012abc:	af02      	add	r7, sp, #8
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	607a      	str	r2, [r7, #4]
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	817b      	strh	r3, [r7, #10]
 8012ac8:	4613      	mov	r3, r2
 8012aca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	2b20      	cmp	r3, #32
 8012ad6:	f040 80da 	bne.w	8012c8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ae0:	2b01      	cmp	r3, #1
 8012ae2:	d101      	bne.n	8012ae8 <HAL_I2C_Master_Transmit+0x30>
 8012ae4:	2302      	movs	r3, #2
 8012ae6:	e0d3      	b.n	8012c90 <HAL_I2C_Master_Transmit+0x1d8>
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2201      	movs	r2, #1
 8012aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012af0:	f7fd fcc4 	bl	801047c <HAL_GetTick>
 8012af4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	9300      	str	r3, [sp, #0]
 8012afa:	2319      	movs	r3, #25
 8012afc:	2201      	movs	r2, #1
 8012afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012b02:	68f8      	ldr	r0, [r7, #12]
 8012b04:	f000 f9e6 	bl	8012ed4 <I2C_WaitOnFlagUntilTimeout>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d001      	beq.n	8012b12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8012b0e:	2301      	movs	r3, #1
 8012b10:	e0be      	b.n	8012c90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2221      	movs	r2, #33	; 0x21
 8012b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2210      	movs	r2, #16
 8012b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	2200      	movs	r2, #0
 8012b26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	893a      	ldrh	r2, [r7, #8]
 8012b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	2200      	movs	r2, #0
 8012b38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	2bff      	cmp	r3, #255	; 0xff
 8012b42:	d90e      	bls.n	8012b62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	22ff      	movs	r2, #255	; 0xff
 8012b48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b4e:	b2da      	uxtb	r2, r3
 8012b50:	8979      	ldrh	r1, [r7, #10]
 8012b52:	4b51      	ldr	r3, [pc, #324]	; (8012c98 <HAL_I2C_Master_Transmit+0x1e0>)
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f000 fbf6 	bl	801334c <I2C_TransferConfig>
 8012b60:	e06c      	b.n	8012c3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b70:	b2da      	uxtb	r2, r3
 8012b72:	8979      	ldrh	r1, [r7, #10]
 8012b74:	4b48      	ldr	r3, [pc, #288]	; (8012c98 <HAL_I2C_Master_Transmit+0x1e0>)
 8012b76:	9300      	str	r3, [sp, #0]
 8012b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f000 fbe5 	bl	801334c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8012b82:	e05b      	b.n	8012c3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012b84:	697a      	ldr	r2, [r7, #20]
 8012b86:	6a39      	ldr	r1, [r7, #32]
 8012b88:	68f8      	ldr	r0, [r7, #12]
 8012b8a:	f000 f9f2 	bl	8012f72 <I2C_WaitOnTXISFlagUntilTimeout>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d001      	beq.n	8012b98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8012b94:	2301      	movs	r3, #1
 8012b96:	e07b      	b.n	8012c90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b9c:	781a      	ldrb	r2, [r3, #0]
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba8:	1c5a      	adds	r2, r3, #1
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	3b01      	subs	r3, #1
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d034      	beq.n	8012c3c <HAL_I2C_Master_Transmit+0x184>
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d130      	bne.n	8012c3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	9300      	str	r3, [sp, #0]
 8012bde:	6a3b      	ldr	r3, [r7, #32]
 8012be0:	2200      	movs	r2, #0
 8012be2:	2180      	movs	r1, #128	; 0x80
 8012be4:	68f8      	ldr	r0, [r7, #12]
 8012be6:	f000 f975 	bl	8012ed4 <I2C_WaitOnFlagUntilTimeout>
 8012bea:	4603      	mov	r3, r0
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d001      	beq.n	8012bf4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	e04d      	b.n	8012c90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	2bff      	cmp	r3, #255	; 0xff
 8012bfc:	d90e      	bls.n	8012c1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	22ff      	movs	r2, #255	; 0xff
 8012c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c08:	b2da      	uxtb	r2, r3
 8012c0a:	8979      	ldrh	r1, [r7, #10]
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	9300      	str	r3, [sp, #0]
 8012c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f000 fb99 	bl	801334c <I2C_TransferConfig>
 8012c1a:	e00f      	b.n	8012c3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c2a:	b2da      	uxtb	r2, r3
 8012c2c:	8979      	ldrh	r1, [r7, #10]
 8012c2e:	2300      	movs	r3, #0
 8012c30:	9300      	str	r3, [sp, #0]
 8012c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012c36:	68f8      	ldr	r0, [r7, #12]
 8012c38:	f000 fb88 	bl	801334c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d19e      	bne.n	8012b84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012c46:	697a      	ldr	r2, [r7, #20]
 8012c48:	6a39      	ldr	r1, [r7, #32]
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f000 f9d8 	bl	8013000 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d001      	beq.n	8012c5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8012c56:	2301      	movs	r3, #1
 8012c58:	e01a      	b.n	8012c90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2220      	movs	r2, #32
 8012c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	6859      	ldr	r1, [r3, #4]
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	4b0b      	ldr	r3, [pc, #44]	; (8012c9c <HAL_I2C_Master_Transmit+0x1e4>)
 8012c6e:	400b      	ands	r3, r1
 8012c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	2220      	movs	r2, #32
 8012c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	2200      	movs	r2, #0
 8012c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	e000      	b.n	8012c90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8012c8e:	2302      	movs	r3, #2
  }
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3718      	adds	r7, #24
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	80002000 	.word	0x80002000
 8012c9c:	fe00e800 	.word	0xfe00e800

08012ca0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b088      	sub	sp, #32
 8012ca4:	af02      	add	r7, sp, #8
 8012ca6:	60f8      	str	r0, [r7, #12]
 8012ca8:	607a      	str	r2, [r7, #4]
 8012caa:	461a      	mov	r2, r3
 8012cac:	460b      	mov	r3, r1
 8012cae:	817b      	strh	r3, [r7, #10]
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012cba:	b2db      	uxtb	r3, r3
 8012cbc:	2b20      	cmp	r3, #32
 8012cbe:	f040 80db 	bne.w	8012e78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d101      	bne.n	8012cd0 <HAL_I2C_Master_Receive+0x30>
 8012ccc:	2302      	movs	r3, #2
 8012cce:	e0d4      	b.n	8012e7a <HAL_I2C_Master_Receive+0x1da>
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012cd8:	f7fd fbd0 	bl	801047c <HAL_GetTick>
 8012cdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	9300      	str	r3, [sp, #0]
 8012ce2:	2319      	movs	r3, #25
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012cea:	68f8      	ldr	r0, [r7, #12]
 8012cec:	f000 f8f2 	bl	8012ed4 <I2C_WaitOnFlagUntilTimeout>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e0bf      	b.n	8012e7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	2222      	movs	r2, #34	; 0x22
 8012cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	2210      	movs	r2, #16
 8012d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	893a      	ldrh	r2, [r7, #8]
 8012d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	2bff      	cmp	r3, #255	; 0xff
 8012d2a:	d90e      	bls.n	8012d4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	22ff      	movs	r2, #255	; 0xff
 8012d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d36:	b2da      	uxtb	r2, r3
 8012d38:	8979      	ldrh	r1, [r7, #10]
 8012d3a:	4b52      	ldr	r3, [pc, #328]	; (8012e84 <HAL_I2C_Master_Receive+0x1e4>)
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f000 fb02 	bl	801334c <I2C_TransferConfig>
 8012d48:	e06d      	b.n	8012e26 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d58:	b2da      	uxtb	r2, r3
 8012d5a:	8979      	ldrh	r1, [r7, #10]
 8012d5c:	4b49      	ldr	r3, [pc, #292]	; (8012e84 <HAL_I2C_Master_Receive+0x1e4>)
 8012d5e:	9300      	str	r3, [sp, #0]
 8012d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012d64:	68f8      	ldr	r0, [r7, #12]
 8012d66:	f000 faf1 	bl	801334c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8012d6a:	e05c      	b.n	8012e26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012d6c:	697a      	ldr	r2, [r7, #20]
 8012d6e:	6a39      	ldr	r1, [r7, #32]
 8012d70:	68f8      	ldr	r0, [r7, #12]
 8012d72:	f000 f989 	bl	8013088 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012d76:	4603      	mov	r3, r0
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d001      	beq.n	8012d80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e07c      	b.n	8012e7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d8a:	b2d2      	uxtb	r2, r2
 8012d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d9c:	3b01      	subs	r3, #1
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	3b01      	subs	r3, #1
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d034      	beq.n	8012e26 <HAL_I2C_Master_Receive+0x186>
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d130      	bne.n	8012e26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	6a3b      	ldr	r3, [r7, #32]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	2180      	movs	r1, #128	; 0x80
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f000 f880 	bl	8012ed4 <I2C_WaitOnFlagUntilTimeout>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d001      	beq.n	8012dde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8012dda:	2301      	movs	r3, #1
 8012ddc:	e04d      	b.n	8012e7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	2bff      	cmp	r3, #255	; 0xff
 8012de6:	d90e      	bls.n	8012e06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	22ff      	movs	r2, #255	; 0xff
 8012dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012df2:	b2da      	uxtb	r2, r3
 8012df4:	8979      	ldrh	r1, [r7, #10]
 8012df6:	2300      	movs	r3, #0
 8012df8:	9300      	str	r3, [sp, #0]
 8012dfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012dfe:	68f8      	ldr	r0, [r7, #12]
 8012e00:	f000 faa4 	bl	801334c <I2C_TransferConfig>
 8012e04:	e00f      	b.n	8012e26 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e0a:	b29a      	uxth	r2, r3
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e14:	b2da      	uxtb	r2, r3
 8012e16:	8979      	ldrh	r1, [r7, #10]
 8012e18:	2300      	movs	r3, #0
 8012e1a:	9300      	str	r3, [sp, #0]
 8012e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f000 fa93 	bl	801334c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d19d      	bne.n	8012d6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012e30:	697a      	ldr	r2, [r7, #20]
 8012e32:	6a39      	ldr	r1, [r7, #32]
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f000 f8e3 	bl	8013000 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d001      	beq.n	8012e44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8012e40:	2301      	movs	r3, #1
 8012e42:	e01a      	b.n	8012e7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2220      	movs	r2, #32
 8012e4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	6859      	ldr	r1, [r3, #4]
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	681a      	ldr	r2, [r3, #0]
 8012e56:	4b0c      	ldr	r3, [pc, #48]	; (8012e88 <HAL_I2C_Master_Receive+0x1e8>)
 8012e58:	400b      	ands	r3, r1
 8012e5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2220      	movs	r2, #32
 8012e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2200      	movs	r2, #0
 8012e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012e74:	2300      	movs	r3, #0
 8012e76:	e000      	b.n	8012e7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8012e78:	2302      	movs	r3, #2
  }
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3718      	adds	r7, #24
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	80002400 	.word	0x80002400
 8012e88:	fe00e800 	.word	0xfe00e800

08012e8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b083      	sub	sp, #12
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	699b      	ldr	r3, [r3, #24]
 8012e9a:	f003 0302 	and.w	r3, r3, #2
 8012e9e:	2b02      	cmp	r3, #2
 8012ea0:	d103      	bne.n	8012eaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	699b      	ldr	r3, [r3, #24]
 8012eb0:	f003 0301 	and.w	r3, r3, #1
 8012eb4:	2b01      	cmp	r3, #1
 8012eb6:	d007      	beq.n	8012ec8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	699a      	ldr	r2, [r3, #24]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f042 0201 	orr.w	r2, r2, #1
 8012ec6:	619a      	str	r2, [r3, #24]
  }
}
 8012ec8:	bf00      	nop
 8012eca:	370c      	adds	r7, #12
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr

08012ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	603b      	str	r3, [r7, #0]
 8012ee0:	4613      	mov	r3, r2
 8012ee2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012ee4:	e031      	b.n	8012f4a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eec:	d02d      	beq.n	8012f4a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012eee:	f7fd fac5 	bl	801047c <HAL_GetTick>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	1ad3      	subs	r3, r2, r3
 8012ef8:	683a      	ldr	r2, [r7, #0]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d302      	bcc.n	8012f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d122      	bne.n	8012f4a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	699a      	ldr	r2, [r3, #24]
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	68ba      	ldr	r2, [r7, #8]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	bf0c      	ite	eq
 8012f14:	2301      	moveq	r3, #1
 8012f16:	2300      	movne	r3, #0
 8012f18:	b2db      	uxtb	r3, r3
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	79fb      	ldrb	r3, [r7, #7]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d113      	bne.n	8012f4a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f26:	f043 0220 	orr.w	r2, r3, #32
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2220      	movs	r2, #32
 8012f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2200      	movs	r2, #0
 8012f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8012f46:	2301      	movs	r3, #1
 8012f48:	e00f      	b.n	8012f6a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	699a      	ldr	r2, [r3, #24]
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	4013      	ands	r3, r2
 8012f54:	68ba      	ldr	r2, [r7, #8]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	bf0c      	ite	eq
 8012f5a:	2301      	moveq	r3, #1
 8012f5c:	2300      	movne	r3, #0
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	461a      	mov	r2, r3
 8012f62:	79fb      	ldrb	r3, [r7, #7]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d0be      	beq.n	8012ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012f68:	2300      	movs	r3, #0
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3710      	adds	r7, #16
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b084      	sub	sp, #16
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	60f8      	str	r0, [r7, #12]
 8012f7a:	60b9      	str	r1, [r7, #8]
 8012f7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012f7e:	e033      	b.n	8012fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012f80:	687a      	ldr	r2, [r7, #4]
 8012f82:	68b9      	ldr	r1, [r7, #8]
 8012f84:	68f8      	ldr	r0, [r7, #12]
 8012f86:	f000 f901 	bl	801318c <I2C_IsErrorOccurred>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d001      	beq.n	8012f94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012f90:	2301      	movs	r3, #1
 8012f92:	e031      	b.n	8012ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f9a:	d025      	beq.n	8012fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012f9c:	f7fd fa6e 	bl	801047c <HAL_GetTick>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	68ba      	ldr	r2, [r7, #8]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d302      	bcc.n	8012fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d11a      	bne.n	8012fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	699b      	ldr	r3, [r3, #24]
 8012fb8:	f003 0302 	and.w	r3, r3, #2
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	d013      	beq.n	8012fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fc4:	f043 0220 	orr.w	r2, r3, #32
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2220      	movs	r2, #32
 8012fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	e007      	b.n	8012ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	699b      	ldr	r3, [r3, #24]
 8012fee:	f003 0302 	and.w	r3, r3, #2
 8012ff2:	2b02      	cmp	r3, #2
 8012ff4:	d1c4      	bne.n	8012f80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8012ff6:	2300      	movs	r3, #0
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3710      	adds	r7, #16
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801300c:	e02f      	b.n	801306e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	68b9      	ldr	r1, [r7, #8]
 8013012:	68f8      	ldr	r0, [r7, #12]
 8013014:	f000 f8ba 	bl	801318c <I2C_IsErrorOccurred>
 8013018:	4603      	mov	r3, r0
 801301a:	2b00      	cmp	r3, #0
 801301c:	d001      	beq.n	8013022 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801301e:	2301      	movs	r3, #1
 8013020:	e02d      	b.n	801307e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013022:	f7fd fa2b 	bl	801047c <HAL_GetTick>
 8013026:	4602      	mov	r2, r0
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	1ad3      	subs	r3, r2, r3
 801302c:	68ba      	ldr	r2, [r7, #8]
 801302e:	429a      	cmp	r2, r3
 8013030:	d302      	bcc.n	8013038 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d11a      	bne.n	801306e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	699b      	ldr	r3, [r3, #24]
 801303e:	f003 0320 	and.w	r3, r3, #32
 8013042:	2b20      	cmp	r3, #32
 8013044:	d013      	beq.n	801306e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801304a:	f043 0220 	orr.w	r2, r3, #32
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2220      	movs	r2, #32
 8013056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2200      	movs	r2, #0
 801305e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	2200      	movs	r2, #0
 8013066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801306a:	2301      	movs	r3, #1
 801306c:	e007      	b.n	801307e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	699b      	ldr	r3, [r3, #24]
 8013074:	f003 0320 	and.w	r3, r3, #32
 8013078:	2b20      	cmp	r3, #32
 801307a:	d1c8      	bne.n	801300e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801307c:	2300      	movs	r3, #0
}
 801307e:	4618      	mov	r0, r3
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
	...

08013088 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013094:	e06b      	b.n	801316e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	68b9      	ldr	r1, [r7, #8]
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	f000 f876 	bl	801318c <I2C_IsErrorOccurred>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80130a6:	2301      	movs	r3, #1
 80130a8:	e069      	b.n	801317e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	699b      	ldr	r3, [r3, #24]
 80130b0:	f003 0320 	and.w	r3, r3, #32
 80130b4:	2b20      	cmp	r3, #32
 80130b6:	d138      	bne.n	801312a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	699b      	ldr	r3, [r3, #24]
 80130be:	f003 0304 	and.w	r3, r3, #4
 80130c2:	2b04      	cmp	r3, #4
 80130c4:	d105      	bne.n	80130d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d001      	beq.n	80130d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80130ce:	2300      	movs	r3, #0
 80130d0:	e055      	b.n	801317e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	699b      	ldr	r3, [r3, #24]
 80130d8:	f003 0310 	and.w	r3, r3, #16
 80130dc:	2b10      	cmp	r3, #16
 80130de:	d107      	bne.n	80130f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	2210      	movs	r2, #16
 80130e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2204      	movs	r2, #4
 80130ec:	645a      	str	r2, [r3, #68]	; 0x44
 80130ee:	e002      	b.n	80130f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2200      	movs	r2, #0
 80130f4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2220      	movs	r2, #32
 80130fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	6859      	ldr	r1, [r3, #4]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	4b1f      	ldr	r3, [pc, #124]	; (8013188 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801310a:	400b      	ands	r3, r1
 801310c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2220      	movs	r2, #32
 8013112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2200      	movs	r2, #0
 801311a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	2200      	movs	r2, #0
 8013122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8013126:	2301      	movs	r3, #1
 8013128:	e029      	b.n	801317e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801312a:	f7fd f9a7 	bl	801047c <HAL_GetTick>
 801312e:	4602      	mov	r2, r0
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	1ad3      	subs	r3, r2, r3
 8013134:	68ba      	ldr	r2, [r7, #8]
 8013136:	429a      	cmp	r2, r3
 8013138:	d302      	bcc.n	8013140 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d116      	bne.n	801316e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	699b      	ldr	r3, [r3, #24]
 8013146:	f003 0304 	and.w	r3, r3, #4
 801314a:	2b04      	cmp	r3, #4
 801314c:	d00f      	beq.n	801316e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013152:	f043 0220 	orr.w	r2, r3, #32
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	2220      	movs	r2, #32
 801315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2200      	movs	r2, #0
 8013166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801316a:	2301      	movs	r3, #1
 801316c:	e007      	b.n	801317e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	699b      	ldr	r3, [r3, #24]
 8013174:	f003 0304 	and.w	r3, r3, #4
 8013178:	2b04      	cmp	r3, #4
 801317a:	d18c      	bne.n	8013096 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801317c:	2300      	movs	r3, #0
}
 801317e:	4618      	mov	r0, r3
 8013180:	3710      	adds	r7, #16
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	fe00e800 	.word	0xfe00e800

0801318c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b08a      	sub	sp, #40	; 0x28
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013198:	2300      	movs	r3, #0
 801319a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	699b      	ldr	r3, [r3, #24]
 80131a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80131a6:	2300      	movs	r3, #0
 80131a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	f003 0310 	and.w	r3, r3, #16
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d068      	beq.n	801328a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2210      	movs	r2, #16
 80131be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80131c0:	e049      	b.n	8013256 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131c8:	d045      	beq.n	8013256 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80131ca:	f7fd f957 	bl	801047c <HAL_GetTick>
 80131ce:	4602      	mov	r2, r0
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	68ba      	ldr	r2, [r7, #8]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d302      	bcc.n	80131e0 <I2C_IsErrorOccurred+0x54>
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d13a      	bne.n	8013256 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80131ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	699b      	ldr	r3, [r3, #24]
 80131fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013202:	d121      	bne.n	8013248 <I2C_IsErrorOccurred+0xbc>
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801320a:	d01d      	beq.n	8013248 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801320c:	7cfb      	ldrb	r3, [r7, #19]
 801320e:	2b20      	cmp	r3, #32
 8013210:	d01a      	beq.n	8013248 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	685a      	ldr	r2, [r3, #4]
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013220:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8013222:	f7fd f92b 	bl	801047c <HAL_GetTick>
 8013226:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013228:	e00e      	b.n	8013248 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801322a:	f7fd f927 	bl	801047c <HAL_GetTick>
 801322e:	4602      	mov	r2, r0
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	1ad3      	subs	r3, r2, r3
 8013234:	2b19      	cmp	r3, #25
 8013236:	d907      	bls.n	8013248 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8013238:	6a3b      	ldr	r3, [r7, #32]
 801323a:	f043 0320 	orr.w	r3, r3, #32
 801323e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8013240:	2301      	movs	r3, #1
 8013242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8013246:	e006      	b.n	8013256 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	699b      	ldr	r3, [r3, #24]
 801324e:	f003 0320 	and.w	r3, r3, #32
 8013252:	2b20      	cmp	r3, #32
 8013254:	d1e9      	bne.n	801322a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	699b      	ldr	r3, [r3, #24]
 801325c:	f003 0320 	and.w	r3, r3, #32
 8013260:	2b20      	cmp	r3, #32
 8013262:	d003      	beq.n	801326c <I2C_IsErrorOccurred+0xe0>
 8013264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013268:	2b00      	cmp	r3, #0
 801326a:	d0aa      	beq.n	80131c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801326c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013270:	2b00      	cmp	r3, #0
 8013272:	d103      	bne.n	801327c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2220      	movs	r2, #32
 801327a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801327c:	6a3b      	ldr	r3, [r7, #32]
 801327e:	f043 0304 	orr.w	r3, r3, #4
 8013282:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8013284:	2301      	movs	r3, #1
 8013286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	699b      	ldr	r3, [r3, #24]
 8013290:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013298:	2b00      	cmp	r3, #0
 801329a:	d00b      	beq.n	80132b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801329c:	6a3b      	ldr	r3, [r7, #32]
 801329e:	f043 0301 	orr.w	r3, r3, #1
 80132a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80132ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80132ae:	2301      	movs	r3, #1
 80132b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d00b      	beq.n	80132d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80132be:	6a3b      	ldr	r3, [r7, #32]
 80132c0:	f043 0308 	orr.w	r3, r3, #8
 80132c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80132ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d00b      	beq.n	80132f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80132e0:	6a3b      	ldr	r3, [r7, #32]
 80132e2:	f043 0302 	orr.w	r3, r3, #2
 80132e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80132f2:	2301      	movs	r3, #1
 80132f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80132f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d01c      	beq.n	801333a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013300:	68f8      	ldr	r0, [r7, #12]
 8013302:	f7ff fdc3 	bl	8012e8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	6859      	ldr	r1, [r3, #4]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	4b0d      	ldr	r3, [pc, #52]	; (8013348 <I2C_IsErrorOccurred+0x1bc>)
 8013312:	400b      	ands	r3, r1
 8013314:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801331a:	6a3b      	ldr	r3, [r7, #32]
 801331c:	431a      	orrs	r2, r3
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	2220      	movs	r2, #32
 8013326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2200      	movs	r2, #0
 801332e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	2200      	movs	r2, #0
 8013336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801333a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801333e:	4618      	mov	r0, r3
 8013340:	3728      	adds	r7, #40	; 0x28
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}
 8013346:	bf00      	nop
 8013348:	fe00e800 	.word	0xfe00e800

0801334c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801334c:	b480      	push	{r7}
 801334e:	b087      	sub	sp, #28
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	607b      	str	r3, [r7, #4]
 8013356:	460b      	mov	r3, r1
 8013358:	817b      	strh	r3, [r7, #10]
 801335a:	4613      	mov	r3, r2
 801335c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801335e:	897b      	ldrh	r3, [r7, #10]
 8013360:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8013364:	7a7b      	ldrb	r3, [r7, #9]
 8013366:	041b      	lsls	r3, r3, #16
 8013368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801336c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013372:	6a3b      	ldr	r3, [r7, #32]
 8013374:	4313      	orrs	r3, r2
 8013376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801337a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	685a      	ldr	r2, [r3, #4]
 8013382:	6a3b      	ldr	r3, [r7, #32]
 8013384:	0d5b      	lsrs	r3, r3, #21
 8013386:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801338a:	4b08      	ldr	r3, [pc, #32]	; (80133ac <I2C_TransferConfig+0x60>)
 801338c:	430b      	orrs	r3, r1
 801338e:	43db      	mvns	r3, r3
 8013390:	ea02 0103 	and.w	r1, r2, r3
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	697a      	ldr	r2, [r7, #20]
 801339a:	430a      	orrs	r2, r1
 801339c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801339e:	bf00      	nop
 80133a0:	371c      	adds	r7, #28
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr
 80133aa:	bf00      	nop
 80133ac:	03ff63ff 	.word	0x03ff63ff

080133b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80133b0:	b480      	push	{r7}
 80133b2:	b083      	sub	sp, #12
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	2b20      	cmp	r3, #32
 80133c4:	d138      	bne.n	8013438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	d101      	bne.n	80133d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80133d0:	2302      	movs	r3, #2
 80133d2:	e032      	b.n	801343a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2201      	movs	r2, #1
 80133d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2224      	movs	r2, #36	; 0x24
 80133e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	681a      	ldr	r2, [r3, #0]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f022 0201 	bic.w	r2, r2, #1
 80133f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	6819      	ldr	r1, [r3, #0]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	683a      	ldr	r2, [r7, #0]
 8013410:	430a      	orrs	r2, r1
 8013412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	681a      	ldr	r2, [r3, #0]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f042 0201 	orr.w	r2, r2, #1
 8013422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2220      	movs	r2, #32
 8013428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2200      	movs	r2, #0
 8013430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8013434:	2300      	movs	r3, #0
 8013436:	e000      	b.n	801343a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013438:	2302      	movs	r3, #2
  }
}
 801343a:	4618      	mov	r0, r3
 801343c:	370c      	adds	r7, #12
 801343e:	46bd      	mov	sp, r7
 8013440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013444:	4770      	bx	lr

08013446 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8013446:	b480      	push	{r7}
 8013448:	b085      	sub	sp, #20
 801344a:	af00      	add	r7, sp, #0
 801344c:	6078      	str	r0, [r7, #4]
 801344e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013456:	b2db      	uxtb	r3, r3
 8013458:	2b20      	cmp	r3, #32
 801345a:	d139      	bne.n	80134d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013462:	2b01      	cmp	r3, #1
 8013464:	d101      	bne.n	801346a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8013466:	2302      	movs	r3, #2
 8013468:	e033      	b.n	80134d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	2201      	movs	r2, #1
 801346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2224      	movs	r2, #36	; 0x24
 8013476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f022 0201 	bic.w	r2, r2, #1
 8013488:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8013498:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	021b      	lsls	r3, r3, #8
 801349e:	68fa      	ldr	r2, [r7, #12]
 80134a0:	4313      	orrs	r3, r2
 80134a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	68fa      	ldr	r2, [r7, #12]
 80134aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	f042 0201 	orr.w	r2, r2, #1
 80134ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2220      	movs	r2, #32
 80134c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2200      	movs	r2, #0
 80134c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80134cc:	2300      	movs	r3, #0
 80134ce:	e000      	b.n	80134d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80134d0:	2302      	movs	r3, #2
  }
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3714      	adds	r7, #20
 80134d6:	46bd      	mov	sp, r7
 80134d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134dc:	4770      	bx	lr
	...

080134e0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80134e0:	b480      	push	{r7}
 80134e2:	b085      	sub	sp, #20
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80134e8:	2300      	movs	r3, #0
 80134ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80134ec:	4b0b      	ldr	r3, [pc, #44]	; (801351c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	f003 0301 	and.w	r3, r3, #1
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80134f8:	2301      	movs	r3, #1
 80134fa:	73fb      	strb	r3, [r7, #15]
 80134fc:	e007      	b.n	801350e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80134fe:	4b07      	ldr	r3, [pc, #28]	; (801351c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f023 0204 	bic.w	r2, r3, #4
 8013506:	4905      	ldr	r1, [pc, #20]	; (801351c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	4313      	orrs	r3, r2
 801350c:	600b      	str	r3, [r1, #0]
  }

  return status;
 801350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013510:	4618      	mov	r0, r3
 8013512:	3714      	adds	r7, #20
 8013514:	46bd      	mov	sp, r7
 8013516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351a:	4770      	bx	lr
 801351c:	40030400 	.word	0x40030400

08013520 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8013520:	b480      	push	{r7}
 8013522:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8013524:	4b05      	ldr	r3, [pc, #20]	; (801353c <HAL_ICACHE_Enable+0x1c>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4a04      	ldr	r2, [pc, #16]	; (801353c <HAL_ICACHE_Enable+0x1c>)
 801352a:	f043 0301 	orr.w	r3, r3, #1
 801352e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8013530:	2300      	movs	r3, #0
}
 8013532:	4618      	mov	r0, r3
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr
 801353c:	40030400 	.word	0x40030400

08013540 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013542:	b08b      	sub	sp, #44	; 0x2c
 8013544:	af06      	add	r7, sp, #24
 8013546:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d101      	bne.n	8013552 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801354e:	2301      	movs	r3, #1
 8013550:	e0cb      	b.n	80136ea <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8013558:	b2db      	uxtb	r3, r3
 801355a:	2b00      	cmp	r3, #0
 801355c:	d106      	bne.n	801356c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f7fc fc80 	bl	800fe6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2203      	movs	r2, #3
 8013570:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	4618      	mov	r0, r3
 801357a:	f007 f939 	bl	801a7f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801357e:	2300      	movs	r3, #0
 8013580:	73fb      	strb	r3, [r7, #15]
 8013582:	e040      	b.n	8013606 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013584:	7bfb      	ldrb	r3, [r7, #15]
 8013586:	6879      	ldr	r1, [r7, #4]
 8013588:	1c5a      	adds	r2, r3, #1
 801358a:	4613      	mov	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	4413      	add	r3, r2
 8013590:	00db      	lsls	r3, r3, #3
 8013592:	440b      	add	r3, r1
 8013594:	3301      	adds	r3, #1
 8013596:	2201      	movs	r2, #1
 8013598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801359a:	7bfb      	ldrb	r3, [r7, #15]
 801359c:	6879      	ldr	r1, [r7, #4]
 801359e:	1c5a      	adds	r2, r3, #1
 80135a0:	4613      	mov	r3, r2
 80135a2:	009b      	lsls	r3, r3, #2
 80135a4:	4413      	add	r3, r2
 80135a6:	00db      	lsls	r3, r3, #3
 80135a8:	440b      	add	r3, r1
 80135aa:	7bfa      	ldrb	r2, [r7, #15]
 80135ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80135ae:	7bfb      	ldrb	r3, [r7, #15]
 80135b0:	6879      	ldr	r1, [r7, #4]
 80135b2:	1c5a      	adds	r2, r3, #1
 80135b4:	4613      	mov	r3, r2
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	4413      	add	r3, r2
 80135ba:	00db      	lsls	r3, r3, #3
 80135bc:	440b      	add	r3, r1
 80135be:	3303      	adds	r3, #3
 80135c0:	2200      	movs	r2, #0
 80135c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80135c4:	7bfa      	ldrb	r2, [r7, #15]
 80135c6:	6879      	ldr	r1, [r7, #4]
 80135c8:	4613      	mov	r3, r2
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	4413      	add	r3, r2
 80135ce:	00db      	lsls	r3, r3, #3
 80135d0:	440b      	add	r3, r1
 80135d2:	3338      	adds	r3, #56	; 0x38
 80135d4:	2200      	movs	r2, #0
 80135d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80135d8:	7bfa      	ldrb	r2, [r7, #15]
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	4613      	mov	r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	4413      	add	r3, r2
 80135e2:	00db      	lsls	r3, r3, #3
 80135e4:	440b      	add	r3, r1
 80135e6:	333c      	adds	r3, #60	; 0x3c
 80135e8:	2200      	movs	r2, #0
 80135ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80135ec:	7bfa      	ldrb	r2, [r7, #15]
 80135ee:	6879      	ldr	r1, [r7, #4]
 80135f0:	4613      	mov	r3, r2
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	4413      	add	r3, r2
 80135f6:	00db      	lsls	r3, r3, #3
 80135f8:	440b      	add	r3, r1
 80135fa:	3340      	adds	r3, #64	; 0x40
 80135fc:	2200      	movs	r2, #0
 80135fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013600:	7bfb      	ldrb	r3, [r7, #15]
 8013602:	3301      	adds	r3, #1
 8013604:	73fb      	strb	r3, [r7, #15]
 8013606:	7bfa      	ldrb	r2, [r7, #15]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	429a      	cmp	r2, r3
 801360e:	d3b9      	bcc.n	8013584 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013610:	2300      	movs	r3, #0
 8013612:	73fb      	strb	r3, [r7, #15]
 8013614:	e044      	b.n	80136a0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013616:	7bfa      	ldrb	r2, [r7, #15]
 8013618:	6879      	ldr	r1, [r7, #4]
 801361a:	4613      	mov	r3, r2
 801361c:	009b      	lsls	r3, r3, #2
 801361e:	4413      	add	r3, r2
 8013620:	00db      	lsls	r3, r3, #3
 8013622:	440b      	add	r3, r1
 8013624:	f203 1369 	addw	r3, r3, #361	; 0x169
 8013628:	2200      	movs	r2, #0
 801362a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801362c:	7bfa      	ldrb	r2, [r7, #15]
 801362e:	6879      	ldr	r1, [r7, #4]
 8013630:	4613      	mov	r3, r2
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	4413      	add	r3, r2
 8013636:	00db      	lsls	r3, r3, #3
 8013638:	440b      	add	r3, r1
 801363a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801363e:	7bfa      	ldrb	r2, [r7, #15]
 8013640:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013642:	7bfa      	ldrb	r2, [r7, #15]
 8013644:	6879      	ldr	r1, [r7, #4]
 8013646:	4613      	mov	r3, r2
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	4413      	add	r3, r2
 801364c:	00db      	lsls	r3, r3, #3
 801364e:	440b      	add	r3, r1
 8013650:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8013654:	2200      	movs	r2, #0
 8013656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013658:	7bfa      	ldrb	r2, [r7, #15]
 801365a:	6879      	ldr	r1, [r7, #4]
 801365c:	4613      	mov	r3, r2
 801365e:	009b      	lsls	r3, r3, #2
 8013660:	4413      	add	r3, r2
 8013662:	00db      	lsls	r3, r3, #3
 8013664:	440b      	add	r3, r1
 8013666:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801366a:	2200      	movs	r2, #0
 801366c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801366e:	7bfa      	ldrb	r2, [r7, #15]
 8013670:	6879      	ldr	r1, [r7, #4]
 8013672:	4613      	mov	r3, r2
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	4413      	add	r3, r2
 8013678:	00db      	lsls	r3, r3, #3
 801367a:	440b      	add	r3, r1
 801367c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013680:	2200      	movs	r2, #0
 8013682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013684:	7bfa      	ldrb	r2, [r7, #15]
 8013686:	6879      	ldr	r1, [r7, #4]
 8013688:	4613      	mov	r3, r2
 801368a:	009b      	lsls	r3, r3, #2
 801368c:	4413      	add	r3, r2
 801368e:	00db      	lsls	r3, r3, #3
 8013690:	440b      	add	r3, r1
 8013692:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013696:	2200      	movs	r2, #0
 8013698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801369a:	7bfb      	ldrb	r3, [r7, #15]
 801369c:	3301      	adds	r3, #1
 801369e:	73fb      	strb	r3, [r7, #15]
 80136a0:	7bfa      	ldrb	r2, [r7, #15]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d3b5      	bcc.n	8013616 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	603b      	str	r3, [r7, #0]
 80136b0:	687e      	ldr	r6, [r7, #4]
 80136b2:	466d      	mov	r5, sp
 80136b4:	f106 0410 	add.w	r4, r6, #16
 80136b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80136bc:	6823      	ldr	r3, [r4, #0]
 80136be:	602b      	str	r3, [r5, #0]
 80136c0:	1d33      	adds	r3, r6, #4
 80136c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80136c4:	6838      	ldr	r0, [r7, #0]
 80136c6:	f007 f8ae 	bl	801a826 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2200      	movs	r2, #0
 80136ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2201      	movs	r2, #1
 80136d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	69db      	ldr	r3, [r3, #28]
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d102      	bne.n	80136e8 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 f805 	bl	80136f2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80136e8:	2300      	movs	r3, #0
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3714      	adds	r7, #20
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080136f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80136f2:	b480      	push	{r7}
 80136f4:	b085      	sub	sp, #20
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2201      	movs	r2, #1
 8013704:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8013716:	b29b      	uxth	r3, r3
 8013718:	f043 0301 	orr.w	r3, r3, #1
 801371c:	b29a      	uxth	r2, r3
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801372a:	b29b      	uxth	r3, r3
 801372c:	f043 0302 	orr.w	r3, r3, #2
 8013730:	b29a      	uxth	r2, r3
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8013738:	2300      	movs	r3, #0
}
 801373a:	4618      	mov	r0, r3
 801373c:	3714      	adds	r7, #20
 801373e:	46bd      	mov	sp, r7
 8013740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013744:	4770      	bx	lr
	...

08013748 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8013748:	b480      	push	{r7}
 801374a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801374c:	4b05      	ldr	r3, [pc, #20]	; (8013764 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	4a04      	ldr	r2, [pc, #16]	; (8013764 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8013752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013756:	6013      	str	r3, [r2, #0]
}
 8013758:	bf00      	nop
 801375a:	46bd      	mov	sp, r7
 801375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop
 8013764:	40007000 	.word	0x40007000

08013768 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8013768:	b480      	push	{r7}
 801376a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 801376c:	4b04      	ldr	r3, [pc, #16]	; (8013780 <HAL_PWREx_GetVoltageRange+0x18>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8013774:	4618      	mov	r0, r3
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop
 8013780:	40007000 	.word	0x40007000

08013784 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 801378c:	4b27      	ldr	r3, [pc, #156]	; (801382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013794:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8013796:	f000 f861 	bl	801385c <HAL_PWREx_SMPS_GetEffectiveMode>
 801379a:	4603      	mov	r3, r0
 801379c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137a0:	d101      	bne.n	80137a6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80137a2:	2301      	movs	r3, #1
 80137a4:	e03e      	b.n	8013824 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80137a6:	4b21      	ldr	r3, [pc, #132]	; (801382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137b2:	d101      	bne.n	80137b8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80137b4:	2301      	movs	r3, #1
 80137b6:	e035      	b.n	8013824 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	429a      	cmp	r2, r3
 80137be:	d101      	bne.n	80137c4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80137c0:	2300      	movs	r3, #0
 80137c2:	e02f      	b.n	8013824 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80137c4:	4b19      	ldr	r3, [pc, #100]	; (801382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80137cc:	4917      	ldr	r1, [pc, #92]	; (801382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	4313      	orrs	r3, r2
 80137d2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80137d4:	4b16      	ldr	r3, [pc, #88]	; (8013830 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	095b      	lsrs	r3, r3, #5
 80137da:	4a16      	ldr	r2, [pc, #88]	; (8013834 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80137dc:	fba2 2303 	umull	r2, r3, r2, r3
 80137e0:	09db      	lsrs	r3, r3, #7
 80137e2:	2232      	movs	r2, #50	; 0x32
 80137e4:	fb02 f303 	mul.w	r3, r2, r3
 80137e8:	4a13      	ldr	r2, [pc, #76]	; (8013838 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80137ea:	fba2 2303 	umull	r2, r3, r2, r3
 80137ee:	08db      	lsrs	r3, r3, #3
 80137f0:	3301      	adds	r3, #1
 80137f2:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80137f4:	e002      	b.n	80137fc <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	3b01      	subs	r3, #1
 80137fa:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80137fc:	4b0b      	ldr	r3, [pc, #44]	; (801382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80137fe:	695b      	ldr	r3, [r3, #20]
 8013800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013808:	d102      	bne.n	8013810 <HAL_PWREx_ControlVoltageScaling+0x8c>
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d1f2      	bne.n	80137f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8013810:	4b06      	ldr	r3, [pc, #24]	; (801382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8013812:	695b      	ldr	r3, [r3, #20]
 8013814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801381c:	d101      	bne.n	8013822 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 801381e:	2303      	movs	r3, #3
 8013820:	e000      	b.n	8013824 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8013822:	2300      	movs	r3, #0
}
 8013824:	4618      	mov	r0, r3
 8013826:	3710      	adds	r7, #16
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	40007000 	.word	0x40007000
 8013830:	20000090 	.word	0x20000090
 8013834:	0a7c5ac5 	.word	0x0a7c5ac5
 8013838:	cccccccd 	.word	0xcccccccd

0801383c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 801383c:	b480      	push	{r7}
 801383e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8013840:	4b05      	ldr	r3, [pc, #20]	; (8013858 <HAL_PWREx_EnableVddIO2+0x1c>)
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	4a04      	ldr	r2, [pc, #16]	; (8013858 <HAL_PWREx_EnableVddIO2+0x1c>)
 8013846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801384a:	6053      	str	r3, [r2, #4]
}
 801384c:	bf00      	nop
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr
 8013856:	bf00      	nop
 8013858:	40007000 	.word	0x40007000

0801385c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 801385c:	b480      	push	{r7}
 801385e:	b083      	sub	sp, #12
 8013860:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8013862:	4b0f      	ldr	r3, [pc, #60]	; (80138a0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8013864:	691b      	ldr	r3, [r3, #16]
 8013866:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801386e:	2b00      	cmp	r3, #0
 8013870:	d003      	beq.n	801387a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8013872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013876:	607b      	str	r3, [r7, #4]
 8013878:	e00a      	b.n	8013890 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013880:	2b00      	cmp	r3, #0
 8013882:	d103      	bne.n	801388c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8013884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013888:	607b      	str	r3, [r7, #4]
 801388a:	e001      	b.n	8013890 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 801388c:	2300      	movs	r3, #0
 801388e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8013890:	687b      	ldr	r3, [r7, #4]
}
 8013892:	4618      	mov	r0, r3
 8013894:	370c      	adds	r7, #12
 8013896:	46bd      	mov	sp, r7
 8013898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389c:	4770      	bx	lr
 801389e:	bf00      	nop
 80138a0:	40007000 	.word	0x40007000

080138a4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b088      	sub	sp, #32
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d102      	bne.n	80138b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80138b2:	2301      	movs	r3, #1
 80138b4:	f000 bcc2 	b.w	801423c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80138b8:	4b99      	ldr	r3, [pc, #612]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	f003 030c 	and.w	r3, r3, #12
 80138c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80138c2:	4b97      	ldr	r3, [pc, #604]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	f003 0303 	and.w	r3, r3, #3
 80138ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	f003 0310 	and.w	r3, r3, #16
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	f000 80e9 	beq.w	8013aac <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d006      	beq.n	80138ee <HAL_RCC_OscConfig+0x4a>
 80138e0:	69bb      	ldr	r3, [r7, #24]
 80138e2:	2b0c      	cmp	r3, #12
 80138e4:	f040 8083 	bne.w	80139ee <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d17f      	bne.n	80139ee <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80138ee:	4b8c      	ldr	r3, [pc, #560]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f003 0302 	and.w	r3, r3, #2
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d006      	beq.n	8013908 <HAL_RCC_OscConfig+0x64>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	69db      	ldr	r3, [r3, #28]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d102      	bne.n	8013908 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8013902:	2301      	movs	r3, #1
 8013904:	f000 bc9a 	b.w	801423c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801390c:	4b84      	ldr	r3, [pc, #528]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	f003 0308 	and.w	r3, r3, #8
 8013914:	2b00      	cmp	r3, #0
 8013916:	d004      	beq.n	8013922 <HAL_RCC_OscConfig+0x7e>
 8013918:	4b81      	ldr	r3, [pc, #516]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013920:	e005      	b.n	801392e <HAL_RCC_OscConfig+0x8a>
 8013922:	4b7f      	ldr	r3, [pc, #508]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013928:	091b      	lsrs	r3, r3, #4
 801392a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801392e:	4293      	cmp	r3, r2
 8013930:	d224      	bcs.n	801397c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013936:	4618      	mov	r0, r3
 8013938:	f000 fece 	bl	80146d8 <RCC_SetFlashLatencyFromMSIRange>
 801393c:	4603      	mov	r3, r0
 801393e:	2b00      	cmp	r3, #0
 8013940:	d002      	beq.n	8013948 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8013942:	2301      	movs	r3, #1
 8013944:	f000 bc7a 	b.w	801423c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013948:	4b75      	ldr	r3, [pc, #468]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	4a74      	ldr	r2, [pc, #464]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 801394e:	f043 0308 	orr.w	r3, r3, #8
 8013952:	6013      	str	r3, [r2, #0]
 8013954:	4b72      	ldr	r3, [pc, #456]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013960:	496f      	ldr	r1, [pc, #444]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013962:	4313      	orrs	r3, r2
 8013964:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013966:	4b6e      	ldr	r3, [pc, #440]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6a1b      	ldr	r3, [r3, #32]
 8013972:	021b      	lsls	r3, r3, #8
 8013974:	496a      	ldr	r1, [pc, #424]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013976:	4313      	orrs	r3, r2
 8013978:	604b      	str	r3, [r1, #4]
 801397a:	e026      	b.n	80139ca <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801397c:	4b68      	ldr	r3, [pc, #416]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4a67      	ldr	r2, [pc, #412]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013982:	f043 0308 	orr.w	r3, r3, #8
 8013986:	6013      	str	r3, [r2, #0]
 8013988:	4b65      	ldr	r3, [pc, #404]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013994:	4962      	ldr	r1, [pc, #392]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013996:	4313      	orrs	r3, r2
 8013998:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801399a:	4b61      	ldr	r3, [pc, #388]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6a1b      	ldr	r3, [r3, #32]
 80139a6:	021b      	lsls	r3, r3, #8
 80139a8:	495d      	ldr	r1, [pc, #372]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 80139aa:	4313      	orrs	r3, r2
 80139ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d10a      	bne.n	80139ca <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b8:	4618      	mov	r0, r3
 80139ba:	f000 fe8d 	bl	80146d8 <RCC_SetFlashLatencyFromMSIRange>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d002      	beq.n	80139ca <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80139c4:	2301      	movs	r3, #1
 80139c6:	f000 bc39 	b.w	801423c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80139ca:	f000 fe17 	bl	80145fc <HAL_RCC_GetHCLKFreq>
 80139ce:	4603      	mov	r3, r0
 80139d0:	4a54      	ldr	r2, [pc, #336]	; (8013b24 <HAL_RCC_OscConfig+0x280>)
 80139d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80139d4:	4b54      	ldr	r3, [pc, #336]	; (8013b28 <HAL_RCC_OscConfig+0x284>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fc faa7 	bl	800ff2c <HAL_InitTick>
 80139de:	4603      	mov	r3, r0
 80139e0:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80139e2:	7bfb      	ldrb	r3, [r7, #15]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d060      	beq.n	8013aaa <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80139e8:	7bfb      	ldrb	r3, [r7, #15]
 80139ea:	f000 bc27 	b.w	801423c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	69db      	ldr	r3, [r3, #28]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d039      	beq.n	8013a6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80139f6:	4b4a      	ldr	r3, [pc, #296]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	4a49      	ldr	r2, [pc, #292]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 80139fc:	f043 0301 	orr.w	r3, r3, #1
 8013a00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013a02:	f7fc fd3b 	bl	801047c <HAL_GetTick>
 8013a06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013a08:	e00f      	b.n	8013a2a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013a0a:	f7fc fd37 	bl	801047c <HAL_GetTick>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	1ad3      	subs	r3, r2, r3
 8013a14:	2b02      	cmp	r3, #2
 8013a16:	d908      	bls.n	8013a2a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013a18:	4b41      	ldr	r3, [pc, #260]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	f003 0302 	and.w	r3, r3, #2
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d102      	bne.n	8013a2a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8013a24:	2303      	movs	r3, #3
 8013a26:	f000 bc09 	b.w	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013a2a:	4b3d      	ldr	r3, [pc, #244]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	f003 0302 	and.w	r3, r3, #2
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d0e9      	beq.n	8013a0a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013a36:	4b3a      	ldr	r3, [pc, #232]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	4a39      	ldr	r2, [pc, #228]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a3c:	f043 0308 	orr.w	r3, r3, #8
 8013a40:	6013      	str	r3, [r2, #0]
 8013a42:	4b37      	ldr	r3, [pc, #220]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a4e:	4934      	ldr	r1, [pc, #208]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a50:	4313      	orrs	r3, r2
 8013a52:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013a54:	4b32      	ldr	r3, [pc, #200]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a1b      	ldr	r3, [r3, #32]
 8013a60:	021b      	lsls	r3, r3, #8
 8013a62:	492f      	ldr	r1, [pc, #188]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a64:	4313      	orrs	r3, r2
 8013a66:	604b      	str	r3, [r1, #4]
 8013a68:	e020      	b.n	8013aac <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8013a6a:	4b2d      	ldr	r3, [pc, #180]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	4a2c      	ldr	r2, [pc, #176]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a70:	f023 0301 	bic.w	r3, r3, #1
 8013a74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013a76:	f7fc fd01 	bl	801047c <HAL_GetTick>
 8013a7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013a7c:	e00e      	b.n	8013a9c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013a7e:	f7fc fcfd 	bl	801047c <HAL_GetTick>
 8013a82:	4602      	mov	r2, r0
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	1ad3      	subs	r3, r2, r3
 8013a88:	2b02      	cmp	r3, #2
 8013a8a:	d907      	bls.n	8013a9c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013a8c:	4b24      	ldr	r3, [pc, #144]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	f003 0302 	and.w	r3, r3, #2
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d001      	beq.n	8013a9c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8013a98:	2303      	movs	r3, #3
 8013a9a:	e3cf      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013a9c:	4b20      	ldr	r3, [pc, #128]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	f003 0302 	and.w	r3, r3, #2
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1ea      	bne.n	8013a7e <HAL_RCC_OscConfig+0x1da>
 8013aa8:	e000      	b.n	8013aac <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013aaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	f003 0301 	and.w	r3, r3, #1
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d07e      	beq.n	8013bb6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8013ab8:	69bb      	ldr	r3, [r7, #24]
 8013aba:	2b08      	cmp	r3, #8
 8013abc:	d005      	beq.n	8013aca <HAL_RCC_OscConfig+0x226>
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	2b0c      	cmp	r3, #12
 8013ac2:	d10e      	bne.n	8013ae2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	2b03      	cmp	r3, #3
 8013ac8:	d10b      	bne.n	8013ae2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013aca:	4b15      	ldr	r3, [pc, #84]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d06e      	beq.n	8013bb4 <HAL_RCC_OscConfig+0x310>
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	685b      	ldr	r3, [r3, #4]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d16a      	bne.n	8013bb4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	e3ac      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013aea:	d106      	bne.n	8013afa <HAL_RCC_OscConfig+0x256>
 8013aec:	4b0c      	ldr	r3, [pc, #48]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4a0b      	ldr	r2, [pc, #44]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013af6:	6013      	str	r3, [r2, #0]
 8013af8:	e024      	b.n	8013b44 <HAL_RCC_OscConfig+0x2a0>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013b02:	d113      	bne.n	8013b2c <HAL_RCC_OscConfig+0x288>
 8013b04:	4b06      	ldr	r3, [pc, #24]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4a05      	ldr	r2, [pc, #20]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013b0e:	6013      	str	r3, [r2, #0]
 8013b10:	4b03      	ldr	r3, [pc, #12]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	4a02      	ldr	r2, [pc, #8]	; (8013b20 <HAL_RCC_OscConfig+0x27c>)
 8013b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013b1a:	6013      	str	r3, [r2, #0]
 8013b1c:	e012      	b.n	8013b44 <HAL_RCC_OscConfig+0x2a0>
 8013b1e:	bf00      	nop
 8013b20:	40021000 	.word	0x40021000
 8013b24:	20000090 	.word	0x20000090
 8013b28:	20000094 	.word	0x20000094
 8013b2c:	4b8b      	ldr	r3, [pc, #556]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	4a8a      	ldr	r2, [pc, #552]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013b36:	6013      	str	r3, [r2, #0]
 8013b38:	4b88      	ldr	r3, [pc, #544]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4a87      	ldr	r2, [pc, #540]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d019      	beq.n	8013b80 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013b4c:	f7fc fc96 	bl	801047c <HAL_GetTick>
 8013b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013b52:	e00e      	b.n	8013b72 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013b54:	f7fc fc92 	bl	801047c <HAL_GetTick>
 8013b58:	4602      	mov	r2, r0
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	1ad3      	subs	r3, r2, r3
 8013b5e:	2b64      	cmp	r3, #100	; 0x64
 8013b60:	d907      	bls.n	8013b72 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013b62:	4b7e      	ldr	r3, [pc, #504]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d101      	bne.n	8013b72 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8013b6e:	2303      	movs	r3, #3
 8013b70:	e364      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013b72:	4b7a      	ldr	r3, [pc, #488]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d0ea      	beq.n	8013b54 <HAL_RCC_OscConfig+0x2b0>
 8013b7e:	e01a      	b.n	8013bb6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013b80:	f7fc fc7c 	bl	801047c <HAL_GetTick>
 8013b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013b86:	e00e      	b.n	8013ba6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013b88:	f7fc fc78 	bl	801047c <HAL_GetTick>
 8013b8c:	4602      	mov	r2, r0
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	1ad3      	subs	r3, r2, r3
 8013b92:	2b64      	cmp	r3, #100	; 0x64
 8013b94:	d907      	bls.n	8013ba6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013b96:	4b71      	ldr	r3, [pc, #452]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d001      	beq.n	8013ba6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8013ba2:	2303      	movs	r3, #3
 8013ba4:	e34a      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013ba6:	4b6d      	ldr	r3, [pc, #436]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d1ea      	bne.n	8013b88 <HAL_RCC_OscConfig+0x2e4>
 8013bb2:	e000      	b.n	8013bb6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f003 0302 	and.w	r3, r3, #2
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d06c      	beq.n	8013c9c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	2b04      	cmp	r3, #4
 8013bc6:	d005      	beq.n	8013bd4 <HAL_RCC_OscConfig+0x330>
 8013bc8:	69bb      	ldr	r3, [r7, #24]
 8013bca:	2b0c      	cmp	r3, #12
 8013bcc:	d119      	bne.n	8013c02 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	2b02      	cmp	r3, #2
 8013bd2:	d116      	bne.n	8013c02 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013bd4:	4b61      	ldr	r3, [pc, #388]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d005      	beq.n	8013bec <HAL_RCC_OscConfig+0x348>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d101      	bne.n	8013bec <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8013be8:	2301      	movs	r3, #1
 8013bea:	e327      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013bec:	4b5b      	ldr	r3, [pc, #364]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	691b      	ldr	r3, [r3, #16]
 8013bf8:	061b      	lsls	r3, r3, #24
 8013bfa:	4958      	ldr	r1, [pc, #352]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013bfc:	4313      	orrs	r3, r2
 8013bfe:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013c00:	e04c      	b.n	8013c9c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d029      	beq.n	8013c5e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013c0a:	4b54      	ldr	r3, [pc, #336]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	4a53      	ldr	r2, [pc, #332]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013c16:	f7fc fc31 	bl	801047c <HAL_GetTick>
 8013c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013c1c:	e00e      	b.n	8013c3c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013c1e:	f7fc fc2d 	bl	801047c <HAL_GetTick>
 8013c22:	4602      	mov	r2, r0
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	1ad3      	subs	r3, r2, r3
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d907      	bls.n	8013c3c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013c2c:	4b4b      	ldr	r3, [pc, #300]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d101      	bne.n	8013c3c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8013c38:	2303      	movs	r3, #3
 8013c3a:	e2ff      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013c3c:	4b47      	ldr	r3, [pc, #284]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d0ea      	beq.n	8013c1e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013c48:	4b44      	ldr	r3, [pc, #272]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	691b      	ldr	r3, [r3, #16]
 8013c54:	061b      	lsls	r3, r3, #24
 8013c56:	4941      	ldr	r1, [pc, #260]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c58:	4313      	orrs	r3, r2
 8013c5a:	604b      	str	r3, [r1, #4]
 8013c5c:	e01e      	b.n	8013c9c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013c5e:	4b3f      	ldr	r3, [pc, #252]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	4a3e      	ldr	r2, [pc, #248]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013c6a:	f7fc fc07 	bl	801047c <HAL_GetTick>
 8013c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013c70:	e00e      	b.n	8013c90 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013c72:	f7fc fc03 	bl	801047c <HAL_GetTick>
 8013c76:	4602      	mov	r2, r0
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	1ad3      	subs	r3, r2, r3
 8013c7c:	2b02      	cmp	r3, #2
 8013c7e:	d907      	bls.n	8013c90 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013c80:	4b36      	ldr	r3, [pc, #216]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d001      	beq.n	8013c90 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8013c8c:	2303      	movs	r3, #3
 8013c8e:	e2d5      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013c90:	4b32      	ldr	r3, [pc, #200]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d1ea      	bne.n	8013c72 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	f003 0308 	and.w	r3, r3, #8
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d062      	beq.n	8013d6e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	695b      	ldr	r3, [r3, #20]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d038      	beq.n	8013d22 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	699b      	ldr	r3, [r3, #24]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d108      	bne.n	8013cca <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8013cb8:	4b28      	ldr	r3, [pc, #160]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013cbe:	4a27      	ldr	r2, [pc, #156]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013cc0:	f023 0310 	bic.w	r3, r3, #16
 8013cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013cc8:	e007      	b.n	8013cda <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8013cca:	4b24      	ldr	r3, [pc, #144]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013cd0:	4a22      	ldr	r2, [pc, #136]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013cd2:	f043 0310 	orr.w	r3, r3, #16
 8013cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013cda:	4b20      	ldr	r3, [pc, #128]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013ce0:	4a1e      	ldr	r2, [pc, #120]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013ce2:	f043 0301 	orr.w	r3, r3, #1
 8013ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013cea:	f7fc fbc7 	bl	801047c <HAL_GetTick>
 8013cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013cf0:	e00f      	b.n	8013d12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013cf2:	f7fc fbc3 	bl	801047c <HAL_GetTick>
 8013cf6:	4602      	mov	r2, r0
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	1ad3      	subs	r3, r2, r3
 8013cfc:	2b07      	cmp	r3, #7
 8013cfe:	d908      	bls.n	8013d12 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013d00:	4b16      	ldr	r3, [pc, #88]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013d06:	f003 0302 	and.w	r3, r3, #2
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d101      	bne.n	8013d12 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8013d0e:	2303      	movs	r3, #3
 8013d10:	e294      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013d12:	4b12      	ldr	r3, [pc, #72]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013d18:	f003 0302 	and.w	r3, r3, #2
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d0e8      	beq.n	8013cf2 <HAL_RCC_OscConfig+0x44e>
 8013d20:	e025      	b.n	8013d6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013d22:	4b0e      	ldr	r3, [pc, #56]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013d28:	4a0c      	ldr	r2, [pc, #48]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013d2a:	f023 0301 	bic.w	r3, r3, #1
 8013d2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013d32:	f7fc fba3 	bl	801047c <HAL_GetTick>
 8013d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013d38:	e012      	b.n	8013d60 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013d3a:	f7fc fb9f 	bl	801047c <HAL_GetTick>
 8013d3e:	4602      	mov	r2, r0
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	1ad3      	subs	r3, r2, r3
 8013d44:	2b07      	cmp	r3, #7
 8013d46:	d90b      	bls.n	8013d60 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013d48:	4b04      	ldr	r3, [pc, #16]	; (8013d5c <HAL_RCC_OscConfig+0x4b8>)
 8013d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013d4e:	f003 0302 	and.w	r3, r3, #2
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d004      	beq.n	8013d60 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8013d56:	2303      	movs	r3, #3
 8013d58:	e270      	b.n	801423c <HAL_RCC_OscConfig+0x998>
 8013d5a:	bf00      	nop
 8013d5c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013d60:	4ba8      	ldr	r3, [pc, #672]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013d66:	f003 0302 	and.w	r3, r3, #2
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d1e5      	bne.n	8013d3a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	f003 0304 	and.w	r3, r3, #4
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	f000 812d 	beq.w	8013fd6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8013d80:	4ba0      	ldr	r3, [pc, #640]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d10d      	bne.n	8013da8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013d8c:	4b9d      	ldr	r3, [pc, #628]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d90:	4a9c      	ldr	r2, [pc, #624]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d96:	6593      	str	r3, [r2, #88]	; 0x58
 8013d98:	4b9a      	ldr	r3, [pc, #616]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013da0:	60bb      	str	r3, [r7, #8]
 8013da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013da4:	2301      	movs	r3, #1
 8013da6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013da8:	4b97      	ldr	r3, [pc, #604]	; (8014008 <HAL_RCC_OscConfig+0x764>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d11e      	bne.n	8013df2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013db4:	4b94      	ldr	r3, [pc, #592]	; (8014008 <HAL_RCC_OscConfig+0x764>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4a93      	ldr	r2, [pc, #588]	; (8014008 <HAL_RCC_OscConfig+0x764>)
 8013dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013dc0:	f7fc fb5c 	bl	801047c <HAL_GetTick>
 8013dc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013dc6:	e00e      	b.n	8013de6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013dc8:	f7fc fb58 	bl	801047c <HAL_GetTick>
 8013dcc:	4602      	mov	r2, r0
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	1ad3      	subs	r3, r2, r3
 8013dd2:	2b02      	cmp	r3, #2
 8013dd4:	d907      	bls.n	8013de6 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013dd6:	4b8c      	ldr	r3, [pc, #560]	; (8014008 <HAL_RCC_OscConfig+0x764>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d101      	bne.n	8013de6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8013de2:	2303      	movs	r3, #3
 8013de4:	e22a      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013de6:	4b88      	ldr	r3, [pc, #544]	; (8014008 <HAL_RCC_OscConfig+0x764>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d0ea      	beq.n	8013dc8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	689b      	ldr	r3, [r3, #8]
 8013df6:	f003 0301 	and.w	r3, r3, #1
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d01f      	beq.n	8013e3e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	689b      	ldr	r3, [r3, #8]
 8013e02:	f003 0304 	and.w	r3, r3, #4
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d010      	beq.n	8013e2c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013e0a:	4b7e      	ldr	r3, [pc, #504]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e10:	4a7c      	ldr	r2, [pc, #496]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e12:	f043 0304 	orr.w	r3, r3, #4
 8013e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013e1a:	4b7a      	ldr	r3, [pc, #488]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e20:	4a78      	ldr	r2, [pc, #480]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e22:	f043 0301 	orr.w	r3, r3, #1
 8013e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013e2a:	e018      	b.n	8013e5e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013e2c:	4b75      	ldr	r3, [pc, #468]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e32:	4a74      	ldr	r2, [pc, #464]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e34:	f043 0301 	orr.w	r3, r3, #1
 8013e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013e3c:	e00f      	b.n	8013e5e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013e3e:	4b71      	ldr	r3, [pc, #452]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e44:	4a6f      	ldr	r2, [pc, #444]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e46:	f023 0301 	bic.w	r3, r3, #1
 8013e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013e4e:	4b6d      	ldr	r3, [pc, #436]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e54:	4a6b      	ldr	r2, [pc, #428]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e56:	f023 0304 	bic.w	r3, r3, #4
 8013e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d068      	beq.n	8013f38 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013e66:	f7fc fb09 	bl	801047c <HAL_GetTick>
 8013e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013e6c:	e011      	b.n	8013e92 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013e6e:	f7fc fb05 	bl	801047c <HAL_GetTick>
 8013e72:	4602      	mov	r2, r0
 8013e74:	693b      	ldr	r3, [r7, #16]
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e7c:	4293      	cmp	r3, r2
 8013e7e:	d908      	bls.n	8013e92 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013e80:	4b60      	ldr	r3, [pc, #384]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e86:	f003 0302 	and.w	r3, r3, #2
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d101      	bne.n	8013e92 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8013e8e:	2303      	movs	r3, #3
 8013e90:	e1d4      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013e92:	4b5c      	ldr	r3, [pc, #368]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e98:	f003 0302 	and.w	r3, r3, #2
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d0e6      	beq.n	8013e6e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	689b      	ldr	r3, [r3, #8]
 8013ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d022      	beq.n	8013ef2 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013eac:	4b55      	ldr	r3, [pc, #340]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013eb2:	4a54      	ldr	r2, [pc, #336]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8013ebc:	e011      	b.n	8013ee2 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013ebe:	f7fc fadd 	bl	801047c <HAL_GetTick>
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ecc:	4293      	cmp	r3, r2
 8013ece:	d908      	bls.n	8013ee2 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8013ed0:	4b4c      	ldr	r3, [pc, #304]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d101      	bne.n	8013ee2 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8013ede:	2303      	movs	r3, #3
 8013ee0:	e1ac      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8013ee2:	4b48      	ldr	r3, [pc, #288]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d0e6      	beq.n	8013ebe <HAL_RCC_OscConfig+0x61a>
 8013ef0:	e068      	b.n	8013fc4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013ef2:	4b44      	ldr	r3, [pc, #272]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ef8:	4a42      	ldr	r2, [pc, #264]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013f02:	e011      	b.n	8013f28 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013f04:	f7fc faba 	bl	801047c <HAL_GetTick>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	1ad3      	subs	r3, r2, r3
 8013f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f12:	4293      	cmp	r3, r2
 8013f14:	d908      	bls.n	8013f28 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013f16:	4b3b      	ldr	r3, [pc, #236]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d001      	beq.n	8013f28 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8013f24:	2303      	movs	r3, #3
 8013f26:	e189      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013f28:	4b36      	ldr	r3, [pc, #216]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d1e6      	bne.n	8013f04 <HAL_RCC_OscConfig+0x660>
 8013f36:	e045      	b.n	8013fc4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013f38:	f7fc faa0 	bl	801047c <HAL_GetTick>
 8013f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013f3e:	e011      	b.n	8013f64 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013f40:	f7fc fa9c 	bl	801047c <HAL_GetTick>
 8013f44:	4602      	mov	r2, r0
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	d908      	bls.n	8013f64 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013f52:	4b2c      	ldr	r3, [pc, #176]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f58:	f003 0302 	and.w	r3, r3, #2
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d001      	beq.n	8013f64 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8013f60:	2303      	movs	r3, #3
 8013f62:	e16b      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013f64:	4b27      	ldr	r3, [pc, #156]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f6a:	f003 0302 	and.w	r3, r3, #2
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d1e6      	bne.n	8013f40 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8013f72:	4b24      	ldr	r3, [pc, #144]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d021      	beq.n	8013fc4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013f80:	4b20      	ldr	r3, [pc, #128]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f86:	4a1f      	ldr	r2, [pc, #124]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013f90:	e011      	b.n	8013fb6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013f92:	f7fc fa73 	bl	801047c <HAL_GetTick>
 8013f96:	4602      	mov	r2, r0
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	1ad3      	subs	r3, r2, r3
 8013f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	d908      	bls.n	8013fb6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013fa4:	4b17      	ldr	r3, [pc, #92]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d001      	beq.n	8013fb6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8013fb2:	2303      	movs	r3, #3
 8013fb4:	e142      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013fb6:	4b13      	ldr	r3, [pc, #76]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d1e6      	bne.n	8013f92 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013fc4:	7ffb      	ldrb	r3, [r7, #31]
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d105      	bne.n	8013fd6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013fca:	4b0e      	ldr	r3, [pc, #56]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fce:	4a0d      	ldr	r2, [pc, #52]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f003 0320 	and.w	r3, r3, #32
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d04f      	beq.n	8014082 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d028      	beq.n	801403c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013fea:	4b06      	ldr	r3, [pc, #24]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013ff0:	4a04      	ldr	r2, [pc, #16]	; (8014004 <HAL_RCC_OscConfig+0x760>)
 8013ff2:	f043 0301 	orr.w	r3, r3, #1
 8013ff6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013ffa:	f7fc fa3f 	bl	801047c <HAL_GetTick>
 8013ffe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8014000:	e014      	b.n	801402c <HAL_RCC_OscConfig+0x788>
 8014002:	bf00      	nop
 8014004:	40021000 	.word	0x40021000
 8014008:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801400c:	f7fc fa36 	bl	801047c <HAL_GetTick>
 8014010:	4602      	mov	r2, r0
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	2b02      	cmp	r3, #2
 8014018:	d908      	bls.n	801402c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801401a:	4b8a      	ldr	r3, [pc, #552]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 801401c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014020:	f003 0302 	and.w	r3, r3, #2
 8014024:	2b00      	cmp	r3, #0
 8014026:	d101      	bne.n	801402c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8014028:	2303      	movs	r3, #3
 801402a:	e107      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801402c:	4b85      	ldr	r3, [pc, #532]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 801402e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014032:	f003 0302 	and.w	r3, r3, #2
 8014036:	2b00      	cmp	r3, #0
 8014038:	d0e8      	beq.n	801400c <HAL_RCC_OscConfig+0x768>
 801403a:	e022      	b.n	8014082 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801403c:	4b81      	ldr	r3, [pc, #516]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 801403e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014042:	4a80      	ldr	r2, [pc, #512]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014044:	f023 0301 	bic.w	r3, r3, #1
 8014048:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801404c:	f7fc fa16 	bl	801047c <HAL_GetTick>
 8014050:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014052:	e00f      	b.n	8014074 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014054:	f7fc fa12 	bl	801047c <HAL_GetTick>
 8014058:	4602      	mov	r2, r0
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	1ad3      	subs	r3, r2, r3
 801405e:	2b02      	cmp	r3, #2
 8014060:	d908      	bls.n	8014074 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014062:	4b78      	ldr	r3, [pc, #480]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014068:	f003 0302 	and.w	r3, r3, #2
 801406c:	2b00      	cmp	r3, #0
 801406e:	d001      	beq.n	8014074 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8014070:	2303      	movs	r3, #3
 8014072:	e0e3      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014074:	4b73      	ldr	r3, [pc, #460]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801407a:	f003 0302 	and.w	r3, r3, #2
 801407e:	2b00      	cmp	r3, #0
 8014080:	d1e8      	bne.n	8014054 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014086:	2b00      	cmp	r3, #0
 8014088:	f000 80d7 	beq.w	801423a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801408c:	4b6d      	ldr	r3, [pc, #436]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 801408e:	689b      	ldr	r3, [r3, #8]
 8014090:	f003 030c 	and.w	r3, r3, #12
 8014094:	2b0c      	cmp	r3, #12
 8014096:	f000 8091 	beq.w	80141bc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409e:	2b02      	cmp	r3, #2
 80140a0:	d166      	bne.n	8014170 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80140a2:	4b68      	ldr	r3, [pc, #416]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	4a67      	ldr	r2, [pc, #412]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80140a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80140ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80140ae:	f7fc f9e5 	bl	801047c <HAL_GetTick>
 80140b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80140b4:	e00e      	b.n	80140d4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80140b6:	f7fc f9e1 	bl	801047c <HAL_GetTick>
 80140ba:	4602      	mov	r2, r0
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	1ad3      	subs	r3, r2, r3
 80140c0:	2b02      	cmp	r3, #2
 80140c2:	d907      	bls.n	80140d4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80140c4:	4b5f      	ldr	r3, [pc, #380]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d001      	beq.n	80140d4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80140d0:	2303      	movs	r3, #3
 80140d2:	e0b3      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80140d4:	4b5b      	ldr	r3, [pc, #364]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d1ea      	bne.n	80140b6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80140e0:	4b58      	ldr	r3, [pc, #352]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80140e2:	68da      	ldr	r2, [r3, #12]
 80140e4:	4b58      	ldr	r3, [pc, #352]	; (8014248 <HAL_RCC_OscConfig+0x9a4>)
 80140e6:	4013      	ands	r3, r2
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80140ec:	687a      	ldr	r2, [r7, #4]
 80140ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80140f0:	3a01      	subs	r2, #1
 80140f2:	0112      	lsls	r2, r2, #4
 80140f4:	4311      	orrs	r1, r2
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80140fa:	0212      	lsls	r2, r2, #8
 80140fc:	4311      	orrs	r1, r2
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014102:	0852      	lsrs	r2, r2, #1
 8014104:	3a01      	subs	r2, #1
 8014106:	0552      	lsls	r2, r2, #21
 8014108:	4311      	orrs	r1, r2
 801410a:	687a      	ldr	r2, [r7, #4]
 801410c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801410e:	0852      	lsrs	r2, r2, #1
 8014110:	3a01      	subs	r2, #1
 8014112:	0652      	lsls	r2, r2, #25
 8014114:	4311      	orrs	r1, r2
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801411a:	06d2      	lsls	r2, r2, #27
 801411c:	430a      	orrs	r2, r1
 801411e:	4949      	ldr	r1, [pc, #292]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014120:	4313      	orrs	r3, r2
 8014122:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014124:	4b47      	ldr	r3, [pc, #284]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	4a46      	ldr	r2, [pc, #280]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 801412a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801412e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014130:	4b44      	ldr	r3, [pc, #272]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	4a43      	ldr	r2, [pc, #268]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801413a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801413c:	f7fc f99e 	bl	801047c <HAL_GetTick>
 8014140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014142:	e00e      	b.n	8014162 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014144:	f7fc f99a 	bl	801047c <HAL_GetTick>
 8014148:	4602      	mov	r2, r0
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	1ad3      	subs	r3, r2, r3
 801414e:	2b02      	cmp	r3, #2
 8014150:	d907      	bls.n	8014162 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014152:	4b3c      	ldr	r3, [pc, #240]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801415a:	2b00      	cmp	r3, #0
 801415c:	d101      	bne.n	8014162 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 801415e:	2303      	movs	r3, #3
 8014160:	e06c      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014162:	4b38      	ldr	r3, [pc, #224]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801416a:	2b00      	cmp	r3, #0
 801416c:	d0ea      	beq.n	8014144 <HAL_RCC_OscConfig+0x8a0>
 801416e:	e064      	b.n	801423a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014170:	4b34      	ldr	r3, [pc, #208]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	4a33      	ldr	r2, [pc, #204]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801417a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801417c:	f7fc f97e 	bl	801047c <HAL_GetTick>
 8014180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014182:	e00e      	b.n	80141a2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014184:	f7fc f97a 	bl	801047c <HAL_GetTick>
 8014188:	4602      	mov	r2, r0
 801418a:	693b      	ldr	r3, [r7, #16]
 801418c:	1ad3      	subs	r3, r2, r3
 801418e:	2b02      	cmp	r3, #2
 8014190:	d907      	bls.n	80141a2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014192:	4b2c      	ldr	r3, [pc, #176]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801419a:	2b00      	cmp	r3, #0
 801419c:	d001      	beq.n	80141a2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 801419e:	2303      	movs	r3, #3
 80141a0:	e04c      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80141a2:	4b28      	ldr	r3, [pc, #160]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d1ea      	bne.n	8014184 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80141ae:	4b25      	ldr	r3, [pc, #148]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80141b0:	68da      	ldr	r2, [r3, #12]
 80141b2:	4924      	ldr	r1, [pc, #144]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80141b4:	4b25      	ldr	r3, [pc, #148]	; (801424c <HAL_RCC_OscConfig+0x9a8>)
 80141b6:	4013      	ands	r3, r2
 80141b8:	60cb      	str	r3, [r1, #12]
 80141ba:	e03e      	b.n	801423a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d101      	bne.n	80141c8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80141c4:	2301      	movs	r3, #1
 80141c6:	e039      	b.n	801423c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80141c8:	4b1e      	ldr	r3, [pc, #120]	; (8014244 <HAL_RCC_OscConfig+0x9a0>)
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	f003 0203 	and.w	r2, r3, #3
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141d8:	429a      	cmp	r2, r3
 80141da:	d12c      	bne.n	8014236 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141e6:	3b01      	subs	r3, #1
 80141e8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d123      	bne.n	8014236 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141f8:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d11b      	bne.n	8014236 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014208:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801420a:	429a      	cmp	r2, r3
 801420c:	d113      	bne.n	8014236 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014218:	085b      	lsrs	r3, r3, #1
 801421a:	3b01      	subs	r3, #1
 801421c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801421e:	429a      	cmp	r2, r3
 8014220:	d109      	bne.n	8014236 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8014222:	697b      	ldr	r3, [r7, #20]
 8014224:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801422c:	085b      	lsrs	r3, r3, #1
 801422e:	3b01      	subs	r3, #1
 8014230:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014232:	429a      	cmp	r2, r3
 8014234:	d001      	beq.n	801423a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8014236:	2301      	movs	r3, #1
 8014238:	e000      	b.n	801423c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 801423a:	2300      	movs	r3, #0
}
 801423c:	4618      	mov	r0, r3
 801423e:	3720      	adds	r7, #32
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	40021000 	.word	0x40021000
 8014248:	019f800c 	.word	0x019f800c
 801424c:	feeefffc 	.word	0xfeeefffc

08014250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b086      	sub	sp, #24
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801425a:	2300      	movs	r3, #0
 801425c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d101      	bne.n	8014268 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8014264:	2301      	movs	r3, #1
 8014266:	e11c      	b.n	80144a2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014268:	4b90      	ldr	r3, [pc, #576]	; (80144ac <HAL_RCC_ClockConfig+0x25c>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f003 030f 	and.w	r3, r3, #15
 8014270:	683a      	ldr	r2, [r7, #0]
 8014272:	429a      	cmp	r2, r3
 8014274:	d910      	bls.n	8014298 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014276:	4b8d      	ldr	r3, [pc, #564]	; (80144ac <HAL_RCC_ClockConfig+0x25c>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	f023 020f 	bic.w	r2, r3, #15
 801427e:	498b      	ldr	r1, [pc, #556]	; (80144ac <HAL_RCC_ClockConfig+0x25c>)
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	4313      	orrs	r3, r2
 8014284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014286:	4b89      	ldr	r3, [pc, #548]	; (80144ac <HAL_RCC_ClockConfig+0x25c>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	f003 030f 	and.w	r3, r3, #15
 801428e:	683a      	ldr	r2, [r7, #0]
 8014290:	429a      	cmp	r2, r3
 8014292:	d001      	beq.n	8014298 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8014294:	2301      	movs	r3, #1
 8014296:	e104      	b.n	80144a2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f003 0302 	and.w	r3, r3, #2
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d010      	beq.n	80142c6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	689a      	ldr	r2, [r3, #8]
 80142a8:	4b81      	ldr	r3, [pc, #516]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d908      	bls.n	80142c6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80142b4:	4b7e      	ldr	r3, [pc, #504]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80142b6:	689b      	ldr	r3, [r3, #8]
 80142b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	689b      	ldr	r3, [r3, #8]
 80142c0:	497b      	ldr	r1, [pc, #492]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80142c2:	4313      	orrs	r3, r2
 80142c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	f003 0301 	and.w	r3, r3, #1
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	f000 8085 	beq.w	80143de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	2b03      	cmp	r3, #3
 80142da:	d11f      	bne.n	801431c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80142dc:	4b74      	ldr	r3, [pc, #464]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d101      	bne.n	80142ec <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80142e8:	2301      	movs	r3, #1
 80142ea:	e0da      	b.n	80144a2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80142ec:	f000 fa58 	bl	80147a0 <RCC_GetSysClockFreqFromPLLSource>
 80142f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80142f2:	693b      	ldr	r3, [r7, #16]
 80142f4:	4a6f      	ldr	r2, [pc, #444]	; (80144b4 <HAL_RCC_ClockConfig+0x264>)
 80142f6:	4293      	cmp	r3, r2
 80142f8:	d947      	bls.n	801438a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80142fa:	4b6d      	ldr	r3, [pc, #436]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80142fc:	689b      	ldr	r3, [r3, #8]
 80142fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014302:	2b00      	cmp	r3, #0
 8014304:	d141      	bne.n	801438a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8014306:	4b6a      	ldr	r3, [pc, #424]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014308:	689b      	ldr	r3, [r3, #8]
 801430a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801430e:	4a68      	ldr	r2, [pc, #416]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014314:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8014316:	2380      	movs	r3, #128	; 0x80
 8014318:	617b      	str	r3, [r7, #20]
 801431a:	e036      	b.n	801438a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	2b02      	cmp	r3, #2
 8014322:	d107      	bne.n	8014334 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014324:	4b62      	ldr	r3, [pc, #392]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801432c:	2b00      	cmp	r3, #0
 801432e:	d115      	bne.n	801435c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8014330:	2301      	movs	r3, #1
 8014332:	e0b6      	b.n	80144a2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d107      	bne.n	801434c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801433c:	4b5c      	ldr	r3, [pc, #368]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	f003 0302 	and.w	r3, r3, #2
 8014344:	2b00      	cmp	r3, #0
 8014346:	d109      	bne.n	801435c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8014348:	2301      	movs	r3, #1
 801434a:	e0aa      	b.n	80144a2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801434c:	4b58      	ldr	r3, [pc, #352]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014354:	2b00      	cmp	r3, #0
 8014356:	d101      	bne.n	801435c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8014358:	2301      	movs	r3, #1
 801435a:	e0a2      	b.n	80144a2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801435c:	f000 f8b0 	bl	80144c0 <HAL_RCC_GetSysClockFreq>
 8014360:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	4a53      	ldr	r2, [pc, #332]	; (80144b4 <HAL_RCC_ClockConfig+0x264>)
 8014366:	4293      	cmp	r3, r2
 8014368:	d90f      	bls.n	801438a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 801436a:	4b51      	ldr	r3, [pc, #324]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 801436c:	689b      	ldr	r3, [r3, #8]
 801436e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014372:	2b00      	cmp	r3, #0
 8014374:	d109      	bne.n	801438a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8014376:	4b4e      	ldr	r3, [pc, #312]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014378:	689b      	ldr	r3, [r3, #8]
 801437a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801437e:	4a4c      	ldr	r2, [pc, #304]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014384:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8014386:	2380      	movs	r3, #128	; 0x80
 8014388:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801438a:	4b49      	ldr	r3, [pc, #292]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 801438c:	689b      	ldr	r3, [r3, #8]
 801438e:	f023 0203 	bic.w	r2, r3, #3
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	4946      	ldr	r1, [pc, #280]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014398:	4313      	orrs	r3, r2
 801439a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801439c:	f7fc f86e 	bl	801047c <HAL_GetTick>
 80143a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80143a2:	e013      	b.n	80143cc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80143a4:	f7fc f86a 	bl	801047c <HAL_GetTick>
 80143a8:	4602      	mov	r2, r0
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	1ad3      	subs	r3, r2, r3
 80143ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d90a      	bls.n	80143cc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80143b6:	4b3e      	ldr	r3, [pc, #248]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80143b8:	689b      	ldr	r3, [r3, #8]
 80143ba:	f003 020c 	and.w	r2, r3, #12
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d001      	beq.n	80143cc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80143c8:	2303      	movs	r3, #3
 80143ca:	e06a      	b.n	80144a2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80143cc:	4b38      	ldr	r3, [pc, #224]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80143ce:	689b      	ldr	r3, [r3, #8]
 80143d0:	f003 020c 	and.w	r2, r3, #12
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	009b      	lsls	r3, r3, #2
 80143da:	429a      	cmp	r2, r3
 80143dc:	d1e2      	bne.n	80143a4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	2b80      	cmp	r3, #128	; 0x80
 80143e2:	d105      	bne.n	80143f0 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80143e4:	4b32      	ldr	r3, [pc, #200]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80143e6:	689b      	ldr	r3, [r3, #8]
 80143e8:	4a31      	ldr	r2, [pc, #196]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 80143ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80143ee:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f003 0302 	and.w	r3, r3, #2
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d010      	beq.n	801441e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	689a      	ldr	r2, [r3, #8]
 8014400:	4b2b      	ldr	r3, [pc, #172]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014402:	689b      	ldr	r3, [r3, #8]
 8014404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014408:	429a      	cmp	r2, r3
 801440a:	d208      	bcs.n	801441e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801440c:	4b28      	ldr	r3, [pc, #160]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 801440e:	689b      	ldr	r3, [r3, #8]
 8014410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	689b      	ldr	r3, [r3, #8]
 8014418:	4925      	ldr	r1, [pc, #148]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 801441a:	4313      	orrs	r3, r2
 801441c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801441e:	4b23      	ldr	r3, [pc, #140]	; (80144ac <HAL_RCC_ClockConfig+0x25c>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	f003 030f 	and.w	r3, r3, #15
 8014426:	683a      	ldr	r2, [r7, #0]
 8014428:	429a      	cmp	r2, r3
 801442a:	d210      	bcs.n	801444e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801442c:	4b1f      	ldr	r3, [pc, #124]	; (80144ac <HAL_RCC_ClockConfig+0x25c>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	f023 020f 	bic.w	r2, r3, #15
 8014434:	491d      	ldr	r1, [pc, #116]	; (80144ac <HAL_RCC_ClockConfig+0x25c>)
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	4313      	orrs	r3, r2
 801443a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801443c:	4b1b      	ldr	r3, [pc, #108]	; (80144ac <HAL_RCC_ClockConfig+0x25c>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	f003 030f 	and.w	r3, r3, #15
 8014444:	683a      	ldr	r2, [r7, #0]
 8014446:	429a      	cmp	r2, r3
 8014448:	d001      	beq.n	801444e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 801444a:	2301      	movs	r3, #1
 801444c:	e029      	b.n	80144a2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	f003 0304 	and.w	r3, r3, #4
 8014456:	2b00      	cmp	r3, #0
 8014458:	d008      	beq.n	801446c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801445a:	4b15      	ldr	r3, [pc, #84]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 801445c:	689b      	ldr	r3, [r3, #8]
 801445e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	68db      	ldr	r3, [r3, #12]
 8014466:	4912      	ldr	r1, [pc, #72]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014468:	4313      	orrs	r3, r2
 801446a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	f003 0308 	and.w	r3, r3, #8
 8014474:	2b00      	cmp	r3, #0
 8014476:	d009      	beq.n	801448c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014478:	4b0d      	ldr	r3, [pc, #52]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 801447a:	689b      	ldr	r3, [r3, #8]
 801447c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	691b      	ldr	r3, [r3, #16]
 8014484:	00db      	lsls	r3, r3, #3
 8014486:	490a      	ldr	r1, [pc, #40]	; (80144b0 <HAL_RCC_ClockConfig+0x260>)
 8014488:	4313      	orrs	r3, r2
 801448a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801448c:	f000 f8b6 	bl	80145fc <HAL_RCC_GetHCLKFreq>
 8014490:	4603      	mov	r3, r0
 8014492:	4a09      	ldr	r2, [pc, #36]	; (80144b8 <HAL_RCC_ClockConfig+0x268>)
 8014494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8014496:	4b09      	ldr	r3, [pc, #36]	; (80144bc <HAL_RCC_ClockConfig+0x26c>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	4618      	mov	r0, r3
 801449c:	f7fb fd46 	bl	800ff2c <HAL_InitTick>
 80144a0:	4603      	mov	r3, r0
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3718      	adds	r7, #24
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	40022000 	.word	0x40022000
 80144b0:	40021000 	.word	0x40021000
 80144b4:	04c4b400 	.word	0x04c4b400
 80144b8:	20000090 	.word	0x20000090
 80144bc:	20000094 	.word	0x20000094

080144c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80144c0:	b480      	push	{r7}
 80144c2:	b089      	sub	sp, #36	; 0x24
 80144c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80144c6:	2300      	movs	r3, #0
 80144c8:	61fb      	str	r3, [r7, #28]
 80144ca:	2300      	movs	r3, #0
 80144cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80144ce:	4b47      	ldr	r3, [pc, #284]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80144d0:	689b      	ldr	r3, [r3, #8]
 80144d2:	f003 030c 	and.w	r3, r3, #12
 80144d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80144d8:	4b44      	ldr	r3, [pc, #272]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	f003 0303 	and.w	r3, r3, #3
 80144e0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d005      	beq.n	80144f4 <HAL_RCC_GetSysClockFreq+0x34>
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	2b0c      	cmp	r3, #12
 80144ec:	d121      	bne.n	8014532 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	d11e      	bne.n	8014532 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80144f4:	4b3d      	ldr	r3, [pc, #244]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f003 0308 	and.w	r3, r3, #8
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d107      	bne.n	8014510 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8014500:	4b3a      	ldr	r3, [pc, #232]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 8014502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014506:	0a1b      	lsrs	r3, r3, #8
 8014508:	f003 030f 	and.w	r3, r3, #15
 801450c:	61fb      	str	r3, [r7, #28]
 801450e:	e005      	b.n	801451c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8014510:	4b36      	ldr	r3, [pc, #216]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	091b      	lsrs	r3, r3, #4
 8014516:	f003 030f 	and.w	r3, r3, #15
 801451a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 801451c:	4a34      	ldr	r2, [pc, #208]	; (80145f0 <HAL_RCC_GetSysClockFreq+0x130>)
 801451e:	69fb      	ldr	r3, [r7, #28]
 8014520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014524:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d10d      	bne.n	8014548 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014530:	e00a      	b.n	8014548 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	2b04      	cmp	r3, #4
 8014536:	d102      	bne.n	801453e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014538:	4b2e      	ldr	r3, [pc, #184]	; (80145f4 <HAL_RCC_GetSysClockFreq+0x134>)
 801453a:	61bb      	str	r3, [r7, #24]
 801453c:	e004      	b.n	8014548 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	2b08      	cmp	r3, #8
 8014542:	d101      	bne.n	8014548 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8014544:	4b2c      	ldr	r3, [pc, #176]	; (80145f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8014546:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	2b0c      	cmp	r3, #12
 801454c:	d146      	bne.n	80145dc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801454e:	4b27      	ldr	r3, [pc, #156]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 8014550:	68db      	ldr	r3, [r3, #12]
 8014552:	f003 0303 	and.w	r3, r3, #3
 8014556:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014558:	4b24      	ldr	r3, [pc, #144]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	091b      	lsrs	r3, r3, #4
 801455e:	f003 030f 	and.w	r3, r3, #15
 8014562:	3301      	adds	r3, #1
 8014564:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	2b02      	cmp	r3, #2
 801456a:	d003      	beq.n	8014574 <HAL_RCC_GetSysClockFreq+0xb4>
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	2b03      	cmp	r3, #3
 8014570:	d00d      	beq.n	801458e <HAL_RCC_GetSysClockFreq+0xce>
 8014572:	e019      	b.n	80145a8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8014574:	4a1f      	ldr	r2, [pc, #124]	; (80145f4 <HAL_RCC_GetSysClockFreq+0x134>)
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	fbb2 f3f3 	udiv	r3, r2, r3
 801457c:	4a1b      	ldr	r2, [pc, #108]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 801457e:	68d2      	ldr	r2, [r2, #12]
 8014580:	0a12      	lsrs	r2, r2, #8
 8014582:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014586:	fb02 f303 	mul.w	r3, r2, r3
 801458a:	617b      	str	r3, [r7, #20]
        break;
 801458c:	e019      	b.n	80145c2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801458e:	4a1a      	ldr	r2, [pc, #104]	; (80145f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	fbb2 f3f3 	udiv	r3, r2, r3
 8014596:	4a15      	ldr	r2, [pc, #84]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 8014598:	68d2      	ldr	r2, [r2, #12]
 801459a:	0a12      	lsrs	r2, r2, #8
 801459c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80145a0:	fb02 f303 	mul.w	r3, r2, r3
 80145a4:	617b      	str	r3, [r7, #20]
        break;
 80145a6:	e00c      	b.n	80145c2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80145a8:	69fa      	ldr	r2, [r7, #28]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80145b0:	4a0e      	ldr	r2, [pc, #56]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80145b2:	68d2      	ldr	r2, [r2, #12]
 80145b4:	0a12      	lsrs	r2, r2, #8
 80145b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80145ba:	fb02 f303 	mul.w	r3, r2, r3
 80145be:	617b      	str	r3, [r7, #20]
        break;
 80145c0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80145c2:	4b0a      	ldr	r3, [pc, #40]	; (80145ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80145c4:	68db      	ldr	r3, [r3, #12]
 80145c6:	0e5b      	lsrs	r3, r3, #25
 80145c8:	f003 0303 	and.w	r3, r3, #3
 80145cc:	3301      	adds	r3, #1
 80145ce:	005b      	lsls	r3, r3, #1
 80145d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80145d2:	697a      	ldr	r2, [r7, #20]
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80145da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80145dc:	69bb      	ldr	r3, [r7, #24]
}
 80145de:	4618      	mov	r0, r3
 80145e0:	3724      	adds	r7, #36	; 0x24
 80145e2:	46bd      	mov	sp, r7
 80145e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e8:	4770      	bx	lr
 80145ea:	bf00      	nop
 80145ec:	40021000 	.word	0x40021000
 80145f0:	08021e1c 	.word	0x08021e1c
 80145f4:	00f42400 	.word	0x00f42400
 80145f8:	007a1200 	.word	0x007a1200

080145fc <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8014600:	f7ff ff5e 	bl	80144c0 <HAL_RCC_GetSysClockFreq>
 8014604:	4602      	mov	r2, r0
 8014606:	4b05      	ldr	r3, [pc, #20]	; (801461c <HAL_RCC_GetHCLKFreq+0x20>)
 8014608:	689b      	ldr	r3, [r3, #8]
 801460a:	091b      	lsrs	r3, r3, #4
 801460c:	f003 030f 	and.w	r3, r3, #15
 8014610:	4903      	ldr	r1, [pc, #12]	; (8014620 <HAL_RCC_GetHCLKFreq+0x24>)
 8014612:	5ccb      	ldrb	r3, [r1, r3]
 8014614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014618:	4618      	mov	r0, r3
 801461a:	bd80      	pop	{r7, pc}
 801461c:	40021000 	.word	0x40021000
 8014620:	08021e04 	.word	0x08021e04

08014624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014628:	f7ff ffe8 	bl	80145fc <HAL_RCC_GetHCLKFreq>
 801462c:	4602      	mov	r2, r0
 801462e:	4b05      	ldr	r3, [pc, #20]	; (8014644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014630:	689b      	ldr	r3, [r3, #8]
 8014632:	0a1b      	lsrs	r3, r3, #8
 8014634:	f003 0307 	and.w	r3, r3, #7
 8014638:	4903      	ldr	r1, [pc, #12]	; (8014648 <HAL_RCC_GetPCLK1Freq+0x24>)
 801463a:	5ccb      	ldrb	r3, [r1, r3]
 801463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014640:	4618      	mov	r0, r3
 8014642:	bd80      	pop	{r7, pc}
 8014644:	40021000 	.word	0x40021000
 8014648:	08021e14 	.word	0x08021e14

0801464c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8014650:	f7ff ffd4 	bl	80145fc <HAL_RCC_GetHCLKFreq>
 8014654:	4602      	mov	r2, r0
 8014656:	4b05      	ldr	r3, [pc, #20]	; (801466c <HAL_RCC_GetPCLK2Freq+0x20>)
 8014658:	689b      	ldr	r3, [r3, #8]
 801465a:	0adb      	lsrs	r3, r3, #11
 801465c:	f003 0307 	and.w	r3, r3, #7
 8014660:	4903      	ldr	r1, [pc, #12]	; (8014670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014662:	5ccb      	ldrb	r3, [r1, r3]
 8014664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014668:	4618      	mov	r0, r3
 801466a:	bd80      	pop	{r7, pc}
 801466c:	40021000 	.word	0x40021000
 8014670:	08021e14 	.word	0x08021e14

08014674 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014674:	b480      	push	{r7}
 8014676:	b083      	sub	sp, #12
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	220f      	movs	r2, #15
 8014682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014684:	4b12      	ldr	r3, [pc, #72]	; (80146d0 <HAL_RCC_GetClockConfig+0x5c>)
 8014686:	689b      	ldr	r3, [r3, #8]
 8014688:	f003 0203 	and.w	r2, r3, #3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8014690:	4b0f      	ldr	r3, [pc, #60]	; (80146d0 <HAL_RCC_GetClockConfig+0x5c>)
 8014692:	689b      	ldr	r3, [r3, #8]
 8014694:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801469c:	4b0c      	ldr	r3, [pc, #48]	; (80146d0 <HAL_RCC_GetClockConfig+0x5c>)
 801469e:	689b      	ldr	r3, [r3, #8]
 80146a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80146a8:	4b09      	ldr	r3, [pc, #36]	; (80146d0 <HAL_RCC_GetClockConfig+0x5c>)
 80146aa:	689b      	ldr	r3, [r3, #8]
 80146ac:	08db      	lsrs	r3, r3, #3
 80146ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80146b6:	4b07      	ldr	r3, [pc, #28]	; (80146d4 <HAL_RCC_GetClockConfig+0x60>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	f003 020f 	and.w	r2, r3, #15
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	601a      	str	r2, [r3, #0]
}
 80146c2:	bf00      	nop
 80146c4:	370c      	adds	r7, #12
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr
 80146ce:	bf00      	nop
 80146d0:	40021000 	.word	0x40021000
 80146d4:	40022000 	.word	0x40022000

080146d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b086      	sub	sp, #24
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80146e0:	2300      	movs	r3, #0
 80146e2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80146e4:	4b2c      	ldr	r3, [pc, #176]	; (8014798 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80146e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d003      	beq.n	80146f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80146f0:	f7ff f83a 	bl	8013768 <HAL_PWREx_GetVoltageRange>
 80146f4:	6138      	str	r0, [r7, #16]
 80146f6:	e014      	b.n	8014722 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80146f8:	4b27      	ldr	r3, [pc, #156]	; (8014798 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80146fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146fc:	4a26      	ldr	r2, [pc, #152]	; (8014798 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80146fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014702:	6593      	str	r3, [r2, #88]	; 0x58
 8014704:	4b24      	ldr	r3, [pc, #144]	; (8014798 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8014706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801470c:	60fb      	str	r3, [r7, #12]
 801470e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8014710:	f7ff f82a 	bl	8013768 <HAL_PWREx_GetVoltageRange>
 8014714:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8014716:	4b20      	ldr	r3, [pc, #128]	; (8014798 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8014718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801471a:	4a1f      	ldr	r2, [pc, #124]	; (8014798 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801471c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014720:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d003      	beq.n	8014730 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801472e:	d10b      	bne.n	8014748 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2b80      	cmp	r3, #128	; 0x80
 8014734:	d919      	bls.n	801476a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2ba0      	cmp	r3, #160	; 0xa0
 801473a:	d902      	bls.n	8014742 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801473c:	2302      	movs	r3, #2
 801473e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8014740:	e013      	b.n	801476a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014742:	2301      	movs	r3, #1
 8014744:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8014746:	e010      	b.n	801476a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2b80      	cmp	r3, #128	; 0x80
 801474c:	d902      	bls.n	8014754 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801474e:	2303      	movs	r3, #3
 8014750:	617b      	str	r3, [r7, #20]
 8014752:	e00a      	b.n	801476a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2b80      	cmp	r3, #128	; 0x80
 8014758:	d102      	bne.n	8014760 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801475a:	2302      	movs	r3, #2
 801475c:	617b      	str	r3, [r7, #20]
 801475e:	e004      	b.n	801476a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b70      	cmp	r3, #112	; 0x70
 8014764:	d101      	bne.n	801476a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014766:	2301      	movs	r3, #1
 8014768:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801476a:	4b0c      	ldr	r3, [pc, #48]	; (801479c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	f023 020f 	bic.w	r2, r3, #15
 8014772:	490a      	ldr	r1, [pc, #40]	; (801479c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	4313      	orrs	r3, r2
 8014778:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801477a:	4b08      	ldr	r3, [pc, #32]	; (801479c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	f003 030f 	and.w	r3, r3, #15
 8014782:	697a      	ldr	r2, [r7, #20]
 8014784:	429a      	cmp	r2, r3
 8014786:	d001      	beq.n	801478c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8014788:	2301      	movs	r3, #1
 801478a:	e000      	b.n	801478e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 801478c:	2300      	movs	r3, #0
}
 801478e:	4618      	mov	r0, r3
 8014790:	3718      	adds	r7, #24
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
 8014796:	bf00      	nop
 8014798:	40021000 	.word	0x40021000
 801479c:	40022000 	.word	0x40022000

080147a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80147a0:	b480      	push	{r7}
 80147a2:	b087      	sub	sp, #28
 80147a4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80147a6:	4b31      	ldr	r3, [pc, #196]	; (801486c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80147a8:	68db      	ldr	r3, [r3, #12]
 80147aa:	f003 0303 	and.w	r3, r3, #3
 80147ae:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80147b0:	4b2e      	ldr	r3, [pc, #184]	; (801486c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80147b2:	68db      	ldr	r3, [r3, #12]
 80147b4:	091b      	lsrs	r3, r3, #4
 80147b6:	f003 030f 	and.w	r3, r3, #15
 80147ba:	3301      	adds	r3, #1
 80147bc:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	2b03      	cmp	r3, #3
 80147c2:	d015      	beq.n	80147f0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2b03      	cmp	r3, #3
 80147c8:	d839      	bhi.n	801483e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2b01      	cmp	r3, #1
 80147ce:	d01c      	beq.n	801480a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2b02      	cmp	r3, #2
 80147d4:	d133      	bne.n	801483e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80147d6:	4a26      	ldr	r2, [pc, #152]	; (8014870 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	fbb2 f3f3 	udiv	r3, r2, r3
 80147de:	4a23      	ldr	r2, [pc, #140]	; (801486c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80147e0:	68d2      	ldr	r2, [r2, #12]
 80147e2:	0a12      	lsrs	r2, r2, #8
 80147e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80147e8:	fb02 f303 	mul.w	r3, r2, r3
 80147ec:	613b      	str	r3, [r7, #16]
      break;
 80147ee:	e029      	b.n	8014844 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80147f0:	4a20      	ldr	r2, [pc, #128]	; (8014874 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80147f8:	4a1c      	ldr	r2, [pc, #112]	; (801486c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80147fa:	68d2      	ldr	r2, [r2, #12]
 80147fc:	0a12      	lsrs	r2, r2, #8
 80147fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014802:	fb02 f303 	mul.w	r3, r2, r3
 8014806:	613b      	str	r3, [r7, #16]
      break;
 8014808:	e01c      	b.n	8014844 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801480a:	4b18      	ldr	r3, [pc, #96]	; (801486c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	f003 0308 	and.w	r3, r3, #8
 8014812:	2b00      	cmp	r3, #0
 8014814:	d107      	bne.n	8014826 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8014816:	4b15      	ldr	r3, [pc, #84]	; (801486c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8014818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801481c:	0a1b      	lsrs	r3, r3, #8
 801481e:	f003 030f 	and.w	r3, r3, #15
 8014822:	617b      	str	r3, [r7, #20]
 8014824:	e005      	b.n	8014832 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8014826:	4b11      	ldr	r3, [pc, #68]	; (801486c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	091b      	lsrs	r3, r3, #4
 801482c:	f003 030f 	and.w	r3, r3, #15
 8014830:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8014832:	4a11      	ldr	r2, [pc, #68]	; (8014878 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801483a:	613b      	str	r3, [r7, #16]
        break;
 801483c:	e002      	b.n	8014844 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 801483e:	2300      	movs	r3, #0
 8014840:	613b      	str	r3, [r7, #16]
      break;
 8014842:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8014844:	4b09      	ldr	r3, [pc, #36]	; (801486c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	0e5b      	lsrs	r3, r3, #25
 801484a:	f003 0303 	and.w	r3, r3, #3
 801484e:	3301      	adds	r3, #1
 8014850:	005b      	lsls	r3, r3, #1
 8014852:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8014854:	693a      	ldr	r2, [r7, #16]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	fbb2 f3f3 	udiv	r3, r2, r3
 801485c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 801485e:	683b      	ldr	r3, [r7, #0]
}
 8014860:	4618      	mov	r0, r3
 8014862:	371c      	adds	r7, #28
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr
 801486c:	40021000 	.word	0x40021000
 8014870:	00f42400 	.word	0x00f42400
 8014874:	007a1200 	.word	0x007a1200
 8014878:	08021e1c 	.word	0x08021e1c

0801487c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b088      	sub	sp, #32
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8014884:	2300      	movs	r3, #0
 8014886:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8014888:	2300      	movs	r3, #0
 801488a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014894:	2b00      	cmp	r3, #0
 8014896:	d040      	beq.n	801491a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801489c:	2b80      	cmp	r3, #128	; 0x80
 801489e:	d02a      	beq.n	80148f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80148a0:	2b80      	cmp	r3, #128	; 0x80
 80148a2:	d825      	bhi.n	80148f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80148a4:	2b60      	cmp	r3, #96	; 0x60
 80148a6:	d026      	beq.n	80148f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80148a8:	2b60      	cmp	r3, #96	; 0x60
 80148aa:	d821      	bhi.n	80148f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80148ac:	2b40      	cmp	r3, #64	; 0x40
 80148ae:	d006      	beq.n	80148be <HAL_RCCEx_PeriphCLKConfig+0x42>
 80148b0:	2b40      	cmp	r3, #64	; 0x40
 80148b2:	d81d      	bhi.n	80148f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d009      	beq.n	80148cc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80148b8:	2b20      	cmp	r3, #32
 80148ba:	d010      	beq.n	80148de <HAL_RCCEx_PeriphCLKConfig+0x62>
 80148bc:	e018      	b.n	80148f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80148be:	4b8f      	ldr	r3, [pc, #572]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80148c0:	68db      	ldr	r3, [r3, #12]
 80148c2:	4a8e      	ldr	r2, [pc, #568]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80148c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80148c8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80148ca:	e015      	b.n	80148f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	3304      	adds	r3, #4
 80148d0:	2100      	movs	r1, #0
 80148d2:	4618      	mov	r0, r3
 80148d4:	f000 fb56 	bl	8014f84 <RCCEx_PLLSAI1_Config>
 80148d8:	4603      	mov	r3, r0
 80148da:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80148dc:	e00c      	b.n	80148f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	3320      	adds	r3, #32
 80148e2:	2100      	movs	r1, #0
 80148e4:	4618      	mov	r0, r3
 80148e6:	f000 fc33 	bl	8015150 <RCCEx_PLLSAI2_Config>
 80148ea:	4603      	mov	r3, r0
 80148ec:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80148ee:	e003      	b.n	80148f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80148f0:	2301      	movs	r3, #1
 80148f2:	77fb      	strb	r3, [r7, #31]
        break;
 80148f4:	e000      	b.n	80148f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80148f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80148f8:	7ffb      	ldrb	r3, [r7, #31]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d10b      	bne.n	8014916 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80148fe:	4b7f      	ldr	r3, [pc, #508]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014900:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014904:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801490c:	497b      	ldr	r1, [pc, #492]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801490e:	4313      	orrs	r3, r2
 8014910:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8014914:	e001      	b.n	801491a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014916:	7ffb      	ldrb	r3, [r7, #31]
 8014918:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014922:	2b00      	cmp	r3, #0
 8014924:	d047      	beq.n	80149b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801492a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801492e:	d030      	beq.n	8014992 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8014930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014934:	d82a      	bhi.n	801498c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8014936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801493a:	d02a      	beq.n	8014992 <HAL_RCCEx_PeriphCLKConfig+0x116>
 801493c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014940:	d824      	bhi.n	801498c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8014942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014946:	d008      	beq.n	801495a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8014948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801494c:	d81e      	bhi.n	801498c <HAL_RCCEx_PeriphCLKConfig+0x110>
 801494e:	2b00      	cmp	r3, #0
 8014950:	d00a      	beq.n	8014968 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8014952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014956:	d010      	beq.n	801497a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8014958:	e018      	b.n	801498c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801495a:	4b68      	ldr	r3, [pc, #416]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801495c:	68db      	ldr	r3, [r3, #12]
 801495e:	4a67      	ldr	r2, [pc, #412]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014964:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8014966:	e015      	b.n	8014994 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	3304      	adds	r3, #4
 801496c:	2100      	movs	r1, #0
 801496e:	4618      	mov	r0, r3
 8014970:	f000 fb08 	bl	8014f84 <RCCEx_PLLSAI1_Config>
 8014974:	4603      	mov	r3, r0
 8014976:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8014978:	e00c      	b.n	8014994 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	3320      	adds	r3, #32
 801497e:	2100      	movs	r1, #0
 8014980:	4618      	mov	r0, r3
 8014982:	f000 fbe5 	bl	8015150 <RCCEx_PLLSAI2_Config>
 8014986:	4603      	mov	r3, r0
 8014988:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 801498a:	e003      	b.n	8014994 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801498c:	2301      	movs	r3, #1
 801498e:	77fb      	strb	r3, [r7, #31]
        break;
 8014990:	e000      	b.n	8014994 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8014992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014994:	7ffb      	ldrb	r3, [r7, #31]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d10b      	bne.n	80149b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801499a:	4b58      	ldr	r3, [pc, #352]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801499c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80149a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149a8:	4954      	ldr	r1, [pc, #336]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80149aa:	4313      	orrs	r3, r2
 80149ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80149b0:	e001      	b.n	80149b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80149b2:	7ffb      	ldrb	r3, [r7, #31]
 80149b4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f000 80ab 	beq.w	8014b1a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80149c4:	2300      	movs	r3, #0
 80149c6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80149c8:	4b4c      	ldr	r3, [pc, #304]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80149ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d10d      	bne.n	80149f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80149d4:	4b49      	ldr	r3, [pc, #292]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80149d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149d8:	4a48      	ldr	r2, [pc, #288]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80149da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80149de:	6593      	str	r3, [r2, #88]	; 0x58
 80149e0:	4b46      	ldr	r3, [pc, #280]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80149e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149e8:	60fb      	str	r3, [r7, #12]
 80149ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80149ec:	2301      	movs	r3, #1
 80149ee:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80149f0:	4b43      	ldr	r3, [pc, #268]	; (8014b00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	4a42      	ldr	r2, [pc, #264]	; (8014b00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80149f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80149fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80149fc:	f7fb fd3e 	bl	801047c <HAL_GetTick>
 8014a00:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014a02:	e00f      	b.n	8014a24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014a04:	f7fb fd3a 	bl	801047c <HAL_GetTick>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	1ad3      	subs	r3, r2, r3
 8014a0e:	2b02      	cmp	r3, #2
 8014a10:	d908      	bls.n	8014a24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014a12:	4b3b      	ldr	r3, [pc, #236]	; (8014b00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d109      	bne.n	8014a32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8014a1e:	2303      	movs	r3, #3
 8014a20:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8014a22:	e006      	b.n	8014a32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014a24:	4b36      	ldr	r3, [pc, #216]	; (8014b00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d0e9      	beq.n	8014a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8014a30:	e000      	b.n	8014a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8014a32:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8014a34:	7ffb      	ldrb	r3, [r7, #31]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d164      	bne.n	8014b04 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8014a3a:	4b30      	ldr	r3, [pc, #192]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014a44:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d01f      	beq.n	8014a8c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a52:	69ba      	ldr	r2, [r7, #24]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d019      	beq.n	8014a8c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8014a58:	4b28      	ldr	r3, [pc, #160]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014a62:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014a64:	4b25      	ldr	r3, [pc, #148]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a6a:	4a24      	ldr	r2, [pc, #144]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8014a74:	4b21      	ldr	r3, [pc, #132]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a7a:	4a20      	ldr	r2, [pc, #128]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8014a84:	4a1d      	ldr	r2, [pc, #116]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014a86:	69bb      	ldr	r3, [r7, #24]
 8014a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8014a8c:	69bb      	ldr	r3, [r7, #24]
 8014a8e:	f003 0301 	and.w	r3, r3, #1
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d01f      	beq.n	8014ad6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a96:	f7fb fcf1 	bl	801047c <HAL_GetTick>
 8014a9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014a9c:	e012      	b.n	8014ac4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014a9e:	f7fb fced 	bl	801047c <HAL_GetTick>
 8014aa2:	4602      	mov	r2, r0
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	1ad3      	subs	r3, r2, r3
 8014aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8014aac:	4293      	cmp	r3, r2
 8014aae:	d909      	bls.n	8014ac4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014ab0:	4b12      	ldr	r3, [pc, #72]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ab6:	f003 0302 	and.w	r3, r3, #2
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d10a      	bne.n	8014ad4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8014abe:	2303      	movs	r3, #3
 8014ac0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8014ac2:	e007      	b.n	8014ad4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014ac4:	4b0d      	ldr	r3, [pc, #52]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014aca:	f003 0302 	and.w	r3, r3, #2
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d0e5      	beq.n	8014a9e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8014ad2:	e000      	b.n	8014ad6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8014ad4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8014ad6:	7ffb      	ldrb	r3, [r7, #31]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d10c      	bne.n	8014af6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014adc:	4b07      	ldr	r3, [pc, #28]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ae2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014aec:	4903      	ldr	r1, [pc, #12]	; (8014afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8014aee:	4313      	orrs	r3, r2
 8014af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8014af4:	e008      	b.n	8014b08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014af6:	7ffb      	ldrb	r3, [r7, #31]
 8014af8:	77bb      	strb	r3, [r7, #30]
 8014afa:	e005      	b.n	8014b08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8014afc:	40021000 	.word	0x40021000
 8014b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014b04:	7ffb      	ldrb	r3, [r7, #31]
 8014b06:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8014b08:	7dfb      	ldrb	r3, [r7, #23]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d105      	bne.n	8014b1a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014b0e:	4b9c      	ldr	r3, [pc, #624]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b12:	4a9b      	ldr	r2, [pc, #620]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014b18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	f003 0301 	and.w	r3, r3, #1
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d00a      	beq.n	8014b3c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014b26:	4b96      	ldr	r3, [pc, #600]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b2c:	f023 0203 	bic.w	r2, r3, #3
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b34:	4992      	ldr	r1, [pc, #584]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b36:	4313      	orrs	r3, r2
 8014b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	f003 0302 	and.w	r3, r3, #2
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d00a      	beq.n	8014b5e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014b48:	4b8d      	ldr	r3, [pc, #564]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b4e:	f023 020c 	bic.w	r2, r3, #12
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b56:	498a      	ldr	r1, [pc, #552]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b58:	4313      	orrs	r3, r2
 8014b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	f003 0304 	and.w	r3, r3, #4
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d00a      	beq.n	8014b80 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8014b6a:	4b85      	ldr	r3, [pc, #532]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b78:	4981      	ldr	r1, [pc, #516]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b7a:	4313      	orrs	r3, r2
 8014b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	f003 0308 	and.w	r3, r3, #8
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d00a      	beq.n	8014ba2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8014b8c:	4b7c      	ldr	r3, [pc, #496]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b9a:	4979      	ldr	r1, [pc, #484]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014b9c:	4313      	orrs	r3, r2
 8014b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	f003 0310 	and.w	r3, r3, #16
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d00a      	beq.n	8014bc4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8014bae:	4b74      	ldr	r3, [pc, #464]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bbc:	4970      	ldr	r1, [pc, #448]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014bbe:	4313      	orrs	r3, r2
 8014bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	f003 0320 	and.w	r3, r3, #32
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d00a      	beq.n	8014be6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014bd0:	4b6b      	ldr	r3, [pc, #428]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014bd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014bde:	4968      	ldr	r1, [pc, #416]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014be0:	4313      	orrs	r3, r2
 8014be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d00a      	beq.n	8014c08 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014bf2:	4b63      	ldr	r3, [pc, #396]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c00:	495f      	ldr	r1, [pc, #380]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014c02:	4313      	orrs	r3, r2
 8014c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d00a      	beq.n	8014c2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014c14:	4b5a      	ldr	r3, [pc, #360]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014c22:	4957      	ldr	r1, [pc, #348]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014c24:	4313      	orrs	r3, r2
 8014c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d00a      	beq.n	8014c4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8014c36:	4b52      	ldr	r3, [pc, #328]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014c3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c44:	494e      	ldr	r1, [pc, #312]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014c46:	4313      	orrs	r3, r2
 8014c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d031      	beq.n	8014cbc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014c60:	d00e      	beq.n	8014c80 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8014c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014c66:	d814      	bhi.n	8014c92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d015      	beq.n	8014c98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8014c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014c70:	d10f      	bne.n	8014c92 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014c72:	4b43      	ldr	r3, [pc, #268]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014c74:	68db      	ldr	r3, [r3, #12]
 8014c76:	4a42      	ldr	r2, [pc, #264]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014c7c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8014c7e:	e00c      	b.n	8014c9a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	3304      	adds	r3, #4
 8014c84:	2100      	movs	r1, #0
 8014c86:	4618      	mov	r0, r3
 8014c88:	f000 f97c 	bl	8014f84 <RCCEx_PLLSAI1_Config>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8014c90:	e003      	b.n	8014c9a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8014c92:	2301      	movs	r3, #1
 8014c94:	77fb      	strb	r3, [r7, #31]
        break;
 8014c96:	e000      	b.n	8014c9a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8014c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014c9a:	7ffb      	ldrb	r3, [r7, #31]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d10b      	bne.n	8014cb8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8014ca0:	4b37      	ldr	r3, [pc, #220]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014ca6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014cae:	4934      	ldr	r1, [pc, #208]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014cb0:	4313      	orrs	r3, r2
 8014cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8014cb6:	e001      	b.n	8014cbc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014cb8:	7ffb      	ldrb	r3, [r7, #31]
 8014cba:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d00a      	beq.n	8014cde <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8014cc8:	4b2d      	ldr	r3, [pc, #180]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014cce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014cd6:	492a      	ldr	r1, [pc, #168]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014cd8:	4313      	orrs	r3, r2
 8014cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d00a      	beq.n	8014d00 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8014cea:	4b25      	ldr	r3, [pc, #148]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014cf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cf8:	4921      	ldr	r1, [pc, #132]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014cfa:	4313      	orrs	r3, r2
 8014cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d00a      	beq.n	8014d22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014d0c:	4b1c      	ldr	r3, [pc, #112]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d1a:	4919      	ldr	r1, [pc, #100]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014d1c:	4313      	orrs	r3, r2
 8014d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d00a      	beq.n	8014d44 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8014d2e:	4b14      	ldr	r3, [pc, #80]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014d34:	f023 0203 	bic.w	r2, r3, #3
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d3c:	4910      	ldr	r1, [pc, #64]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014d3e:	4313      	orrs	r3, r2
 8014d40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d02b      	beq.n	8014da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014d50:	4b0b      	ldr	r3, [pc, #44]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d5e:	4908      	ldr	r1, [pc, #32]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014d60:	4313      	orrs	r3, r2
 8014d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014d6e:	d109      	bne.n	8014d84 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014d70:	4b03      	ldr	r3, [pc, #12]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014d72:	68db      	ldr	r3, [r3, #12]
 8014d74:	4a02      	ldr	r2, [pc, #8]	; (8014d80 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8014d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d7a:	60d3      	str	r3, [r2, #12]
 8014d7c:	e014      	b.n	8014da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8014d7e:	bf00      	nop
 8014d80:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014d8c:	d10c      	bne.n	8014da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	3304      	adds	r3, #4
 8014d92:	2101      	movs	r1, #1
 8014d94:	4618      	mov	r0, r3
 8014d96:	f000 f8f5 	bl	8014f84 <RCCEx_PLLSAI1_Config>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8014d9e:	7ffb      	ldrb	r3, [r7, #31]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d001      	beq.n	8014da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8014da4:	7ffb      	ldrb	r3, [r7, #31]
 8014da6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d04a      	beq.n	8014e4a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014dbc:	d108      	bne.n	8014dd0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8014dbe:	4b70      	ldr	r3, [pc, #448]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014dc4:	4a6e      	ldr	r2, [pc, #440]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014dca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8014dce:	e012      	b.n	8014df6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8014dd0:	4b6b      	ldr	r3, [pc, #428]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014dd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014dde:	4968      	ldr	r1, [pc, #416]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014de0:	4313      	orrs	r3, r2
 8014de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8014de6:	4b66      	ldr	r3, [pc, #408]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014dec:	4a64      	ldr	r2, [pc, #400]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014df2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014dfe:	d10d      	bne.n	8014e1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	3304      	adds	r3, #4
 8014e04:	2101      	movs	r1, #1
 8014e06:	4618      	mov	r0, r3
 8014e08:	f000 f8bc 	bl	8014f84 <RCCEx_PLLSAI1_Config>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8014e10:	7ffb      	ldrb	r3, [r7, #31]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d019      	beq.n	8014e4a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8014e16:	7ffb      	ldrb	r3, [r7, #31]
 8014e18:	77bb      	strb	r3, [r7, #30]
 8014e1a:	e016      	b.n	8014e4a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014e24:	d106      	bne.n	8014e34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014e26:	4b56      	ldr	r3, [pc, #344]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014e28:	68db      	ldr	r3, [r3, #12]
 8014e2a:	4a55      	ldr	r2, [pc, #340]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014e30:	60d3      	str	r3, [r2, #12]
 8014e32:	e00a      	b.n	8014e4a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014e3c:	d105      	bne.n	8014e4a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8014e3e:	4b50      	ldr	r3, [pc, #320]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014e40:	68db      	ldr	r3, [r3, #12]
 8014e42:	4a4f      	ldr	r2, [pc, #316]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014e48:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d028      	beq.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014e56:	4b4a      	ldr	r3, [pc, #296]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e64:	4946      	ldr	r1, [pc, #280]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014e66:	4313      	orrs	r3, r2
 8014e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014e74:	d106      	bne.n	8014e84 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014e76:	4b42      	ldr	r3, [pc, #264]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014e78:	68db      	ldr	r3, [r3, #12]
 8014e7a:	4a41      	ldr	r2, [pc, #260]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014e80:	60d3      	str	r3, [r2, #12]
 8014e82:	e011      	b.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014e8c:	d10c      	bne.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	3304      	adds	r3, #4
 8014e92:	2101      	movs	r1, #1
 8014e94:	4618      	mov	r0, r3
 8014e96:	f000 f875 	bl	8014f84 <RCCEx_PLLSAI1_Config>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8014e9e:	7ffb      	ldrb	r3, [r7, #31]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d001      	beq.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8014ea4:	7ffb      	ldrb	r3, [r7, #31]
 8014ea6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d01e      	beq.n	8014ef2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8014eb4:	4b32      	ldr	r3, [pc, #200]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014eba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ec4:	492e      	ldr	r1, [pc, #184]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014ec6:	4313      	orrs	r3, r2
 8014ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014ed6:	d10c      	bne.n	8014ef2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	3304      	adds	r3, #4
 8014edc:	2102      	movs	r1, #2
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f000 f850 	bl	8014f84 <RCCEx_PLLSAI1_Config>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8014ee8:	7ffb      	ldrb	r3, [r7, #31]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d001      	beq.n	8014ef2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8014eee:	7ffb      	ldrb	r3, [r7, #31]
 8014ef0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00b      	beq.n	8014f16 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8014efe:	4b20      	ldr	r3, [pc, #128]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014f04:	f023 0204 	bic.w	r2, r3, #4
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f0e:	491c      	ldr	r1, [pc, #112]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014f10:	4313      	orrs	r3, r2
 8014f12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d00b      	beq.n	8014f3a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8014f22:	4b17      	ldr	r3, [pc, #92]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014f28:	f023 0218 	bic.w	r2, r3, #24
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014f32:	4913      	ldr	r1, [pc, #76]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014f34:	4313      	orrs	r3, r2
 8014f36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d017      	beq.n	8014f76 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8014f46:	4b0e      	ldr	r3, [pc, #56]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014f56:	490a      	ldr	r1, [pc, #40]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014f58:	4313      	orrs	r3, r2
 8014f5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014f68:	d105      	bne.n	8014f76 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014f6a:	4b05      	ldr	r3, [pc, #20]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014f6c:	68db      	ldr	r3, [r3, #12]
 8014f6e:	4a04      	ldr	r2, [pc, #16]	; (8014f80 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8014f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014f74:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8014f76:	7fbb      	ldrb	r3, [r7, #30]
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3720      	adds	r7, #32
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	40021000 	.word	0x40021000

08014f84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	2b03      	cmp	r3, #3
 8014f98:	d018      	beq.n	8014fcc <RCCEx_PLLSAI1_Config+0x48>
 8014f9a:	2b03      	cmp	r3, #3
 8014f9c:	d81f      	bhi.n	8014fde <RCCEx_PLLSAI1_Config+0x5a>
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d002      	beq.n	8014fa8 <RCCEx_PLLSAI1_Config+0x24>
 8014fa2:	2b02      	cmp	r3, #2
 8014fa4:	d009      	beq.n	8014fba <RCCEx_PLLSAI1_Config+0x36>
 8014fa6:	e01a      	b.n	8014fde <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8014fa8:	4b65      	ldr	r3, [pc, #404]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	f003 0302 	and.w	r3, r3, #2
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d117      	bne.n	8014fe4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014fb8:	e014      	b.n	8014fe4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8014fba:	4b61      	ldr	r3, [pc, #388]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d110      	bne.n	8014fe8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014fca:	e00d      	b.n	8014fe8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8014fcc:	4b5c      	ldr	r3, [pc, #368]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d109      	bne.n	8014fec <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8014fd8:	2301      	movs	r3, #1
 8014fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014fdc:	e006      	b.n	8014fec <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8014fde:	2301      	movs	r3, #1
 8014fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8014fe2:	e004      	b.n	8014fee <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8014fe4:	bf00      	nop
 8014fe6:	e002      	b.n	8014fee <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8014fe8:	bf00      	nop
 8014fea:	e000      	b.n	8014fee <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8014fec:	bf00      	nop
  }

  if (status == HAL_OK)
 8014fee:	7bfb      	ldrb	r3, [r7, #15]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	f040 809f 	bne.w	8015134 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8014ff6:	4b52      	ldr	r3, [pc, #328]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	4a51      	ldr	r2, [pc, #324]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8014ffc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015002:	f7fb fa3b 	bl	801047c <HAL_GetTick>
 8015006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8015008:	e00f      	b.n	801502a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801500a:	f7fb fa37 	bl	801047c <HAL_GetTick>
 801500e:	4602      	mov	r2, r0
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	1ad3      	subs	r3, r2, r3
 8015014:	2b02      	cmp	r3, #2
 8015016:	d908      	bls.n	801502a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8015018:	4b49      	ldr	r3, [pc, #292]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015020:	2b00      	cmp	r3, #0
 8015022:	d009      	beq.n	8015038 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8015024:	2303      	movs	r3, #3
 8015026:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8015028:	e006      	b.n	8015038 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801502a:	4b45      	ldr	r3, [pc, #276]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015032:	2b00      	cmp	r3, #0
 8015034:	d1e9      	bne.n	801500a <RCCEx_PLLSAI1_Config+0x86>
 8015036:	e000      	b.n	801503a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8015038:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 801503a:	7bfb      	ldrb	r3, [r7, #15]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d179      	bne.n	8015134 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d116      	bne.n	8015074 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8015046:	4b3e      	ldr	r3, [pc, #248]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8015048:	691a      	ldr	r2, [r3, #16]
 801504a:	4b3e      	ldr	r3, [pc, #248]	; (8015144 <RCCEx_PLLSAI1_Config+0x1c0>)
 801504c:	4013      	ands	r3, r2
 801504e:	687a      	ldr	r2, [r7, #4]
 8015050:	6892      	ldr	r2, [r2, #8]
 8015052:	0211      	lsls	r1, r2, #8
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	68d2      	ldr	r2, [r2, #12]
 8015058:	06d2      	lsls	r2, r2, #27
 801505a:	4311      	orrs	r1, r2
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	6852      	ldr	r2, [r2, #4]
 8015060:	3a01      	subs	r2, #1
 8015062:	0112      	lsls	r2, r2, #4
 8015064:	4311      	orrs	r1, r2
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	6812      	ldr	r2, [r2, #0]
 801506a:	430a      	orrs	r2, r1
 801506c:	4934      	ldr	r1, [pc, #208]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 801506e:	4313      	orrs	r3, r2
 8015070:	610b      	str	r3, [r1, #16]
 8015072:	e033      	b.n	80150dc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	2b01      	cmp	r3, #1
 8015078:	d118      	bne.n	80150ac <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801507a:	4b31      	ldr	r3, [pc, #196]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 801507c:	691a      	ldr	r2, [r3, #16]
 801507e:	4b32      	ldr	r3, [pc, #200]	; (8015148 <RCCEx_PLLSAI1_Config+0x1c4>)
 8015080:	4013      	ands	r3, r2
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	6892      	ldr	r2, [r2, #8]
 8015086:	0211      	lsls	r1, r2, #8
 8015088:	687a      	ldr	r2, [r7, #4]
 801508a:	6912      	ldr	r2, [r2, #16]
 801508c:	0852      	lsrs	r2, r2, #1
 801508e:	3a01      	subs	r2, #1
 8015090:	0552      	lsls	r2, r2, #21
 8015092:	4311      	orrs	r1, r2
 8015094:	687a      	ldr	r2, [r7, #4]
 8015096:	6852      	ldr	r2, [r2, #4]
 8015098:	3a01      	subs	r2, #1
 801509a:	0112      	lsls	r2, r2, #4
 801509c:	4311      	orrs	r1, r2
 801509e:	687a      	ldr	r2, [r7, #4]
 80150a0:	6812      	ldr	r2, [r2, #0]
 80150a2:	430a      	orrs	r2, r1
 80150a4:	4926      	ldr	r1, [pc, #152]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 80150a6:	4313      	orrs	r3, r2
 80150a8:	610b      	str	r3, [r1, #16]
 80150aa:	e017      	b.n	80150dc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80150ac:	4b24      	ldr	r3, [pc, #144]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 80150ae:	691a      	ldr	r2, [r3, #16]
 80150b0:	4b26      	ldr	r3, [pc, #152]	; (801514c <RCCEx_PLLSAI1_Config+0x1c8>)
 80150b2:	4013      	ands	r3, r2
 80150b4:	687a      	ldr	r2, [r7, #4]
 80150b6:	6892      	ldr	r2, [r2, #8]
 80150b8:	0211      	lsls	r1, r2, #8
 80150ba:	687a      	ldr	r2, [r7, #4]
 80150bc:	6952      	ldr	r2, [r2, #20]
 80150be:	0852      	lsrs	r2, r2, #1
 80150c0:	3a01      	subs	r2, #1
 80150c2:	0652      	lsls	r2, r2, #25
 80150c4:	4311      	orrs	r1, r2
 80150c6:	687a      	ldr	r2, [r7, #4]
 80150c8:	6852      	ldr	r2, [r2, #4]
 80150ca:	3a01      	subs	r2, #1
 80150cc:	0112      	lsls	r2, r2, #4
 80150ce:	4311      	orrs	r1, r2
 80150d0:	687a      	ldr	r2, [r7, #4]
 80150d2:	6812      	ldr	r2, [r2, #0]
 80150d4:	430a      	orrs	r2, r1
 80150d6:	491a      	ldr	r1, [pc, #104]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 80150d8:	4313      	orrs	r3, r2
 80150da:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80150dc:	4b18      	ldr	r3, [pc, #96]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4a17      	ldr	r2, [pc, #92]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 80150e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80150e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80150e8:	f7fb f9c8 	bl	801047c <HAL_GetTick>
 80150ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80150ee:	e00f      	b.n	8015110 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80150f0:	f7fb f9c4 	bl	801047c <HAL_GetTick>
 80150f4:	4602      	mov	r2, r0
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	1ad3      	subs	r3, r2, r3
 80150fa:	2b02      	cmp	r3, #2
 80150fc:	d908      	bls.n	8015110 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80150fe:	4b10      	ldr	r3, [pc, #64]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015106:	2b00      	cmp	r3, #0
 8015108:	d109      	bne.n	801511e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 801510a:	2303      	movs	r3, #3
 801510c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 801510e:	e006      	b.n	801511e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8015110:	4b0b      	ldr	r3, [pc, #44]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015118:	2b00      	cmp	r3, #0
 801511a:	d0e9      	beq.n	80150f0 <RCCEx_PLLSAI1_Config+0x16c>
 801511c:	e000      	b.n	8015120 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 801511e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8015120:	7bfb      	ldrb	r3, [r7, #15]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d106      	bne.n	8015134 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8015126:	4b06      	ldr	r3, [pc, #24]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8015128:	691a      	ldr	r2, [r3, #16]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	699b      	ldr	r3, [r3, #24]
 801512e:	4904      	ldr	r1, [pc, #16]	; (8015140 <RCCEx_PLLSAI1_Config+0x1bc>)
 8015130:	4313      	orrs	r3, r2
 8015132:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8015134:	7bfb      	ldrb	r3, [r7, #15]
}
 8015136:	4618      	mov	r0, r3
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	40021000 	.word	0x40021000
 8015144:	07ff800c 	.word	0x07ff800c
 8015148:	ff9f800c 	.word	0xff9f800c
 801514c:	f9ff800c 	.word	0xf9ff800c

08015150 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b084      	sub	sp, #16
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801515a:	2300      	movs	r3, #0
 801515c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	2b03      	cmp	r3, #3
 8015164:	d018      	beq.n	8015198 <RCCEx_PLLSAI2_Config+0x48>
 8015166:	2b03      	cmp	r3, #3
 8015168:	d81f      	bhi.n	80151aa <RCCEx_PLLSAI2_Config+0x5a>
 801516a:	2b01      	cmp	r3, #1
 801516c:	d002      	beq.n	8015174 <RCCEx_PLLSAI2_Config+0x24>
 801516e:	2b02      	cmp	r3, #2
 8015170:	d009      	beq.n	8015186 <RCCEx_PLLSAI2_Config+0x36>
 8015172:	e01a      	b.n	80151aa <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8015174:	4b4a      	ldr	r3, [pc, #296]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f003 0302 	and.w	r3, r3, #2
 801517c:	2b00      	cmp	r3, #0
 801517e:	d117      	bne.n	80151b0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8015180:	2301      	movs	r3, #1
 8015182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015184:	e014      	b.n	80151b0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8015186:	4b46      	ldr	r3, [pc, #280]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801518e:	2b00      	cmp	r3, #0
 8015190:	d110      	bne.n	80151b4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8015192:	2301      	movs	r3, #1
 8015194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015196:	e00d      	b.n	80151b4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8015198:	4b41      	ldr	r3, [pc, #260]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d109      	bne.n	80151b8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80151a4:	2301      	movs	r3, #1
 80151a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80151a8:	e006      	b.n	80151b8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80151aa:	2301      	movs	r3, #1
 80151ac:	73fb      	strb	r3, [r7, #15]
      break;
 80151ae:	e004      	b.n	80151ba <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80151b0:	bf00      	nop
 80151b2:	e002      	b.n	80151ba <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80151b4:	bf00      	nop
 80151b6:	e000      	b.n	80151ba <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80151b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80151ba:	7bfb      	ldrb	r3, [r7, #15]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d169      	bne.n	8015294 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80151c0:	4b37      	ldr	r3, [pc, #220]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	4a36      	ldr	r2, [pc, #216]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 80151c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80151ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80151cc:	f7fb f956 	bl	801047c <HAL_GetTick>
 80151d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80151d2:	e00f      	b.n	80151f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80151d4:	f7fb f952 	bl	801047c <HAL_GetTick>
 80151d8:	4602      	mov	r2, r0
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	1ad3      	subs	r3, r2, r3
 80151de:	2b02      	cmp	r3, #2
 80151e0:	d908      	bls.n	80151f4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80151e2:	4b2f      	ldr	r3, [pc, #188]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d009      	beq.n	8015202 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80151ee:	2303      	movs	r3, #3
 80151f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80151f2:	e006      	b.n	8015202 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80151f4:	4b2a      	ldr	r3, [pc, #168]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d1e9      	bne.n	80151d4 <RCCEx_PLLSAI2_Config+0x84>
 8015200:	e000      	b.n	8015204 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8015202:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8015204:	7bfb      	ldrb	r3, [r7, #15]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d144      	bne.n	8015294 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d115      	bne.n	801523c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8015210:	4b23      	ldr	r3, [pc, #140]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015212:	695a      	ldr	r2, [r3, #20]
 8015214:	4b23      	ldr	r3, [pc, #140]	; (80152a4 <RCCEx_PLLSAI2_Config+0x154>)
 8015216:	4013      	ands	r3, r2
 8015218:	687a      	ldr	r2, [r7, #4]
 801521a:	6892      	ldr	r2, [r2, #8]
 801521c:	0211      	lsls	r1, r2, #8
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	68d2      	ldr	r2, [r2, #12]
 8015222:	06d2      	lsls	r2, r2, #27
 8015224:	4311      	orrs	r1, r2
 8015226:	687a      	ldr	r2, [r7, #4]
 8015228:	6852      	ldr	r2, [r2, #4]
 801522a:	3a01      	subs	r2, #1
 801522c:	0112      	lsls	r2, r2, #4
 801522e:	4311      	orrs	r1, r2
 8015230:	687a      	ldr	r2, [r7, #4]
 8015232:	6812      	ldr	r2, [r2, #0]
 8015234:	430a      	orrs	r2, r1
 8015236:	491a      	ldr	r1, [pc, #104]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015238:	4313      	orrs	r3, r2
 801523a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801523c:	4b18      	ldr	r3, [pc, #96]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	4a17      	ldr	r2, [pc, #92]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015246:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015248:	f7fb f918 	bl	801047c <HAL_GetTick>
 801524c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801524e:	e00f      	b.n	8015270 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8015250:	f7fb f914 	bl	801047c <HAL_GetTick>
 8015254:	4602      	mov	r2, r0
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	1ad3      	subs	r3, r2, r3
 801525a:	2b02      	cmp	r3, #2
 801525c:	d908      	bls.n	8015270 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801525e:	4b10      	ldr	r3, [pc, #64]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015266:	2b00      	cmp	r3, #0
 8015268:	d109      	bne.n	801527e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 801526a:	2303      	movs	r3, #3
 801526c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 801526e:	e006      	b.n	801527e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8015270:	4b0b      	ldr	r3, [pc, #44]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015278:	2b00      	cmp	r3, #0
 801527a:	d0e9      	beq.n	8015250 <RCCEx_PLLSAI2_Config+0x100>
 801527c:	e000      	b.n	8015280 <RCCEx_PLLSAI2_Config+0x130>
          break;
 801527e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8015280:	7bfb      	ldrb	r3, [r7, #15]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d106      	bne.n	8015294 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8015286:	4b06      	ldr	r3, [pc, #24]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015288:	695a      	ldr	r2, [r3, #20]
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	691b      	ldr	r3, [r3, #16]
 801528e:	4904      	ldr	r1, [pc, #16]	; (80152a0 <RCCEx_PLLSAI2_Config+0x150>)
 8015290:	4313      	orrs	r3, r2
 8015292:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8015294:	7bfb      	ldrb	r3, [r7, #15]
}
 8015296:	4618      	mov	r0, r3
 8015298:	3710      	adds	r7, #16
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	40021000 	.word	0x40021000
 80152a4:	07ff800c 	.word	0x07ff800c

080152a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80152b0:	2301      	movs	r3, #1
 80152b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d066      	beq.n	8015388 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80152c0:	b2db      	uxtb	r3, r3
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d106      	bne.n	80152d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2200      	movs	r2, #0
 80152ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f7fa fb42 	bl	800f958 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2202      	movs	r2, #2
 80152d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	68db      	ldr	r3, [r3, #12]
 80152e2:	f003 0310 	and.w	r3, r3, #16
 80152e6:	2b10      	cmp	r3, #16
 80152e8:	d045      	beq.n	8015376 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80152ea:	4b2a      	ldr	r3, [pc, #168]	; (8015394 <HAL_RTC_Init+0xec>)
 80152ec:	22ca      	movs	r2, #202	; 0xca
 80152ee:	625a      	str	r2, [r3, #36]	; 0x24
 80152f0:	4b28      	ldr	r3, [pc, #160]	; (8015394 <HAL_RTC_Init+0xec>)
 80152f2:	2253      	movs	r2, #83	; 0x53
 80152f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f000 f872 	bl	80153e0 <RTC_EnterInitMode>
 80152fc:	4603      	mov	r3, r0
 80152fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8015300:	7bfb      	ldrb	r3, [r7, #15]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d121      	bne.n	801534a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8015306:	4b23      	ldr	r3, [pc, #140]	; (8015394 <HAL_RTC_Init+0xec>)
 8015308:	699b      	ldr	r3, [r3, #24]
 801530a:	4a22      	ldr	r2, [pc, #136]	; (8015394 <HAL_RTC_Init+0xec>)
 801530c:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8015310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015314:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8015316:	4b1f      	ldr	r3, [pc, #124]	; (8015394 <HAL_RTC_Init+0xec>)
 8015318:	699a      	ldr	r2, [r3, #24]
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	6859      	ldr	r1, [r3, #4]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	691b      	ldr	r3, [r3, #16]
 8015322:	4319      	orrs	r1, r3
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	699b      	ldr	r3, [r3, #24]
 8015328:	430b      	orrs	r3, r1
 801532a:	491a      	ldr	r1, [pc, #104]	; (8015394 <HAL_RTC_Init+0xec>)
 801532c:	4313      	orrs	r3, r2
 801532e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	68da      	ldr	r2, [r3, #12]
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	689b      	ldr	r3, [r3, #8]
 8015338:	041b      	lsls	r3, r3, #16
 801533a:	4916      	ldr	r1, [pc, #88]	; (8015394 <HAL_RTC_Init+0xec>)
 801533c:	4313      	orrs	r3, r2
 801533e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f000 f881 	bl	8015448 <RTC_ExitInitMode>
 8015346:	4603      	mov	r3, r0
 8015348:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 801534a:	7bfb      	ldrb	r3, [r7, #15]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d10e      	bne.n	801536e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8015350:	4b10      	ldr	r3, [pc, #64]	; (8015394 <HAL_RTC_Init+0xec>)
 8015352:	699b      	ldr	r3, [r3, #24]
 8015354:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6a19      	ldr	r1, [r3, #32]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	69db      	ldr	r3, [r3, #28]
 8015360:	4319      	orrs	r1, r3
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	695b      	ldr	r3, [r3, #20]
 8015366:	430b      	orrs	r3, r1
 8015368:	490a      	ldr	r1, [pc, #40]	; (8015394 <HAL_RTC_Init+0xec>)
 801536a:	4313      	orrs	r3, r2
 801536c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801536e:	4b09      	ldr	r3, [pc, #36]	; (8015394 <HAL_RTC_Init+0xec>)
 8015370:	22ff      	movs	r2, #255	; 0xff
 8015372:	625a      	str	r2, [r3, #36]	; 0x24
 8015374:	e001      	b.n	801537a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8015376:	2300      	movs	r3, #0
 8015378:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801537a:	7bfb      	ldrb	r3, [r7, #15]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d103      	bne.n	8015388 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	2201      	movs	r2, #1
 8015384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8015388:	7bfb      	ldrb	r3, [r7, #15]
}
 801538a:	4618      	mov	r0, r3
 801538c:	3710      	adds	r7, #16
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	40002800 	.word	0x40002800

08015398 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b084      	sub	sp, #16
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80153a0:	4b0d      	ldr	r3, [pc, #52]	; (80153d8 <HAL_RTC_WaitForSynchro+0x40>)
 80153a2:	4a0e      	ldr	r2, [pc, #56]	; (80153dc <HAL_RTC_WaitForSynchro+0x44>)
 80153a4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80153a6:	f7fb f869 	bl	801047c <HAL_GetTick>
 80153aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80153ac:	e009      	b.n	80153c2 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80153ae:	f7fb f865 	bl	801047c <HAL_GetTick>
 80153b2:	4602      	mov	r2, r0
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	1ad3      	subs	r3, r2, r3
 80153b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80153bc:	d901      	bls.n	80153c2 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80153be:	2303      	movs	r3, #3
 80153c0:	e006      	b.n	80153d0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80153c2:	4b05      	ldr	r3, [pc, #20]	; (80153d8 <HAL_RTC_WaitForSynchro+0x40>)
 80153c4:	68db      	ldr	r3, [r3, #12]
 80153c6:	f003 0320 	and.w	r3, r3, #32
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d0ef      	beq.n	80153ae <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80153ce:	2300      	movs	r3, #0
}
 80153d0:	4618      	mov	r0, r3
 80153d2:	3710      	adds	r7, #16
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}
 80153d8:	40002800 	.word	0x40002800
 80153dc:	0001005c 	.word	0x0001005c

080153e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b084      	sub	sp, #16
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80153e8:	2300      	movs	r3, #0
 80153ea:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80153ec:	4b15      	ldr	r3, [pc, #84]	; (8015444 <RTC_EnterInitMode+0x64>)
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d120      	bne.n	801543a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80153f8:	4b12      	ldr	r3, [pc, #72]	; (8015444 <RTC_EnterInitMode+0x64>)
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	4a11      	ldr	r2, [pc, #68]	; (8015444 <RTC_EnterInitMode+0x64>)
 80153fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015402:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8015404:	f7fb f83a 	bl	801047c <HAL_GetTick>
 8015408:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801540a:	e00d      	b.n	8015428 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801540c:	f7fb f836 	bl	801047c <HAL_GetTick>
 8015410:	4602      	mov	r2, r0
 8015412:	68bb      	ldr	r3, [r7, #8]
 8015414:	1ad3      	subs	r3, r2, r3
 8015416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801541a:	d905      	bls.n	8015428 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 801541c:	2303      	movs	r3, #3
 801541e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	2203      	movs	r2, #3
 8015424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8015428:	4b06      	ldr	r3, [pc, #24]	; (8015444 <RTC_EnterInitMode+0x64>)
 801542a:	68db      	ldr	r3, [r3, #12]
 801542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015430:	2b00      	cmp	r3, #0
 8015432:	d102      	bne.n	801543a <RTC_EnterInitMode+0x5a>
 8015434:	7bfb      	ldrb	r3, [r7, #15]
 8015436:	2b03      	cmp	r3, #3
 8015438:	d1e8      	bne.n	801540c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 801543a:	7bfb      	ldrb	r3, [r7, #15]
}
 801543c:	4618      	mov	r0, r3
 801543e:	3710      	adds	r7, #16
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}
 8015444:	40002800 	.word	0x40002800

08015448 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b084      	sub	sp, #16
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015450:	2300      	movs	r3, #0
 8015452:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8015454:	4b1a      	ldr	r3, [pc, #104]	; (80154c0 <RTC_ExitInitMode+0x78>)
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	4a19      	ldr	r2, [pc, #100]	; (80154c0 <RTC_ExitInitMode+0x78>)
 801545a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801545e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8015460:	4b17      	ldr	r3, [pc, #92]	; (80154c0 <RTC_ExitInitMode+0x78>)
 8015462:	699b      	ldr	r3, [r3, #24]
 8015464:	f003 0320 	and.w	r3, r3, #32
 8015468:	2b00      	cmp	r3, #0
 801546a:	d10c      	bne.n	8015486 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f7ff ff93 	bl	8015398 <HAL_RTC_WaitForSynchro>
 8015472:	4603      	mov	r3, r0
 8015474:	2b00      	cmp	r3, #0
 8015476:	d01e      	beq.n	80154b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2203      	movs	r2, #3
 801547c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8015480:	2303      	movs	r3, #3
 8015482:	73fb      	strb	r3, [r7, #15]
 8015484:	e017      	b.n	80154b6 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8015486:	4b0e      	ldr	r3, [pc, #56]	; (80154c0 <RTC_ExitInitMode+0x78>)
 8015488:	699b      	ldr	r3, [r3, #24]
 801548a:	4a0d      	ldr	r2, [pc, #52]	; (80154c0 <RTC_ExitInitMode+0x78>)
 801548c:	f023 0320 	bic.w	r3, r3, #32
 8015490:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f7ff ff80 	bl	8015398 <HAL_RTC_WaitForSynchro>
 8015498:	4603      	mov	r3, r0
 801549a:	2b00      	cmp	r3, #0
 801549c:	d005      	beq.n	80154aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2203      	movs	r2, #3
 80154a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80154a6:	2303      	movs	r3, #3
 80154a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80154aa:	4b05      	ldr	r3, [pc, #20]	; (80154c0 <RTC_ExitInitMode+0x78>)
 80154ac:	699b      	ldr	r3, [r3, #24]
 80154ae:	4a04      	ldr	r2, [pc, #16]	; (80154c0 <RTC_ExitInitMode+0x78>)
 80154b0:	f043 0320 	orr.w	r3, r3, #32
 80154b4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80154b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3710      	adds	r7, #16
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	40002800 	.word	0x40002800

080154c4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80154c4:	b480      	push	{r7}
 80154c6:	b083      	sub	sp, #12
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	685b      	ldr	r3, [r3, #4]
 80154d6:	490f      	ldr	r1, [pc, #60]	; (8015514 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80154d8:	4313      	orrs	r3, r2
 80154da:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	689a      	ldr	r2, [r3, #8]
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	490c      	ldr	r1, [pc, #48]	; (8015518 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80154e6:	4313      	orrs	r3, r2
 80154e8:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80154ea:	4b0b      	ldr	r3, [pc, #44]	; (8015518 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80154ec:	6a1b      	ldr	r3, [r3, #32]
 80154ee:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	6919      	ldr	r1, [r3, #16]
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	695b      	ldr	r3, [r3, #20]
 80154fa:	041b      	lsls	r3, r3, #16
 80154fc:	430b      	orrs	r3, r1
 80154fe:	4906      	ldr	r1, [pc, #24]	; (8015518 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8015500:	4313      	orrs	r3, r2
 8015502:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8015504:	2300      	movs	r3, #0
}
 8015506:	4618      	mov	r0, r3
 8015508:	370c      	adds	r7, #12
 801550a:	46bd      	mov	sp, r7
 801550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015510:	4770      	bx	lr
 8015512:	bf00      	nop
 8015514:	40002800 	.word	0x40002800
 8015518:	40003400 	.word	0x40003400

0801551c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b084      	sub	sp, #16
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d101      	bne.n	801552e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801552a:	2301      	movs	r3, #1
 801552c:	e095      	b.n	801565a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015532:	2b00      	cmp	r3, #0
 8015534:	d108      	bne.n	8015548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801553e:	d009      	beq.n	8015554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2200      	movs	r2, #0
 8015544:	61da      	str	r2, [r3, #28]
 8015546:	e005      	b.n	8015554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2200      	movs	r2, #0
 801554c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2200      	movs	r2, #0
 8015552:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2200      	movs	r2, #0
 8015558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015560:	b2db      	uxtb	r3, r3
 8015562:	2b00      	cmp	r3, #0
 8015564:	d106      	bne.n	8015574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2200      	movs	r2, #0
 801556a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f7fa fa30 	bl	800f9d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2202      	movs	r2, #2
 8015578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	681a      	ldr	r2, [r3, #0]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801558a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8015594:	d902      	bls.n	801559c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8015596:	2300      	movs	r3, #0
 8015598:	60fb      	str	r3, [r7, #12]
 801559a:	e002      	b.n	80155a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801559c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80155a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80155aa:	d007      	beq.n	80155bc <HAL_SPI_Init+0xa0>
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	68db      	ldr	r3, [r3, #12]
 80155b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80155b4:	d002      	beq.n	80155bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2200      	movs	r2, #0
 80155ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	689b      	ldr	r3, [r3, #8]
 80155c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80155cc:	431a      	orrs	r2, r3
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	691b      	ldr	r3, [r3, #16]
 80155d2:	f003 0302 	and.w	r3, r3, #2
 80155d6:	431a      	orrs	r2, r3
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	695b      	ldr	r3, [r3, #20]
 80155dc:	f003 0301 	and.w	r3, r3, #1
 80155e0:	431a      	orrs	r2, r3
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	699b      	ldr	r3, [r3, #24]
 80155e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80155ea:	431a      	orrs	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	69db      	ldr	r3, [r3, #28]
 80155f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80155f4:	431a      	orrs	r2, r3
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	6a1b      	ldr	r3, [r3, #32]
 80155fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80155fe:	ea42 0103 	orr.w	r1, r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015606:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	430a      	orrs	r2, r1
 8015610:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	699b      	ldr	r3, [r3, #24]
 8015616:	0c1b      	lsrs	r3, r3, #16
 8015618:	f003 0204 	and.w	r2, r3, #4
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015620:	f003 0310 	and.w	r3, r3, #16
 8015624:	431a      	orrs	r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801562a:	f003 0308 	and.w	r3, r3, #8
 801562e:	431a      	orrs	r2, r3
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8015638:	ea42 0103 	orr.w	r1, r2, r3
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	430a      	orrs	r2, r1
 8015648:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2200      	movs	r2, #0
 801564e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2201      	movs	r2, #1
 8015654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8015658:	2300      	movs	r3, #0
}
 801565a:	4618      	mov	r0, r3
 801565c:	3710      	adds	r7, #16
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b088      	sub	sp, #32
 8015666:	af00      	add	r7, sp, #0
 8015668:	60f8      	str	r0, [r7, #12]
 801566a:	60b9      	str	r1, [r7, #8]
 801566c:	603b      	str	r3, [r7, #0]
 801566e:	4613      	mov	r3, r2
 8015670:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8015672:	2300      	movs	r3, #0
 8015674:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801567c:	2b01      	cmp	r3, #1
 801567e:	d101      	bne.n	8015684 <HAL_SPI_Transmit+0x22>
 8015680:	2302      	movs	r3, #2
 8015682:	e158      	b.n	8015936 <HAL_SPI_Transmit+0x2d4>
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	2201      	movs	r2, #1
 8015688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801568c:	f7fa fef6 	bl	801047c <HAL_GetTick>
 8015690:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8015692:	88fb      	ldrh	r3, [r7, #6]
 8015694:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801569c:	b2db      	uxtb	r3, r3
 801569e:	2b01      	cmp	r3, #1
 80156a0:	d002      	beq.n	80156a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80156a2:	2302      	movs	r3, #2
 80156a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80156a6:	e13d      	b.n	8015924 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d002      	beq.n	80156b4 <HAL_SPI_Transmit+0x52>
 80156ae:	88fb      	ldrh	r3, [r7, #6]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d102      	bne.n	80156ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80156b4:	2301      	movs	r3, #1
 80156b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80156b8:	e134      	b.n	8015924 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	2203      	movs	r2, #3
 80156be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2200      	movs	r2, #0
 80156c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	68ba      	ldr	r2, [r7, #8]
 80156cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	88fa      	ldrh	r2, [r7, #6]
 80156d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	88fa      	ldrh	r2, [r7, #6]
 80156d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2200      	movs	r2, #0
 80156de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	2200      	movs	r2, #0
 80156e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	2200      	movs	r2, #0
 80156ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	2200      	movs	r2, #0
 80156f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	2200      	movs	r2, #0
 80156fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	689b      	ldr	r3, [r3, #8]
 8015700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015704:	d10f      	bne.n	8015726 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	681a      	ldr	r2, [r3, #0]
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015714:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015724:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015730:	2b40      	cmp	r3, #64	; 0x40
 8015732:	d007      	beq.n	8015744 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015742:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	68db      	ldr	r3, [r3, #12]
 8015748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801574c:	d94b      	bls.n	80157e6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	685b      	ldr	r3, [r3, #4]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d002      	beq.n	801575c <HAL_SPI_Transmit+0xfa>
 8015756:	8afb      	ldrh	r3, [r7, #22]
 8015758:	2b01      	cmp	r3, #1
 801575a:	d13e      	bne.n	80157da <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015760:	881a      	ldrh	r2, [r3, #0]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801576c:	1c9a      	adds	r2, r3, #2
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015776:	b29b      	uxth	r3, r3
 8015778:	3b01      	subs	r3, #1
 801577a:	b29a      	uxth	r2, r3
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8015780:	e02b      	b.n	80157da <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	689b      	ldr	r3, [r3, #8]
 8015788:	f003 0302 	and.w	r3, r3, #2
 801578c:	2b02      	cmp	r3, #2
 801578e:	d112      	bne.n	80157b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015794:	881a      	ldrh	r2, [r3, #0]
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157a0:	1c9a      	adds	r2, r3, #2
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	3b01      	subs	r3, #1
 80157ae:	b29a      	uxth	r2, r3
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80157b4:	e011      	b.n	80157da <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80157b6:	f7fa fe61 	bl	801047c <HAL_GetTick>
 80157ba:	4602      	mov	r2, r0
 80157bc:	69bb      	ldr	r3, [r7, #24]
 80157be:	1ad3      	subs	r3, r2, r3
 80157c0:	683a      	ldr	r2, [r7, #0]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d803      	bhi.n	80157ce <HAL_SPI_Transmit+0x16c>
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157cc:	d102      	bne.n	80157d4 <HAL_SPI_Transmit+0x172>
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d102      	bne.n	80157da <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80157d4:	2303      	movs	r3, #3
 80157d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80157d8:	e0a4      	b.n	8015924 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80157de:	b29b      	uxth	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d1ce      	bne.n	8015782 <HAL_SPI_Transmit+0x120>
 80157e4:	e07c      	b.n	80158e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d002      	beq.n	80157f4 <HAL_SPI_Transmit+0x192>
 80157ee:	8afb      	ldrh	r3, [r7, #22]
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d170      	bne.n	80158d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80157f8:	b29b      	uxth	r3, r3
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d912      	bls.n	8015824 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015802:	881a      	ldrh	r2, [r3, #0]
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801580e:	1c9a      	adds	r2, r3, #2
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015818:	b29b      	uxth	r3, r3
 801581a:	3b02      	subs	r3, #2
 801581c:	b29a      	uxth	r2, r3
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015822:	e058      	b.n	80158d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	330c      	adds	r3, #12
 801582e:	7812      	ldrb	r2, [r2, #0]
 8015830:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015836:	1c5a      	adds	r2, r3, #1
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015840:	b29b      	uxth	r3, r3
 8015842:	3b01      	subs	r3, #1
 8015844:	b29a      	uxth	r2, r3
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801584a:	e044      	b.n	80158d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	689b      	ldr	r3, [r3, #8]
 8015852:	f003 0302 	and.w	r3, r3, #2
 8015856:	2b02      	cmp	r3, #2
 8015858:	d12b      	bne.n	80158b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801585e:	b29b      	uxth	r3, r3
 8015860:	2b01      	cmp	r3, #1
 8015862:	d912      	bls.n	801588a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015868:	881a      	ldrh	r2, [r3, #0]
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015874:	1c9a      	adds	r2, r3, #2
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801587e:	b29b      	uxth	r3, r3
 8015880:	3b02      	subs	r3, #2
 8015882:	b29a      	uxth	r2, r3
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015888:	e025      	b.n	80158d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	330c      	adds	r3, #12
 8015894:	7812      	ldrb	r2, [r2, #0]
 8015896:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801589c:	1c5a      	adds	r2, r3, #1
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80158a6:	b29b      	uxth	r3, r3
 80158a8:	3b01      	subs	r3, #1
 80158aa:	b29a      	uxth	r2, r3
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80158b0:	e011      	b.n	80158d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80158b2:	f7fa fde3 	bl	801047c <HAL_GetTick>
 80158b6:	4602      	mov	r2, r0
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	1ad3      	subs	r3, r2, r3
 80158bc:	683a      	ldr	r2, [r7, #0]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d803      	bhi.n	80158ca <HAL_SPI_Transmit+0x268>
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158c8:	d102      	bne.n	80158d0 <HAL_SPI_Transmit+0x26e>
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d102      	bne.n	80158d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80158d0:	2303      	movs	r3, #3
 80158d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80158d4:	e026      	b.n	8015924 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80158da:	b29b      	uxth	r3, r3
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d1b5      	bne.n	801584c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80158e0:	69ba      	ldr	r2, [r7, #24]
 80158e2:	6839      	ldr	r1, [r7, #0]
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f000 fce3 	bl	80162b0 <SPI_EndRxTxTransaction>
 80158ea:	4603      	mov	r3, r0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d002      	beq.n	80158f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	2220      	movs	r2, #32
 80158f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	689b      	ldr	r3, [r3, #8]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d10a      	bne.n	8015914 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80158fe:	2300      	movs	r3, #0
 8015900:	613b      	str	r3, [r7, #16]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	68db      	ldr	r3, [r3, #12]
 8015908:	613b      	str	r3, [r7, #16]
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	689b      	ldr	r3, [r3, #8]
 8015910:	613b      	str	r3, [r7, #16]
 8015912:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015918:	2b00      	cmp	r3, #0
 801591a:	d002      	beq.n	8015922 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801591c:	2301      	movs	r3, #1
 801591e:	77fb      	strb	r3, [r7, #31]
 8015920:	e000      	b.n	8015924 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8015922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2201      	movs	r2, #1
 8015928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	2200      	movs	r2, #0
 8015930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8015934:	7ffb      	ldrb	r3, [r7, #31]
}
 8015936:	4618      	mov	r0, r3
 8015938:	3720      	adds	r7, #32
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}

0801593e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801593e:	b580      	push	{r7, lr}
 8015940:	b088      	sub	sp, #32
 8015942:	af02      	add	r7, sp, #8
 8015944:	60f8      	str	r0, [r7, #12]
 8015946:	60b9      	str	r1, [r7, #8]
 8015948:	603b      	str	r3, [r7, #0]
 801594a:	4613      	mov	r3, r2
 801594c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801594e:	2300      	movs	r3, #0
 8015950:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	685b      	ldr	r3, [r3, #4]
 8015956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801595a:	d112      	bne.n	8015982 <HAL_SPI_Receive+0x44>
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	689b      	ldr	r3, [r3, #8]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d10e      	bne.n	8015982 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	2204      	movs	r2, #4
 8015968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801596c:	88fa      	ldrh	r2, [r7, #6]
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	9300      	str	r3, [sp, #0]
 8015972:	4613      	mov	r3, r2
 8015974:	68ba      	ldr	r2, [r7, #8]
 8015976:	68b9      	ldr	r1, [r7, #8]
 8015978:	68f8      	ldr	r0, [r7, #12]
 801597a:	f000 f910 	bl	8015b9e <HAL_SPI_TransmitReceive>
 801597e:	4603      	mov	r3, r0
 8015980:	e109      	b.n	8015b96 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8015988:	2b01      	cmp	r3, #1
 801598a:	d101      	bne.n	8015990 <HAL_SPI_Receive+0x52>
 801598c:	2302      	movs	r3, #2
 801598e:	e102      	b.n	8015b96 <HAL_SPI_Receive+0x258>
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	2201      	movs	r2, #1
 8015994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015998:	f7fa fd70 	bl	801047c <HAL_GetTick>
 801599c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80159a4:	b2db      	uxtb	r3, r3
 80159a6:	2b01      	cmp	r3, #1
 80159a8:	d002      	beq.n	80159b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80159aa:	2302      	movs	r3, #2
 80159ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80159ae:	e0e9      	b.n	8015b84 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80159b0:	68bb      	ldr	r3, [r7, #8]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d002      	beq.n	80159bc <HAL_SPI_Receive+0x7e>
 80159b6:	88fb      	ldrh	r3, [r7, #6]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d102      	bne.n	80159c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80159bc:	2301      	movs	r3, #1
 80159be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80159c0:	e0e0      	b.n	8015b84 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	2204      	movs	r2, #4
 80159c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2200      	movs	r2, #0
 80159ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	68ba      	ldr	r2, [r7, #8]
 80159d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	88fa      	ldrh	r2, [r7, #6]
 80159da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	88fa      	ldrh	r2, [r7, #6]
 80159e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2200      	movs	r2, #0
 80159ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	2200      	movs	r2, #0
 80159f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	2200      	movs	r2, #0
 80159f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2200      	movs	r2, #0
 80159fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	2200      	movs	r2, #0
 8015a02:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8015a0c:	d908      	bls.n	8015a20 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	685a      	ldr	r2, [r3, #4]
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8015a1c:	605a      	str	r2, [r3, #4]
 8015a1e:	e007      	b.n	8015a30 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	685a      	ldr	r2, [r3, #4]
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015a2e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	689b      	ldr	r3, [r3, #8]
 8015a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a38:	d10f      	bne.n	8015a5a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015a48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	681a      	ldr	r2, [r3, #0]
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8015a58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a64:	2b40      	cmp	r3, #64	; 0x40
 8015a66:	d007      	beq.n	8015a78 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	681a      	ldr	r2, [r3, #0]
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015a76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	68db      	ldr	r3, [r3, #12]
 8015a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8015a80:	d867      	bhi.n	8015b52 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8015a82:	e030      	b.n	8015ae6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	689b      	ldr	r3, [r3, #8]
 8015a8a:	f003 0301 	and.w	r3, r3, #1
 8015a8e:	2b01      	cmp	r3, #1
 8015a90:	d117      	bne.n	8015ac2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	f103 020c 	add.w	r2, r3, #12
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a9e:	7812      	ldrb	r2, [r2, #0]
 8015aa0:	b2d2      	uxtb	r2, r2
 8015aa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015aa8:	1c5a      	adds	r2, r3, #1
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	3b01      	subs	r3, #1
 8015ab8:	b29a      	uxth	r2, r3
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8015ac0:	e011      	b.n	8015ae6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015ac2:	f7fa fcdb 	bl	801047c <HAL_GetTick>
 8015ac6:	4602      	mov	r2, r0
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	1ad3      	subs	r3, r2, r3
 8015acc:	683a      	ldr	r2, [r7, #0]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d803      	bhi.n	8015ada <HAL_SPI_Receive+0x19c>
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ad8:	d102      	bne.n	8015ae0 <HAL_SPI_Receive+0x1a2>
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d102      	bne.n	8015ae6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8015ae0:	2303      	movs	r3, #3
 8015ae2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8015ae4:	e04e      	b.n	8015b84 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015aec:	b29b      	uxth	r3, r3
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d1c8      	bne.n	8015a84 <HAL_SPI_Receive+0x146>
 8015af2:	e034      	b.n	8015b5e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	689b      	ldr	r3, [r3, #8]
 8015afa:	f003 0301 	and.w	r3, r3, #1
 8015afe:	2b01      	cmp	r3, #1
 8015b00:	d115      	bne.n	8015b2e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	68da      	ldr	r2, [r3, #12]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b0c:	b292      	uxth	r2, r2
 8015b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b14:	1c9a      	adds	r2, r3, #2
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015b20:	b29b      	uxth	r3, r3
 8015b22:	3b01      	subs	r3, #1
 8015b24:	b29a      	uxth	r2, r3
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8015b2c:	e011      	b.n	8015b52 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015b2e:	f7fa fca5 	bl	801047c <HAL_GetTick>
 8015b32:	4602      	mov	r2, r0
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	1ad3      	subs	r3, r2, r3
 8015b38:	683a      	ldr	r2, [r7, #0]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d803      	bhi.n	8015b46 <HAL_SPI_Receive+0x208>
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b44:	d102      	bne.n	8015b4c <HAL_SPI_Receive+0x20e>
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d102      	bne.n	8015b52 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8015b4c:	2303      	movs	r3, #3
 8015b4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8015b50:	e018      	b.n	8015b84 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d1ca      	bne.n	8015af4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015b5e:	693a      	ldr	r2, [r7, #16]
 8015b60:	6839      	ldr	r1, [r7, #0]
 8015b62:	68f8      	ldr	r0, [r7, #12]
 8015b64:	f000 fb4c 	bl	8016200 <SPI_EndRxTransaction>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d002      	beq.n	8015b74 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2220      	movs	r2, #32
 8015b72:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d002      	beq.n	8015b82 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	75fb      	strb	r3, [r7, #23]
 8015b80:	e000      	b.n	8015b84 <HAL_SPI_Receive+0x246>
  }

error :
 8015b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	2201      	movs	r2, #1
 8015b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	2200      	movs	r2, #0
 8015b90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8015b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3718      	adds	r7, #24
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}

08015b9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8015b9e:	b580      	push	{r7, lr}
 8015ba0:	b08a      	sub	sp, #40	; 0x28
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	60f8      	str	r0, [r7, #12]
 8015ba6:	60b9      	str	r1, [r7, #8]
 8015ba8:	607a      	str	r2, [r7, #4]
 8015baa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8015bac:	2301      	movs	r3, #1
 8015bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d101      	bne.n	8015bc4 <HAL_SPI_TransmitReceive+0x26>
 8015bc0:	2302      	movs	r3, #2
 8015bc2:	e1fb      	b.n	8015fbc <HAL_SPI_TransmitReceive+0x41e>
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	2201      	movs	r2, #1
 8015bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015bcc:	f7fa fc56 	bl	801047c <HAL_GetTick>
 8015bd0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015bd8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8015be0:	887b      	ldrh	r3, [r7, #2]
 8015be2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8015be4:	887b      	ldrh	r3, [r7, #2]
 8015be6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8015be8:	7efb      	ldrb	r3, [r7, #27]
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d00e      	beq.n	8015c0c <HAL_SPI_TransmitReceive+0x6e>
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015bf4:	d106      	bne.n	8015c04 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	689b      	ldr	r3, [r3, #8]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d102      	bne.n	8015c04 <HAL_SPI_TransmitReceive+0x66>
 8015bfe:	7efb      	ldrb	r3, [r7, #27]
 8015c00:	2b04      	cmp	r3, #4
 8015c02:	d003      	beq.n	8015c0c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8015c04:	2302      	movs	r3, #2
 8015c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8015c0a:	e1cd      	b.n	8015fa8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d005      	beq.n	8015c1e <HAL_SPI_TransmitReceive+0x80>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d002      	beq.n	8015c1e <HAL_SPI_TransmitReceive+0x80>
 8015c18:	887b      	ldrh	r3, [r7, #2]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d103      	bne.n	8015c26 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8015c24:	e1c0      	b.n	8015fa8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015c2c:	b2db      	uxtb	r3, r3
 8015c2e:	2b04      	cmp	r3, #4
 8015c30:	d003      	beq.n	8015c3a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2205      	movs	r2, #5
 8015c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	887a      	ldrh	r2, [r7, #2]
 8015c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	887a      	ldrh	r2, [r7, #2]
 8015c52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	68ba      	ldr	r2, [r7, #8]
 8015c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	887a      	ldrh	r2, [r7, #2]
 8015c60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	887a      	ldrh	r2, [r7, #2]
 8015c66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2200      	movs	r2, #0
 8015c72:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8015c7c:	d802      	bhi.n	8015c84 <HAL_SPI_TransmitReceive+0xe6>
 8015c7e:	8a3b      	ldrh	r3, [r7, #16]
 8015c80:	2b01      	cmp	r3, #1
 8015c82:	d908      	bls.n	8015c96 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	685a      	ldr	r2, [r3, #4]
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8015c92:	605a      	str	r2, [r3, #4]
 8015c94:	e007      	b.n	8015ca6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	685a      	ldr	r2, [r3, #4]
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015ca4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015cb0:	2b40      	cmp	r3, #64	; 0x40
 8015cb2:	d007      	beq.n	8015cc4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	68db      	ldr	r3, [r3, #12]
 8015cc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8015ccc:	d97c      	bls.n	8015dc8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d002      	beq.n	8015cdc <HAL_SPI_TransmitReceive+0x13e>
 8015cd6:	8a7b      	ldrh	r3, [r7, #18]
 8015cd8:	2b01      	cmp	r3, #1
 8015cda:	d169      	bne.n	8015db0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ce0:	881a      	ldrh	r2, [r3, #0]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cec:	1c9a      	adds	r2, r3, #2
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	3b01      	subs	r3, #1
 8015cfa:	b29a      	uxth	r2, r3
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015d00:	e056      	b.n	8015db0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	689b      	ldr	r3, [r3, #8]
 8015d08:	f003 0302 	and.w	r3, r3, #2
 8015d0c:	2b02      	cmp	r3, #2
 8015d0e:	d11b      	bne.n	8015d48 <HAL_SPI_TransmitReceive+0x1aa>
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d016      	beq.n	8015d48 <HAL_SPI_TransmitReceive+0x1aa>
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1c:	2b01      	cmp	r3, #1
 8015d1e:	d113      	bne.n	8015d48 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d24:	881a      	ldrh	r2, [r3, #0]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d30:	1c9a      	adds	r2, r3, #2
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	3b01      	subs	r3, #1
 8015d3e:	b29a      	uxth	r2, r3
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015d44:	2300      	movs	r3, #0
 8015d46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	689b      	ldr	r3, [r3, #8]
 8015d4e:	f003 0301 	and.w	r3, r3, #1
 8015d52:	2b01      	cmp	r3, #1
 8015d54:	d11c      	bne.n	8015d90 <HAL_SPI_TransmitReceive+0x1f2>
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015d5c:	b29b      	uxth	r3, r3
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d016      	beq.n	8015d90 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	68da      	ldr	r2, [r3, #12]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d6c:	b292      	uxth	r2, r2
 8015d6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d74:	1c9a      	adds	r2, r3, #2
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	3b01      	subs	r3, #1
 8015d84:	b29a      	uxth	r2, r3
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8015d90:	f7fa fb74 	bl	801047c <HAL_GetTick>
 8015d94:	4602      	mov	r2, r0
 8015d96:	69fb      	ldr	r3, [r7, #28]
 8015d98:	1ad3      	subs	r3, r2, r3
 8015d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d807      	bhi.n	8015db0 <HAL_SPI_TransmitReceive+0x212>
 8015da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015da6:	d003      	beq.n	8015db0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8015da8:	2303      	movs	r3, #3
 8015daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8015dae:	e0fb      	b.n	8015fa8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015db4:	b29b      	uxth	r3, r3
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d1a3      	bne.n	8015d02 <HAL_SPI_TransmitReceive+0x164>
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d19d      	bne.n	8015d02 <HAL_SPI_TransmitReceive+0x164>
 8015dc6:	e0df      	b.n	8015f88 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d003      	beq.n	8015dd8 <HAL_SPI_TransmitReceive+0x23a>
 8015dd0:	8a7b      	ldrh	r3, [r7, #18]
 8015dd2:	2b01      	cmp	r3, #1
 8015dd4:	f040 80cb 	bne.w	8015f6e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	2b01      	cmp	r3, #1
 8015de0:	d912      	bls.n	8015e08 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015de6:	881a      	ldrh	r2, [r3, #0]
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015df2:	1c9a      	adds	r2, r3, #2
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	3b02      	subs	r3, #2
 8015e00:	b29a      	uxth	r2, r3
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015e06:	e0b2      	b.n	8015f6e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	330c      	adds	r3, #12
 8015e12:	7812      	ldrb	r2, [r2, #0]
 8015e14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e1a:	1c5a      	adds	r2, r3, #1
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015e24:	b29b      	uxth	r3, r3
 8015e26:	3b01      	subs	r3, #1
 8015e28:	b29a      	uxth	r2, r3
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015e2e:	e09e      	b.n	8015f6e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	689b      	ldr	r3, [r3, #8]
 8015e36:	f003 0302 	and.w	r3, r3, #2
 8015e3a:	2b02      	cmp	r3, #2
 8015e3c:	d134      	bne.n	8015ea8 <HAL_SPI_TransmitReceive+0x30a>
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d02f      	beq.n	8015ea8 <HAL_SPI_TransmitReceive+0x30a>
 8015e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4a:	2b01      	cmp	r3, #1
 8015e4c:	d12c      	bne.n	8015ea8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015e52:	b29b      	uxth	r3, r3
 8015e54:	2b01      	cmp	r3, #1
 8015e56:	d912      	bls.n	8015e7e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e5c:	881a      	ldrh	r2, [r3, #0]
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e68:	1c9a      	adds	r2, r3, #2
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	3b02      	subs	r3, #2
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015e7c:	e012      	b.n	8015ea4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	330c      	adds	r3, #12
 8015e88:	7812      	ldrb	r2, [r2, #0]
 8015e8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e90:	1c5a      	adds	r2, r3, #1
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015e9a:	b29b      	uxth	r3, r3
 8015e9c:	3b01      	subs	r3, #1
 8015e9e:	b29a      	uxth	r2, r3
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	689b      	ldr	r3, [r3, #8]
 8015eae:	f003 0301 	and.w	r3, r3, #1
 8015eb2:	2b01      	cmp	r3, #1
 8015eb4:	d148      	bne.n	8015f48 <HAL_SPI_TransmitReceive+0x3aa>
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d042      	beq.n	8015f48 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015ec8:	b29b      	uxth	r3, r3
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	d923      	bls.n	8015f16 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	68da      	ldr	r2, [r3, #12]
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ed8:	b292      	uxth	r2, r2
 8015eda:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ee0:	1c9a      	adds	r2, r3, #2
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	3b02      	subs	r3, #2
 8015ef0:	b29a      	uxth	r2, r3
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	2b01      	cmp	r3, #1
 8015f02:	d81f      	bhi.n	8015f44 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	685a      	ldr	r2, [r3, #4]
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015f12:	605a      	str	r2, [r3, #4]
 8015f14:	e016      	b.n	8015f44 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	f103 020c 	add.w	r2, r3, #12
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f22:	7812      	ldrb	r2, [r2, #0]
 8015f24:	b2d2      	uxtb	r2, r2
 8015f26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f2c:	1c5a      	adds	r2, r3, #1
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015f38:	b29b      	uxth	r3, r3
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	b29a      	uxth	r2, r3
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015f44:	2301      	movs	r3, #1
 8015f46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8015f48:	f7fa fa98 	bl	801047c <HAL_GetTick>
 8015f4c:	4602      	mov	r2, r0
 8015f4e:	69fb      	ldr	r3, [r7, #28]
 8015f50:	1ad3      	subs	r3, r2, r3
 8015f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d803      	bhi.n	8015f60 <HAL_SPI_TransmitReceive+0x3c2>
 8015f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f5e:	d102      	bne.n	8015f66 <HAL_SPI_TransmitReceive+0x3c8>
 8015f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d103      	bne.n	8015f6e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8015f66:	2303      	movs	r3, #3
 8015f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8015f6c:	e01c      	b.n	8015fa8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015f72:	b29b      	uxth	r3, r3
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	f47f af5b 	bne.w	8015e30 <HAL_SPI_TransmitReceive+0x292>
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015f80:	b29b      	uxth	r3, r3
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	f47f af54 	bne.w	8015e30 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015f88:	69fa      	ldr	r2, [r7, #28]
 8015f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f8c:	68f8      	ldr	r0, [r7, #12]
 8015f8e:	f000 f98f 	bl	80162b0 <SPI_EndRxTxTransaction>
 8015f92:	4603      	mov	r3, r0
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d006      	beq.n	8015fa6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8015f98:	2301      	movs	r3, #1
 8015f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	2220      	movs	r2, #32
 8015fa2:	661a      	str	r2, [r3, #96]	; 0x60
 8015fa4:	e000      	b.n	8015fa8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8015fa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	2201      	movs	r2, #1
 8015fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8015fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3728      	adds	r7, #40	; 0x28
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b088      	sub	sp, #32
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	60f8      	str	r0, [r7, #12]
 8015fcc:	60b9      	str	r1, [r7, #8]
 8015fce:	603b      	str	r3, [r7, #0]
 8015fd0:	4613      	mov	r3, r2
 8015fd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8015fd4:	f7fa fa52 	bl	801047c <HAL_GetTick>
 8015fd8:	4602      	mov	r2, r0
 8015fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fdc:	1a9b      	subs	r3, r3, r2
 8015fde:	683a      	ldr	r2, [r7, #0]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8015fe4:	f7fa fa4a 	bl	801047c <HAL_GetTick>
 8015fe8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8015fea:	4b39      	ldr	r3, [pc, #228]	; (80160d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	015b      	lsls	r3, r3, #5
 8015ff0:	0d1b      	lsrs	r3, r3, #20
 8015ff2:	69fa      	ldr	r2, [r7, #28]
 8015ff4:	fb02 f303 	mul.w	r3, r2, r3
 8015ff8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015ffa:	e054      	b.n	80160a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016002:	d050      	beq.n	80160a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016004:	f7fa fa3a 	bl	801047c <HAL_GetTick>
 8016008:	4602      	mov	r2, r0
 801600a:	69bb      	ldr	r3, [r7, #24]
 801600c:	1ad3      	subs	r3, r2, r3
 801600e:	69fa      	ldr	r2, [r7, #28]
 8016010:	429a      	cmp	r2, r3
 8016012:	d902      	bls.n	801601a <SPI_WaitFlagStateUntilTimeout+0x56>
 8016014:	69fb      	ldr	r3, [r7, #28]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d13d      	bne.n	8016096 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	685a      	ldr	r2, [r3, #4]
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016032:	d111      	bne.n	8016058 <SPI_WaitFlagStateUntilTimeout+0x94>
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	689b      	ldr	r3, [r3, #8]
 8016038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801603c:	d004      	beq.n	8016048 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	689b      	ldr	r3, [r3, #8]
 8016042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016046:	d107      	bne.n	8016058 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	681a      	ldr	r2, [r3, #0]
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016056:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801605c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016060:	d10f      	bne.n	8016082 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	681a      	ldr	r2, [r3, #0]
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016070:	601a      	str	r2, [r3, #0]
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	681a      	ldr	r2, [r3, #0]
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	2201      	movs	r2, #1
 8016086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2200      	movs	r2, #0
 801608e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8016092:	2303      	movs	r3, #3
 8016094:	e017      	b.n	80160c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d101      	bne.n	80160a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801609c:	2300      	movs	r3, #0
 801609e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80160a0:	697b      	ldr	r3, [r7, #20]
 80160a2:	3b01      	subs	r3, #1
 80160a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	689a      	ldr	r2, [r3, #8]
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	4013      	ands	r3, r2
 80160b0:	68ba      	ldr	r2, [r7, #8]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	bf0c      	ite	eq
 80160b6:	2301      	moveq	r3, #1
 80160b8:	2300      	movne	r3, #0
 80160ba:	b2db      	uxtb	r3, r3
 80160bc:	461a      	mov	r2, r3
 80160be:	79fb      	ldrb	r3, [r7, #7]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d19b      	bne.n	8015ffc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80160c4:	2300      	movs	r3, #0
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3720      	adds	r7, #32
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	20000090 	.word	0x20000090

080160d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b08a      	sub	sp, #40	; 0x28
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	607a      	str	r2, [r7, #4]
 80160e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80160e2:	2300      	movs	r3, #0
 80160e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80160e6:	f7fa f9c9 	bl	801047c <HAL_GetTick>
 80160ea:	4602      	mov	r2, r0
 80160ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ee:	1a9b      	subs	r3, r3, r2
 80160f0:	683a      	ldr	r2, [r7, #0]
 80160f2:	4413      	add	r3, r2
 80160f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80160f6:	f7fa f9c1 	bl	801047c <HAL_GetTick>
 80160fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	330c      	adds	r3, #12
 8016102:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8016104:	4b3d      	ldr	r3, [pc, #244]	; (80161fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	4613      	mov	r3, r2
 801610a:	009b      	lsls	r3, r3, #2
 801610c:	4413      	add	r3, r2
 801610e:	00da      	lsls	r2, r3, #3
 8016110:	1ad3      	subs	r3, r2, r3
 8016112:	0d1b      	lsrs	r3, r3, #20
 8016114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016116:	fb02 f303 	mul.w	r3, r2, r3
 801611a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801611c:	e060      	b.n	80161e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8016124:	d107      	bne.n	8016136 <SPI_WaitFifoStateUntilTimeout+0x62>
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d104      	bne.n	8016136 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801612c:	69fb      	ldr	r3, [r7, #28]
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	b2db      	uxtb	r3, r3
 8016132:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8016134:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801613c:	d050      	beq.n	80161e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801613e:	f7fa f99d 	bl	801047c <HAL_GetTick>
 8016142:	4602      	mov	r2, r0
 8016144:	6a3b      	ldr	r3, [r7, #32]
 8016146:	1ad3      	subs	r3, r2, r3
 8016148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801614a:	429a      	cmp	r2, r3
 801614c:	d902      	bls.n	8016154 <SPI_WaitFifoStateUntilTimeout+0x80>
 801614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016150:	2b00      	cmp	r3, #0
 8016152:	d13d      	bne.n	80161d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	685a      	ldr	r2, [r3, #4]
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016162:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801616c:	d111      	bne.n	8016192 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	689b      	ldr	r3, [r3, #8]
 8016172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016176:	d004      	beq.n	8016182 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	689b      	ldr	r3, [r3, #8]
 801617c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016180:	d107      	bne.n	8016192 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	681a      	ldr	r2, [r3, #0]
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016190:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801619a:	d10f      	bne.n	80161bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80161aa:	601a      	str	r2, [r3, #0]
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	681a      	ldr	r2, [r3, #0]
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80161ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	2201      	movs	r2, #1
 80161c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2200      	movs	r2, #0
 80161c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80161cc:	2303      	movs	r3, #3
 80161ce:	e010      	b.n	80161f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80161d0:	69bb      	ldr	r3, [r7, #24]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d101      	bne.n	80161da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80161d6:	2300      	movs	r3, #0
 80161d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80161da:	69bb      	ldr	r3, [r7, #24]
 80161dc:	3b01      	subs	r3, #1
 80161de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	689a      	ldr	r2, [r3, #8]
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	4013      	ands	r3, r2
 80161ea:	687a      	ldr	r2, [r7, #4]
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d196      	bne.n	801611e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80161f0:	2300      	movs	r3, #0
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	3728      	adds	r7, #40	; 0x28
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
 80161fa:	bf00      	nop
 80161fc:	20000090 	.word	0x20000090

08016200 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b086      	sub	sp, #24
 8016204:	af02      	add	r7, sp, #8
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016214:	d111      	bne.n	801623a <SPI_EndRxTransaction+0x3a>
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	689b      	ldr	r3, [r3, #8]
 801621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801621e:	d004      	beq.n	801622a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	689b      	ldr	r3, [r3, #8]
 8016224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016228:	d107      	bne.n	801623a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	681a      	ldr	r2, [r3, #0]
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016238:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	9300      	str	r3, [sp, #0]
 801623e:	68bb      	ldr	r3, [r7, #8]
 8016240:	2200      	movs	r2, #0
 8016242:	2180      	movs	r1, #128	; 0x80
 8016244:	68f8      	ldr	r0, [r7, #12]
 8016246:	f7ff febd 	bl	8015fc4 <SPI_WaitFlagStateUntilTimeout>
 801624a:	4603      	mov	r3, r0
 801624c:	2b00      	cmp	r3, #0
 801624e:	d007      	beq.n	8016260 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016254:	f043 0220 	orr.w	r2, r3, #32
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801625c:	2303      	movs	r3, #3
 801625e:	e023      	b.n	80162a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016268:	d11d      	bne.n	80162a6 <SPI_EndRxTransaction+0xa6>
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	689b      	ldr	r3, [r3, #8]
 801626e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016272:	d004      	beq.n	801627e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	689b      	ldr	r3, [r3, #8]
 8016278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801627c:	d113      	bne.n	80162a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	9300      	str	r3, [sp, #0]
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	2200      	movs	r2, #0
 8016286:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	f7ff ff22 	bl	80160d4 <SPI_WaitFifoStateUntilTimeout>
 8016290:	4603      	mov	r3, r0
 8016292:	2b00      	cmp	r3, #0
 8016294:	d007      	beq.n	80162a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801629a:	f043 0220 	orr.w	r2, r3, #32
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80162a2:	2303      	movs	r3, #3
 80162a4:	e000      	b.n	80162a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80162a6:	2300      	movs	r3, #0
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3710      	adds	r7, #16
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b086      	sub	sp, #24
 80162b4:	af02      	add	r7, sp, #8
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	9300      	str	r3, [sp, #0]
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	2200      	movs	r2, #0
 80162c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80162c8:	68f8      	ldr	r0, [r7, #12]
 80162ca:	f7ff ff03 	bl	80160d4 <SPI_WaitFifoStateUntilTimeout>
 80162ce:	4603      	mov	r3, r0
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d007      	beq.n	80162e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162d8:	f043 0220 	orr.w	r2, r3, #32
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80162e0:	2303      	movs	r3, #3
 80162e2:	e027      	b.n	8016334 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	9300      	str	r3, [sp, #0]
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	2200      	movs	r2, #0
 80162ec:	2180      	movs	r1, #128	; 0x80
 80162ee:	68f8      	ldr	r0, [r7, #12]
 80162f0:	f7ff fe68 	bl	8015fc4 <SPI_WaitFlagStateUntilTimeout>
 80162f4:	4603      	mov	r3, r0
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d007      	beq.n	801630a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162fe:	f043 0220 	orr.w	r2, r3, #32
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8016306:	2303      	movs	r3, #3
 8016308:	e014      	b.n	8016334 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	9300      	str	r3, [sp, #0]
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	2200      	movs	r2, #0
 8016312:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8016316:	68f8      	ldr	r0, [r7, #12]
 8016318:	f7ff fedc 	bl	80160d4 <SPI_WaitFifoStateUntilTimeout>
 801631c:	4603      	mov	r3, r0
 801631e:	2b00      	cmp	r3, #0
 8016320:	d007      	beq.n	8016332 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016326:	f043 0220 	orr.w	r2, r3, #32
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801632e:	2303      	movs	r3, #3
 8016330:	e000      	b.n	8016334 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8016332:	2300      	movs	r3, #0
}
 8016334:	4618      	mov	r0, r3
 8016336:	3710      	adds	r7, #16
 8016338:	46bd      	mov	sp, r7
 801633a:	bd80      	pop	{r7, pc}

0801633c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d101      	bne.n	801634e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801634a:	2301      	movs	r3, #1
 801634c:	e049      	b.n	80163e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016354:	b2db      	uxtb	r3, r3
 8016356:	2b00      	cmp	r3, #0
 8016358:	d106      	bne.n	8016368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	2200      	movs	r2, #0
 801635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f7f9 fc1c 	bl	800fba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2202      	movs	r2, #2
 801636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681a      	ldr	r2, [r3, #0]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	3304      	adds	r3, #4
 8016378:	4619      	mov	r1, r3
 801637a:	4610      	mov	r0, r2
 801637c:	f001 f948 	bl	8017610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2201      	movs	r2, #1
 8016384:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2201      	movs	r2, #1
 801638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2201      	movs	r2, #1
 8016394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2201      	movs	r2, #1
 801639c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2201      	movs	r2, #1
 80163a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2201      	movs	r2, #1
 80163ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2201      	movs	r2, #1
 80163b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2201      	movs	r2, #1
 80163bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	2201      	movs	r2, #1
 80163c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2201      	movs	r2, #1
 80163cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	2201      	movs	r2, #1
 80163d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2201      	movs	r2, #1
 80163dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80163e0:	2300      	movs	r3, #0
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	3708      	adds	r7, #8
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}
	...

080163ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80163ec:	b480      	push	{r7}
 80163ee:	b085      	sub	sp, #20
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d001      	beq.n	8016404 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016400:	2301      	movs	r3, #1
 8016402:	e047      	b.n	8016494 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	2202      	movs	r2, #2
 8016408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	4a23      	ldr	r2, [pc, #140]	; (80164a0 <HAL_TIM_Base_Start+0xb4>)
 8016412:	4293      	cmp	r3, r2
 8016414:	d01d      	beq.n	8016452 <HAL_TIM_Base_Start+0x66>
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801641e:	d018      	beq.n	8016452 <HAL_TIM_Base_Start+0x66>
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	4a1f      	ldr	r2, [pc, #124]	; (80164a4 <HAL_TIM_Base_Start+0xb8>)
 8016426:	4293      	cmp	r3, r2
 8016428:	d013      	beq.n	8016452 <HAL_TIM_Base_Start+0x66>
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	4a1e      	ldr	r2, [pc, #120]	; (80164a8 <HAL_TIM_Base_Start+0xbc>)
 8016430:	4293      	cmp	r3, r2
 8016432:	d00e      	beq.n	8016452 <HAL_TIM_Base_Start+0x66>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	4a1c      	ldr	r2, [pc, #112]	; (80164ac <HAL_TIM_Base_Start+0xc0>)
 801643a:	4293      	cmp	r3, r2
 801643c:	d009      	beq.n	8016452 <HAL_TIM_Base_Start+0x66>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	4a1b      	ldr	r2, [pc, #108]	; (80164b0 <HAL_TIM_Base_Start+0xc4>)
 8016444:	4293      	cmp	r3, r2
 8016446:	d004      	beq.n	8016452 <HAL_TIM_Base_Start+0x66>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	4a19      	ldr	r2, [pc, #100]	; (80164b4 <HAL_TIM_Base_Start+0xc8>)
 801644e:	4293      	cmp	r3, r2
 8016450:	d115      	bne.n	801647e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	689a      	ldr	r2, [r3, #8]
 8016458:	4b17      	ldr	r3, [pc, #92]	; (80164b8 <HAL_TIM_Base_Start+0xcc>)
 801645a:	4013      	ands	r3, r2
 801645c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	2b06      	cmp	r3, #6
 8016462:	d015      	beq.n	8016490 <HAL_TIM_Base_Start+0xa4>
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801646a:	d011      	beq.n	8016490 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	681a      	ldr	r2, [r3, #0]
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	f042 0201 	orr.w	r2, r2, #1
 801647a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801647c:	e008      	b.n	8016490 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	f042 0201 	orr.w	r2, r2, #1
 801648c:	601a      	str	r2, [r3, #0]
 801648e:	e000      	b.n	8016492 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016490:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016492:	2300      	movs	r3, #0
}
 8016494:	4618      	mov	r0, r3
 8016496:	3714      	adds	r7, #20
 8016498:	46bd      	mov	sp, r7
 801649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649e:	4770      	bx	lr
 80164a0:	40012c00 	.word	0x40012c00
 80164a4:	40000400 	.word	0x40000400
 80164a8:	40000800 	.word	0x40000800
 80164ac:	40000c00 	.word	0x40000c00
 80164b0:	40013400 	.word	0x40013400
 80164b4:	40014000 	.word	0x40014000
 80164b8:	00010007 	.word	0x00010007

080164bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80164bc:	b480      	push	{r7}
 80164be:	b085      	sub	sp, #20
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80164ca:	b2db      	uxtb	r3, r3
 80164cc:	2b01      	cmp	r3, #1
 80164ce:	d001      	beq.n	80164d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80164d0:	2301      	movs	r3, #1
 80164d2:	e04f      	b.n	8016574 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2202      	movs	r2, #2
 80164d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	68da      	ldr	r2, [r3, #12]
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	f042 0201 	orr.w	r2, r2, #1
 80164ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	4a23      	ldr	r2, [pc, #140]	; (8016580 <HAL_TIM_Base_Start_IT+0xc4>)
 80164f2:	4293      	cmp	r3, r2
 80164f4:	d01d      	beq.n	8016532 <HAL_TIM_Base_Start_IT+0x76>
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80164fe:	d018      	beq.n	8016532 <HAL_TIM_Base_Start_IT+0x76>
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	4a1f      	ldr	r2, [pc, #124]	; (8016584 <HAL_TIM_Base_Start_IT+0xc8>)
 8016506:	4293      	cmp	r3, r2
 8016508:	d013      	beq.n	8016532 <HAL_TIM_Base_Start_IT+0x76>
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	4a1e      	ldr	r2, [pc, #120]	; (8016588 <HAL_TIM_Base_Start_IT+0xcc>)
 8016510:	4293      	cmp	r3, r2
 8016512:	d00e      	beq.n	8016532 <HAL_TIM_Base_Start_IT+0x76>
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	4a1c      	ldr	r2, [pc, #112]	; (801658c <HAL_TIM_Base_Start_IT+0xd0>)
 801651a:	4293      	cmp	r3, r2
 801651c:	d009      	beq.n	8016532 <HAL_TIM_Base_Start_IT+0x76>
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	4a1b      	ldr	r2, [pc, #108]	; (8016590 <HAL_TIM_Base_Start_IT+0xd4>)
 8016524:	4293      	cmp	r3, r2
 8016526:	d004      	beq.n	8016532 <HAL_TIM_Base_Start_IT+0x76>
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	4a19      	ldr	r2, [pc, #100]	; (8016594 <HAL_TIM_Base_Start_IT+0xd8>)
 801652e:	4293      	cmp	r3, r2
 8016530:	d115      	bne.n	801655e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	689a      	ldr	r2, [r3, #8]
 8016538:	4b17      	ldr	r3, [pc, #92]	; (8016598 <HAL_TIM_Base_Start_IT+0xdc>)
 801653a:	4013      	ands	r3, r2
 801653c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2b06      	cmp	r3, #6
 8016542:	d015      	beq.n	8016570 <HAL_TIM_Base_Start_IT+0xb4>
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801654a:	d011      	beq.n	8016570 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	f042 0201 	orr.w	r2, r2, #1
 801655a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801655c:	e008      	b.n	8016570 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	681a      	ldr	r2, [r3, #0]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	f042 0201 	orr.w	r2, r2, #1
 801656c:	601a      	str	r2, [r3, #0]
 801656e:	e000      	b.n	8016572 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016570:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016572:	2300      	movs	r3, #0
}
 8016574:	4618      	mov	r0, r3
 8016576:	3714      	adds	r7, #20
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr
 8016580:	40012c00 	.word	0x40012c00
 8016584:	40000400 	.word	0x40000400
 8016588:	40000800 	.word	0x40000800
 801658c:	40000c00 	.word	0x40000c00
 8016590:	40013400 	.word	0x40013400
 8016594:	40014000 	.word	0x40014000
 8016598:	00010007 	.word	0x00010007

0801659c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b082      	sub	sp, #8
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d101      	bne.n	80165ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80165aa:	2301      	movs	r3, #1
 80165ac:	e049      	b.n	8016642 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80165b4:	b2db      	uxtb	r3, r3
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d106      	bne.n	80165c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2200      	movs	r2, #0
 80165be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f7f9 fbd4 	bl	800fd70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2202      	movs	r2, #2
 80165cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681a      	ldr	r2, [r3, #0]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	3304      	adds	r3, #4
 80165d8:	4619      	mov	r1, r3
 80165da:	4610      	mov	r0, r2
 80165dc:	f001 f818 	bl	8017610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2201      	movs	r2, #1
 80165e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2201      	movs	r2, #1
 80165ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2201      	movs	r2, #1
 80165f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2201      	movs	r2, #1
 80165fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2201      	movs	r2, #1
 8016604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2201      	movs	r2, #1
 801660c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2201      	movs	r2, #1
 8016614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2201      	movs	r2, #1
 801661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2201      	movs	r2, #1
 8016624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2201      	movs	r2, #1
 801662c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2201      	movs	r2, #1
 8016634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2201      	movs	r2, #1
 801663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016640:	2300      	movs	r3, #0
}
 8016642:	4618      	mov	r0, r3
 8016644:	3708      	adds	r7, #8
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
	...

0801664c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b084      	sub	sp, #16
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d109      	bne.n	8016670 <HAL_TIM_PWM_Start+0x24>
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016662:	b2db      	uxtb	r3, r3
 8016664:	2b01      	cmp	r3, #1
 8016666:	bf14      	ite	ne
 8016668:	2301      	movne	r3, #1
 801666a:	2300      	moveq	r3, #0
 801666c:	b2db      	uxtb	r3, r3
 801666e:	e03c      	b.n	80166ea <HAL_TIM_PWM_Start+0x9e>
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	2b04      	cmp	r3, #4
 8016674:	d109      	bne.n	801668a <HAL_TIM_PWM_Start+0x3e>
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801667c:	b2db      	uxtb	r3, r3
 801667e:	2b01      	cmp	r3, #1
 8016680:	bf14      	ite	ne
 8016682:	2301      	movne	r3, #1
 8016684:	2300      	moveq	r3, #0
 8016686:	b2db      	uxtb	r3, r3
 8016688:	e02f      	b.n	80166ea <HAL_TIM_PWM_Start+0x9e>
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	2b08      	cmp	r3, #8
 801668e:	d109      	bne.n	80166a4 <HAL_TIM_PWM_Start+0x58>
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016696:	b2db      	uxtb	r3, r3
 8016698:	2b01      	cmp	r3, #1
 801669a:	bf14      	ite	ne
 801669c:	2301      	movne	r3, #1
 801669e:	2300      	moveq	r3, #0
 80166a0:	b2db      	uxtb	r3, r3
 80166a2:	e022      	b.n	80166ea <HAL_TIM_PWM_Start+0x9e>
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	2b0c      	cmp	r3, #12
 80166a8:	d109      	bne.n	80166be <HAL_TIM_PWM_Start+0x72>
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80166b0:	b2db      	uxtb	r3, r3
 80166b2:	2b01      	cmp	r3, #1
 80166b4:	bf14      	ite	ne
 80166b6:	2301      	movne	r3, #1
 80166b8:	2300      	moveq	r3, #0
 80166ba:	b2db      	uxtb	r3, r3
 80166bc:	e015      	b.n	80166ea <HAL_TIM_PWM_Start+0x9e>
 80166be:	683b      	ldr	r3, [r7, #0]
 80166c0:	2b10      	cmp	r3, #16
 80166c2:	d109      	bne.n	80166d8 <HAL_TIM_PWM_Start+0x8c>
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80166ca:	b2db      	uxtb	r3, r3
 80166cc:	2b01      	cmp	r3, #1
 80166ce:	bf14      	ite	ne
 80166d0:	2301      	movne	r3, #1
 80166d2:	2300      	moveq	r3, #0
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	e008      	b.n	80166ea <HAL_TIM_PWM_Start+0x9e>
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	bf14      	ite	ne
 80166e4:	2301      	movne	r3, #1
 80166e6:	2300      	moveq	r3, #0
 80166e8:	b2db      	uxtb	r3, r3
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d001      	beq.n	80166f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80166ee:	2301      	movs	r3, #1
 80166f0:	e09c      	b.n	801682c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d104      	bne.n	8016702 <HAL_TIM_PWM_Start+0xb6>
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2202      	movs	r2, #2
 80166fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016700:	e023      	b.n	801674a <HAL_TIM_PWM_Start+0xfe>
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	2b04      	cmp	r3, #4
 8016706:	d104      	bne.n	8016712 <HAL_TIM_PWM_Start+0xc6>
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2202      	movs	r2, #2
 801670c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016710:	e01b      	b.n	801674a <HAL_TIM_PWM_Start+0xfe>
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	2b08      	cmp	r3, #8
 8016716:	d104      	bne.n	8016722 <HAL_TIM_PWM_Start+0xd6>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2202      	movs	r2, #2
 801671c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016720:	e013      	b.n	801674a <HAL_TIM_PWM_Start+0xfe>
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	2b0c      	cmp	r3, #12
 8016726:	d104      	bne.n	8016732 <HAL_TIM_PWM_Start+0xe6>
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2202      	movs	r2, #2
 801672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016730:	e00b      	b.n	801674a <HAL_TIM_PWM_Start+0xfe>
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	2b10      	cmp	r3, #16
 8016736:	d104      	bne.n	8016742 <HAL_TIM_PWM_Start+0xf6>
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2202      	movs	r2, #2
 801673c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8016740:	e003      	b.n	801674a <HAL_TIM_PWM_Start+0xfe>
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2202      	movs	r2, #2
 8016746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	2201      	movs	r2, #1
 8016750:	6839      	ldr	r1, [r7, #0]
 8016752:	4618      	mov	r0, r3
 8016754:	f001 fc8c 	bl	8018070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	4a35      	ldr	r2, [pc, #212]	; (8016834 <HAL_TIM_PWM_Start+0x1e8>)
 801675e:	4293      	cmp	r3, r2
 8016760:	d013      	beq.n	801678a <HAL_TIM_PWM_Start+0x13e>
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	4a34      	ldr	r2, [pc, #208]	; (8016838 <HAL_TIM_PWM_Start+0x1ec>)
 8016768:	4293      	cmp	r3, r2
 801676a:	d00e      	beq.n	801678a <HAL_TIM_PWM_Start+0x13e>
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	4a32      	ldr	r2, [pc, #200]	; (801683c <HAL_TIM_PWM_Start+0x1f0>)
 8016772:	4293      	cmp	r3, r2
 8016774:	d009      	beq.n	801678a <HAL_TIM_PWM_Start+0x13e>
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	4a31      	ldr	r2, [pc, #196]	; (8016840 <HAL_TIM_PWM_Start+0x1f4>)
 801677c:	4293      	cmp	r3, r2
 801677e:	d004      	beq.n	801678a <HAL_TIM_PWM_Start+0x13e>
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	4a2f      	ldr	r2, [pc, #188]	; (8016844 <HAL_TIM_PWM_Start+0x1f8>)
 8016786:	4293      	cmp	r3, r2
 8016788:	d101      	bne.n	801678e <HAL_TIM_PWM_Start+0x142>
 801678a:	2301      	movs	r3, #1
 801678c:	e000      	b.n	8016790 <HAL_TIM_PWM_Start+0x144>
 801678e:	2300      	movs	r3, #0
 8016790:	2b00      	cmp	r3, #0
 8016792:	d007      	beq.n	80167a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80167a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4a22      	ldr	r2, [pc, #136]	; (8016834 <HAL_TIM_PWM_Start+0x1e8>)
 80167aa:	4293      	cmp	r3, r2
 80167ac:	d01d      	beq.n	80167ea <HAL_TIM_PWM_Start+0x19e>
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80167b6:	d018      	beq.n	80167ea <HAL_TIM_PWM_Start+0x19e>
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4a22      	ldr	r2, [pc, #136]	; (8016848 <HAL_TIM_PWM_Start+0x1fc>)
 80167be:	4293      	cmp	r3, r2
 80167c0:	d013      	beq.n	80167ea <HAL_TIM_PWM_Start+0x19e>
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	4a21      	ldr	r2, [pc, #132]	; (801684c <HAL_TIM_PWM_Start+0x200>)
 80167c8:	4293      	cmp	r3, r2
 80167ca:	d00e      	beq.n	80167ea <HAL_TIM_PWM_Start+0x19e>
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	4a1f      	ldr	r2, [pc, #124]	; (8016850 <HAL_TIM_PWM_Start+0x204>)
 80167d2:	4293      	cmp	r3, r2
 80167d4:	d009      	beq.n	80167ea <HAL_TIM_PWM_Start+0x19e>
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	4a17      	ldr	r2, [pc, #92]	; (8016838 <HAL_TIM_PWM_Start+0x1ec>)
 80167dc:	4293      	cmp	r3, r2
 80167de:	d004      	beq.n	80167ea <HAL_TIM_PWM_Start+0x19e>
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	4a15      	ldr	r2, [pc, #84]	; (801683c <HAL_TIM_PWM_Start+0x1f0>)
 80167e6:	4293      	cmp	r3, r2
 80167e8:	d115      	bne.n	8016816 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	689a      	ldr	r2, [r3, #8]
 80167f0:	4b18      	ldr	r3, [pc, #96]	; (8016854 <HAL_TIM_PWM_Start+0x208>)
 80167f2:	4013      	ands	r3, r2
 80167f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	2b06      	cmp	r3, #6
 80167fa:	d015      	beq.n	8016828 <HAL_TIM_PWM_Start+0x1dc>
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016802:	d011      	beq.n	8016828 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	f042 0201 	orr.w	r2, r2, #1
 8016812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016814:	e008      	b.n	8016828 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	681a      	ldr	r2, [r3, #0]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	f042 0201 	orr.w	r2, r2, #1
 8016824:	601a      	str	r2, [r3, #0]
 8016826:	e000      	b.n	801682a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016828:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801682a:	2300      	movs	r3, #0
}
 801682c:	4618      	mov	r0, r3
 801682e:	3710      	adds	r7, #16
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}
 8016834:	40012c00 	.word	0x40012c00
 8016838:	40013400 	.word	0x40013400
 801683c:	40014000 	.word	0x40014000
 8016840:	40014400 	.word	0x40014400
 8016844:	40014800 	.word	0x40014800
 8016848:	40000400 	.word	0x40000400
 801684c:	40000800 	.word	0x40000800
 8016850:	40000c00 	.word	0x40000c00
 8016854:	00010007 	.word	0x00010007

08016858 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d101      	bne.n	801686a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8016866:	2301      	movs	r3, #1
 8016868:	e049      	b.n	80168fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016870:	b2db      	uxtb	r3, r3
 8016872:	2b00      	cmp	r3, #0
 8016874:	d106      	bne.n	8016884 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2200      	movs	r2, #0
 801687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f000 f841 	bl	8016906 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2202      	movs	r2, #2
 8016888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681a      	ldr	r2, [r3, #0]
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	3304      	adds	r3, #4
 8016894:	4619      	mov	r1, r3
 8016896:	4610      	mov	r0, r2
 8016898:	f000 feba 	bl	8017610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2201      	movs	r2, #1
 80168a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2201      	movs	r2, #1
 80168a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2201      	movs	r2, #1
 80168b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2201      	movs	r2, #1
 80168b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2201      	movs	r2, #1
 80168c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	2201      	movs	r2, #1
 80168c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2201      	movs	r2, #1
 80168d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	2201      	movs	r2, #1
 80168d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2201      	movs	r2, #1
 80168e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2201      	movs	r2, #1
 80168e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2201      	movs	r2, #1
 80168f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2201      	movs	r2, #1
 80168f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80168fc:	2300      	movs	r3, #0
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3708      	adds	r7, #8
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}

08016906 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8016906:	b480      	push	{r7}
 8016908:	b083      	sub	sp, #12
 801690a:	af00      	add	r7, sp, #0
 801690c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801690e:	bf00      	nop
 8016910:	370c      	adds	r7, #12
 8016912:	46bd      	mov	sp, r7
 8016914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016918:	4770      	bx	lr
	...

0801691c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b084      	sub	sp, #16
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
 8016924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016926:	2300      	movs	r3, #0
 8016928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d104      	bne.n	801693a <HAL_TIM_IC_Start_IT+0x1e>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016936:	b2db      	uxtb	r3, r3
 8016938:	e023      	b.n	8016982 <HAL_TIM_IC_Start_IT+0x66>
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	2b04      	cmp	r3, #4
 801693e:	d104      	bne.n	801694a <HAL_TIM_IC_Start_IT+0x2e>
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016946:	b2db      	uxtb	r3, r3
 8016948:	e01b      	b.n	8016982 <HAL_TIM_IC_Start_IT+0x66>
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	2b08      	cmp	r3, #8
 801694e:	d104      	bne.n	801695a <HAL_TIM_IC_Start_IT+0x3e>
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016956:	b2db      	uxtb	r3, r3
 8016958:	e013      	b.n	8016982 <HAL_TIM_IC_Start_IT+0x66>
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	2b0c      	cmp	r3, #12
 801695e:	d104      	bne.n	801696a <HAL_TIM_IC_Start_IT+0x4e>
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016966:	b2db      	uxtb	r3, r3
 8016968:	e00b      	b.n	8016982 <HAL_TIM_IC_Start_IT+0x66>
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	2b10      	cmp	r3, #16
 801696e:	d104      	bne.n	801697a <HAL_TIM_IC_Start_IT+0x5e>
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016976:	b2db      	uxtb	r3, r3
 8016978:	e003      	b.n	8016982 <HAL_TIM_IC_Start_IT+0x66>
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016980:	b2db      	uxtb	r3, r3
 8016982:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8016984:	683b      	ldr	r3, [r7, #0]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d104      	bne.n	8016994 <HAL_TIM_IC_Start_IT+0x78>
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016990:	b2db      	uxtb	r3, r3
 8016992:	e013      	b.n	80169bc <HAL_TIM_IC_Start_IT+0xa0>
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	2b04      	cmp	r3, #4
 8016998:	d104      	bne.n	80169a4 <HAL_TIM_IC_Start_IT+0x88>
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80169a0:	b2db      	uxtb	r3, r3
 80169a2:	e00b      	b.n	80169bc <HAL_TIM_IC_Start_IT+0xa0>
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	2b08      	cmp	r3, #8
 80169a8:	d104      	bne.n	80169b4 <HAL_TIM_IC_Start_IT+0x98>
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80169b0:	b2db      	uxtb	r3, r3
 80169b2:	e003      	b.n	80169bc <HAL_TIM_IC_Start_IT+0xa0>
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80169ba:	b2db      	uxtb	r3, r3
 80169bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80169be:	7bbb      	ldrb	r3, [r7, #14]
 80169c0:	2b01      	cmp	r3, #1
 80169c2:	d102      	bne.n	80169ca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80169c4:	7b7b      	ldrb	r3, [r7, #13]
 80169c6:	2b01      	cmp	r3, #1
 80169c8:	d001      	beq.n	80169ce <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80169ca:	2301      	movs	r3, #1
 80169cc:	e0dd      	b.n	8016b8a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d104      	bne.n	80169de <HAL_TIM_IC_Start_IT+0xc2>
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2202      	movs	r2, #2
 80169d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80169dc:	e023      	b.n	8016a26 <HAL_TIM_IC_Start_IT+0x10a>
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	2b04      	cmp	r3, #4
 80169e2:	d104      	bne.n	80169ee <HAL_TIM_IC_Start_IT+0xd2>
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2202      	movs	r2, #2
 80169e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80169ec:	e01b      	b.n	8016a26 <HAL_TIM_IC_Start_IT+0x10a>
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	2b08      	cmp	r3, #8
 80169f2:	d104      	bne.n	80169fe <HAL_TIM_IC_Start_IT+0xe2>
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2202      	movs	r2, #2
 80169f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80169fc:	e013      	b.n	8016a26 <HAL_TIM_IC_Start_IT+0x10a>
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	2b0c      	cmp	r3, #12
 8016a02:	d104      	bne.n	8016a0e <HAL_TIM_IC_Start_IT+0xf2>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	2202      	movs	r2, #2
 8016a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016a0c:	e00b      	b.n	8016a26 <HAL_TIM_IC_Start_IT+0x10a>
 8016a0e:	683b      	ldr	r3, [r7, #0]
 8016a10:	2b10      	cmp	r3, #16
 8016a12:	d104      	bne.n	8016a1e <HAL_TIM_IC_Start_IT+0x102>
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2202      	movs	r2, #2
 8016a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8016a1c:	e003      	b.n	8016a26 <HAL_TIM_IC_Start_IT+0x10a>
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2202      	movs	r2, #2
 8016a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d104      	bne.n	8016a36 <HAL_TIM_IC_Start_IT+0x11a>
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2202      	movs	r2, #2
 8016a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a34:	e013      	b.n	8016a5e <HAL_TIM_IC_Start_IT+0x142>
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	2b04      	cmp	r3, #4
 8016a3a:	d104      	bne.n	8016a46 <HAL_TIM_IC_Start_IT+0x12a>
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2202      	movs	r2, #2
 8016a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a44:	e00b      	b.n	8016a5e <HAL_TIM_IC_Start_IT+0x142>
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	2b08      	cmp	r3, #8
 8016a4a:	d104      	bne.n	8016a56 <HAL_TIM_IC_Start_IT+0x13a>
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2202      	movs	r2, #2
 8016a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8016a54:	e003      	b.n	8016a5e <HAL_TIM_IC_Start_IT+0x142>
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	2202      	movs	r2, #2
 8016a5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	2b0c      	cmp	r3, #12
 8016a62:	d841      	bhi.n	8016ae8 <HAL_TIM_IC_Start_IT+0x1cc>
 8016a64:	a201      	add	r2, pc, #4	; (adr r2, 8016a6c <HAL_TIM_IC_Start_IT+0x150>)
 8016a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a6a:	bf00      	nop
 8016a6c:	08016aa1 	.word	0x08016aa1
 8016a70:	08016ae9 	.word	0x08016ae9
 8016a74:	08016ae9 	.word	0x08016ae9
 8016a78:	08016ae9 	.word	0x08016ae9
 8016a7c:	08016ab3 	.word	0x08016ab3
 8016a80:	08016ae9 	.word	0x08016ae9
 8016a84:	08016ae9 	.word	0x08016ae9
 8016a88:	08016ae9 	.word	0x08016ae9
 8016a8c:	08016ac5 	.word	0x08016ac5
 8016a90:	08016ae9 	.word	0x08016ae9
 8016a94:	08016ae9 	.word	0x08016ae9
 8016a98:	08016ae9 	.word	0x08016ae9
 8016a9c:	08016ad7 	.word	0x08016ad7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	68da      	ldr	r2, [r3, #12]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	f042 0202 	orr.w	r2, r2, #2
 8016aae:	60da      	str	r2, [r3, #12]
      break;
 8016ab0:	e01d      	b.n	8016aee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	68da      	ldr	r2, [r3, #12]
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f042 0204 	orr.w	r2, r2, #4
 8016ac0:	60da      	str	r2, [r3, #12]
      break;
 8016ac2:	e014      	b.n	8016aee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	68da      	ldr	r2, [r3, #12]
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	f042 0208 	orr.w	r2, r2, #8
 8016ad2:	60da      	str	r2, [r3, #12]
      break;
 8016ad4:	e00b      	b.n	8016aee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	68da      	ldr	r2, [r3, #12]
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	f042 0210 	orr.w	r2, r2, #16
 8016ae4:	60da      	str	r2, [r3, #12]
      break;
 8016ae6:	e002      	b.n	8016aee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8016ae8:	2301      	movs	r3, #1
 8016aea:	73fb      	strb	r3, [r7, #15]
      break;
 8016aec:	bf00      	nop
  }

  if (status == HAL_OK)
 8016aee:	7bfb      	ldrb	r3, [r7, #15]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d149      	bne.n	8016b88 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	2201      	movs	r2, #1
 8016afa:	6839      	ldr	r1, [r7, #0]
 8016afc:	4618      	mov	r0, r3
 8016afe:	f001 fab7 	bl	8018070 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	4a23      	ldr	r2, [pc, #140]	; (8016b94 <HAL_TIM_IC_Start_IT+0x278>)
 8016b08:	4293      	cmp	r3, r2
 8016b0a:	d01d      	beq.n	8016b48 <HAL_TIM_IC_Start_IT+0x22c>
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016b14:	d018      	beq.n	8016b48 <HAL_TIM_IC_Start_IT+0x22c>
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	4a1f      	ldr	r2, [pc, #124]	; (8016b98 <HAL_TIM_IC_Start_IT+0x27c>)
 8016b1c:	4293      	cmp	r3, r2
 8016b1e:	d013      	beq.n	8016b48 <HAL_TIM_IC_Start_IT+0x22c>
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	4a1d      	ldr	r2, [pc, #116]	; (8016b9c <HAL_TIM_IC_Start_IT+0x280>)
 8016b26:	4293      	cmp	r3, r2
 8016b28:	d00e      	beq.n	8016b48 <HAL_TIM_IC_Start_IT+0x22c>
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	4a1c      	ldr	r2, [pc, #112]	; (8016ba0 <HAL_TIM_IC_Start_IT+0x284>)
 8016b30:	4293      	cmp	r3, r2
 8016b32:	d009      	beq.n	8016b48 <HAL_TIM_IC_Start_IT+0x22c>
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	4a1a      	ldr	r2, [pc, #104]	; (8016ba4 <HAL_TIM_IC_Start_IT+0x288>)
 8016b3a:	4293      	cmp	r3, r2
 8016b3c:	d004      	beq.n	8016b48 <HAL_TIM_IC_Start_IT+0x22c>
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	4a19      	ldr	r2, [pc, #100]	; (8016ba8 <HAL_TIM_IC_Start_IT+0x28c>)
 8016b44:	4293      	cmp	r3, r2
 8016b46:	d115      	bne.n	8016b74 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	689a      	ldr	r2, [r3, #8]
 8016b4e:	4b17      	ldr	r3, [pc, #92]	; (8016bac <HAL_TIM_IC_Start_IT+0x290>)
 8016b50:	4013      	ands	r3, r2
 8016b52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	2b06      	cmp	r3, #6
 8016b58:	d015      	beq.n	8016b86 <HAL_TIM_IC_Start_IT+0x26a>
 8016b5a:	68bb      	ldr	r3, [r7, #8]
 8016b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b60:	d011      	beq.n	8016b86 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	681a      	ldr	r2, [r3, #0]
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	f042 0201 	orr.w	r2, r2, #1
 8016b70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b72:	e008      	b.n	8016b86 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	681a      	ldr	r2, [r3, #0]
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	f042 0201 	orr.w	r2, r2, #1
 8016b82:	601a      	str	r2, [r3, #0]
 8016b84:	e000      	b.n	8016b88 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8016b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3710      	adds	r7, #16
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	40012c00 	.word	0x40012c00
 8016b98:	40000400 	.word	0x40000400
 8016b9c:	40000800 	.word	0x40000800
 8016ba0:	40000c00 	.word	0x40000c00
 8016ba4:	40013400 	.word	0x40013400
 8016ba8:	40014000 	.word	0x40014000
 8016bac:	00010007 	.word	0x00010007

08016bb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b086      	sub	sp, #24
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d101      	bne.n	8016bc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8016bc0:	2301      	movs	r3, #1
 8016bc2:	e097      	b.n	8016cf4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016bca:	b2db      	uxtb	r3, r3
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d106      	bne.n	8016bde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8016bd8:	6878      	ldr	r0, [r7, #4]
 8016bda:	f7f9 f87d 	bl	800fcd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2202      	movs	r2, #2
 8016be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	689b      	ldr	r3, [r3, #8]
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	6812      	ldr	r2, [r2, #0]
 8016bf0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8016bf4:	f023 0307 	bic.w	r3, r3, #7
 8016bf8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681a      	ldr	r2, [r3, #0]
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	3304      	adds	r3, #4
 8016c02:	4619      	mov	r1, r3
 8016c04:	4610      	mov	r0, r2
 8016c06:	f000 fd03 	bl	8017610 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	689b      	ldr	r3, [r3, #8]
 8016c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	699b      	ldr	r3, [r3, #24]
 8016c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	6a1b      	ldr	r3, [r3, #32]
 8016c20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	697a      	ldr	r2, [r7, #20]
 8016c28:	4313      	orrs	r3, r2
 8016c2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8016c2c:	693b      	ldr	r3, [r7, #16]
 8016c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016c32:	f023 0303 	bic.w	r3, r3, #3
 8016c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	689a      	ldr	r2, [r3, #8]
 8016c3c:	683b      	ldr	r3, [r7, #0]
 8016c3e:	699b      	ldr	r3, [r3, #24]
 8016c40:	021b      	lsls	r3, r3, #8
 8016c42:	4313      	orrs	r3, r2
 8016c44:	693a      	ldr	r2, [r7, #16]
 8016c46:	4313      	orrs	r3, r2
 8016c48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8016c50:	f023 030c 	bic.w	r3, r3, #12
 8016c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8016c56:	693b      	ldr	r3, [r7, #16]
 8016c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8016c62:	683b      	ldr	r3, [r7, #0]
 8016c64:	68da      	ldr	r2, [r3, #12]
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	69db      	ldr	r3, [r3, #28]
 8016c6a:	021b      	lsls	r3, r3, #8
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	693a      	ldr	r2, [r7, #16]
 8016c70:	4313      	orrs	r3, r2
 8016c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	691b      	ldr	r3, [r3, #16]
 8016c78:	011a      	lsls	r2, r3, #4
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	6a1b      	ldr	r3, [r3, #32]
 8016c7e:	031b      	lsls	r3, r3, #12
 8016c80:	4313      	orrs	r3, r2
 8016c82:	693a      	ldr	r2, [r7, #16]
 8016c84:	4313      	orrs	r3, r2
 8016c86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8016c8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8016c96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8016c98:	683b      	ldr	r3, [r7, #0]
 8016c9a:	685a      	ldr	r2, [r3, #4]
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	695b      	ldr	r3, [r3, #20]
 8016ca0:	011b      	lsls	r3, r3, #4
 8016ca2:	4313      	orrs	r3, r2
 8016ca4:	68fa      	ldr	r2, [r7, #12]
 8016ca6:	4313      	orrs	r3, r2
 8016ca8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	697a      	ldr	r2, [r7, #20]
 8016cb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	693a      	ldr	r2, [r7, #16]
 8016cb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	68fa      	ldr	r2, [r7, #12]
 8016cc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2201      	movs	r2, #1
 8016cc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2201      	movs	r2, #1
 8016cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2201      	movs	r2, #1
 8016cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	2201      	movs	r2, #1
 8016cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	2201      	movs	r2, #1
 8016ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2201      	movs	r2, #1
 8016cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016cf2:	2300      	movs	r3, #0
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3718      	adds	r7, #24
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016d0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016d14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8016d26:	683b      	ldr	r3, [r7, #0]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d110      	bne.n	8016d4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8016d2c:	7bfb      	ldrb	r3, [r7, #15]
 8016d2e:	2b01      	cmp	r3, #1
 8016d30:	d102      	bne.n	8016d38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8016d32:	7b7b      	ldrb	r3, [r7, #13]
 8016d34:	2b01      	cmp	r3, #1
 8016d36:	d001      	beq.n	8016d3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8016d38:	2301      	movs	r3, #1
 8016d3a:	e069      	b.n	8016e10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2202      	movs	r2, #2
 8016d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	2202      	movs	r2, #2
 8016d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016d4c:	e031      	b.n	8016db2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8016d4e:	683b      	ldr	r3, [r7, #0]
 8016d50:	2b04      	cmp	r3, #4
 8016d52:	d110      	bne.n	8016d76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8016d54:	7bbb      	ldrb	r3, [r7, #14]
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	d102      	bne.n	8016d60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8016d5a:	7b3b      	ldrb	r3, [r7, #12]
 8016d5c:	2b01      	cmp	r3, #1
 8016d5e:	d001      	beq.n	8016d64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8016d60:	2301      	movs	r3, #1
 8016d62:	e055      	b.n	8016e10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2202      	movs	r2, #2
 8016d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2202      	movs	r2, #2
 8016d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d74:	e01d      	b.n	8016db2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8016d76:	7bfb      	ldrb	r3, [r7, #15]
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	d108      	bne.n	8016d8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8016d7c:	7bbb      	ldrb	r3, [r7, #14]
 8016d7e:	2b01      	cmp	r3, #1
 8016d80:	d105      	bne.n	8016d8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8016d82:	7b7b      	ldrb	r3, [r7, #13]
 8016d84:	2b01      	cmp	r3, #1
 8016d86:	d102      	bne.n	8016d8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8016d88:	7b3b      	ldrb	r3, [r7, #12]
 8016d8a:	2b01      	cmp	r3, #1
 8016d8c:	d001      	beq.n	8016d92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8016d8e:	2301      	movs	r3, #1
 8016d90:	e03e      	b.n	8016e10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	2202      	movs	r2, #2
 8016d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2202      	movs	r2, #2
 8016d9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	2202      	movs	r2, #2
 8016da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2202      	movs	r2, #2
 8016dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d003      	beq.n	8016dc0 <HAL_TIM_Encoder_Start+0xc4>
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	2b04      	cmp	r3, #4
 8016dbc:	d008      	beq.n	8016dd0 <HAL_TIM_Encoder_Start+0xd4>
 8016dbe:	e00f      	b.n	8016de0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	2201      	movs	r2, #1
 8016dc6:	2100      	movs	r1, #0
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f001 f951 	bl	8018070 <TIM_CCxChannelCmd>
      break;
 8016dce:	e016      	b.n	8016dfe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	2201      	movs	r2, #1
 8016dd6:	2104      	movs	r1, #4
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f001 f949 	bl	8018070 <TIM_CCxChannelCmd>
      break;
 8016dde:	e00e      	b.n	8016dfe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	2201      	movs	r2, #1
 8016de6:	2100      	movs	r1, #0
 8016de8:	4618      	mov	r0, r3
 8016dea:	f001 f941 	bl	8018070 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	2201      	movs	r2, #1
 8016df4:	2104      	movs	r1, #4
 8016df6:	4618      	mov	r0, r3
 8016df8:	f001 f93a 	bl	8018070 <TIM_CCxChannelCmd>
      break;
 8016dfc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	681a      	ldr	r2, [r3, #0]
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	f042 0201 	orr.w	r2, r2, #1
 8016e0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8016e0e:	2300      	movs	r3, #0
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3710      	adds	r7, #16
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b082      	sub	sp, #8
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	691b      	ldr	r3, [r3, #16]
 8016e26:	f003 0302 	and.w	r3, r3, #2
 8016e2a:	2b02      	cmp	r3, #2
 8016e2c:	d122      	bne.n	8016e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	68db      	ldr	r3, [r3, #12]
 8016e34:	f003 0302 	and.w	r3, r3, #2
 8016e38:	2b02      	cmp	r3, #2
 8016e3a:	d11b      	bne.n	8016e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	f06f 0202 	mvn.w	r2, #2
 8016e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2201      	movs	r2, #1
 8016e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	699b      	ldr	r3, [r3, #24]
 8016e52:	f003 0303 	and.w	r3, r3, #3
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d003      	beq.n	8016e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016e5a:	6878      	ldr	r0, [r7, #4]
 8016e5c:	f7ec fafe 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8016e60:	e005      	b.n	8016e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 fbb6 	bl	80175d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016e68:	6878      	ldr	r0, [r7, #4]
 8016e6a:	f000 fbbd 	bl	80175e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2200      	movs	r2, #0
 8016e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	691b      	ldr	r3, [r3, #16]
 8016e7a:	f003 0304 	and.w	r3, r3, #4
 8016e7e:	2b04      	cmp	r3, #4
 8016e80:	d122      	bne.n	8016ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	68db      	ldr	r3, [r3, #12]
 8016e88:	f003 0304 	and.w	r3, r3, #4
 8016e8c:	2b04      	cmp	r3, #4
 8016e8e:	d11b      	bne.n	8016ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	f06f 0204 	mvn.w	r2, #4
 8016e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2202      	movs	r2, #2
 8016e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	699b      	ldr	r3, [r3, #24]
 8016ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d003      	beq.n	8016eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f7ec fad4 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8016eb4:	e005      	b.n	8016ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	f000 fb8c 	bl	80175d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ebc:	6878      	ldr	r0, [r7, #4]
 8016ebe:	f000 fb93 	bl	80175e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	691b      	ldr	r3, [r3, #16]
 8016ece:	f003 0308 	and.w	r3, r3, #8
 8016ed2:	2b08      	cmp	r3, #8
 8016ed4:	d122      	bne.n	8016f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	68db      	ldr	r3, [r3, #12]
 8016edc:	f003 0308 	and.w	r3, r3, #8
 8016ee0:	2b08      	cmp	r3, #8
 8016ee2:	d11b      	bne.n	8016f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	f06f 0208 	mvn.w	r2, #8
 8016eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	2204      	movs	r2, #4
 8016ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	69db      	ldr	r3, [r3, #28]
 8016efa:	f003 0303 	and.w	r3, r3, #3
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d003      	beq.n	8016f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f7ec faaa 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8016f08:	e005      	b.n	8016f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016f0a:	6878      	ldr	r0, [r7, #4]
 8016f0c:	f000 fb62 	bl	80175d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f000 fb69 	bl	80175e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2200      	movs	r2, #0
 8016f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	691b      	ldr	r3, [r3, #16]
 8016f22:	f003 0310 	and.w	r3, r3, #16
 8016f26:	2b10      	cmp	r3, #16
 8016f28:	d122      	bne.n	8016f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	68db      	ldr	r3, [r3, #12]
 8016f30:	f003 0310 	and.w	r3, r3, #16
 8016f34:	2b10      	cmp	r3, #16
 8016f36:	d11b      	bne.n	8016f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	f06f 0210 	mvn.w	r2, #16
 8016f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	2208      	movs	r2, #8
 8016f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	69db      	ldr	r3, [r3, #28]
 8016f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d003      	beq.n	8016f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f7ec fa80 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8016f5c:	e005      	b.n	8016f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f000 fb38 	bl	80175d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016f64:	6878      	ldr	r0, [r7, #4]
 8016f66:	f000 fb3f 	bl	80175e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	691b      	ldr	r3, [r3, #16]
 8016f76:	f003 0301 	and.w	r3, r3, #1
 8016f7a:	2b01      	cmp	r3, #1
 8016f7c:	d10e      	bne.n	8016f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	68db      	ldr	r3, [r3, #12]
 8016f84:	f003 0301 	and.w	r3, r3, #1
 8016f88:	2b01      	cmp	r3, #1
 8016f8a:	d107      	bne.n	8016f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	f06f 0201 	mvn.w	r2, #1
 8016f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f7f8 fa9e 	bl	800f4d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	691b      	ldr	r3, [r3, #16]
 8016fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fa6:	2b80      	cmp	r3, #128	; 0x80
 8016fa8:	d10e      	bne.n	8016fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	68db      	ldr	r3, [r3, #12]
 8016fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fb4:	2b80      	cmp	r3, #128	; 0x80
 8016fb6:	d107      	bne.n	8016fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f001 f9ac 	bl	8018320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	691b      	ldr	r3, [r3, #16]
 8016fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016fd6:	d10e      	bne.n	8016ff6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	68db      	ldr	r3, [r3, #12]
 8016fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fe2:	2b80      	cmp	r3, #128	; 0x80
 8016fe4:	d107      	bne.n	8016ff6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8016fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f001 f99f 	bl	8018334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	691b      	ldr	r3, [r3, #16]
 8016ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017000:	2b40      	cmp	r3, #64	; 0x40
 8017002:	d10e      	bne.n	8017022 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	68db      	ldr	r3, [r3, #12]
 801700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801700e:	2b40      	cmp	r3, #64	; 0x40
 8017010:	d107      	bne.n	8017022 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801701a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801701c:	6878      	ldr	r0, [r7, #4]
 801701e:	f000 faed 	bl	80175fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	691b      	ldr	r3, [r3, #16]
 8017028:	f003 0320 	and.w	r3, r3, #32
 801702c:	2b20      	cmp	r3, #32
 801702e:	d10e      	bne.n	801704e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	68db      	ldr	r3, [r3, #12]
 8017036:	f003 0320 	and.w	r3, r3, #32
 801703a:	2b20      	cmp	r3, #32
 801703c:	d107      	bne.n	801704e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	f06f 0220 	mvn.w	r2, #32
 8017046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f001 f95f 	bl	801830c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801704e:	bf00      	nop
 8017050:	3708      	adds	r7, #8
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}

08017056 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8017056:	b580      	push	{r7, lr}
 8017058:	b086      	sub	sp, #24
 801705a:	af00      	add	r7, sp, #0
 801705c:	60f8      	str	r0, [r7, #12]
 801705e:	60b9      	str	r1, [r7, #8]
 8017060:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017062:	2300      	movs	r3, #0
 8017064:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801706c:	2b01      	cmp	r3, #1
 801706e:	d101      	bne.n	8017074 <HAL_TIM_IC_ConfigChannel+0x1e>
 8017070:	2302      	movs	r3, #2
 8017072:	e088      	b.n	8017186 <HAL_TIM_IC_ConfigChannel+0x130>
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	2201      	movs	r2, #1
 8017078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d11b      	bne.n	80170ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801708a:	68bb      	ldr	r3, [r7, #8]
 801708c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8017092:	f000 fe2d 	bl	8017cf0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	699a      	ldr	r2, [r3, #24]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f022 020c 	bic.w	r2, r2, #12
 80170a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	6999      	ldr	r1, [r3, #24]
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	689a      	ldr	r2, [r3, #8]
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	430a      	orrs	r2, r1
 80170b6:	619a      	str	r2, [r3, #24]
 80170b8:	e060      	b.n	801717c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	2b04      	cmp	r3, #4
 80170be:	d11c      	bne.n	80170fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80170cc:	68bb      	ldr	r3, [r7, #8]
 80170ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80170d0:	f000 feab 	bl	8017e2a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	699a      	ldr	r2, [r3, #24]
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80170e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	6999      	ldr	r1, [r3, #24]
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	689b      	ldr	r3, [r3, #8]
 80170ee:	021a      	lsls	r2, r3, #8
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	430a      	orrs	r2, r1
 80170f6:	619a      	str	r2, [r3, #24]
 80170f8:	e040      	b.n	801717c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2b08      	cmp	r3, #8
 80170fe:	d11b      	bne.n	8017138 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8017110:	f000 fef8 	bl	8017f04 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	69da      	ldr	r2, [r3, #28]
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	f022 020c 	bic.w	r2, r2, #12
 8017122:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	69d9      	ldr	r1, [r3, #28]
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	689a      	ldr	r2, [r3, #8]
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	430a      	orrs	r2, r1
 8017134:	61da      	str	r2, [r3, #28]
 8017136:	e021      	b.n	801717c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2b0c      	cmp	r3, #12
 801713c:	d11c      	bne.n	8017178 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801714e:	f000 ff15 	bl	8017f7c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	69da      	ldr	r2, [r3, #28]
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8017160:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	69d9      	ldr	r1, [r3, #28]
 8017168:	68bb      	ldr	r3, [r7, #8]
 801716a:	689b      	ldr	r3, [r3, #8]
 801716c:	021a      	lsls	r2, r3, #8
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	430a      	orrs	r2, r1
 8017174:	61da      	str	r2, [r3, #28]
 8017176:	e001      	b.n	801717c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8017178:	2301      	movs	r3, #1
 801717a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2200      	movs	r2, #0
 8017180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8017184:	7dfb      	ldrb	r3, [r7, #23]
}
 8017186:	4618      	mov	r0, r3
 8017188:	3718      	adds	r7, #24
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}
	...

08017190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b086      	sub	sp, #24
 8017194:	af00      	add	r7, sp, #0
 8017196:	60f8      	str	r0, [r7, #12]
 8017198:	60b9      	str	r1, [r7, #8]
 801719a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801719c:	2300      	movs	r3, #0
 801719e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80171a6:	2b01      	cmp	r3, #1
 80171a8:	d101      	bne.n	80171ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80171aa:	2302      	movs	r3, #2
 80171ac:	e0ff      	b.n	80173ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	2201      	movs	r2, #1
 80171b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2b14      	cmp	r3, #20
 80171ba:	f200 80f0 	bhi.w	801739e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80171be:	a201      	add	r2, pc, #4	; (adr r2, 80171c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80171c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171c4:	08017219 	.word	0x08017219
 80171c8:	0801739f 	.word	0x0801739f
 80171cc:	0801739f 	.word	0x0801739f
 80171d0:	0801739f 	.word	0x0801739f
 80171d4:	08017259 	.word	0x08017259
 80171d8:	0801739f 	.word	0x0801739f
 80171dc:	0801739f 	.word	0x0801739f
 80171e0:	0801739f 	.word	0x0801739f
 80171e4:	0801729b 	.word	0x0801729b
 80171e8:	0801739f 	.word	0x0801739f
 80171ec:	0801739f 	.word	0x0801739f
 80171f0:	0801739f 	.word	0x0801739f
 80171f4:	080172db 	.word	0x080172db
 80171f8:	0801739f 	.word	0x0801739f
 80171fc:	0801739f 	.word	0x0801739f
 8017200:	0801739f 	.word	0x0801739f
 8017204:	0801731d 	.word	0x0801731d
 8017208:	0801739f 	.word	0x0801739f
 801720c:	0801739f 	.word	0x0801739f
 8017210:	0801739f 	.word	0x0801739f
 8017214:	0801735d 	.word	0x0801735d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	68b9      	ldr	r1, [r7, #8]
 801721e:	4618      	mov	r0, r3
 8017220:	f000 fa90 	bl	8017744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	699a      	ldr	r2, [r3, #24]
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f042 0208 	orr.w	r2, r2, #8
 8017232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	699a      	ldr	r2, [r3, #24]
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	f022 0204 	bic.w	r2, r2, #4
 8017242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	6999      	ldr	r1, [r3, #24]
 801724a:	68bb      	ldr	r3, [r7, #8]
 801724c:	691a      	ldr	r2, [r3, #16]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	430a      	orrs	r2, r1
 8017254:	619a      	str	r2, [r3, #24]
      break;
 8017256:	e0a5      	b.n	80173a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	68b9      	ldr	r1, [r7, #8]
 801725e:	4618      	mov	r0, r3
 8017260:	f000 fb00 	bl	8017864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	699a      	ldr	r2, [r3, #24]
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	699a      	ldr	r2, [r3, #24]
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	6999      	ldr	r1, [r3, #24]
 801728a:	68bb      	ldr	r3, [r7, #8]
 801728c:	691b      	ldr	r3, [r3, #16]
 801728e:	021a      	lsls	r2, r3, #8
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	430a      	orrs	r2, r1
 8017296:	619a      	str	r2, [r3, #24]
      break;
 8017298:	e084      	b.n	80173a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	68b9      	ldr	r1, [r7, #8]
 80172a0:	4618      	mov	r0, r3
 80172a2:	f000 fb69 	bl	8017978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	69da      	ldr	r2, [r3, #28]
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	f042 0208 	orr.w	r2, r2, #8
 80172b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	69da      	ldr	r2, [r3, #28]
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	f022 0204 	bic.w	r2, r2, #4
 80172c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	69d9      	ldr	r1, [r3, #28]
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	691a      	ldr	r2, [r3, #16]
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	430a      	orrs	r2, r1
 80172d6:	61da      	str	r2, [r3, #28]
      break;
 80172d8:	e064      	b.n	80173a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	68b9      	ldr	r1, [r7, #8]
 80172e0:	4618      	mov	r0, r3
 80172e2:	f000 fbd1 	bl	8017a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	69da      	ldr	r2, [r3, #28]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80172f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	69da      	ldr	r2, [r3, #28]
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	69d9      	ldr	r1, [r3, #28]
 801730c:	68bb      	ldr	r3, [r7, #8]
 801730e:	691b      	ldr	r3, [r3, #16]
 8017310:	021a      	lsls	r2, r3, #8
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	430a      	orrs	r2, r1
 8017318:	61da      	str	r2, [r3, #28]
      break;
 801731a:	e043      	b.n	80173a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	68b9      	ldr	r1, [r7, #8]
 8017322:	4618      	mov	r0, r3
 8017324:	f000 fc1a 	bl	8017b5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	f042 0208 	orr.w	r2, r2, #8
 8017336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	f022 0204 	bic.w	r2, r2, #4
 8017346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	691a      	ldr	r2, [r3, #16]
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	430a      	orrs	r2, r1
 8017358:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801735a:	e023      	b.n	80173a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	68b9      	ldr	r1, [r7, #8]
 8017362:	4618      	mov	r0, r3
 8017364:	f000 fc5e 	bl	8017c24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017376:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017386:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	691b      	ldr	r3, [r3, #16]
 8017392:	021a      	lsls	r2, r3, #8
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	430a      	orrs	r2, r1
 801739a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801739c:	e002      	b.n	80173a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801739e:	2301      	movs	r3, #1
 80173a0:	75fb      	strb	r3, [r7, #23]
      break;
 80173a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	2200      	movs	r2, #0
 80173a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80173ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	3718      	adds	r7, #24
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	bf00      	nop

080173b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b084      	sub	sp, #16
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
 80173c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80173c2:	2300      	movs	r3, #0
 80173c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80173cc:	2b01      	cmp	r3, #1
 80173ce:	d101      	bne.n	80173d4 <HAL_TIM_ConfigClockSource+0x1c>
 80173d0:	2302      	movs	r3, #2
 80173d2:	e0b6      	b.n	8017542 <HAL_TIM_ConfigClockSource+0x18a>
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	2201      	movs	r2, #1
 80173d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2202      	movs	r2, #2
 80173e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	689b      	ldr	r3, [r3, #8]
 80173ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80173ec:	68bb      	ldr	r3, [r7, #8]
 80173ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80173f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80173f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80173fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	68ba      	ldr	r2, [r7, #8]
 8017406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017410:	d03e      	beq.n	8017490 <HAL_TIM_ConfigClockSource+0xd8>
 8017412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017416:	f200 8087 	bhi.w	8017528 <HAL_TIM_ConfigClockSource+0x170>
 801741a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801741e:	f000 8086 	beq.w	801752e <HAL_TIM_ConfigClockSource+0x176>
 8017422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017426:	d87f      	bhi.n	8017528 <HAL_TIM_ConfigClockSource+0x170>
 8017428:	2b70      	cmp	r3, #112	; 0x70
 801742a:	d01a      	beq.n	8017462 <HAL_TIM_ConfigClockSource+0xaa>
 801742c:	2b70      	cmp	r3, #112	; 0x70
 801742e:	d87b      	bhi.n	8017528 <HAL_TIM_ConfigClockSource+0x170>
 8017430:	2b60      	cmp	r3, #96	; 0x60
 8017432:	d050      	beq.n	80174d6 <HAL_TIM_ConfigClockSource+0x11e>
 8017434:	2b60      	cmp	r3, #96	; 0x60
 8017436:	d877      	bhi.n	8017528 <HAL_TIM_ConfigClockSource+0x170>
 8017438:	2b50      	cmp	r3, #80	; 0x50
 801743a:	d03c      	beq.n	80174b6 <HAL_TIM_ConfigClockSource+0xfe>
 801743c:	2b50      	cmp	r3, #80	; 0x50
 801743e:	d873      	bhi.n	8017528 <HAL_TIM_ConfigClockSource+0x170>
 8017440:	2b40      	cmp	r3, #64	; 0x40
 8017442:	d058      	beq.n	80174f6 <HAL_TIM_ConfigClockSource+0x13e>
 8017444:	2b40      	cmp	r3, #64	; 0x40
 8017446:	d86f      	bhi.n	8017528 <HAL_TIM_ConfigClockSource+0x170>
 8017448:	2b30      	cmp	r3, #48	; 0x30
 801744a:	d064      	beq.n	8017516 <HAL_TIM_ConfigClockSource+0x15e>
 801744c:	2b30      	cmp	r3, #48	; 0x30
 801744e:	d86b      	bhi.n	8017528 <HAL_TIM_ConfigClockSource+0x170>
 8017450:	2b20      	cmp	r3, #32
 8017452:	d060      	beq.n	8017516 <HAL_TIM_ConfigClockSource+0x15e>
 8017454:	2b20      	cmp	r3, #32
 8017456:	d867      	bhi.n	8017528 <HAL_TIM_ConfigClockSource+0x170>
 8017458:	2b00      	cmp	r3, #0
 801745a:	d05c      	beq.n	8017516 <HAL_TIM_ConfigClockSource+0x15e>
 801745c:	2b10      	cmp	r3, #16
 801745e:	d05a      	beq.n	8017516 <HAL_TIM_ConfigClockSource+0x15e>
 8017460:	e062      	b.n	8017528 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017466:	683b      	ldr	r3, [r7, #0]
 8017468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017472:	f000 fddd 	bl	8018030 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	689b      	ldr	r3, [r3, #8]
 801747c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801747e:	68bb      	ldr	r3, [r7, #8]
 8017480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8017484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	68ba      	ldr	r2, [r7, #8]
 801748c:	609a      	str	r2, [r3, #8]
      break;
 801748e:	e04f      	b.n	8017530 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8017498:	683b      	ldr	r3, [r7, #0]
 801749a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801749c:	683b      	ldr	r3, [r7, #0]
 801749e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80174a0:	f000 fdc6 	bl	8018030 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	689a      	ldr	r2, [r3, #8]
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80174b2:	609a      	str	r2, [r3, #8]
      break;
 80174b4:	e03c      	b.n	8017530 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80174c2:	461a      	mov	r2, r3
 80174c4:	f000 fc82 	bl	8017dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	2150      	movs	r1, #80	; 0x50
 80174ce:	4618      	mov	r0, r3
 80174d0:	f000 fd91 	bl	8017ff6 <TIM_ITRx_SetConfig>
      break;
 80174d4:	e02c      	b.n	8017530 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80174e2:	461a      	mov	r2, r3
 80174e4:	f000 fcde 	bl	8017ea4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	2160      	movs	r1, #96	; 0x60
 80174ee:	4618      	mov	r0, r3
 80174f0:	f000 fd81 	bl	8017ff6 <TIM_ITRx_SetConfig>
      break;
 80174f4:	e01c      	b.n	8017530 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80174fe:	683b      	ldr	r3, [r7, #0]
 8017500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017502:	461a      	mov	r2, r3
 8017504:	f000 fc62 	bl	8017dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	2140      	movs	r1, #64	; 0x40
 801750e:	4618      	mov	r0, r3
 8017510:	f000 fd71 	bl	8017ff6 <TIM_ITRx_SetConfig>
      break;
 8017514:	e00c      	b.n	8017530 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	681a      	ldr	r2, [r3, #0]
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	4619      	mov	r1, r3
 8017520:	4610      	mov	r0, r2
 8017522:	f000 fd68 	bl	8017ff6 <TIM_ITRx_SetConfig>
      break;
 8017526:	e003      	b.n	8017530 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8017528:	2301      	movs	r3, #1
 801752a:	73fb      	strb	r3, [r7, #15]
      break;
 801752c:	e000      	b.n	8017530 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801752e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2201      	movs	r2, #1
 8017534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2200      	movs	r2, #0
 801753c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8017540:	7bfb      	ldrb	r3, [r7, #15]
}
 8017542:	4618      	mov	r0, r3
 8017544:	3710      	adds	r7, #16
 8017546:	46bd      	mov	sp, r7
 8017548:	bd80      	pop	{r7, pc}
	...

0801754c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801754c:	b480      	push	{r7}
 801754e:	b085      	sub	sp, #20
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
 8017554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8017556:	2300      	movs	r3, #0
 8017558:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	2b0c      	cmp	r3, #12
 801755e:	d831      	bhi.n	80175c4 <HAL_TIM_ReadCapturedValue+0x78>
 8017560:	a201      	add	r2, pc, #4	; (adr r2, 8017568 <HAL_TIM_ReadCapturedValue+0x1c>)
 8017562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017566:	bf00      	nop
 8017568:	0801759d 	.word	0x0801759d
 801756c:	080175c5 	.word	0x080175c5
 8017570:	080175c5 	.word	0x080175c5
 8017574:	080175c5 	.word	0x080175c5
 8017578:	080175a7 	.word	0x080175a7
 801757c:	080175c5 	.word	0x080175c5
 8017580:	080175c5 	.word	0x080175c5
 8017584:	080175c5 	.word	0x080175c5
 8017588:	080175b1 	.word	0x080175b1
 801758c:	080175c5 	.word	0x080175c5
 8017590:	080175c5 	.word	0x080175c5
 8017594:	080175c5 	.word	0x080175c5
 8017598:	080175bb 	.word	0x080175bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80175a2:	60fb      	str	r3, [r7, #12]

      break;
 80175a4:	e00f      	b.n	80175c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175ac:	60fb      	str	r3, [r7, #12]

      break;
 80175ae:	e00a      	b.n	80175c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175b6:	60fb      	str	r3, [r7, #12]

      break;
 80175b8:	e005      	b.n	80175c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175c0:	60fb      	str	r3, [r7, #12]

      break;
 80175c2:	e000      	b.n	80175c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80175c4:	bf00      	nop
  }

  return tmpreg;
 80175c6:	68fb      	ldr	r3, [r7, #12]
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3714      	adds	r7, #20
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr

080175d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80175d4:	b480      	push	{r7}
 80175d6:	b083      	sub	sp, #12
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80175dc:	bf00      	nop
 80175de:	370c      	adds	r7, #12
 80175e0:	46bd      	mov	sp, r7
 80175e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e6:	4770      	bx	lr

080175e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80175e8:	b480      	push	{r7}
 80175ea:	b083      	sub	sp, #12
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80175f0:	bf00      	nop
 80175f2:	370c      	adds	r7, #12
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr

080175fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80175fc:	b480      	push	{r7}
 80175fe:	b083      	sub	sp, #12
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017604:	bf00      	nop
 8017606:	370c      	adds	r7, #12
 8017608:	46bd      	mov	sp, r7
 801760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760e:	4770      	bx	lr

08017610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017610:	b480      	push	{r7}
 8017612:	b085      	sub	sp, #20
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	4a40      	ldr	r2, [pc, #256]	; (8017724 <TIM_Base_SetConfig+0x114>)
 8017624:	4293      	cmp	r3, r2
 8017626:	d013      	beq.n	8017650 <TIM_Base_SetConfig+0x40>
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801762e:	d00f      	beq.n	8017650 <TIM_Base_SetConfig+0x40>
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	4a3d      	ldr	r2, [pc, #244]	; (8017728 <TIM_Base_SetConfig+0x118>)
 8017634:	4293      	cmp	r3, r2
 8017636:	d00b      	beq.n	8017650 <TIM_Base_SetConfig+0x40>
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	4a3c      	ldr	r2, [pc, #240]	; (801772c <TIM_Base_SetConfig+0x11c>)
 801763c:	4293      	cmp	r3, r2
 801763e:	d007      	beq.n	8017650 <TIM_Base_SetConfig+0x40>
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	4a3b      	ldr	r2, [pc, #236]	; (8017730 <TIM_Base_SetConfig+0x120>)
 8017644:	4293      	cmp	r3, r2
 8017646:	d003      	beq.n	8017650 <TIM_Base_SetConfig+0x40>
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	4a3a      	ldr	r2, [pc, #232]	; (8017734 <TIM_Base_SetConfig+0x124>)
 801764c:	4293      	cmp	r3, r2
 801764e:	d108      	bne.n	8017662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	685b      	ldr	r3, [r3, #4]
 801765c:	68fa      	ldr	r2, [r7, #12]
 801765e:	4313      	orrs	r3, r2
 8017660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	4a2f      	ldr	r2, [pc, #188]	; (8017724 <TIM_Base_SetConfig+0x114>)
 8017666:	4293      	cmp	r3, r2
 8017668:	d01f      	beq.n	80176aa <TIM_Base_SetConfig+0x9a>
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017670:	d01b      	beq.n	80176aa <TIM_Base_SetConfig+0x9a>
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	4a2c      	ldr	r2, [pc, #176]	; (8017728 <TIM_Base_SetConfig+0x118>)
 8017676:	4293      	cmp	r3, r2
 8017678:	d017      	beq.n	80176aa <TIM_Base_SetConfig+0x9a>
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	4a2b      	ldr	r2, [pc, #172]	; (801772c <TIM_Base_SetConfig+0x11c>)
 801767e:	4293      	cmp	r3, r2
 8017680:	d013      	beq.n	80176aa <TIM_Base_SetConfig+0x9a>
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	4a2a      	ldr	r2, [pc, #168]	; (8017730 <TIM_Base_SetConfig+0x120>)
 8017686:	4293      	cmp	r3, r2
 8017688:	d00f      	beq.n	80176aa <TIM_Base_SetConfig+0x9a>
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	4a29      	ldr	r2, [pc, #164]	; (8017734 <TIM_Base_SetConfig+0x124>)
 801768e:	4293      	cmp	r3, r2
 8017690:	d00b      	beq.n	80176aa <TIM_Base_SetConfig+0x9a>
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	4a28      	ldr	r2, [pc, #160]	; (8017738 <TIM_Base_SetConfig+0x128>)
 8017696:	4293      	cmp	r3, r2
 8017698:	d007      	beq.n	80176aa <TIM_Base_SetConfig+0x9a>
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	4a27      	ldr	r2, [pc, #156]	; (801773c <TIM_Base_SetConfig+0x12c>)
 801769e:	4293      	cmp	r3, r2
 80176a0:	d003      	beq.n	80176aa <TIM_Base_SetConfig+0x9a>
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	4a26      	ldr	r2, [pc, #152]	; (8017740 <TIM_Base_SetConfig+0x130>)
 80176a6:	4293      	cmp	r3, r2
 80176a8:	d108      	bne.n	80176bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80176b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80176b2:	683b      	ldr	r3, [r7, #0]
 80176b4:	68db      	ldr	r3, [r3, #12]
 80176b6:	68fa      	ldr	r2, [r7, #12]
 80176b8:	4313      	orrs	r3, r2
 80176ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80176c2:	683b      	ldr	r3, [r7, #0]
 80176c4:	695b      	ldr	r3, [r3, #20]
 80176c6:	4313      	orrs	r3, r2
 80176c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	68fa      	ldr	r2, [r7, #12]
 80176ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80176d0:	683b      	ldr	r3, [r7, #0]
 80176d2:	689a      	ldr	r2, [r3, #8]
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	681a      	ldr	r2, [r3, #0]
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	4a10      	ldr	r2, [pc, #64]	; (8017724 <TIM_Base_SetConfig+0x114>)
 80176e4:	4293      	cmp	r3, r2
 80176e6:	d00f      	beq.n	8017708 <TIM_Base_SetConfig+0xf8>
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	4a12      	ldr	r2, [pc, #72]	; (8017734 <TIM_Base_SetConfig+0x124>)
 80176ec:	4293      	cmp	r3, r2
 80176ee:	d00b      	beq.n	8017708 <TIM_Base_SetConfig+0xf8>
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	4a11      	ldr	r2, [pc, #68]	; (8017738 <TIM_Base_SetConfig+0x128>)
 80176f4:	4293      	cmp	r3, r2
 80176f6:	d007      	beq.n	8017708 <TIM_Base_SetConfig+0xf8>
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	4a10      	ldr	r2, [pc, #64]	; (801773c <TIM_Base_SetConfig+0x12c>)
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d003      	beq.n	8017708 <TIM_Base_SetConfig+0xf8>
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	4a0f      	ldr	r2, [pc, #60]	; (8017740 <TIM_Base_SetConfig+0x130>)
 8017704:	4293      	cmp	r3, r2
 8017706:	d103      	bne.n	8017710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017708:	683b      	ldr	r3, [r7, #0]
 801770a:	691a      	ldr	r2, [r3, #16]
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	2201      	movs	r2, #1
 8017714:	615a      	str	r2, [r3, #20]
}
 8017716:	bf00      	nop
 8017718:	3714      	adds	r7, #20
 801771a:	46bd      	mov	sp, r7
 801771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017720:	4770      	bx	lr
 8017722:	bf00      	nop
 8017724:	40012c00 	.word	0x40012c00
 8017728:	40000400 	.word	0x40000400
 801772c:	40000800 	.word	0x40000800
 8017730:	40000c00 	.word	0x40000c00
 8017734:	40013400 	.word	0x40013400
 8017738:	40014000 	.word	0x40014000
 801773c:	40014400 	.word	0x40014400
 8017740:	40014800 	.word	0x40014800

08017744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017744:	b480      	push	{r7}
 8017746:	b087      	sub	sp, #28
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	6a1b      	ldr	r3, [r3, #32]
 8017752:	f023 0201 	bic.w	r2, r3, #1
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	6a1b      	ldr	r3, [r3, #32]
 801775e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	685b      	ldr	r3, [r3, #4]
 8017764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	699b      	ldr	r3, [r3, #24]
 801776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	f023 0303 	bic.w	r3, r3, #3
 801777e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	68fa      	ldr	r2, [r7, #12]
 8017786:	4313      	orrs	r3, r2
 8017788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801778a:	697b      	ldr	r3, [r7, #20]
 801778c:	f023 0302 	bic.w	r3, r3, #2
 8017790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017792:	683b      	ldr	r3, [r7, #0]
 8017794:	689b      	ldr	r3, [r3, #8]
 8017796:	697a      	ldr	r2, [r7, #20]
 8017798:	4313      	orrs	r3, r2
 801779a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	4a2c      	ldr	r2, [pc, #176]	; (8017850 <TIM_OC1_SetConfig+0x10c>)
 80177a0:	4293      	cmp	r3, r2
 80177a2:	d00f      	beq.n	80177c4 <TIM_OC1_SetConfig+0x80>
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	4a2b      	ldr	r2, [pc, #172]	; (8017854 <TIM_OC1_SetConfig+0x110>)
 80177a8:	4293      	cmp	r3, r2
 80177aa:	d00b      	beq.n	80177c4 <TIM_OC1_SetConfig+0x80>
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	4a2a      	ldr	r2, [pc, #168]	; (8017858 <TIM_OC1_SetConfig+0x114>)
 80177b0:	4293      	cmp	r3, r2
 80177b2:	d007      	beq.n	80177c4 <TIM_OC1_SetConfig+0x80>
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	4a29      	ldr	r2, [pc, #164]	; (801785c <TIM_OC1_SetConfig+0x118>)
 80177b8:	4293      	cmp	r3, r2
 80177ba:	d003      	beq.n	80177c4 <TIM_OC1_SetConfig+0x80>
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	4a28      	ldr	r2, [pc, #160]	; (8017860 <TIM_OC1_SetConfig+0x11c>)
 80177c0:	4293      	cmp	r3, r2
 80177c2:	d10c      	bne.n	80177de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80177c4:	697b      	ldr	r3, [r7, #20]
 80177c6:	f023 0308 	bic.w	r3, r3, #8
 80177ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80177cc:	683b      	ldr	r3, [r7, #0]
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	697a      	ldr	r2, [r7, #20]
 80177d2:	4313      	orrs	r3, r2
 80177d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	f023 0304 	bic.w	r3, r3, #4
 80177dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	4a1b      	ldr	r2, [pc, #108]	; (8017850 <TIM_OC1_SetConfig+0x10c>)
 80177e2:	4293      	cmp	r3, r2
 80177e4:	d00f      	beq.n	8017806 <TIM_OC1_SetConfig+0xc2>
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	4a1a      	ldr	r2, [pc, #104]	; (8017854 <TIM_OC1_SetConfig+0x110>)
 80177ea:	4293      	cmp	r3, r2
 80177ec:	d00b      	beq.n	8017806 <TIM_OC1_SetConfig+0xc2>
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	4a19      	ldr	r2, [pc, #100]	; (8017858 <TIM_OC1_SetConfig+0x114>)
 80177f2:	4293      	cmp	r3, r2
 80177f4:	d007      	beq.n	8017806 <TIM_OC1_SetConfig+0xc2>
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	4a18      	ldr	r2, [pc, #96]	; (801785c <TIM_OC1_SetConfig+0x118>)
 80177fa:	4293      	cmp	r3, r2
 80177fc:	d003      	beq.n	8017806 <TIM_OC1_SetConfig+0xc2>
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	4a17      	ldr	r2, [pc, #92]	; (8017860 <TIM_OC1_SetConfig+0x11c>)
 8017802:	4293      	cmp	r3, r2
 8017804:	d111      	bne.n	801782a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801780c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801780e:	693b      	ldr	r3, [r7, #16]
 8017810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	695b      	ldr	r3, [r3, #20]
 801781a:	693a      	ldr	r2, [r7, #16]
 801781c:	4313      	orrs	r3, r2
 801781e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	699b      	ldr	r3, [r3, #24]
 8017824:	693a      	ldr	r2, [r7, #16]
 8017826:	4313      	orrs	r3, r2
 8017828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	693a      	ldr	r2, [r7, #16]
 801782e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	68fa      	ldr	r2, [r7, #12]
 8017834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	685a      	ldr	r2, [r3, #4]
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	697a      	ldr	r2, [r7, #20]
 8017842:	621a      	str	r2, [r3, #32]
}
 8017844:	bf00      	nop
 8017846:	371c      	adds	r7, #28
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr
 8017850:	40012c00 	.word	0x40012c00
 8017854:	40013400 	.word	0x40013400
 8017858:	40014000 	.word	0x40014000
 801785c:	40014400 	.word	0x40014400
 8017860:	40014800 	.word	0x40014800

08017864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017864:	b480      	push	{r7}
 8017866:	b087      	sub	sp, #28
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
 801786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	6a1b      	ldr	r3, [r3, #32]
 8017872:	f023 0210 	bic.w	r2, r3, #16
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	6a1b      	ldr	r3, [r3, #32]
 801787e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	685b      	ldr	r3, [r3, #4]
 8017884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	699b      	ldr	r3, [r3, #24]
 801788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801789e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	021b      	lsls	r3, r3, #8
 80178a6:	68fa      	ldr	r2, [r7, #12]
 80178a8:	4313      	orrs	r3, r2
 80178aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80178ac:	697b      	ldr	r3, [r7, #20]
 80178ae:	f023 0320 	bic.w	r3, r3, #32
 80178b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	689b      	ldr	r3, [r3, #8]
 80178b8:	011b      	lsls	r3, r3, #4
 80178ba:	697a      	ldr	r2, [r7, #20]
 80178bc:	4313      	orrs	r3, r2
 80178be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	4a28      	ldr	r2, [pc, #160]	; (8017964 <TIM_OC2_SetConfig+0x100>)
 80178c4:	4293      	cmp	r3, r2
 80178c6:	d003      	beq.n	80178d0 <TIM_OC2_SetConfig+0x6c>
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	4a27      	ldr	r2, [pc, #156]	; (8017968 <TIM_OC2_SetConfig+0x104>)
 80178cc:	4293      	cmp	r3, r2
 80178ce:	d10d      	bne.n	80178ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80178d0:	697b      	ldr	r3, [r7, #20]
 80178d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80178d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80178d8:	683b      	ldr	r3, [r7, #0]
 80178da:	68db      	ldr	r3, [r3, #12]
 80178dc:	011b      	lsls	r3, r3, #4
 80178de:	697a      	ldr	r2, [r7, #20]
 80178e0:	4313      	orrs	r3, r2
 80178e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80178ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	4a1d      	ldr	r2, [pc, #116]	; (8017964 <TIM_OC2_SetConfig+0x100>)
 80178f0:	4293      	cmp	r3, r2
 80178f2:	d00f      	beq.n	8017914 <TIM_OC2_SetConfig+0xb0>
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	4a1c      	ldr	r2, [pc, #112]	; (8017968 <TIM_OC2_SetConfig+0x104>)
 80178f8:	4293      	cmp	r3, r2
 80178fa:	d00b      	beq.n	8017914 <TIM_OC2_SetConfig+0xb0>
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	4a1b      	ldr	r2, [pc, #108]	; (801796c <TIM_OC2_SetConfig+0x108>)
 8017900:	4293      	cmp	r3, r2
 8017902:	d007      	beq.n	8017914 <TIM_OC2_SetConfig+0xb0>
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	4a1a      	ldr	r2, [pc, #104]	; (8017970 <TIM_OC2_SetConfig+0x10c>)
 8017908:	4293      	cmp	r3, r2
 801790a:	d003      	beq.n	8017914 <TIM_OC2_SetConfig+0xb0>
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	4a19      	ldr	r2, [pc, #100]	; (8017974 <TIM_OC2_SetConfig+0x110>)
 8017910:	4293      	cmp	r3, r2
 8017912:	d113      	bne.n	801793c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017914:	693b      	ldr	r3, [r7, #16]
 8017916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801791a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801791c:	693b      	ldr	r3, [r7, #16]
 801791e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017924:	683b      	ldr	r3, [r7, #0]
 8017926:	695b      	ldr	r3, [r3, #20]
 8017928:	009b      	lsls	r3, r3, #2
 801792a:	693a      	ldr	r2, [r7, #16]
 801792c:	4313      	orrs	r3, r2
 801792e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	699b      	ldr	r3, [r3, #24]
 8017934:	009b      	lsls	r3, r3, #2
 8017936:	693a      	ldr	r2, [r7, #16]
 8017938:	4313      	orrs	r3, r2
 801793a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	693a      	ldr	r2, [r7, #16]
 8017940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	68fa      	ldr	r2, [r7, #12]
 8017946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017948:	683b      	ldr	r3, [r7, #0]
 801794a:	685a      	ldr	r2, [r3, #4]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	697a      	ldr	r2, [r7, #20]
 8017954:	621a      	str	r2, [r3, #32]
}
 8017956:	bf00      	nop
 8017958:	371c      	adds	r7, #28
 801795a:	46bd      	mov	sp, r7
 801795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017960:	4770      	bx	lr
 8017962:	bf00      	nop
 8017964:	40012c00 	.word	0x40012c00
 8017968:	40013400 	.word	0x40013400
 801796c:	40014000 	.word	0x40014000
 8017970:	40014400 	.word	0x40014400
 8017974:	40014800 	.word	0x40014800

08017978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017978:	b480      	push	{r7}
 801797a:	b087      	sub	sp, #28
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	6a1b      	ldr	r3, [r3, #32]
 8017986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	6a1b      	ldr	r3, [r3, #32]
 8017992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	69db      	ldr	r3, [r3, #28]
 801799e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80179a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80179aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	f023 0303 	bic.w	r3, r3, #3
 80179b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80179b4:	683b      	ldr	r3, [r7, #0]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	68fa      	ldr	r2, [r7, #12]
 80179ba:	4313      	orrs	r3, r2
 80179bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80179c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	689b      	ldr	r3, [r3, #8]
 80179ca:	021b      	lsls	r3, r3, #8
 80179cc:	697a      	ldr	r2, [r7, #20]
 80179ce:	4313      	orrs	r3, r2
 80179d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	4a27      	ldr	r2, [pc, #156]	; (8017a74 <TIM_OC3_SetConfig+0xfc>)
 80179d6:	4293      	cmp	r3, r2
 80179d8:	d003      	beq.n	80179e2 <TIM_OC3_SetConfig+0x6a>
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	4a26      	ldr	r2, [pc, #152]	; (8017a78 <TIM_OC3_SetConfig+0x100>)
 80179de:	4293      	cmp	r3, r2
 80179e0:	d10d      	bne.n	80179fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80179e2:	697b      	ldr	r3, [r7, #20]
 80179e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80179e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	68db      	ldr	r3, [r3, #12]
 80179ee:	021b      	lsls	r3, r3, #8
 80179f0:	697a      	ldr	r2, [r7, #20]
 80179f2:	4313      	orrs	r3, r2
 80179f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80179f6:	697b      	ldr	r3, [r7, #20]
 80179f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80179fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	4a1c      	ldr	r2, [pc, #112]	; (8017a74 <TIM_OC3_SetConfig+0xfc>)
 8017a02:	4293      	cmp	r3, r2
 8017a04:	d00f      	beq.n	8017a26 <TIM_OC3_SetConfig+0xae>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	4a1b      	ldr	r2, [pc, #108]	; (8017a78 <TIM_OC3_SetConfig+0x100>)
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d00b      	beq.n	8017a26 <TIM_OC3_SetConfig+0xae>
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	4a1a      	ldr	r2, [pc, #104]	; (8017a7c <TIM_OC3_SetConfig+0x104>)
 8017a12:	4293      	cmp	r3, r2
 8017a14:	d007      	beq.n	8017a26 <TIM_OC3_SetConfig+0xae>
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	4a19      	ldr	r2, [pc, #100]	; (8017a80 <TIM_OC3_SetConfig+0x108>)
 8017a1a:	4293      	cmp	r3, r2
 8017a1c:	d003      	beq.n	8017a26 <TIM_OC3_SetConfig+0xae>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	4a18      	ldr	r2, [pc, #96]	; (8017a84 <TIM_OC3_SetConfig+0x10c>)
 8017a22:	4293      	cmp	r3, r2
 8017a24:	d113      	bne.n	8017a4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017a26:	693b      	ldr	r3, [r7, #16]
 8017a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017a36:	683b      	ldr	r3, [r7, #0]
 8017a38:	695b      	ldr	r3, [r3, #20]
 8017a3a:	011b      	lsls	r3, r3, #4
 8017a3c:	693a      	ldr	r2, [r7, #16]
 8017a3e:	4313      	orrs	r3, r2
 8017a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	699b      	ldr	r3, [r3, #24]
 8017a46:	011b      	lsls	r3, r3, #4
 8017a48:	693a      	ldr	r2, [r7, #16]
 8017a4a:	4313      	orrs	r3, r2
 8017a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	693a      	ldr	r2, [r7, #16]
 8017a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	68fa      	ldr	r2, [r7, #12]
 8017a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	685a      	ldr	r2, [r3, #4]
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	697a      	ldr	r2, [r7, #20]
 8017a66:	621a      	str	r2, [r3, #32]
}
 8017a68:	bf00      	nop
 8017a6a:	371c      	adds	r7, #28
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a72:	4770      	bx	lr
 8017a74:	40012c00 	.word	0x40012c00
 8017a78:	40013400 	.word	0x40013400
 8017a7c:	40014000 	.word	0x40014000
 8017a80:	40014400 	.word	0x40014400
 8017a84:	40014800 	.word	0x40014800

08017a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017a88:	b480      	push	{r7}
 8017a8a:	b087      	sub	sp, #28
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
 8017a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	6a1b      	ldr	r3, [r3, #32]
 8017a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6a1b      	ldr	r3, [r3, #32]
 8017aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	685b      	ldr	r3, [r3, #4]
 8017aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	69db      	ldr	r3, [r3, #28]
 8017aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	021b      	lsls	r3, r3, #8
 8017aca:	68fa      	ldr	r2, [r7, #12]
 8017acc:	4313      	orrs	r3, r2
 8017ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017ad0:	693b      	ldr	r3, [r7, #16]
 8017ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017ad8:	683b      	ldr	r3, [r7, #0]
 8017ada:	689b      	ldr	r3, [r3, #8]
 8017adc:	031b      	lsls	r3, r3, #12
 8017ade:	693a      	ldr	r2, [r7, #16]
 8017ae0:	4313      	orrs	r3, r2
 8017ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	4a18      	ldr	r2, [pc, #96]	; (8017b48 <TIM_OC4_SetConfig+0xc0>)
 8017ae8:	4293      	cmp	r3, r2
 8017aea:	d00f      	beq.n	8017b0c <TIM_OC4_SetConfig+0x84>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	4a17      	ldr	r2, [pc, #92]	; (8017b4c <TIM_OC4_SetConfig+0xc4>)
 8017af0:	4293      	cmp	r3, r2
 8017af2:	d00b      	beq.n	8017b0c <TIM_OC4_SetConfig+0x84>
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	4a16      	ldr	r2, [pc, #88]	; (8017b50 <TIM_OC4_SetConfig+0xc8>)
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d007      	beq.n	8017b0c <TIM_OC4_SetConfig+0x84>
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	4a15      	ldr	r2, [pc, #84]	; (8017b54 <TIM_OC4_SetConfig+0xcc>)
 8017b00:	4293      	cmp	r3, r2
 8017b02:	d003      	beq.n	8017b0c <TIM_OC4_SetConfig+0x84>
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	4a14      	ldr	r2, [pc, #80]	; (8017b58 <TIM_OC4_SetConfig+0xd0>)
 8017b08:	4293      	cmp	r3, r2
 8017b0a:	d109      	bne.n	8017b20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017b0c:	697b      	ldr	r3, [r7, #20]
 8017b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	695b      	ldr	r3, [r3, #20]
 8017b18:	019b      	lsls	r3, r3, #6
 8017b1a:	697a      	ldr	r2, [r7, #20]
 8017b1c:	4313      	orrs	r3, r2
 8017b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	697a      	ldr	r2, [r7, #20]
 8017b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	68fa      	ldr	r2, [r7, #12]
 8017b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	685a      	ldr	r2, [r3, #4]
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	693a      	ldr	r2, [r7, #16]
 8017b38:	621a      	str	r2, [r3, #32]
}
 8017b3a:	bf00      	nop
 8017b3c:	371c      	adds	r7, #28
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b44:	4770      	bx	lr
 8017b46:	bf00      	nop
 8017b48:	40012c00 	.word	0x40012c00
 8017b4c:	40013400 	.word	0x40013400
 8017b50:	40014000 	.word	0x40014000
 8017b54:	40014400 	.word	0x40014400
 8017b58:	40014800 	.word	0x40014800

08017b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017b5c:	b480      	push	{r7}
 8017b5e:	b087      	sub	sp, #28
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
 8017b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	6a1b      	ldr	r3, [r3, #32]
 8017b6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	6a1b      	ldr	r3, [r3, #32]
 8017b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	685b      	ldr	r3, [r3, #4]
 8017b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017b90:	683b      	ldr	r3, [r7, #0]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	68fa      	ldr	r2, [r7, #12]
 8017b96:	4313      	orrs	r3, r2
 8017b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	689b      	ldr	r3, [r3, #8]
 8017ba6:	041b      	lsls	r3, r3, #16
 8017ba8:	693a      	ldr	r2, [r7, #16]
 8017baa:	4313      	orrs	r3, r2
 8017bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	4a17      	ldr	r2, [pc, #92]	; (8017c10 <TIM_OC5_SetConfig+0xb4>)
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	d00f      	beq.n	8017bd6 <TIM_OC5_SetConfig+0x7a>
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	4a16      	ldr	r2, [pc, #88]	; (8017c14 <TIM_OC5_SetConfig+0xb8>)
 8017bba:	4293      	cmp	r3, r2
 8017bbc:	d00b      	beq.n	8017bd6 <TIM_OC5_SetConfig+0x7a>
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	4a15      	ldr	r2, [pc, #84]	; (8017c18 <TIM_OC5_SetConfig+0xbc>)
 8017bc2:	4293      	cmp	r3, r2
 8017bc4:	d007      	beq.n	8017bd6 <TIM_OC5_SetConfig+0x7a>
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	4a14      	ldr	r2, [pc, #80]	; (8017c1c <TIM_OC5_SetConfig+0xc0>)
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	d003      	beq.n	8017bd6 <TIM_OC5_SetConfig+0x7a>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	4a13      	ldr	r2, [pc, #76]	; (8017c20 <TIM_OC5_SetConfig+0xc4>)
 8017bd2:	4293      	cmp	r3, r2
 8017bd4:	d109      	bne.n	8017bea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017bd6:	697b      	ldr	r3, [r7, #20]
 8017bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	695b      	ldr	r3, [r3, #20]
 8017be2:	021b      	lsls	r3, r3, #8
 8017be4:	697a      	ldr	r2, [r7, #20]
 8017be6:	4313      	orrs	r3, r2
 8017be8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	697a      	ldr	r2, [r7, #20]
 8017bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	68fa      	ldr	r2, [r7, #12]
 8017bf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	685a      	ldr	r2, [r3, #4]
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	693a      	ldr	r2, [r7, #16]
 8017c02:	621a      	str	r2, [r3, #32]
}
 8017c04:	bf00      	nop
 8017c06:	371c      	adds	r7, #28
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c0e:	4770      	bx	lr
 8017c10:	40012c00 	.word	0x40012c00
 8017c14:	40013400 	.word	0x40013400
 8017c18:	40014000 	.word	0x40014000
 8017c1c:	40014400 	.word	0x40014400
 8017c20:	40014800 	.word	0x40014800

08017c24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017c24:	b480      	push	{r7}
 8017c26:	b087      	sub	sp, #28
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
 8017c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	6a1b      	ldr	r3, [r3, #32]
 8017c32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	6a1b      	ldr	r3, [r3, #32]
 8017c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	685b      	ldr	r3, [r3, #4]
 8017c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	021b      	lsls	r3, r3, #8
 8017c5e:	68fa      	ldr	r2, [r7, #12]
 8017c60:	4313      	orrs	r3, r2
 8017c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017c64:	693b      	ldr	r3, [r7, #16]
 8017c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	689b      	ldr	r3, [r3, #8]
 8017c70:	051b      	lsls	r3, r3, #20
 8017c72:	693a      	ldr	r2, [r7, #16]
 8017c74:	4313      	orrs	r3, r2
 8017c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	4a18      	ldr	r2, [pc, #96]	; (8017cdc <TIM_OC6_SetConfig+0xb8>)
 8017c7c:	4293      	cmp	r3, r2
 8017c7e:	d00f      	beq.n	8017ca0 <TIM_OC6_SetConfig+0x7c>
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	4a17      	ldr	r2, [pc, #92]	; (8017ce0 <TIM_OC6_SetConfig+0xbc>)
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d00b      	beq.n	8017ca0 <TIM_OC6_SetConfig+0x7c>
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	4a16      	ldr	r2, [pc, #88]	; (8017ce4 <TIM_OC6_SetConfig+0xc0>)
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	d007      	beq.n	8017ca0 <TIM_OC6_SetConfig+0x7c>
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	4a15      	ldr	r2, [pc, #84]	; (8017ce8 <TIM_OC6_SetConfig+0xc4>)
 8017c94:	4293      	cmp	r3, r2
 8017c96:	d003      	beq.n	8017ca0 <TIM_OC6_SetConfig+0x7c>
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	4a14      	ldr	r2, [pc, #80]	; (8017cec <TIM_OC6_SetConfig+0xc8>)
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d109      	bne.n	8017cb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017ca0:	697b      	ldr	r3, [r7, #20]
 8017ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017ca8:	683b      	ldr	r3, [r7, #0]
 8017caa:	695b      	ldr	r3, [r3, #20]
 8017cac:	029b      	lsls	r3, r3, #10
 8017cae:	697a      	ldr	r2, [r7, #20]
 8017cb0:	4313      	orrs	r3, r2
 8017cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	697a      	ldr	r2, [r7, #20]
 8017cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	68fa      	ldr	r2, [r7, #12]
 8017cbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	685a      	ldr	r2, [r3, #4]
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	693a      	ldr	r2, [r7, #16]
 8017ccc:	621a      	str	r2, [r3, #32]
}
 8017cce:	bf00      	nop
 8017cd0:	371c      	adds	r7, #28
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd8:	4770      	bx	lr
 8017cda:	bf00      	nop
 8017cdc:	40012c00 	.word	0x40012c00
 8017ce0:	40013400 	.word	0x40013400
 8017ce4:	40014000 	.word	0x40014000
 8017ce8:	40014400 	.word	0x40014400
 8017cec:	40014800 	.word	0x40014800

08017cf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017cf0:	b480      	push	{r7}
 8017cf2:	b087      	sub	sp, #28
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	60f8      	str	r0, [r7, #12]
 8017cf8:	60b9      	str	r1, [r7, #8]
 8017cfa:	607a      	str	r2, [r7, #4]
 8017cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	6a1b      	ldr	r3, [r3, #32]
 8017d02:	f023 0201 	bic.w	r2, r3, #1
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	699b      	ldr	r3, [r3, #24]
 8017d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	6a1b      	ldr	r3, [r3, #32]
 8017d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	4a26      	ldr	r2, [pc, #152]	; (8017db4 <TIM_TI1_SetConfig+0xc4>)
 8017d1a:	4293      	cmp	r3, r2
 8017d1c:	d017      	beq.n	8017d4e <TIM_TI1_SetConfig+0x5e>
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017d24:	d013      	beq.n	8017d4e <TIM_TI1_SetConfig+0x5e>
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	4a23      	ldr	r2, [pc, #140]	; (8017db8 <TIM_TI1_SetConfig+0xc8>)
 8017d2a:	4293      	cmp	r3, r2
 8017d2c:	d00f      	beq.n	8017d4e <TIM_TI1_SetConfig+0x5e>
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	4a22      	ldr	r2, [pc, #136]	; (8017dbc <TIM_TI1_SetConfig+0xcc>)
 8017d32:	4293      	cmp	r3, r2
 8017d34:	d00b      	beq.n	8017d4e <TIM_TI1_SetConfig+0x5e>
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	4a21      	ldr	r2, [pc, #132]	; (8017dc0 <TIM_TI1_SetConfig+0xd0>)
 8017d3a:	4293      	cmp	r3, r2
 8017d3c:	d007      	beq.n	8017d4e <TIM_TI1_SetConfig+0x5e>
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	4a20      	ldr	r2, [pc, #128]	; (8017dc4 <TIM_TI1_SetConfig+0xd4>)
 8017d42:	4293      	cmp	r3, r2
 8017d44:	d003      	beq.n	8017d4e <TIM_TI1_SetConfig+0x5e>
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	4a1f      	ldr	r2, [pc, #124]	; (8017dc8 <TIM_TI1_SetConfig+0xd8>)
 8017d4a:	4293      	cmp	r3, r2
 8017d4c:	d101      	bne.n	8017d52 <TIM_TI1_SetConfig+0x62>
 8017d4e:	2301      	movs	r3, #1
 8017d50:	e000      	b.n	8017d54 <TIM_TI1_SetConfig+0x64>
 8017d52:	2300      	movs	r3, #0
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d008      	beq.n	8017d6a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8017d58:	697b      	ldr	r3, [r7, #20]
 8017d5a:	f023 0303 	bic.w	r3, r3, #3
 8017d5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8017d60:	697a      	ldr	r2, [r7, #20]
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	4313      	orrs	r3, r2
 8017d66:	617b      	str	r3, [r7, #20]
 8017d68:	e003      	b.n	8017d72 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8017d6a:	697b      	ldr	r3, [r7, #20]
 8017d6c:	f043 0301 	orr.w	r3, r3, #1
 8017d70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017d72:	697b      	ldr	r3, [r7, #20]
 8017d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8017d7a:	683b      	ldr	r3, [r7, #0]
 8017d7c:	011b      	lsls	r3, r3, #4
 8017d7e:	b2db      	uxtb	r3, r3
 8017d80:	697a      	ldr	r2, [r7, #20]
 8017d82:	4313      	orrs	r3, r2
 8017d84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017d86:	693b      	ldr	r3, [r7, #16]
 8017d88:	f023 030a 	bic.w	r3, r3, #10
 8017d8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	f003 030a 	and.w	r3, r3, #10
 8017d94:	693a      	ldr	r2, [r7, #16]
 8017d96:	4313      	orrs	r3, r2
 8017d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	697a      	ldr	r2, [r7, #20]
 8017d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	693a      	ldr	r2, [r7, #16]
 8017da4:	621a      	str	r2, [r3, #32]
}
 8017da6:	bf00      	nop
 8017da8:	371c      	adds	r7, #28
 8017daa:	46bd      	mov	sp, r7
 8017dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db0:	4770      	bx	lr
 8017db2:	bf00      	nop
 8017db4:	40012c00 	.word	0x40012c00
 8017db8:	40000400 	.word	0x40000400
 8017dbc:	40000800 	.word	0x40000800
 8017dc0:	40000c00 	.word	0x40000c00
 8017dc4:	40013400 	.word	0x40013400
 8017dc8:	40014000 	.word	0x40014000

08017dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017dcc:	b480      	push	{r7}
 8017dce:	b087      	sub	sp, #28
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	60f8      	str	r0, [r7, #12]
 8017dd4:	60b9      	str	r1, [r7, #8]
 8017dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	6a1b      	ldr	r3, [r3, #32]
 8017ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	6a1b      	ldr	r3, [r3, #32]
 8017de2:	f023 0201 	bic.w	r2, r3, #1
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	699b      	ldr	r3, [r3, #24]
 8017dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017df0:	693b      	ldr	r3, [r7, #16]
 8017df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	011b      	lsls	r3, r3, #4
 8017dfc:	693a      	ldr	r2, [r7, #16]
 8017dfe:	4313      	orrs	r3, r2
 8017e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017e02:	697b      	ldr	r3, [r7, #20]
 8017e04:	f023 030a 	bic.w	r3, r3, #10
 8017e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017e0a:	697a      	ldr	r2, [r7, #20]
 8017e0c:	68bb      	ldr	r3, [r7, #8]
 8017e0e:	4313      	orrs	r3, r2
 8017e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	693a      	ldr	r2, [r7, #16]
 8017e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	697a      	ldr	r2, [r7, #20]
 8017e1c:	621a      	str	r2, [r3, #32]
}
 8017e1e:	bf00      	nop
 8017e20:	371c      	adds	r7, #28
 8017e22:	46bd      	mov	sp, r7
 8017e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e28:	4770      	bx	lr

08017e2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017e2a:	b480      	push	{r7}
 8017e2c:	b087      	sub	sp, #28
 8017e2e:	af00      	add	r7, sp, #0
 8017e30:	60f8      	str	r0, [r7, #12]
 8017e32:	60b9      	str	r1, [r7, #8]
 8017e34:	607a      	str	r2, [r7, #4]
 8017e36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	6a1b      	ldr	r3, [r3, #32]
 8017e3c:	f023 0210 	bic.w	r2, r3, #16
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	699b      	ldr	r3, [r3, #24]
 8017e48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	6a1b      	ldr	r3, [r3, #32]
 8017e4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017e50:	697b      	ldr	r3, [r7, #20]
 8017e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017e56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	021b      	lsls	r3, r3, #8
 8017e5c:	697a      	ldr	r2, [r7, #20]
 8017e5e:	4313      	orrs	r3, r2
 8017e60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	031b      	lsls	r3, r3, #12
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	697a      	ldr	r2, [r7, #20]
 8017e72:	4313      	orrs	r3, r2
 8017e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017e76:	693b      	ldr	r3, [r7, #16]
 8017e78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8017e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8017e7e:	68bb      	ldr	r3, [r7, #8]
 8017e80:	011b      	lsls	r3, r3, #4
 8017e82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017e86:	693a      	ldr	r2, [r7, #16]
 8017e88:	4313      	orrs	r3, r2
 8017e8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	697a      	ldr	r2, [r7, #20]
 8017e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	693a      	ldr	r2, [r7, #16]
 8017e96:	621a      	str	r2, [r3, #32]
}
 8017e98:	bf00      	nop
 8017e9a:	371c      	adds	r7, #28
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea2:	4770      	bx	lr

08017ea4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017ea4:	b480      	push	{r7}
 8017ea6:	b087      	sub	sp, #28
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	60f8      	str	r0, [r7, #12]
 8017eac:	60b9      	str	r1, [r7, #8]
 8017eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	6a1b      	ldr	r3, [r3, #32]
 8017eb4:	f023 0210 	bic.w	r2, r3, #16
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	699b      	ldr	r3, [r3, #24]
 8017ec0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	6a1b      	ldr	r3, [r3, #32]
 8017ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017ece:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	031b      	lsls	r3, r3, #12
 8017ed4:	697a      	ldr	r2, [r7, #20]
 8017ed6:	4313      	orrs	r3, r2
 8017ed8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017eda:	693b      	ldr	r3, [r7, #16]
 8017edc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8017ee0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017ee2:	68bb      	ldr	r3, [r7, #8]
 8017ee4:	011b      	lsls	r3, r3, #4
 8017ee6:	693a      	ldr	r2, [r7, #16]
 8017ee8:	4313      	orrs	r3, r2
 8017eea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	697a      	ldr	r2, [r7, #20]
 8017ef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	693a      	ldr	r2, [r7, #16]
 8017ef6:	621a      	str	r2, [r3, #32]
}
 8017ef8:	bf00      	nop
 8017efa:	371c      	adds	r7, #28
 8017efc:	46bd      	mov	sp, r7
 8017efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f02:	4770      	bx	lr

08017f04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017f04:	b480      	push	{r7}
 8017f06:	b087      	sub	sp, #28
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	60f8      	str	r0, [r7, #12]
 8017f0c:	60b9      	str	r1, [r7, #8]
 8017f0e:	607a      	str	r2, [r7, #4]
 8017f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	6a1b      	ldr	r3, [r3, #32]
 8017f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	69db      	ldr	r3, [r3, #28]
 8017f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	6a1b      	ldr	r3, [r3, #32]
 8017f28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017f2a:	697b      	ldr	r3, [r7, #20]
 8017f2c:	f023 0303 	bic.w	r3, r3, #3
 8017f30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8017f32:	697a      	ldr	r2, [r7, #20]
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	4313      	orrs	r3, r2
 8017f38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017f3a:	697b      	ldr	r3, [r7, #20]
 8017f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017f40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	011b      	lsls	r3, r3, #4
 8017f46:	b2db      	uxtb	r3, r3
 8017f48:	697a      	ldr	r2, [r7, #20]
 8017f4a:	4313      	orrs	r3, r2
 8017f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017f4e:	693b      	ldr	r3, [r7, #16]
 8017f50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8017f54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	021b      	lsls	r3, r3, #8
 8017f5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8017f5e:	693a      	ldr	r2, [r7, #16]
 8017f60:	4313      	orrs	r3, r2
 8017f62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	697a      	ldr	r2, [r7, #20]
 8017f68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	693a      	ldr	r2, [r7, #16]
 8017f6e:	621a      	str	r2, [r3, #32]
}
 8017f70:	bf00      	nop
 8017f72:	371c      	adds	r7, #28
 8017f74:	46bd      	mov	sp, r7
 8017f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f7a:	4770      	bx	lr

08017f7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017f7c:	b480      	push	{r7}
 8017f7e:	b087      	sub	sp, #28
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	60f8      	str	r0, [r7, #12]
 8017f84:	60b9      	str	r1, [r7, #8]
 8017f86:	607a      	str	r2, [r7, #4]
 8017f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	6a1b      	ldr	r3, [r3, #32]
 8017f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	69db      	ldr	r3, [r3, #28]
 8017f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	6a1b      	ldr	r3, [r3, #32]
 8017fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017fa2:	697b      	ldr	r3, [r7, #20]
 8017fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017fa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	021b      	lsls	r3, r3, #8
 8017fae:	697a      	ldr	r2, [r7, #20]
 8017fb0:	4313      	orrs	r3, r2
 8017fb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017fb4:	697b      	ldr	r3, [r7, #20]
 8017fb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017fba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	031b      	lsls	r3, r3, #12
 8017fc0:	b29b      	uxth	r3, r3
 8017fc2:	697a      	ldr	r2, [r7, #20]
 8017fc4:	4313      	orrs	r3, r2
 8017fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017fc8:	693b      	ldr	r3, [r7, #16]
 8017fca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8017fce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017fd0:	68bb      	ldr	r3, [r7, #8]
 8017fd2:	031b      	lsls	r3, r3, #12
 8017fd4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8017fd8:	693a      	ldr	r2, [r7, #16]
 8017fda:	4313      	orrs	r3, r2
 8017fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	697a      	ldr	r2, [r7, #20]
 8017fe2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	693a      	ldr	r2, [r7, #16]
 8017fe8:	621a      	str	r2, [r3, #32]
}
 8017fea:	bf00      	nop
 8017fec:	371c      	adds	r7, #28
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff4:	4770      	bx	lr

08017ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017ff6:	b480      	push	{r7}
 8017ff8:	b085      	sub	sp, #20
 8017ffa:	af00      	add	r7, sp, #0
 8017ffc:	6078      	str	r0, [r7, #4]
 8017ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	689b      	ldr	r3, [r3, #8]
 8018004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801800c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8018012:	683a      	ldr	r2, [r7, #0]
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	4313      	orrs	r3, r2
 8018018:	f043 0307 	orr.w	r3, r3, #7
 801801c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	68fa      	ldr	r2, [r7, #12]
 8018022:	609a      	str	r2, [r3, #8]
}
 8018024:	bf00      	nop
 8018026:	3714      	adds	r7, #20
 8018028:	46bd      	mov	sp, r7
 801802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802e:	4770      	bx	lr

08018030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8018030:	b480      	push	{r7}
 8018032:	b087      	sub	sp, #28
 8018034:	af00      	add	r7, sp, #0
 8018036:	60f8      	str	r0, [r7, #12]
 8018038:	60b9      	str	r1, [r7, #8]
 801803a:	607a      	str	r2, [r7, #4]
 801803c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	689b      	ldr	r3, [r3, #8]
 8018042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018044:	697b      	ldr	r3, [r7, #20]
 8018046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801804a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801804c:	683b      	ldr	r3, [r7, #0]
 801804e:	021a      	lsls	r2, r3, #8
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	431a      	orrs	r2, r3
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	4313      	orrs	r3, r2
 8018058:	697a      	ldr	r2, [r7, #20]
 801805a:	4313      	orrs	r3, r2
 801805c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	697a      	ldr	r2, [r7, #20]
 8018062:	609a      	str	r2, [r3, #8]
}
 8018064:	bf00      	nop
 8018066:	371c      	adds	r7, #28
 8018068:	46bd      	mov	sp, r7
 801806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806e:	4770      	bx	lr

08018070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8018070:	b480      	push	{r7}
 8018072:	b087      	sub	sp, #28
 8018074:	af00      	add	r7, sp, #0
 8018076:	60f8      	str	r0, [r7, #12]
 8018078:	60b9      	str	r1, [r7, #8]
 801807a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801807c:	68bb      	ldr	r3, [r7, #8]
 801807e:	f003 031f 	and.w	r3, r3, #31
 8018082:	2201      	movs	r2, #1
 8018084:	fa02 f303 	lsl.w	r3, r2, r3
 8018088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	6a1a      	ldr	r2, [r3, #32]
 801808e:	697b      	ldr	r3, [r7, #20]
 8018090:	43db      	mvns	r3, r3
 8018092:	401a      	ands	r2, r3
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	6a1a      	ldr	r2, [r3, #32]
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	f003 031f 	and.w	r3, r3, #31
 80180a2:	6879      	ldr	r1, [r7, #4]
 80180a4:	fa01 f303 	lsl.w	r3, r1, r3
 80180a8:	431a      	orrs	r2, r3
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	621a      	str	r2, [r3, #32]
}
 80180ae:	bf00      	nop
 80180b0:	371c      	adds	r7, #28
 80180b2:	46bd      	mov	sp, r7
 80180b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b8:	4770      	bx	lr
	...

080180bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80180bc:	b480      	push	{r7}
 80180be:	b085      	sub	sp, #20
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
 80180c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80180cc:	2b01      	cmp	r3, #1
 80180ce:	d101      	bne.n	80180d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80180d0:	2302      	movs	r3, #2
 80180d2:	e068      	b.n	80181a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	2201      	movs	r2, #1
 80180d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2202      	movs	r2, #2
 80180e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	689b      	ldr	r3, [r3, #8]
 80180f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	4a2e      	ldr	r2, [pc, #184]	; (80181b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80180fa:	4293      	cmp	r3, r2
 80180fc:	d004      	beq.n	8018108 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	4a2d      	ldr	r2, [pc, #180]	; (80181b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8018104:	4293      	cmp	r3, r2
 8018106:	d108      	bne.n	801811a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801810e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	68fa      	ldr	r2, [r7, #12]
 8018116:	4313      	orrs	r3, r2
 8018118:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8018122:	683b      	ldr	r3, [r7, #0]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	68fa      	ldr	r2, [r7, #12]
 8018128:	4313      	orrs	r3, r2
 801812a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	68fa      	ldr	r2, [r7, #12]
 8018132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	4a1e      	ldr	r2, [pc, #120]	; (80181b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801813a:	4293      	cmp	r3, r2
 801813c:	d01d      	beq.n	801817a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018146:	d018      	beq.n	801817a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	4a1b      	ldr	r2, [pc, #108]	; (80181bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801814e:	4293      	cmp	r3, r2
 8018150:	d013      	beq.n	801817a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	4a1a      	ldr	r2, [pc, #104]	; (80181c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8018158:	4293      	cmp	r3, r2
 801815a:	d00e      	beq.n	801817a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4a18      	ldr	r2, [pc, #96]	; (80181c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8018162:	4293      	cmp	r3, r2
 8018164:	d009      	beq.n	801817a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	4a13      	ldr	r2, [pc, #76]	; (80181b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801816c:	4293      	cmp	r3, r2
 801816e:	d004      	beq.n	801817a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	4a14      	ldr	r2, [pc, #80]	; (80181c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8018176:	4293      	cmp	r3, r2
 8018178:	d10c      	bne.n	8018194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8018182:	683b      	ldr	r3, [r7, #0]
 8018184:	689b      	ldr	r3, [r3, #8]
 8018186:	68ba      	ldr	r2, [r7, #8]
 8018188:	4313      	orrs	r3, r2
 801818a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	68ba      	ldr	r2, [r7, #8]
 8018192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2201      	movs	r2, #1
 8018198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	2200      	movs	r2, #0
 80181a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80181a4:	2300      	movs	r3, #0
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	3714      	adds	r7, #20
 80181aa:	46bd      	mov	sp, r7
 80181ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b0:	4770      	bx	lr
 80181b2:	bf00      	nop
 80181b4:	40012c00 	.word	0x40012c00
 80181b8:	40013400 	.word	0x40013400
 80181bc:	40000400 	.word	0x40000400
 80181c0:	40000800 	.word	0x40000800
 80181c4:	40000c00 	.word	0x40000c00
 80181c8:	40014000 	.word	0x40014000

080181cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80181cc:	b480      	push	{r7}
 80181ce:	b085      	sub	sp, #20
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80181d6:	2300      	movs	r3, #0
 80181d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d101      	bne.n	80181e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80181e4:	2302      	movs	r3, #2
 80181e6:	e087      	b.n	80182f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2201      	movs	r2, #1
 80181ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80181f6:	683b      	ldr	r3, [r7, #0]
 80181f8:	68db      	ldr	r3, [r3, #12]
 80181fa:	4313      	orrs	r3, r2
 80181fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018204:	683b      	ldr	r3, [r7, #0]
 8018206:	689b      	ldr	r3, [r3, #8]
 8018208:	4313      	orrs	r3, r2
 801820a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8018212:	683b      	ldr	r3, [r7, #0]
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	4313      	orrs	r3, r2
 8018218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8018220:	683b      	ldr	r3, [r7, #0]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	4313      	orrs	r3, r2
 8018226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801822e:	683b      	ldr	r3, [r7, #0]
 8018230:	691b      	ldr	r3, [r3, #16]
 8018232:	4313      	orrs	r3, r2
 8018234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801823c:	683b      	ldr	r3, [r7, #0]
 801823e:	695b      	ldr	r3, [r3, #20]
 8018240:	4313      	orrs	r3, r2
 8018242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801824e:	4313      	orrs	r3, r2
 8018250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	699b      	ldr	r3, [r3, #24]
 801825c:	041b      	lsls	r3, r3, #16
 801825e:	4313      	orrs	r3, r2
 8018260:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	4a27      	ldr	r2, [pc, #156]	; (8018304 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8018268:	4293      	cmp	r3, r2
 801826a:	d004      	beq.n	8018276 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4a25      	ldr	r2, [pc, #148]	; (8018308 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8018272:	4293      	cmp	r3, r2
 8018274:	d106      	bne.n	8018284 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801827c:	683b      	ldr	r3, [r7, #0]
 801827e:	69db      	ldr	r3, [r3, #28]
 8018280:	4313      	orrs	r3, r2
 8018282:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	4a1e      	ldr	r2, [pc, #120]	; (8018304 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801828a:	4293      	cmp	r3, r2
 801828c:	d004      	beq.n	8018298 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	4a1d      	ldr	r2, [pc, #116]	; (8018308 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8018294:	4293      	cmp	r3, r2
 8018296:	d126      	bne.n	80182e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182a2:	051b      	lsls	r3, r3, #20
 80182a4:	4313      	orrs	r3, r2
 80182a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	6a1b      	ldr	r3, [r3, #32]
 80182b2:	4313      	orrs	r3, r2
 80182b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80182bc:	683b      	ldr	r3, [r7, #0]
 80182be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182c0:	4313      	orrs	r3, r2
 80182c2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4a0e      	ldr	r2, [pc, #56]	; (8018304 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80182ca:	4293      	cmp	r3, r2
 80182cc:	d004      	beq.n	80182d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	4a0d      	ldr	r2, [pc, #52]	; (8018308 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80182d4:	4293      	cmp	r3, r2
 80182d6:	d106      	bne.n	80182e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182e2:	4313      	orrs	r3, r2
 80182e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	68fa      	ldr	r2, [r7, #12]
 80182ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	2200      	movs	r2, #0
 80182f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80182f6:	2300      	movs	r3, #0
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	3714      	adds	r7, #20
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr
 8018304:	40012c00 	.word	0x40012c00
 8018308:	40013400 	.word	0x40013400

0801830c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801830c:	b480      	push	{r7}
 801830e:	b083      	sub	sp, #12
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018314:	bf00      	nop
 8018316:	370c      	adds	r7, #12
 8018318:	46bd      	mov	sp, r7
 801831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831e:	4770      	bx	lr

08018320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018320:	b480      	push	{r7}
 8018322:	b083      	sub	sp, #12
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018328:	bf00      	nop
 801832a:	370c      	adds	r7, #12
 801832c:	46bd      	mov	sp, r7
 801832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018332:	4770      	bx	lr

08018334 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018334:	b480      	push	{r7}
 8018336:	b083      	sub	sp, #12
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801833c:	bf00      	nop
 801833e:	370c      	adds	r7, #12
 8018340:	46bd      	mov	sp, r7
 8018342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018346:	4770      	bx	lr

08018348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b082      	sub	sp, #8
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d101      	bne.n	801835a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018356:	2301      	movs	r3, #1
 8018358:	e042      	b.n	80183e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018360:	2b00      	cmp	r3, #0
 8018362:	d106      	bne.n	8018372 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2200      	movs	r2, #0
 8018368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801836c:	6878      	ldr	r0, [r7, #4]
 801836e:	f7f7 fa01 	bl	800f774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2224      	movs	r2, #36	; 0x24
 8018376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	681a      	ldr	r2, [r3, #0]
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	f022 0201 	bic.w	r2, r2, #1
 8018388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801838a:	6878      	ldr	r0, [r7, #4]
 801838c:	f000 fbbc 	bl	8018b08 <UART_SetConfig>
 8018390:	4603      	mov	r3, r0
 8018392:	2b01      	cmp	r3, #1
 8018394:	d101      	bne.n	801839a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018396:	2301      	movs	r3, #1
 8018398:	e022      	b.n	80183e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d002      	beq.n	80183a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80183a2:	6878      	ldr	r0, [r7, #4]
 80183a4:	f000 feb0 	bl	8019108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	685a      	ldr	r2, [r3, #4]
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80183b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	689a      	ldr	r2, [r3, #8]
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80183c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	681a      	ldr	r2, [r3, #0]
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	f042 0201 	orr.w	r2, r2, #1
 80183d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80183d8:	6878      	ldr	r0, [r7, #4]
 80183da:	f000 ff37 	bl	801924c <UART_CheckIdleState>
 80183de:	4603      	mov	r3, r0
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	3708      	adds	r7, #8
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd80      	pop	{r7, pc}

080183e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b08a      	sub	sp, #40	; 0x28
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	60f8      	str	r0, [r7, #12]
 80183f0:	60b9      	str	r1, [r7, #8]
 80183f2:	4613      	mov	r3, r2
 80183f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80183fc:	2b20      	cmp	r3, #32
 80183fe:	d137      	bne.n	8018470 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d002      	beq.n	801840c <HAL_UART_Receive_IT+0x24>
 8018406:	88fb      	ldrh	r3, [r7, #6]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d101      	bne.n	8018410 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801840c:	2301      	movs	r3, #1
 801840e:	e030      	b.n	8018472 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	2200      	movs	r2, #0
 8018414:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	4a18      	ldr	r2, [pc, #96]	; (801847c <HAL_UART_Receive_IT+0x94>)
 801841c:	4293      	cmp	r3, r2
 801841e:	d01f      	beq.n	8018460 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	685b      	ldr	r3, [r3, #4]
 8018426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801842a:	2b00      	cmp	r3, #0
 801842c:	d018      	beq.n	8018460 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018434:	697b      	ldr	r3, [r7, #20]
 8018436:	e853 3f00 	ldrex	r3, [r3]
 801843a:	613b      	str	r3, [r7, #16]
   return(result);
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018442:	627b      	str	r3, [r7, #36]	; 0x24
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	461a      	mov	r2, r3
 801844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801844c:	623b      	str	r3, [r7, #32]
 801844e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018450:	69f9      	ldr	r1, [r7, #28]
 8018452:	6a3a      	ldr	r2, [r7, #32]
 8018454:	e841 2300 	strex	r3, r2, [r1]
 8018458:	61bb      	str	r3, [r7, #24]
   return(result);
 801845a:	69bb      	ldr	r3, [r7, #24]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d1e6      	bne.n	801842e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018460:	88fb      	ldrh	r3, [r7, #6]
 8018462:	461a      	mov	r2, r3
 8018464:	68b9      	ldr	r1, [r7, #8]
 8018466:	68f8      	ldr	r0, [r7, #12]
 8018468:	f001 f802 	bl	8019470 <UART_Start_Receive_IT>
 801846c:	4603      	mov	r3, r0
 801846e:	e000      	b.n	8018472 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018470:	2302      	movs	r3, #2
  }
}
 8018472:	4618      	mov	r0, r3
 8018474:	3728      	adds	r7, #40	; 0x28
 8018476:	46bd      	mov	sp, r7
 8018478:	bd80      	pop	{r7, pc}
 801847a:	bf00      	nop
 801847c:	40008000 	.word	0x40008000

08018480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b0ba      	sub	sp, #232	; 0xe8
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	69db      	ldr	r3, [r3, #28]
 801848e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	689b      	ldr	r3, [r3, #8]
 80184a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80184a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80184aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80184ae:	4013      	ands	r3, r2
 80184b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80184b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d11b      	bne.n	80184f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80184bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80184c0:	f003 0320 	and.w	r3, r3, #32
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d015      	beq.n	80184f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80184c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80184cc:	f003 0320 	and.w	r3, r3, #32
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d105      	bne.n	80184e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80184d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80184d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d009      	beq.n	80184f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	f000 82e3 	beq.w	8018ab0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	4798      	blx	r3
      }
      return;
 80184f2:	e2dd      	b.n	8018ab0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80184f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	f000 8123 	beq.w	8018744 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80184fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8018502:	4b8d      	ldr	r3, [pc, #564]	; (8018738 <HAL_UART_IRQHandler+0x2b8>)
 8018504:	4013      	ands	r3, r2
 8018506:	2b00      	cmp	r3, #0
 8018508:	d106      	bne.n	8018518 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801850a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801850e:	4b8b      	ldr	r3, [pc, #556]	; (801873c <HAL_UART_IRQHandler+0x2bc>)
 8018510:	4013      	ands	r3, r2
 8018512:	2b00      	cmp	r3, #0
 8018514:	f000 8116 	beq.w	8018744 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801851c:	f003 0301 	and.w	r3, r3, #1
 8018520:	2b00      	cmp	r3, #0
 8018522:	d011      	beq.n	8018548 <HAL_UART_IRQHandler+0xc8>
 8018524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801852c:	2b00      	cmp	r3, #0
 801852e:	d00b      	beq.n	8018548 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	2201      	movs	r2, #1
 8018536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801853e:	f043 0201 	orr.w	r2, r3, #1
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801854c:	f003 0302 	and.w	r3, r3, #2
 8018550:	2b00      	cmp	r3, #0
 8018552:	d011      	beq.n	8018578 <HAL_UART_IRQHandler+0xf8>
 8018554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018558:	f003 0301 	and.w	r3, r3, #1
 801855c:	2b00      	cmp	r3, #0
 801855e:	d00b      	beq.n	8018578 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	2202      	movs	r2, #2
 8018566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801856e:	f043 0204 	orr.w	r2, r3, #4
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801857c:	f003 0304 	and.w	r3, r3, #4
 8018580:	2b00      	cmp	r3, #0
 8018582:	d011      	beq.n	80185a8 <HAL_UART_IRQHandler+0x128>
 8018584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018588:	f003 0301 	and.w	r3, r3, #1
 801858c:	2b00      	cmp	r3, #0
 801858e:	d00b      	beq.n	80185a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	2204      	movs	r2, #4
 8018596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801859e:	f043 0202 	orr.w	r2, r3, #2
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80185a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80185ac:	f003 0308 	and.w	r3, r3, #8
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d017      	beq.n	80185e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80185b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80185b8:	f003 0320 	and.w	r3, r3, #32
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d105      	bne.n	80185cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80185c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80185c4:	4b5c      	ldr	r3, [pc, #368]	; (8018738 <HAL_UART_IRQHandler+0x2b8>)
 80185c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d00b      	beq.n	80185e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2208      	movs	r2, #8
 80185d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80185da:	f043 0208 	orr.w	r2, r3, #8
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80185e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80185e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d012      	beq.n	8018616 <HAL_UART_IRQHandler+0x196>
 80185f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80185f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d00c      	beq.n	8018616 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801860c:	f043 0220 	orr.w	r2, r3, #32
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801861c:	2b00      	cmp	r3, #0
 801861e:	f000 8249 	beq.w	8018ab4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018626:	f003 0320 	and.w	r3, r3, #32
 801862a:	2b00      	cmp	r3, #0
 801862c:	d013      	beq.n	8018656 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801862e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018632:	f003 0320 	and.w	r3, r3, #32
 8018636:	2b00      	cmp	r3, #0
 8018638:	d105      	bne.n	8018646 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801863a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801863e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018642:	2b00      	cmp	r3, #0
 8018644:	d007      	beq.n	8018656 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801864a:	2b00      	cmp	r3, #0
 801864c:	d003      	beq.n	8018656 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018652:	6878      	ldr	r0, [r7, #4]
 8018654:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801865c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	689b      	ldr	r3, [r3, #8]
 8018666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801866a:	2b40      	cmp	r3, #64	; 0x40
 801866c:	d005      	beq.n	801867a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801866e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018672:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018676:	2b00      	cmp	r3, #0
 8018678:	d054      	beq.n	8018724 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801867a:	6878      	ldr	r0, [r7, #4]
 801867c:	f001 f81a 	bl	80196b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	689b      	ldr	r3, [r3, #8]
 8018686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801868a:	2b40      	cmp	r3, #64	; 0x40
 801868c:	d146      	bne.n	801871c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	3308      	adds	r3, #8
 8018694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801869c:	e853 3f00 	ldrex	r3, [r3]
 80186a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80186a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80186a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80186ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	3308      	adds	r3, #8
 80186b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80186ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80186be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80186c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80186ca:	e841 2300 	strex	r3, r2, [r1]
 80186ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80186d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d1d9      	bne.n	801868e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d017      	beq.n	8018714 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186ea:	4a15      	ldr	r2, [pc, #84]	; (8018740 <HAL_UART_IRQHandler+0x2c0>)
 80186ec:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186f4:	4618      	mov	r0, r3
 80186f6:	f7f9 fd6e 	bl	80121d6 <HAL_DMA_Abort_IT>
 80186fa:	4603      	mov	r3, r0
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d019      	beq.n	8018734 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018708:	687a      	ldr	r2, [r7, #4]
 801870a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801870e:	4610      	mov	r0, r2
 8018710:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018712:	e00f      	b.n	8018734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018714:	6878      	ldr	r0, [r7, #4]
 8018716:	f000 f9e1 	bl	8018adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801871a:	e00b      	b.n	8018734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801871c:	6878      	ldr	r0, [r7, #4]
 801871e:	f000 f9dd 	bl	8018adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018722:	e007      	b.n	8018734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	f000 f9d9 	bl	8018adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8018732:	e1bf      	b.n	8018ab4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018734:	bf00      	nop
    return;
 8018736:	e1bd      	b.n	8018ab4 <HAL_UART_IRQHandler+0x634>
 8018738:	10000001 	.word	0x10000001
 801873c:	04000120 	.word	0x04000120
 8018740:	08019781 	.word	0x08019781

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018748:	2b01      	cmp	r3, #1
 801874a:	f040 8153 	bne.w	80189f4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801874e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018752:	f003 0310 	and.w	r3, r3, #16
 8018756:	2b00      	cmp	r3, #0
 8018758:	f000 814c 	beq.w	80189f4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801875c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018760:	f003 0310 	and.w	r3, r3, #16
 8018764:	2b00      	cmp	r3, #0
 8018766:	f000 8145 	beq.w	80189f4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	2210      	movs	r2, #16
 8018770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	689b      	ldr	r3, [r3, #8]
 8018778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801877c:	2b40      	cmp	r3, #64	; 0x40
 801877e:	f040 80bb 	bne.w	80188f8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8018794:	2b00      	cmp	r3, #0
 8018796:	f000 818f 	beq.w	8018ab8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80187a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80187a4:	429a      	cmp	r2, r3
 80187a6:	f080 8187 	bcs.w	8018ab8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80187b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	f003 0320 	and.w	r3, r3, #32
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	f040 8087 	bne.w	80188d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80187d4:	e853 3f00 	ldrex	r3, [r3]
 80187d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80187dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80187e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80187e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	461a      	mov	r2, r3
 80187ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80187f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80187f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80187fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018802:	e841 2300 	strex	r3, r2, [r1]
 8018806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801880a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801880e:	2b00      	cmp	r3, #0
 8018810:	d1da      	bne.n	80187c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	3308      	adds	r3, #8
 8018818:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801881a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801881c:	e853 3f00 	ldrex	r3, [r3]
 8018820:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8018822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018824:	f023 0301 	bic.w	r3, r3, #1
 8018828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	3308      	adds	r3, #8
 8018832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018836:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801883a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801883c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801883e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018842:	e841 2300 	strex	r3, r2, [r1]
 8018846:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8018848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801884a:	2b00      	cmp	r3, #0
 801884c:	d1e1      	bne.n	8018812 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	3308      	adds	r3, #8
 8018854:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018858:	e853 3f00 	ldrex	r3, [r3]
 801885c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801885e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	3308      	adds	r3, #8
 801886e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018872:	66fa      	str	r2, [r7, #108]	; 0x6c
 8018874:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018876:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801887a:	e841 2300 	strex	r3, r2, [r1]
 801887e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8018880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018882:	2b00      	cmp	r3, #0
 8018884:	d1e3      	bne.n	801884e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	2220      	movs	r2, #32
 801888a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	2200      	movs	r2, #0
 8018892:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801889a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801889c:	e853 3f00 	ldrex	r3, [r3]
 80188a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80188a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80188a4:	f023 0310 	bic.w	r3, r3, #16
 80188a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	461a      	mov	r2, r3
 80188b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80188b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80188b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80188bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80188be:	e841 2300 	strex	r3, r2, [r1]
 80188c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80188c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d1e4      	bne.n	8018894 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80188d0:	4618      	mov	r0, r3
 80188d2:	f7f9 fc24 	bl	801211e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	2202      	movs	r2, #2
 80188da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80188e8:	b29b      	uxth	r3, r3
 80188ea:	1ad3      	subs	r3, r2, r3
 80188ec:	b29b      	uxth	r3, r3
 80188ee:	4619      	mov	r1, r3
 80188f0:	6878      	ldr	r0, [r7, #4]
 80188f2:	f000 f8fd 	bl	8018af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80188f6:	e0df      	b.n	8018ab8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018904:	b29b      	uxth	r3, r3
 8018906:	1ad3      	subs	r3, r2, r3
 8018908:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018912:	b29b      	uxth	r3, r3
 8018914:	2b00      	cmp	r3, #0
 8018916:	f000 80d1 	beq.w	8018abc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801891a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801891e:	2b00      	cmp	r3, #0
 8018920:	f000 80cc 	beq.w	8018abc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801892c:	e853 3f00 	ldrex	r3, [r3]
 8018930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	461a      	mov	r2, r3
 8018942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018946:	647b      	str	r3, [r7, #68]	; 0x44
 8018948:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801894a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801894c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801894e:	e841 2300 	strex	r3, r2, [r1]
 8018952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018956:	2b00      	cmp	r3, #0
 8018958:	d1e4      	bne.n	8018924 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	3308      	adds	r3, #8
 8018960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018964:	e853 3f00 	ldrex	r3, [r3]
 8018968:	623b      	str	r3, [r7, #32]
   return(result);
 801896a:	6a3b      	ldr	r3, [r7, #32]
 801896c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018970:	f023 0301 	bic.w	r3, r3, #1
 8018974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	3308      	adds	r3, #8
 801897e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018982:	633a      	str	r2, [r7, #48]	; 0x30
 8018984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801898a:	e841 2300 	strex	r3, r2, [r1]
 801898e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018992:	2b00      	cmp	r3, #0
 8018994:	d1e1      	bne.n	801895a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	2220      	movs	r2, #32
 801899a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	2200      	movs	r2, #0
 80189a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	2200      	movs	r2, #0
 80189a8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80189b0:	693b      	ldr	r3, [r7, #16]
 80189b2:	e853 3f00 	ldrex	r3, [r3]
 80189b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	f023 0310 	bic.w	r3, r3, #16
 80189be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	461a      	mov	r2, r3
 80189c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80189cc:	61fb      	str	r3, [r7, #28]
 80189ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80189d0:	69b9      	ldr	r1, [r7, #24]
 80189d2:	69fa      	ldr	r2, [r7, #28]
 80189d4:	e841 2300 	strex	r3, r2, [r1]
 80189d8:	617b      	str	r3, [r7, #20]
   return(result);
 80189da:	697b      	ldr	r3, [r7, #20]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d1e4      	bne.n	80189aa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	2202      	movs	r2, #2
 80189e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80189e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80189ea:	4619      	mov	r1, r3
 80189ec:	6878      	ldr	r0, [r7, #4]
 80189ee:	f000 f87f 	bl	8018af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80189f2:	e063      	b.n	8018abc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80189f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80189f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d00e      	beq.n	8018a1e <HAL_UART_IRQHandler+0x59e>
 8018a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d008      	beq.n	8018a1e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8018a14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f001 fc10 	bl	801a23c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018a1c:	e051      	b.n	8018ac2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8018a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d014      	beq.n	8018a54 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8018a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d105      	bne.n	8018a42 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d008      	beq.n	8018a54 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d03a      	beq.n	8018ac0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	4798      	blx	r3
    }
    return;
 8018a52:	e035      	b.n	8018ac0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d009      	beq.n	8018a74 <HAL_UART_IRQHandler+0x5f4>
 8018a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d003      	beq.n	8018a74 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8018a6c:	6878      	ldr	r0, [r7, #4]
 8018a6e:	f000 fe9d 	bl	80197ac <UART_EndTransmit_IT>
    return;
 8018a72:	e026      	b.n	8018ac2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8018a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d009      	beq.n	8018a94 <HAL_UART_IRQHandler+0x614>
 8018a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018a84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d003      	beq.n	8018a94 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8018a8c:	6878      	ldr	r0, [r7, #4]
 8018a8e:	f001 fbe9 	bl	801a264 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018a92:	e016      	b.n	8018ac2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d010      	beq.n	8018ac2 <HAL_UART_IRQHandler+0x642>
 8018aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	da0c      	bge.n	8018ac2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018aa8:	6878      	ldr	r0, [r7, #4]
 8018aaa:	f001 fbd1 	bl	801a250 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018aae:	e008      	b.n	8018ac2 <HAL_UART_IRQHandler+0x642>
      return;
 8018ab0:	bf00      	nop
 8018ab2:	e006      	b.n	8018ac2 <HAL_UART_IRQHandler+0x642>
    return;
 8018ab4:	bf00      	nop
 8018ab6:	e004      	b.n	8018ac2 <HAL_UART_IRQHandler+0x642>
      return;
 8018ab8:	bf00      	nop
 8018aba:	e002      	b.n	8018ac2 <HAL_UART_IRQHandler+0x642>
      return;
 8018abc:	bf00      	nop
 8018abe:	e000      	b.n	8018ac2 <HAL_UART_IRQHandler+0x642>
    return;
 8018ac0:	bf00      	nop
  }
}
 8018ac2:	37e8      	adds	r7, #232	; 0xe8
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}

08018ac8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018ac8:	b480      	push	{r7}
 8018aca:	b083      	sub	sp, #12
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018ad0:	bf00      	nop
 8018ad2:	370c      	adds	r7, #12
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ada:	4770      	bx	lr

08018adc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018adc:	b480      	push	{r7}
 8018ade:	b083      	sub	sp, #12
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018ae4:	bf00      	nop
 8018ae6:	370c      	adds	r7, #12
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aee:	4770      	bx	lr

08018af0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018af0:	b480      	push	{r7}
 8018af2:	b083      	sub	sp, #12
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
 8018af8:	460b      	mov	r3, r1
 8018afa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018afc:	bf00      	nop
 8018afe:	370c      	adds	r7, #12
 8018b00:	46bd      	mov	sp, r7
 8018b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b06:	4770      	bx	lr

08018b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018b0c:	b08c      	sub	sp, #48	; 0x30
 8018b0e:	af00      	add	r7, sp, #0
 8018b10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018b12:	2300      	movs	r3, #0
 8018b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018b18:	697b      	ldr	r3, [r7, #20]
 8018b1a:	689a      	ldr	r2, [r3, #8]
 8018b1c:	697b      	ldr	r3, [r7, #20]
 8018b1e:	691b      	ldr	r3, [r3, #16]
 8018b20:	431a      	orrs	r2, r3
 8018b22:	697b      	ldr	r3, [r7, #20]
 8018b24:	695b      	ldr	r3, [r3, #20]
 8018b26:	431a      	orrs	r2, r3
 8018b28:	697b      	ldr	r3, [r7, #20]
 8018b2a:	69db      	ldr	r3, [r3, #28]
 8018b2c:	4313      	orrs	r3, r2
 8018b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018b30:	697b      	ldr	r3, [r7, #20]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	681a      	ldr	r2, [r3, #0]
 8018b36:	4baa      	ldr	r3, [pc, #680]	; (8018de0 <UART_SetConfig+0x2d8>)
 8018b38:	4013      	ands	r3, r2
 8018b3a:	697a      	ldr	r2, [r7, #20]
 8018b3c:	6812      	ldr	r2, [r2, #0]
 8018b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b40:	430b      	orrs	r3, r1
 8018b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	685b      	ldr	r3, [r3, #4]
 8018b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018b4e:	697b      	ldr	r3, [r7, #20]
 8018b50:	68da      	ldr	r2, [r3, #12]
 8018b52:	697b      	ldr	r3, [r7, #20]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	430a      	orrs	r2, r1
 8018b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018b5a:	697b      	ldr	r3, [r7, #20]
 8018b5c:	699b      	ldr	r3, [r3, #24]
 8018b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018b60:	697b      	ldr	r3, [r7, #20]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	4a9f      	ldr	r2, [pc, #636]	; (8018de4 <UART_SetConfig+0x2dc>)
 8018b66:	4293      	cmp	r3, r2
 8018b68:	d004      	beq.n	8018b74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018b6a:	697b      	ldr	r3, [r7, #20]
 8018b6c:	6a1b      	ldr	r3, [r3, #32]
 8018b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018b70:	4313      	orrs	r3, r2
 8018b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	689b      	ldr	r3, [r3, #8]
 8018b7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018b7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8018b82:	697a      	ldr	r2, [r7, #20]
 8018b84:	6812      	ldr	r2, [r2, #0]
 8018b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b88:	430b      	orrs	r3, r1
 8018b8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b92:	f023 010f 	bic.w	r1, r3, #15
 8018b96:	697b      	ldr	r3, [r7, #20]
 8018b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018b9a:	697b      	ldr	r3, [r7, #20]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	430a      	orrs	r2, r1
 8018ba0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018ba2:	697b      	ldr	r3, [r7, #20]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	4a90      	ldr	r2, [pc, #576]	; (8018de8 <UART_SetConfig+0x2e0>)
 8018ba8:	4293      	cmp	r3, r2
 8018baa:	d125      	bne.n	8018bf8 <UART_SetConfig+0xf0>
 8018bac:	4b8f      	ldr	r3, [pc, #572]	; (8018dec <UART_SetConfig+0x2e4>)
 8018bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018bb2:	f003 0303 	and.w	r3, r3, #3
 8018bb6:	2b03      	cmp	r3, #3
 8018bb8:	d81a      	bhi.n	8018bf0 <UART_SetConfig+0xe8>
 8018bba:	a201      	add	r2, pc, #4	; (adr r2, 8018bc0 <UART_SetConfig+0xb8>)
 8018bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bc0:	08018bd1 	.word	0x08018bd1
 8018bc4:	08018be1 	.word	0x08018be1
 8018bc8:	08018bd9 	.word	0x08018bd9
 8018bcc:	08018be9 	.word	0x08018be9
 8018bd0:	2301      	movs	r3, #1
 8018bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018bd6:	e116      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018bd8:	2302      	movs	r3, #2
 8018bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018bde:	e112      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018be0:	2304      	movs	r3, #4
 8018be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018be6:	e10e      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018be8:	2308      	movs	r3, #8
 8018bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018bee:	e10a      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018bf0:	2310      	movs	r3, #16
 8018bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018bf6:	e106      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018bf8:	697b      	ldr	r3, [r7, #20]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	4a7c      	ldr	r2, [pc, #496]	; (8018df0 <UART_SetConfig+0x2e8>)
 8018bfe:	4293      	cmp	r3, r2
 8018c00:	d138      	bne.n	8018c74 <UART_SetConfig+0x16c>
 8018c02:	4b7a      	ldr	r3, [pc, #488]	; (8018dec <UART_SetConfig+0x2e4>)
 8018c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c08:	f003 030c 	and.w	r3, r3, #12
 8018c0c:	2b0c      	cmp	r3, #12
 8018c0e:	d82d      	bhi.n	8018c6c <UART_SetConfig+0x164>
 8018c10:	a201      	add	r2, pc, #4	; (adr r2, 8018c18 <UART_SetConfig+0x110>)
 8018c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c16:	bf00      	nop
 8018c18:	08018c4d 	.word	0x08018c4d
 8018c1c:	08018c6d 	.word	0x08018c6d
 8018c20:	08018c6d 	.word	0x08018c6d
 8018c24:	08018c6d 	.word	0x08018c6d
 8018c28:	08018c5d 	.word	0x08018c5d
 8018c2c:	08018c6d 	.word	0x08018c6d
 8018c30:	08018c6d 	.word	0x08018c6d
 8018c34:	08018c6d 	.word	0x08018c6d
 8018c38:	08018c55 	.word	0x08018c55
 8018c3c:	08018c6d 	.word	0x08018c6d
 8018c40:	08018c6d 	.word	0x08018c6d
 8018c44:	08018c6d 	.word	0x08018c6d
 8018c48:	08018c65 	.word	0x08018c65
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c52:	e0d8      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018c54:	2302      	movs	r3, #2
 8018c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c5a:	e0d4      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018c5c:	2304      	movs	r3, #4
 8018c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c62:	e0d0      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018c64:	2308      	movs	r3, #8
 8018c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c6a:	e0cc      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018c6c:	2310      	movs	r3, #16
 8018c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c72:	e0c8      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	4a5e      	ldr	r2, [pc, #376]	; (8018df4 <UART_SetConfig+0x2ec>)
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	d125      	bne.n	8018cca <UART_SetConfig+0x1c2>
 8018c7e:	4b5b      	ldr	r3, [pc, #364]	; (8018dec <UART_SetConfig+0x2e4>)
 8018c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018c88:	2b30      	cmp	r3, #48	; 0x30
 8018c8a:	d016      	beq.n	8018cba <UART_SetConfig+0x1b2>
 8018c8c:	2b30      	cmp	r3, #48	; 0x30
 8018c8e:	d818      	bhi.n	8018cc2 <UART_SetConfig+0x1ba>
 8018c90:	2b20      	cmp	r3, #32
 8018c92:	d00a      	beq.n	8018caa <UART_SetConfig+0x1a2>
 8018c94:	2b20      	cmp	r3, #32
 8018c96:	d814      	bhi.n	8018cc2 <UART_SetConfig+0x1ba>
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d002      	beq.n	8018ca2 <UART_SetConfig+0x19a>
 8018c9c:	2b10      	cmp	r3, #16
 8018c9e:	d008      	beq.n	8018cb2 <UART_SetConfig+0x1aa>
 8018ca0:	e00f      	b.n	8018cc2 <UART_SetConfig+0x1ba>
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018ca8:	e0ad      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018caa:	2302      	movs	r3, #2
 8018cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cb0:	e0a9      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018cb2:	2304      	movs	r3, #4
 8018cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cb8:	e0a5      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018cba:	2308      	movs	r3, #8
 8018cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cc0:	e0a1      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018cc2:	2310      	movs	r3, #16
 8018cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cc8:	e09d      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	4a4a      	ldr	r2, [pc, #296]	; (8018df8 <UART_SetConfig+0x2f0>)
 8018cd0:	4293      	cmp	r3, r2
 8018cd2:	d125      	bne.n	8018d20 <UART_SetConfig+0x218>
 8018cd4:	4b45      	ldr	r3, [pc, #276]	; (8018dec <UART_SetConfig+0x2e4>)
 8018cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018cda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018cde:	2bc0      	cmp	r3, #192	; 0xc0
 8018ce0:	d016      	beq.n	8018d10 <UART_SetConfig+0x208>
 8018ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8018ce4:	d818      	bhi.n	8018d18 <UART_SetConfig+0x210>
 8018ce6:	2b80      	cmp	r3, #128	; 0x80
 8018ce8:	d00a      	beq.n	8018d00 <UART_SetConfig+0x1f8>
 8018cea:	2b80      	cmp	r3, #128	; 0x80
 8018cec:	d814      	bhi.n	8018d18 <UART_SetConfig+0x210>
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d002      	beq.n	8018cf8 <UART_SetConfig+0x1f0>
 8018cf2:	2b40      	cmp	r3, #64	; 0x40
 8018cf4:	d008      	beq.n	8018d08 <UART_SetConfig+0x200>
 8018cf6:	e00f      	b.n	8018d18 <UART_SetConfig+0x210>
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cfe:	e082      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d00:	2302      	movs	r3, #2
 8018d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d06:	e07e      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d08:	2304      	movs	r3, #4
 8018d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d0e:	e07a      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d10:	2308      	movs	r3, #8
 8018d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d16:	e076      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d18:	2310      	movs	r3, #16
 8018d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d1e:	e072      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d20:	697b      	ldr	r3, [r7, #20]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	4a35      	ldr	r2, [pc, #212]	; (8018dfc <UART_SetConfig+0x2f4>)
 8018d26:	4293      	cmp	r3, r2
 8018d28:	d12a      	bne.n	8018d80 <UART_SetConfig+0x278>
 8018d2a:	4b30      	ldr	r3, [pc, #192]	; (8018dec <UART_SetConfig+0x2e4>)
 8018d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018d38:	d01a      	beq.n	8018d70 <UART_SetConfig+0x268>
 8018d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018d3e:	d81b      	bhi.n	8018d78 <UART_SetConfig+0x270>
 8018d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018d44:	d00c      	beq.n	8018d60 <UART_SetConfig+0x258>
 8018d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018d4a:	d815      	bhi.n	8018d78 <UART_SetConfig+0x270>
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d003      	beq.n	8018d58 <UART_SetConfig+0x250>
 8018d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018d54:	d008      	beq.n	8018d68 <UART_SetConfig+0x260>
 8018d56:	e00f      	b.n	8018d78 <UART_SetConfig+0x270>
 8018d58:	2300      	movs	r3, #0
 8018d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d5e:	e052      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d60:	2302      	movs	r3, #2
 8018d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d66:	e04e      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d68:	2304      	movs	r3, #4
 8018d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d6e:	e04a      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d70:	2308      	movs	r3, #8
 8018d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d76:	e046      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d78:	2310      	movs	r3, #16
 8018d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d7e:	e042      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	4a17      	ldr	r2, [pc, #92]	; (8018de4 <UART_SetConfig+0x2dc>)
 8018d86:	4293      	cmp	r3, r2
 8018d88:	d13a      	bne.n	8018e00 <UART_SetConfig+0x2f8>
 8018d8a:	4b18      	ldr	r3, [pc, #96]	; (8018dec <UART_SetConfig+0x2e4>)
 8018d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018d90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018d98:	d01a      	beq.n	8018dd0 <UART_SetConfig+0x2c8>
 8018d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018d9e:	d81b      	bhi.n	8018dd8 <UART_SetConfig+0x2d0>
 8018da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018da4:	d00c      	beq.n	8018dc0 <UART_SetConfig+0x2b8>
 8018da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018daa:	d815      	bhi.n	8018dd8 <UART_SetConfig+0x2d0>
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d003      	beq.n	8018db8 <UART_SetConfig+0x2b0>
 8018db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018db4:	d008      	beq.n	8018dc8 <UART_SetConfig+0x2c0>
 8018db6:	e00f      	b.n	8018dd8 <UART_SetConfig+0x2d0>
 8018db8:	2300      	movs	r3, #0
 8018dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018dbe:	e022      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018dc0:	2302      	movs	r3, #2
 8018dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018dc6:	e01e      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018dc8:	2304      	movs	r3, #4
 8018dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018dce:	e01a      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018dd0:	2308      	movs	r3, #8
 8018dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018dd6:	e016      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018dd8:	2310      	movs	r3, #16
 8018dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018dde:	e012      	b.n	8018e06 <UART_SetConfig+0x2fe>
 8018de0:	cfff69f3 	.word	0xcfff69f3
 8018de4:	40008000 	.word	0x40008000
 8018de8:	40013800 	.word	0x40013800
 8018dec:	40021000 	.word	0x40021000
 8018df0:	40004400 	.word	0x40004400
 8018df4:	40004800 	.word	0x40004800
 8018df8:	40004c00 	.word	0x40004c00
 8018dfc:	40005000 	.word	0x40005000
 8018e00:	2310      	movs	r3, #16
 8018e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018e06:	697b      	ldr	r3, [r7, #20]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	4ab0      	ldr	r2, [pc, #704]	; (80190cc <UART_SetConfig+0x5c4>)
 8018e0c:	4293      	cmp	r3, r2
 8018e0e:	f040 809b 	bne.w	8018f48 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018e16:	2b08      	cmp	r3, #8
 8018e18:	d827      	bhi.n	8018e6a <UART_SetConfig+0x362>
 8018e1a:	a201      	add	r2, pc, #4	; (adr r2, 8018e20 <UART_SetConfig+0x318>)
 8018e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e20:	08018e45 	.word	0x08018e45
 8018e24:	08018e4d 	.word	0x08018e4d
 8018e28:	08018e55 	.word	0x08018e55
 8018e2c:	08018e6b 	.word	0x08018e6b
 8018e30:	08018e5b 	.word	0x08018e5b
 8018e34:	08018e6b 	.word	0x08018e6b
 8018e38:	08018e6b 	.word	0x08018e6b
 8018e3c:	08018e6b 	.word	0x08018e6b
 8018e40:	08018e63 	.word	0x08018e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018e44:	f7fb fbee 	bl	8014624 <HAL_RCC_GetPCLK1Freq>
 8018e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018e4a:	e014      	b.n	8018e76 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018e4c:	f7fb fbfe 	bl	801464c <HAL_RCC_GetPCLK2Freq>
 8018e50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018e52:	e010      	b.n	8018e76 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018e54:	4b9e      	ldr	r3, [pc, #632]	; (80190d0 <UART_SetConfig+0x5c8>)
 8018e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018e58:	e00d      	b.n	8018e76 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018e5a:	f7fb fb31 	bl	80144c0 <HAL_RCC_GetSysClockFreq>
 8018e5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018e60:	e009      	b.n	8018e76 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018e68:	e005      	b.n	8018e76 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018e6e:	2301      	movs	r3, #1
 8018e70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018e74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	f000 8130 	beq.w	80190de <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e82:	4a94      	ldr	r2, [pc, #592]	; (80190d4 <UART_SetConfig+0x5cc>)
 8018e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e88:	461a      	mov	r2, r3
 8018e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	685a      	ldr	r2, [r3, #4]
 8018e96:	4613      	mov	r3, r2
 8018e98:	005b      	lsls	r3, r3, #1
 8018e9a:	4413      	add	r3, r2
 8018e9c:	69ba      	ldr	r2, [r7, #24]
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d305      	bcc.n	8018eae <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018ea2:	697b      	ldr	r3, [r7, #20]
 8018ea4:	685b      	ldr	r3, [r3, #4]
 8018ea6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018ea8:	69ba      	ldr	r2, [r7, #24]
 8018eaa:	429a      	cmp	r2, r3
 8018eac:	d903      	bls.n	8018eb6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8018eae:	2301      	movs	r3, #1
 8018eb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018eb4:	e113      	b.n	80190de <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eb8:	2200      	movs	r2, #0
 8018eba:	60bb      	str	r3, [r7, #8]
 8018ebc:	60fa      	str	r2, [r7, #12]
 8018ebe:	697b      	ldr	r3, [r7, #20]
 8018ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ec2:	4a84      	ldr	r2, [pc, #528]	; (80190d4 <UART_SetConfig+0x5cc>)
 8018ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018ec8:	b29b      	uxth	r3, r3
 8018eca:	2200      	movs	r2, #0
 8018ecc:	603b      	str	r3, [r7, #0]
 8018ece:	607a      	str	r2, [r7, #4]
 8018ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ed4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018ed8:	f7e7 fea8 	bl	8000c2c <__aeabi_uldivmod>
 8018edc:	4602      	mov	r2, r0
 8018ede:	460b      	mov	r3, r1
 8018ee0:	4610      	mov	r0, r2
 8018ee2:	4619      	mov	r1, r3
 8018ee4:	f04f 0200 	mov.w	r2, #0
 8018ee8:	f04f 0300 	mov.w	r3, #0
 8018eec:	020b      	lsls	r3, r1, #8
 8018eee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018ef2:	0202      	lsls	r2, r0, #8
 8018ef4:	6979      	ldr	r1, [r7, #20]
 8018ef6:	6849      	ldr	r1, [r1, #4]
 8018ef8:	0849      	lsrs	r1, r1, #1
 8018efa:	2000      	movs	r0, #0
 8018efc:	460c      	mov	r4, r1
 8018efe:	4605      	mov	r5, r0
 8018f00:	eb12 0804 	adds.w	r8, r2, r4
 8018f04:	eb43 0905 	adc.w	r9, r3, r5
 8018f08:	697b      	ldr	r3, [r7, #20]
 8018f0a:	685b      	ldr	r3, [r3, #4]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	469a      	mov	sl, r3
 8018f10:	4693      	mov	fp, r2
 8018f12:	4652      	mov	r2, sl
 8018f14:	465b      	mov	r3, fp
 8018f16:	4640      	mov	r0, r8
 8018f18:	4649      	mov	r1, r9
 8018f1a:	f7e7 fe87 	bl	8000c2c <__aeabi_uldivmod>
 8018f1e:	4602      	mov	r2, r0
 8018f20:	460b      	mov	r3, r1
 8018f22:	4613      	mov	r3, r2
 8018f24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018f26:	6a3b      	ldr	r3, [r7, #32]
 8018f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018f2c:	d308      	bcc.n	8018f40 <UART_SetConfig+0x438>
 8018f2e:	6a3b      	ldr	r3, [r7, #32]
 8018f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018f34:	d204      	bcs.n	8018f40 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8018f36:	697b      	ldr	r3, [r7, #20]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	6a3a      	ldr	r2, [r7, #32]
 8018f3c:	60da      	str	r2, [r3, #12]
 8018f3e:	e0ce      	b.n	80190de <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8018f40:	2301      	movs	r3, #1
 8018f42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018f46:	e0ca      	b.n	80190de <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018f48:	697b      	ldr	r3, [r7, #20]
 8018f4a:	69db      	ldr	r3, [r3, #28]
 8018f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018f50:	d166      	bne.n	8019020 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8018f52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018f56:	2b08      	cmp	r3, #8
 8018f58:	d827      	bhi.n	8018faa <UART_SetConfig+0x4a2>
 8018f5a:	a201      	add	r2, pc, #4	; (adr r2, 8018f60 <UART_SetConfig+0x458>)
 8018f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f60:	08018f85 	.word	0x08018f85
 8018f64:	08018f8d 	.word	0x08018f8d
 8018f68:	08018f95 	.word	0x08018f95
 8018f6c:	08018fab 	.word	0x08018fab
 8018f70:	08018f9b 	.word	0x08018f9b
 8018f74:	08018fab 	.word	0x08018fab
 8018f78:	08018fab 	.word	0x08018fab
 8018f7c:	08018fab 	.word	0x08018fab
 8018f80:	08018fa3 	.word	0x08018fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018f84:	f7fb fb4e 	bl	8014624 <HAL_RCC_GetPCLK1Freq>
 8018f88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018f8a:	e014      	b.n	8018fb6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018f8c:	f7fb fb5e 	bl	801464c <HAL_RCC_GetPCLK2Freq>
 8018f90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018f92:	e010      	b.n	8018fb6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018f94:	4b4e      	ldr	r3, [pc, #312]	; (80190d0 <UART_SetConfig+0x5c8>)
 8018f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018f98:	e00d      	b.n	8018fb6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018f9a:	f7fb fa91 	bl	80144c0 <HAL_RCC_GetSysClockFreq>
 8018f9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018fa0:	e009      	b.n	8018fb6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018fa8:	e005      	b.n	8018fb6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8018faa:	2300      	movs	r3, #0
 8018fac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018fae:	2301      	movs	r3, #1
 8018fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	f000 8090 	beq.w	80190de <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018fbe:	697b      	ldr	r3, [r7, #20]
 8018fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc2:	4a44      	ldr	r2, [pc, #272]	; (80190d4 <UART_SetConfig+0x5cc>)
 8018fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018fc8:	461a      	mov	r2, r3
 8018fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8018fd0:	005a      	lsls	r2, r3, #1
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	685b      	ldr	r3, [r3, #4]
 8018fd6:	085b      	lsrs	r3, r3, #1
 8018fd8:	441a      	add	r2, r3
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	685b      	ldr	r3, [r3, #4]
 8018fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8018fe2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018fe4:	6a3b      	ldr	r3, [r7, #32]
 8018fe6:	2b0f      	cmp	r3, #15
 8018fe8:	d916      	bls.n	8019018 <UART_SetConfig+0x510>
 8018fea:	6a3b      	ldr	r3, [r7, #32]
 8018fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ff0:	d212      	bcs.n	8019018 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018ff2:	6a3b      	ldr	r3, [r7, #32]
 8018ff4:	b29b      	uxth	r3, r3
 8018ff6:	f023 030f 	bic.w	r3, r3, #15
 8018ffa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018ffc:	6a3b      	ldr	r3, [r7, #32]
 8018ffe:	085b      	lsrs	r3, r3, #1
 8019000:	b29b      	uxth	r3, r3
 8019002:	f003 0307 	and.w	r3, r3, #7
 8019006:	b29a      	uxth	r2, r3
 8019008:	8bfb      	ldrh	r3, [r7, #30]
 801900a:	4313      	orrs	r3, r2
 801900c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801900e:	697b      	ldr	r3, [r7, #20]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	8bfa      	ldrh	r2, [r7, #30]
 8019014:	60da      	str	r2, [r3, #12]
 8019016:	e062      	b.n	80190de <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8019018:	2301      	movs	r3, #1
 801901a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801901e:	e05e      	b.n	80190de <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8019020:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8019024:	2b08      	cmp	r3, #8
 8019026:	d828      	bhi.n	801907a <UART_SetConfig+0x572>
 8019028:	a201      	add	r2, pc, #4	; (adr r2, 8019030 <UART_SetConfig+0x528>)
 801902a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801902e:	bf00      	nop
 8019030:	08019055 	.word	0x08019055
 8019034:	0801905d 	.word	0x0801905d
 8019038:	08019065 	.word	0x08019065
 801903c:	0801907b 	.word	0x0801907b
 8019040:	0801906b 	.word	0x0801906b
 8019044:	0801907b 	.word	0x0801907b
 8019048:	0801907b 	.word	0x0801907b
 801904c:	0801907b 	.word	0x0801907b
 8019050:	08019073 	.word	0x08019073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019054:	f7fb fae6 	bl	8014624 <HAL_RCC_GetPCLK1Freq>
 8019058:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801905a:	e014      	b.n	8019086 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801905c:	f7fb faf6 	bl	801464c <HAL_RCC_GetPCLK2Freq>
 8019060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8019062:	e010      	b.n	8019086 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8019064:	4b1a      	ldr	r3, [pc, #104]	; (80190d0 <UART_SetConfig+0x5c8>)
 8019066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8019068:	e00d      	b.n	8019086 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801906a:	f7fb fa29 	bl	80144c0 <HAL_RCC_GetSysClockFreq>
 801906e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8019070:	e009      	b.n	8019086 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8019078:	e005      	b.n	8019086 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 801907a:	2300      	movs	r3, #0
 801907c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801907e:	2301      	movs	r3, #1
 8019080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8019084:	bf00      	nop
    }

    if (pclk != 0U)
 8019086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019088:	2b00      	cmp	r3, #0
 801908a:	d028      	beq.n	80190de <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801908c:	697b      	ldr	r3, [r7, #20]
 801908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019090:	4a10      	ldr	r2, [pc, #64]	; (80190d4 <UART_SetConfig+0x5cc>)
 8019092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019096:	461a      	mov	r2, r3
 8019098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801909a:	fbb3 f2f2 	udiv	r2, r3, r2
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	685b      	ldr	r3, [r3, #4]
 80190a2:	085b      	lsrs	r3, r3, #1
 80190a4:	441a      	add	r2, r3
 80190a6:	697b      	ldr	r3, [r7, #20]
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80190ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80190b0:	6a3b      	ldr	r3, [r7, #32]
 80190b2:	2b0f      	cmp	r3, #15
 80190b4:	d910      	bls.n	80190d8 <UART_SetConfig+0x5d0>
 80190b6:	6a3b      	ldr	r3, [r7, #32]
 80190b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80190bc:	d20c      	bcs.n	80190d8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80190be:	6a3b      	ldr	r3, [r7, #32]
 80190c0:	b29a      	uxth	r2, r3
 80190c2:	697b      	ldr	r3, [r7, #20]
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	60da      	str	r2, [r3, #12]
 80190c8:	e009      	b.n	80190de <UART_SetConfig+0x5d6>
 80190ca:	bf00      	nop
 80190cc:	40008000 	.word	0x40008000
 80190d0:	00f42400 	.word	0x00f42400
 80190d4:	08021e5c 	.word	0x08021e5c
      }
      else
      {
        ret = HAL_ERROR;
 80190d8:	2301      	movs	r3, #1
 80190da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	2201      	movs	r2, #1
 80190e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	2201      	movs	r2, #1
 80190ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80190ee:	697b      	ldr	r3, [r7, #20]
 80190f0:	2200      	movs	r2, #0
 80190f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80190f4:	697b      	ldr	r3, [r7, #20]
 80190f6:	2200      	movs	r2, #0
 80190f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80190fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80190fe:	4618      	mov	r0, r3
 8019100:	3730      	adds	r7, #48	; 0x30
 8019102:	46bd      	mov	sp, r7
 8019104:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08019108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019108:	b480      	push	{r7}
 801910a:	b083      	sub	sp, #12
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019114:	f003 0301 	and.w	r3, r3, #1
 8019118:	2b00      	cmp	r3, #0
 801911a:	d00a      	beq.n	8019132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	685b      	ldr	r3, [r3, #4]
 8019122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	430a      	orrs	r2, r1
 8019130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019136:	f003 0302 	and.w	r3, r3, #2
 801913a:	2b00      	cmp	r3, #0
 801913c:	d00a      	beq.n	8019154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	685b      	ldr	r3, [r3, #4]
 8019144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	430a      	orrs	r2, r1
 8019152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019158:	f003 0304 	and.w	r3, r3, #4
 801915c:	2b00      	cmp	r3, #0
 801915e:	d00a      	beq.n	8019176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	685b      	ldr	r3, [r3, #4]
 8019166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	430a      	orrs	r2, r1
 8019174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801917a:	f003 0308 	and.w	r3, r3, #8
 801917e:	2b00      	cmp	r3, #0
 8019180:	d00a      	beq.n	8019198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	430a      	orrs	r2, r1
 8019196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801919c:	f003 0310 	and.w	r3, r3, #16
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d00a      	beq.n	80191ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	689b      	ldr	r3, [r3, #8]
 80191aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	430a      	orrs	r2, r1
 80191b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191be:	f003 0320 	and.w	r3, r3, #32
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d00a      	beq.n	80191dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	689b      	ldr	r3, [r3, #8]
 80191cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	430a      	orrs	r2, r1
 80191da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d01a      	beq.n	801921e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	685b      	ldr	r3, [r3, #4]
 80191ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	430a      	orrs	r2, r1
 80191fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019206:	d10a      	bne.n	801921e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	685b      	ldr	r3, [r3, #4]
 801920e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	430a      	orrs	r2, r1
 801921c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019226:	2b00      	cmp	r3, #0
 8019228:	d00a      	beq.n	8019240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	685b      	ldr	r3, [r3, #4]
 8019230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	430a      	orrs	r2, r1
 801923e:	605a      	str	r2, [r3, #4]
  }
}
 8019240:	bf00      	nop
 8019242:	370c      	adds	r7, #12
 8019244:	46bd      	mov	sp, r7
 8019246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924a:	4770      	bx	lr

0801924c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b098      	sub	sp, #96	; 0x60
 8019250:	af02      	add	r7, sp, #8
 8019252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2200      	movs	r2, #0
 8019258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801925c:	f7f7 f90e 	bl	801047c <HAL_GetTick>
 8019260:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	f003 0308 	and.w	r3, r3, #8
 801926c:	2b08      	cmp	r3, #8
 801926e:	d12f      	bne.n	80192d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019274:	9300      	str	r3, [sp, #0]
 8019276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019278:	2200      	movs	r2, #0
 801927a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801927e:	6878      	ldr	r0, [r7, #4]
 8019280:	f000 f88e 	bl	80193a0 <UART_WaitOnFlagUntilTimeout>
 8019284:	4603      	mov	r3, r0
 8019286:	2b00      	cmp	r3, #0
 8019288:	d022      	beq.n	80192d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019292:	e853 3f00 	ldrex	r3, [r3]
 8019296:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8019298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801929a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801929e:	653b      	str	r3, [r7, #80]	; 0x50
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	461a      	mov	r2, r3
 80192a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192a8:	647b      	str	r3, [r7, #68]	; 0x44
 80192aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80192ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80192b0:	e841 2300 	strex	r3, r2, [r1]
 80192b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80192b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d1e6      	bne.n	801928a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	2220      	movs	r2, #32
 80192c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2200      	movs	r2, #0
 80192c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80192cc:	2303      	movs	r3, #3
 80192ce:	e063      	b.n	8019398 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	f003 0304 	and.w	r3, r3, #4
 80192da:	2b04      	cmp	r3, #4
 80192dc:	d149      	bne.n	8019372 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80192de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80192e2:	9300      	str	r3, [sp, #0]
 80192e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192e6:	2200      	movs	r2, #0
 80192e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80192ec:	6878      	ldr	r0, [r7, #4]
 80192ee:	f000 f857 	bl	80193a0 <UART_WaitOnFlagUntilTimeout>
 80192f2:	4603      	mov	r3, r0
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d03c      	beq.n	8019372 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019300:	e853 3f00 	ldrex	r3, [r3]
 8019304:	623b      	str	r3, [r7, #32]
   return(result);
 8019306:	6a3b      	ldr	r3, [r7, #32]
 8019308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801930c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	461a      	mov	r2, r3
 8019314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019316:	633b      	str	r3, [r7, #48]	; 0x30
 8019318:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801931a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801931c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801931e:	e841 2300 	strex	r3, r2, [r1]
 8019322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8019324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019326:	2b00      	cmp	r3, #0
 8019328:	d1e6      	bne.n	80192f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	3308      	adds	r3, #8
 8019330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019332:	693b      	ldr	r3, [r7, #16]
 8019334:	e853 3f00 	ldrex	r3, [r3]
 8019338:	60fb      	str	r3, [r7, #12]
   return(result);
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	f023 0301 	bic.w	r3, r3, #1
 8019340:	64bb      	str	r3, [r7, #72]	; 0x48
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	3308      	adds	r3, #8
 8019348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801934a:	61fa      	str	r2, [r7, #28]
 801934c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801934e:	69b9      	ldr	r1, [r7, #24]
 8019350:	69fa      	ldr	r2, [r7, #28]
 8019352:	e841 2300 	strex	r3, r2, [r1]
 8019356:	617b      	str	r3, [r7, #20]
   return(result);
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d1e5      	bne.n	801932a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	2220      	movs	r2, #32
 8019362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	2200      	movs	r2, #0
 801936a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801936e:	2303      	movs	r3, #3
 8019370:	e012      	b.n	8019398 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	2220      	movs	r2, #32
 8019376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	2220      	movs	r2, #32
 801937e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2200      	movs	r2, #0
 8019386:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2200      	movs	r2, #0
 801938c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	2200      	movs	r2, #0
 8019392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019396:	2300      	movs	r3, #0
}
 8019398:	4618      	mov	r0, r3
 801939a:	3758      	adds	r7, #88	; 0x58
 801939c:	46bd      	mov	sp, r7
 801939e:	bd80      	pop	{r7, pc}

080193a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b084      	sub	sp, #16
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	60f8      	str	r0, [r7, #12]
 80193a8:	60b9      	str	r1, [r7, #8]
 80193aa:	603b      	str	r3, [r7, #0]
 80193ac:	4613      	mov	r3, r2
 80193ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80193b0:	e049      	b.n	8019446 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80193b2:	69bb      	ldr	r3, [r7, #24]
 80193b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193b8:	d045      	beq.n	8019446 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80193ba:	f7f7 f85f 	bl	801047c <HAL_GetTick>
 80193be:	4602      	mov	r2, r0
 80193c0:	683b      	ldr	r3, [r7, #0]
 80193c2:	1ad3      	subs	r3, r2, r3
 80193c4:	69ba      	ldr	r2, [r7, #24]
 80193c6:	429a      	cmp	r2, r3
 80193c8:	d302      	bcc.n	80193d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80193ca:	69bb      	ldr	r3, [r7, #24]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d101      	bne.n	80193d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80193d0:	2303      	movs	r3, #3
 80193d2:	e048      	b.n	8019466 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	f003 0304 	and.w	r3, r3, #4
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d031      	beq.n	8019446 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	69db      	ldr	r3, [r3, #28]
 80193e8:	f003 0308 	and.w	r3, r3, #8
 80193ec:	2b08      	cmp	r3, #8
 80193ee:	d110      	bne.n	8019412 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	2208      	movs	r2, #8
 80193f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80193f8:	68f8      	ldr	r0, [r7, #12]
 80193fa:	f000 f95b 	bl	80196b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	2208      	movs	r2, #8
 8019402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	2200      	movs	r2, #0
 801940a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801940e:	2301      	movs	r3, #1
 8019410:	e029      	b.n	8019466 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	69db      	ldr	r3, [r3, #28]
 8019418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801941c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019420:	d111      	bne.n	8019446 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801942a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801942c:	68f8      	ldr	r0, [r7, #12]
 801942e:	f000 f941 	bl	80196b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	2220      	movs	r2, #32
 8019436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	2200      	movs	r2, #0
 801943e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8019442:	2303      	movs	r3, #3
 8019444:	e00f      	b.n	8019466 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	69da      	ldr	r2, [r3, #28]
 801944c:	68bb      	ldr	r3, [r7, #8]
 801944e:	4013      	ands	r3, r2
 8019450:	68ba      	ldr	r2, [r7, #8]
 8019452:	429a      	cmp	r2, r3
 8019454:	bf0c      	ite	eq
 8019456:	2301      	moveq	r3, #1
 8019458:	2300      	movne	r3, #0
 801945a:	b2db      	uxtb	r3, r3
 801945c:	461a      	mov	r2, r3
 801945e:	79fb      	ldrb	r3, [r7, #7]
 8019460:	429a      	cmp	r2, r3
 8019462:	d0a6      	beq.n	80193b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019464:	2300      	movs	r3, #0
}
 8019466:	4618      	mov	r0, r3
 8019468:	3710      	adds	r7, #16
 801946a:	46bd      	mov	sp, r7
 801946c:	bd80      	pop	{r7, pc}
	...

08019470 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019470:	b480      	push	{r7}
 8019472:	b0a3      	sub	sp, #140	; 0x8c
 8019474:	af00      	add	r7, sp, #0
 8019476:	60f8      	str	r0, [r7, #12]
 8019478:	60b9      	str	r1, [r7, #8]
 801947a:	4613      	mov	r3, r2
 801947c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	68ba      	ldr	r2, [r7, #8]
 8019482:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	88fa      	ldrh	r2, [r7, #6]
 8019488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	88fa      	ldrh	r2, [r7, #6]
 8019490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	2200      	movs	r2, #0
 8019498:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	689b      	ldr	r3, [r3, #8]
 801949e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80194a2:	d10e      	bne.n	80194c2 <UART_Start_Receive_IT+0x52>
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	691b      	ldr	r3, [r3, #16]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d105      	bne.n	80194b8 <UART_Start_Receive_IT+0x48>
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80194b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80194b6:	e02d      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	22ff      	movs	r2, #255	; 0xff
 80194bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80194c0:	e028      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	689b      	ldr	r3, [r3, #8]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d10d      	bne.n	80194e6 <UART_Start_Receive_IT+0x76>
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	691b      	ldr	r3, [r3, #16]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d104      	bne.n	80194dc <UART_Start_Receive_IT+0x6c>
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	22ff      	movs	r2, #255	; 0xff
 80194d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80194da:	e01b      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	227f      	movs	r2, #127	; 0x7f
 80194e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80194e4:	e016      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	689b      	ldr	r3, [r3, #8]
 80194ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80194ee:	d10d      	bne.n	801950c <UART_Start_Receive_IT+0x9c>
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	691b      	ldr	r3, [r3, #16]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d104      	bne.n	8019502 <UART_Start_Receive_IT+0x92>
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	227f      	movs	r2, #127	; 0x7f
 80194fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8019500:	e008      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	223f      	movs	r2, #63	; 0x3f
 8019506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801950a:	e003      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	2200      	movs	r2, #0
 8019510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	2200      	movs	r2, #0
 8019518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	2222      	movs	r2, #34	; 0x22
 8019520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	3308      	adds	r3, #8
 801952a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801952c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801952e:	e853 3f00 	ldrex	r3, [r3]
 8019532:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8019534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019536:	f043 0301 	orr.w	r3, r3, #1
 801953a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	3308      	adds	r3, #8
 8019544:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019548:	673a      	str	r2, [r7, #112]	; 0x70
 801954a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801954c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801954e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019550:	e841 2300 	strex	r3, r2, [r1]
 8019554:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8019556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019558:	2b00      	cmp	r3, #0
 801955a:	d1e3      	bne.n	8019524 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019564:	d14f      	bne.n	8019606 <UART_Start_Receive_IT+0x196>
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801956c:	88fa      	ldrh	r2, [r7, #6]
 801956e:	429a      	cmp	r2, r3
 8019570:	d349      	bcc.n	8019606 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	689b      	ldr	r3, [r3, #8]
 8019576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801957a:	d107      	bne.n	801958c <UART_Start_Receive_IT+0x11c>
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	691b      	ldr	r3, [r3, #16]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d103      	bne.n	801958c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	4a47      	ldr	r2, [pc, #284]	; (80196a4 <UART_Start_Receive_IT+0x234>)
 8019588:	675a      	str	r2, [r3, #116]	; 0x74
 801958a:	e002      	b.n	8019592 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	4a46      	ldr	r2, [pc, #280]	; (80196a8 <UART_Start_Receive_IT+0x238>)
 8019590:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	691b      	ldr	r3, [r3, #16]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d01a      	beq.n	80195d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195a2:	e853 3f00 	ldrex	r3, [r3]
 80195a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80195a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80195ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	461a      	mov	r2, r3
 80195b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80195bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80195be:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80195c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80195c4:	e841 2300 	strex	r3, r2, [r1]
 80195c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80195ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d1e4      	bne.n	801959a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	3308      	adds	r3, #8
 80195d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195da:	e853 3f00 	ldrex	r3, [r3]
 80195de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80195e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80195e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	3308      	adds	r3, #8
 80195ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80195f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80195f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80195f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195f8:	e841 2300 	strex	r3, r2, [r1]
 80195fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80195fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019600:	2b00      	cmp	r3, #0
 8019602:	d1e5      	bne.n	80195d0 <UART_Start_Receive_IT+0x160>
 8019604:	e046      	b.n	8019694 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	689b      	ldr	r3, [r3, #8]
 801960a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801960e:	d107      	bne.n	8019620 <UART_Start_Receive_IT+0x1b0>
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	691b      	ldr	r3, [r3, #16]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d103      	bne.n	8019620 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	4a24      	ldr	r2, [pc, #144]	; (80196ac <UART_Start_Receive_IT+0x23c>)
 801961c:	675a      	str	r2, [r3, #116]	; 0x74
 801961e:	e002      	b.n	8019626 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	4a23      	ldr	r2, [pc, #140]	; (80196b0 <UART_Start_Receive_IT+0x240>)
 8019624:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	691b      	ldr	r3, [r3, #16]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d019      	beq.n	8019662 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019636:	e853 3f00 	ldrex	r3, [r3]
 801963a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801963e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8019642:	677b      	str	r3, [r7, #116]	; 0x74
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	461a      	mov	r2, r3
 801964a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801964c:	637b      	str	r3, [r7, #52]	; 0x34
 801964e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019654:	e841 2300 	strex	r3, r2, [r1]
 8019658:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965c:	2b00      	cmp	r3, #0
 801965e:	d1e6      	bne.n	801962e <UART_Start_Receive_IT+0x1be>
 8019660:	e018      	b.n	8019694 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019668:	697b      	ldr	r3, [r7, #20]
 801966a:	e853 3f00 	ldrex	r3, [r3]
 801966e:	613b      	str	r3, [r7, #16]
   return(result);
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	f043 0320 	orr.w	r3, r3, #32
 8019676:	67bb      	str	r3, [r7, #120]	; 0x78
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	461a      	mov	r2, r3
 801967e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019680:	623b      	str	r3, [r7, #32]
 8019682:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019684:	69f9      	ldr	r1, [r7, #28]
 8019686:	6a3a      	ldr	r2, [r7, #32]
 8019688:	e841 2300 	strex	r3, r2, [r1]
 801968c:	61bb      	str	r3, [r7, #24]
   return(result);
 801968e:	69bb      	ldr	r3, [r7, #24]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d1e6      	bne.n	8019662 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019694:	2300      	movs	r3, #0
}
 8019696:	4618      	mov	r0, r3
 8019698:	378c      	adds	r7, #140	; 0x8c
 801969a:	46bd      	mov	sp, r7
 801969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a0:	4770      	bx	lr
 80196a2:	bf00      	nop
 80196a4:	08019ed5 	.word	0x08019ed5
 80196a8:	08019b75 	.word	0x08019b75
 80196ac:	080199bd 	.word	0x080199bd
 80196b0:	08019805 	.word	0x08019805

080196b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80196b4:	b480      	push	{r7}
 80196b6:	b095      	sub	sp, #84	; 0x54
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196c4:	e853 3f00 	ldrex	r3, [r3]
 80196c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80196ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80196d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	461a      	mov	r2, r3
 80196d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196da:	643b      	str	r3, [r7, #64]	; 0x40
 80196dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80196e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80196e2:	e841 2300 	strex	r3, r2, [r1]
 80196e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80196e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d1e6      	bne.n	80196bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	3308      	adds	r3, #8
 80196f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196f6:	6a3b      	ldr	r3, [r7, #32]
 80196f8:	e853 3f00 	ldrex	r3, [r3]
 80196fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80196fe:	69fb      	ldr	r3, [r7, #28]
 8019700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019704:	f023 0301 	bic.w	r3, r3, #1
 8019708:	64bb      	str	r3, [r7, #72]	; 0x48
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	3308      	adds	r3, #8
 8019710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019714:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801971a:	e841 2300 	strex	r3, r2, [r1]
 801971e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019722:	2b00      	cmp	r3, #0
 8019724:	d1e3      	bne.n	80196ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801972a:	2b01      	cmp	r3, #1
 801972c:	d118      	bne.n	8019760 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	e853 3f00 	ldrex	r3, [r3]
 801973a:	60bb      	str	r3, [r7, #8]
   return(result);
 801973c:	68bb      	ldr	r3, [r7, #8]
 801973e:	f023 0310 	bic.w	r3, r3, #16
 8019742:	647b      	str	r3, [r7, #68]	; 0x44
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	461a      	mov	r2, r3
 801974a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801974c:	61bb      	str	r3, [r7, #24]
 801974e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019750:	6979      	ldr	r1, [r7, #20]
 8019752:	69ba      	ldr	r2, [r7, #24]
 8019754:	e841 2300 	strex	r3, r2, [r1]
 8019758:	613b      	str	r3, [r7, #16]
   return(result);
 801975a:	693b      	ldr	r3, [r7, #16]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d1e6      	bne.n	801972e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	2220      	movs	r2, #32
 8019764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	2200      	movs	r2, #0
 801976c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	2200      	movs	r2, #0
 8019772:	675a      	str	r2, [r3, #116]	; 0x74
}
 8019774:	bf00      	nop
 8019776:	3754      	adds	r7, #84	; 0x54
 8019778:	46bd      	mov	sp, r7
 801977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977e:	4770      	bx	lr

08019780 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b084      	sub	sp, #16
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801978c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	2200      	movs	r2, #0
 8019792:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	2200      	movs	r2, #0
 801979a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801979e:	68f8      	ldr	r0, [r7, #12]
 80197a0:	f7ff f99c 	bl	8018adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80197a4:	bf00      	nop
 80197a6:	3710      	adds	r7, #16
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}

080197ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b088      	sub	sp, #32
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	e853 3f00 	ldrex	r3, [r3]
 80197c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80197c2:	68bb      	ldr	r3, [r7, #8]
 80197c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80197c8:	61fb      	str	r3, [r7, #28]
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	461a      	mov	r2, r3
 80197d0:	69fb      	ldr	r3, [r7, #28]
 80197d2:	61bb      	str	r3, [r7, #24]
 80197d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197d6:	6979      	ldr	r1, [r7, #20]
 80197d8:	69ba      	ldr	r2, [r7, #24]
 80197da:	e841 2300 	strex	r3, r2, [r1]
 80197de:	613b      	str	r3, [r7, #16]
   return(result);
 80197e0:	693b      	ldr	r3, [r7, #16]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d1e6      	bne.n	80197b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	2220      	movs	r2, #32
 80197ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	2200      	movs	r2, #0
 80197f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80197f4:	6878      	ldr	r0, [r7, #4]
 80197f6:	f7ff f967 	bl	8018ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80197fa:	bf00      	nop
 80197fc:	3720      	adds	r7, #32
 80197fe:	46bd      	mov	sp, r7
 8019800:	bd80      	pop	{r7, pc}
	...

08019804 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b09c      	sub	sp, #112	; 0x70
 8019808:	af00      	add	r7, sp, #0
 801980a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019812:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801981c:	2b22      	cmp	r3, #34	; 0x22
 801981e:	f040 80be 	bne.w	801999e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019828:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801982c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8019830:	b2d9      	uxtb	r1, r3
 8019832:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8019836:	b2da      	uxtb	r2, r3
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801983c:	400a      	ands	r2, r1
 801983e:	b2d2      	uxtb	r2, r2
 8019840:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019846:	1c5a      	adds	r2, r3, #1
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019852:	b29b      	uxth	r3, r3
 8019854:	3b01      	subs	r3, #1
 8019856:	b29a      	uxth	r2, r3
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019864:	b29b      	uxth	r3, r3
 8019866:	2b00      	cmp	r3, #0
 8019868:	f040 80a1 	bne.w	80199ae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019874:	e853 3f00 	ldrex	r3, [r3]
 8019878:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801987a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801987c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8019880:	66bb      	str	r3, [r7, #104]	; 0x68
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	461a      	mov	r2, r3
 8019888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801988a:	65bb      	str	r3, [r7, #88]	; 0x58
 801988c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801988e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019892:	e841 2300 	strex	r3, r2, [r1]
 8019896:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8019898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801989a:	2b00      	cmp	r3, #0
 801989c:	d1e6      	bne.n	801986c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	3308      	adds	r3, #8
 80198a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198a8:	e853 3f00 	ldrex	r3, [r3]
 80198ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80198ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198b0:	f023 0301 	bic.w	r3, r3, #1
 80198b4:	667b      	str	r3, [r7, #100]	; 0x64
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	3308      	adds	r3, #8
 80198bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80198be:	647a      	str	r2, [r7, #68]	; 0x44
 80198c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80198c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80198c6:	e841 2300 	strex	r3, r2, [r1]
 80198ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80198cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d1e5      	bne.n	801989e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2220      	movs	r2, #32
 80198d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	2200      	movs	r2, #0
 80198de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	2200      	movs	r2, #0
 80198e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	4a33      	ldr	r2, [pc, #204]	; (80199b8 <UART_RxISR_8BIT+0x1b4>)
 80198ec:	4293      	cmp	r3, r2
 80198ee:	d01f      	beq.n	8019930 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	685b      	ldr	r3, [r3, #4]
 80198f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d018      	beq.n	8019930 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019906:	e853 3f00 	ldrex	r3, [r3]
 801990a:	623b      	str	r3, [r7, #32]
   return(result);
 801990c:	6a3b      	ldr	r3, [r7, #32]
 801990e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019912:	663b      	str	r3, [r7, #96]	; 0x60
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	461a      	mov	r2, r3
 801991a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801991c:	633b      	str	r3, [r7, #48]	; 0x30
 801991e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019924:	e841 2300 	strex	r3, r2, [r1]
 8019928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801992c:	2b00      	cmp	r3, #0
 801992e:	d1e6      	bne.n	80198fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019934:	2b01      	cmp	r3, #1
 8019936:	d12e      	bne.n	8019996 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2200      	movs	r2, #0
 801993c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019944:	693b      	ldr	r3, [r7, #16]
 8019946:	e853 3f00 	ldrex	r3, [r3]
 801994a:	60fb      	str	r3, [r7, #12]
   return(result);
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	f023 0310 	bic.w	r3, r3, #16
 8019952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	461a      	mov	r2, r3
 801995a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801995c:	61fb      	str	r3, [r7, #28]
 801995e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019960:	69b9      	ldr	r1, [r7, #24]
 8019962:	69fa      	ldr	r2, [r7, #28]
 8019964:	e841 2300 	strex	r3, r2, [r1]
 8019968:	617b      	str	r3, [r7, #20]
   return(result);
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d1e6      	bne.n	801993e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	69db      	ldr	r3, [r3, #28]
 8019976:	f003 0310 	and.w	r3, r3, #16
 801997a:	2b10      	cmp	r3, #16
 801997c:	d103      	bne.n	8019986 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	2210      	movs	r2, #16
 8019984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801998c:	4619      	mov	r1, r3
 801998e:	6878      	ldr	r0, [r7, #4]
 8019990:	f7ff f8ae 	bl	8018af0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019994:	e00b      	b.n	80199ae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019996:	6878      	ldr	r0, [r7, #4]
 8019998:	f7e9 fcc8 	bl	800332c <HAL_UART_RxCpltCallback>
}
 801999c:	e007      	b.n	80199ae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	699a      	ldr	r2, [r3, #24]
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	f042 0208 	orr.w	r2, r2, #8
 80199ac:	619a      	str	r2, [r3, #24]
}
 80199ae:	bf00      	nop
 80199b0:	3770      	adds	r7, #112	; 0x70
 80199b2:	46bd      	mov	sp, r7
 80199b4:	bd80      	pop	{r7, pc}
 80199b6:	bf00      	nop
 80199b8:	40008000 	.word	0x40008000

080199bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b09c      	sub	sp, #112	; 0x70
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80199ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80199d4:	2b22      	cmp	r3, #34	; 0x22
 80199d6:	f040 80be 	bne.w	8019b56 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80199e8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80199ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80199ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80199f2:	4013      	ands	r3, r2
 80199f4:	b29a      	uxth	r2, r3
 80199f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80199f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80199fe:	1c9a      	adds	r2, r3, #2
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019a0a:	b29b      	uxth	r3, r3
 8019a0c:	3b01      	subs	r3, #1
 8019a0e:	b29a      	uxth	r2, r3
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019a1c:	b29b      	uxth	r3, r3
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	f040 80a1 	bne.w	8019b66 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a2c:	e853 3f00 	ldrex	r3, [r3]
 8019a30:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8019a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8019a38:	667b      	str	r3, [r7, #100]	; 0x64
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	461a      	mov	r2, r3
 8019a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019a42:	657b      	str	r3, [r7, #84]	; 0x54
 8019a44:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019a48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019a4a:	e841 2300 	strex	r3, r2, [r1]
 8019a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8019a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d1e6      	bne.n	8019a24 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	3308      	adds	r3, #8
 8019a5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a60:	e853 3f00 	ldrex	r3, [r3]
 8019a64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8019a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a68:	f023 0301 	bic.w	r3, r3, #1
 8019a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	3308      	adds	r3, #8
 8019a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019a76:	643a      	str	r2, [r7, #64]	; 0x40
 8019a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019a7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019a7e:	e841 2300 	strex	r3, r2, [r1]
 8019a82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d1e5      	bne.n	8019a56 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	2220      	movs	r2, #32
 8019a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	2200      	movs	r2, #0
 8019a96:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	4a33      	ldr	r2, [pc, #204]	; (8019b70 <UART_RxISR_16BIT+0x1b4>)
 8019aa4:	4293      	cmp	r3, r2
 8019aa6:	d01f      	beq.n	8019ae8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d018      	beq.n	8019ae8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019abc:	6a3b      	ldr	r3, [r7, #32]
 8019abe:	e853 3f00 	ldrex	r3, [r3]
 8019ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8019ac4:	69fb      	ldr	r3, [r7, #28]
 8019ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	461a      	mov	r2, r3
 8019ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ad6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019adc:	e841 2300 	strex	r3, r2, [r1]
 8019ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d1e6      	bne.n	8019ab6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019aec:	2b01      	cmp	r3, #1
 8019aee:	d12e      	bne.n	8019b4e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	2200      	movs	r2, #0
 8019af4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	e853 3f00 	ldrex	r3, [r3]
 8019b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	f023 0310 	bic.w	r3, r3, #16
 8019b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	461a      	mov	r2, r3
 8019b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019b14:	61bb      	str	r3, [r7, #24]
 8019b16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b18:	6979      	ldr	r1, [r7, #20]
 8019b1a:	69ba      	ldr	r2, [r7, #24]
 8019b1c:	e841 2300 	strex	r3, r2, [r1]
 8019b20:	613b      	str	r3, [r7, #16]
   return(result);
 8019b22:	693b      	ldr	r3, [r7, #16]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d1e6      	bne.n	8019af6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	69db      	ldr	r3, [r3, #28]
 8019b2e:	f003 0310 	and.w	r3, r3, #16
 8019b32:	2b10      	cmp	r3, #16
 8019b34:	d103      	bne.n	8019b3e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	2210      	movs	r2, #16
 8019b3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019b44:	4619      	mov	r1, r3
 8019b46:	6878      	ldr	r0, [r7, #4]
 8019b48:	f7fe ffd2 	bl	8018af0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019b4c:	e00b      	b.n	8019b66 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019b4e:	6878      	ldr	r0, [r7, #4]
 8019b50:	f7e9 fbec 	bl	800332c <HAL_UART_RxCpltCallback>
}
 8019b54:	e007      	b.n	8019b66 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	699a      	ldr	r2, [r3, #24]
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	f042 0208 	orr.w	r2, r2, #8
 8019b64:	619a      	str	r2, [r3, #24]
}
 8019b66:	bf00      	nop
 8019b68:	3770      	adds	r7, #112	; 0x70
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}
 8019b6e:	bf00      	nop
 8019b70:	40008000 	.word	0x40008000

08019b74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b0ac      	sub	sp, #176	; 0xb0
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019b82:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	69db      	ldr	r3, [r3, #28]
 8019b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	689b      	ldr	r3, [r3, #8]
 8019ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019baa:	2b22      	cmp	r3, #34	; 0x22
 8019bac:	f040 8182 	bne.w	8019eb4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019bb6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019bba:	e125      	b.n	8019e08 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bc2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019bc6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8019bca:	b2d9      	uxtb	r1, r3
 8019bcc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8019bd0:	b2da      	uxtb	r2, r3
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019bd6:	400a      	ands	r2, r1
 8019bd8:	b2d2      	uxtb	r2, r2
 8019bda:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019be0:	1c5a      	adds	r2, r3, #1
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	3b01      	subs	r3, #1
 8019bf0:	b29a      	uxth	r2, r3
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	69db      	ldr	r3, [r3, #28]
 8019bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019c06:	f003 0307 	and.w	r3, r3, #7
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d053      	beq.n	8019cb6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019c12:	f003 0301 	and.w	r3, r3, #1
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d011      	beq.n	8019c3e <UART_RxISR_8BIT_FIFOEN+0xca>
 8019c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d00b      	beq.n	8019c3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	2201      	movs	r2, #1
 8019c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c34:	f043 0201 	orr.w	r2, r3, #1
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019c42:	f003 0302 	and.w	r3, r3, #2
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d011      	beq.n	8019c6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8019c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019c4e:	f003 0301 	and.w	r3, r3, #1
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d00b      	beq.n	8019c6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	2202      	movs	r2, #2
 8019c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c64:	f043 0204 	orr.w	r2, r3, #4
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019c72:	f003 0304 	and.w	r3, r3, #4
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d011      	beq.n	8019c9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8019c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019c7e:	f003 0301 	and.w	r3, r3, #1
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d00b      	beq.n	8019c9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	2204      	movs	r2, #4
 8019c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c94:	f043 0202 	orr.w	r2, r3, #2
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d006      	beq.n	8019cb6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019ca8:	6878      	ldr	r0, [r7, #4]
 8019caa:	f7fe ff17 	bl	8018adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019cbc:	b29b      	uxth	r3, r3
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	f040 80a2 	bne.w	8019e08 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ccc:	e853 3f00 	ldrex	r3, [r3]
 8019cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8019cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	461a      	mov	r2, r3
 8019ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019ce8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8019cec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019cee:	e841 2300 	strex	r3, r2, [r1]
 8019cf2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8019cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d1e4      	bne.n	8019cc4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	3308      	adds	r3, #8
 8019d00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d04:	e853 3f00 	ldrex	r3, [r3]
 8019d08:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8019d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019d10:	f023 0301 	bic.w	r3, r3, #1
 8019d14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	3308      	adds	r3, #8
 8019d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019d22:	66ba      	str	r2, [r7, #104]	; 0x68
 8019d24:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d26:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8019d28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019d2a:	e841 2300 	strex	r3, r2, [r1]
 8019d2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8019d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d1e1      	bne.n	8019cfa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	2220      	movs	r2, #32
 8019d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	2200      	movs	r2, #0
 8019d42:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	2200      	movs	r2, #0
 8019d48:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	4a5f      	ldr	r2, [pc, #380]	; (8019ecc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8019d50:	4293      	cmp	r3, r2
 8019d52:	d021      	beq.n	8019d98 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	685b      	ldr	r3, [r3, #4]
 8019d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d01a      	beq.n	8019d98 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d6a:	e853 3f00 	ldrex	r3, [r3]
 8019d6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8019d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	461a      	mov	r2, r3
 8019d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019d84:	657b      	str	r3, [r7, #84]	; 0x54
 8019d86:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019d8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019d8c:	e841 2300 	strex	r3, r2, [r1]
 8019d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8019d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d1e4      	bne.n	8019d62 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d9c:	2b01      	cmp	r3, #1
 8019d9e:	d130      	bne.n	8019e02 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2200      	movs	r2, #0
 8019da4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dae:	e853 3f00 	ldrex	r3, [r3]
 8019db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8019db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019db6:	f023 0310 	bic.w	r3, r3, #16
 8019dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	461a      	mov	r2, r3
 8019dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8019dca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019dd0:	e841 2300 	strex	r3, r2, [r1]
 8019dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d1e4      	bne.n	8019da6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	69db      	ldr	r3, [r3, #28]
 8019de2:	f003 0310 	and.w	r3, r3, #16
 8019de6:	2b10      	cmp	r3, #16
 8019de8:	d103      	bne.n	8019df2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	2210      	movs	r2, #16
 8019df0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019df8:	4619      	mov	r1, r3
 8019dfa:	6878      	ldr	r0, [r7, #4]
 8019dfc:	f7fe fe78 	bl	8018af0 <HAL_UARTEx_RxEventCallback>
 8019e00:	e002      	b.n	8019e08 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8019e02:	6878      	ldr	r0, [r7, #4]
 8019e04:	f7e9 fa92 	bl	800332c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019e08:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d006      	beq.n	8019e1e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8019e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019e14:	f003 0320 	and.w	r3, r3, #32
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	f47f aecf 	bne.w	8019bbc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019e24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8019e28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d049      	beq.n	8019ec4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019e36:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8019e3a:	429a      	cmp	r2, r3
 8019e3c:	d242      	bcs.n	8019ec4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	3308      	adds	r3, #8
 8019e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e46:	6a3b      	ldr	r3, [r7, #32]
 8019e48:	e853 3f00 	ldrex	r3, [r3]
 8019e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8019e4e:	69fb      	ldr	r3, [r7, #28]
 8019e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	3308      	adds	r3, #8
 8019e5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e6a:	e841 2300 	strex	r3, r2, [r1]
 8019e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d1e3      	bne.n	8019e3e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	4a15      	ldr	r2, [pc, #84]	; (8019ed0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8019e7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	e853 3f00 	ldrex	r3, [r3]
 8019e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e8a:	68bb      	ldr	r3, [r7, #8]
 8019e8c:	f043 0320 	orr.w	r3, r3, #32
 8019e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	461a      	mov	r2, r3
 8019e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019e9e:	61bb      	str	r3, [r7, #24]
 8019ea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ea2:	6979      	ldr	r1, [r7, #20]
 8019ea4:	69ba      	ldr	r2, [r7, #24]
 8019ea6:	e841 2300 	strex	r3, r2, [r1]
 8019eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d1e4      	bne.n	8019e7c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019eb2:	e007      	b.n	8019ec4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	699a      	ldr	r2, [r3, #24]
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	f042 0208 	orr.w	r2, r2, #8
 8019ec2:	619a      	str	r2, [r3, #24]
}
 8019ec4:	bf00      	nop
 8019ec6:	37b0      	adds	r7, #176	; 0xb0
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}
 8019ecc:	40008000 	.word	0x40008000
 8019ed0:	08019805 	.word	0x08019805

08019ed4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b0ae      	sub	sp, #184	; 0xb8
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019ee2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	69db      	ldr	r3, [r3, #28]
 8019eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	689b      	ldr	r3, [r3, #8]
 8019f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019f0a:	2b22      	cmp	r3, #34	; 0x22
 8019f0c:	f040 8186 	bne.w	801a21c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019f16:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019f1a:	e129      	b.n	801a170 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f22:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8019f2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8019f32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8019f36:	4013      	ands	r3, r2
 8019f38:	b29a      	uxth	r2, r3
 8019f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019f3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f44:	1c9a      	adds	r2, r3, #2
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	3b01      	subs	r3, #1
 8019f54:	b29a      	uxth	r2, r3
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	69db      	ldr	r3, [r3, #28]
 8019f62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019f6a:	f003 0307 	and.w	r3, r3, #7
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d053      	beq.n	801a01a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019f76:	f003 0301 	and.w	r3, r3, #1
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d011      	beq.n	8019fa2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8019f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d00b      	beq.n	8019fa2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	2201      	movs	r2, #1
 8019f90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019f98:	f043 0201 	orr.w	r2, r3, #1
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019fa6:	f003 0302 	and.w	r3, r3, #2
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d011      	beq.n	8019fd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8019fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019fb2:	f003 0301 	and.w	r3, r3, #1
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d00b      	beq.n	8019fd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	2202      	movs	r2, #2
 8019fc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019fc8:	f043 0204 	orr.w	r2, r3, #4
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019fd6:	f003 0304 	and.w	r3, r3, #4
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d011      	beq.n	801a002 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8019fde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019fe2:	f003 0301 	and.w	r3, r3, #1
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d00b      	beq.n	801a002 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	2204      	movs	r2, #4
 8019ff0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ff8:	f043 0202 	orr.w	r2, r3, #2
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d006      	beq.n	801a01a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a00c:	6878      	ldr	r0, [r7, #4]
 801a00e:	f7fe fd65 	bl	8018adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	2200      	movs	r2, #0
 801a016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a020:	b29b      	uxth	r3, r3
 801a022:	2b00      	cmp	r3, #0
 801a024:	f040 80a4 	bne.w	801a170 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a02e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a030:	e853 3f00 	ldrex	r3, [r3]
 801a034:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801a036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a03c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	461a      	mov	r2, r3
 801a046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a04a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a04e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a050:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801a052:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801a056:	e841 2300 	strex	r3, r2, [r1]
 801a05a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801a05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d1e2      	bne.n	801a028 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	3308      	adds	r3, #8
 801a068:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a06a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a06c:	e853 3f00 	ldrex	r3, [r3]
 801a070:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801a072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a078:	f023 0301 	bic.w	r3, r3, #1
 801a07c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	3308      	adds	r3, #8
 801a086:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801a08a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801a08c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a08e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801a090:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a092:	e841 2300 	strex	r3, r2, [r1]
 801a096:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801a098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d1e1      	bne.n	801a062 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	2220      	movs	r2, #32
 801a0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	4a5f      	ldr	r2, [pc, #380]	; (801a234 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a0b8:	4293      	cmp	r3, r2
 801a0ba:	d021      	beq.n	801a100 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	685b      	ldr	r3, [r3, #4]
 801a0c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d01a      	beq.n	801a100 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0d2:	e853 3f00 	ldrex	r3, [r3]
 801a0d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801a0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a0da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801a0de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	461a      	mov	r2, r3
 801a0e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a0ec:	65bb      	str	r3, [r7, #88]	; 0x58
 801a0ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a0f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a0f4:	e841 2300 	strex	r3, r2, [r1]
 801a0f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801a0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d1e4      	bne.n	801a0ca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a104:	2b01      	cmp	r3, #1
 801a106:	d130      	bne.n	801a16a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	2200      	movs	r2, #0
 801a10c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a116:	e853 3f00 	ldrex	r3, [r3]
 801a11a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801a11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a11e:	f023 0310 	bic.w	r3, r3, #16
 801a122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	461a      	mov	r2, r3
 801a12c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a130:	647b      	str	r3, [r7, #68]	; 0x44
 801a132:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a138:	e841 2300 	strex	r3, r2, [r1]
 801a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801a13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a140:	2b00      	cmp	r3, #0
 801a142:	d1e4      	bne.n	801a10e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	69db      	ldr	r3, [r3, #28]
 801a14a:	f003 0310 	and.w	r3, r3, #16
 801a14e:	2b10      	cmp	r3, #16
 801a150:	d103      	bne.n	801a15a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	2210      	movs	r2, #16
 801a158:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a160:	4619      	mov	r1, r3
 801a162:	6878      	ldr	r0, [r7, #4]
 801a164:	f7fe fcc4 	bl	8018af0 <HAL_UARTEx_RxEventCallback>
 801a168:	e002      	b.n	801a170 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	f7e9 f8de 	bl	800332c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a170:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801a174:	2b00      	cmp	r3, #0
 801a176:	d006      	beq.n	801a186 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 801a178:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a17c:	f003 0320 	and.w	r3, r3, #32
 801a180:	2b00      	cmp	r3, #0
 801a182:	f47f aecb 	bne.w	8019f1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a18c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a190:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801a194:	2b00      	cmp	r3, #0
 801a196:	d049      	beq.n	801a22c <UART_RxISR_16BIT_FIFOEN+0x358>
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a19e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801a1a2:	429a      	cmp	r2, r3
 801a1a4:	d242      	bcs.n	801a22c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	3308      	adds	r3, #8
 801a1ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1b0:	e853 3f00 	ldrex	r3, [r3]
 801a1b4:	623b      	str	r3, [r7, #32]
   return(result);
 801a1b6:	6a3b      	ldr	r3, [r7, #32]
 801a1b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a1bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	3308      	adds	r3, #8
 801a1c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a1ca:	633a      	str	r2, [r7, #48]	; 0x30
 801a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a1d2:	e841 2300 	strex	r3, r2, [r1]
 801a1d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d1e3      	bne.n	801a1a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	4a15      	ldr	r2, [pc, #84]	; (801a238 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a1e2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1ea:	693b      	ldr	r3, [r7, #16]
 801a1ec:	e853 3f00 	ldrex	r3, [r3]
 801a1f0:	60fb      	str	r3, [r7, #12]
   return(result);
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	f043 0320 	orr.w	r3, r3, #32
 801a1f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	461a      	mov	r2, r3
 801a202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a206:	61fb      	str	r3, [r7, #28]
 801a208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a20a:	69b9      	ldr	r1, [r7, #24]
 801a20c:	69fa      	ldr	r2, [r7, #28]
 801a20e:	e841 2300 	strex	r3, r2, [r1]
 801a212:	617b      	str	r3, [r7, #20]
   return(result);
 801a214:	697b      	ldr	r3, [r7, #20]
 801a216:	2b00      	cmp	r3, #0
 801a218:	d1e4      	bne.n	801a1e4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a21a:	e007      	b.n	801a22c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	699a      	ldr	r2, [r3, #24]
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	f042 0208 	orr.w	r2, r2, #8
 801a22a:	619a      	str	r2, [r3, #24]
}
 801a22c:	bf00      	nop
 801a22e:	37b8      	adds	r7, #184	; 0xb8
 801a230:	46bd      	mov	sp, r7
 801a232:	bd80      	pop	{r7, pc}
 801a234:	40008000 	.word	0x40008000
 801a238:	080199bd 	.word	0x080199bd

0801a23c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a23c:	b480      	push	{r7}
 801a23e:	b083      	sub	sp, #12
 801a240:	af00      	add	r7, sp, #0
 801a242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a244:	bf00      	nop
 801a246:	370c      	adds	r7, #12
 801a248:	46bd      	mov	sp, r7
 801a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a24e:	4770      	bx	lr

0801a250 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a250:	b480      	push	{r7}
 801a252:	b083      	sub	sp, #12
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a258:	bf00      	nop
 801a25a:	370c      	adds	r7, #12
 801a25c:	46bd      	mov	sp, r7
 801a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a262:	4770      	bx	lr

0801a264 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a264:	b480      	push	{r7}
 801a266:	b083      	sub	sp, #12
 801a268:	af00      	add	r7, sp, #0
 801a26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a26c:	bf00      	nop
 801a26e:	370c      	adds	r7, #12
 801a270:	46bd      	mov	sp, r7
 801a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a276:	4770      	bx	lr

0801a278 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a278:	b480      	push	{r7}
 801a27a:	b085      	sub	sp, #20
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a286:	2b01      	cmp	r3, #1
 801a288:	d101      	bne.n	801a28e <HAL_UARTEx_DisableFifoMode+0x16>
 801a28a:	2302      	movs	r3, #2
 801a28c:	e027      	b.n	801a2de <HAL_UARTEx_DisableFifoMode+0x66>
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	2201      	movs	r2, #1
 801a292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	2224      	movs	r2, #36	; 0x24
 801a29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	681a      	ldr	r2, [r3, #0]
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	f022 0201 	bic.w	r2, r2, #1
 801a2b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801a2bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	68fa      	ldr	r2, [r7, #12]
 801a2ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	2220      	movs	r2, #32
 801a2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a2dc:	2300      	movs	r3, #0
}
 801a2de:	4618      	mov	r0, r3
 801a2e0:	3714      	adds	r7, #20
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e8:	4770      	bx	lr

0801a2ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a2ea:	b580      	push	{r7, lr}
 801a2ec:	b084      	sub	sp, #16
 801a2ee:	af00      	add	r7, sp, #0
 801a2f0:	6078      	str	r0, [r7, #4]
 801a2f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a2fa:	2b01      	cmp	r3, #1
 801a2fc:	d101      	bne.n	801a302 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a2fe:	2302      	movs	r3, #2
 801a300:	e02d      	b.n	801a35e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	2201      	movs	r2, #1
 801a306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	2224      	movs	r2, #36	; 0x24
 801a30e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	681a      	ldr	r2, [r3, #0]
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	f022 0201 	bic.w	r2, r2, #1
 801a328:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	689b      	ldr	r3, [r3, #8]
 801a330:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	683a      	ldr	r2, [r7, #0]
 801a33a:	430a      	orrs	r2, r1
 801a33c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a33e:	6878      	ldr	r0, [r7, #4]
 801a340:	f000 f850 	bl	801a3e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	68fa      	ldr	r2, [r7, #12]
 801a34a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2220      	movs	r2, #32
 801a350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	2200      	movs	r2, #0
 801a358:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a35c:	2300      	movs	r3, #0
}
 801a35e:	4618      	mov	r0, r3
 801a360:	3710      	adds	r7, #16
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}

0801a366 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a366:	b580      	push	{r7, lr}
 801a368:	b084      	sub	sp, #16
 801a36a:	af00      	add	r7, sp, #0
 801a36c:	6078      	str	r0, [r7, #4]
 801a36e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801a376:	2b01      	cmp	r3, #1
 801a378:	d101      	bne.n	801a37e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a37a:	2302      	movs	r3, #2
 801a37c:	e02d      	b.n	801a3da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	2201      	movs	r2, #1
 801a382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	2224      	movs	r2, #36	; 0x24
 801a38a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	681a      	ldr	r2, [r3, #0]
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	f022 0201 	bic.w	r2, r2, #1
 801a3a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	689b      	ldr	r3, [r3, #8]
 801a3ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	683a      	ldr	r2, [r7, #0]
 801a3b6:	430a      	orrs	r2, r1
 801a3b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a3ba:	6878      	ldr	r0, [r7, #4]
 801a3bc:	f000 f812 	bl	801a3e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	68fa      	ldr	r2, [r7, #12]
 801a3c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	2220      	movs	r2, #32
 801a3cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a3d8:	2300      	movs	r3, #0
}
 801a3da:	4618      	mov	r0, r3
 801a3dc:	3710      	adds	r7, #16
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bd80      	pop	{r7, pc}
	...

0801a3e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a3e4:	b480      	push	{r7}
 801a3e6:	b085      	sub	sp, #20
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d108      	bne.n	801a406 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	2201      	movs	r2, #1
 801a400:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a404:	e031      	b.n	801a46a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a406:	2308      	movs	r3, #8
 801a408:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a40a:	2308      	movs	r3, #8
 801a40c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	689b      	ldr	r3, [r3, #8]
 801a414:	0e5b      	lsrs	r3, r3, #25
 801a416:	b2db      	uxtb	r3, r3
 801a418:	f003 0307 	and.w	r3, r3, #7
 801a41c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	689b      	ldr	r3, [r3, #8]
 801a424:	0f5b      	lsrs	r3, r3, #29
 801a426:	b2db      	uxtb	r3, r3
 801a428:	f003 0307 	and.w	r3, r3, #7
 801a42c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a42e:	7bbb      	ldrb	r3, [r7, #14]
 801a430:	7b3a      	ldrb	r2, [r7, #12]
 801a432:	4911      	ldr	r1, [pc, #68]	; (801a478 <UARTEx_SetNbDataToProcess+0x94>)
 801a434:	5c8a      	ldrb	r2, [r1, r2]
 801a436:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a43a:	7b3a      	ldrb	r2, [r7, #12]
 801a43c:	490f      	ldr	r1, [pc, #60]	; (801a47c <UARTEx_SetNbDataToProcess+0x98>)
 801a43e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a440:	fb93 f3f2 	sdiv	r3, r3, r2
 801a444:	b29a      	uxth	r2, r3
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a44c:	7bfb      	ldrb	r3, [r7, #15]
 801a44e:	7b7a      	ldrb	r2, [r7, #13]
 801a450:	4909      	ldr	r1, [pc, #36]	; (801a478 <UARTEx_SetNbDataToProcess+0x94>)
 801a452:	5c8a      	ldrb	r2, [r1, r2]
 801a454:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a458:	7b7a      	ldrb	r2, [r7, #13]
 801a45a:	4908      	ldr	r1, [pc, #32]	; (801a47c <UARTEx_SetNbDataToProcess+0x98>)
 801a45c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a45e:	fb93 f3f2 	sdiv	r3, r3, r2
 801a462:	b29a      	uxth	r2, r3
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801a46a:	bf00      	nop
 801a46c:	3714      	adds	r7, #20
 801a46e:	46bd      	mov	sp, r7
 801a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a474:	4770      	bx	lr
 801a476:	bf00      	nop
 801a478:	08021e74 	.word	0x08021e74
 801a47c:	08021e7c 	.word	0x08021e7c

0801a480 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801a480:	b480      	push	{r7}
 801a482:	b08b      	sub	sp, #44	; 0x2c
 801a484:	af00      	add	r7, sp, #0
 801a486:	60f8      	str	r0, [r7, #12]
 801a488:	60b9      	str	r1, [r7, #8]
 801a48a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	681a      	ldr	r2, [r3, #0]
 801a490:	68bb      	ldr	r3, [r7, #8]
 801a492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a494:	697b      	ldr	r3, [r7, #20]
 801a496:	fa93 f3a3 	rbit	r3, r3
 801a49a:	613b      	str	r3, [r7, #16]
  return result;
 801a49c:	693b      	ldr	r3, [r7, #16]
 801a49e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a4a0:	69bb      	ldr	r3, [r7, #24]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d101      	bne.n	801a4aa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801a4a6:	2320      	movs	r3, #32
 801a4a8:	e003      	b.n	801a4b2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801a4aa:	69bb      	ldr	r3, [r7, #24]
 801a4ac:	fab3 f383 	clz	r3, r3
 801a4b0:	b2db      	uxtb	r3, r3
 801a4b2:	005b      	lsls	r3, r3, #1
 801a4b4:	2103      	movs	r1, #3
 801a4b6:	fa01 f303 	lsl.w	r3, r1, r3
 801a4ba:	43db      	mvns	r3, r3
 801a4bc:	401a      	ands	r2, r3
 801a4be:	68bb      	ldr	r3, [r7, #8]
 801a4c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4c2:	6a3b      	ldr	r3, [r7, #32]
 801a4c4:	fa93 f3a3 	rbit	r3, r3
 801a4c8:	61fb      	str	r3, [r7, #28]
  return result;
 801a4ca:	69fb      	ldr	r3, [r7, #28]
 801a4cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d101      	bne.n	801a4d8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801a4d4:	2320      	movs	r3, #32
 801a4d6:	e003      	b.n	801a4e0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4da:	fab3 f383 	clz	r3, r3
 801a4de:	b2db      	uxtb	r3, r3
 801a4e0:	005b      	lsls	r3, r3, #1
 801a4e2:	6879      	ldr	r1, [r7, #4]
 801a4e4:	fa01 f303 	lsl.w	r3, r1, r3
 801a4e8:	431a      	orrs	r2, r3
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	601a      	str	r2, [r3, #0]
}
 801a4ee:	bf00      	nop
 801a4f0:	372c      	adds	r7, #44	; 0x2c
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f8:	4770      	bx	lr

0801a4fa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 801a4fa:	b480      	push	{r7}
 801a4fc:	b085      	sub	sp, #20
 801a4fe:	af00      	add	r7, sp, #0
 801a500:	60f8      	str	r0, [r7, #12]
 801a502:	60b9      	str	r1, [r7, #8]
 801a504:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	685a      	ldr	r2, [r3, #4]
 801a50a:	68bb      	ldr	r3, [r7, #8]
 801a50c:	43db      	mvns	r3, r3
 801a50e:	401a      	ands	r2, r3
 801a510:	68bb      	ldr	r3, [r7, #8]
 801a512:	6879      	ldr	r1, [r7, #4]
 801a514:	fb01 f303 	mul.w	r3, r1, r3
 801a518:	431a      	orrs	r2, r3
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	605a      	str	r2, [r3, #4]
}
 801a51e:	bf00      	nop
 801a520:	3714      	adds	r7, #20
 801a522:	46bd      	mov	sp, r7
 801a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a528:	4770      	bx	lr

0801a52a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801a52a:	b480      	push	{r7}
 801a52c:	b08b      	sub	sp, #44	; 0x2c
 801a52e:	af00      	add	r7, sp, #0
 801a530:	60f8      	str	r0, [r7, #12]
 801a532:	60b9      	str	r1, [r7, #8]
 801a534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	689a      	ldr	r2, [r3, #8]
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a53e:	697b      	ldr	r3, [r7, #20]
 801a540:	fa93 f3a3 	rbit	r3, r3
 801a544:	613b      	str	r3, [r7, #16]
  return result;
 801a546:	693b      	ldr	r3, [r7, #16]
 801a548:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a54a:	69bb      	ldr	r3, [r7, #24]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d101      	bne.n	801a554 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801a550:	2320      	movs	r3, #32
 801a552:	e003      	b.n	801a55c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801a554:	69bb      	ldr	r3, [r7, #24]
 801a556:	fab3 f383 	clz	r3, r3
 801a55a:	b2db      	uxtb	r3, r3
 801a55c:	005b      	lsls	r3, r3, #1
 801a55e:	2103      	movs	r1, #3
 801a560:	fa01 f303 	lsl.w	r3, r1, r3
 801a564:	43db      	mvns	r3, r3
 801a566:	401a      	ands	r2, r3
 801a568:	68bb      	ldr	r3, [r7, #8]
 801a56a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a56c:	6a3b      	ldr	r3, [r7, #32]
 801a56e:	fa93 f3a3 	rbit	r3, r3
 801a572:	61fb      	str	r3, [r7, #28]
  return result;
 801a574:	69fb      	ldr	r3, [r7, #28]
 801a576:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d101      	bne.n	801a582 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801a57e:	2320      	movs	r3, #32
 801a580:	e003      	b.n	801a58a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a584:	fab3 f383 	clz	r3, r3
 801a588:	b2db      	uxtb	r3, r3
 801a58a:	005b      	lsls	r3, r3, #1
 801a58c:	6879      	ldr	r1, [r7, #4]
 801a58e:	fa01 f303 	lsl.w	r3, r1, r3
 801a592:	431a      	orrs	r2, r3
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 801a598:	bf00      	nop
 801a59a:	372c      	adds	r7, #44	; 0x2c
 801a59c:	46bd      	mov	sp, r7
 801a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a2:	4770      	bx	lr

0801a5a4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 801a5a4:	b480      	push	{r7}
 801a5a6:	b08b      	sub	sp, #44	; 0x2c
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	60f8      	str	r0, [r7, #12]
 801a5ac:	60b9      	str	r1, [r7, #8]
 801a5ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	68da      	ldr	r2, [r3, #12]
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a5b8:	697b      	ldr	r3, [r7, #20]
 801a5ba:	fa93 f3a3 	rbit	r3, r3
 801a5be:	613b      	str	r3, [r7, #16]
  return result;
 801a5c0:	693b      	ldr	r3, [r7, #16]
 801a5c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a5c4:	69bb      	ldr	r3, [r7, #24]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d101      	bne.n	801a5ce <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801a5ca:	2320      	movs	r3, #32
 801a5cc:	e003      	b.n	801a5d6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801a5ce:	69bb      	ldr	r3, [r7, #24]
 801a5d0:	fab3 f383 	clz	r3, r3
 801a5d4:	b2db      	uxtb	r3, r3
 801a5d6:	005b      	lsls	r3, r3, #1
 801a5d8:	2103      	movs	r1, #3
 801a5da:	fa01 f303 	lsl.w	r3, r1, r3
 801a5de:	43db      	mvns	r3, r3
 801a5e0:	401a      	ands	r2, r3
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a5e6:	6a3b      	ldr	r3, [r7, #32]
 801a5e8:	fa93 f3a3 	rbit	r3, r3
 801a5ec:	61fb      	str	r3, [r7, #28]
  return result;
 801a5ee:	69fb      	ldr	r3, [r7, #28]
 801a5f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d101      	bne.n	801a5fc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801a5f8:	2320      	movs	r3, #32
 801a5fa:	e003      	b.n	801a604 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5fe:	fab3 f383 	clz	r3, r3
 801a602:	b2db      	uxtb	r3, r3
 801a604:	005b      	lsls	r3, r3, #1
 801a606:	6879      	ldr	r1, [r7, #4]
 801a608:	fa01 f303 	lsl.w	r3, r1, r3
 801a60c:	431a      	orrs	r2, r3
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	60da      	str	r2, [r3, #12]
}
 801a612:	bf00      	nop
 801a614:	372c      	adds	r7, #44	; 0x2c
 801a616:	46bd      	mov	sp, r7
 801a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61c:	4770      	bx	lr

0801a61e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801a61e:	b480      	push	{r7}
 801a620:	b08b      	sub	sp, #44	; 0x2c
 801a622:	af00      	add	r7, sp, #0
 801a624:	60f8      	str	r0, [r7, #12]
 801a626:	60b9      	str	r1, [r7, #8]
 801a628:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	6a1a      	ldr	r2, [r3, #32]
 801a62e:	68bb      	ldr	r3, [r7, #8]
 801a630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a632:	697b      	ldr	r3, [r7, #20]
 801a634:	fa93 f3a3 	rbit	r3, r3
 801a638:	613b      	str	r3, [r7, #16]
  return result;
 801a63a:	693b      	ldr	r3, [r7, #16]
 801a63c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a63e:	69bb      	ldr	r3, [r7, #24]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d101      	bne.n	801a648 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801a644:	2320      	movs	r3, #32
 801a646:	e003      	b.n	801a650 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801a648:	69bb      	ldr	r3, [r7, #24]
 801a64a:	fab3 f383 	clz	r3, r3
 801a64e:	b2db      	uxtb	r3, r3
 801a650:	009b      	lsls	r3, r3, #2
 801a652:	210f      	movs	r1, #15
 801a654:	fa01 f303 	lsl.w	r3, r1, r3
 801a658:	43db      	mvns	r3, r3
 801a65a:	401a      	ands	r2, r3
 801a65c:	68bb      	ldr	r3, [r7, #8]
 801a65e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a660:	6a3b      	ldr	r3, [r7, #32]
 801a662:	fa93 f3a3 	rbit	r3, r3
 801a666:	61fb      	str	r3, [r7, #28]
  return result;
 801a668:	69fb      	ldr	r3, [r7, #28]
 801a66a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d101      	bne.n	801a676 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801a672:	2320      	movs	r3, #32
 801a674:	e003      	b.n	801a67e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a678:	fab3 f383 	clz	r3, r3
 801a67c:	b2db      	uxtb	r3, r3
 801a67e:	009b      	lsls	r3, r3, #2
 801a680:	6879      	ldr	r1, [r7, #4]
 801a682:	fa01 f303 	lsl.w	r3, r1, r3
 801a686:	431a      	orrs	r2, r3
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 801a68c:	bf00      	nop
 801a68e:	372c      	adds	r7, #44	; 0x2c
 801a690:	46bd      	mov	sp, r7
 801a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a696:	4770      	bx	lr

0801a698 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801a698:	b480      	push	{r7}
 801a69a:	b08b      	sub	sp, #44	; 0x2c
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	60f8      	str	r0, [r7, #12]
 801a6a0:	60b9      	str	r1, [r7, #8]
 801a6a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a6a8:	68bb      	ldr	r3, [r7, #8]
 801a6aa:	0a1b      	lsrs	r3, r3, #8
 801a6ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a6ae:	697b      	ldr	r3, [r7, #20]
 801a6b0:	fa93 f3a3 	rbit	r3, r3
 801a6b4:	613b      	str	r3, [r7, #16]
  return result;
 801a6b6:	693b      	ldr	r3, [r7, #16]
 801a6b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a6ba:	69bb      	ldr	r3, [r7, #24]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d101      	bne.n	801a6c4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 801a6c0:	2320      	movs	r3, #32
 801a6c2:	e003      	b.n	801a6cc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801a6c4:	69bb      	ldr	r3, [r7, #24]
 801a6c6:	fab3 f383 	clz	r3, r3
 801a6ca:	b2db      	uxtb	r3, r3
 801a6cc:	009b      	lsls	r3, r3, #2
 801a6ce:	210f      	movs	r1, #15
 801a6d0:	fa01 f303 	lsl.w	r3, r1, r3
 801a6d4:	43db      	mvns	r3, r3
 801a6d6:	401a      	ands	r2, r3
 801a6d8:	68bb      	ldr	r3, [r7, #8]
 801a6da:	0a1b      	lsrs	r3, r3, #8
 801a6dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a6de:	6a3b      	ldr	r3, [r7, #32]
 801a6e0:	fa93 f3a3 	rbit	r3, r3
 801a6e4:	61fb      	str	r3, [r7, #28]
  return result;
 801a6e6:	69fb      	ldr	r3, [r7, #28]
 801a6e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d101      	bne.n	801a6f4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801a6f0:	2320      	movs	r3, #32
 801a6f2:	e003      	b.n	801a6fc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6f6:	fab3 f383 	clz	r3, r3
 801a6fa:	b2db      	uxtb	r3, r3
 801a6fc:	009b      	lsls	r3, r3, #2
 801a6fe:	6879      	ldr	r1, [r7, #4]
 801a700:	fa01 f303 	lsl.w	r3, r1, r3
 801a704:	431a      	orrs	r2, r3
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 801a70a:	bf00      	nop
 801a70c:	372c      	adds	r7, #44	; 0x2c
 801a70e:	46bd      	mov	sp, r7
 801a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a714:	4770      	bx	lr

0801a716 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801a716:	b580      	push	{r7, lr}
 801a718:	b088      	sub	sp, #32
 801a71a:	af00      	add	r7, sp, #0
 801a71c:	6078      	str	r0, [r7, #4]
 801a71e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801a720:	683b      	ldr	r3, [r7, #0]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a726:	693b      	ldr	r3, [r7, #16]
 801a728:	fa93 f3a3 	rbit	r3, r3
 801a72c:	60fb      	str	r3, [r7, #12]
  return result;
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801a732:	697b      	ldr	r3, [r7, #20]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d101      	bne.n	801a73c <LL_GPIO_Init+0x26>
    return 32U;
 801a738:	2320      	movs	r3, #32
 801a73a:	e003      	b.n	801a744 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801a73c:	697b      	ldr	r3, [r7, #20]
 801a73e:	fab3 f383 	clz	r3, r3
 801a742:	b2db      	uxtb	r3, r3
 801a744:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801a746:	e047      	b.n	801a7d8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	681a      	ldr	r2, [r3, #0]
 801a74c:	2101      	movs	r1, #1
 801a74e:	69fb      	ldr	r3, [r7, #28]
 801a750:	fa01 f303 	lsl.w	r3, r1, r3
 801a754:	4013      	ands	r3, r2
 801a756:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 801a758:	69bb      	ldr	r3, [r7, #24]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d039      	beq.n	801a7d2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801a75e:	683b      	ldr	r3, [r7, #0]
 801a760:	685b      	ldr	r3, [r3, #4]
 801a762:	2b01      	cmp	r3, #1
 801a764:	d003      	beq.n	801a76e <LL_GPIO_Init+0x58>
 801a766:	683b      	ldr	r3, [r7, #0]
 801a768:	685b      	ldr	r3, [r3, #4]
 801a76a:	2b02      	cmp	r3, #2
 801a76c:	d10d      	bne.n	801a78a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	689b      	ldr	r3, [r3, #8]
 801a772:	461a      	mov	r2, r3
 801a774:	69b9      	ldr	r1, [r7, #24]
 801a776:	6878      	ldr	r0, [r7, #4]
 801a778:	f7ff fed7 	bl	801a52a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 801a77c:	683b      	ldr	r3, [r7, #0]
 801a77e:	68db      	ldr	r3, [r3, #12]
 801a780:	461a      	mov	r2, r3
 801a782:	69b9      	ldr	r1, [r7, #24]
 801a784:	6878      	ldr	r0, [r7, #4]
 801a786:	f7ff feb8 	bl	801a4fa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801a78a:	683b      	ldr	r3, [r7, #0]
 801a78c:	691b      	ldr	r3, [r3, #16]
 801a78e:	461a      	mov	r2, r3
 801a790:	69b9      	ldr	r1, [r7, #24]
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f7ff ff06 	bl	801a5a4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801a798:	683b      	ldr	r3, [r7, #0]
 801a79a:	685b      	ldr	r3, [r3, #4]
 801a79c:	2b02      	cmp	r3, #2
 801a79e:	d111      	bne.n	801a7c4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801a7a0:	69bb      	ldr	r3, [r7, #24]
 801a7a2:	2bff      	cmp	r3, #255	; 0xff
 801a7a4:	d807      	bhi.n	801a7b6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801a7a6:	683b      	ldr	r3, [r7, #0]
 801a7a8:	695b      	ldr	r3, [r3, #20]
 801a7aa:	461a      	mov	r2, r3
 801a7ac:	69b9      	ldr	r1, [r7, #24]
 801a7ae:	6878      	ldr	r0, [r7, #4]
 801a7b0:	f7ff ff35 	bl	801a61e <LL_GPIO_SetAFPin_0_7>
 801a7b4:	e006      	b.n	801a7c4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801a7b6:	683b      	ldr	r3, [r7, #0]
 801a7b8:	695b      	ldr	r3, [r3, #20]
 801a7ba:	461a      	mov	r2, r3
 801a7bc:	69b9      	ldr	r1, [r7, #24]
 801a7be:	6878      	ldr	r0, [r7, #4]
 801a7c0:	f7ff ff6a 	bl	801a698 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801a7c4:	683b      	ldr	r3, [r7, #0]
 801a7c6:	685b      	ldr	r3, [r3, #4]
 801a7c8:	461a      	mov	r2, r3
 801a7ca:	69b9      	ldr	r1, [r7, #24]
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f7ff fe57 	bl	801a480 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801a7d2:	69fb      	ldr	r3, [r7, #28]
 801a7d4:	3301      	adds	r3, #1
 801a7d6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801a7d8:	683b      	ldr	r3, [r7, #0]
 801a7da:	681a      	ldr	r2, [r3, #0]
 801a7dc:	69fb      	ldr	r3, [r7, #28]
 801a7de:	fa22 f303 	lsr.w	r3, r2, r3
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d1b0      	bne.n	801a748 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801a7e6:	2300      	movs	r3, #0
}
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	3720      	adds	r7, #32
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	bd80      	pop	{r7, pc}

0801a7f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801a7f0:	b480      	push	{r7}
 801a7f2:	b085      	sub	sp, #20
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801a7f8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801a7fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801a804:	b29a      	uxth	r2, r3
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	b29b      	uxth	r3, r3
 801a80a:	43db      	mvns	r3, r3
 801a80c:	b29b      	uxth	r3, r3
 801a80e:	4013      	ands	r3, r2
 801a810:	b29a      	uxth	r2, r3
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801a818:	2300      	movs	r3, #0
}
 801a81a:	4618      	mov	r0, r3
 801a81c:	3714      	adds	r7, #20
 801a81e:	46bd      	mov	sp, r7
 801a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a824:	4770      	bx	lr

0801a826 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801a826:	b084      	sub	sp, #16
 801a828:	b480      	push	{r7}
 801a82a:	b083      	sub	sp, #12
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
 801a830:	f107 0014 	add.w	r0, r7, #20
 801a834:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	2201      	movs	r2, #1
 801a83c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	2200      	movs	r2, #0
 801a844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	2200      	movs	r2, #0
 801a84c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	2200      	movs	r2, #0
 801a854:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801a858:	2300      	movs	r3, #0
}
 801a85a:	4618      	mov	r0, r3
 801a85c:	370c      	adds	r7, #12
 801a85e:	46bd      	mov	sp, r7
 801a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a864:	b004      	add	sp, #16
 801a866:	4770      	bx	lr

0801a868 <__NVIC_SetPriority>:
{
 801a868:	b480      	push	{r7}
 801a86a:	b083      	sub	sp, #12
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	4603      	mov	r3, r0
 801a870:	6039      	str	r1, [r7, #0]
 801a872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	db0a      	blt.n	801a892 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a87c:	683b      	ldr	r3, [r7, #0]
 801a87e:	b2da      	uxtb	r2, r3
 801a880:	490c      	ldr	r1, [pc, #48]	; (801a8b4 <__NVIC_SetPriority+0x4c>)
 801a882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a886:	0152      	lsls	r2, r2, #5
 801a888:	b2d2      	uxtb	r2, r2
 801a88a:	440b      	add	r3, r1
 801a88c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801a890:	e00a      	b.n	801a8a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	b2da      	uxtb	r2, r3
 801a896:	4908      	ldr	r1, [pc, #32]	; (801a8b8 <__NVIC_SetPriority+0x50>)
 801a898:	79fb      	ldrb	r3, [r7, #7]
 801a89a:	f003 030f 	and.w	r3, r3, #15
 801a89e:	3b04      	subs	r3, #4
 801a8a0:	0152      	lsls	r2, r2, #5
 801a8a2:	b2d2      	uxtb	r2, r2
 801a8a4:	440b      	add	r3, r1
 801a8a6:	761a      	strb	r2, [r3, #24]
}
 801a8a8:	bf00      	nop
 801a8aa:	370c      	adds	r7, #12
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8b2:	4770      	bx	lr
 801a8b4:	e000e100 	.word	0xe000e100
 801a8b8:	e000ed00 	.word	0xe000ed00

0801a8bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801a8c0:	4b05      	ldr	r3, [pc, #20]	; (801a8d8 <SysTick_Handler+0x1c>)
 801a8c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801a8c4:	f001 fbe0 	bl	801c088 <xTaskGetSchedulerState>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b01      	cmp	r3, #1
 801a8cc:	d001      	beq.n	801a8d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801a8ce:	f002 f835 	bl	801c93c <xPortSysTickHandler>
  }
}
 801a8d2:	bf00      	nop
 801a8d4:	bd80      	pop	{r7, pc}
 801a8d6:	bf00      	nop
 801a8d8:	e000e010 	.word	0xe000e010

0801a8dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801a8e0:	2100      	movs	r1, #0
 801a8e2:	f06f 0004 	mvn.w	r0, #4
 801a8e6:	f7ff ffbf 	bl	801a868 <__NVIC_SetPriority>
#endif
}
 801a8ea:	bf00      	nop
 801a8ec:	bd80      	pop	{r7, pc}
	...

0801a8f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801a8f0:	b480      	push	{r7}
 801a8f2:	b083      	sub	sp, #12
 801a8f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801a8f6:	f3ef 8305 	mrs	r3, IPSR
 801a8fa:	603b      	str	r3, [r7, #0]
  return(result);
 801a8fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d003      	beq.n	801a90a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801a902:	f06f 0305 	mvn.w	r3, #5
 801a906:	607b      	str	r3, [r7, #4]
 801a908:	e00c      	b.n	801a924 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801a90a:	4b0a      	ldr	r3, [pc, #40]	; (801a934 <osKernelInitialize+0x44>)
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d105      	bne.n	801a91e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801a912:	4b08      	ldr	r3, [pc, #32]	; (801a934 <osKernelInitialize+0x44>)
 801a914:	2201      	movs	r2, #1
 801a916:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801a918:	2300      	movs	r3, #0
 801a91a:	607b      	str	r3, [r7, #4]
 801a91c:	e002      	b.n	801a924 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801a91e:	f04f 33ff 	mov.w	r3, #4294967295
 801a922:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801a924:	687b      	ldr	r3, [r7, #4]
}
 801a926:	4618      	mov	r0, r3
 801a928:	370c      	adds	r7, #12
 801a92a:	46bd      	mov	sp, r7
 801a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a930:	4770      	bx	lr
 801a932:	bf00      	nop
 801a934:	20001024 	.word	0x20001024

0801a938 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801a938:	b580      	push	{r7, lr}
 801a93a:	b082      	sub	sp, #8
 801a93c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801a93e:	f3ef 8305 	mrs	r3, IPSR
 801a942:	603b      	str	r3, [r7, #0]
  return(result);
 801a944:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801a946:	2b00      	cmp	r3, #0
 801a948:	d003      	beq.n	801a952 <osKernelStart+0x1a>
    stat = osErrorISR;
 801a94a:	f06f 0305 	mvn.w	r3, #5
 801a94e:	607b      	str	r3, [r7, #4]
 801a950:	e010      	b.n	801a974 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801a952:	4b0b      	ldr	r3, [pc, #44]	; (801a980 <osKernelStart+0x48>)
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	2b01      	cmp	r3, #1
 801a958:	d109      	bne.n	801a96e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801a95a:	f7ff ffbf 	bl	801a8dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801a95e:	4b08      	ldr	r3, [pc, #32]	; (801a980 <osKernelStart+0x48>)
 801a960:	2202      	movs	r2, #2
 801a962:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801a964:	f000 ffb2 	bl	801b8cc <vTaskStartScheduler>
      stat = osOK;
 801a968:	2300      	movs	r3, #0
 801a96a:	607b      	str	r3, [r7, #4]
 801a96c:	e002      	b.n	801a974 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801a96e:	f04f 33ff 	mov.w	r3, #4294967295
 801a972:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801a974:	687b      	ldr	r3, [r7, #4]
}
 801a976:	4618      	mov	r0, r3
 801a978:	3708      	adds	r7, #8
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}
 801a97e:	bf00      	nop
 801a980:	20001024 	.word	0x20001024

0801a984 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801a984:	b580      	push	{r7, lr}
 801a986:	b08e      	sub	sp, #56	; 0x38
 801a988:	af04      	add	r7, sp, #16
 801a98a:	60f8      	str	r0, [r7, #12]
 801a98c:	60b9      	str	r1, [r7, #8]
 801a98e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801a990:	2300      	movs	r3, #0
 801a992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801a994:	f3ef 8305 	mrs	r3, IPSR
 801a998:	617b      	str	r3, [r7, #20]
  return(result);
 801a99a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d17e      	bne.n	801aa9e <osThreadNew+0x11a>
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d07b      	beq.n	801aa9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801a9a6:	2380      	movs	r3, #128	; 0x80
 801a9a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801a9aa:	2318      	movs	r3, #24
 801a9ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 801a9b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d045      	beq.n	801aa4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d002      	beq.n	801a9cc <osThreadNew+0x48>
        name = attr->name;
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	699b      	ldr	r3, [r3, #24]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d002      	beq.n	801a9da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	699b      	ldr	r3, [r3, #24]
 801a9d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801a9da:	69fb      	ldr	r3, [r7, #28]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d008      	beq.n	801a9f2 <osThreadNew+0x6e>
 801a9e0:	69fb      	ldr	r3, [r7, #28]
 801a9e2:	2b38      	cmp	r3, #56	; 0x38
 801a9e4:	d805      	bhi.n	801a9f2 <osThreadNew+0x6e>
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	685b      	ldr	r3, [r3, #4]
 801a9ea:	f003 0301 	and.w	r3, r3, #1
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d001      	beq.n	801a9f6 <osThreadNew+0x72>
        return (NULL);
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	e054      	b.n	801aaa0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	695b      	ldr	r3, [r3, #20]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d003      	beq.n	801aa06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	695b      	ldr	r3, [r3, #20]
 801aa02:	089b      	lsrs	r3, r3, #2
 801aa04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	689b      	ldr	r3, [r3, #8]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d00e      	beq.n	801aa2c <osThreadNew+0xa8>
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	68db      	ldr	r3, [r3, #12]
 801aa12:	2b5b      	cmp	r3, #91	; 0x5b
 801aa14:	d90a      	bls.n	801aa2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d006      	beq.n	801aa2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	695b      	ldr	r3, [r3, #20]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d002      	beq.n	801aa2c <osThreadNew+0xa8>
        mem = 1;
 801aa26:	2301      	movs	r3, #1
 801aa28:	61bb      	str	r3, [r7, #24]
 801aa2a:	e010      	b.n	801aa4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	689b      	ldr	r3, [r3, #8]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d10c      	bne.n	801aa4e <osThreadNew+0xca>
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	68db      	ldr	r3, [r3, #12]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d108      	bne.n	801aa4e <osThreadNew+0xca>
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	691b      	ldr	r3, [r3, #16]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d104      	bne.n	801aa4e <osThreadNew+0xca>
          mem = 0;
 801aa44:	2300      	movs	r3, #0
 801aa46:	61bb      	str	r3, [r7, #24]
 801aa48:	e001      	b.n	801aa4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801aa4e:	69bb      	ldr	r3, [r7, #24]
 801aa50:	2b01      	cmp	r3, #1
 801aa52:	d110      	bne.n	801aa76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801aa58:	687a      	ldr	r2, [r7, #4]
 801aa5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801aa5c:	9202      	str	r2, [sp, #8]
 801aa5e:	9301      	str	r3, [sp, #4]
 801aa60:	69fb      	ldr	r3, [r7, #28]
 801aa62:	9300      	str	r3, [sp, #0]
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	6a3a      	ldr	r2, [r7, #32]
 801aa68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aa6a:	68f8      	ldr	r0, [r7, #12]
 801aa6c:	f000 fd30 	bl	801b4d0 <xTaskCreateStatic>
 801aa70:	4603      	mov	r3, r0
 801aa72:	613b      	str	r3, [r7, #16]
 801aa74:	e013      	b.n	801aa9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801aa76:	69bb      	ldr	r3, [r7, #24]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d110      	bne.n	801aa9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801aa7c:	6a3b      	ldr	r3, [r7, #32]
 801aa7e:	b29a      	uxth	r2, r3
 801aa80:	f107 0310 	add.w	r3, r7, #16
 801aa84:	9301      	str	r3, [sp, #4]
 801aa86:	69fb      	ldr	r3, [r7, #28]
 801aa88:	9300      	str	r3, [sp, #0]
 801aa8a:	68bb      	ldr	r3, [r7, #8]
 801aa8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aa8e:	68f8      	ldr	r0, [r7, #12]
 801aa90:	f000 fd63 	bl	801b55a <xTaskCreate>
 801aa94:	4603      	mov	r3, r0
 801aa96:	2b01      	cmp	r3, #1
 801aa98:	d001      	beq.n	801aa9e <osThreadNew+0x11a>
            hTask = NULL;
 801aa9a:	2300      	movs	r3, #0
 801aa9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801aa9e:	693b      	ldr	r3, [r7, #16]
}
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	3728      	adds	r7, #40	; 0x28
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	bd80      	pop	{r7, pc}

0801aaa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801aaa8:	b480      	push	{r7}
 801aaaa:	b085      	sub	sp, #20
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	60f8      	str	r0, [r7, #12]
 801aab0:	60b9      	str	r1, [r7, #8]
 801aab2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	4a07      	ldr	r2, [pc, #28]	; (801aad4 <vApplicationGetIdleTaskMemory+0x2c>)
 801aab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	4a06      	ldr	r2, [pc, #24]	; (801aad8 <vApplicationGetIdleTaskMemory+0x30>)
 801aabe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	2280      	movs	r2, #128	; 0x80
 801aac4:	601a      	str	r2, [r3, #0]
}
 801aac6:	bf00      	nop
 801aac8:	3714      	adds	r7, #20
 801aaca:	46bd      	mov	sp, r7
 801aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad0:	4770      	bx	lr
 801aad2:	bf00      	nop
 801aad4:	20001028 	.word	0x20001028
 801aad8:	20001084 	.word	0x20001084

0801aadc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801aadc:	b480      	push	{r7}
 801aade:	b085      	sub	sp, #20
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	60f8      	str	r0, [r7, #12]
 801aae4:	60b9      	str	r1, [r7, #8]
 801aae6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	4a07      	ldr	r2, [pc, #28]	; (801ab08 <vApplicationGetTimerTaskMemory+0x2c>)
 801aaec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801aaee:	68bb      	ldr	r3, [r7, #8]
 801aaf0:	4a06      	ldr	r2, [pc, #24]	; (801ab0c <vApplicationGetTimerTaskMemory+0x30>)
 801aaf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801aafa:	601a      	str	r2, [r3, #0]
}
 801aafc:	bf00      	nop
 801aafe:	3714      	adds	r7, #20
 801ab00:	46bd      	mov	sp, r7
 801ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab06:	4770      	bx	lr
 801ab08:	20001284 	.word	0x20001284
 801ab0c:	200012e0 	.word	0x200012e0

0801ab10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801ab10:	b480      	push	{r7}
 801ab12:	b083      	sub	sp, #12
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	f103 0208 	add.w	r2, r3, #8
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	f04f 32ff 	mov.w	r2, #4294967295
 801ab28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	f103 0208 	add.w	r2, r3, #8
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	f103 0208 	add.w	r2, r3, #8
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	2200      	movs	r2, #0
 801ab42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801ab44:	bf00      	nop
 801ab46:	370c      	adds	r7, #12
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4e:	4770      	bx	lr

0801ab50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801ab50:	b480      	push	{r7}
 801ab52:	b083      	sub	sp, #12
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801ab5e:	bf00      	nop
 801ab60:	370c      	adds	r7, #12
 801ab62:	46bd      	mov	sp, r7
 801ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab68:	4770      	bx	lr

0801ab6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801ab6a:	b480      	push	{r7}
 801ab6c:	b085      	sub	sp, #20
 801ab6e:	af00      	add	r7, sp, #0
 801ab70:	6078      	str	r0, [r7, #4]
 801ab72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	685b      	ldr	r3, [r3, #4]
 801ab78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801ab7a:	683b      	ldr	r3, [r7, #0]
 801ab7c:	68fa      	ldr	r2, [r7, #12]
 801ab7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	689a      	ldr	r2, [r3, #8]
 801ab84:	683b      	ldr	r3, [r7, #0]
 801ab86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	689b      	ldr	r3, [r3, #8]
 801ab8c:	683a      	ldr	r2, [r7, #0]
 801ab8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	683a      	ldr	r2, [r7, #0]
 801ab94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	687a      	ldr	r2, [r7, #4]
 801ab9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	1c5a      	adds	r2, r3, #1
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	601a      	str	r2, [r3, #0]
}
 801aba6:	bf00      	nop
 801aba8:	3714      	adds	r7, #20
 801abaa:	46bd      	mov	sp, r7
 801abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb0:	4770      	bx	lr

0801abb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801abb2:	b480      	push	{r7}
 801abb4:	b085      	sub	sp, #20
 801abb6:	af00      	add	r7, sp, #0
 801abb8:	6078      	str	r0, [r7, #4]
 801abba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801abbc:	683b      	ldr	r3, [r7, #0]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801abc2:	68bb      	ldr	r3, [r7, #8]
 801abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abc8:	d103      	bne.n	801abd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	691b      	ldr	r3, [r3, #16]
 801abce:	60fb      	str	r3, [r7, #12]
 801abd0:	e00c      	b.n	801abec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	3308      	adds	r3, #8
 801abd6:	60fb      	str	r3, [r7, #12]
 801abd8:	e002      	b.n	801abe0 <vListInsert+0x2e>
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	685b      	ldr	r3, [r3, #4]
 801abde:	60fb      	str	r3, [r7, #12]
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	685b      	ldr	r3, [r3, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	68ba      	ldr	r2, [r7, #8]
 801abe8:	429a      	cmp	r2, r3
 801abea:	d2f6      	bcs.n	801abda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	685a      	ldr	r2, [r3, #4]
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801abf4:	683b      	ldr	r3, [r7, #0]
 801abf6:	685b      	ldr	r3, [r3, #4]
 801abf8:	683a      	ldr	r2, [r7, #0]
 801abfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801abfc:	683b      	ldr	r3, [r7, #0]
 801abfe:	68fa      	ldr	r2, [r7, #12]
 801ac00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	683a      	ldr	r2, [r7, #0]
 801ac06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801ac08:	683b      	ldr	r3, [r7, #0]
 801ac0a:	687a      	ldr	r2, [r7, #4]
 801ac0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	1c5a      	adds	r2, r3, #1
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	601a      	str	r2, [r3, #0]
}
 801ac18:	bf00      	nop
 801ac1a:	3714      	adds	r7, #20
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac22:	4770      	bx	lr

0801ac24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801ac24:	b480      	push	{r7}
 801ac26:	b085      	sub	sp, #20
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	691b      	ldr	r3, [r3, #16]
 801ac30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	685b      	ldr	r3, [r3, #4]
 801ac36:	687a      	ldr	r2, [r7, #4]
 801ac38:	6892      	ldr	r2, [r2, #8]
 801ac3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	689b      	ldr	r3, [r3, #8]
 801ac40:	687a      	ldr	r2, [r7, #4]
 801ac42:	6852      	ldr	r2, [r2, #4]
 801ac44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	685b      	ldr	r3, [r3, #4]
 801ac4a:	687a      	ldr	r2, [r7, #4]
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d103      	bne.n	801ac58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	689a      	ldr	r2, [r3, #8]
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	1e5a      	subs	r2, r3, #1
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	681b      	ldr	r3, [r3, #0]
}
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	3714      	adds	r7, #20
 801ac70:	46bd      	mov	sp, r7
 801ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac76:	4770      	bx	lr

0801ac78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b084      	sub	sp, #16
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
 801ac80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d102      	bne.n	801ac92 <xQueueGenericReset+0x1a>
 801ac8c:	f001 ff5c 	bl	801cb48 <ulSetInterruptMask>
 801ac90:	e7fe      	b.n	801ac90 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 801ac92:	f001 fe27 	bl	801c8e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	681a      	ldr	r2, [r3, #0]
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac9e:	68f9      	ldr	r1, [r7, #12]
 801aca0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801aca2:	fb01 f303 	mul.w	r3, r1, r3
 801aca6:	441a      	add	r2, r3
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	2200      	movs	r2, #0
 801acb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	681a      	ldr	r2, [r3, #0]
 801acb6:	68fb      	ldr	r3, [r7, #12]
 801acb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	681a      	ldr	r2, [r3, #0]
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801acc2:	3b01      	subs	r3, #1
 801acc4:	68f9      	ldr	r1, [r7, #12]
 801acc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801acc8:	fb01 f303 	mul.w	r3, r1, r3
 801accc:	441a      	add	r2, r3
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	22ff      	movs	r2, #255	; 0xff
 801acd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	22ff      	movs	r2, #255	; 0xff
 801acde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d10e      	bne.n	801ad06 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	691b      	ldr	r3, [r3, #16]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d014      	beq.n	801ad1a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	3310      	adds	r3, #16
 801acf4:	4618      	mov	r0, r3
 801acf6:	f001 f831 	bl	801bd5c <xTaskRemoveFromEventList>
 801acfa:	4603      	mov	r3, r0
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d00c      	beq.n	801ad1a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801ad00:	f001 fdde 	bl	801c8c0 <vPortYield>
 801ad04:	e009      	b.n	801ad1a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	3310      	adds	r3, #16
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	f7ff ff00 	bl	801ab10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	3324      	adds	r3, #36	; 0x24
 801ad14:	4618      	mov	r0, r3
 801ad16:	f7ff fefb 	bl	801ab10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801ad1a:	f001 fdf5 	bl	801c908 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801ad1e:	2301      	movs	r3, #1
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	3710      	adds	r7, #16
 801ad24:	46bd      	mov	sp, r7
 801ad26:	bd80      	pop	{r7, pc}

0801ad28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b088      	sub	sp, #32
 801ad2c:	af02      	add	r7, sp, #8
 801ad2e:	60f8      	str	r0, [r7, #12]
 801ad30:	60b9      	str	r1, [r7, #8]
 801ad32:	607a      	str	r2, [r7, #4]
 801ad34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d102      	bne.n	801ad42 <xQueueGenericCreateStatic+0x1a>
 801ad3c:	f001 ff04 	bl	801cb48 <ulSetInterruptMask>
 801ad40:	e7fe      	b.n	801ad40 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d102      	bne.n	801ad4e <xQueueGenericCreateStatic+0x26>
 801ad48:	f001 fefe 	bl	801cb48 <ulSetInterruptMask>
 801ad4c:	e7fe      	b.n	801ad4c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d002      	beq.n	801ad5a <xQueueGenericCreateStatic+0x32>
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d001      	beq.n	801ad5e <xQueueGenericCreateStatic+0x36>
 801ad5a:	2301      	movs	r3, #1
 801ad5c:	e000      	b.n	801ad60 <xQueueGenericCreateStatic+0x38>
 801ad5e:	2300      	movs	r3, #0
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d102      	bne.n	801ad6a <xQueueGenericCreateStatic+0x42>
 801ad64:	f001 fef0 	bl	801cb48 <ulSetInterruptMask>
 801ad68:	e7fe      	b.n	801ad68 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d102      	bne.n	801ad76 <xQueueGenericCreateStatic+0x4e>
 801ad70:	68bb      	ldr	r3, [r7, #8]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d101      	bne.n	801ad7a <xQueueGenericCreateStatic+0x52>
 801ad76:	2301      	movs	r3, #1
 801ad78:	e000      	b.n	801ad7c <xQueueGenericCreateStatic+0x54>
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d102      	bne.n	801ad86 <xQueueGenericCreateStatic+0x5e>
 801ad80:	f001 fee2 	bl	801cb48 <ulSetInterruptMask>
 801ad84:	e7fe      	b.n	801ad84 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801ad86:	2350      	movs	r3, #80	; 0x50
 801ad88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801ad8a:	693b      	ldr	r3, [r7, #16]
 801ad8c:	2b50      	cmp	r3, #80	; 0x50
 801ad8e:	d002      	beq.n	801ad96 <xQueueGenericCreateStatic+0x6e>
 801ad90:	f001 feda 	bl	801cb48 <ulSetInterruptMask>
 801ad94:	e7fe      	b.n	801ad94 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801ad96:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ad98:	683b      	ldr	r3, [r7, #0]
 801ad9a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801ad9c:	697b      	ldr	r3, [r7, #20]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d00d      	beq.n	801adbe <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801ada2:	697b      	ldr	r3, [r7, #20]
 801ada4:	2201      	movs	r2, #1
 801ada6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801adaa:	f897 2020 	ldrb.w	r2, [r7, #32]
 801adae:	697b      	ldr	r3, [r7, #20]
 801adb0:	9300      	str	r3, [sp, #0]
 801adb2:	4613      	mov	r3, r2
 801adb4:	687a      	ldr	r2, [r7, #4]
 801adb6:	68b9      	ldr	r1, [r7, #8]
 801adb8:	68f8      	ldr	r0, [r7, #12]
 801adba:	f000 f805 	bl	801adc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801adbe:	697b      	ldr	r3, [r7, #20]
	}
 801adc0:	4618      	mov	r0, r3
 801adc2:	3718      	adds	r7, #24
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bd80      	pop	{r7, pc}

0801adc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b084      	sub	sp, #16
 801adcc:	af00      	add	r7, sp, #0
 801adce:	60f8      	str	r0, [r7, #12]
 801add0:	60b9      	str	r1, [r7, #8]
 801add2:	607a      	str	r2, [r7, #4]
 801add4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d103      	bne.n	801ade4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801addc:	69bb      	ldr	r3, [r7, #24]
 801adde:	69ba      	ldr	r2, [r7, #24]
 801ade0:	601a      	str	r2, [r3, #0]
 801ade2:	e002      	b.n	801adea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ade4:	69bb      	ldr	r3, [r7, #24]
 801ade6:	687a      	ldr	r2, [r7, #4]
 801ade8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801adea:	69bb      	ldr	r3, [r7, #24]
 801adec:	68fa      	ldr	r2, [r7, #12]
 801adee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801adf0:	69bb      	ldr	r3, [r7, #24]
 801adf2:	68ba      	ldr	r2, [r7, #8]
 801adf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801adf6:	2101      	movs	r1, #1
 801adf8:	69b8      	ldr	r0, [r7, #24]
 801adfa:	f7ff ff3d 	bl	801ac78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801adfe:	69bb      	ldr	r3, [r7, #24]
 801ae00:	78fa      	ldrb	r2, [r7, #3]
 801ae02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801ae06:	bf00      	nop
 801ae08:	3710      	adds	r7, #16
 801ae0a:	46bd      	mov	sp, r7
 801ae0c:	bd80      	pop	{r7, pc}

0801ae0e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801ae0e:	b580      	push	{r7, lr}
 801ae10:	b08a      	sub	sp, #40	; 0x28
 801ae12:	af00      	add	r7, sp, #0
 801ae14:	60f8      	str	r0, [r7, #12]
 801ae16:	60b9      	str	r1, [r7, #8]
 801ae18:	607a      	str	r2, [r7, #4]
 801ae1a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801ae24:	6a3b      	ldr	r3, [r7, #32]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d102      	bne.n	801ae30 <xQueueGenericSend+0x22>
 801ae2a:	f001 fe8d 	bl	801cb48 <ulSetInterruptMask>
 801ae2e:	e7fe      	b.n	801ae2e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ae30:	68bb      	ldr	r3, [r7, #8]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d103      	bne.n	801ae3e <xQueueGenericSend+0x30>
 801ae36:	6a3b      	ldr	r3, [r7, #32]
 801ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d101      	bne.n	801ae42 <xQueueGenericSend+0x34>
 801ae3e:	2301      	movs	r3, #1
 801ae40:	e000      	b.n	801ae44 <xQueueGenericSend+0x36>
 801ae42:	2300      	movs	r3, #0
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d102      	bne.n	801ae4e <xQueueGenericSend+0x40>
 801ae48:	f001 fe7e 	bl	801cb48 <ulSetInterruptMask>
 801ae4c:	e7fe      	b.n	801ae4c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801ae4e:	683b      	ldr	r3, [r7, #0]
 801ae50:	2b02      	cmp	r3, #2
 801ae52:	d103      	bne.n	801ae5c <xQueueGenericSend+0x4e>
 801ae54:	6a3b      	ldr	r3, [r7, #32]
 801ae56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ae58:	2b01      	cmp	r3, #1
 801ae5a:	d101      	bne.n	801ae60 <xQueueGenericSend+0x52>
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	e000      	b.n	801ae62 <xQueueGenericSend+0x54>
 801ae60:	2300      	movs	r3, #0
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d102      	bne.n	801ae6c <xQueueGenericSend+0x5e>
 801ae66:	f001 fe6f 	bl	801cb48 <ulSetInterruptMask>
 801ae6a:	e7fe      	b.n	801ae6a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ae6c:	f001 f90c 	bl	801c088 <xTaskGetSchedulerState>
 801ae70:	4603      	mov	r3, r0
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d102      	bne.n	801ae7c <xQueueGenericSend+0x6e>
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d101      	bne.n	801ae80 <xQueueGenericSend+0x72>
 801ae7c:	2301      	movs	r3, #1
 801ae7e:	e000      	b.n	801ae82 <xQueueGenericSend+0x74>
 801ae80:	2300      	movs	r3, #0
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d102      	bne.n	801ae8c <xQueueGenericSend+0x7e>
 801ae86:	f001 fe5f 	bl	801cb48 <ulSetInterruptMask>
 801ae8a:	e7fe      	b.n	801ae8a <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ae8c:	f001 fd2a 	bl	801c8e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801ae90:	6a3b      	ldr	r3, [r7, #32]
 801ae92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ae94:	6a3b      	ldr	r3, [r7, #32]
 801ae96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ae98:	429a      	cmp	r2, r3
 801ae9a:	d302      	bcc.n	801aea2 <xQueueGenericSend+0x94>
 801ae9c:	683b      	ldr	r3, [r7, #0]
 801ae9e:	2b02      	cmp	r3, #2
 801aea0:	d11d      	bne.n	801aede <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801aea2:	683a      	ldr	r2, [r7, #0]
 801aea4:	68b9      	ldr	r1, [r7, #8]
 801aea6:	6a38      	ldr	r0, [r7, #32]
 801aea8:	f000 f9a4 	bl	801b1f4 <prvCopyDataToQueue>
 801aeac:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801aeae:	6a3b      	ldr	r3, [r7, #32]
 801aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d00a      	beq.n	801aecc <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801aeb6:	6a3b      	ldr	r3, [r7, #32]
 801aeb8:	3324      	adds	r3, #36	; 0x24
 801aeba:	4618      	mov	r0, r3
 801aebc:	f000 ff4e 	bl	801bd5c <xTaskRemoveFromEventList>
 801aec0:	4603      	mov	r3, r0
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d007      	beq.n	801aed6 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801aec6:	f001 fcfb 	bl	801c8c0 <vPortYield>
 801aeca:	e004      	b.n	801aed6 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801aecc:	69fb      	ldr	r3, [r7, #28]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d001      	beq.n	801aed6 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801aed2:	f001 fcf5 	bl	801c8c0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801aed6:	f001 fd17 	bl	801c908 <vPortExitCritical>
				return pdPASS;
 801aeda:	2301      	movs	r3, #1
 801aedc:	e05c      	b.n	801af98 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d103      	bne.n	801aeec <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801aee4:	f001 fd10 	bl	801c908 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801aee8:	2300      	movs	r3, #0
 801aeea:	e055      	b.n	801af98 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d106      	bne.n	801af00 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801aef2:	f107 0314 	add.w	r3, r7, #20
 801aef6:	4618      	mov	r0, r3
 801aef8:	f000 ff8c 	bl	801be14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801aefc:	2301      	movs	r3, #1
 801aefe:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801af00:	f001 fd02 	bl	801c908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801af04:	f000 fd38 	bl	801b978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801af08:	f001 fcec 	bl	801c8e4 <vPortEnterCritical>
 801af0c:	6a3b      	ldr	r3, [r7, #32]
 801af0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801af12:	b25b      	sxtb	r3, r3
 801af14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af18:	d103      	bne.n	801af22 <xQueueGenericSend+0x114>
 801af1a:	6a3b      	ldr	r3, [r7, #32]
 801af1c:	2200      	movs	r2, #0
 801af1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801af22:	6a3b      	ldr	r3, [r7, #32]
 801af24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801af28:	b25b      	sxtb	r3, r3
 801af2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af2e:	d103      	bne.n	801af38 <xQueueGenericSend+0x12a>
 801af30:	6a3b      	ldr	r3, [r7, #32]
 801af32:	2200      	movs	r2, #0
 801af34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801af38:	f001 fce6 	bl	801c908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801af3c:	1d3a      	adds	r2, r7, #4
 801af3e:	f107 0314 	add.w	r3, r7, #20
 801af42:	4611      	mov	r1, r2
 801af44:	4618      	mov	r0, r3
 801af46:	f000 ff7b 	bl	801be40 <xTaskCheckForTimeOut>
 801af4a:	4603      	mov	r3, r0
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d11d      	bne.n	801af8c <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801af50:	6a38      	ldr	r0, [r7, #32]
 801af52:	f000 fa47 	bl	801b3e4 <prvIsQueueFull>
 801af56:	4603      	mov	r3, r0
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d011      	beq.n	801af80 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801af5c:	6a3b      	ldr	r3, [r7, #32]
 801af5e:	3310      	adds	r3, #16
 801af60:	687a      	ldr	r2, [r7, #4]
 801af62:	4611      	mov	r1, r2
 801af64:	4618      	mov	r0, r3
 801af66:	f000 feb9 	bl	801bcdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801af6a:	6a38      	ldr	r0, [r7, #32]
 801af6c:	f000 f9d2 	bl	801b314 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801af70:	f000 fd10 	bl	801b994 <xTaskResumeAll>
 801af74:	4603      	mov	r3, r0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d188      	bne.n	801ae8c <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801af7a:	f001 fca1 	bl	801c8c0 <vPortYield>
 801af7e:	e785      	b.n	801ae8c <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801af80:	6a38      	ldr	r0, [r7, #32]
 801af82:	f000 f9c7 	bl	801b314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801af86:	f000 fd05 	bl	801b994 <xTaskResumeAll>
 801af8a:	e77f      	b.n	801ae8c <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801af8c:	6a38      	ldr	r0, [r7, #32]
 801af8e:	f000 f9c1 	bl	801b314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801af92:	f000 fcff 	bl	801b994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801af96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801af98:	4618      	mov	r0, r3
 801af9a:	3728      	adds	r7, #40	; 0x28
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd80      	pop	{r7, pc}

0801afa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b08a      	sub	sp, #40	; 0x28
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	60f8      	str	r0, [r7, #12]
 801afa8:	60b9      	str	r1, [r7, #8]
 801afaa:	607a      	str	r2, [r7, #4]
 801afac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801afb2:	6a3b      	ldr	r3, [r7, #32]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d102      	bne.n	801afbe <xQueueGenericSendFromISR+0x1e>
 801afb8:	f001 fdc6 	bl	801cb48 <ulSetInterruptMask>
 801afbc:	e7fe      	b.n	801afbc <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801afbe:	68bb      	ldr	r3, [r7, #8]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d103      	bne.n	801afcc <xQueueGenericSendFromISR+0x2c>
 801afc4:	6a3b      	ldr	r3, [r7, #32]
 801afc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d101      	bne.n	801afd0 <xQueueGenericSendFromISR+0x30>
 801afcc:	2301      	movs	r3, #1
 801afce:	e000      	b.n	801afd2 <xQueueGenericSendFromISR+0x32>
 801afd0:	2300      	movs	r3, #0
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d102      	bne.n	801afdc <xQueueGenericSendFromISR+0x3c>
 801afd6:	f001 fdb7 	bl	801cb48 <ulSetInterruptMask>
 801afda:	e7fe      	b.n	801afda <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801afdc:	683b      	ldr	r3, [r7, #0]
 801afde:	2b02      	cmp	r3, #2
 801afe0:	d103      	bne.n	801afea <xQueueGenericSendFromISR+0x4a>
 801afe2:	6a3b      	ldr	r3, [r7, #32]
 801afe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801afe6:	2b01      	cmp	r3, #1
 801afe8:	d101      	bne.n	801afee <xQueueGenericSendFromISR+0x4e>
 801afea:	2301      	movs	r3, #1
 801afec:	e000      	b.n	801aff0 <xQueueGenericSendFromISR+0x50>
 801afee:	2300      	movs	r3, #0
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d102      	bne.n	801affa <xQueueGenericSendFromISR+0x5a>
 801aff4:	f001 fda8 	bl	801cb48 <ulSetInterruptMask>
 801aff8:	e7fe      	b.n	801aff8 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801affa:	f001 fda5 	bl	801cb48 <ulSetInterruptMask>
 801affe:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801b000:	6a3b      	ldr	r3, [r7, #32]
 801b002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b004:	6a3b      	ldr	r3, [r7, #32]
 801b006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b008:	429a      	cmp	r2, r3
 801b00a:	d302      	bcc.n	801b012 <xQueueGenericSendFromISR+0x72>
 801b00c:	683b      	ldr	r3, [r7, #0]
 801b00e:	2b02      	cmp	r3, #2
 801b010:	d12d      	bne.n	801b06e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801b012:	6a3b      	ldr	r3, [r7, #32]
 801b014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b018:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b01a:	6a3b      	ldr	r3, [r7, #32]
 801b01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b01e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801b020:	683a      	ldr	r2, [r7, #0]
 801b022:	68b9      	ldr	r1, [r7, #8]
 801b024:	6a38      	ldr	r0, [r7, #32]
 801b026:	f000 f8e5 	bl	801b1f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801b02a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b032:	d112      	bne.n	801b05a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b034:	6a3b      	ldr	r3, [r7, #32]
 801b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d015      	beq.n	801b068 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b03c:	6a3b      	ldr	r3, [r7, #32]
 801b03e:	3324      	adds	r3, #36	; 0x24
 801b040:	4618      	mov	r0, r3
 801b042:	f000 fe8b 	bl	801bd5c <xTaskRemoveFromEventList>
 801b046:	4603      	mov	r3, r0
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d00d      	beq.n	801b068 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d00a      	beq.n	801b068 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2201      	movs	r2, #1
 801b056:	601a      	str	r2, [r3, #0]
 801b058:	e006      	b.n	801b068 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801b05a:	7efb      	ldrb	r3, [r7, #27]
 801b05c:	3301      	adds	r3, #1
 801b05e:	b2db      	uxtb	r3, r3
 801b060:	b25a      	sxtb	r2, r3
 801b062:	6a3b      	ldr	r3, [r7, #32]
 801b064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801b068:	2301      	movs	r3, #1
 801b06a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 801b06c:	e001      	b.n	801b072 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801b06e:	2300      	movs	r3, #0
 801b070:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801b072:	69f8      	ldr	r0, [r7, #28]
 801b074:	f001 fd75 	bl	801cb62 <vClearInterruptMask>

	return xReturn;
 801b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b07a:	4618      	mov	r0, r3
 801b07c:	3728      	adds	r7, #40	; 0x28
 801b07e:	46bd      	mov	sp, r7
 801b080:	bd80      	pop	{r7, pc}

0801b082 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801b082:	b580      	push	{r7, lr}
 801b084:	b08a      	sub	sp, #40	; 0x28
 801b086:	af00      	add	r7, sp, #0
 801b088:	60f8      	str	r0, [r7, #12]
 801b08a:	60b9      	str	r1, [r7, #8]
 801b08c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801b08e:	2300      	movs	r3, #0
 801b090:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801b096:	6a3b      	ldr	r3, [r7, #32]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d102      	bne.n	801b0a2 <xQueueReceive+0x20>
 801b09c:	f001 fd54 	bl	801cb48 <ulSetInterruptMask>
 801b0a0:	e7fe      	b.n	801b0a0 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801b0a2:	68bb      	ldr	r3, [r7, #8]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d103      	bne.n	801b0b0 <xQueueReceive+0x2e>
 801b0a8:	6a3b      	ldr	r3, [r7, #32]
 801b0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d101      	bne.n	801b0b4 <xQueueReceive+0x32>
 801b0b0:	2301      	movs	r3, #1
 801b0b2:	e000      	b.n	801b0b6 <xQueueReceive+0x34>
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d102      	bne.n	801b0c0 <xQueueReceive+0x3e>
 801b0ba:	f001 fd45 	bl	801cb48 <ulSetInterruptMask>
 801b0be:	e7fe      	b.n	801b0be <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801b0c0:	f000 ffe2 	bl	801c088 <xTaskGetSchedulerState>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d102      	bne.n	801b0d0 <xQueueReceive+0x4e>
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d101      	bne.n	801b0d4 <xQueueReceive+0x52>
 801b0d0:	2301      	movs	r3, #1
 801b0d2:	e000      	b.n	801b0d6 <xQueueReceive+0x54>
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d102      	bne.n	801b0e0 <xQueueReceive+0x5e>
 801b0da:	f001 fd35 	bl	801cb48 <ulSetInterruptMask>
 801b0de:	e7fe      	b.n	801b0de <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801b0e0:	f001 fc00 	bl	801c8e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b0e4:	6a3b      	ldr	r3, [r7, #32]
 801b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b0e8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801b0ea:	69fb      	ldr	r3, [r7, #28]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d019      	beq.n	801b124 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801b0f0:	68b9      	ldr	r1, [r7, #8]
 801b0f2:	6a38      	ldr	r0, [r7, #32]
 801b0f4:	f000 f8e8 	bl	801b2c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801b0f8:	69fb      	ldr	r3, [r7, #28]
 801b0fa:	1e5a      	subs	r2, r3, #1
 801b0fc:	6a3b      	ldr	r3, [r7, #32]
 801b0fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b100:	6a3b      	ldr	r3, [r7, #32]
 801b102:	691b      	ldr	r3, [r3, #16]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d009      	beq.n	801b11c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b108:	6a3b      	ldr	r3, [r7, #32]
 801b10a:	3310      	adds	r3, #16
 801b10c:	4618      	mov	r0, r3
 801b10e:	f000 fe25 	bl	801bd5c <xTaskRemoveFromEventList>
 801b112:	4603      	mov	r3, r0
 801b114:	2b00      	cmp	r3, #0
 801b116:	d001      	beq.n	801b11c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801b118:	f001 fbd2 	bl	801c8c0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801b11c:	f001 fbf4 	bl	801c908 <vPortExitCritical>
				return pdPASS;
 801b120:	2301      	movs	r3, #1
 801b122:	e063      	b.n	801b1ec <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	2b00      	cmp	r3, #0
 801b128:	d103      	bne.n	801b132 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801b12a:	f001 fbed 	bl	801c908 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801b12e:	2300      	movs	r3, #0
 801b130:	e05c      	b.n	801b1ec <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b134:	2b00      	cmp	r3, #0
 801b136:	d106      	bne.n	801b146 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801b138:	f107 0314 	add.w	r3, r7, #20
 801b13c:	4618      	mov	r0, r3
 801b13e:	f000 fe69 	bl	801be14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801b142:	2301      	movs	r3, #1
 801b144:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801b146:	f001 fbdf 	bl	801c908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801b14a:	f000 fc15 	bl	801b978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801b14e:	f001 fbc9 	bl	801c8e4 <vPortEnterCritical>
 801b152:	6a3b      	ldr	r3, [r7, #32]
 801b154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b158:	b25b      	sxtb	r3, r3
 801b15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b15e:	d103      	bne.n	801b168 <xQueueReceive+0xe6>
 801b160:	6a3b      	ldr	r3, [r7, #32]
 801b162:	2200      	movs	r2, #0
 801b164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b168:	6a3b      	ldr	r3, [r7, #32]
 801b16a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b16e:	b25b      	sxtb	r3, r3
 801b170:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b174:	d103      	bne.n	801b17e <xQueueReceive+0xfc>
 801b176:	6a3b      	ldr	r3, [r7, #32]
 801b178:	2200      	movs	r2, #0
 801b17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801b17e:	f001 fbc3 	bl	801c908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801b182:	1d3a      	adds	r2, r7, #4
 801b184:	f107 0314 	add.w	r3, r7, #20
 801b188:	4611      	mov	r1, r2
 801b18a:	4618      	mov	r0, r3
 801b18c:	f000 fe58 	bl	801be40 <xTaskCheckForTimeOut>
 801b190:	4603      	mov	r3, r0
 801b192:	2b00      	cmp	r3, #0
 801b194:	d11d      	bne.n	801b1d2 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801b196:	6a38      	ldr	r0, [r7, #32]
 801b198:	f000 f90e 	bl	801b3b8 <prvIsQueueEmpty>
 801b19c:	4603      	mov	r3, r0
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d011      	beq.n	801b1c6 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801b1a2:	6a3b      	ldr	r3, [r7, #32]
 801b1a4:	3324      	adds	r3, #36	; 0x24
 801b1a6:	687a      	ldr	r2, [r7, #4]
 801b1a8:	4611      	mov	r1, r2
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f000 fd96 	bl	801bcdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801b1b0:	6a38      	ldr	r0, [r7, #32]
 801b1b2:	f000 f8af 	bl	801b314 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801b1b6:	f000 fbed 	bl	801b994 <xTaskResumeAll>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d18f      	bne.n	801b0e0 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 801b1c0:	f001 fb7e 	bl	801c8c0 <vPortYield>
 801b1c4:	e78c      	b.n	801b0e0 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801b1c6:	6a38      	ldr	r0, [r7, #32]
 801b1c8:	f000 f8a4 	bl	801b314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801b1cc:	f000 fbe2 	bl	801b994 <xTaskResumeAll>
 801b1d0:	e786      	b.n	801b0e0 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801b1d2:	6a38      	ldr	r0, [r7, #32]
 801b1d4:	f000 f89e 	bl	801b314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801b1d8:	f000 fbdc 	bl	801b994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801b1dc:	6a38      	ldr	r0, [r7, #32]
 801b1de:	f000 f8eb 	bl	801b3b8 <prvIsQueueEmpty>
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	f43f af7b 	beq.w	801b0e0 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801b1ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	3728      	adds	r7, #40	; 0x28
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}

0801b1f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b086      	sub	sp, #24
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	60f8      	str	r0, [r7, #12]
 801b1fc:	60b9      	str	r1, [r7, #8]
 801b1fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801b200:	2300      	movs	r3, #0
 801b202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d10d      	bne.n	801b22e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d14d      	bne.n	801b2b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	689b      	ldr	r3, [r3, #8]
 801b21e:	4618      	mov	r0, r3
 801b220:	f000 ff50 	bl	801c0c4 <xTaskPriorityDisinherit>
 801b224:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	2200      	movs	r2, #0
 801b22a:	609a      	str	r2, [r3, #8]
 801b22c:	e043      	b.n	801b2b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d119      	bne.n	801b268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	6858      	ldr	r0, [r3, #4]
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b23c:	461a      	mov	r2, r3
 801b23e:	68b9      	ldr	r1, [r7, #8]
 801b240:	f005 fa8f 	bl	8020762 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	685a      	ldr	r2, [r3, #4]
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b24c:	441a      	add	r2, r3
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	685a      	ldr	r2, [r3, #4]
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	689b      	ldr	r3, [r3, #8]
 801b25a:	429a      	cmp	r2, r3
 801b25c:	d32b      	bcc.n	801b2b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	681a      	ldr	r2, [r3, #0]
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	605a      	str	r2, [r3, #4]
 801b266:	e026      	b.n	801b2b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	68d8      	ldr	r0, [r3, #12]
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b270:	461a      	mov	r2, r3
 801b272:	68b9      	ldr	r1, [r7, #8]
 801b274:	f005 fa75 	bl	8020762 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	68da      	ldr	r2, [r3, #12]
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b280:	425b      	negs	r3, r3
 801b282:	441a      	add	r2, r3
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	68da      	ldr	r2, [r3, #12]
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	429a      	cmp	r2, r3
 801b292:	d207      	bcs.n	801b2a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	689a      	ldr	r2, [r3, #8]
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b29c:	425b      	negs	r3, r3
 801b29e:	441a      	add	r2, r3
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	2b02      	cmp	r3, #2
 801b2a8:	d105      	bne.n	801b2b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801b2aa:	693b      	ldr	r3, [r7, #16]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d002      	beq.n	801b2b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801b2b0:	693b      	ldr	r3, [r7, #16]
 801b2b2:	3b01      	subs	r3, #1
 801b2b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801b2b6:	693b      	ldr	r3, [r7, #16]
 801b2b8:	1c5a      	adds	r2, r3, #1
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801b2be:	697b      	ldr	r3, [r7, #20]
}
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	3718      	adds	r7, #24
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	bd80      	pop	{r7, pc}

0801b2c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b082      	sub	sp, #8
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
 801b2d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d018      	beq.n	801b30c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	68da      	ldr	r2, [r3, #12]
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2e2:	441a      	add	r2, r3
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	68da      	ldr	r2, [r3, #12]
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	689b      	ldr	r3, [r3, #8]
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d303      	bcc.n	801b2fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681a      	ldr	r2, [r3, #0]
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	68d9      	ldr	r1, [r3, #12]
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b304:	461a      	mov	r2, r3
 801b306:	6838      	ldr	r0, [r7, #0]
 801b308:	f005 fa2b 	bl	8020762 <memcpy>
	}
}
 801b30c:	bf00      	nop
 801b30e:	3708      	adds	r7, #8
 801b310:	46bd      	mov	sp, r7
 801b312:	bd80      	pop	{r7, pc}

0801b314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801b314:	b580      	push	{r7, lr}
 801b316:	b084      	sub	sp, #16
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801b31c:	f001 fae2 	bl	801c8e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b326:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801b328:	e011      	b.n	801b34e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d012      	beq.n	801b358 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	3324      	adds	r3, #36	; 0x24
 801b336:	4618      	mov	r0, r3
 801b338:	f000 fd10 	bl	801bd5c <xTaskRemoveFromEventList>
 801b33c:	4603      	mov	r3, r0
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d001      	beq.n	801b346 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801b342:	f000 fdcf 	bl	801bee4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801b346:	7bfb      	ldrb	r3, [r7, #15]
 801b348:	3b01      	subs	r3, #1
 801b34a:	b2db      	uxtb	r3, r3
 801b34c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801b34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b352:	2b00      	cmp	r3, #0
 801b354:	dce9      	bgt.n	801b32a <prvUnlockQueue+0x16>
 801b356:	e000      	b.n	801b35a <prvUnlockQueue+0x46>
					break;
 801b358:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	22ff      	movs	r2, #255	; 0xff
 801b35e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801b362:	f001 fad1 	bl	801c908 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801b366:	f001 fabd 	bl	801c8e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b370:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b372:	e011      	b.n	801b398 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	691b      	ldr	r3, [r3, #16]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d012      	beq.n	801b3a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	3310      	adds	r3, #16
 801b380:	4618      	mov	r0, r3
 801b382:	f000 fceb 	bl	801bd5c <xTaskRemoveFromEventList>
 801b386:	4603      	mov	r3, r0
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d001      	beq.n	801b390 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801b38c:	f000 fdaa 	bl	801bee4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801b390:	7bbb      	ldrb	r3, [r7, #14]
 801b392:	3b01      	subs	r3, #1
 801b394:	b2db      	uxtb	r3, r3
 801b396:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	dce9      	bgt.n	801b374 <prvUnlockQueue+0x60>
 801b3a0:	e000      	b.n	801b3a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801b3a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	22ff      	movs	r2, #255	; 0xff
 801b3a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801b3ac:	f001 faac 	bl	801c908 <vPortExitCritical>
}
 801b3b0:	bf00      	nop
 801b3b2:	3710      	adds	r7, #16
 801b3b4:	46bd      	mov	sp, r7
 801b3b6:	bd80      	pop	{r7, pc}

0801b3b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b084      	sub	sp, #16
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b3c0:	f001 fa90 	bl	801c8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d102      	bne.n	801b3d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	60fb      	str	r3, [r7, #12]
 801b3d0:	e001      	b.n	801b3d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b3d6:	f001 fa97 	bl	801c908 <vPortExitCritical>

	return xReturn;
 801b3da:	68fb      	ldr	r3, [r7, #12]
}
 801b3dc:	4618      	mov	r0, r3
 801b3de:	3710      	adds	r7, #16
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	bd80      	pop	{r7, pc}

0801b3e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	b084      	sub	sp, #16
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b3ec:	f001 fa7a 	bl	801c8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	d102      	bne.n	801b402 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801b3fc:	2301      	movs	r3, #1
 801b3fe:	60fb      	str	r3, [r7, #12]
 801b400:	e001      	b.n	801b406 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801b402:	2300      	movs	r3, #0
 801b404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b406:	f001 fa7f 	bl	801c908 <vPortExitCritical>

	return xReturn;
 801b40a:	68fb      	ldr	r3, [r7, #12]
}
 801b40c:	4618      	mov	r0, r3
 801b40e:	3710      	adds	r7, #16
 801b410:	46bd      	mov	sp, r7
 801b412:	bd80      	pop	{r7, pc}

0801b414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801b414:	b480      	push	{r7}
 801b416:	b085      	sub	sp, #20
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801b41e:	2300      	movs	r3, #0
 801b420:	60fb      	str	r3, [r7, #12]
 801b422:	e014      	b.n	801b44e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801b424:	4a0f      	ldr	r2, [pc, #60]	; (801b464 <vQueueAddToRegistry+0x50>)
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d10b      	bne.n	801b448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801b430:	490c      	ldr	r1, [pc, #48]	; (801b464 <vQueueAddToRegistry+0x50>)
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	683a      	ldr	r2, [r7, #0]
 801b436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801b43a:	4a0a      	ldr	r2, [pc, #40]	; (801b464 <vQueueAddToRegistry+0x50>)
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	00db      	lsls	r3, r3, #3
 801b440:	4413      	add	r3, r2
 801b442:	687a      	ldr	r2, [r7, #4]
 801b444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801b446:	e006      	b.n	801b456 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	3301      	adds	r3, #1
 801b44c:	60fb      	str	r3, [r7, #12]
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	2b07      	cmp	r3, #7
 801b452:	d9e7      	bls.n	801b424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801b454:	bf00      	nop
 801b456:	bf00      	nop
 801b458:	3714      	adds	r7, #20
 801b45a:	46bd      	mov	sp, r7
 801b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b460:	4770      	bx	lr
 801b462:	bf00      	nop
 801b464:	200016e0 	.word	0x200016e0

0801b468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b468:	b580      	push	{r7, lr}
 801b46a:	b086      	sub	sp, #24
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	60f8      	str	r0, [r7, #12]
 801b470:	60b9      	str	r1, [r7, #8]
 801b472:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801b474:	68fb      	ldr	r3, [r7, #12]
 801b476:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801b478:	f001 fa34 	bl	801c8e4 <vPortEnterCritical>
 801b47c:	697b      	ldr	r3, [r7, #20]
 801b47e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b482:	b25b      	sxtb	r3, r3
 801b484:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b488:	d103      	bne.n	801b492 <vQueueWaitForMessageRestricted+0x2a>
 801b48a:	697b      	ldr	r3, [r7, #20]
 801b48c:	2200      	movs	r2, #0
 801b48e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b492:	697b      	ldr	r3, [r7, #20]
 801b494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b498:	b25b      	sxtb	r3, r3
 801b49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b49e:	d103      	bne.n	801b4a8 <vQueueWaitForMessageRestricted+0x40>
 801b4a0:	697b      	ldr	r3, [r7, #20]
 801b4a2:	2200      	movs	r2, #0
 801b4a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801b4a8:	f001 fa2e 	bl	801c908 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801b4ac:	697b      	ldr	r3, [r7, #20]
 801b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d106      	bne.n	801b4c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801b4b4:	697b      	ldr	r3, [r7, #20]
 801b4b6:	3324      	adds	r3, #36	; 0x24
 801b4b8:	687a      	ldr	r2, [r7, #4]
 801b4ba:	68b9      	ldr	r1, [r7, #8]
 801b4bc:	4618      	mov	r0, r3
 801b4be:	f000 fc29 	bl	801bd14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801b4c2:	6978      	ldr	r0, [r7, #20]
 801b4c4:	f7ff ff26 	bl	801b314 <prvUnlockQueue>
	}
 801b4c8:	bf00      	nop
 801b4ca:	3718      	adds	r7, #24
 801b4cc:	46bd      	mov	sp, r7
 801b4ce:	bd80      	pop	{r7, pc}

0801b4d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b08c      	sub	sp, #48	; 0x30
 801b4d4:	af04      	add	r7, sp, #16
 801b4d6:	60f8      	str	r0, [r7, #12]
 801b4d8:	60b9      	str	r1, [r7, #8]
 801b4da:	607a      	str	r2, [r7, #4]
 801b4dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801b4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d102      	bne.n	801b4ea <xTaskCreateStatic+0x1a>
 801b4e4:	f001 fb30 	bl	801cb48 <ulSetInterruptMask>
 801b4e8:	e7fe      	b.n	801b4e8 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 801b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d102      	bne.n	801b4f6 <xTaskCreateStatic+0x26>
 801b4f0:	f001 fb2a 	bl	801cb48 <ulSetInterruptMask>
 801b4f4:	e7fe      	b.n	801b4f4 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801b4f6:	235c      	movs	r3, #92	; 0x5c
 801b4f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801b4fa:	697b      	ldr	r3, [r7, #20]
 801b4fc:	2b5c      	cmp	r3, #92	; 0x5c
 801b4fe:	d002      	beq.n	801b506 <xTaskCreateStatic+0x36>
 801b500:	f001 fb22 	bl	801cb48 <ulSetInterruptMask>
 801b504:	e7fe      	b.n	801b504 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801b506:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d01e      	beq.n	801b54c <xTaskCreateStatic+0x7c>
 801b50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b510:	2b00      	cmp	r3, #0
 801b512:	d01b      	beq.n	801b54c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b516:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801b518:	69fb      	ldr	r3, [r7, #28]
 801b51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b51c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801b51e:	69fb      	ldr	r3, [r7, #28]
 801b520:	2202      	movs	r2, #2
 801b522:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801b526:	2300      	movs	r3, #0
 801b528:	9303      	str	r3, [sp, #12]
 801b52a:	69fb      	ldr	r3, [r7, #28]
 801b52c:	9302      	str	r3, [sp, #8]
 801b52e:	f107 0318 	add.w	r3, r7, #24
 801b532:	9301      	str	r3, [sp, #4]
 801b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b536:	9300      	str	r3, [sp, #0]
 801b538:	683b      	ldr	r3, [r7, #0]
 801b53a:	687a      	ldr	r2, [r7, #4]
 801b53c:	68b9      	ldr	r1, [r7, #8]
 801b53e:	68f8      	ldr	r0, [r7, #12]
 801b540:	f000 f850 	bl	801b5e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b544:	69f8      	ldr	r0, [r7, #28]
 801b546:	f000 f8d7 	bl	801b6f8 <prvAddNewTaskToReadyList>
 801b54a:	e001      	b.n	801b550 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 801b54c:	2300      	movs	r3, #0
 801b54e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801b550:	69bb      	ldr	r3, [r7, #24]
	}
 801b552:	4618      	mov	r0, r3
 801b554:	3720      	adds	r7, #32
 801b556:	46bd      	mov	sp, r7
 801b558:	bd80      	pop	{r7, pc}

0801b55a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801b55a:	b580      	push	{r7, lr}
 801b55c:	b08c      	sub	sp, #48	; 0x30
 801b55e:	af04      	add	r7, sp, #16
 801b560:	60f8      	str	r0, [r7, #12]
 801b562:	60b9      	str	r1, [r7, #8]
 801b564:	603b      	str	r3, [r7, #0]
 801b566:	4613      	mov	r3, r2
 801b568:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801b56a:	88fb      	ldrh	r3, [r7, #6]
 801b56c:	009b      	lsls	r3, r3, #2
 801b56e:	4618      	mov	r0, r3
 801b570:	f001 fb4a 	bl	801cc08 <pvPortMalloc>
 801b574:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801b576:	697b      	ldr	r3, [r7, #20]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d00e      	beq.n	801b59a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801b57c:	205c      	movs	r0, #92	; 0x5c
 801b57e:	f001 fb43 	bl	801cc08 <pvPortMalloc>
 801b582:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801b584:	69fb      	ldr	r3, [r7, #28]
 801b586:	2b00      	cmp	r3, #0
 801b588:	d003      	beq.n	801b592 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801b58a:	69fb      	ldr	r3, [r7, #28]
 801b58c:	697a      	ldr	r2, [r7, #20]
 801b58e:	631a      	str	r2, [r3, #48]	; 0x30
 801b590:	e005      	b.n	801b59e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801b592:	6978      	ldr	r0, [r7, #20]
 801b594:	f001 fbec 	bl	801cd70 <vPortFree>
 801b598:	e001      	b.n	801b59e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801b59a:	2300      	movs	r3, #0
 801b59c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801b59e:	69fb      	ldr	r3, [r7, #28]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d017      	beq.n	801b5d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801b5a4:	69fb      	ldr	r3, [r7, #28]
 801b5a6:	2200      	movs	r2, #0
 801b5a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801b5ac:	88fa      	ldrh	r2, [r7, #6]
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	9303      	str	r3, [sp, #12]
 801b5b2:	69fb      	ldr	r3, [r7, #28]
 801b5b4:	9302      	str	r3, [sp, #8]
 801b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5b8:	9301      	str	r3, [sp, #4]
 801b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5bc:	9300      	str	r3, [sp, #0]
 801b5be:	683b      	ldr	r3, [r7, #0]
 801b5c0:	68b9      	ldr	r1, [r7, #8]
 801b5c2:	68f8      	ldr	r0, [r7, #12]
 801b5c4:	f000 f80e 	bl	801b5e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b5c8:	69f8      	ldr	r0, [r7, #28]
 801b5ca:	f000 f895 	bl	801b6f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801b5ce:	2301      	movs	r3, #1
 801b5d0:	61bb      	str	r3, [r7, #24]
 801b5d2:	e002      	b.n	801b5da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801b5d4:	f04f 33ff 	mov.w	r3, #4294967295
 801b5d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801b5da:	69bb      	ldr	r3, [r7, #24]
	}
 801b5dc:	4618      	mov	r0, r3
 801b5de:	3720      	adds	r7, #32
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bd80      	pop	{r7, pc}

0801b5e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b086      	sub	sp, #24
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	60f8      	str	r0, [r7, #12]
 801b5ec:	60b9      	str	r1, [r7, #8]
 801b5ee:	607a      	str	r2, [r7, #4]
 801b5f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	009b      	lsls	r3, r3, #2
 801b5fa:	461a      	mov	r2, r3
 801b5fc:	21a5      	movs	r1, #165	; 0xa5
 801b5fe:	f004 ffe0 	bl	80205c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b60c:	3b01      	subs	r3, #1
 801b60e:	009b      	lsls	r3, r3, #2
 801b610:	4413      	add	r3, r2
 801b612:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801b614:	693b      	ldr	r3, [r7, #16]
 801b616:	f023 0307 	bic.w	r3, r3, #7
 801b61a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801b61c:	693b      	ldr	r3, [r7, #16]
 801b61e:	f003 0307 	and.w	r3, r3, #7
 801b622:	2b00      	cmp	r3, #0
 801b624:	d002      	beq.n	801b62c <prvInitialiseNewTask+0x48>
 801b626:	f001 fa8f 	bl	801cb48 <ulSetInterruptMask>
 801b62a:	e7fe      	b.n	801b62a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801b62c:	68bb      	ldr	r3, [r7, #8]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d01f      	beq.n	801b672 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b632:	2300      	movs	r3, #0
 801b634:	617b      	str	r3, [r7, #20]
 801b636:	e012      	b.n	801b65e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801b638:	68ba      	ldr	r2, [r7, #8]
 801b63a:	697b      	ldr	r3, [r7, #20]
 801b63c:	4413      	add	r3, r2
 801b63e:	7819      	ldrb	r1, [r3, #0]
 801b640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b642:	697b      	ldr	r3, [r7, #20]
 801b644:	4413      	add	r3, r2
 801b646:	3334      	adds	r3, #52	; 0x34
 801b648:	460a      	mov	r2, r1
 801b64a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801b64c:	68ba      	ldr	r2, [r7, #8]
 801b64e:	697b      	ldr	r3, [r7, #20]
 801b650:	4413      	add	r3, r2
 801b652:	781b      	ldrb	r3, [r3, #0]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d006      	beq.n	801b666 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b658:	697b      	ldr	r3, [r7, #20]
 801b65a:	3301      	adds	r3, #1
 801b65c:	617b      	str	r3, [r7, #20]
 801b65e:	697b      	ldr	r3, [r7, #20]
 801b660:	2b0f      	cmp	r3, #15
 801b662:	d9e9      	bls.n	801b638 <prvInitialiseNewTask+0x54>
 801b664:	e000      	b.n	801b668 <prvInitialiseNewTask+0x84>
			{
				break;
 801b666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b66a:	2200      	movs	r2, #0
 801b66c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b670:	e003      	b.n	801b67a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b674:	2200      	movs	r2, #0
 801b676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801b67a:	6a3b      	ldr	r3, [r7, #32]
 801b67c:	2b37      	cmp	r3, #55	; 0x37
 801b67e:	d901      	bls.n	801b684 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801b680:	2337      	movs	r3, #55	; 0x37
 801b682:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b686:	6a3a      	ldr	r2, [r7, #32]
 801b688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b68c:	6a3a      	ldr	r2, [r7, #32]
 801b68e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b692:	2200      	movs	r2, #0
 801b694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b698:	3304      	adds	r3, #4
 801b69a:	4618      	mov	r0, r3
 801b69c:	f7ff fa58 	bl	801ab50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6a2:	3318      	adds	r3, #24
 801b6a4:	4618      	mov	r0, r3
 801b6a6:	f7ff fa53 	bl	801ab50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b6ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b6b0:	6a3b      	ldr	r3, [r7, #32]
 801b6b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b6be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6c2:	2200      	movs	r2, #0
 801b6c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6c8:	2200      	movs	r2, #0
 801b6ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801b6d2:	683b      	ldr	r3, [r7, #0]
 801b6d4:	68fa      	ldr	r2, [r7, #12]
 801b6d6:	6938      	ldr	r0, [r7, #16]
 801b6d8:	f001 f960 	bl	801c99c <pxPortInitialiseStack>
 801b6dc:	4602      	mov	r2, r0
 801b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d002      	beq.n	801b6ee <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b6ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b6ee:	bf00      	nop
 801b6f0:	3718      	adds	r7, #24
 801b6f2:	46bd      	mov	sp, r7
 801b6f4:	bd80      	pop	{r7, pc}
	...

0801b6f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801b6f8:	b580      	push	{r7, lr}
 801b6fa:	b082      	sub	sp, #8
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801b700:	f001 f8f0 	bl	801c8e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801b704:	4b2a      	ldr	r3, [pc, #168]	; (801b7b0 <prvAddNewTaskToReadyList+0xb8>)
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	3301      	adds	r3, #1
 801b70a:	4a29      	ldr	r2, [pc, #164]	; (801b7b0 <prvAddNewTaskToReadyList+0xb8>)
 801b70c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801b70e:	4b29      	ldr	r3, [pc, #164]	; (801b7b4 <prvAddNewTaskToReadyList+0xbc>)
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d109      	bne.n	801b72a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801b716:	4a27      	ldr	r2, [pc, #156]	; (801b7b4 <prvAddNewTaskToReadyList+0xbc>)
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801b71c:	4b24      	ldr	r3, [pc, #144]	; (801b7b0 <prvAddNewTaskToReadyList+0xb8>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	2b01      	cmp	r3, #1
 801b722:	d110      	bne.n	801b746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801b724:	f000 fbfa 	bl	801bf1c <prvInitialiseTaskLists>
 801b728:	e00d      	b.n	801b746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801b72a:	4b23      	ldr	r3, [pc, #140]	; (801b7b8 <prvAddNewTaskToReadyList+0xc0>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d109      	bne.n	801b746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801b732:	4b20      	ldr	r3, [pc, #128]	; (801b7b4 <prvAddNewTaskToReadyList+0xbc>)
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b73c:	429a      	cmp	r2, r3
 801b73e:	d802      	bhi.n	801b746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801b740:	4a1c      	ldr	r2, [pc, #112]	; (801b7b4 <prvAddNewTaskToReadyList+0xbc>)
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801b746:	4b1d      	ldr	r3, [pc, #116]	; (801b7bc <prvAddNewTaskToReadyList+0xc4>)
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	3301      	adds	r3, #1
 801b74c:	4a1b      	ldr	r2, [pc, #108]	; (801b7bc <prvAddNewTaskToReadyList+0xc4>)
 801b74e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801b750:	4b1a      	ldr	r3, [pc, #104]	; (801b7bc <prvAddNewTaskToReadyList+0xc4>)
 801b752:	681a      	ldr	r2, [r3, #0]
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b75c:	4b18      	ldr	r3, [pc, #96]	; (801b7c0 <prvAddNewTaskToReadyList+0xc8>)
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	429a      	cmp	r2, r3
 801b762:	d903      	bls.n	801b76c <prvAddNewTaskToReadyList+0x74>
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b768:	4a15      	ldr	r2, [pc, #84]	; (801b7c0 <prvAddNewTaskToReadyList+0xc8>)
 801b76a:	6013      	str	r3, [r2, #0]
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b770:	4613      	mov	r3, r2
 801b772:	009b      	lsls	r3, r3, #2
 801b774:	4413      	add	r3, r2
 801b776:	009b      	lsls	r3, r3, #2
 801b778:	4a12      	ldr	r2, [pc, #72]	; (801b7c4 <prvAddNewTaskToReadyList+0xcc>)
 801b77a:	441a      	add	r2, r3
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	3304      	adds	r3, #4
 801b780:	4619      	mov	r1, r3
 801b782:	4610      	mov	r0, r2
 801b784:	f7ff f9f1 	bl	801ab6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801b788:	f001 f8be 	bl	801c908 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b78c:	4b0a      	ldr	r3, [pc, #40]	; (801b7b8 <prvAddNewTaskToReadyList+0xc0>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d008      	beq.n	801b7a6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b794:	4b07      	ldr	r3, [pc, #28]	; (801b7b4 <prvAddNewTaskToReadyList+0xbc>)
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b79e:	429a      	cmp	r2, r3
 801b7a0:	d201      	bcs.n	801b7a6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b7a2:	f001 f88d 	bl	801c8c0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b7a6:	bf00      	nop
 801b7a8:	3708      	adds	r7, #8
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	bd80      	pop	{r7, pc}
 801b7ae:	bf00      	nop
 801b7b0:	20001bf4 	.word	0x20001bf4
 801b7b4:	20001720 	.word	0x20001720
 801b7b8:	20001c00 	.word	0x20001c00
 801b7bc:	20001c10 	.word	0x20001c10
 801b7c0:	20001bfc 	.word	0x20001bfc
 801b7c4:	20001724 	.word	0x20001724

0801b7c8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b086      	sub	sp, #24
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	6078      	str	r0, [r7, #4]
 801b7d0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801b7d2:	2300      	movs	r3, #0
 801b7d4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d102      	bne.n	801b7e2 <vTaskDelayUntil+0x1a>
 801b7dc:	f001 f9b4 	bl	801cb48 <ulSetInterruptMask>
 801b7e0:	e7fe      	b.n	801b7e0 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 801b7e2:	683b      	ldr	r3, [r7, #0]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d102      	bne.n	801b7ee <vTaskDelayUntil+0x26>
 801b7e8:	f001 f9ae 	bl	801cb48 <ulSetInterruptMask>
 801b7ec:	e7fe      	b.n	801b7ec <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 801b7ee:	4b23      	ldr	r3, [pc, #140]	; (801b87c <vTaskDelayUntil+0xb4>)
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d002      	beq.n	801b7fc <vTaskDelayUntil+0x34>
 801b7f6:	f001 f9a7 	bl	801cb48 <ulSetInterruptMask>
 801b7fa:	e7fe      	b.n	801b7fa <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 801b7fc:	f000 f8bc 	bl	801b978 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801b800:	4b1f      	ldr	r3, [pc, #124]	; (801b880 <vTaskDelayUntil+0xb8>)
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	683a      	ldr	r2, [r7, #0]
 801b80c:	4413      	add	r3, r2
 801b80e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	693a      	ldr	r2, [r7, #16]
 801b816:	429a      	cmp	r2, r3
 801b818:	d20b      	bcs.n	801b832 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	68fa      	ldr	r2, [r7, #12]
 801b820:	429a      	cmp	r2, r3
 801b822:	d211      	bcs.n	801b848 <vTaskDelayUntil+0x80>
 801b824:	68fa      	ldr	r2, [r7, #12]
 801b826:	693b      	ldr	r3, [r7, #16]
 801b828:	429a      	cmp	r2, r3
 801b82a:	d90d      	bls.n	801b848 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801b82c:	2301      	movs	r3, #1
 801b82e:	617b      	str	r3, [r7, #20]
 801b830:	e00a      	b.n	801b848 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	68fa      	ldr	r2, [r7, #12]
 801b838:	429a      	cmp	r2, r3
 801b83a:	d303      	bcc.n	801b844 <vTaskDelayUntil+0x7c>
 801b83c:	68fa      	ldr	r2, [r7, #12]
 801b83e:	693b      	ldr	r3, [r7, #16]
 801b840:	429a      	cmp	r2, r3
 801b842:	d901      	bls.n	801b848 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801b844:	2301      	movs	r3, #1
 801b846:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	68fa      	ldr	r2, [r7, #12]
 801b84c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801b84e:	697b      	ldr	r3, [r7, #20]
 801b850:	2b00      	cmp	r3, #0
 801b852:	d006      	beq.n	801b862 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801b854:	68fa      	ldr	r2, [r7, #12]
 801b856:	693b      	ldr	r3, [r7, #16]
 801b858:	1ad3      	subs	r3, r2, r3
 801b85a:	2100      	movs	r1, #0
 801b85c:	4618      	mov	r0, r3
 801b85e:	f000 fc8f 	bl	801c180 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801b862:	f000 f897 	bl	801b994 <xTaskResumeAll>
 801b866:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b868:	68bb      	ldr	r3, [r7, #8]
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d101      	bne.n	801b872 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 801b86e:	f001 f827 	bl	801c8c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b872:	bf00      	nop
 801b874:	3718      	adds	r7, #24
 801b876:	46bd      	mov	sp, r7
 801b878:	bd80      	pop	{r7, pc}
 801b87a:	bf00      	nop
 801b87c:	20001c1c 	.word	0x20001c1c
 801b880:	20001bf8 	.word	0x20001bf8

0801b884 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b884:	b580      	push	{r7, lr}
 801b886:	b084      	sub	sp, #16
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b88c:	2300      	movs	r3, #0
 801b88e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	2b00      	cmp	r3, #0
 801b894:	d00f      	beq.n	801b8b6 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b896:	4b0c      	ldr	r3, [pc, #48]	; (801b8c8 <vTaskDelay+0x44>)
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d002      	beq.n	801b8a4 <vTaskDelay+0x20>
 801b89e:	f001 f953 	bl	801cb48 <ulSetInterruptMask>
 801b8a2:	e7fe      	b.n	801b8a2 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 801b8a4:	f000 f868 	bl	801b978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b8a8:	2100      	movs	r1, #0
 801b8aa:	6878      	ldr	r0, [r7, #4]
 801b8ac:	f000 fc68 	bl	801c180 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b8b0:	f000 f870 	bl	801b994 <xTaskResumeAll>
 801b8b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d101      	bne.n	801b8c0 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 801b8bc:	f001 f800 	bl	801c8c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b8c0:	bf00      	nop
 801b8c2:	3710      	adds	r7, #16
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	20001c1c 	.word	0x20001c1c

0801b8cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b088      	sub	sp, #32
 801b8d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b8da:	463a      	mov	r2, r7
 801b8dc:	1d39      	adds	r1, r7, #4
 801b8de:	f107 0308 	add.w	r3, r7, #8
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	f7ff f8e0 	bl	801aaa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b8e8:	6839      	ldr	r1, [r7, #0]
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	68ba      	ldr	r2, [r7, #8]
 801b8ee:	9202      	str	r2, [sp, #8]
 801b8f0:	9301      	str	r3, [sp, #4]
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	9300      	str	r3, [sp, #0]
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	460a      	mov	r2, r1
 801b8fa:	4919      	ldr	r1, [pc, #100]	; (801b960 <vTaskStartScheduler+0x94>)
 801b8fc:	4819      	ldr	r0, [pc, #100]	; (801b964 <vTaskStartScheduler+0x98>)
 801b8fe:	f7ff fde7 	bl	801b4d0 <xTaskCreateStatic>
 801b902:	4603      	mov	r3, r0
 801b904:	4a18      	ldr	r2, [pc, #96]	; (801b968 <vTaskStartScheduler+0x9c>)
 801b906:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b908:	4b17      	ldr	r3, [pc, #92]	; (801b968 <vTaskStartScheduler+0x9c>)
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d002      	beq.n	801b916 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b910:	2301      	movs	r3, #1
 801b912:	60fb      	str	r3, [r7, #12]
 801b914:	e001      	b.n	801b91a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b916:	2300      	movs	r3, #0
 801b918:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	2b01      	cmp	r3, #1
 801b91e:	d102      	bne.n	801b926 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b920:	f000 fc82 	bl	801c228 <xTimerCreateTimerTask>
 801b924:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b926:	68fb      	ldr	r3, [r7, #12]
 801b928:	2b01      	cmp	r3, #1
 801b92a:	d10e      	bne.n	801b94a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801b92c:	f001 f90c 	bl	801cb48 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b930:	4b0e      	ldr	r3, [pc, #56]	; (801b96c <vTaskStartScheduler+0xa0>)
 801b932:	f04f 32ff 	mov.w	r2, #4294967295
 801b936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b938:	4b0d      	ldr	r3, [pc, #52]	; (801b970 <vTaskStartScheduler+0xa4>)
 801b93a:	2201      	movs	r2, #1
 801b93c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b93e:	4b0d      	ldr	r3, [pc, #52]	; (801b974 <vTaskStartScheduler+0xa8>)
 801b940:	2200      	movs	r2, #0
 801b942:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b944:	f001 f8b4 	bl	801cab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b948:	e006      	b.n	801b958 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b950:	d102      	bne.n	801b958 <vTaskStartScheduler+0x8c>
 801b952:	f001 f8f9 	bl	801cb48 <ulSetInterruptMask>
 801b956:	e7fe      	b.n	801b956 <vTaskStartScheduler+0x8a>
}
 801b958:	bf00      	nop
 801b95a:	3710      	adds	r7, #16
 801b95c:	46bd      	mov	sp, r7
 801b95e:	bd80      	pop	{r7, pc}
 801b960:	08021ce0 	.word	0x08021ce0
 801b964:	0801befd 	.word	0x0801befd
 801b968:	20001c18 	.word	0x20001c18
 801b96c:	20001c14 	.word	0x20001c14
 801b970:	20001c00 	.word	0x20001c00
 801b974:	20001bf8 	.word	0x20001bf8

0801b978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b978:	b480      	push	{r7}
 801b97a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b97c:	4b04      	ldr	r3, [pc, #16]	; (801b990 <vTaskSuspendAll+0x18>)
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	3301      	adds	r3, #1
 801b982:	4a03      	ldr	r2, [pc, #12]	; (801b990 <vTaskSuspendAll+0x18>)
 801b984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b986:	bf00      	nop
 801b988:	46bd      	mov	sp, r7
 801b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b98e:	4770      	bx	lr
 801b990:	20001c1c 	.word	0x20001c1c

0801b994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b084      	sub	sp, #16
 801b998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b99a:	2300      	movs	r3, #0
 801b99c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b99e:	2300      	movs	r3, #0
 801b9a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b9a2:	4b3b      	ldr	r3, [pc, #236]	; (801ba90 <xTaskResumeAll+0xfc>)
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d102      	bne.n	801b9b0 <xTaskResumeAll+0x1c>
 801b9aa:	f001 f8cd 	bl	801cb48 <ulSetInterruptMask>
 801b9ae:	e7fe      	b.n	801b9ae <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b9b0:	f000 ff98 	bl	801c8e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b9b4:	4b36      	ldr	r3, [pc, #216]	; (801ba90 <xTaskResumeAll+0xfc>)
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	3b01      	subs	r3, #1
 801b9ba:	4a35      	ldr	r2, [pc, #212]	; (801ba90 <xTaskResumeAll+0xfc>)
 801b9bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b9be:	4b34      	ldr	r3, [pc, #208]	; (801ba90 <xTaskResumeAll+0xfc>)
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d15c      	bne.n	801ba80 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b9c6:	4b33      	ldr	r3, [pc, #204]	; (801ba94 <xTaskResumeAll+0x100>)
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d058      	beq.n	801ba80 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b9ce:	e02f      	b.n	801ba30 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b9d0:	4b31      	ldr	r3, [pc, #196]	; (801ba98 <xTaskResumeAll+0x104>)
 801b9d2:	68db      	ldr	r3, [r3, #12]
 801b9d4:	68db      	ldr	r3, [r3, #12]
 801b9d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	3318      	adds	r3, #24
 801b9dc:	4618      	mov	r0, r3
 801b9de:	f7ff f921 	bl	801ac24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b9e2:	68fb      	ldr	r3, [r7, #12]
 801b9e4:	3304      	adds	r3, #4
 801b9e6:	4618      	mov	r0, r3
 801b9e8:	f7ff f91c 	bl	801ac24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b9f0:	4b2a      	ldr	r3, [pc, #168]	; (801ba9c <xTaskResumeAll+0x108>)
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d903      	bls.n	801ba00 <xTaskResumeAll+0x6c>
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9fc:	4a27      	ldr	r2, [pc, #156]	; (801ba9c <xTaskResumeAll+0x108>)
 801b9fe:	6013      	str	r3, [r2, #0]
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba04:	4613      	mov	r3, r2
 801ba06:	009b      	lsls	r3, r3, #2
 801ba08:	4413      	add	r3, r2
 801ba0a:	009b      	lsls	r3, r3, #2
 801ba0c:	4a24      	ldr	r2, [pc, #144]	; (801baa0 <xTaskResumeAll+0x10c>)
 801ba0e:	441a      	add	r2, r3
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	3304      	adds	r3, #4
 801ba14:	4619      	mov	r1, r3
 801ba16:	4610      	mov	r0, r2
 801ba18:	f7ff f8a7 	bl	801ab6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba20:	4b20      	ldr	r3, [pc, #128]	; (801baa4 <xTaskResumeAll+0x110>)
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba26:	429a      	cmp	r2, r3
 801ba28:	d302      	bcc.n	801ba30 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801ba2a:	4b1f      	ldr	r3, [pc, #124]	; (801baa8 <xTaskResumeAll+0x114>)
 801ba2c:	2201      	movs	r2, #1
 801ba2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ba30:	4b19      	ldr	r3, [pc, #100]	; (801ba98 <xTaskResumeAll+0x104>)
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d1cb      	bne.n	801b9d0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d001      	beq.n	801ba42 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801ba3e:	f000 fb03 	bl	801c048 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801ba42:	4b1a      	ldr	r3, [pc, #104]	; (801baac <xTaskResumeAll+0x118>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d010      	beq.n	801ba70 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801ba4e:	f000 f83f 	bl	801bad0 <xTaskIncrementTick>
 801ba52:	4603      	mov	r3, r0
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d002      	beq.n	801ba5e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 801ba58:	4b13      	ldr	r3, [pc, #76]	; (801baa8 <xTaskResumeAll+0x114>)
 801ba5a:	2201      	movs	r2, #1
 801ba5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	3b01      	subs	r3, #1
 801ba62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d1f1      	bne.n	801ba4e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801ba6a:	4b10      	ldr	r3, [pc, #64]	; (801baac <xTaskResumeAll+0x118>)
 801ba6c:	2200      	movs	r2, #0
 801ba6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801ba70:	4b0d      	ldr	r3, [pc, #52]	; (801baa8 <xTaskResumeAll+0x114>)
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d003      	beq.n	801ba80 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801ba78:	2301      	movs	r3, #1
 801ba7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801ba7c:	f000 ff20 	bl	801c8c0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801ba80:	f000 ff42 	bl	801c908 <vPortExitCritical>

	return xAlreadyYielded;
 801ba84:	68bb      	ldr	r3, [r7, #8]
}
 801ba86:	4618      	mov	r0, r3
 801ba88:	3710      	adds	r7, #16
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	bd80      	pop	{r7, pc}
 801ba8e:	bf00      	nop
 801ba90:	20001c1c 	.word	0x20001c1c
 801ba94:	20001bf4 	.word	0x20001bf4
 801ba98:	20001bb4 	.word	0x20001bb4
 801ba9c:	20001bfc 	.word	0x20001bfc
 801baa0:	20001724 	.word	0x20001724
 801baa4:	20001720 	.word	0x20001720
 801baa8:	20001c08 	.word	0x20001c08
 801baac:	20001c04 	.word	0x20001c04

0801bab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801bab0:	b480      	push	{r7}
 801bab2:	b083      	sub	sp, #12
 801bab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801bab6:	4b05      	ldr	r3, [pc, #20]	; (801bacc <xTaskGetTickCount+0x1c>)
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801babc:	687b      	ldr	r3, [r7, #4]
}
 801babe:	4618      	mov	r0, r3
 801bac0:	370c      	adds	r7, #12
 801bac2:	46bd      	mov	sp, r7
 801bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bac8:	4770      	bx	lr
 801baca:	bf00      	nop
 801bacc:	20001bf8 	.word	0x20001bf8

0801bad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b086      	sub	sp, #24
 801bad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801bad6:	2300      	movs	r3, #0
 801bad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bada:	4b4b      	ldr	r3, [pc, #300]	; (801bc08 <xTaskIncrementTick+0x138>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	f040 8087 	bne.w	801bbf2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801bae4:	4b49      	ldr	r3, [pc, #292]	; (801bc0c <xTaskIncrementTick+0x13c>)
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	3301      	adds	r3, #1
 801baea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801baec:	4a47      	ldr	r2, [pc, #284]	; (801bc0c <xTaskIncrementTick+0x13c>)
 801baee:	693b      	ldr	r3, [r7, #16]
 801baf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801baf2:	693b      	ldr	r3, [r7, #16]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d118      	bne.n	801bb2a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 801baf8:	4b45      	ldr	r3, [pc, #276]	; (801bc10 <xTaskIncrementTick+0x140>)
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d002      	beq.n	801bb08 <xTaskIncrementTick+0x38>
 801bb02:	f001 f821 	bl	801cb48 <ulSetInterruptMask>
 801bb06:	e7fe      	b.n	801bb06 <xTaskIncrementTick+0x36>
 801bb08:	4b41      	ldr	r3, [pc, #260]	; (801bc10 <xTaskIncrementTick+0x140>)
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	60fb      	str	r3, [r7, #12]
 801bb0e:	4b41      	ldr	r3, [pc, #260]	; (801bc14 <xTaskIncrementTick+0x144>)
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	4a3f      	ldr	r2, [pc, #252]	; (801bc10 <xTaskIncrementTick+0x140>)
 801bb14:	6013      	str	r3, [r2, #0]
 801bb16:	4a3f      	ldr	r2, [pc, #252]	; (801bc14 <xTaskIncrementTick+0x144>)
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	6013      	str	r3, [r2, #0]
 801bb1c:	4b3e      	ldr	r3, [pc, #248]	; (801bc18 <xTaskIncrementTick+0x148>)
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	3301      	adds	r3, #1
 801bb22:	4a3d      	ldr	r2, [pc, #244]	; (801bc18 <xTaskIncrementTick+0x148>)
 801bb24:	6013      	str	r3, [r2, #0]
 801bb26:	f000 fa8f 	bl	801c048 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801bb2a:	4b3c      	ldr	r3, [pc, #240]	; (801bc1c <xTaskIncrementTick+0x14c>)
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	693a      	ldr	r2, [r7, #16]
 801bb30:	429a      	cmp	r2, r3
 801bb32:	d349      	bcc.n	801bbc8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bb34:	4b36      	ldr	r3, [pc, #216]	; (801bc10 <xTaskIncrementTick+0x140>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d104      	bne.n	801bb48 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bb3e:	4b37      	ldr	r3, [pc, #220]	; (801bc1c <xTaskIncrementTick+0x14c>)
 801bb40:	f04f 32ff 	mov.w	r2, #4294967295
 801bb44:	601a      	str	r2, [r3, #0]
					break;
 801bb46:	e03f      	b.n	801bbc8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bb48:	4b31      	ldr	r3, [pc, #196]	; (801bc10 <xTaskIncrementTick+0x140>)
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	68db      	ldr	r3, [r3, #12]
 801bb4e:	68db      	ldr	r3, [r3, #12]
 801bb50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801bb52:	68bb      	ldr	r3, [r7, #8]
 801bb54:	685b      	ldr	r3, [r3, #4]
 801bb56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801bb58:	693a      	ldr	r2, [r7, #16]
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	429a      	cmp	r2, r3
 801bb5e:	d203      	bcs.n	801bb68 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801bb60:	4a2e      	ldr	r2, [pc, #184]	; (801bc1c <xTaskIncrementTick+0x14c>)
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801bb66:	e02f      	b.n	801bbc8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bb68:	68bb      	ldr	r3, [r7, #8]
 801bb6a:	3304      	adds	r3, #4
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	f7ff f859 	bl	801ac24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801bb72:	68bb      	ldr	r3, [r7, #8]
 801bb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d004      	beq.n	801bb84 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	3318      	adds	r3, #24
 801bb7e:	4618      	mov	r0, r3
 801bb80:	f7ff f850 	bl	801ac24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801bb84:	68bb      	ldr	r3, [r7, #8]
 801bb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb88:	4b25      	ldr	r3, [pc, #148]	; (801bc20 <xTaskIncrementTick+0x150>)
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	429a      	cmp	r2, r3
 801bb8e:	d903      	bls.n	801bb98 <xTaskIncrementTick+0xc8>
 801bb90:	68bb      	ldr	r3, [r7, #8]
 801bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb94:	4a22      	ldr	r2, [pc, #136]	; (801bc20 <xTaskIncrementTick+0x150>)
 801bb96:	6013      	str	r3, [r2, #0]
 801bb98:	68bb      	ldr	r3, [r7, #8]
 801bb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb9c:	4613      	mov	r3, r2
 801bb9e:	009b      	lsls	r3, r3, #2
 801bba0:	4413      	add	r3, r2
 801bba2:	009b      	lsls	r3, r3, #2
 801bba4:	4a1f      	ldr	r2, [pc, #124]	; (801bc24 <xTaskIncrementTick+0x154>)
 801bba6:	441a      	add	r2, r3
 801bba8:	68bb      	ldr	r3, [r7, #8]
 801bbaa:	3304      	adds	r3, #4
 801bbac:	4619      	mov	r1, r3
 801bbae:	4610      	mov	r0, r2
 801bbb0:	f7fe ffdb 	bl	801ab6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801bbb4:	68bb      	ldr	r3, [r7, #8]
 801bbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bbb8:	4b1b      	ldr	r3, [pc, #108]	; (801bc28 <xTaskIncrementTick+0x158>)
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bbbe:	429a      	cmp	r2, r3
 801bbc0:	d3b8      	bcc.n	801bb34 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801bbc2:	2301      	movs	r3, #1
 801bbc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bbc6:	e7b5      	b.n	801bb34 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801bbc8:	4b17      	ldr	r3, [pc, #92]	; (801bc28 <xTaskIncrementTick+0x158>)
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bbce:	4915      	ldr	r1, [pc, #84]	; (801bc24 <xTaskIncrementTick+0x154>)
 801bbd0:	4613      	mov	r3, r2
 801bbd2:	009b      	lsls	r3, r3, #2
 801bbd4:	4413      	add	r3, r2
 801bbd6:	009b      	lsls	r3, r3, #2
 801bbd8:	440b      	add	r3, r1
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	2b01      	cmp	r3, #1
 801bbde:	d901      	bls.n	801bbe4 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 801bbe0:	2301      	movs	r3, #1
 801bbe2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801bbe4:	4b11      	ldr	r3, [pc, #68]	; (801bc2c <xTaskIncrementTick+0x15c>)
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d007      	beq.n	801bbfc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801bbec:	2301      	movs	r3, #1
 801bbee:	617b      	str	r3, [r7, #20]
 801bbf0:	e004      	b.n	801bbfc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801bbf2:	4b0f      	ldr	r3, [pc, #60]	; (801bc30 <xTaskIncrementTick+0x160>)
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	4a0d      	ldr	r2, [pc, #52]	; (801bc30 <xTaskIncrementTick+0x160>)
 801bbfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801bbfc:	697b      	ldr	r3, [r7, #20]
}
 801bbfe:	4618      	mov	r0, r3
 801bc00:	3718      	adds	r7, #24
 801bc02:	46bd      	mov	sp, r7
 801bc04:	bd80      	pop	{r7, pc}
 801bc06:	bf00      	nop
 801bc08:	20001c1c 	.word	0x20001c1c
 801bc0c:	20001bf8 	.word	0x20001bf8
 801bc10:	20001bac 	.word	0x20001bac
 801bc14:	20001bb0 	.word	0x20001bb0
 801bc18:	20001c0c 	.word	0x20001c0c
 801bc1c:	20001c14 	.word	0x20001c14
 801bc20:	20001bfc 	.word	0x20001bfc
 801bc24:	20001724 	.word	0x20001724
 801bc28:	20001720 	.word	0x20001720
 801bc2c:	20001c08 	.word	0x20001c08
 801bc30:	20001c04 	.word	0x20001c04

0801bc34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801bc34:	b580      	push	{r7, lr}
 801bc36:	b082      	sub	sp, #8
 801bc38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801bc3a:	4b23      	ldr	r3, [pc, #140]	; (801bcc8 <vTaskSwitchContext+0x94>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d003      	beq.n	801bc4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801bc42:	4b22      	ldr	r3, [pc, #136]	; (801bccc <vTaskSwitchContext+0x98>)
 801bc44:	2201      	movs	r2, #1
 801bc46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801bc48:	e039      	b.n	801bcbe <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 801bc4a:	4b20      	ldr	r3, [pc, #128]	; (801bccc <vTaskSwitchContext+0x98>)
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bc50:	4b1f      	ldr	r3, [pc, #124]	; (801bcd0 <vTaskSwitchContext+0x9c>)
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	607b      	str	r3, [r7, #4]
 801bc56:	e008      	b.n	801bc6a <vTaskSwitchContext+0x36>
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d102      	bne.n	801bc64 <vTaskSwitchContext+0x30>
 801bc5e:	f000 ff73 	bl	801cb48 <ulSetInterruptMask>
 801bc62:	e7fe      	b.n	801bc62 <vTaskSwitchContext+0x2e>
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	3b01      	subs	r3, #1
 801bc68:	607b      	str	r3, [r7, #4]
 801bc6a:	491a      	ldr	r1, [pc, #104]	; (801bcd4 <vTaskSwitchContext+0xa0>)
 801bc6c:	687a      	ldr	r2, [r7, #4]
 801bc6e:	4613      	mov	r3, r2
 801bc70:	009b      	lsls	r3, r3, #2
 801bc72:	4413      	add	r3, r2
 801bc74:	009b      	lsls	r3, r3, #2
 801bc76:	440b      	add	r3, r1
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d0ec      	beq.n	801bc58 <vTaskSwitchContext+0x24>
 801bc7e:	687a      	ldr	r2, [r7, #4]
 801bc80:	4613      	mov	r3, r2
 801bc82:	009b      	lsls	r3, r3, #2
 801bc84:	4413      	add	r3, r2
 801bc86:	009b      	lsls	r3, r3, #2
 801bc88:	4a12      	ldr	r2, [pc, #72]	; (801bcd4 <vTaskSwitchContext+0xa0>)
 801bc8a:	4413      	add	r3, r2
 801bc8c:	603b      	str	r3, [r7, #0]
 801bc8e:	683b      	ldr	r3, [r7, #0]
 801bc90:	685b      	ldr	r3, [r3, #4]
 801bc92:	685a      	ldr	r2, [r3, #4]
 801bc94:	683b      	ldr	r3, [r7, #0]
 801bc96:	605a      	str	r2, [r3, #4]
 801bc98:	683b      	ldr	r3, [r7, #0]
 801bc9a:	685a      	ldr	r2, [r3, #4]
 801bc9c:	683b      	ldr	r3, [r7, #0]
 801bc9e:	3308      	adds	r3, #8
 801bca0:	429a      	cmp	r2, r3
 801bca2:	d104      	bne.n	801bcae <vTaskSwitchContext+0x7a>
 801bca4:	683b      	ldr	r3, [r7, #0]
 801bca6:	685b      	ldr	r3, [r3, #4]
 801bca8:	685a      	ldr	r2, [r3, #4]
 801bcaa:	683b      	ldr	r3, [r7, #0]
 801bcac:	605a      	str	r2, [r3, #4]
 801bcae:	683b      	ldr	r3, [r7, #0]
 801bcb0:	685b      	ldr	r3, [r3, #4]
 801bcb2:	68db      	ldr	r3, [r3, #12]
 801bcb4:	4a08      	ldr	r2, [pc, #32]	; (801bcd8 <vTaskSwitchContext+0xa4>)
 801bcb6:	6013      	str	r3, [r2, #0]
 801bcb8:	4a05      	ldr	r2, [pc, #20]	; (801bcd0 <vTaskSwitchContext+0x9c>)
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	6013      	str	r3, [r2, #0]
}
 801bcbe:	bf00      	nop
 801bcc0:	3708      	adds	r7, #8
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	bd80      	pop	{r7, pc}
 801bcc6:	bf00      	nop
 801bcc8:	20001c1c 	.word	0x20001c1c
 801bccc:	20001c08 	.word	0x20001c08
 801bcd0:	20001bfc 	.word	0x20001bfc
 801bcd4:	20001724 	.word	0x20001724
 801bcd8:	20001720 	.word	0x20001720

0801bcdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801bcdc:	b580      	push	{r7, lr}
 801bcde:	b082      	sub	sp, #8
 801bce0:	af00      	add	r7, sp, #0
 801bce2:	6078      	str	r0, [r7, #4]
 801bce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d102      	bne.n	801bcf2 <vTaskPlaceOnEventList+0x16>
 801bcec:	f000 ff2c 	bl	801cb48 <ulSetInterruptMask>
 801bcf0:	e7fe      	b.n	801bcf0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801bcf2:	4b07      	ldr	r3, [pc, #28]	; (801bd10 <vTaskPlaceOnEventList+0x34>)
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	3318      	adds	r3, #24
 801bcf8:	4619      	mov	r1, r3
 801bcfa:	6878      	ldr	r0, [r7, #4]
 801bcfc:	f7fe ff59 	bl	801abb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801bd00:	2101      	movs	r1, #1
 801bd02:	6838      	ldr	r0, [r7, #0]
 801bd04:	f000 fa3c 	bl	801c180 <prvAddCurrentTaskToDelayedList>
}
 801bd08:	bf00      	nop
 801bd0a:	3708      	adds	r7, #8
 801bd0c:	46bd      	mov	sp, r7
 801bd0e:	bd80      	pop	{r7, pc}
 801bd10:	20001720 	.word	0x20001720

0801bd14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801bd14:	b580      	push	{r7, lr}
 801bd16:	b084      	sub	sp, #16
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	60f8      	str	r0, [r7, #12]
 801bd1c:	60b9      	str	r1, [r7, #8]
 801bd1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d102      	bne.n	801bd2c <vTaskPlaceOnEventListRestricted+0x18>
 801bd26:	f000 ff0f 	bl	801cb48 <ulSetInterruptMask>
 801bd2a:	e7fe      	b.n	801bd2a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801bd2c:	4b0a      	ldr	r3, [pc, #40]	; (801bd58 <vTaskPlaceOnEventListRestricted+0x44>)
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	3318      	adds	r3, #24
 801bd32:	4619      	mov	r1, r3
 801bd34:	68f8      	ldr	r0, [r7, #12]
 801bd36:	f7fe ff18 	bl	801ab6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d002      	beq.n	801bd46 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 801bd40:	f04f 33ff 	mov.w	r3, #4294967295
 801bd44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801bd46:	6879      	ldr	r1, [r7, #4]
 801bd48:	68b8      	ldr	r0, [r7, #8]
 801bd4a:	f000 fa19 	bl	801c180 <prvAddCurrentTaskToDelayedList>
	}
 801bd4e:	bf00      	nop
 801bd50:	3710      	adds	r7, #16
 801bd52:	46bd      	mov	sp, r7
 801bd54:	bd80      	pop	{r7, pc}
 801bd56:	bf00      	nop
 801bd58:	20001720 	.word	0x20001720

0801bd5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b084      	sub	sp, #16
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	68db      	ldr	r3, [r3, #12]
 801bd68:	68db      	ldr	r3, [r3, #12]
 801bd6a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801bd6c:	68bb      	ldr	r3, [r7, #8]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d102      	bne.n	801bd78 <xTaskRemoveFromEventList+0x1c>
 801bd72:	f000 fee9 	bl	801cb48 <ulSetInterruptMask>
 801bd76:	e7fe      	b.n	801bd76 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	3318      	adds	r3, #24
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f7fe ff51 	bl	801ac24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bd82:	4b1e      	ldr	r3, [pc, #120]	; (801bdfc <xTaskRemoveFromEventList+0xa0>)
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d11d      	bne.n	801bdc6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801bd8a:	68bb      	ldr	r3, [r7, #8]
 801bd8c:	3304      	adds	r3, #4
 801bd8e:	4618      	mov	r0, r3
 801bd90:	f7fe ff48 	bl	801ac24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801bd94:	68bb      	ldr	r3, [r7, #8]
 801bd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd98:	4b19      	ldr	r3, [pc, #100]	; (801be00 <xTaskRemoveFromEventList+0xa4>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	429a      	cmp	r2, r3
 801bd9e:	d903      	bls.n	801bda8 <xTaskRemoveFromEventList+0x4c>
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bda4:	4a16      	ldr	r2, [pc, #88]	; (801be00 <xTaskRemoveFromEventList+0xa4>)
 801bda6:	6013      	str	r3, [r2, #0]
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bdac:	4613      	mov	r3, r2
 801bdae:	009b      	lsls	r3, r3, #2
 801bdb0:	4413      	add	r3, r2
 801bdb2:	009b      	lsls	r3, r3, #2
 801bdb4:	4a13      	ldr	r2, [pc, #76]	; (801be04 <xTaskRemoveFromEventList+0xa8>)
 801bdb6:	441a      	add	r2, r3
 801bdb8:	68bb      	ldr	r3, [r7, #8]
 801bdba:	3304      	adds	r3, #4
 801bdbc:	4619      	mov	r1, r3
 801bdbe:	4610      	mov	r0, r2
 801bdc0:	f7fe fed3 	bl	801ab6a <vListInsertEnd>
 801bdc4:	e005      	b.n	801bdd2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801bdc6:	68bb      	ldr	r3, [r7, #8]
 801bdc8:	3318      	adds	r3, #24
 801bdca:	4619      	mov	r1, r3
 801bdcc:	480e      	ldr	r0, [pc, #56]	; (801be08 <xTaskRemoveFromEventList+0xac>)
 801bdce:	f7fe fecc 	bl	801ab6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801bdd2:	68bb      	ldr	r3, [r7, #8]
 801bdd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bdd6:	4b0d      	ldr	r3, [pc, #52]	; (801be0c <xTaskRemoveFromEventList+0xb0>)
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bddc:	429a      	cmp	r2, r3
 801bdde:	d905      	bls.n	801bdec <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801bde0:	2301      	movs	r3, #1
 801bde2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801bde4:	4b0a      	ldr	r3, [pc, #40]	; (801be10 <xTaskRemoveFromEventList+0xb4>)
 801bde6:	2201      	movs	r2, #1
 801bde8:	601a      	str	r2, [r3, #0]
 801bdea:	e001      	b.n	801bdf0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 801bdec:	2300      	movs	r3, #0
 801bdee:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801bdf0:	68fb      	ldr	r3, [r7, #12]
}
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	3710      	adds	r7, #16
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	bd80      	pop	{r7, pc}
 801bdfa:	bf00      	nop
 801bdfc:	20001c1c 	.word	0x20001c1c
 801be00:	20001bfc 	.word	0x20001bfc
 801be04:	20001724 	.word	0x20001724
 801be08:	20001bb4 	.word	0x20001bb4
 801be0c:	20001720 	.word	0x20001720
 801be10:	20001c08 	.word	0x20001c08

0801be14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801be14:	b480      	push	{r7}
 801be16:	b083      	sub	sp, #12
 801be18:	af00      	add	r7, sp, #0
 801be1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801be1c:	4b06      	ldr	r3, [pc, #24]	; (801be38 <vTaskInternalSetTimeOutState+0x24>)
 801be1e:	681a      	ldr	r2, [r3, #0]
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801be24:	4b05      	ldr	r3, [pc, #20]	; (801be3c <vTaskInternalSetTimeOutState+0x28>)
 801be26:	681a      	ldr	r2, [r3, #0]
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	605a      	str	r2, [r3, #4]
}
 801be2c:	bf00      	nop
 801be2e:	370c      	adds	r7, #12
 801be30:	46bd      	mov	sp, r7
 801be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be36:	4770      	bx	lr
 801be38:	20001c0c 	.word	0x20001c0c
 801be3c:	20001bf8 	.word	0x20001bf8

0801be40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b086      	sub	sp, #24
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
 801be48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d102      	bne.n	801be56 <xTaskCheckForTimeOut+0x16>
 801be50:	f000 fe7a 	bl	801cb48 <ulSetInterruptMask>
 801be54:	e7fe      	b.n	801be54 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d102      	bne.n	801be62 <xTaskCheckForTimeOut+0x22>
 801be5c:	f000 fe74 	bl	801cb48 <ulSetInterruptMask>
 801be60:	e7fe      	b.n	801be60 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 801be62:	f000 fd3f 	bl	801c8e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801be66:	4b1d      	ldr	r3, [pc, #116]	; (801bedc <xTaskCheckForTimeOut+0x9c>)
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	685b      	ldr	r3, [r3, #4]
 801be70:	693a      	ldr	r2, [r7, #16]
 801be72:	1ad3      	subs	r3, r2, r3
 801be74:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801be76:	683b      	ldr	r3, [r7, #0]
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be7e:	d102      	bne.n	801be86 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801be80:	2300      	movs	r3, #0
 801be82:	617b      	str	r3, [r7, #20]
 801be84:	e023      	b.n	801bece <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	681a      	ldr	r2, [r3, #0]
 801be8a:	4b15      	ldr	r3, [pc, #84]	; (801bee0 <xTaskCheckForTimeOut+0xa0>)
 801be8c:	681b      	ldr	r3, [r3, #0]
 801be8e:	429a      	cmp	r2, r3
 801be90:	d007      	beq.n	801bea2 <xTaskCheckForTimeOut+0x62>
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	685b      	ldr	r3, [r3, #4]
 801be96:	693a      	ldr	r2, [r7, #16]
 801be98:	429a      	cmp	r2, r3
 801be9a:	d302      	bcc.n	801bea2 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801be9c:	2301      	movs	r3, #1
 801be9e:	617b      	str	r3, [r7, #20]
 801bea0:	e015      	b.n	801bece <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	68fa      	ldr	r2, [r7, #12]
 801bea8:	429a      	cmp	r2, r3
 801beaa:	d20b      	bcs.n	801bec4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801beac:	683b      	ldr	r3, [r7, #0]
 801beae:	681a      	ldr	r2, [r3, #0]
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	1ad2      	subs	r2, r2, r3
 801beb4:	683b      	ldr	r3, [r7, #0]
 801beb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801beb8:	6878      	ldr	r0, [r7, #4]
 801beba:	f7ff ffab 	bl	801be14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801bebe:	2300      	movs	r3, #0
 801bec0:	617b      	str	r3, [r7, #20]
 801bec2:	e004      	b.n	801bece <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 801bec4:	683b      	ldr	r3, [r7, #0]
 801bec6:	2200      	movs	r2, #0
 801bec8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801beca:	2301      	movs	r3, #1
 801becc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801bece:	f000 fd1b 	bl	801c908 <vPortExitCritical>

	return xReturn;
 801bed2:	697b      	ldr	r3, [r7, #20]
}
 801bed4:	4618      	mov	r0, r3
 801bed6:	3718      	adds	r7, #24
 801bed8:	46bd      	mov	sp, r7
 801beda:	bd80      	pop	{r7, pc}
 801bedc:	20001bf8 	.word	0x20001bf8
 801bee0:	20001c0c 	.word	0x20001c0c

0801bee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801bee4:	b480      	push	{r7}
 801bee6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801bee8:	4b03      	ldr	r3, [pc, #12]	; (801bef8 <vTaskMissedYield+0x14>)
 801beea:	2201      	movs	r2, #1
 801beec:	601a      	str	r2, [r3, #0]
}
 801beee:	bf00      	nop
 801bef0:	46bd      	mov	sp, r7
 801bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef6:	4770      	bx	lr
 801bef8:	20001c08 	.word	0x20001c08

0801befc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b082      	sub	sp, #8
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801bf04:	f000 f84a 	bl	801bf9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801bf08:	4b03      	ldr	r3, [pc, #12]	; (801bf18 <prvIdleTask+0x1c>)
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	2b01      	cmp	r3, #1
 801bf0e:	d9f9      	bls.n	801bf04 <prvIdleTask+0x8>
			{
				taskYIELD();
 801bf10:	f000 fcd6 	bl	801c8c0 <vPortYield>
		prvCheckTasksWaitingTermination();
 801bf14:	e7f6      	b.n	801bf04 <prvIdleTask+0x8>
 801bf16:	bf00      	nop
 801bf18:	20001724 	.word	0x20001724

0801bf1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801bf1c:	b580      	push	{r7, lr}
 801bf1e:	b082      	sub	sp, #8
 801bf20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bf22:	2300      	movs	r3, #0
 801bf24:	607b      	str	r3, [r7, #4]
 801bf26:	e00c      	b.n	801bf42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801bf28:	687a      	ldr	r2, [r7, #4]
 801bf2a:	4613      	mov	r3, r2
 801bf2c:	009b      	lsls	r3, r3, #2
 801bf2e:	4413      	add	r3, r2
 801bf30:	009b      	lsls	r3, r3, #2
 801bf32:	4a12      	ldr	r2, [pc, #72]	; (801bf7c <prvInitialiseTaskLists+0x60>)
 801bf34:	4413      	add	r3, r2
 801bf36:	4618      	mov	r0, r3
 801bf38:	f7fe fdea 	bl	801ab10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	3301      	adds	r3, #1
 801bf40:	607b      	str	r3, [r7, #4]
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	2b37      	cmp	r3, #55	; 0x37
 801bf46:	d9ef      	bls.n	801bf28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801bf48:	480d      	ldr	r0, [pc, #52]	; (801bf80 <prvInitialiseTaskLists+0x64>)
 801bf4a:	f7fe fde1 	bl	801ab10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801bf4e:	480d      	ldr	r0, [pc, #52]	; (801bf84 <prvInitialiseTaskLists+0x68>)
 801bf50:	f7fe fdde 	bl	801ab10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801bf54:	480c      	ldr	r0, [pc, #48]	; (801bf88 <prvInitialiseTaskLists+0x6c>)
 801bf56:	f7fe fddb 	bl	801ab10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801bf5a:	480c      	ldr	r0, [pc, #48]	; (801bf8c <prvInitialiseTaskLists+0x70>)
 801bf5c:	f7fe fdd8 	bl	801ab10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801bf60:	480b      	ldr	r0, [pc, #44]	; (801bf90 <prvInitialiseTaskLists+0x74>)
 801bf62:	f7fe fdd5 	bl	801ab10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801bf66:	4b0b      	ldr	r3, [pc, #44]	; (801bf94 <prvInitialiseTaskLists+0x78>)
 801bf68:	4a05      	ldr	r2, [pc, #20]	; (801bf80 <prvInitialiseTaskLists+0x64>)
 801bf6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801bf6c:	4b0a      	ldr	r3, [pc, #40]	; (801bf98 <prvInitialiseTaskLists+0x7c>)
 801bf6e:	4a05      	ldr	r2, [pc, #20]	; (801bf84 <prvInitialiseTaskLists+0x68>)
 801bf70:	601a      	str	r2, [r3, #0]
}
 801bf72:	bf00      	nop
 801bf74:	3708      	adds	r7, #8
 801bf76:	46bd      	mov	sp, r7
 801bf78:	bd80      	pop	{r7, pc}
 801bf7a:	bf00      	nop
 801bf7c:	20001724 	.word	0x20001724
 801bf80:	20001b84 	.word	0x20001b84
 801bf84:	20001b98 	.word	0x20001b98
 801bf88:	20001bb4 	.word	0x20001bb4
 801bf8c:	20001bc8 	.word	0x20001bc8
 801bf90:	20001be0 	.word	0x20001be0
 801bf94:	20001bac 	.word	0x20001bac
 801bf98:	20001bb0 	.word	0x20001bb0

0801bf9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801bf9c:	b580      	push	{r7, lr}
 801bf9e:	b082      	sub	sp, #8
 801bfa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bfa2:	e019      	b.n	801bfd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801bfa4:	f000 fc9e 	bl	801c8e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bfa8:	4b10      	ldr	r3, [pc, #64]	; (801bfec <prvCheckTasksWaitingTermination+0x50>)
 801bfaa:	68db      	ldr	r3, [r3, #12]
 801bfac:	68db      	ldr	r3, [r3, #12]
 801bfae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	3304      	adds	r3, #4
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	f7fe fe35 	bl	801ac24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801bfba:	4b0d      	ldr	r3, [pc, #52]	; (801bff0 <prvCheckTasksWaitingTermination+0x54>)
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	3b01      	subs	r3, #1
 801bfc0:	4a0b      	ldr	r2, [pc, #44]	; (801bff0 <prvCheckTasksWaitingTermination+0x54>)
 801bfc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801bfc4:	4b0b      	ldr	r3, [pc, #44]	; (801bff4 <prvCheckTasksWaitingTermination+0x58>)
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	3b01      	subs	r3, #1
 801bfca:	4a0a      	ldr	r2, [pc, #40]	; (801bff4 <prvCheckTasksWaitingTermination+0x58>)
 801bfcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801bfce:	f000 fc9b 	bl	801c908 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801bfd2:	6878      	ldr	r0, [r7, #4]
 801bfd4:	f000 f810 	bl	801bff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bfd8:	4b06      	ldr	r3, [pc, #24]	; (801bff4 <prvCheckTasksWaitingTermination+0x58>)
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d1e1      	bne.n	801bfa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801bfe0:	bf00      	nop
 801bfe2:	bf00      	nop
 801bfe4:	3708      	adds	r7, #8
 801bfe6:	46bd      	mov	sp, r7
 801bfe8:	bd80      	pop	{r7, pc}
 801bfea:	bf00      	nop
 801bfec:	20001bc8 	.word	0x20001bc8
 801bff0:	20001bf4 	.word	0x20001bf4
 801bff4:	20001bdc 	.word	0x20001bdc

0801bff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801bff8:	b580      	push	{r7, lr}
 801bffa:	b082      	sub	sp, #8
 801bffc:	af00      	add	r7, sp, #0
 801bffe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801c006:	2b00      	cmp	r3, #0
 801c008:	d108      	bne.n	801c01c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c00e:	4618      	mov	r0, r3
 801c010:	f000 feae 	bl	801cd70 <vPortFree>
				vPortFree( pxTCB );
 801c014:	6878      	ldr	r0, [r7, #4]
 801c016:	f000 feab 	bl	801cd70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801c01a:	e010      	b.n	801c03e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801c022:	2b01      	cmp	r3, #1
 801c024:	d103      	bne.n	801c02e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801c026:	6878      	ldr	r0, [r7, #4]
 801c028:	f000 fea2 	bl	801cd70 <vPortFree>
	}
 801c02c:	e007      	b.n	801c03e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801c034:	2b02      	cmp	r3, #2
 801c036:	d002      	beq.n	801c03e <prvDeleteTCB+0x46>
 801c038:	f000 fd86 	bl	801cb48 <ulSetInterruptMask>
 801c03c:	e7fe      	b.n	801c03c <prvDeleteTCB+0x44>
	}
 801c03e:	bf00      	nop
 801c040:	3708      	adds	r7, #8
 801c042:	46bd      	mov	sp, r7
 801c044:	bd80      	pop	{r7, pc}
	...

0801c048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801c048:	b480      	push	{r7}
 801c04a:	b083      	sub	sp, #12
 801c04c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801c04e:	4b0c      	ldr	r3, [pc, #48]	; (801c080 <prvResetNextTaskUnblockTime+0x38>)
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d104      	bne.n	801c062 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801c058:	4b0a      	ldr	r3, [pc, #40]	; (801c084 <prvResetNextTaskUnblockTime+0x3c>)
 801c05a:	f04f 32ff 	mov.w	r2, #4294967295
 801c05e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801c060:	e008      	b.n	801c074 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c062:	4b07      	ldr	r3, [pc, #28]	; (801c080 <prvResetNextTaskUnblockTime+0x38>)
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	68db      	ldr	r3, [r3, #12]
 801c068:	68db      	ldr	r3, [r3, #12]
 801c06a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	685b      	ldr	r3, [r3, #4]
 801c070:	4a04      	ldr	r2, [pc, #16]	; (801c084 <prvResetNextTaskUnblockTime+0x3c>)
 801c072:	6013      	str	r3, [r2, #0]
}
 801c074:	bf00      	nop
 801c076:	370c      	adds	r7, #12
 801c078:	46bd      	mov	sp, r7
 801c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c07e:	4770      	bx	lr
 801c080:	20001bac 	.word	0x20001bac
 801c084:	20001c14 	.word	0x20001c14

0801c088 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801c088:	b480      	push	{r7}
 801c08a:	b083      	sub	sp, #12
 801c08c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801c08e:	4b0b      	ldr	r3, [pc, #44]	; (801c0bc <xTaskGetSchedulerState+0x34>)
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d102      	bne.n	801c09c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801c096:	2301      	movs	r3, #1
 801c098:	607b      	str	r3, [r7, #4]
 801c09a:	e008      	b.n	801c0ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c09c:	4b08      	ldr	r3, [pc, #32]	; (801c0c0 <xTaskGetSchedulerState+0x38>)
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d102      	bne.n	801c0aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801c0a4:	2302      	movs	r3, #2
 801c0a6:	607b      	str	r3, [r7, #4]
 801c0a8:	e001      	b.n	801c0ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801c0ae:	687b      	ldr	r3, [r7, #4]
	}
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	370c      	adds	r7, #12
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ba:	4770      	bx	lr
 801c0bc:	20001c00 	.word	0x20001c00
 801c0c0:	20001c1c 	.word	0x20001c1c

0801c0c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801c0c4:	b580      	push	{r7, lr}
 801c0c6:	b084      	sub	sp, #16
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d046      	beq.n	801c168 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801c0da:	4b26      	ldr	r3, [pc, #152]	; (801c174 <xTaskPriorityDisinherit+0xb0>)
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	68ba      	ldr	r2, [r7, #8]
 801c0e0:	429a      	cmp	r2, r3
 801c0e2:	d002      	beq.n	801c0ea <xTaskPriorityDisinherit+0x26>
 801c0e4:	f000 fd30 	bl	801cb48 <ulSetInterruptMask>
 801c0e8:	e7fe      	b.n	801c0e8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801c0ea:	68bb      	ldr	r3, [r7, #8]
 801c0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d102      	bne.n	801c0f8 <xTaskPriorityDisinherit+0x34>
 801c0f2:	f000 fd29 	bl	801cb48 <ulSetInterruptMask>
 801c0f6:	e7fe      	b.n	801c0f6 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c0fc:	1e5a      	subs	r2, r3, #1
 801c0fe:	68bb      	ldr	r3, [r7, #8]
 801c100:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801c102:	68bb      	ldr	r3, [r7, #8]
 801c104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c106:	68bb      	ldr	r3, [r7, #8]
 801c108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c10a:	429a      	cmp	r2, r3
 801c10c:	d02c      	beq.n	801c168 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801c10e:	68bb      	ldr	r3, [r7, #8]
 801c110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c112:	2b00      	cmp	r3, #0
 801c114:	d128      	bne.n	801c168 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c116:	68bb      	ldr	r3, [r7, #8]
 801c118:	3304      	adds	r3, #4
 801c11a:	4618      	mov	r0, r3
 801c11c:	f7fe fd82 	bl	801ac24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801c120:	68bb      	ldr	r3, [r7, #8]
 801c122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c124:	68bb      	ldr	r3, [r7, #8]
 801c126:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c128:	68bb      	ldr	r3, [r7, #8]
 801c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c12c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801c130:	68bb      	ldr	r3, [r7, #8]
 801c132:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801c134:	68bb      	ldr	r3, [r7, #8]
 801c136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c138:	4b0f      	ldr	r3, [pc, #60]	; (801c178 <xTaskPriorityDisinherit+0xb4>)
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	429a      	cmp	r2, r3
 801c13e:	d903      	bls.n	801c148 <xTaskPriorityDisinherit+0x84>
 801c140:	68bb      	ldr	r3, [r7, #8]
 801c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c144:	4a0c      	ldr	r2, [pc, #48]	; (801c178 <xTaskPriorityDisinherit+0xb4>)
 801c146:	6013      	str	r3, [r2, #0]
 801c148:	68bb      	ldr	r3, [r7, #8]
 801c14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c14c:	4613      	mov	r3, r2
 801c14e:	009b      	lsls	r3, r3, #2
 801c150:	4413      	add	r3, r2
 801c152:	009b      	lsls	r3, r3, #2
 801c154:	4a09      	ldr	r2, [pc, #36]	; (801c17c <xTaskPriorityDisinherit+0xb8>)
 801c156:	441a      	add	r2, r3
 801c158:	68bb      	ldr	r3, [r7, #8]
 801c15a:	3304      	adds	r3, #4
 801c15c:	4619      	mov	r1, r3
 801c15e:	4610      	mov	r0, r2
 801c160:	f7fe fd03 	bl	801ab6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801c164:	2301      	movs	r3, #1
 801c166:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801c168:	68fb      	ldr	r3, [r7, #12]
	}
 801c16a:	4618      	mov	r0, r3
 801c16c:	3710      	adds	r7, #16
 801c16e:	46bd      	mov	sp, r7
 801c170:	bd80      	pop	{r7, pc}
 801c172:	bf00      	nop
 801c174:	20001720 	.word	0x20001720
 801c178:	20001bfc 	.word	0x20001bfc
 801c17c:	20001724 	.word	0x20001724

0801c180 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b084      	sub	sp, #16
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
 801c188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801c18a:	4b21      	ldr	r3, [pc, #132]	; (801c210 <prvAddCurrentTaskToDelayedList+0x90>)
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c190:	4b20      	ldr	r3, [pc, #128]	; (801c214 <prvAddCurrentTaskToDelayedList+0x94>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	3304      	adds	r3, #4
 801c196:	4618      	mov	r0, r3
 801c198:	f7fe fd44 	bl	801ac24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1a2:	d10a      	bne.n	801c1ba <prvAddCurrentTaskToDelayedList+0x3a>
 801c1a4:	683b      	ldr	r3, [r7, #0]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d007      	beq.n	801c1ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c1aa:	4b1a      	ldr	r3, [pc, #104]	; (801c214 <prvAddCurrentTaskToDelayedList+0x94>)
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	3304      	adds	r3, #4
 801c1b0:	4619      	mov	r1, r3
 801c1b2:	4819      	ldr	r0, [pc, #100]	; (801c218 <prvAddCurrentTaskToDelayedList+0x98>)
 801c1b4:	f7fe fcd9 	bl	801ab6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801c1b8:	e026      	b.n	801c208 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801c1ba:	68fa      	ldr	r2, [r7, #12]
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	4413      	add	r3, r2
 801c1c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801c1c2:	4b14      	ldr	r3, [pc, #80]	; (801c214 <prvAddCurrentTaskToDelayedList+0x94>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	68ba      	ldr	r2, [r7, #8]
 801c1c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801c1ca:	68ba      	ldr	r2, [r7, #8]
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	d209      	bcs.n	801c1e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c1d2:	4b12      	ldr	r3, [pc, #72]	; (801c21c <prvAddCurrentTaskToDelayedList+0x9c>)
 801c1d4:	681a      	ldr	r2, [r3, #0]
 801c1d6:	4b0f      	ldr	r3, [pc, #60]	; (801c214 <prvAddCurrentTaskToDelayedList+0x94>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	3304      	adds	r3, #4
 801c1dc:	4619      	mov	r1, r3
 801c1de:	4610      	mov	r0, r2
 801c1e0:	f7fe fce7 	bl	801abb2 <vListInsert>
}
 801c1e4:	e010      	b.n	801c208 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c1e6:	4b0e      	ldr	r3, [pc, #56]	; (801c220 <prvAddCurrentTaskToDelayedList+0xa0>)
 801c1e8:	681a      	ldr	r2, [r3, #0]
 801c1ea:	4b0a      	ldr	r3, [pc, #40]	; (801c214 <prvAddCurrentTaskToDelayedList+0x94>)
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	3304      	adds	r3, #4
 801c1f0:	4619      	mov	r1, r3
 801c1f2:	4610      	mov	r0, r2
 801c1f4:	f7fe fcdd 	bl	801abb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801c1f8:	4b0a      	ldr	r3, [pc, #40]	; (801c224 <prvAddCurrentTaskToDelayedList+0xa4>)
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	68ba      	ldr	r2, [r7, #8]
 801c1fe:	429a      	cmp	r2, r3
 801c200:	d202      	bcs.n	801c208 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801c202:	4a08      	ldr	r2, [pc, #32]	; (801c224 <prvAddCurrentTaskToDelayedList+0xa4>)
 801c204:	68bb      	ldr	r3, [r7, #8]
 801c206:	6013      	str	r3, [r2, #0]
}
 801c208:	bf00      	nop
 801c20a:	3710      	adds	r7, #16
 801c20c:	46bd      	mov	sp, r7
 801c20e:	bd80      	pop	{r7, pc}
 801c210:	20001bf8 	.word	0x20001bf8
 801c214:	20001720 	.word	0x20001720
 801c218:	20001be0 	.word	0x20001be0
 801c21c:	20001bb0 	.word	0x20001bb0
 801c220:	20001bac 	.word	0x20001bac
 801c224:	20001c14 	.word	0x20001c14

0801c228 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801c228:	b580      	push	{r7, lr}
 801c22a:	b088      	sub	sp, #32
 801c22c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801c22e:	2300      	movs	r3, #0
 801c230:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801c232:	f000 fac7 	bl	801c7c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801c236:	4b18      	ldr	r3, [pc, #96]	; (801c298 <xTimerCreateTimerTask+0x70>)
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d020      	beq.n	801c280 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801c23e:	2300      	movs	r3, #0
 801c240:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801c242:	2300      	movs	r3, #0
 801c244:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801c246:	463a      	mov	r2, r7
 801c248:	1d39      	adds	r1, r7, #4
 801c24a:	f107 0308 	add.w	r3, r7, #8
 801c24e:	4618      	mov	r0, r3
 801c250:	f7fe fc44 	bl	801aadc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801c254:	6839      	ldr	r1, [r7, #0]
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	68ba      	ldr	r2, [r7, #8]
 801c25a:	9202      	str	r2, [sp, #8]
 801c25c:	9301      	str	r3, [sp, #4]
 801c25e:	2302      	movs	r3, #2
 801c260:	9300      	str	r3, [sp, #0]
 801c262:	2300      	movs	r3, #0
 801c264:	460a      	mov	r2, r1
 801c266:	490d      	ldr	r1, [pc, #52]	; (801c29c <xTimerCreateTimerTask+0x74>)
 801c268:	480d      	ldr	r0, [pc, #52]	; (801c2a0 <xTimerCreateTimerTask+0x78>)
 801c26a:	f7ff f931 	bl	801b4d0 <xTaskCreateStatic>
 801c26e:	4603      	mov	r3, r0
 801c270:	4a0c      	ldr	r2, [pc, #48]	; (801c2a4 <xTimerCreateTimerTask+0x7c>)
 801c272:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801c274:	4b0b      	ldr	r3, [pc, #44]	; (801c2a4 <xTimerCreateTimerTask+0x7c>)
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d001      	beq.n	801c280 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801c27c:	2301      	movs	r3, #1
 801c27e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d102      	bne.n	801c28c <xTimerCreateTimerTask+0x64>
 801c286:	f000 fc5f 	bl	801cb48 <ulSetInterruptMask>
 801c28a:	e7fe      	b.n	801c28a <xTimerCreateTimerTask+0x62>
	return xReturn;
 801c28c:	68fb      	ldr	r3, [r7, #12]
}
 801c28e:	4618      	mov	r0, r3
 801c290:	3710      	adds	r7, #16
 801c292:	46bd      	mov	sp, r7
 801c294:	bd80      	pop	{r7, pc}
 801c296:	bf00      	nop
 801c298:	20001c50 	.word	0x20001c50
 801c29c:	08021ce8 	.word	0x08021ce8
 801c2a0:	0801c3bd 	.word	0x0801c3bd
 801c2a4:	20001c54 	.word	0x20001c54

0801c2a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b08a      	sub	sp, #40	; 0x28
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	60f8      	str	r0, [r7, #12]
 801c2b0:	60b9      	str	r1, [r7, #8]
 801c2b2:	607a      	str	r2, [r7, #4]
 801c2b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c2b6:	2300      	movs	r3, #0
 801c2b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d102      	bne.n	801c2c6 <xTimerGenericCommand+0x1e>
 801c2c0:	f000 fc42 	bl	801cb48 <ulSetInterruptMask>
 801c2c4:	e7fe      	b.n	801c2c4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c2c6:	4b1a      	ldr	r3, [pc, #104]	; (801c330 <xTimerGenericCommand+0x88>)
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d02a      	beq.n	801c324 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801c2ce:	68bb      	ldr	r3, [r7, #8]
 801c2d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801c2da:	68bb      	ldr	r3, [r7, #8]
 801c2dc:	2b05      	cmp	r3, #5
 801c2de:	dc18      	bgt.n	801c312 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801c2e0:	f7ff fed2 	bl	801c088 <xTaskGetSchedulerState>
 801c2e4:	4603      	mov	r3, r0
 801c2e6:	2b02      	cmp	r3, #2
 801c2e8:	d109      	bne.n	801c2fe <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801c2ea:	4b11      	ldr	r3, [pc, #68]	; (801c330 <xTimerGenericCommand+0x88>)
 801c2ec:	6818      	ldr	r0, [r3, #0]
 801c2ee:	f107 0114 	add.w	r1, r7, #20
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c2f6:	f7fe fd8a 	bl	801ae0e <xQueueGenericSend>
 801c2fa:	6278      	str	r0, [r7, #36]	; 0x24
 801c2fc:	e012      	b.n	801c324 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801c2fe:	4b0c      	ldr	r3, [pc, #48]	; (801c330 <xTimerGenericCommand+0x88>)
 801c300:	6818      	ldr	r0, [r3, #0]
 801c302:	f107 0114 	add.w	r1, r7, #20
 801c306:	2300      	movs	r3, #0
 801c308:	2200      	movs	r2, #0
 801c30a:	f7fe fd80 	bl	801ae0e <xQueueGenericSend>
 801c30e:	6278      	str	r0, [r7, #36]	; 0x24
 801c310:	e008      	b.n	801c324 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c312:	4b07      	ldr	r3, [pc, #28]	; (801c330 <xTimerGenericCommand+0x88>)
 801c314:	6818      	ldr	r0, [r3, #0]
 801c316:	f107 0114 	add.w	r1, r7, #20
 801c31a:	2300      	movs	r3, #0
 801c31c:	683a      	ldr	r2, [r7, #0]
 801c31e:	f7fe fe3f 	bl	801afa0 <xQueueGenericSendFromISR>
 801c322:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c326:	4618      	mov	r0, r3
 801c328:	3728      	adds	r7, #40	; 0x28
 801c32a:	46bd      	mov	sp, r7
 801c32c:	bd80      	pop	{r7, pc}
 801c32e:	bf00      	nop
 801c330:	20001c50 	.word	0x20001c50

0801c334 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b086      	sub	sp, #24
 801c338:	af02      	add	r7, sp, #8
 801c33a:	6078      	str	r0, [r7, #4]
 801c33c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c33e:	4b1e      	ldr	r3, [pc, #120]	; (801c3b8 <prvProcessExpiredTimer+0x84>)
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	68db      	ldr	r3, [r3, #12]
 801c344:	68db      	ldr	r3, [r3, #12]
 801c346:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	3304      	adds	r3, #4
 801c34c:	4618      	mov	r0, r3
 801c34e:	f7fe fc69 	bl	801ac24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c358:	f003 0304 	and.w	r3, r3, #4
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d01a      	beq.n	801c396 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	699a      	ldr	r2, [r3, #24]
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	18d1      	adds	r1, r2, r3
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	683a      	ldr	r2, [r7, #0]
 801c36c:	68f8      	ldr	r0, [r7, #12]
 801c36e:	f000 f8c1 	bl	801c4f4 <prvInsertTimerInActiveList>
 801c372:	4603      	mov	r3, r0
 801c374:	2b00      	cmp	r3, #0
 801c376:	d017      	beq.n	801c3a8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c378:	2300      	movs	r3, #0
 801c37a:	9300      	str	r3, [sp, #0]
 801c37c:	2300      	movs	r3, #0
 801c37e:	687a      	ldr	r2, [r7, #4]
 801c380:	2100      	movs	r1, #0
 801c382:	68f8      	ldr	r0, [r7, #12]
 801c384:	f7ff ff90 	bl	801c2a8 <xTimerGenericCommand>
 801c388:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801c38a:	68bb      	ldr	r3, [r7, #8]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d10b      	bne.n	801c3a8 <prvProcessExpiredTimer+0x74>
 801c390:	f000 fbda 	bl	801cb48 <ulSetInterruptMask>
 801c394:	e7fe      	b.n	801c394 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c39c:	f023 0301 	bic.w	r3, r3, #1
 801c3a0:	b2da      	uxtb	r2, r3
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	6a1b      	ldr	r3, [r3, #32]
 801c3ac:	68f8      	ldr	r0, [r7, #12]
 801c3ae:	4798      	blx	r3
}
 801c3b0:	bf00      	nop
 801c3b2:	3710      	adds	r7, #16
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	bd80      	pop	{r7, pc}
 801c3b8:	20001c48 	.word	0x20001c48

0801c3bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801c3bc:	b580      	push	{r7, lr}
 801c3be:	b084      	sub	sp, #16
 801c3c0:	af00      	add	r7, sp, #0
 801c3c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c3c4:	f107 0308 	add.w	r3, r7, #8
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	f000 f84f 	bl	801c46c <prvGetNextExpireTime>
 801c3ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801c3d0:	68bb      	ldr	r3, [r7, #8]
 801c3d2:	4619      	mov	r1, r3
 801c3d4:	68f8      	ldr	r0, [r7, #12]
 801c3d6:	f000 f803 	bl	801c3e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801c3da:	f000 f8cd 	bl	801c578 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c3de:	e7f1      	b.n	801c3c4 <prvTimerTask+0x8>

0801c3e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b084      	sub	sp, #16
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
 801c3e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801c3ea:	f7ff fac5 	bl	801b978 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c3ee:	f107 0308 	add.w	r3, r7, #8
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	f000 f85e 	bl	801c4b4 <prvSampleTimeNow>
 801c3f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c3fa:	68bb      	ldr	r3, [r7, #8]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d12a      	bne.n	801c456 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c400:	683b      	ldr	r3, [r7, #0]
 801c402:	2b00      	cmp	r3, #0
 801c404:	d10a      	bne.n	801c41c <prvProcessTimerOrBlockTask+0x3c>
 801c406:	687a      	ldr	r2, [r7, #4]
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	429a      	cmp	r2, r3
 801c40c:	d806      	bhi.n	801c41c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801c40e:	f7ff fac1 	bl	801b994 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c412:	68f9      	ldr	r1, [r7, #12]
 801c414:	6878      	ldr	r0, [r7, #4]
 801c416:	f7ff ff8d 	bl	801c334 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c41a:	e01e      	b.n	801c45a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 801c41c:	683b      	ldr	r3, [r7, #0]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d008      	beq.n	801c434 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c422:	4b10      	ldr	r3, [pc, #64]	; (801c464 <prvProcessTimerOrBlockTask+0x84>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d101      	bne.n	801c430 <prvProcessTimerOrBlockTask+0x50>
 801c42c:	2301      	movs	r3, #1
 801c42e:	e000      	b.n	801c432 <prvProcessTimerOrBlockTask+0x52>
 801c430:	2300      	movs	r3, #0
 801c432:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c434:	4b0c      	ldr	r3, [pc, #48]	; (801c468 <prvProcessTimerOrBlockTask+0x88>)
 801c436:	6818      	ldr	r0, [r3, #0]
 801c438:	687a      	ldr	r2, [r7, #4]
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	1ad3      	subs	r3, r2, r3
 801c43e:	683a      	ldr	r2, [r7, #0]
 801c440:	4619      	mov	r1, r3
 801c442:	f7ff f811 	bl	801b468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801c446:	f7ff faa5 	bl	801b994 <xTaskResumeAll>
 801c44a:	4603      	mov	r3, r0
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d104      	bne.n	801c45a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 801c450:	f000 fa36 	bl	801c8c0 <vPortYield>
}
 801c454:	e001      	b.n	801c45a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 801c456:	f7ff fa9d 	bl	801b994 <xTaskResumeAll>
}
 801c45a:	bf00      	nop
 801c45c:	3710      	adds	r7, #16
 801c45e:	46bd      	mov	sp, r7
 801c460:	bd80      	pop	{r7, pc}
 801c462:	bf00      	nop
 801c464:	20001c4c 	.word	0x20001c4c
 801c468:	20001c50 	.word	0x20001c50

0801c46c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801c46c:	b480      	push	{r7}
 801c46e:	b085      	sub	sp, #20
 801c470:	af00      	add	r7, sp, #0
 801c472:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801c474:	4b0e      	ldr	r3, [pc, #56]	; (801c4b0 <prvGetNextExpireTime+0x44>)
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d101      	bne.n	801c482 <prvGetNextExpireTime+0x16>
 801c47e:	2201      	movs	r2, #1
 801c480:	e000      	b.n	801c484 <prvGetNextExpireTime+0x18>
 801c482:	2200      	movs	r2, #0
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d105      	bne.n	801c49c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c490:	4b07      	ldr	r3, [pc, #28]	; (801c4b0 <prvGetNextExpireTime+0x44>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	68db      	ldr	r3, [r3, #12]
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	60fb      	str	r3, [r7, #12]
 801c49a:	e001      	b.n	801c4a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801c49c:	2300      	movs	r3, #0
 801c49e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801c4a0:	68fb      	ldr	r3, [r7, #12]
}
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	3714      	adds	r7, #20
 801c4a6:	46bd      	mov	sp, r7
 801c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ac:	4770      	bx	lr
 801c4ae:	bf00      	nop
 801c4b0:	20001c48 	.word	0x20001c48

0801c4b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b084      	sub	sp, #16
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801c4bc:	f7ff faf8 	bl	801bab0 <xTaskGetTickCount>
 801c4c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801c4c2:	4b0b      	ldr	r3, [pc, #44]	; (801c4f0 <prvSampleTimeNow+0x3c>)
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	68fa      	ldr	r2, [r7, #12]
 801c4c8:	429a      	cmp	r2, r3
 801c4ca:	d205      	bcs.n	801c4d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801c4cc:	f000 f91e 	bl	801c70c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	2201      	movs	r2, #1
 801c4d4:	601a      	str	r2, [r3, #0]
 801c4d6:	e002      	b.n	801c4de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	2200      	movs	r2, #0
 801c4dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801c4de:	4a04      	ldr	r2, [pc, #16]	; (801c4f0 <prvSampleTimeNow+0x3c>)
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801c4e4:	68fb      	ldr	r3, [r7, #12]
}
 801c4e6:	4618      	mov	r0, r3
 801c4e8:	3710      	adds	r7, #16
 801c4ea:	46bd      	mov	sp, r7
 801c4ec:	bd80      	pop	{r7, pc}
 801c4ee:	bf00      	nop
 801c4f0:	20001c58 	.word	0x20001c58

0801c4f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b086      	sub	sp, #24
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	60f8      	str	r0, [r7, #12]
 801c4fc:	60b9      	str	r1, [r7, #8]
 801c4fe:	607a      	str	r2, [r7, #4]
 801c500:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801c502:	2300      	movs	r3, #0
 801c504:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	68ba      	ldr	r2, [r7, #8]
 801c50a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	68fa      	ldr	r2, [r7, #12]
 801c510:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c512:	68ba      	ldr	r2, [r7, #8]
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	429a      	cmp	r2, r3
 801c518:	d812      	bhi.n	801c540 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c51a:	687a      	ldr	r2, [r7, #4]
 801c51c:	683b      	ldr	r3, [r7, #0]
 801c51e:	1ad2      	subs	r2, r2, r3
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	699b      	ldr	r3, [r3, #24]
 801c524:	429a      	cmp	r2, r3
 801c526:	d302      	bcc.n	801c52e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c528:	2301      	movs	r3, #1
 801c52a:	617b      	str	r3, [r7, #20]
 801c52c:	e01b      	b.n	801c566 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c52e:	4b10      	ldr	r3, [pc, #64]	; (801c570 <prvInsertTimerInActiveList+0x7c>)
 801c530:	681a      	ldr	r2, [r3, #0]
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	3304      	adds	r3, #4
 801c536:	4619      	mov	r1, r3
 801c538:	4610      	mov	r0, r2
 801c53a:	f7fe fb3a 	bl	801abb2 <vListInsert>
 801c53e:	e012      	b.n	801c566 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c540:	687a      	ldr	r2, [r7, #4]
 801c542:	683b      	ldr	r3, [r7, #0]
 801c544:	429a      	cmp	r2, r3
 801c546:	d206      	bcs.n	801c556 <prvInsertTimerInActiveList+0x62>
 801c548:	68ba      	ldr	r2, [r7, #8]
 801c54a:	683b      	ldr	r3, [r7, #0]
 801c54c:	429a      	cmp	r2, r3
 801c54e:	d302      	bcc.n	801c556 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c550:	2301      	movs	r3, #1
 801c552:	617b      	str	r3, [r7, #20]
 801c554:	e007      	b.n	801c566 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c556:	4b07      	ldr	r3, [pc, #28]	; (801c574 <prvInsertTimerInActiveList+0x80>)
 801c558:	681a      	ldr	r2, [r3, #0]
 801c55a:	68fb      	ldr	r3, [r7, #12]
 801c55c:	3304      	adds	r3, #4
 801c55e:	4619      	mov	r1, r3
 801c560:	4610      	mov	r0, r2
 801c562:	f7fe fb26 	bl	801abb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c566:	697b      	ldr	r3, [r7, #20]
}
 801c568:	4618      	mov	r0, r3
 801c56a:	3718      	adds	r7, #24
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bd80      	pop	{r7, pc}
 801c570:	20001c4c 	.word	0x20001c4c
 801c574:	20001c48 	.word	0x20001c48

0801c578 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c578:	b580      	push	{r7, lr}
 801c57a:	b08c      	sub	sp, #48	; 0x30
 801c57c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c57e:	e0b2      	b.n	801c6e6 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801c580:	68bb      	ldr	r3, [r7, #8]
 801c582:	2b00      	cmp	r3, #0
 801c584:	da11      	bge.n	801c5aa <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801c586:	f107 0308 	add.w	r3, r7, #8
 801c58a:	3304      	adds	r3, #4
 801c58c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c590:	2b00      	cmp	r3, #0
 801c592:	d102      	bne.n	801c59a <prvProcessReceivedCommands+0x22>
 801c594:	f000 fad8 	bl	801cb48 <ulSetInterruptMask>
 801c598:	e7fe      	b.n	801c598 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5a0:	6850      	ldr	r0, [r2, #4]
 801c5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5a4:	6892      	ldr	r2, [r2, #8]
 801c5a6:	4611      	mov	r1, r2
 801c5a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c5aa:	68bb      	ldr	r3, [r7, #8]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	f2c0 809a 	blt.w	801c6e6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c5b2:	693b      	ldr	r3, [r7, #16]
 801c5b4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c5b6:	6a3b      	ldr	r3, [r7, #32]
 801c5b8:	695b      	ldr	r3, [r3, #20]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d004      	beq.n	801c5c8 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c5be:	6a3b      	ldr	r3, [r7, #32]
 801c5c0:	3304      	adds	r3, #4
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7fe fb2e 	bl	801ac24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c5c8:	1d3b      	adds	r3, r7, #4
 801c5ca:	4618      	mov	r0, r3
 801c5cc:	f7ff ff72 	bl	801c4b4 <prvSampleTimeNow>
 801c5d0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 801c5d2:	68bb      	ldr	r3, [r7, #8]
 801c5d4:	2b09      	cmp	r3, #9
 801c5d6:	f200 8085 	bhi.w	801c6e4 <prvProcessReceivedCommands+0x16c>
 801c5da:	a201      	add	r2, pc, #4	; (adr r2, 801c5e0 <prvProcessReceivedCommands+0x68>)
 801c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5e0:	0801c609 	.word	0x0801c609
 801c5e4:	0801c609 	.word	0x0801c609
 801c5e8:	0801c609 	.word	0x0801c609
 801c5ec:	0801c66d 	.word	0x0801c66d
 801c5f0:	0801c681 	.word	0x0801c681
 801c5f4:	0801c6bb 	.word	0x0801c6bb
 801c5f8:	0801c609 	.word	0x0801c609
 801c5fc:	0801c609 	.word	0x0801c609
 801c600:	0801c66d 	.word	0x0801c66d
 801c604:	0801c681 	.word	0x0801c681
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c608:	6a3b      	ldr	r3, [r7, #32]
 801c60a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c60e:	f043 0301 	orr.w	r3, r3, #1
 801c612:	b2da      	uxtb	r2, r3
 801c614:	6a3b      	ldr	r3, [r7, #32]
 801c616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c61a:	68fa      	ldr	r2, [r7, #12]
 801c61c:	6a3b      	ldr	r3, [r7, #32]
 801c61e:	699b      	ldr	r3, [r3, #24]
 801c620:	18d1      	adds	r1, r2, r3
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	69fa      	ldr	r2, [r7, #28]
 801c626:	6a38      	ldr	r0, [r7, #32]
 801c628:	f7ff ff64 	bl	801c4f4 <prvInsertTimerInActiveList>
 801c62c:	4603      	mov	r3, r0
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d059      	beq.n	801c6e6 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c632:	6a3b      	ldr	r3, [r7, #32]
 801c634:	6a1b      	ldr	r3, [r3, #32]
 801c636:	6a38      	ldr	r0, [r7, #32]
 801c638:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c63a:	6a3b      	ldr	r3, [r7, #32]
 801c63c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c640:	f003 0304 	and.w	r3, r3, #4
 801c644:	2b00      	cmp	r3, #0
 801c646:	d04e      	beq.n	801c6e6 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c648:	68fa      	ldr	r2, [r7, #12]
 801c64a:	6a3b      	ldr	r3, [r7, #32]
 801c64c:	699b      	ldr	r3, [r3, #24]
 801c64e:	441a      	add	r2, r3
 801c650:	2300      	movs	r3, #0
 801c652:	9300      	str	r3, [sp, #0]
 801c654:	2300      	movs	r3, #0
 801c656:	2100      	movs	r1, #0
 801c658:	6a38      	ldr	r0, [r7, #32]
 801c65a:	f7ff fe25 	bl	801c2a8 <xTimerGenericCommand>
 801c65e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 801c660:	69bb      	ldr	r3, [r7, #24]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d13f      	bne.n	801c6e6 <prvProcessReceivedCommands+0x16e>
 801c666:	f000 fa6f 	bl	801cb48 <ulSetInterruptMask>
 801c66a:	e7fe      	b.n	801c66a <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c66c:	6a3b      	ldr	r3, [r7, #32]
 801c66e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c672:	f023 0301 	bic.w	r3, r3, #1
 801c676:	b2da      	uxtb	r2, r3
 801c678:	6a3b      	ldr	r3, [r7, #32]
 801c67a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801c67e:	e032      	b.n	801c6e6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c680:	6a3b      	ldr	r3, [r7, #32]
 801c682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c686:	f043 0301 	orr.w	r3, r3, #1
 801c68a:	b2da      	uxtb	r2, r3
 801c68c:	6a3b      	ldr	r3, [r7, #32]
 801c68e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c692:	68fa      	ldr	r2, [r7, #12]
 801c694:	6a3b      	ldr	r3, [r7, #32]
 801c696:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c698:	6a3b      	ldr	r3, [r7, #32]
 801c69a:	699b      	ldr	r3, [r3, #24]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d102      	bne.n	801c6a6 <prvProcessReceivedCommands+0x12e>
 801c6a0:	f000 fa52 	bl	801cb48 <ulSetInterruptMask>
 801c6a4:	e7fe      	b.n	801c6a4 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c6a6:	6a3b      	ldr	r3, [r7, #32]
 801c6a8:	699a      	ldr	r2, [r3, #24]
 801c6aa:	69fb      	ldr	r3, [r7, #28]
 801c6ac:	18d1      	adds	r1, r2, r3
 801c6ae:	69fb      	ldr	r3, [r7, #28]
 801c6b0:	69fa      	ldr	r2, [r7, #28]
 801c6b2:	6a38      	ldr	r0, [r7, #32]
 801c6b4:	f7ff ff1e 	bl	801c4f4 <prvInsertTimerInActiveList>
					break;
 801c6b8:	e015      	b.n	801c6e6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c6ba:	6a3b      	ldr	r3, [r7, #32]
 801c6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c6c0:	f003 0302 	and.w	r3, r3, #2
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d103      	bne.n	801c6d0 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 801c6c8:	6a38      	ldr	r0, [r7, #32]
 801c6ca:	f000 fb51 	bl	801cd70 <vPortFree>
 801c6ce:	e00a      	b.n	801c6e6 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c6d0:	6a3b      	ldr	r3, [r7, #32]
 801c6d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c6d6:	f023 0301 	bic.w	r3, r3, #1
 801c6da:	b2da      	uxtb	r2, r3
 801c6dc:	6a3b      	ldr	r3, [r7, #32]
 801c6de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c6e2:	e000      	b.n	801c6e6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 801c6e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c6e6:	4b08      	ldr	r3, [pc, #32]	; (801c708 <prvProcessReceivedCommands+0x190>)
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	f107 0108 	add.w	r1, r7, #8
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7fe fcc6 	bl	801b082 <xQueueReceive>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	f47f af41 	bne.w	801c580 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c6fe:	bf00      	nop
 801c700:	bf00      	nop
 801c702:	3728      	adds	r7, #40	; 0x28
 801c704:	46bd      	mov	sp, r7
 801c706:	bd80      	pop	{r7, pc}
 801c708:	20001c50 	.word	0x20001c50

0801c70c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b088      	sub	sp, #32
 801c710:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c712:	e040      	b.n	801c796 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c714:	4b29      	ldr	r3, [pc, #164]	; (801c7bc <prvSwitchTimerLists+0xb0>)
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	68db      	ldr	r3, [r3, #12]
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c71e:	4b27      	ldr	r3, [pc, #156]	; (801c7bc <prvSwitchTimerLists+0xb0>)
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	68db      	ldr	r3, [r3, #12]
 801c724:	68db      	ldr	r3, [r3, #12]
 801c726:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	3304      	adds	r3, #4
 801c72c:	4618      	mov	r0, r3
 801c72e:	f7fe fa79 	bl	801ac24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	6a1b      	ldr	r3, [r3, #32]
 801c736:	68f8      	ldr	r0, [r7, #12]
 801c738:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c740:	f003 0304 	and.w	r3, r3, #4
 801c744:	2b00      	cmp	r3, #0
 801c746:	d026      	beq.n	801c796 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	699b      	ldr	r3, [r3, #24]
 801c74c:	693a      	ldr	r2, [r7, #16]
 801c74e:	4413      	add	r3, r2
 801c750:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c752:	68ba      	ldr	r2, [r7, #8]
 801c754:	693b      	ldr	r3, [r7, #16]
 801c756:	429a      	cmp	r2, r3
 801c758:	d90e      	bls.n	801c778 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	68ba      	ldr	r2, [r7, #8]
 801c75e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	68fa      	ldr	r2, [r7, #12]
 801c764:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c766:	4b15      	ldr	r3, [pc, #84]	; (801c7bc <prvSwitchTimerLists+0xb0>)
 801c768:	681a      	ldr	r2, [r3, #0]
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	3304      	adds	r3, #4
 801c76e:	4619      	mov	r1, r3
 801c770:	4610      	mov	r0, r2
 801c772:	f7fe fa1e 	bl	801abb2 <vListInsert>
 801c776:	e00e      	b.n	801c796 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c778:	2300      	movs	r3, #0
 801c77a:	9300      	str	r3, [sp, #0]
 801c77c:	2300      	movs	r3, #0
 801c77e:	693a      	ldr	r2, [r7, #16]
 801c780:	2100      	movs	r1, #0
 801c782:	68f8      	ldr	r0, [r7, #12]
 801c784:	f7ff fd90 	bl	801c2a8 <xTimerGenericCommand>
 801c788:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d102      	bne.n	801c796 <prvSwitchTimerLists+0x8a>
 801c790:	f000 f9da 	bl	801cb48 <ulSetInterruptMask>
 801c794:	e7fe      	b.n	801c794 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c796:	4b09      	ldr	r3, [pc, #36]	; (801c7bc <prvSwitchTimerLists+0xb0>)
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	681b      	ldr	r3, [r3, #0]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d1b9      	bne.n	801c714 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c7a0:	4b06      	ldr	r3, [pc, #24]	; (801c7bc <prvSwitchTimerLists+0xb0>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c7a6:	4b06      	ldr	r3, [pc, #24]	; (801c7c0 <prvSwitchTimerLists+0xb4>)
 801c7a8:	681b      	ldr	r3, [r3, #0]
 801c7aa:	4a04      	ldr	r2, [pc, #16]	; (801c7bc <prvSwitchTimerLists+0xb0>)
 801c7ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c7ae:	4a04      	ldr	r2, [pc, #16]	; (801c7c0 <prvSwitchTimerLists+0xb4>)
 801c7b0:	697b      	ldr	r3, [r7, #20]
 801c7b2:	6013      	str	r3, [r2, #0]
}
 801c7b4:	bf00      	nop
 801c7b6:	3718      	adds	r7, #24
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	bd80      	pop	{r7, pc}
 801c7bc:	20001c48 	.word	0x20001c48
 801c7c0:	20001c4c 	.word	0x20001c4c

0801c7c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c7c4:	b580      	push	{r7, lr}
 801c7c6:	b082      	sub	sp, #8
 801c7c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c7ca:	f000 f88b 	bl	801c8e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c7ce:	4b15      	ldr	r3, [pc, #84]	; (801c824 <prvCheckForValidListAndQueue+0x60>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d120      	bne.n	801c818 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c7d6:	4814      	ldr	r0, [pc, #80]	; (801c828 <prvCheckForValidListAndQueue+0x64>)
 801c7d8:	f7fe f99a 	bl	801ab10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c7dc:	4813      	ldr	r0, [pc, #76]	; (801c82c <prvCheckForValidListAndQueue+0x68>)
 801c7de:	f7fe f997 	bl	801ab10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c7e2:	4b13      	ldr	r3, [pc, #76]	; (801c830 <prvCheckForValidListAndQueue+0x6c>)
 801c7e4:	4a10      	ldr	r2, [pc, #64]	; (801c828 <prvCheckForValidListAndQueue+0x64>)
 801c7e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c7e8:	4b12      	ldr	r3, [pc, #72]	; (801c834 <prvCheckForValidListAndQueue+0x70>)
 801c7ea:	4a10      	ldr	r2, [pc, #64]	; (801c82c <prvCheckForValidListAndQueue+0x68>)
 801c7ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	9300      	str	r3, [sp, #0]
 801c7f2:	4b11      	ldr	r3, [pc, #68]	; (801c838 <prvCheckForValidListAndQueue+0x74>)
 801c7f4:	4a11      	ldr	r2, [pc, #68]	; (801c83c <prvCheckForValidListAndQueue+0x78>)
 801c7f6:	2110      	movs	r1, #16
 801c7f8:	200a      	movs	r0, #10
 801c7fa:	f7fe fa95 	bl	801ad28 <xQueueGenericCreateStatic>
 801c7fe:	4603      	mov	r3, r0
 801c800:	4a08      	ldr	r2, [pc, #32]	; (801c824 <prvCheckForValidListAndQueue+0x60>)
 801c802:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c804:	4b07      	ldr	r3, [pc, #28]	; (801c824 <prvCheckForValidListAndQueue+0x60>)
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d005      	beq.n	801c818 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c80c:	4b05      	ldr	r3, [pc, #20]	; (801c824 <prvCheckForValidListAndQueue+0x60>)
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	490b      	ldr	r1, [pc, #44]	; (801c840 <prvCheckForValidListAndQueue+0x7c>)
 801c812:	4618      	mov	r0, r3
 801c814:	f7fe fdfe 	bl	801b414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c818:	f000 f876 	bl	801c908 <vPortExitCritical>
}
 801c81c:	bf00      	nop
 801c81e:	46bd      	mov	sp, r7
 801c820:	bd80      	pop	{r7, pc}
 801c822:	bf00      	nop
 801c824:	20001c50 	.word	0x20001c50
 801c828:	20001c20 	.word	0x20001c20
 801c82c:	20001c34 	.word	0x20001c34
 801c830:	20001c48 	.word	0x20001c48
 801c834:	20001c4c 	.word	0x20001c4c
 801c838:	20001cfc 	.word	0x20001cfc
 801c83c:	20001c5c 	.word	0x20001c5c
 801c840:	08021cf0 	.word	0x08021cf0

0801c844 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801c844:	b480      	push	{r7}
 801c846:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c848:	4b0b      	ldr	r3, [pc, #44]	; (801c878 <vPortSetupTimerInterrupt+0x34>)
 801c84a:	2200      	movs	r2, #0
 801c84c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c84e:	4b0b      	ldr	r3, [pc, #44]	; (801c87c <vPortSetupTimerInterrupt+0x38>)
 801c850:	2200      	movs	r2, #0
 801c852:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c854:	4b0a      	ldr	r3, [pc, #40]	; (801c880 <vPortSetupTimerInterrupt+0x3c>)
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	4a0a      	ldr	r2, [pc, #40]	; (801c884 <vPortSetupTimerInterrupt+0x40>)
 801c85a:	fba2 2303 	umull	r2, r3, r2, r3
 801c85e:	099b      	lsrs	r3, r3, #6
 801c860:	4a09      	ldr	r2, [pc, #36]	; (801c888 <vPortSetupTimerInterrupt+0x44>)
 801c862:	3b01      	subs	r3, #1
 801c864:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801c866:	4b04      	ldr	r3, [pc, #16]	; (801c878 <vPortSetupTimerInterrupt+0x34>)
 801c868:	2207      	movs	r2, #7
 801c86a:	601a      	str	r2, [r3, #0]
}
 801c86c:	bf00      	nop
 801c86e:	46bd      	mov	sp, r7
 801c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c874:	4770      	bx	lr
 801c876:	bf00      	nop
 801c878:	e000e010 	.word	0xe000e010
 801c87c:	e000e018 	.word	0xe000e018
 801c880:	20000090 	.word	0x20000090
 801c884:	10624dd3 	.word	0x10624dd3
 801c888:	e000e014 	.word	0xe000e014

0801c88c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c88c:	b580      	push	{r7, lr}
 801c88e:	b082      	sub	sp, #8
 801c890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801c892:	2300      	movs	r3, #0
 801c894:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 801c896:	4b09      	ldr	r3, [pc, #36]	; (801c8bc <prvTaskExitError+0x30>)
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c89e:	d002      	beq.n	801c8a6 <prvTaskExitError+0x1a>
 801c8a0:	f000 f952 	bl	801cb48 <ulSetInterruptMask>
 801c8a4:	e7fe      	b.n	801c8a4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 801c8a6:	f000 f94f 	bl	801cb48 <ulSetInterruptMask>

	while( ulDummy == 0 )
 801c8aa:	bf00      	nop
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d0fc      	beq.n	801c8ac <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 801c8b2:	bf00      	nop
 801c8b4:	bf00      	nop
 801c8b6:	3708      	adds	r7, #8
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bd80      	pop	{r7, pc}
 801c8bc:	2000009c 	.word	0x2000009c

0801c8c0 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 801c8c0:	b480      	push	{r7}
 801c8c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c8c4:	4b06      	ldr	r3, [pc, #24]	; (801c8e0 <vPortYield+0x20>)
 801c8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c8ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801c8cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801c8d0:	f3bf 8f6f 	isb	sy
}
 801c8d4:	bf00      	nop
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8dc:	4770      	bx	lr
 801c8de:	bf00      	nop
 801c8e0:	e000ed04 	.word	0xe000ed04

0801c8e4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801c8e8:	f000 f92e 	bl	801cb48 <ulSetInterruptMask>
	ulCriticalNesting++;
 801c8ec:	4b05      	ldr	r3, [pc, #20]	; (801c904 <vPortEnterCritical+0x20>)
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	3301      	adds	r3, #1
 801c8f2:	4a04      	ldr	r2, [pc, #16]	; (801c904 <vPortEnterCritical+0x20>)
 801c8f4:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801c8f6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801c8fa:	f3bf 8f6f 	isb	sy
}
 801c8fe:	bf00      	nop
 801c900:	bd80      	pop	{r7, pc}
 801c902:	bf00      	nop
 801c904:	2000009c 	.word	0x2000009c

0801c908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801c908:	b580      	push	{r7, lr}
 801c90a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 801c90c:	4b0a      	ldr	r3, [pc, #40]	; (801c938 <vPortExitCritical+0x30>)
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	2b00      	cmp	r3, #0
 801c912:	d102      	bne.n	801c91a <vPortExitCritical+0x12>
 801c914:	f000 f918 	bl	801cb48 <ulSetInterruptMask>
 801c918:	e7fe      	b.n	801c918 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 801c91a:	4b07      	ldr	r3, [pc, #28]	; (801c938 <vPortExitCritical+0x30>)
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	3b01      	subs	r3, #1
 801c920:	4a05      	ldr	r2, [pc, #20]	; (801c938 <vPortExitCritical+0x30>)
 801c922:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 801c924:	4b04      	ldr	r3, [pc, #16]	; (801c938 <vPortExitCritical+0x30>)
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d102      	bne.n	801c932 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 801c92c:	2000      	movs	r0, #0
 801c92e:	f000 f918 	bl	801cb62 <vClearInterruptMask>
	}
}
 801c932:	bf00      	nop
 801c934:	bd80      	pop	{r7, pc}
 801c936:	bf00      	nop
 801c938:	2000009c 	.word	0x2000009c

0801c93c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 801c93c:	b580      	push	{r7, lr}
 801c93e:	b082      	sub	sp, #8
 801c940:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801c942:	f000 f901 	bl	801cb48 <ulSetInterruptMask>
 801c946:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c948:	f7ff f8c2 	bl	801bad0 <xTaskIncrementTick>
 801c94c:	4603      	mov	r3, r0
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d003      	beq.n	801c95a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c952:	4b05      	ldr	r3, [pc, #20]	; (801c968 <xPortSysTickHandler+0x2c>)
 801c954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c958:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801c95a:	6878      	ldr	r0, [r7, #4]
 801c95c:	f000 f901 	bl	801cb62 <vClearInterruptMask>
}
 801c960:	bf00      	nop
 801c962:	3708      	adds	r7, #8
 801c964:	46bd      	mov	sp, r7
 801c966:	bd80      	pop	{r7, pc}
 801c968:	e000ed04 	.word	0xe000ed04

0801c96c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b084      	sub	sp, #16
 801c970:	af00      	add	r7, sp, #0
 801c972:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	699b      	ldr	r3, [r3, #24]
 801c978:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	3b02      	subs	r3, #2
 801c97e:	781b      	ldrb	r3, [r3, #0]
 801c980:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 801c982:	7afb      	ldrb	r3, [r7, #11]
 801c984:	2b02      	cmp	r3, #2
 801c986:	d102      	bne.n	801c98e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 801c988:	f000 f8b2 	bl	801caf0 <vRestoreContextOfFirstTask>
		}
		break;
 801c98c:	e002      	b.n	801c994 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 801c98e:	f000 f8db 	bl	801cb48 <ulSetInterruptMask>
 801c992:	e7fe      	b.n	801c992 <vPortSVCHandler_C+0x26>
		}
	}
}
 801c994:	bf00      	nop
 801c996:	3710      	adds	r7, #16
 801c998:	46bd      	mov	sp, r7
 801c99a:	bd80      	pop	{r7, pc}

0801c99c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 801c99c:	b480      	push	{r7}
 801c99e:	b085      	sub	sp, #20
 801c9a0:	af00      	add	r7, sp, #0
 801c9a2:	60f8      	str	r0, [r7, #12]
 801c9a4:	60b9      	str	r1, [r7, #8]
 801c9a6:	607a      	str	r2, [r7, #4]
 801c9a8:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	3b04      	subs	r3, #4
 801c9ae:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c9b6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	3b04      	subs	r3, #4
 801c9bc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 801c9be:	687a      	ldr	r2, [r7, #4]
 801c9c0:	68fb      	ldr	r3, [r7, #12]
 801c9c2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	3b04      	subs	r3, #4
 801c9c8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c9ca:	4a38      	ldr	r2, [pc, #224]	; (801caac <pxPortInitialiseStack+0x110>)
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	3b04      	subs	r3, #4
 801c9d4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 801c9dc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	3b04      	subs	r3, #4
 801c9e2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 801c9e4:	68fb      	ldr	r3, [r7, #12]
 801c9e6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 801c9ea:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	3b04      	subs	r3, #4
 801c9f0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 801c9f8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	3b04      	subs	r3, #4
 801c9fe:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 801ca06:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	3b04      	subs	r3, #4
 801ca0c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 801ca0e:	683a      	ldr	r2, [r7, #0]
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	3b04      	subs	r3, #4
 801ca18:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 801ca20:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	3b04      	subs	r3, #4
 801ca26:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801ca2e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	3b04      	subs	r3, #4
 801ca34:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 801ca3c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	3b04      	subs	r3, #4
 801ca42:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 801ca4a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	3b04      	subs	r3, #4
 801ca50:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 801ca52:	68fb      	ldr	r3, [r7, #12]
 801ca54:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 801ca58:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	3b04      	subs	r3, #4
 801ca5e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801ca66:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	3b04      	subs	r3, #4
 801ca6c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 801ca74:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	3b04      	subs	r3, #4
 801ca7a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801ca82:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	3b04      	subs	r3, #4
 801ca88:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 801ca90:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	3b04      	subs	r3, #4
 801ca96:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 801ca98:	68ba      	ldr	r2, [r7, #8]
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 801ca9e:	68fb      	ldr	r3, [r7, #12]
}
 801caa0:	4618      	mov	r0, r3
 801caa2:	3714      	adds	r7, #20
 801caa4:	46bd      	mov	sp, r7
 801caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caaa:	4770      	bx	lr
 801caac:	0801c88d 	.word	0x0801c88d

0801cab0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 801cab0:	b580      	push	{r7, lr}
 801cab2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801cab4:	4b0c      	ldr	r3, [pc, #48]	; (801cae8 <xPortStartScheduler+0x38>)
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	4a0b      	ldr	r2, [pc, #44]	; (801cae8 <xPortStartScheduler+0x38>)
 801caba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801cabe:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801cac0:	4b09      	ldr	r3, [pc, #36]	; (801cae8 <xPortStartScheduler+0x38>)
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	4a08      	ldr	r2, [pc, #32]	; (801cae8 <xPortStartScheduler+0x38>)
 801cac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801caca:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 801cacc:	f7ff feba 	bl	801c844 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 801cad0:	4b06      	ldr	r3, [pc, #24]	; (801caec <xPortStartScheduler+0x3c>)
 801cad2:	2200      	movs	r2, #0
 801cad4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 801cad6:	f000 f823 	bl	801cb20 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801cada:	f7ff f8ab 	bl	801bc34 <vTaskSwitchContext>
	prvTaskExitError();
 801cade:	f7ff fed5 	bl	801c88c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 801cae2:	2300      	movs	r3, #0
}
 801cae4:	4618      	mov	r0, r3
 801cae6:	bd80      	pop	{r7, pc}
 801cae8:	e000ed20 	.word	0xe000ed20
 801caec:	2000009c 	.word	0x2000009c

0801caf0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801caf0:	4a07      	ldr	r2, [pc, #28]	; (801cb10 <pxCurrentTCBConst2>)
 801caf2:	6811      	ldr	r1, [r2, #0]
 801caf4:	6808      	ldr	r0, [r1, #0]
 801caf6:	c806      	ldmia	r0!, {r1, r2}
 801caf8:	f381 880b 	msr	PSPLIM, r1
 801cafc:	2102      	movs	r1, #2
 801cafe:	f381 8814 	msr	CONTROL, r1
 801cb02:	3020      	adds	r0, #32
 801cb04:	f380 8809 	msr	PSP, r0
 801cb08:	f3bf 8f6f 	isb	sy
 801cb0c:	4710      	bx	r2
 801cb0e:	bf00      	nop

0801cb10 <pxCurrentTCBConst2>:
 801cb10:	20001720 	.word	0x20001720
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 801cb14:	bf00      	nop
 801cb16:	bf00      	nop
	...

0801cb20 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801cb20:	4807      	ldr	r0, [pc, #28]	; (801cb40 <xVTORConst>)
 801cb22:	6800      	ldr	r0, [r0, #0]
 801cb24:	6800      	ldr	r0, [r0, #0]
 801cb26:	f380 8808 	msr	MSP, r0
 801cb2a:	b662      	cpsie	i
 801cb2c:	b661      	cpsie	f
 801cb2e:	f3bf 8f4f 	dsb	sy
 801cb32:	f3bf 8f6f 	isb	sy
 801cb36:	df02      	svc	2
 801cb38:	bf00      	nop
 801cb3a:	bf00      	nop
 801cb3c:	f3af 8000 	nop.w

0801cb40 <xVTORConst>:
 801cb40:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 801cb44:	bf00      	nop
 801cb46:	bf00      	nop

0801cb48 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801cb48:	f3ef 8011 	mrs	r0, BASEPRI
 801cb4c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 801cb50:	f381 8811 	msr	BASEPRI, r1
 801cb54:	f3bf 8f4f 	dsb	sy
 801cb58:	f3bf 8f6f 	isb	sy
 801cb5c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801cb5e:	bf00      	nop
 801cb60:	4618      	mov	r0, r3

0801cb62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801cb62:	f380 8811 	msr	BASEPRI, r0
 801cb66:	f3bf 8f4f 	dsb	sy
 801cb6a:	f3bf 8f6f 	isb	sy
 801cb6e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 801cb70:	bf00      	nop
	...

0801cb80 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801cb80:	f3ef 8009 	mrs	r0, PSP
 801cb84:	f3ef 820b 	mrs	r2, PSPLIM
 801cb88:	4673      	mov	r3, lr
 801cb8a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801cb8e:	4a10      	ldr	r2, [pc, #64]	; (801cbd0 <pxCurrentTCBConst>)
 801cb90:	6811      	ldr	r1, [r2, #0]
 801cb92:	6008      	str	r0, [r1, #0]
 801cb94:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 801cb98:	f380 8811 	msr	BASEPRI, r0
 801cb9c:	f3bf 8f4f 	dsb	sy
 801cba0:	f3bf 8f6f 	isb	sy
 801cba4:	f7ff f846 	bl	801bc34 <vTaskSwitchContext>
 801cba8:	f04f 0000 	mov.w	r0, #0
 801cbac:	f380 8811 	msr	BASEPRI, r0
 801cbb0:	4a07      	ldr	r2, [pc, #28]	; (801cbd0 <pxCurrentTCBConst>)
 801cbb2:	6811      	ldr	r1, [r2, #0]
 801cbb4:	6808      	ldr	r0, [r1, #0]
 801cbb6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801cbba:	f382 880b 	msr	PSPLIM, r2
 801cbbe:	f380 8809 	msr	PSP, r0
 801cbc2:	4718      	bx	r3
 801cbc4:	f3af 8000 	nop.w
 801cbc8:	f3af 8000 	nop.w
 801cbcc:	f3af 8000 	nop.w

0801cbd0 <pxCurrentTCBConst>:
 801cbd0:	20001720 	.word	0x20001720
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 801cbd4:	bf00      	nop
 801cbd6:	bf00      	nop
	...

0801cbe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801cbe0:	f01e 0f04 	tst.w	lr, #4
 801cbe4:	bf0c      	ite	eq
 801cbe6:	f3ef 8008 	mrseq	r0, MSP
 801cbea:	f3ef 8009 	mrsne	r0, PSP
 801cbee:	4904      	ldr	r1, [pc, #16]	; (801cc00 <svchandler_address_const>)
 801cbf0:	4708      	bx	r1
 801cbf2:	bf00      	nop
 801cbf4:	f3af 8000 	nop.w
 801cbf8:	f3af 8000 	nop.w
 801cbfc:	f3af 8000 	nop.w

0801cc00 <svchandler_address_const>:
 801cc00:	0801c96d 	.word	0x0801c96d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 801cc04:	bf00      	nop
 801cc06:	bf00      	nop

0801cc08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b086      	sub	sp, #24
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801cc10:	2300      	movs	r3, #0
 801cc12:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801cc14:	f7fe feb0 	bl	801b978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801cc18:	4b4f      	ldr	r3, [pc, #316]	; (801cd58 <pvPortMalloc+0x150>)
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d101      	bne.n	801cc24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801cc20:	f000 f8f8 	bl	801ce14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801cc24:	4b4d      	ldr	r3, [pc, #308]	; (801cd5c <pvPortMalloc+0x154>)
 801cc26:	681a      	ldr	r2, [r3, #0]
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	4013      	ands	r3, r2
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	f040 8083 	bne.w	801cd38 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d015      	beq.n	801cc64 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 801cc38:	2208      	movs	r2, #8
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	4413      	add	r3, r2
 801cc3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	f003 0307 	and.w	r3, r3, #7
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d00c      	beq.n	801cc64 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	f023 0307 	bic.w	r3, r3, #7
 801cc50:	3308      	adds	r3, #8
 801cc52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	f003 0307 	and.w	r3, r3, #7
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d002      	beq.n	801cc64 <pvPortMalloc+0x5c>
 801cc5e:	f7ff ff73 	bl	801cb48 <ulSetInterruptMask>
 801cc62:	e7fe      	b.n	801cc62 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d066      	beq.n	801cd38 <pvPortMalloc+0x130>
 801cc6a:	4b3d      	ldr	r3, [pc, #244]	; (801cd60 <pvPortMalloc+0x158>)
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	687a      	ldr	r2, [r7, #4]
 801cc70:	429a      	cmp	r2, r3
 801cc72:	d861      	bhi.n	801cd38 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801cc74:	4b3b      	ldr	r3, [pc, #236]	; (801cd64 <pvPortMalloc+0x15c>)
 801cc76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801cc78:	4b3a      	ldr	r3, [pc, #232]	; (801cd64 <pvPortMalloc+0x15c>)
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cc7e:	e004      	b.n	801cc8a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 801cc80:	697b      	ldr	r3, [r7, #20]
 801cc82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801cc84:	697b      	ldr	r3, [r7, #20]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cc8a:	697b      	ldr	r3, [r7, #20]
 801cc8c:	685b      	ldr	r3, [r3, #4]
 801cc8e:	687a      	ldr	r2, [r7, #4]
 801cc90:	429a      	cmp	r2, r3
 801cc92:	d903      	bls.n	801cc9c <pvPortMalloc+0x94>
 801cc94:	697b      	ldr	r3, [r7, #20]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d1f1      	bne.n	801cc80 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801cc9c:	4b2e      	ldr	r3, [pc, #184]	; (801cd58 <pvPortMalloc+0x150>)
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	697a      	ldr	r2, [r7, #20]
 801cca2:	429a      	cmp	r2, r3
 801cca4:	d048      	beq.n	801cd38 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801cca6:	693b      	ldr	r3, [r7, #16]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	2208      	movs	r2, #8
 801ccac:	4413      	add	r3, r2
 801ccae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	681a      	ldr	r2, [r3, #0]
 801ccb4:	693b      	ldr	r3, [r7, #16]
 801ccb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801ccb8:	697b      	ldr	r3, [r7, #20]
 801ccba:	685a      	ldr	r2, [r3, #4]
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	1ad2      	subs	r2, r2, r3
 801ccc0:	2308      	movs	r3, #8
 801ccc2:	005b      	lsls	r3, r3, #1
 801ccc4:	429a      	cmp	r2, r3
 801ccc6:	d917      	bls.n	801ccf8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801ccc8:	697a      	ldr	r2, [r7, #20]
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	4413      	add	r3, r2
 801ccce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ccd0:	68bb      	ldr	r3, [r7, #8]
 801ccd2:	f003 0307 	and.w	r3, r3, #7
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d002      	beq.n	801cce0 <pvPortMalloc+0xd8>
 801ccda:	f7ff ff35 	bl	801cb48 <ulSetInterruptMask>
 801ccde:	e7fe      	b.n	801ccde <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801cce0:	697b      	ldr	r3, [r7, #20]
 801cce2:	685a      	ldr	r2, [r3, #4]
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	1ad2      	subs	r2, r2, r3
 801cce8:	68bb      	ldr	r3, [r7, #8]
 801ccea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801ccec:	697b      	ldr	r3, [r7, #20]
 801ccee:	687a      	ldr	r2, [r7, #4]
 801ccf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801ccf2:	68b8      	ldr	r0, [r7, #8]
 801ccf4:	f000 f8f0 	bl	801ced8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801ccf8:	4b19      	ldr	r3, [pc, #100]	; (801cd60 <pvPortMalloc+0x158>)
 801ccfa:	681a      	ldr	r2, [r3, #0]
 801ccfc:	697b      	ldr	r3, [r7, #20]
 801ccfe:	685b      	ldr	r3, [r3, #4]
 801cd00:	1ad3      	subs	r3, r2, r3
 801cd02:	4a17      	ldr	r2, [pc, #92]	; (801cd60 <pvPortMalloc+0x158>)
 801cd04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801cd06:	4b16      	ldr	r3, [pc, #88]	; (801cd60 <pvPortMalloc+0x158>)
 801cd08:	681a      	ldr	r2, [r3, #0]
 801cd0a:	4b17      	ldr	r3, [pc, #92]	; (801cd68 <pvPortMalloc+0x160>)
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	429a      	cmp	r2, r3
 801cd10:	d203      	bcs.n	801cd1a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801cd12:	4b13      	ldr	r3, [pc, #76]	; (801cd60 <pvPortMalloc+0x158>)
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	4a14      	ldr	r2, [pc, #80]	; (801cd68 <pvPortMalloc+0x160>)
 801cd18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801cd1a:	697b      	ldr	r3, [r7, #20]
 801cd1c:	685a      	ldr	r2, [r3, #4]
 801cd1e:	4b0f      	ldr	r3, [pc, #60]	; (801cd5c <pvPortMalloc+0x154>)
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	431a      	orrs	r2, r3
 801cd24:	697b      	ldr	r3, [r7, #20]
 801cd26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801cd28:	697b      	ldr	r3, [r7, #20]
 801cd2a:	2200      	movs	r2, #0
 801cd2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801cd2e:	4b0f      	ldr	r3, [pc, #60]	; (801cd6c <pvPortMalloc+0x164>)
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	3301      	adds	r3, #1
 801cd34:	4a0d      	ldr	r2, [pc, #52]	; (801cd6c <pvPortMalloc+0x164>)
 801cd36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801cd38:	f7fe fe2c 	bl	801b994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	f003 0307 	and.w	r3, r3, #7
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d002      	beq.n	801cd4c <pvPortMalloc+0x144>
 801cd46:	f7ff feff 	bl	801cb48 <ulSetInterruptMask>
 801cd4a:	e7fe      	b.n	801cd4a <pvPortMalloc+0x142>
	return pvReturn;
 801cd4c:	68fb      	ldr	r3, [r7, #12]
}
 801cd4e:	4618      	mov	r0, r3
 801cd50:	3718      	adds	r7, #24
 801cd52:	46bd      	mov	sp, r7
 801cd54:	bd80      	pop	{r7, pc}
 801cd56:	bf00      	nop
 801cd58:	20009d54 	.word	0x20009d54
 801cd5c:	20009d68 	.word	0x20009d68
 801cd60:	20009d58 	.word	0x20009d58
 801cd64:	20009d4c 	.word	0x20009d4c
 801cd68:	20009d5c 	.word	0x20009d5c
 801cd6c:	20009d60 	.word	0x20009d60

0801cd70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b084      	sub	sp, #16
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d03d      	beq.n	801cdfe <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801cd82:	2308      	movs	r3, #8
 801cd84:	425b      	negs	r3, r3
 801cd86:	68fa      	ldr	r2, [r7, #12]
 801cd88:	4413      	add	r3, r2
 801cd8a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801cd90:	68bb      	ldr	r3, [r7, #8]
 801cd92:	685a      	ldr	r2, [r3, #4]
 801cd94:	4b1c      	ldr	r3, [pc, #112]	; (801ce08 <vPortFree+0x98>)
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	4013      	ands	r3, r2
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d102      	bne.n	801cda4 <vPortFree+0x34>
 801cd9e:	f7ff fed3 	bl	801cb48 <ulSetInterruptMask>
 801cda2:	e7fe      	b.n	801cda2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801cda4:	68bb      	ldr	r3, [r7, #8]
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d002      	beq.n	801cdb2 <vPortFree+0x42>
 801cdac:	f7ff fecc 	bl	801cb48 <ulSetInterruptMask>
 801cdb0:	e7fe      	b.n	801cdb0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801cdb2:	68bb      	ldr	r3, [r7, #8]
 801cdb4:	685a      	ldr	r2, [r3, #4]
 801cdb6:	4b14      	ldr	r3, [pc, #80]	; (801ce08 <vPortFree+0x98>)
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	4013      	ands	r3, r2
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d01e      	beq.n	801cdfe <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801cdc0:	68bb      	ldr	r3, [r7, #8]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d11a      	bne.n	801cdfe <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801cdc8:	68bb      	ldr	r3, [r7, #8]
 801cdca:	685a      	ldr	r2, [r3, #4]
 801cdcc:	4b0e      	ldr	r3, [pc, #56]	; (801ce08 <vPortFree+0x98>)
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	43db      	mvns	r3, r3
 801cdd2:	401a      	ands	r2, r3
 801cdd4:	68bb      	ldr	r3, [r7, #8]
 801cdd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801cdd8:	f7fe fdce 	bl	801b978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801cddc:	68bb      	ldr	r3, [r7, #8]
 801cdde:	685a      	ldr	r2, [r3, #4]
 801cde0:	4b0a      	ldr	r3, [pc, #40]	; (801ce0c <vPortFree+0x9c>)
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	4413      	add	r3, r2
 801cde6:	4a09      	ldr	r2, [pc, #36]	; (801ce0c <vPortFree+0x9c>)
 801cde8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801cdea:	68b8      	ldr	r0, [r7, #8]
 801cdec:	f000 f874 	bl	801ced8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801cdf0:	4b07      	ldr	r3, [pc, #28]	; (801ce10 <vPortFree+0xa0>)
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	4a06      	ldr	r2, [pc, #24]	; (801ce10 <vPortFree+0xa0>)
 801cdf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801cdfa:	f7fe fdcb 	bl	801b994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801cdfe:	bf00      	nop
 801ce00:	3710      	adds	r7, #16
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bd80      	pop	{r7, pc}
 801ce06:	bf00      	nop
 801ce08:	20009d68 	.word	0x20009d68
 801ce0c:	20009d58 	.word	0x20009d58
 801ce10:	20009d64 	.word	0x20009d64

0801ce14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801ce14:	b480      	push	{r7}
 801ce16:	b085      	sub	sp, #20
 801ce18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ce1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ce1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ce20:	4b27      	ldr	r3, [pc, #156]	; (801cec0 <prvHeapInit+0xac>)
 801ce22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	f003 0307 	and.w	r3, r3, #7
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d00c      	beq.n	801ce48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	3307      	adds	r3, #7
 801ce32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	f023 0307 	bic.w	r3, r3, #7
 801ce3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ce3c:	68ba      	ldr	r2, [r7, #8]
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	1ad3      	subs	r3, r2, r3
 801ce42:	4a1f      	ldr	r2, [pc, #124]	; (801cec0 <prvHeapInit+0xac>)
 801ce44:	4413      	add	r3, r2
 801ce46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801ce4c:	4a1d      	ldr	r2, [pc, #116]	; (801cec4 <prvHeapInit+0xb0>)
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801ce52:	4b1c      	ldr	r3, [pc, #112]	; (801cec4 <prvHeapInit+0xb0>)
 801ce54:	2200      	movs	r2, #0
 801ce56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	68ba      	ldr	r2, [r7, #8]
 801ce5c:	4413      	add	r3, r2
 801ce5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801ce60:	2208      	movs	r2, #8
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	1a9b      	subs	r3, r3, r2
 801ce66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ce68:	68fb      	ldr	r3, [r7, #12]
 801ce6a:	f023 0307 	bic.w	r3, r3, #7
 801ce6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	4a15      	ldr	r2, [pc, #84]	; (801cec8 <prvHeapInit+0xb4>)
 801ce74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801ce76:	4b14      	ldr	r3, [pc, #80]	; (801cec8 <prvHeapInit+0xb4>)
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ce7e:	4b12      	ldr	r3, [pc, #72]	; (801cec8 <prvHeapInit+0xb4>)
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	2200      	movs	r2, #0
 801ce84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801ce8a:	683b      	ldr	r3, [r7, #0]
 801ce8c:	68fa      	ldr	r2, [r7, #12]
 801ce8e:	1ad2      	subs	r2, r2, r3
 801ce90:	683b      	ldr	r3, [r7, #0]
 801ce92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801ce94:	4b0c      	ldr	r3, [pc, #48]	; (801cec8 <prvHeapInit+0xb4>)
 801ce96:	681a      	ldr	r2, [r3, #0]
 801ce98:	683b      	ldr	r3, [r7, #0]
 801ce9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ce9c:	683b      	ldr	r3, [r7, #0]
 801ce9e:	685b      	ldr	r3, [r3, #4]
 801cea0:	4a0a      	ldr	r2, [pc, #40]	; (801cecc <prvHeapInit+0xb8>)
 801cea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cea4:	683b      	ldr	r3, [r7, #0]
 801cea6:	685b      	ldr	r3, [r3, #4]
 801cea8:	4a09      	ldr	r2, [pc, #36]	; (801ced0 <prvHeapInit+0xbc>)
 801ceaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801ceac:	4b09      	ldr	r3, [pc, #36]	; (801ced4 <prvHeapInit+0xc0>)
 801ceae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801ceb2:	601a      	str	r2, [r3, #0]
}
 801ceb4:	bf00      	nop
 801ceb6:	3714      	adds	r7, #20
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cebe:	4770      	bx	lr
 801cec0:	20001d4c 	.word	0x20001d4c
 801cec4:	20009d4c 	.word	0x20009d4c
 801cec8:	20009d54 	.word	0x20009d54
 801cecc:	20009d5c 	.word	0x20009d5c
 801ced0:	20009d58 	.word	0x20009d58
 801ced4:	20009d68 	.word	0x20009d68

0801ced8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801ced8:	b480      	push	{r7}
 801ceda:	b085      	sub	sp, #20
 801cedc:	af00      	add	r7, sp, #0
 801cede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801cee0:	4b28      	ldr	r3, [pc, #160]	; (801cf84 <prvInsertBlockIntoFreeList+0xac>)
 801cee2:	60fb      	str	r3, [r7, #12]
 801cee4:	e002      	b.n	801ceec <prvInsertBlockIntoFreeList+0x14>
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	60fb      	str	r3, [r7, #12]
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	687a      	ldr	r2, [r7, #4]
 801cef2:	429a      	cmp	r2, r3
 801cef4:	d8f7      	bhi.n	801cee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801cefa:	68fb      	ldr	r3, [r7, #12]
 801cefc:	685b      	ldr	r3, [r3, #4]
 801cefe:	68ba      	ldr	r2, [r7, #8]
 801cf00:	4413      	add	r3, r2
 801cf02:	687a      	ldr	r2, [r7, #4]
 801cf04:	429a      	cmp	r2, r3
 801cf06:	d108      	bne.n	801cf1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	685a      	ldr	r2, [r3, #4]
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	685b      	ldr	r3, [r3, #4]
 801cf10:	441a      	add	r2, r3
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	685b      	ldr	r3, [r3, #4]
 801cf22:	68ba      	ldr	r2, [r7, #8]
 801cf24:	441a      	add	r2, r3
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	429a      	cmp	r2, r3
 801cf2c:	d118      	bne.n	801cf60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	681a      	ldr	r2, [r3, #0]
 801cf32:	4b15      	ldr	r3, [pc, #84]	; (801cf88 <prvInsertBlockIntoFreeList+0xb0>)
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	429a      	cmp	r2, r3
 801cf38:	d00d      	beq.n	801cf56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	685a      	ldr	r2, [r3, #4]
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	685b      	ldr	r3, [r3, #4]
 801cf44:	441a      	add	r2, r3
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	681a      	ldr	r2, [r3, #0]
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	601a      	str	r2, [r3, #0]
 801cf54:	e008      	b.n	801cf68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801cf56:	4b0c      	ldr	r3, [pc, #48]	; (801cf88 <prvInsertBlockIntoFreeList+0xb0>)
 801cf58:	681a      	ldr	r2, [r3, #0]
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	601a      	str	r2, [r3, #0]
 801cf5e:	e003      	b.n	801cf68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	681a      	ldr	r2, [r3, #0]
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801cf68:	68fa      	ldr	r2, [r7, #12]
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	429a      	cmp	r2, r3
 801cf6e:	d002      	beq.n	801cf76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	687a      	ldr	r2, [r7, #4]
 801cf74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801cf76:	bf00      	nop
 801cf78:	3714      	adds	r7, #20
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf80:	4770      	bx	lr
 801cf82:	bf00      	nop
 801cf84:	20009d4c 	.word	0x20009d4c
 801cf88:	20009d54 	.word	0x20009d54

0801cf8c <_ZdlPv>:
 801cf8c:	f003 b8da 	b.w	8020144 <free>

0801cf90 <_ZdlPvj>:
 801cf90:	f7ff bffc 	b.w	801cf8c <_ZdlPv>

0801cf94 <_Znwj>:
 801cf94:	2801      	cmp	r0, #1
 801cf96:	bf38      	it	cc
 801cf98:	2001      	movcc	r0, #1
 801cf9a:	b510      	push	{r4, lr}
 801cf9c:	4604      	mov	r4, r0
 801cf9e:	4620      	mov	r0, r4
 801cfa0:	f003 f8c8 	bl	8020134 <malloc>
 801cfa4:	b100      	cbz	r0, 801cfa8 <_Znwj+0x14>
 801cfa6:	bd10      	pop	{r4, pc}
 801cfa8:	f000 f812 	bl	801cfd0 <_ZSt15get_new_handlerv>
 801cfac:	b908      	cbnz	r0, 801cfb2 <_Znwj+0x1e>
 801cfae:	f003 f8ba 	bl	8020126 <abort>
 801cfb2:	4780      	blx	r0
 801cfb4:	e7f3      	b.n	801cf9e <_Znwj+0xa>

0801cfb6 <_ZNSaIcEC1Ev>:
 801cfb6:	4770      	bx	lr

0801cfb8 <_ZNSaIcEC1ERKS_>:
 801cfb8:	4770      	bx	lr

0801cfba <_ZNSaIcED1Ev>:
 801cfba:	4770      	bx	lr

0801cfbc <_ZSt17__throw_bad_allocv>:
 801cfbc:	b508      	push	{r3, lr}
 801cfbe:	f003 f8b2 	bl	8020126 <abort>

0801cfc2 <_ZSt28__throw_bad_array_new_lengthv>:
 801cfc2:	b508      	push	{r3, lr}
 801cfc4:	f003 f8af 	bl	8020126 <abort>

0801cfc8 <_ZSt20__throw_length_errorPKc>:
 801cfc8:	b508      	push	{r3, lr}
 801cfca:	f003 f8ac 	bl	8020126 <abort>
	...

0801cfd0 <_ZSt15get_new_handlerv>:
 801cfd0:	4b01      	ldr	r3, [pc, #4]	; (801cfd8 <_ZSt15get_new_handlerv+0x8>)
 801cfd2:	e8d3 0faf 	lda	r0, [r3]
 801cfd6:	4770      	bx	lr
 801cfd8:	20009d6c 	.word	0x20009d6c

0801cfdc <fmod>:
 801cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfde:	ec57 6b10 	vmov	r6, r7, d0
 801cfe2:	ec55 4b11 	vmov	r4, r5, d1
 801cfe6:	ed2d 8b02 	vpush	{d8}
 801cfea:	f000 fc83 	bl	801d8f4 <__ieee754_fmod>
 801cfee:	4622      	mov	r2, r4
 801cff0:	462b      	mov	r3, r5
 801cff2:	4630      	mov	r0, r6
 801cff4:	4639      	mov	r1, r7
 801cff6:	eeb0 8a40 	vmov.f32	s16, s0
 801cffa:	eef0 8a60 	vmov.f32	s17, s1
 801cffe:	f7e3 fd87 	bl	8000b10 <__aeabi_dcmpun>
 801d002:	b990      	cbnz	r0, 801d02a <fmod+0x4e>
 801d004:	2200      	movs	r2, #0
 801d006:	2300      	movs	r3, #0
 801d008:	4620      	mov	r0, r4
 801d00a:	4629      	mov	r1, r5
 801d00c:	f7e3 fd4e 	bl	8000aac <__aeabi_dcmpeq>
 801d010:	b158      	cbz	r0, 801d02a <fmod+0x4e>
 801d012:	f003 fb79 	bl	8020708 <__errno>
 801d016:	2321      	movs	r3, #33	; 0x21
 801d018:	2200      	movs	r2, #0
 801d01a:	6003      	str	r3, [r0, #0]
 801d01c:	2300      	movs	r3, #0
 801d01e:	4610      	mov	r0, r2
 801d020:	4619      	mov	r1, r3
 801d022:	f7e3 fc05 	bl	8000830 <__aeabi_ddiv>
 801d026:	ec41 0b18 	vmov	d8, r0, r1
 801d02a:	eeb0 0a48 	vmov.f32	s0, s16
 801d02e:	eef0 0a68 	vmov.f32	s1, s17
 801d032:	ecbd 8b02 	vpop	{d8}
 801d036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d038 <pow>:
 801d038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d03a:	ec55 4b11 	vmov	r4, r5, d1
 801d03e:	ed2d 8b02 	vpush	{d8}
 801d042:	eeb0 8a40 	vmov.f32	s16, s0
 801d046:	eef0 8a60 	vmov.f32	s17, s1
 801d04a:	f000 fd61 	bl	801db10 <__ieee754_pow>
 801d04e:	4622      	mov	r2, r4
 801d050:	462b      	mov	r3, r5
 801d052:	4620      	mov	r0, r4
 801d054:	4629      	mov	r1, r5
 801d056:	ec57 6b10 	vmov	r6, r7, d0
 801d05a:	f7e3 fd59 	bl	8000b10 <__aeabi_dcmpun>
 801d05e:	2800      	cmp	r0, #0
 801d060:	d13b      	bne.n	801d0da <pow+0xa2>
 801d062:	2200      	movs	r2, #0
 801d064:	2300      	movs	r3, #0
 801d066:	ec51 0b18 	vmov	r0, r1, d8
 801d06a:	f7e3 fd1f 	bl	8000aac <__aeabi_dcmpeq>
 801d06e:	b1b8      	cbz	r0, 801d0a0 <pow+0x68>
 801d070:	2200      	movs	r2, #0
 801d072:	2300      	movs	r3, #0
 801d074:	4620      	mov	r0, r4
 801d076:	4629      	mov	r1, r5
 801d078:	f7e3 fd18 	bl	8000aac <__aeabi_dcmpeq>
 801d07c:	2800      	cmp	r0, #0
 801d07e:	d146      	bne.n	801d10e <pow+0xd6>
 801d080:	ec45 4b10 	vmov	d0, r4, r5
 801d084:	f000 f93e 	bl	801d304 <finite>
 801d088:	b338      	cbz	r0, 801d0da <pow+0xa2>
 801d08a:	2200      	movs	r2, #0
 801d08c:	2300      	movs	r3, #0
 801d08e:	4620      	mov	r0, r4
 801d090:	4629      	mov	r1, r5
 801d092:	f7e3 fd15 	bl	8000ac0 <__aeabi_dcmplt>
 801d096:	b300      	cbz	r0, 801d0da <pow+0xa2>
 801d098:	f003 fb36 	bl	8020708 <__errno>
 801d09c:	2322      	movs	r3, #34	; 0x22
 801d09e:	e01b      	b.n	801d0d8 <pow+0xa0>
 801d0a0:	ec47 6b10 	vmov	d0, r6, r7
 801d0a4:	f000 f92e 	bl	801d304 <finite>
 801d0a8:	b9e0      	cbnz	r0, 801d0e4 <pow+0xac>
 801d0aa:	eeb0 0a48 	vmov.f32	s0, s16
 801d0ae:	eef0 0a68 	vmov.f32	s1, s17
 801d0b2:	f000 f927 	bl	801d304 <finite>
 801d0b6:	b1a8      	cbz	r0, 801d0e4 <pow+0xac>
 801d0b8:	ec45 4b10 	vmov	d0, r4, r5
 801d0bc:	f000 f922 	bl	801d304 <finite>
 801d0c0:	b180      	cbz	r0, 801d0e4 <pow+0xac>
 801d0c2:	4632      	mov	r2, r6
 801d0c4:	463b      	mov	r3, r7
 801d0c6:	4630      	mov	r0, r6
 801d0c8:	4639      	mov	r1, r7
 801d0ca:	f7e3 fd21 	bl	8000b10 <__aeabi_dcmpun>
 801d0ce:	2800      	cmp	r0, #0
 801d0d0:	d0e2      	beq.n	801d098 <pow+0x60>
 801d0d2:	f003 fb19 	bl	8020708 <__errno>
 801d0d6:	2321      	movs	r3, #33	; 0x21
 801d0d8:	6003      	str	r3, [r0, #0]
 801d0da:	ecbd 8b02 	vpop	{d8}
 801d0de:	ec47 6b10 	vmov	d0, r6, r7
 801d0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0e4:	2200      	movs	r2, #0
 801d0e6:	2300      	movs	r3, #0
 801d0e8:	4630      	mov	r0, r6
 801d0ea:	4639      	mov	r1, r7
 801d0ec:	f7e3 fcde 	bl	8000aac <__aeabi_dcmpeq>
 801d0f0:	2800      	cmp	r0, #0
 801d0f2:	d0f2      	beq.n	801d0da <pow+0xa2>
 801d0f4:	eeb0 0a48 	vmov.f32	s0, s16
 801d0f8:	eef0 0a68 	vmov.f32	s1, s17
 801d0fc:	f000 f902 	bl	801d304 <finite>
 801d100:	2800      	cmp	r0, #0
 801d102:	d0ea      	beq.n	801d0da <pow+0xa2>
 801d104:	ec45 4b10 	vmov	d0, r4, r5
 801d108:	f000 f8fc 	bl	801d304 <finite>
 801d10c:	e7c3      	b.n	801d096 <pow+0x5e>
 801d10e:	2600      	movs	r6, #0
 801d110:	4f00      	ldr	r7, [pc, #0]	; (801d114 <pow+0xdc>)
 801d112:	e7e2      	b.n	801d0da <pow+0xa2>
 801d114:	3ff00000 	.word	0x3ff00000

0801d118 <sqrt>:
 801d118:	b538      	push	{r3, r4, r5, lr}
 801d11a:	ec55 4b10 	vmov	r4, r5, d0
 801d11e:	ed2d 8b02 	vpush	{d8}
 801d122:	f000 f8fb 	bl	801d31c <__ieee754_sqrt>
 801d126:	4622      	mov	r2, r4
 801d128:	462b      	mov	r3, r5
 801d12a:	4620      	mov	r0, r4
 801d12c:	4629      	mov	r1, r5
 801d12e:	eeb0 8a40 	vmov.f32	s16, s0
 801d132:	eef0 8a60 	vmov.f32	s17, s1
 801d136:	f7e3 fceb 	bl	8000b10 <__aeabi_dcmpun>
 801d13a:	b990      	cbnz	r0, 801d162 <sqrt+0x4a>
 801d13c:	2200      	movs	r2, #0
 801d13e:	2300      	movs	r3, #0
 801d140:	4620      	mov	r0, r4
 801d142:	4629      	mov	r1, r5
 801d144:	f7e3 fcbc 	bl	8000ac0 <__aeabi_dcmplt>
 801d148:	b158      	cbz	r0, 801d162 <sqrt+0x4a>
 801d14a:	f003 fadd 	bl	8020708 <__errno>
 801d14e:	2321      	movs	r3, #33	; 0x21
 801d150:	2200      	movs	r2, #0
 801d152:	6003      	str	r3, [r0, #0]
 801d154:	2300      	movs	r3, #0
 801d156:	4610      	mov	r0, r2
 801d158:	4619      	mov	r1, r3
 801d15a:	f7e3 fb69 	bl	8000830 <__aeabi_ddiv>
 801d15e:	ec41 0b18 	vmov	d8, r0, r1
 801d162:	eeb0 0a48 	vmov.f32	s0, s16
 801d166:	eef0 0a68 	vmov.f32	s1, s17
 801d16a:	ecbd 8b02 	vpop	{d8}
 801d16e:	bd38      	pop	{r3, r4, r5, pc}

0801d170 <tan>:
 801d170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d172:	ec53 2b10 	vmov	r2, r3, d0
 801d176:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d17a:	4815      	ldr	r0, [pc, #84]	; (801d1d0 <tan+0x60>)
 801d17c:	4281      	cmp	r1, r0
 801d17e:	dc07      	bgt.n	801d190 <tan+0x20>
 801d180:	2001      	movs	r0, #1
 801d182:	ed9f 1b11 	vldr	d1, [pc, #68]	; 801d1c8 <tan+0x58>
 801d186:	b005      	add	sp, #20
 801d188:	f85d eb04 	ldr.w	lr, [sp], #4
 801d18c:	f000 b9a8 	b.w	801d4e0 <__kernel_tan>
 801d190:	4810      	ldr	r0, [pc, #64]	; (801d1d4 <tan+0x64>)
 801d192:	4281      	cmp	r1, r0
 801d194:	dd09      	ble.n	801d1aa <tan+0x3a>
 801d196:	ee10 0a10 	vmov	r0, s0
 801d19a:	4619      	mov	r1, r3
 801d19c:	f7e3 f866 	bl	800026c <__aeabi_dsub>
 801d1a0:	ec41 0b10 	vmov	d0, r0, r1
 801d1a4:	b005      	add	sp, #20
 801d1a6:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1aa:	4668      	mov	r0, sp
 801d1ac:	f001 f9e0 	bl	801e570 <__ieee754_rem_pio2>
 801d1b0:	0040      	lsls	r0, r0, #1
 801d1b2:	f000 0002 	and.w	r0, r0, #2
 801d1b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d1ba:	ed9d 0b00 	vldr	d0, [sp]
 801d1be:	f1c0 0001 	rsb	r0, r0, #1
 801d1c2:	f000 f98d 	bl	801d4e0 <__kernel_tan>
 801d1c6:	e7ed      	b.n	801d1a4 <tan+0x34>
	...
 801d1d0:	3fe921fb 	.word	0x3fe921fb
 801d1d4:	7fefffff 	.word	0x7fefffff

0801d1d8 <atan2f>:
 801d1d8:	f001 bc80 	b.w	801eadc <__ieee754_atan2f>

0801d1dc <cosf>:
 801d1dc:	ee10 3a10 	vmov	r3, s0
 801d1e0:	b507      	push	{r0, r1, r2, lr}
 801d1e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d1e6:	4a1d      	ldr	r2, [pc, #116]	; (801d25c <cosf+0x80>)
 801d1e8:	4293      	cmp	r3, r2
 801d1ea:	dc06      	bgt.n	801d1fa <cosf+0x1e>
 801d1ec:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801d260 <cosf+0x84>
 801d1f0:	b003      	add	sp, #12
 801d1f2:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1f6:	f001 bbcb 	b.w	801e990 <__kernel_cosf>
 801d1fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d1fe:	db04      	blt.n	801d20a <cosf+0x2e>
 801d200:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d204:	b003      	add	sp, #12
 801d206:	f85d fb04 	ldr.w	pc, [sp], #4
 801d20a:	4668      	mov	r0, sp
 801d20c:	f001 fd04 	bl	801ec18 <__ieee754_rem_pio2f>
 801d210:	f000 0003 	and.w	r0, r0, #3
 801d214:	2801      	cmp	r0, #1
 801d216:	d009      	beq.n	801d22c <cosf+0x50>
 801d218:	2802      	cmp	r0, #2
 801d21a:	d010      	beq.n	801d23e <cosf+0x62>
 801d21c:	b9b0      	cbnz	r0, 801d24c <cosf+0x70>
 801d21e:	eddd 0a01 	vldr	s1, [sp, #4]
 801d222:	ed9d 0a00 	vldr	s0, [sp]
 801d226:	f001 fbb3 	bl	801e990 <__kernel_cosf>
 801d22a:	e7eb      	b.n	801d204 <cosf+0x28>
 801d22c:	eddd 0a01 	vldr	s1, [sp, #4]
 801d230:	ed9d 0a00 	vldr	s0, [sp]
 801d234:	f001 fc0a 	bl	801ea4c <__kernel_sinf>
 801d238:	eeb1 0a40 	vneg.f32	s0, s0
 801d23c:	e7e2      	b.n	801d204 <cosf+0x28>
 801d23e:	eddd 0a01 	vldr	s1, [sp, #4]
 801d242:	ed9d 0a00 	vldr	s0, [sp]
 801d246:	f001 fba3 	bl	801e990 <__kernel_cosf>
 801d24a:	e7f5      	b.n	801d238 <cosf+0x5c>
 801d24c:	2001      	movs	r0, #1
 801d24e:	eddd 0a01 	vldr	s1, [sp, #4]
 801d252:	ed9d 0a00 	vldr	s0, [sp]
 801d256:	f001 fbf9 	bl	801ea4c <__kernel_sinf>
 801d25a:	e7d3      	b.n	801d204 <cosf+0x28>
 801d25c:	3f490fd8 	.word	0x3f490fd8
 801d260:	00000000 	.word	0x00000000

0801d264 <sinf>:
 801d264:	ee10 3a10 	vmov	r3, s0
 801d268:	b507      	push	{r0, r1, r2, lr}
 801d26a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d26e:	4a1e      	ldr	r2, [pc, #120]	; (801d2e8 <sinf+0x84>)
 801d270:	4293      	cmp	r3, r2
 801d272:	dc07      	bgt.n	801d284 <sinf+0x20>
 801d274:	2000      	movs	r0, #0
 801d276:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801d2ec <sinf+0x88>
 801d27a:	b003      	add	sp, #12
 801d27c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d280:	f001 bbe4 	b.w	801ea4c <__kernel_sinf>
 801d284:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d288:	db04      	blt.n	801d294 <sinf+0x30>
 801d28a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d28e:	b003      	add	sp, #12
 801d290:	f85d fb04 	ldr.w	pc, [sp], #4
 801d294:	4668      	mov	r0, sp
 801d296:	f001 fcbf 	bl	801ec18 <__ieee754_rem_pio2f>
 801d29a:	f000 0003 	and.w	r0, r0, #3
 801d29e:	2801      	cmp	r0, #1
 801d2a0:	d00a      	beq.n	801d2b8 <sinf+0x54>
 801d2a2:	2802      	cmp	r0, #2
 801d2a4:	d00f      	beq.n	801d2c6 <sinf+0x62>
 801d2a6:	b9c0      	cbnz	r0, 801d2da <sinf+0x76>
 801d2a8:	2001      	movs	r0, #1
 801d2aa:	eddd 0a01 	vldr	s1, [sp, #4]
 801d2ae:	ed9d 0a00 	vldr	s0, [sp]
 801d2b2:	f001 fbcb 	bl	801ea4c <__kernel_sinf>
 801d2b6:	e7ea      	b.n	801d28e <sinf+0x2a>
 801d2b8:	eddd 0a01 	vldr	s1, [sp, #4]
 801d2bc:	ed9d 0a00 	vldr	s0, [sp]
 801d2c0:	f001 fb66 	bl	801e990 <__kernel_cosf>
 801d2c4:	e7e3      	b.n	801d28e <sinf+0x2a>
 801d2c6:	2001      	movs	r0, #1
 801d2c8:	eddd 0a01 	vldr	s1, [sp, #4]
 801d2cc:	ed9d 0a00 	vldr	s0, [sp]
 801d2d0:	f001 fbbc 	bl	801ea4c <__kernel_sinf>
 801d2d4:	eeb1 0a40 	vneg.f32	s0, s0
 801d2d8:	e7d9      	b.n	801d28e <sinf+0x2a>
 801d2da:	eddd 0a01 	vldr	s1, [sp, #4]
 801d2de:	ed9d 0a00 	vldr	s0, [sp]
 801d2e2:	f001 fb55 	bl	801e990 <__kernel_cosf>
 801d2e6:	e7f5      	b.n	801d2d4 <sinf+0x70>
 801d2e8:	3f490fd8 	.word	0x3f490fd8
 801d2ec:	00000000 	.word	0x00000000

0801d2f0 <log2f>:
 801d2f0:	b508      	push	{r3, lr}
 801d2f2:	f001 fdbb 	bl	801ee6c <logf>
 801d2f6:	eddf 7a02 	vldr	s15, [pc, #8]	; 801d300 <log2f+0x10>
 801d2fa:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801d2fe:	bd08      	pop	{r3, pc}
 801d300:	3f317218 	.word	0x3f317218

0801d304 <finite>:
 801d304:	b082      	sub	sp, #8
 801d306:	ed8d 0b00 	vstr	d0, [sp]
 801d30a:	9801      	ldr	r0, [sp, #4]
 801d30c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801d310:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d314:	0fc0      	lsrs	r0, r0, #31
 801d316:	b002      	add	sp, #8
 801d318:	4770      	bx	lr
	...

0801d31c <__ieee754_sqrt>:
 801d31c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d320:	4e6b      	ldr	r6, [pc, #428]	; (801d4d0 <__ieee754_sqrt+0x1b4>)
 801d322:	ee10 0a10 	vmov	r0, s0
 801d326:	ee10 2a10 	vmov	r2, s0
 801d32a:	ec55 4b10 	vmov	r4, r5, d0
 801d32e:	43ae      	bics	r6, r5
 801d330:	4629      	mov	r1, r5
 801d332:	462b      	mov	r3, r5
 801d334:	d10d      	bne.n	801d352 <__ieee754_sqrt+0x36>
 801d336:	f7e3 f951 	bl	80005dc <__aeabi_dmul>
 801d33a:	4602      	mov	r2, r0
 801d33c:	460b      	mov	r3, r1
 801d33e:	4620      	mov	r0, r4
 801d340:	4629      	mov	r1, r5
 801d342:	f7e2 ff95 	bl	8000270 <__adddf3>
 801d346:	4604      	mov	r4, r0
 801d348:	460d      	mov	r5, r1
 801d34a:	ec45 4b10 	vmov	d0, r4, r5
 801d34e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d352:	2d00      	cmp	r5, #0
 801d354:	dc0b      	bgt.n	801d36e <__ieee754_sqrt+0x52>
 801d356:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d35a:	4326      	orrs	r6, r4
 801d35c:	d0f5      	beq.n	801d34a <__ieee754_sqrt+0x2e>
 801d35e:	b135      	cbz	r5, 801d36e <__ieee754_sqrt+0x52>
 801d360:	f7e2 ff84 	bl	800026c <__aeabi_dsub>
 801d364:	4602      	mov	r2, r0
 801d366:	460b      	mov	r3, r1
 801d368:	f7e3 fa62 	bl	8000830 <__aeabi_ddiv>
 801d36c:	e7eb      	b.n	801d346 <__ieee754_sqrt+0x2a>
 801d36e:	1509      	asrs	r1, r1, #20
 801d370:	f000 8091 	beq.w	801d496 <__ieee754_sqrt+0x17a>
 801d374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d378:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801d37c:	07c9      	lsls	r1, r1, #31
 801d37e:	f04f 0500 	mov.w	r5, #0
 801d382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d386:	ea4f 0666 	mov.w	r6, r6, asr #1
 801d38a:	f04f 0e16 	mov.w	lr, #22
 801d38e:	46ac      	mov	ip, r5
 801d390:	bf58      	it	pl
 801d392:	005b      	lslpl	r3, r3, #1
 801d394:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d398:	bf5c      	itt	pl
 801d39a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801d39e:	0052      	lslpl	r2, r2, #1
 801d3a0:	005b      	lsls	r3, r3, #1
 801d3a2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d3a6:	0052      	lsls	r2, r2, #1
 801d3a8:	eb0c 0001 	add.w	r0, ip, r1
 801d3ac:	4298      	cmp	r0, r3
 801d3ae:	bfde      	ittt	le
 801d3b0:	1a1b      	suble	r3, r3, r0
 801d3b2:	eb00 0c01 	addle.w	ip, r0, r1
 801d3b6:	186d      	addle	r5, r5, r1
 801d3b8:	f1be 0e01 	subs.w	lr, lr, #1
 801d3bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d3c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d3c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d3c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d3cc:	d1ec      	bne.n	801d3a8 <__ieee754_sqrt+0x8c>
 801d3ce:	4674      	mov	r4, lr
 801d3d0:	2720      	movs	r7, #32
 801d3d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801d3d6:	4563      	cmp	r3, ip
 801d3d8:	eb01 000e 	add.w	r0, r1, lr
 801d3dc:	dc02      	bgt.n	801d3e4 <__ieee754_sqrt+0xc8>
 801d3de:	d114      	bne.n	801d40a <__ieee754_sqrt+0xee>
 801d3e0:	4290      	cmp	r0, r2
 801d3e2:	d812      	bhi.n	801d40a <__ieee754_sqrt+0xee>
 801d3e4:	2800      	cmp	r0, #0
 801d3e6:	eb00 0e01 	add.w	lr, r0, r1
 801d3ea:	da59      	bge.n	801d4a0 <__ieee754_sqrt+0x184>
 801d3ec:	f1be 0f00 	cmp.w	lr, #0
 801d3f0:	db56      	blt.n	801d4a0 <__ieee754_sqrt+0x184>
 801d3f2:	f10c 0801 	add.w	r8, ip, #1
 801d3f6:	eba3 030c 	sub.w	r3, r3, ip
 801d3fa:	4290      	cmp	r0, r2
 801d3fc:	440c      	add	r4, r1
 801d3fe:	eba2 0200 	sub.w	r2, r2, r0
 801d402:	bf88      	it	hi
 801d404:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801d408:	46c4      	mov	ip, r8
 801d40a:	005b      	lsls	r3, r3, #1
 801d40c:	3f01      	subs	r7, #1
 801d40e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d412:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d416:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d41a:	d1dc      	bne.n	801d3d6 <__ieee754_sqrt+0xba>
 801d41c:	4313      	orrs	r3, r2
 801d41e:	d01b      	beq.n	801d458 <__ieee754_sqrt+0x13c>
 801d420:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801d4d4 <__ieee754_sqrt+0x1b8>
 801d424:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 801d4d8 <__ieee754_sqrt+0x1bc>
 801d428:	e9da 0100 	ldrd	r0, r1, [sl]
 801d42c:	e9db 2300 	ldrd	r2, r3, [fp]
 801d430:	e9da 8900 	ldrd	r8, r9, [sl]
 801d434:	f7e2 ff1a 	bl	800026c <__aeabi_dsub>
 801d438:	4602      	mov	r2, r0
 801d43a:	460b      	mov	r3, r1
 801d43c:	4640      	mov	r0, r8
 801d43e:	4649      	mov	r1, r9
 801d440:	f7e3 fb48 	bl	8000ad4 <__aeabi_dcmple>
 801d444:	b140      	cbz	r0, 801d458 <__ieee754_sqrt+0x13c>
 801d446:	f1b4 3fff 	cmp.w	r4, #4294967295
 801d44a:	e9da 0100 	ldrd	r0, r1, [sl]
 801d44e:	e9db 2300 	ldrd	r2, r3, [fp]
 801d452:	d127      	bne.n	801d4a4 <__ieee754_sqrt+0x188>
 801d454:	3501      	adds	r5, #1
 801d456:	463c      	mov	r4, r7
 801d458:	106a      	asrs	r2, r5, #1
 801d45a:	07e9      	lsls	r1, r5, #31
 801d45c:	ea4f 0354 	mov.w	r3, r4, lsr #1
 801d460:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d464:	bf48      	it	mi
 801d466:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d46a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d46e:	461c      	mov	r4, r3
 801d470:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801d474:	e769      	b.n	801d34a <__ieee754_sqrt+0x2e>
 801d476:	0ad3      	lsrs	r3, r2, #11
 801d478:	3815      	subs	r0, #21
 801d47a:	0552      	lsls	r2, r2, #21
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d0fa      	beq.n	801d476 <__ieee754_sqrt+0x15a>
 801d480:	02dc      	lsls	r4, r3, #11
 801d482:	d50a      	bpl.n	801d49a <__ieee754_sqrt+0x17e>
 801d484:	f1c1 0420 	rsb	r4, r1, #32
 801d488:	1e4d      	subs	r5, r1, #1
 801d48a:	fa22 f404 	lsr.w	r4, r2, r4
 801d48e:	408a      	lsls	r2, r1
 801d490:	1b41      	subs	r1, r0, r5
 801d492:	4323      	orrs	r3, r4
 801d494:	e76e      	b.n	801d374 <__ieee754_sqrt+0x58>
 801d496:	4608      	mov	r0, r1
 801d498:	e7f0      	b.n	801d47c <__ieee754_sqrt+0x160>
 801d49a:	005b      	lsls	r3, r3, #1
 801d49c:	3101      	adds	r1, #1
 801d49e:	e7ef      	b.n	801d480 <__ieee754_sqrt+0x164>
 801d4a0:	46e0      	mov	r8, ip
 801d4a2:	e7a8      	b.n	801d3f6 <__ieee754_sqrt+0xda>
 801d4a4:	e9da 8900 	ldrd	r8, r9, [sl]
 801d4a8:	f7e2 fee2 	bl	8000270 <__adddf3>
 801d4ac:	4602      	mov	r2, r0
 801d4ae:	460b      	mov	r3, r1
 801d4b0:	4640      	mov	r0, r8
 801d4b2:	4649      	mov	r1, r9
 801d4b4:	f7e3 fb04 	bl	8000ac0 <__aeabi_dcmplt>
 801d4b8:	b128      	cbz	r0, 801d4c6 <__ieee754_sqrt+0x1aa>
 801d4ba:	1ca0      	adds	r0, r4, #2
 801d4bc:	f104 0402 	add.w	r4, r4, #2
 801d4c0:	bf08      	it	eq
 801d4c2:	3501      	addeq	r5, #1
 801d4c4:	e7c8      	b.n	801d458 <__ieee754_sqrt+0x13c>
 801d4c6:	3401      	adds	r4, #1
 801d4c8:	f024 0401 	bic.w	r4, r4, #1
 801d4cc:	e7c4      	b.n	801d458 <__ieee754_sqrt+0x13c>
 801d4ce:	bf00      	nop
 801d4d0:	7ff00000 	.word	0x7ff00000
 801d4d4:	200000a0 	.word	0x200000a0
 801d4d8:	200000a8 	.word	0x200000a8
 801d4dc:	00000000 	.word	0x00000000

0801d4e0 <__kernel_tan>:
 801d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4e4:	ec5b ab10 	vmov	sl, fp, d0
 801d4e8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801d4ec:	4be0      	ldr	r3, [pc, #896]	; (801d870 <__kernel_tan+0x390>)
 801d4ee:	4606      	mov	r6, r0
 801d4f0:	429f      	cmp	r7, r3
 801d4f2:	ed2d 8b06 	vpush	{d8-d10}
 801d4f6:	b083      	sub	sp, #12
 801d4f8:	ec59 8b11 	vmov	r8, r9, d1
 801d4fc:	f8cd b000 	str.w	fp, [sp]
 801d500:	dc61      	bgt.n	801d5c6 <__kernel_tan+0xe6>
 801d502:	ee10 0a10 	vmov	r0, s0
 801d506:	4659      	mov	r1, fp
 801d508:	f7e3 fb18 	bl	8000b3c <__aeabi_d2iz>
 801d50c:	4605      	mov	r5, r0
 801d50e:	2800      	cmp	r0, #0
 801d510:	f040 8083 	bne.w	801d61a <__kernel_tan+0x13a>
 801d514:	1c73      	adds	r3, r6, #1
 801d516:	4652      	mov	r2, sl
 801d518:	4313      	orrs	r3, r2
 801d51a:	433b      	orrs	r3, r7
 801d51c:	d112      	bne.n	801d544 <__kernel_tan+0x64>
 801d51e:	ec4b ab10 	vmov	d0, sl, fp
 801d522:	f001 fa2b 	bl	801e97c <fabs>
 801d526:	2000      	movs	r0, #0
 801d528:	49d2      	ldr	r1, [pc, #840]	; (801d874 <__kernel_tan+0x394>)
 801d52a:	ec53 2b10 	vmov	r2, r3, d0
 801d52e:	f7e3 f97f 	bl	8000830 <__aeabi_ddiv>
 801d532:	4682      	mov	sl, r0
 801d534:	468b      	mov	fp, r1
 801d536:	ec4b ab10 	vmov	d0, sl, fp
 801d53a:	b003      	add	sp, #12
 801d53c:	ecbd 8b06 	vpop	{d8-d10}
 801d540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d544:	2e01      	cmp	r6, #1
 801d546:	d0f6      	beq.n	801d536 <__kernel_tan+0x56>
 801d548:	4642      	mov	r2, r8
 801d54a:	464b      	mov	r3, r9
 801d54c:	4650      	mov	r0, sl
 801d54e:	4659      	mov	r1, fp
 801d550:	f7e2 fe8e 	bl	8000270 <__adddf3>
 801d554:	4602      	mov	r2, r0
 801d556:	460b      	mov	r3, r1
 801d558:	460f      	mov	r7, r1
 801d55a:	2000      	movs	r0, #0
 801d55c:	49c6      	ldr	r1, [pc, #792]	; (801d878 <__kernel_tan+0x398>)
 801d55e:	f7e3 f967 	bl	8000830 <__aeabi_ddiv>
 801d562:	462e      	mov	r6, r5
 801d564:	462c      	mov	r4, r5
 801d566:	e9cd 0100 	strd	r0, r1, [sp]
 801d56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d56e:	4630      	mov	r0, r6
 801d570:	4652      	mov	r2, sl
 801d572:	461d      	mov	r5, r3
 801d574:	4639      	mov	r1, r7
 801d576:	465b      	mov	r3, fp
 801d578:	f7e2 fe78 	bl	800026c <__aeabi_dsub>
 801d57c:	4602      	mov	r2, r0
 801d57e:	460b      	mov	r3, r1
 801d580:	4640      	mov	r0, r8
 801d582:	4649      	mov	r1, r9
 801d584:	f7e2 fe72 	bl	800026c <__aeabi_dsub>
 801d588:	4632      	mov	r2, r6
 801d58a:	462b      	mov	r3, r5
 801d58c:	f7e3 f826 	bl	80005dc <__aeabi_dmul>
 801d590:	4632      	mov	r2, r6
 801d592:	4680      	mov	r8, r0
 801d594:	4689      	mov	r9, r1
 801d596:	462b      	mov	r3, r5
 801d598:	4630      	mov	r0, r6
 801d59a:	4639      	mov	r1, r7
 801d59c:	f7e3 f81e 	bl	80005dc <__aeabi_dmul>
 801d5a0:	2200      	movs	r2, #0
 801d5a2:	4bb4      	ldr	r3, [pc, #720]	; (801d874 <__kernel_tan+0x394>)
 801d5a4:	f7e2 fe64 	bl	8000270 <__adddf3>
 801d5a8:	4602      	mov	r2, r0
 801d5aa:	460b      	mov	r3, r1
 801d5ac:	4640      	mov	r0, r8
 801d5ae:	4649      	mov	r1, r9
 801d5b0:	f7e2 fe5e 	bl	8000270 <__adddf3>
 801d5b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d5b8:	f7e3 f810 	bl	80005dc <__aeabi_dmul>
 801d5bc:	4622      	mov	r2, r4
 801d5be:	462b      	mov	r3, r5
 801d5c0:	f7e2 fe56 	bl	8000270 <__adddf3>
 801d5c4:	e7b5      	b.n	801d532 <__kernel_tan+0x52>
 801d5c6:	4bad      	ldr	r3, [pc, #692]	; (801d87c <__kernel_tan+0x39c>)
 801d5c8:	429f      	cmp	r7, r3
 801d5ca:	dd26      	ble.n	801d61a <__kernel_tan+0x13a>
 801d5cc:	9b00      	ldr	r3, [sp, #0]
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	da09      	bge.n	801d5e6 <__kernel_tan+0x106>
 801d5d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d5d6:	ee10 aa10 	vmov	sl, s0
 801d5da:	ee11 8a10 	vmov	r8, s2
 801d5de:	469b      	mov	fp, r3
 801d5e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d5e4:	4699      	mov	r9, r3
 801d5e6:	4652      	mov	r2, sl
 801d5e8:	465b      	mov	r3, fp
 801d5ea:	a183      	add	r1, pc, #524	; (adr r1, 801d7f8 <__kernel_tan+0x318>)
 801d5ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d5f0:	f7e2 fe3c 	bl	800026c <__aeabi_dsub>
 801d5f4:	4604      	mov	r4, r0
 801d5f6:	460d      	mov	r5, r1
 801d5f8:	4642      	mov	r2, r8
 801d5fa:	464b      	mov	r3, r9
 801d5fc:	f04f 0800 	mov.w	r8, #0
 801d600:	f04f 0900 	mov.w	r9, #0
 801d604:	a17e      	add	r1, pc, #504	; (adr r1, 801d800 <__kernel_tan+0x320>)
 801d606:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d60a:	f7e2 fe2f 	bl	800026c <__aeabi_dsub>
 801d60e:	4622      	mov	r2, r4
 801d610:	462b      	mov	r3, r5
 801d612:	f7e2 fe2d 	bl	8000270 <__adddf3>
 801d616:	4682      	mov	sl, r0
 801d618:	468b      	mov	fp, r1
 801d61a:	4652      	mov	r2, sl
 801d61c:	465b      	mov	r3, fp
 801d61e:	4650      	mov	r0, sl
 801d620:	4659      	mov	r1, fp
 801d622:	f7e2 ffdb 	bl	80005dc <__aeabi_dmul>
 801d626:	4602      	mov	r2, r0
 801d628:	460b      	mov	r3, r1
 801d62a:	ec43 2b18 	vmov	d8, r2, r3
 801d62e:	f7e2 ffd5 	bl	80005dc <__aeabi_dmul>
 801d632:	4604      	mov	r4, r0
 801d634:	460d      	mov	r5, r1
 801d636:	4650      	mov	r0, sl
 801d638:	4659      	mov	r1, fp
 801d63a:	ec53 2b18 	vmov	r2, r3, d8
 801d63e:	f7e2 ffcd 	bl	80005dc <__aeabi_dmul>
 801d642:	a371      	add	r3, pc, #452	; (adr r3, 801d808 <__kernel_tan+0x328>)
 801d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d648:	ec41 0b19 	vmov	d9, r0, r1
 801d64c:	4620      	mov	r0, r4
 801d64e:	4629      	mov	r1, r5
 801d650:	f7e2 ffc4 	bl	80005dc <__aeabi_dmul>
 801d654:	a36e      	add	r3, pc, #440	; (adr r3, 801d810 <__kernel_tan+0x330>)
 801d656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d65a:	f7e2 fe09 	bl	8000270 <__adddf3>
 801d65e:	4622      	mov	r2, r4
 801d660:	462b      	mov	r3, r5
 801d662:	f7e2 ffbb 	bl	80005dc <__aeabi_dmul>
 801d666:	a36c      	add	r3, pc, #432	; (adr r3, 801d818 <__kernel_tan+0x338>)
 801d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d66c:	f7e2 fe00 	bl	8000270 <__adddf3>
 801d670:	4622      	mov	r2, r4
 801d672:	462b      	mov	r3, r5
 801d674:	f7e2 ffb2 	bl	80005dc <__aeabi_dmul>
 801d678:	a369      	add	r3, pc, #420	; (adr r3, 801d820 <__kernel_tan+0x340>)
 801d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d67e:	f7e2 fdf7 	bl	8000270 <__adddf3>
 801d682:	4622      	mov	r2, r4
 801d684:	462b      	mov	r3, r5
 801d686:	f7e2 ffa9 	bl	80005dc <__aeabi_dmul>
 801d68a:	a367      	add	r3, pc, #412	; (adr r3, 801d828 <__kernel_tan+0x348>)
 801d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d690:	f7e2 fdee 	bl	8000270 <__adddf3>
 801d694:	4622      	mov	r2, r4
 801d696:	462b      	mov	r3, r5
 801d698:	f7e2 ffa0 	bl	80005dc <__aeabi_dmul>
 801d69c:	a364      	add	r3, pc, #400	; (adr r3, 801d830 <__kernel_tan+0x350>)
 801d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6a2:	f7e2 fde5 	bl	8000270 <__adddf3>
 801d6a6:	ec53 2b18 	vmov	r2, r3, d8
 801d6aa:	f7e2 ff97 	bl	80005dc <__aeabi_dmul>
 801d6ae:	a362      	add	r3, pc, #392	; (adr r3, 801d838 <__kernel_tan+0x358>)
 801d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b4:	ec41 0b1a 	vmov	d10, r0, r1
 801d6b8:	4620      	mov	r0, r4
 801d6ba:	4629      	mov	r1, r5
 801d6bc:	f7e2 ff8e 	bl	80005dc <__aeabi_dmul>
 801d6c0:	a35f      	add	r3, pc, #380	; (adr r3, 801d840 <__kernel_tan+0x360>)
 801d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c6:	f7e2 fdd3 	bl	8000270 <__adddf3>
 801d6ca:	4622      	mov	r2, r4
 801d6cc:	462b      	mov	r3, r5
 801d6ce:	f7e2 ff85 	bl	80005dc <__aeabi_dmul>
 801d6d2:	a35d      	add	r3, pc, #372	; (adr r3, 801d848 <__kernel_tan+0x368>)
 801d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d8:	f7e2 fdca 	bl	8000270 <__adddf3>
 801d6dc:	4622      	mov	r2, r4
 801d6de:	462b      	mov	r3, r5
 801d6e0:	f7e2 ff7c 	bl	80005dc <__aeabi_dmul>
 801d6e4:	a35a      	add	r3, pc, #360	; (adr r3, 801d850 <__kernel_tan+0x370>)
 801d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6ea:	f7e2 fdc1 	bl	8000270 <__adddf3>
 801d6ee:	4622      	mov	r2, r4
 801d6f0:	462b      	mov	r3, r5
 801d6f2:	f7e2 ff73 	bl	80005dc <__aeabi_dmul>
 801d6f6:	a358      	add	r3, pc, #352	; (adr r3, 801d858 <__kernel_tan+0x378>)
 801d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6fc:	f7e2 fdb8 	bl	8000270 <__adddf3>
 801d700:	4622      	mov	r2, r4
 801d702:	462b      	mov	r3, r5
 801d704:	f7e2 ff6a 	bl	80005dc <__aeabi_dmul>
 801d708:	a355      	add	r3, pc, #340	; (adr r3, 801d860 <__kernel_tan+0x380>)
 801d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d70e:	f7e2 fdaf 	bl	8000270 <__adddf3>
 801d712:	4602      	mov	r2, r0
 801d714:	460b      	mov	r3, r1
 801d716:	ec51 0b1a 	vmov	r0, r1, d10
 801d71a:	f7e2 fda9 	bl	8000270 <__adddf3>
 801d71e:	ec53 2b19 	vmov	r2, r3, d9
 801d722:	f7e2 ff5b 	bl	80005dc <__aeabi_dmul>
 801d726:	4642      	mov	r2, r8
 801d728:	464b      	mov	r3, r9
 801d72a:	f7e2 fda1 	bl	8000270 <__adddf3>
 801d72e:	ec53 2b18 	vmov	r2, r3, d8
 801d732:	f7e2 ff53 	bl	80005dc <__aeabi_dmul>
 801d736:	4642      	mov	r2, r8
 801d738:	464b      	mov	r3, r9
 801d73a:	f7e2 fd99 	bl	8000270 <__adddf3>
 801d73e:	4604      	mov	r4, r0
 801d740:	460d      	mov	r5, r1
 801d742:	a349      	add	r3, pc, #292	; (adr r3, 801d868 <__kernel_tan+0x388>)
 801d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d748:	ec51 0b19 	vmov	r0, r1, d9
 801d74c:	f7e2 ff46 	bl	80005dc <__aeabi_dmul>
 801d750:	4622      	mov	r2, r4
 801d752:	462b      	mov	r3, r5
 801d754:	f7e2 fd8c 	bl	8000270 <__adddf3>
 801d758:	460b      	mov	r3, r1
 801d75a:	4602      	mov	r2, r0
 801d75c:	ec41 0b18 	vmov	d8, r0, r1
 801d760:	4650      	mov	r0, sl
 801d762:	4659      	mov	r1, fp
 801d764:	f7e2 fd84 	bl	8000270 <__adddf3>
 801d768:	4b44      	ldr	r3, [pc, #272]	; (801d87c <__kernel_tan+0x39c>)
 801d76a:	4604      	mov	r4, r0
 801d76c:	460d      	mov	r5, r1
 801d76e:	429f      	cmp	r7, r3
 801d770:	f340 8086 	ble.w	801d880 <__kernel_tan+0x3a0>
 801d774:	4630      	mov	r0, r6
 801d776:	f7e2 fec7 	bl	8000508 <__aeabi_i2d>
 801d77a:	4622      	mov	r2, r4
 801d77c:	4680      	mov	r8, r0
 801d77e:	4689      	mov	r9, r1
 801d780:	462b      	mov	r3, r5
 801d782:	4620      	mov	r0, r4
 801d784:	4629      	mov	r1, r5
 801d786:	f7e2 ff29 	bl	80005dc <__aeabi_dmul>
 801d78a:	4606      	mov	r6, r0
 801d78c:	460f      	mov	r7, r1
 801d78e:	4642      	mov	r2, r8
 801d790:	464b      	mov	r3, r9
 801d792:	4620      	mov	r0, r4
 801d794:	4629      	mov	r1, r5
 801d796:	f7e2 fd6b 	bl	8000270 <__adddf3>
 801d79a:	4602      	mov	r2, r0
 801d79c:	460b      	mov	r3, r1
 801d79e:	4630      	mov	r0, r6
 801d7a0:	4639      	mov	r1, r7
 801d7a2:	f7e3 f845 	bl	8000830 <__aeabi_ddiv>
 801d7a6:	ec53 2b18 	vmov	r2, r3, d8
 801d7aa:	f7e2 fd5f 	bl	800026c <__aeabi_dsub>
 801d7ae:	4602      	mov	r2, r0
 801d7b0:	460b      	mov	r3, r1
 801d7b2:	4650      	mov	r0, sl
 801d7b4:	4659      	mov	r1, fp
 801d7b6:	f7e2 fd59 	bl	800026c <__aeabi_dsub>
 801d7ba:	4602      	mov	r2, r0
 801d7bc:	460b      	mov	r3, r1
 801d7be:	f7e2 fd57 	bl	8000270 <__adddf3>
 801d7c2:	4602      	mov	r2, r0
 801d7c4:	460b      	mov	r3, r1
 801d7c6:	4640      	mov	r0, r8
 801d7c8:	4649      	mov	r1, r9
 801d7ca:	f7e2 fd4f 	bl	800026c <__aeabi_dsub>
 801d7ce:	9b00      	ldr	r3, [sp, #0]
 801d7d0:	4604      	mov	r4, r0
 801d7d2:	460d      	mov	r5, r1
 801d7d4:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801d7d8:	f00a 0a02 	and.w	sl, sl, #2
 801d7dc:	f1ca 0001 	rsb	r0, sl, #1
 801d7e0:	f7e2 fe92 	bl	8000508 <__aeabi_i2d>
 801d7e4:	4602      	mov	r2, r0
 801d7e6:	460b      	mov	r3, r1
 801d7e8:	4620      	mov	r0, r4
 801d7ea:	4629      	mov	r1, r5
 801d7ec:	f7e2 fef6 	bl	80005dc <__aeabi_dmul>
 801d7f0:	e69f      	b.n	801d532 <__kernel_tan+0x52>
 801d7f2:	bf00      	nop
 801d7f4:	f3af 8000 	nop.w
 801d7f8:	54442d18 	.word	0x54442d18
 801d7fc:	3fe921fb 	.word	0x3fe921fb
 801d800:	33145c07 	.word	0x33145c07
 801d804:	3c81a626 	.word	0x3c81a626
 801d808:	74bf7ad4 	.word	0x74bf7ad4
 801d80c:	3efb2a70 	.word	0x3efb2a70
 801d810:	32f0a7e9 	.word	0x32f0a7e9
 801d814:	3f12b80f 	.word	0x3f12b80f
 801d818:	1a8d1068 	.word	0x1a8d1068
 801d81c:	3f3026f7 	.word	0x3f3026f7
 801d820:	fee08315 	.word	0xfee08315
 801d824:	3f57dbc8 	.word	0x3f57dbc8
 801d828:	e96e8493 	.word	0xe96e8493
 801d82c:	3f8226e3 	.word	0x3f8226e3
 801d830:	1bb341fe 	.word	0x1bb341fe
 801d834:	3faba1ba 	.word	0x3faba1ba
 801d838:	db605373 	.word	0xdb605373
 801d83c:	bef375cb 	.word	0xbef375cb
 801d840:	a03792a6 	.word	0xa03792a6
 801d844:	3f147e88 	.word	0x3f147e88
 801d848:	f2f26501 	.word	0xf2f26501
 801d84c:	3f4344d8 	.word	0x3f4344d8
 801d850:	c9560328 	.word	0xc9560328
 801d854:	3f6d6d22 	.word	0x3f6d6d22
 801d858:	8406d637 	.word	0x8406d637
 801d85c:	3f9664f4 	.word	0x3f9664f4
 801d860:	1110fe7a 	.word	0x1110fe7a
 801d864:	3fc11111 	.word	0x3fc11111
 801d868:	55555563 	.word	0x55555563
 801d86c:	3fd55555 	.word	0x3fd55555
 801d870:	3e2fffff 	.word	0x3e2fffff
 801d874:	3ff00000 	.word	0x3ff00000
 801d878:	bff00000 	.word	0xbff00000
 801d87c:	3fe59427 	.word	0x3fe59427
 801d880:	2e01      	cmp	r6, #1
 801d882:	d02f      	beq.n	801d8e4 <__kernel_tan+0x404>
 801d884:	2600      	movs	r6, #0
 801d886:	460f      	mov	r7, r1
 801d888:	4602      	mov	r2, r0
 801d88a:	460b      	mov	r3, r1
 801d88c:	4689      	mov	r9, r1
 801d88e:	2000      	movs	r0, #0
 801d890:	4916      	ldr	r1, [pc, #88]	; (801d8ec <__kernel_tan+0x40c>)
 801d892:	46b0      	mov	r8, r6
 801d894:	f7e2 ffcc 	bl	8000830 <__aeabi_ddiv>
 801d898:	4652      	mov	r2, sl
 801d89a:	465b      	mov	r3, fp
 801d89c:	e9cd 0100 	strd	r0, r1, [sp]
 801d8a0:	e9dd 4500 	ldrd	r4, r5, [sp]
 801d8a4:	4630      	mov	r0, r6
 801d8a6:	4639      	mov	r1, r7
 801d8a8:	f7e2 fce0 	bl	800026c <__aeabi_dsub>
 801d8ac:	4602      	mov	r2, r0
 801d8ae:	460b      	mov	r3, r1
 801d8b0:	4634      	mov	r4, r6
 801d8b2:	ec51 0b18 	vmov	r0, r1, d8
 801d8b6:	f7e2 fcd9 	bl	800026c <__aeabi_dsub>
 801d8ba:	4632      	mov	r2, r6
 801d8bc:	462b      	mov	r3, r5
 801d8be:	f7e2 fe8d 	bl	80005dc <__aeabi_dmul>
 801d8c2:	4642      	mov	r2, r8
 801d8c4:	4606      	mov	r6, r0
 801d8c6:	460f      	mov	r7, r1
 801d8c8:	462b      	mov	r3, r5
 801d8ca:	4640      	mov	r0, r8
 801d8cc:	4649      	mov	r1, r9
 801d8ce:	f7e2 fe85 	bl	80005dc <__aeabi_dmul>
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	4b06      	ldr	r3, [pc, #24]	; (801d8f0 <__kernel_tan+0x410>)
 801d8d6:	f7e2 fccb 	bl	8000270 <__adddf3>
 801d8da:	4602      	mov	r2, r0
 801d8dc:	460b      	mov	r3, r1
 801d8de:	4630      	mov	r0, r6
 801d8e0:	4639      	mov	r1, r7
 801d8e2:	e665      	b.n	801d5b0 <__kernel_tan+0xd0>
 801d8e4:	4682      	mov	sl, r0
 801d8e6:	468b      	mov	fp, r1
 801d8e8:	e625      	b.n	801d536 <__kernel_tan+0x56>
 801d8ea:	bf00      	nop
 801d8ec:	bff00000 	.word	0xbff00000
 801d8f0:	3ff00000 	.word	0x3ff00000

0801d8f4 <__ieee754_fmod>:
 801d8f4:	ec53 2b11 	vmov	r2, r3, d1
 801d8f8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801d8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d900:	ea5c 0402 	orrs.w	r4, ip, r2
 801d904:	461e      	mov	r6, r3
 801d906:	ee11 7a10 	vmov	r7, s2
 801d90a:	ee11 ea10 	vmov	lr, s2
 801d90e:	ec51 0b10 	vmov	r0, r1, d0
 801d912:	d00c      	beq.n	801d92e <__ieee754_fmod+0x3a>
 801d914:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801d918:	4c77      	ldr	r4, [pc, #476]	; (801daf8 <__ieee754_fmod+0x204>)
 801d91a:	4689      	mov	r9, r1
 801d91c:	45a0      	cmp	r8, r4
 801d91e:	dc06      	bgt.n	801d92e <__ieee754_fmod+0x3a>
 801d920:	4254      	negs	r4, r2
 801d922:	4d76      	ldr	r5, [pc, #472]	; (801dafc <__ieee754_fmod+0x208>)
 801d924:	4314      	orrs	r4, r2
 801d926:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801d92a:	42ac      	cmp	r4, r5
 801d92c:	d909      	bls.n	801d942 <__ieee754_fmod+0x4e>
 801d92e:	f7e2 fe55 	bl	80005dc <__aeabi_dmul>
 801d932:	4602      	mov	r2, r0
 801d934:	460b      	mov	r3, r1
 801d936:	f7e2 ff7b 	bl	8000830 <__aeabi_ddiv>
 801d93a:	ec41 0b10 	vmov	d0, r0, r1
 801d93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d942:	45e0      	cmp	r8, ip
 801d944:	ee10 aa10 	vmov	sl, s0
 801d948:	ee10 4a10 	vmov	r4, s0
 801d94c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801d950:	dc09      	bgt.n	801d966 <__ieee754_fmod+0x72>
 801d952:	dbf2      	blt.n	801d93a <__ieee754_fmod+0x46>
 801d954:	4290      	cmp	r0, r2
 801d956:	d3f0      	bcc.n	801d93a <__ieee754_fmod+0x46>
 801d958:	d105      	bne.n	801d966 <__ieee754_fmod+0x72>
 801d95a:	4b69      	ldr	r3, [pc, #420]	; (801db00 <__ieee754_fmod+0x20c>)
 801d95c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801d960:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d964:	e7e9      	b.n	801d93a <__ieee754_fmod+0x46>
 801d966:	4a65      	ldr	r2, [pc, #404]	; (801dafc <__ieee754_fmod+0x208>)
 801d968:	ea19 0f02 	tst.w	r9, r2
 801d96c:	d148      	bne.n	801da00 <__ieee754_fmod+0x10c>
 801d96e:	f1b8 0f00 	cmp.w	r8, #0
 801d972:	d13d      	bne.n	801d9f0 <__ieee754_fmod+0xfc>
 801d974:	4653      	mov	r3, sl
 801d976:	4963      	ldr	r1, [pc, #396]	; (801db04 <__ieee754_fmod+0x210>)
 801d978:	2b00      	cmp	r3, #0
 801d97a:	dc36      	bgt.n	801d9ea <__ieee754_fmod+0xf6>
 801d97c:	4216      	tst	r6, r2
 801d97e:	d14f      	bne.n	801da20 <__ieee754_fmod+0x12c>
 801d980:	f1bc 0f00 	cmp.w	ip, #0
 801d984:	d144      	bne.n	801da10 <__ieee754_fmod+0x11c>
 801d986:	463b      	mov	r3, r7
 801d988:	4a5e      	ldr	r2, [pc, #376]	; (801db04 <__ieee754_fmod+0x210>)
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	dc3d      	bgt.n	801da0a <__ieee754_fmod+0x116>
 801d98e:	485e      	ldr	r0, [pc, #376]	; (801db08 <__ieee754_fmod+0x214>)
 801d990:	4281      	cmp	r1, r0
 801d992:	db4a      	blt.n	801da2a <__ieee754_fmod+0x136>
 801d994:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d99c:	485a      	ldr	r0, [pc, #360]	; (801db08 <__ieee754_fmod+0x214>)
 801d99e:	4282      	cmp	r2, r0
 801d9a0:	db57      	blt.n	801da52 <__ieee754_fmod+0x15e>
 801d9a2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801d9a6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801d9aa:	1a89      	subs	r1, r1, r2
 801d9ac:	1b98      	subs	r0, r3, r6
 801d9ae:	eba4 070e 	sub.w	r7, r4, lr
 801d9b2:	2900      	cmp	r1, #0
 801d9b4:	d162      	bne.n	801da7c <__ieee754_fmod+0x188>
 801d9b6:	4574      	cmp	r4, lr
 801d9b8:	bf38      	it	cc
 801d9ba:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801d9be:	2800      	cmp	r0, #0
 801d9c0:	bfa4      	itt	ge
 801d9c2:	463c      	movge	r4, r7
 801d9c4:	4603      	movge	r3, r0
 801d9c6:	ea53 0104 	orrs.w	r1, r3, r4
 801d9ca:	d0c6      	beq.n	801d95a <__ieee754_fmod+0x66>
 801d9cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d9d0:	db69      	blt.n	801daa6 <__ieee754_fmod+0x1b2>
 801d9d2:	494d      	ldr	r1, [pc, #308]	; (801db08 <__ieee754_fmod+0x214>)
 801d9d4:	428a      	cmp	r2, r1
 801d9d6:	db6c      	blt.n	801dab2 <__ieee754_fmod+0x1be>
 801d9d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d9dc:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801d9e0:	4620      	mov	r0, r4
 801d9e2:	432b      	orrs	r3, r5
 801d9e4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801d9e8:	e7a7      	b.n	801d93a <__ieee754_fmod+0x46>
 801d9ea:	3901      	subs	r1, #1
 801d9ec:	005b      	lsls	r3, r3, #1
 801d9ee:	e7c3      	b.n	801d978 <__ieee754_fmod+0x84>
 801d9f0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801d9f4:	4944      	ldr	r1, [pc, #272]	; (801db08 <__ieee754_fmod+0x214>)
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	ddc0      	ble.n	801d97c <__ieee754_fmod+0x88>
 801d9fa:	3901      	subs	r1, #1
 801d9fc:	005b      	lsls	r3, r3, #1
 801d9fe:	e7fa      	b.n	801d9f6 <__ieee754_fmod+0x102>
 801da00:	ea4f 5128 	mov.w	r1, r8, asr #20
 801da04:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801da08:	e7b8      	b.n	801d97c <__ieee754_fmod+0x88>
 801da0a:	3a01      	subs	r2, #1
 801da0c:	005b      	lsls	r3, r3, #1
 801da0e:	e7bc      	b.n	801d98a <__ieee754_fmod+0x96>
 801da10:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801da14:	4a3c      	ldr	r2, [pc, #240]	; (801db08 <__ieee754_fmod+0x214>)
 801da16:	2b00      	cmp	r3, #0
 801da18:	ddb9      	ble.n	801d98e <__ieee754_fmod+0x9a>
 801da1a:	3a01      	subs	r2, #1
 801da1c:	005b      	lsls	r3, r3, #1
 801da1e:	e7fa      	b.n	801da16 <__ieee754_fmod+0x122>
 801da20:	ea4f 522c 	mov.w	r2, ip, asr #20
 801da24:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801da28:	e7b1      	b.n	801d98e <__ieee754_fmod+0x9a>
 801da2a:	1a40      	subs	r0, r0, r1
 801da2c:	281f      	cmp	r0, #31
 801da2e:	dc0a      	bgt.n	801da46 <__ieee754_fmod+0x152>
 801da30:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801da34:	fa08 f800 	lsl.w	r8, r8, r0
 801da38:	fa0a f400 	lsl.w	r4, sl, r0
 801da3c:	fa2a f303 	lsr.w	r3, sl, r3
 801da40:	ea43 0308 	orr.w	r3, r3, r8
 801da44:	e7aa      	b.n	801d99c <__ieee754_fmod+0xa8>
 801da46:	4b31      	ldr	r3, [pc, #196]	; (801db0c <__ieee754_fmod+0x218>)
 801da48:	2400      	movs	r4, #0
 801da4a:	1a5b      	subs	r3, r3, r1
 801da4c:	fa0a f303 	lsl.w	r3, sl, r3
 801da50:	e7a4      	b.n	801d99c <__ieee754_fmod+0xa8>
 801da52:	1a80      	subs	r0, r0, r2
 801da54:	281f      	cmp	r0, #31
 801da56:	dc0a      	bgt.n	801da6e <__ieee754_fmod+0x17a>
 801da58:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801da5c:	fa0c fc00 	lsl.w	ip, ip, r0
 801da60:	fa07 fe00 	lsl.w	lr, r7, r0
 801da64:	fa27 f606 	lsr.w	r6, r7, r6
 801da68:	ea46 060c 	orr.w	r6, r6, ip
 801da6c:	e79d      	b.n	801d9aa <__ieee754_fmod+0xb6>
 801da6e:	4e27      	ldr	r6, [pc, #156]	; (801db0c <__ieee754_fmod+0x218>)
 801da70:	f04f 0e00 	mov.w	lr, #0
 801da74:	1ab6      	subs	r6, r6, r2
 801da76:	fa07 f606 	lsl.w	r6, r7, r6
 801da7a:	e796      	b.n	801d9aa <__ieee754_fmod+0xb6>
 801da7c:	4574      	cmp	r4, lr
 801da7e:	bf38      	it	cc
 801da80:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801da84:	2800      	cmp	r0, #0
 801da86:	da05      	bge.n	801da94 <__ieee754_fmod+0x1a0>
 801da88:	0fe0      	lsrs	r0, r4, #31
 801da8a:	0064      	lsls	r4, r4, #1
 801da8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801da90:	3901      	subs	r1, #1
 801da92:	e78b      	b.n	801d9ac <__ieee754_fmod+0xb8>
 801da94:	ea50 0307 	orrs.w	r3, r0, r7
 801da98:	f43f af5f 	beq.w	801d95a <__ieee754_fmod+0x66>
 801da9c:	0ffb      	lsrs	r3, r7, #31
 801da9e:	007c      	lsls	r4, r7, #1
 801daa0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801daa4:	e7f4      	b.n	801da90 <__ieee754_fmod+0x19c>
 801daa6:	0fe1      	lsrs	r1, r4, #31
 801daa8:	3a01      	subs	r2, #1
 801daaa:	0064      	lsls	r4, r4, #1
 801daac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801dab0:	e78c      	b.n	801d9cc <__ieee754_fmod+0xd8>
 801dab2:	1a89      	subs	r1, r1, r2
 801dab4:	2914      	cmp	r1, #20
 801dab6:	dc0a      	bgt.n	801dace <__ieee754_fmod+0x1da>
 801dab8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801dabc:	40cc      	lsrs	r4, r1
 801dabe:	fa03 f202 	lsl.w	r2, r3, r2
 801dac2:	410b      	asrs	r3, r1
 801dac4:	4322      	orrs	r2, r4
 801dac6:	ea43 0105 	orr.w	r1, r3, r5
 801daca:	4610      	mov	r0, r2
 801dacc:	e735      	b.n	801d93a <__ieee754_fmod+0x46>
 801dace:	291f      	cmp	r1, #31
 801dad0:	dc07      	bgt.n	801dae2 <__ieee754_fmod+0x1ee>
 801dad2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801dad6:	40cc      	lsrs	r4, r1
 801dad8:	fa03 f202 	lsl.w	r2, r3, r2
 801dadc:	4322      	orrs	r2, r4
 801dade:	462b      	mov	r3, r5
 801dae0:	e7f1      	b.n	801dac6 <__ieee754_fmod+0x1d2>
 801dae2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801dae6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801daea:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801daee:	32e2      	adds	r2, #226	; 0xe2
 801daf0:	fa43 f202 	asr.w	r2, r3, r2
 801daf4:	e7f3      	b.n	801dade <__ieee754_fmod+0x1ea>
 801daf6:	bf00      	nop
 801daf8:	7fefffff 	.word	0x7fefffff
 801dafc:	7ff00000 	.word	0x7ff00000
 801db00:	08021e88 	.word	0x08021e88
 801db04:	fffffbed 	.word	0xfffffbed
 801db08:	fffffc02 	.word	0xfffffc02
 801db0c:	fffffbe2 	.word	0xfffffbe2

0801db10 <__ieee754_pow>:
 801db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db14:	ed2d 8b06 	vpush	{d8-d10}
 801db18:	b089      	sub	sp, #36	; 0x24
 801db1a:	ed8d 1b00 	vstr	d1, [sp]
 801db1e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801db22:	ec57 6b10 	vmov	r6, r7, d0
 801db26:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801db2a:	ea58 0102 	orrs.w	r1, r8, r2
 801db2e:	d115      	bne.n	801db5c <__ieee754_pow+0x4c>
 801db30:	19b3      	adds	r3, r6, r6
 801db32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801db36:	4152      	adcs	r2, r2
 801db38:	4299      	cmp	r1, r3
 801db3a:	4b89      	ldr	r3, [pc, #548]	; (801dd60 <__ieee754_pow+0x250>)
 801db3c:	4193      	sbcs	r3, r2
 801db3e:	f080 84d2 	bcs.w	801e4e6 <__ieee754_pow+0x9d6>
 801db42:	4630      	mov	r0, r6
 801db44:	4639      	mov	r1, r7
 801db46:	e9dd 2300 	ldrd	r2, r3, [sp]
 801db4a:	f7e2 fb91 	bl	8000270 <__adddf3>
 801db4e:	ec41 0b10 	vmov	d0, r0, r1
 801db52:	b009      	add	sp, #36	; 0x24
 801db54:	ecbd 8b06 	vpop	{d8-d10}
 801db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db5c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801db60:	4b80      	ldr	r3, [pc, #512]	; (801dd64 <__ieee754_pow+0x254>)
 801db62:	463d      	mov	r5, r7
 801db64:	ee10 aa10 	vmov	sl, s0
 801db68:	429c      	cmp	r4, r3
 801db6a:	dc06      	bgt.n	801db7a <__ieee754_pow+0x6a>
 801db6c:	d101      	bne.n	801db72 <__ieee754_pow+0x62>
 801db6e:	2e00      	cmp	r6, #0
 801db70:	d1e7      	bne.n	801db42 <__ieee754_pow+0x32>
 801db72:	4598      	cmp	r8, r3
 801db74:	dc01      	bgt.n	801db7a <__ieee754_pow+0x6a>
 801db76:	d10f      	bne.n	801db98 <__ieee754_pow+0x88>
 801db78:	b172      	cbz	r2, 801db98 <__ieee754_pow+0x88>
 801db7a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801db7e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801db82:	ea55 050a 	orrs.w	r5, r5, sl
 801db86:	d1dc      	bne.n	801db42 <__ieee754_pow+0x32>
 801db88:	e9dd 3200 	ldrd	r3, r2, [sp]
 801db8c:	18db      	adds	r3, r3, r3
 801db8e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801db92:	4152      	adcs	r2, r2
 801db94:	429d      	cmp	r5, r3
 801db96:	e7d0      	b.n	801db3a <__ieee754_pow+0x2a>
 801db98:	2d00      	cmp	r5, #0
 801db9a:	da3b      	bge.n	801dc14 <__ieee754_pow+0x104>
 801db9c:	4b72      	ldr	r3, [pc, #456]	; (801dd68 <__ieee754_pow+0x258>)
 801db9e:	4598      	cmp	r8, r3
 801dba0:	dc51      	bgt.n	801dc46 <__ieee754_pow+0x136>
 801dba2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801dba6:	4598      	cmp	r8, r3
 801dba8:	f340 84ac 	ble.w	801e504 <__ieee754_pow+0x9f4>
 801dbac:	ea4f 5328 	mov.w	r3, r8, asr #20
 801dbb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801dbb4:	2b14      	cmp	r3, #20
 801dbb6:	dd0f      	ble.n	801dbd8 <__ieee754_pow+0xc8>
 801dbb8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801dbbc:	fa22 f103 	lsr.w	r1, r2, r3
 801dbc0:	fa01 f303 	lsl.w	r3, r1, r3
 801dbc4:	4293      	cmp	r3, r2
 801dbc6:	f040 849d 	bne.w	801e504 <__ieee754_pow+0x9f4>
 801dbca:	f001 0101 	and.w	r1, r1, #1
 801dbce:	f1c1 0302 	rsb	r3, r1, #2
 801dbd2:	9304      	str	r3, [sp, #16]
 801dbd4:	b182      	cbz	r2, 801dbf8 <__ieee754_pow+0xe8>
 801dbd6:	e05f      	b.n	801dc98 <__ieee754_pow+0x188>
 801dbd8:	2a00      	cmp	r2, #0
 801dbda:	d15b      	bne.n	801dc94 <__ieee754_pow+0x184>
 801dbdc:	f1c3 0314 	rsb	r3, r3, #20
 801dbe0:	fa48 f103 	asr.w	r1, r8, r3
 801dbe4:	fa01 f303 	lsl.w	r3, r1, r3
 801dbe8:	4543      	cmp	r3, r8
 801dbea:	f040 8488 	bne.w	801e4fe <__ieee754_pow+0x9ee>
 801dbee:	f001 0101 	and.w	r1, r1, #1
 801dbf2:	f1c1 0302 	rsb	r3, r1, #2
 801dbf6:	9304      	str	r3, [sp, #16]
 801dbf8:	4b5c      	ldr	r3, [pc, #368]	; (801dd6c <__ieee754_pow+0x25c>)
 801dbfa:	4598      	cmp	r8, r3
 801dbfc:	d132      	bne.n	801dc64 <__ieee754_pow+0x154>
 801dbfe:	f1b9 0f00 	cmp.w	r9, #0
 801dc02:	f280 8478 	bge.w	801e4f6 <__ieee754_pow+0x9e6>
 801dc06:	4632      	mov	r2, r6
 801dc08:	463b      	mov	r3, r7
 801dc0a:	2000      	movs	r0, #0
 801dc0c:	4957      	ldr	r1, [pc, #348]	; (801dd6c <__ieee754_pow+0x25c>)
 801dc0e:	f7e2 fe0f 	bl	8000830 <__aeabi_ddiv>
 801dc12:	e79c      	b.n	801db4e <__ieee754_pow+0x3e>
 801dc14:	2300      	movs	r3, #0
 801dc16:	9304      	str	r3, [sp, #16]
 801dc18:	2a00      	cmp	r2, #0
 801dc1a:	d13d      	bne.n	801dc98 <__ieee754_pow+0x188>
 801dc1c:	4b51      	ldr	r3, [pc, #324]	; (801dd64 <__ieee754_pow+0x254>)
 801dc1e:	4598      	cmp	r8, r3
 801dc20:	d1ea      	bne.n	801dbf8 <__ieee754_pow+0xe8>
 801dc22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801dc26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801dc2a:	ea53 030a 	orrs.w	r3, r3, sl
 801dc2e:	f000 845a 	beq.w	801e4e6 <__ieee754_pow+0x9d6>
 801dc32:	4b4f      	ldr	r3, [pc, #316]	; (801dd70 <__ieee754_pow+0x260>)
 801dc34:	429c      	cmp	r4, r3
 801dc36:	dd08      	ble.n	801dc4a <__ieee754_pow+0x13a>
 801dc38:	f1b9 0f00 	cmp.w	r9, #0
 801dc3c:	f2c0 8457 	blt.w	801e4ee <__ieee754_pow+0x9de>
 801dc40:	e9dd 0100 	ldrd	r0, r1, [sp]
 801dc44:	e783      	b.n	801db4e <__ieee754_pow+0x3e>
 801dc46:	2302      	movs	r3, #2
 801dc48:	e7e5      	b.n	801dc16 <__ieee754_pow+0x106>
 801dc4a:	f1b9 0f00 	cmp.w	r9, #0
 801dc4e:	f04f 0000 	mov.w	r0, #0
 801dc52:	f04f 0100 	mov.w	r1, #0
 801dc56:	f6bf af7a 	bge.w	801db4e <__ieee754_pow+0x3e>
 801dc5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801dc5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801dc62:	e774      	b.n	801db4e <__ieee754_pow+0x3e>
 801dc64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801dc68:	d106      	bne.n	801dc78 <__ieee754_pow+0x168>
 801dc6a:	4632      	mov	r2, r6
 801dc6c:	463b      	mov	r3, r7
 801dc6e:	4630      	mov	r0, r6
 801dc70:	4639      	mov	r1, r7
 801dc72:	f7e2 fcb3 	bl	80005dc <__aeabi_dmul>
 801dc76:	e76a      	b.n	801db4e <__ieee754_pow+0x3e>
 801dc78:	4b3e      	ldr	r3, [pc, #248]	; (801dd74 <__ieee754_pow+0x264>)
 801dc7a:	4599      	cmp	r9, r3
 801dc7c:	d10c      	bne.n	801dc98 <__ieee754_pow+0x188>
 801dc7e:	2d00      	cmp	r5, #0
 801dc80:	db0a      	blt.n	801dc98 <__ieee754_pow+0x188>
 801dc82:	ec47 6b10 	vmov	d0, r6, r7
 801dc86:	b009      	add	sp, #36	; 0x24
 801dc88:	ecbd 8b06 	vpop	{d8-d10}
 801dc8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc90:	f7ff bb44 	b.w	801d31c <__ieee754_sqrt>
 801dc94:	2300      	movs	r3, #0
 801dc96:	9304      	str	r3, [sp, #16]
 801dc98:	ec47 6b10 	vmov	d0, r6, r7
 801dc9c:	f000 fe6e 	bl	801e97c <fabs>
 801dca0:	ec51 0b10 	vmov	r0, r1, d0
 801dca4:	f1ba 0f00 	cmp.w	sl, #0
 801dca8:	d129      	bne.n	801dcfe <__ieee754_pow+0x1ee>
 801dcaa:	b124      	cbz	r4, 801dcb6 <__ieee754_pow+0x1a6>
 801dcac:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801dcb0:	4b2e      	ldr	r3, [pc, #184]	; (801dd6c <__ieee754_pow+0x25c>)
 801dcb2:	429a      	cmp	r2, r3
 801dcb4:	d123      	bne.n	801dcfe <__ieee754_pow+0x1ee>
 801dcb6:	f1b9 0f00 	cmp.w	r9, #0
 801dcba:	da05      	bge.n	801dcc8 <__ieee754_pow+0x1b8>
 801dcbc:	4602      	mov	r2, r0
 801dcbe:	460b      	mov	r3, r1
 801dcc0:	2000      	movs	r0, #0
 801dcc2:	492a      	ldr	r1, [pc, #168]	; (801dd6c <__ieee754_pow+0x25c>)
 801dcc4:	f7e2 fdb4 	bl	8000830 <__aeabi_ddiv>
 801dcc8:	2d00      	cmp	r5, #0
 801dcca:	f6bf af40 	bge.w	801db4e <__ieee754_pow+0x3e>
 801dcce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801dcd2:	9b04      	ldr	r3, [sp, #16]
 801dcd4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801dcd8:	431c      	orrs	r4, r3
 801dcda:	d108      	bne.n	801dcee <__ieee754_pow+0x1de>
 801dcdc:	4602      	mov	r2, r0
 801dcde:	460b      	mov	r3, r1
 801dce0:	4610      	mov	r0, r2
 801dce2:	4619      	mov	r1, r3
 801dce4:	f7e2 fac2 	bl	800026c <__aeabi_dsub>
 801dce8:	4602      	mov	r2, r0
 801dcea:	460b      	mov	r3, r1
 801dcec:	e78f      	b.n	801dc0e <__ieee754_pow+0xfe>
 801dcee:	9b04      	ldr	r3, [sp, #16]
 801dcf0:	2b01      	cmp	r3, #1
 801dcf2:	f47f af2c 	bne.w	801db4e <__ieee754_pow+0x3e>
 801dcf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801dcfa:	4619      	mov	r1, r3
 801dcfc:	e727      	b.n	801db4e <__ieee754_pow+0x3e>
 801dcfe:	0feb      	lsrs	r3, r5, #31
 801dd00:	3b01      	subs	r3, #1
 801dd02:	9306      	str	r3, [sp, #24]
 801dd04:	9a06      	ldr	r2, [sp, #24]
 801dd06:	9b04      	ldr	r3, [sp, #16]
 801dd08:	4313      	orrs	r3, r2
 801dd0a:	d102      	bne.n	801dd12 <__ieee754_pow+0x202>
 801dd0c:	4632      	mov	r2, r6
 801dd0e:	463b      	mov	r3, r7
 801dd10:	e7e6      	b.n	801dce0 <__ieee754_pow+0x1d0>
 801dd12:	4b19      	ldr	r3, [pc, #100]	; (801dd78 <__ieee754_pow+0x268>)
 801dd14:	4598      	cmp	r8, r3
 801dd16:	f340 80fb 	ble.w	801df10 <__ieee754_pow+0x400>
 801dd1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801dd1e:	4598      	cmp	r8, r3
 801dd20:	4b13      	ldr	r3, [pc, #76]	; (801dd70 <__ieee754_pow+0x260>)
 801dd22:	dd0c      	ble.n	801dd3e <__ieee754_pow+0x22e>
 801dd24:	429c      	cmp	r4, r3
 801dd26:	dc0f      	bgt.n	801dd48 <__ieee754_pow+0x238>
 801dd28:	f1b9 0f00 	cmp.w	r9, #0
 801dd2c:	da0f      	bge.n	801dd4e <__ieee754_pow+0x23e>
 801dd2e:	2000      	movs	r0, #0
 801dd30:	b009      	add	sp, #36	; 0x24
 801dd32:	ecbd 8b06 	vpop	{d8-d10}
 801dd36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd3a:	f001 ba46 	b.w	801f1ca <__math_oflow>
 801dd3e:	429c      	cmp	r4, r3
 801dd40:	dbf2      	blt.n	801dd28 <__ieee754_pow+0x218>
 801dd42:	4b0a      	ldr	r3, [pc, #40]	; (801dd6c <__ieee754_pow+0x25c>)
 801dd44:	429c      	cmp	r4, r3
 801dd46:	dd19      	ble.n	801dd7c <__ieee754_pow+0x26c>
 801dd48:	f1b9 0f00 	cmp.w	r9, #0
 801dd4c:	dcef      	bgt.n	801dd2e <__ieee754_pow+0x21e>
 801dd4e:	2000      	movs	r0, #0
 801dd50:	b009      	add	sp, #36	; 0x24
 801dd52:	ecbd 8b06 	vpop	{d8-d10}
 801dd56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd5a:	f001 ba2d 	b.w	801f1b8 <__math_uflow>
 801dd5e:	bf00      	nop
 801dd60:	fff00000 	.word	0xfff00000
 801dd64:	7ff00000 	.word	0x7ff00000
 801dd68:	433fffff 	.word	0x433fffff
 801dd6c:	3ff00000 	.word	0x3ff00000
 801dd70:	3fefffff 	.word	0x3fefffff
 801dd74:	3fe00000 	.word	0x3fe00000
 801dd78:	41e00000 	.word	0x41e00000
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	4b60      	ldr	r3, [pc, #384]	; (801df00 <__ieee754_pow+0x3f0>)
 801dd80:	f7e2 fa74 	bl	800026c <__aeabi_dsub>
 801dd84:	4604      	mov	r4, r0
 801dd86:	460d      	mov	r5, r1
 801dd88:	a353      	add	r3, pc, #332	; (adr r3, 801ded8 <__ieee754_pow+0x3c8>)
 801dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd8e:	f7e2 fc25 	bl	80005dc <__aeabi_dmul>
 801dd92:	4606      	mov	r6, r0
 801dd94:	460f      	mov	r7, r1
 801dd96:	4620      	mov	r0, r4
 801dd98:	4629      	mov	r1, r5
 801dd9a:	a351      	add	r3, pc, #324	; (adr r3, 801dee0 <__ieee754_pow+0x3d0>)
 801dd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dda0:	f7e2 fc1c 	bl	80005dc <__aeabi_dmul>
 801dda4:	2200      	movs	r2, #0
 801dda6:	4682      	mov	sl, r0
 801dda8:	468b      	mov	fp, r1
 801ddaa:	4b56      	ldr	r3, [pc, #344]	; (801df04 <__ieee754_pow+0x3f4>)
 801ddac:	4620      	mov	r0, r4
 801ddae:	4629      	mov	r1, r5
 801ddb0:	f7e2 fc14 	bl	80005dc <__aeabi_dmul>
 801ddb4:	4602      	mov	r2, r0
 801ddb6:	460b      	mov	r3, r1
 801ddb8:	a14b      	add	r1, pc, #300	; (adr r1, 801dee8 <__ieee754_pow+0x3d8>)
 801ddba:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ddbe:	f7e2 fa55 	bl	800026c <__aeabi_dsub>
 801ddc2:	4622      	mov	r2, r4
 801ddc4:	462b      	mov	r3, r5
 801ddc6:	f7e2 fc09 	bl	80005dc <__aeabi_dmul>
 801ddca:	4602      	mov	r2, r0
 801ddcc:	460b      	mov	r3, r1
 801ddce:	2000      	movs	r0, #0
 801ddd0:	494d      	ldr	r1, [pc, #308]	; (801df08 <__ieee754_pow+0x3f8>)
 801ddd2:	f7e2 fa4b 	bl	800026c <__aeabi_dsub>
 801ddd6:	4680      	mov	r8, r0
 801ddd8:	4689      	mov	r9, r1
 801ddda:	4622      	mov	r2, r4
 801dddc:	462b      	mov	r3, r5
 801ddde:	4620      	mov	r0, r4
 801dde0:	4629      	mov	r1, r5
 801dde2:	f7e2 fbfb 	bl	80005dc <__aeabi_dmul>
 801dde6:	4602      	mov	r2, r0
 801dde8:	460b      	mov	r3, r1
 801ddea:	4640      	mov	r0, r8
 801ddec:	4649      	mov	r1, r9
 801ddee:	f7e2 fbf5 	bl	80005dc <__aeabi_dmul>
 801ddf2:	a33f      	add	r3, pc, #252	; (adr r3, 801def0 <__ieee754_pow+0x3e0>)
 801ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddf8:	f7e2 fbf0 	bl	80005dc <__aeabi_dmul>
 801ddfc:	4602      	mov	r2, r0
 801ddfe:	460b      	mov	r3, r1
 801de00:	4650      	mov	r0, sl
 801de02:	4659      	mov	r1, fp
 801de04:	f7e2 fa32 	bl	800026c <__aeabi_dsub>
 801de08:	4602      	mov	r2, r0
 801de0a:	460b      	mov	r3, r1
 801de0c:	4680      	mov	r8, r0
 801de0e:	4689      	mov	r9, r1
 801de10:	4630      	mov	r0, r6
 801de12:	4639      	mov	r1, r7
 801de14:	f7e2 fa2c 	bl	8000270 <__adddf3>
 801de18:	2000      	movs	r0, #0
 801de1a:	4632      	mov	r2, r6
 801de1c:	463b      	mov	r3, r7
 801de1e:	4604      	mov	r4, r0
 801de20:	460d      	mov	r5, r1
 801de22:	f7e2 fa23 	bl	800026c <__aeabi_dsub>
 801de26:	4602      	mov	r2, r0
 801de28:	460b      	mov	r3, r1
 801de2a:	4640      	mov	r0, r8
 801de2c:	4649      	mov	r1, r9
 801de2e:	f7e2 fa1d 	bl	800026c <__aeabi_dsub>
 801de32:	9b04      	ldr	r3, [sp, #16]
 801de34:	9a06      	ldr	r2, [sp, #24]
 801de36:	4682      	mov	sl, r0
 801de38:	3b01      	subs	r3, #1
 801de3a:	468b      	mov	fp, r1
 801de3c:	4313      	orrs	r3, r2
 801de3e:	f040 81e7 	bne.w	801e210 <__ieee754_pow+0x700>
 801de42:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801def8 <__ieee754_pow+0x3e8>
 801de46:	e9dd 6700 	ldrd	r6, r7, [sp]
 801de4a:	2600      	movs	r6, #0
 801de4c:	eeb0 8a47 	vmov.f32	s16, s14
 801de50:	eef0 8a67 	vmov.f32	s17, s15
 801de54:	463b      	mov	r3, r7
 801de56:	4632      	mov	r2, r6
 801de58:	e9dd 0100 	ldrd	r0, r1, [sp]
 801de5c:	f7e2 fa06 	bl	800026c <__aeabi_dsub>
 801de60:	4622      	mov	r2, r4
 801de62:	462b      	mov	r3, r5
 801de64:	f7e2 fbba 	bl	80005dc <__aeabi_dmul>
 801de68:	4680      	mov	r8, r0
 801de6a:	4689      	mov	r9, r1
 801de6c:	4650      	mov	r0, sl
 801de6e:	4659      	mov	r1, fp
 801de70:	e9dd 2300 	ldrd	r2, r3, [sp]
 801de74:	f7e2 fbb2 	bl	80005dc <__aeabi_dmul>
 801de78:	4602      	mov	r2, r0
 801de7a:	460b      	mov	r3, r1
 801de7c:	4640      	mov	r0, r8
 801de7e:	4649      	mov	r1, r9
 801de80:	f7e2 f9f6 	bl	8000270 <__adddf3>
 801de84:	4680      	mov	r8, r0
 801de86:	4689      	mov	r9, r1
 801de88:	4632      	mov	r2, r6
 801de8a:	463b      	mov	r3, r7
 801de8c:	4620      	mov	r0, r4
 801de8e:	4629      	mov	r1, r5
 801de90:	f7e2 fba4 	bl	80005dc <__aeabi_dmul>
 801de94:	460b      	mov	r3, r1
 801de96:	4604      	mov	r4, r0
 801de98:	460d      	mov	r5, r1
 801de9a:	4602      	mov	r2, r0
 801de9c:	4649      	mov	r1, r9
 801de9e:	4640      	mov	r0, r8
 801dea0:	f7e2 f9e6 	bl	8000270 <__adddf3>
 801dea4:	4b19      	ldr	r3, [pc, #100]	; (801df0c <__ieee754_pow+0x3fc>)
 801dea6:	4606      	mov	r6, r0
 801dea8:	460f      	mov	r7, r1
 801deaa:	4299      	cmp	r1, r3
 801deac:	468b      	mov	fp, r1
 801deae:	ec45 4b19 	vmov	d9, r4, r5
 801deb2:	f340 82f1 	ble.w	801e498 <__ieee754_pow+0x988>
 801deb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801deba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801debe:	4303      	orrs	r3, r0
 801dec0:	f000 81e4 	beq.w	801e28c <__ieee754_pow+0x77c>
 801dec4:	2200      	movs	r2, #0
 801dec6:	2300      	movs	r3, #0
 801dec8:	ec51 0b18 	vmov	r0, r1, d8
 801decc:	f7e2 fdf8 	bl	8000ac0 <__aeabi_dcmplt>
 801ded0:	3800      	subs	r0, #0
 801ded2:	bf18      	it	ne
 801ded4:	2001      	movne	r0, #1
 801ded6:	e72b      	b.n	801dd30 <__ieee754_pow+0x220>
 801ded8:	60000000 	.word	0x60000000
 801dedc:	3ff71547 	.word	0x3ff71547
 801dee0:	f85ddf44 	.word	0xf85ddf44
 801dee4:	3e54ae0b 	.word	0x3e54ae0b
 801dee8:	55555555 	.word	0x55555555
 801deec:	3fd55555 	.word	0x3fd55555
 801def0:	652b82fe 	.word	0x652b82fe
 801def4:	3ff71547 	.word	0x3ff71547
 801def8:	00000000 	.word	0x00000000
 801defc:	bff00000 	.word	0xbff00000
 801df00:	3ff00000 	.word	0x3ff00000
 801df04:	3fd00000 	.word	0x3fd00000
 801df08:	3fe00000 	.word	0x3fe00000
 801df0c:	408fffff 	.word	0x408fffff
 801df10:	4bd5      	ldr	r3, [pc, #852]	; (801e268 <__ieee754_pow+0x758>)
 801df12:	2200      	movs	r2, #0
 801df14:	402b      	ands	r3, r5
 801df16:	b92b      	cbnz	r3, 801df24 <__ieee754_pow+0x414>
 801df18:	4bd4      	ldr	r3, [pc, #848]	; (801e26c <__ieee754_pow+0x75c>)
 801df1a:	f7e2 fb5f 	bl	80005dc <__aeabi_dmul>
 801df1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801df22:	460c      	mov	r4, r1
 801df24:	1523      	asrs	r3, r4, #20
 801df26:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801df2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801df2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801df32:	4413      	add	r3, r2
 801df34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801df38:	9305      	str	r3, [sp, #20]
 801df3a:	4bcd      	ldr	r3, [pc, #820]	; (801e270 <__ieee754_pow+0x760>)
 801df3c:	429c      	cmp	r4, r3
 801df3e:	dd08      	ble.n	801df52 <__ieee754_pow+0x442>
 801df40:	4bcc      	ldr	r3, [pc, #816]	; (801e274 <__ieee754_pow+0x764>)
 801df42:	429c      	cmp	r4, r3
 801df44:	f340 8162 	ble.w	801e20c <__ieee754_pow+0x6fc>
 801df48:	9b05      	ldr	r3, [sp, #20]
 801df4a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801df4e:	3301      	adds	r3, #1
 801df50:	9305      	str	r3, [sp, #20]
 801df52:	2400      	movs	r4, #0
 801df54:	00e3      	lsls	r3, r4, #3
 801df56:	4682      	mov	sl, r0
 801df58:	4629      	mov	r1, r5
 801df5a:	46ab      	mov	fp, r5
 801df5c:	9307      	str	r3, [sp, #28]
 801df5e:	4bc6      	ldr	r3, [pc, #792]	; (801e278 <__ieee754_pow+0x768>)
 801df60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801df64:	ed93 7b00 	vldr	d7, [r3]
 801df68:	eeb0 9a47 	vmov.f32	s18, s14
 801df6c:	eef0 9a67 	vmov.f32	s19, s15
 801df70:	ec53 2b17 	vmov	r2, r3, d7
 801df74:	f7e2 f97a 	bl	800026c <__aeabi_dsub>
 801df78:	4652      	mov	r2, sl
 801df7a:	4606      	mov	r6, r0
 801df7c:	460f      	mov	r7, r1
 801df7e:	462b      	mov	r3, r5
 801df80:	106d      	asrs	r5, r5, #1
 801df82:	ec51 0b19 	vmov	r0, r1, d9
 801df86:	f7e2 f973 	bl	8000270 <__adddf3>
 801df8a:	4602      	mov	r2, r0
 801df8c:	460b      	mov	r3, r1
 801df8e:	2000      	movs	r0, #0
 801df90:	49ba      	ldr	r1, [pc, #744]	; (801e27c <__ieee754_pow+0x76c>)
 801df92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801df96:	f7e2 fc4b 	bl	8000830 <__aeabi_ddiv>
 801df9a:	4602      	mov	r2, r0
 801df9c:	460b      	mov	r3, r1
 801df9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801dfa2:	ec41 0b1a 	vmov	d10, r0, r1
 801dfa6:	4630      	mov	r0, r6
 801dfa8:	4639      	mov	r1, r7
 801dfaa:	f7e2 fb17 	bl	80005dc <__aeabi_dmul>
 801dfae:	2300      	movs	r3, #0
 801dfb0:	2200      	movs	r2, #0
 801dfb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dfb6:	9302      	str	r3, [sp, #8]
 801dfb8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801dfbc:	4614      	mov	r4, r2
 801dfbe:	461d      	mov	r5, r3
 801dfc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801dfc4:	ec41 0b18 	vmov	d8, r0, r1
 801dfc8:	4640      	mov	r0, r8
 801dfca:	4649      	mov	r1, r9
 801dfcc:	f7e2 fb06 	bl	80005dc <__aeabi_dmul>
 801dfd0:	4602      	mov	r2, r0
 801dfd2:	460b      	mov	r3, r1
 801dfd4:	4630      	mov	r0, r6
 801dfd6:	4639      	mov	r1, r7
 801dfd8:	f7e2 f948 	bl	800026c <__aeabi_dsub>
 801dfdc:	4606      	mov	r6, r0
 801dfde:	460f      	mov	r7, r1
 801dfe0:	4620      	mov	r0, r4
 801dfe2:	4629      	mov	r1, r5
 801dfe4:	ec53 2b19 	vmov	r2, r3, d9
 801dfe8:	f7e2 f940 	bl	800026c <__aeabi_dsub>
 801dfec:	4602      	mov	r2, r0
 801dfee:	460b      	mov	r3, r1
 801dff0:	4650      	mov	r0, sl
 801dff2:	4659      	mov	r1, fp
 801dff4:	f7e2 f93a 	bl	800026c <__aeabi_dsub>
 801dff8:	4642      	mov	r2, r8
 801dffa:	464b      	mov	r3, r9
 801dffc:	f7e2 faee 	bl	80005dc <__aeabi_dmul>
 801e000:	4602      	mov	r2, r0
 801e002:	460b      	mov	r3, r1
 801e004:	4630      	mov	r0, r6
 801e006:	4639      	mov	r1, r7
 801e008:	f7e2 f930 	bl	800026c <__aeabi_dsub>
 801e00c:	ec53 2b1a 	vmov	r2, r3, d10
 801e010:	f7e2 fae4 	bl	80005dc <__aeabi_dmul>
 801e014:	ec53 2b18 	vmov	r2, r3, d8
 801e018:	ec41 0b19 	vmov	d9, r0, r1
 801e01c:	ec51 0b18 	vmov	r0, r1, d8
 801e020:	f7e2 fadc 	bl	80005dc <__aeabi_dmul>
 801e024:	4604      	mov	r4, r0
 801e026:	460d      	mov	r5, r1
 801e028:	a37b      	add	r3, pc, #492	; (adr r3, 801e218 <__ieee754_pow+0x708>)
 801e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e02e:	f7e2 fad5 	bl	80005dc <__aeabi_dmul>
 801e032:	a37b      	add	r3, pc, #492	; (adr r3, 801e220 <__ieee754_pow+0x710>)
 801e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e038:	f7e2 f91a 	bl	8000270 <__adddf3>
 801e03c:	4622      	mov	r2, r4
 801e03e:	462b      	mov	r3, r5
 801e040:	f7e2 facc 	bl	80005dc <__aeabi_dmul>
 801e044:	a378      	add	r3, pc, #480	; (adr r3, 801e228 <__ieee754_pow+0x718>)
 801e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e04a:	f7e2 f911 	bl	8000270 <__adddf3>
 801e04e:	4622      	mov	r2, r4
 801e050:	462b      	mov	r3, r5
 801e052:	f7e2 fac3 	bl	80005dc <__aeabi_dmul>
 801e056:	a376      	add	r3, pc, #472	; (adr r3, 801e230 <__ieee754_pow+0x720>)
 801e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e05c:	f7e2 f908 	bl	8000270 <__adddf3>
 801e060:	4622      	mov	r2, r4
 801e062:	462b      	mov	r3, r5
 801e064:	f7e2 faba 	bl	80005dc <__aeabi_dmul>
 801e068:	a373      	add	r3, pc, #460	; (adr r3, 801e238 <__ieee754_pow+0x728>)
 801e06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e06e:	f7e2 f8ff 	bl	8000270 <__adddf3>
 801e072:	4622      	mov	r2, r4
 801e074:	462b      	mov	r3, r5
 801e076:	f7e2 fab1 	bl	80005dc <__aeabi_dmul>
 801e07a:	a371      	add	r3, pc, #452	; (adr r3, 801e240 <__ieee754_pow+0x730>)
 801e07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e080:	f7e2 f8f6 	bl	8000270 <__adddf3>
 801e084:	4606      	mov	r6, r0
 801e086:	460f      	mov	r7, r1
 801e088:	4622      	mov	r2, r4
 801e08a:	462b      	mov	r3, r5
 801e08c:	4620      	mov	r0, r4
 801e08e:	4629      	mov	r1, r5
 801e090:	f7e2 faa4 	bl	80005dc <__aeabi_dmul>
 801e094:	4602      	mov	r2, r0
 801e096:	460b      	mov	r3, r1
 801e098:	4630      	mov	r0, r6
 801e09a:	4639      	mov	r1, r7
 801e09c:	f7e2 fa9e 	bl	80005dc <__aeabi_dmul>
 801e0a0:	4642      	mov	r2, r8
 801e0a2:	4604      	mov	r4, r0
 801e0a4:	460d      	mov	r5, r1
 801e0a6:	464b      	mov	r3, r9
 801e0a8:	ec51 0b18 	vmov	r0, r1, d8
 801e0ac:	f7e2 f8e0 	bl	8000270 <__adddf3>
 801e0b0:	ec53 2b19 	vmov	r2, r3, d9
 801e0b4:	f7e2 fa92 	bl	80005dc <__aeabi_dmul>
 801e0b8:	4622      	mov	r2, r4
 801e0ba:	462b      	mov	r3, r5
 801e0bc:	f7e2 f8d8 	bl	8000270 <__adddf3>
 801e0c0:	4642      	mov	r2, r8
 801e0c2:	4682      	mov	sl, r0
 801e0c4:	468b      	mov	fp, r1
 801e0c6:	464b      	mov	r3, r9
 801e0c8:	4640      	mov	r0, r8
 801e0ca:	4649      	mov	r1, r9
 801e0cc:	f7e2 fa86 	bl	80005dc <__aeabi_dmul>
 801e0d0:	2200      	movs	r2, #0
 801e0d2:	4b6b      	ldr	r3, [pc, #428]	; (801e280 <__ieee754_pow+0x770>)
 801e0d4:	4606      	mov	r6, r0
 801e0d6:	460f      	mov	r7, r1
 801e0d8:	f7e2 f8ca 	bl	8000270 <__adddf3>
 801e0dc:	4652      	mov	r2, sl
 801e0de:	465b      	mov	r3, fp
 801e0e0:	f7e2 f8c6 	bl	8000270 <__adddf3>
 801e0e4:	2000      	movs	r0, #0
 801e0e6:	460d      	mov	r5, r1
 801e0e8:	460b      	mov	r3, r1
 801e0ea:	4604      	mov	r4, r0
 801e0ec:	4602      	mov	r2, r0
 801e0ee:	4649      	mov	r1, r9
 801e0f0:	4640      	mov	r0, r8
 801e0f2:	f7e2 fa73 	bl	80005dc <__aeabi_dmul>
 801e0f6:	2200      	movs	r2, #0
 801e0f8:	4680      	mov	r8, r0
 801e0fa:	4689      	mov	r9, r1
 801e0fc:	4b60      	ldr	r3, [pc, #384]	; (801e280 <__ieee754_pow+0x770>)
 801e0fe:	4620      	mov	r0, r4
 801e100:	4629      	mov	r1, r5
 801e102:	f7e2 f8b3 	bl	800026c <__aeabi_dsub>
 801e106:	4632      	mov	r2, r6
 801e108:	463b      	mov	r3, r7
 801e10a:	f7e2 f8af 	bl	800026c <__aeabi_dsub>
 801e10e:	4602      	mov	r2, r0
 801e110:	460b      	mov	r3, r1
 801e112:	4650      	mov	r0, sl
 801e114:	4659      	mov	r1, fp
 801e116:	f7e2 f8a9 	bl	800026c <__aeabi_dsub>
 801e11a:	ec53 2b18 	vmov	r2, r3, d8
 801e11e:	f7e2 fa5d 	bl	80005dc <__aeabi_dmul>
 801e122:	4606      	mov	r6, r0
 801e124:	460f      	mov	r7, r1
 801e126:	4622      	mov	r2, r4
 801e128:	462b      	mov	r3, r5
 801e12a:	ec51 0b19 	vmov	r0, r1, d9
 801e12e:	f7e2 fa55 	bl	80005dc <__aeabi_dmul>
 801e132:	4602      	mov	r2, r0
 801e134:	460b      	mov	r3, r1
 801e136:	4630      	mov	r0, r6
 801e138:	4639      	mov	r1, r7
 801e13a:	f7e2 f899 	bl	8000270 <__adddf3>
 801e13e:	4606      	mov	r6, r0
 801e140:	460f      	mov	r7, r1
 801e142:	4602      	mov	r2, r0
 801e144:	460b      	mov	r3, r1
 801e146:	4640      	mov	r0, r8
 801e148:	4649      	mov	r1, r9
 801e14a:	f7e2 f891 	bl	8000270 <__adddf3>
 801e14e:	2000      	movs	r0, #0
 801e150:	460d      	mov	r5, r1
 801e152:	4604      	mov	r4, r0
 801e154:	a33c      	add	r3, pc, #240	; (adr r3, 801e248 <__ieee754_pow+0x738>)
 801e156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e15a:	f7e2 fa3f 	bl	80005dc <__aeabi_dmul>
 801e15e:	4642      	mov	r2, r8
 801e160:	464b      	mov	r3, r9
 801e162:	ec41 0b18 	vmov	d8, r0, r1
 801e166:	4620      	mov	r0, r4
 801e168:	4629      	mov	r1, r5
 801e16a:	f7e2 f87f 	bl	800026c <__aeabi_dsub>
 801e16e:	4602      	mov	r2, r0
 801e170:	460b      	mov	r3, r1
 801e172:	4630      	mov	r0, r6
 801e174:	4639      	mov	r1, r7
 801e176:	f7e2 f879 	bl	800026c <__aeabi_dsub>
 801e17a:	a335      	add	r3, pc, #212	; (adr r3, 801e250 <__ieee754_pow+0x740>)
 801e17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e180:	f7e2 fa2c 	bl	80005dc <__aeabi_dmul>
 801e184:	4606      	mov	r6, r0
 801e186:	460f      	mov	r7, r1
 801e188:	4620      	mov	r0, r4
 801e18a:	4629      	mov	r1, r5
 801e18c:	a332      	add	r3, pc, #200	; (adr r3, 801e258 <__ieee754_pow+0x748>)
 801e18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e192:	f7e2 fa23 	bl	80005dc <__aeabi_dmul>
 801e196:	4602      	mov	r2, r0
 801e198:	460b      	mov	r3, r1
 801e19a:	4630      	mov	r0, r6
 801e19c:	4639      	mov	r1, r7
 801e19e:	f7e2 f867 	bl	8000270 <__adddf3>
 801e1a2:	9a07      	ldr	r2, [sp, #28]
 801e1a4:	4b37      	ldr	r3, [pc, #220]	; (801e284 <__ieee754_pow+0x774>)
 801e1a6:	4413      	add	r3, r2
 801e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1ac:	f7e2 f860 	bl	8000270 <__adddf3>
 801e1b0:	4682      	mov	sl, r0
 801e1b2:	9805      	ldr	r0, [sp, #20]
 801e1b4:	468b      	mov	fp, r1
 801e1b6:	f7e2 f9a7 	bl	8000508 <__aeabi_i2d>
 801e1ba:	9a07      	ldr	r2, [sp, #28]
 801e1bc:	4b32      	ldr	r3, [pc, #200]	; (801e288 <__ieee754_pow+0x778>)
 801e1be:	4606      	mov	r6, r0
 801e1c0:	460f      	mov	r7, r1
 801e1c2:	4413      	add	r3, r2
 801e1c4:	4652      	mov	r2, sl
 801e1c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e1ca:	ec51 0b18 	vmov	r0, r1, d8
 801e1ce:	465b      	mov	r3, fp
 801e1d0:	f7e2 f84e 	bl	8000270 <__adddf3>
 801e1d4:	4642      	mov	r2, r8
 801e1d6:	464b      	mov	r3, r9
 801e1d8:	f7e2 f84a 	bl	8000270 <__adddf3>
 801e1dc:	4632      	mov	r2, r6
 801e1de:	463b      	mov	r3, r7
 801e1e0:	f7e2 f846 	bl	8000270 <__adddf3>
 801e1e4:	2000      	movs	r0, #0
 801e1e6:	4632      	mov	r2, r6
 801e1e8:	463b      	mov	r3, r7
 801e1ea:	4604      	mov	r4, r0
 801e1ec:	460d      	mov	r5, r1
 801e1ee:	f7e2 f83d 	bl	800026c <__aeabi_dsub>
 801e1f2:	4642      	mov	r2, r8
 801e1f4:	464b      	mov	r3, r9
 801e1f6:	f7e2 f839 	bl	800026c <__aeabi_dsub>
 801e1fa:	ec53 2b18 	vmov	r2, r3, d8
 801e1fe:	f7e2 f835 	bl	800026c <__aeabi_dsub>
 801e202:	4602      	mov	r2, r0
 801e204:	460b      	mov	r3, r1
 801e206:	4650      	mov	r0, sl
 801e208:	4659      	mov	r1, fp
 801e20a:	e610      	b.n	801de2e <__ieee754_pow+0x31e>
 801e20c:	2401      	movs	r4, #1
 801e20e:	e6a1      	b.n	801df54 <__ieee754_pow+0x444>
 801e210:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801e260 <__ieee754_pow+0x750>
 801e214:	e617      	b.n	801de46 <__ieee754_pow+0x336>
 801e216:	bf00      	nop
 801e218:	4a454eef 	.word	0x4a454eef
 801e21c:	3fca7e28 	.word	0x3fca7e28
 801e220:	93c9db65 	.word	0x93c9db65
 801e224:	3fcd864a 	.word	0x3fcd864a
 801e228:	a91d4101 	.word	0xa91d4101
 801e22c:	3fd17460 	.word	0x3fd17460
 801e230:	518f264d 	.word	0x518f264d
 801e234:	3fd55555 	.word	0x3fd55555
 801e238:	db6fabff 	.word	0xdb6fabff
 801e23c:	3fdb6db6 	.word	0x3fdb6db6
 801e240:	33333303 	.word	0x33333303
 801e244:	3fe33333 	.word	0x3fe33333
 801e248:	e0000000 	.word	0xe0000000
 801e24c:	3feec709 	.word	0x3feec709
 801e250:	dc3a03fd 	.word	0xdc3a03fd
 801e254:	3feec709 	.word	0x3feec709
 801e258:	145b01f5 	.word	0x145b01f5
 801e25c:	be3e2fe0 	.word	0xbe3e2fe0
 801e260:	00000000 	.word	0x00000000
 801e264:	3ff00000 	.word	0x3ff00000
 801e268:	7ff00000 	.word	0x7ff00000
 801e26c:	43400000 	.word	0x43400000
 801e270:	0003988e 	.word	0x0003988e
 801e274:	000bb679 	.word	0x000bb679
 801e278:	08021e98 	.word	0x08021e98
 801e27c:	3ff00000 	.word	0x3ff00000
 801e280:	40080000 	.word	0x40080000
 801e284:	08021eb8 	.word	0x08021eb8
 801e288:	08021ea8 	.word	0x08021ea8
 801e28c:	a3b5      	add	r3, pc, #724	; (adr r3, 801e564 <__ieee754_pow+0xa54>)
 801e28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e292:	4640      	mov	r0, r8
 801e294:	4649      	mov	r1, r9
 801e296:	f7e1 ffeb 	bl	8000270 <__adddf3>
 801e29a:	4622      	mov	r2, r4
 801e29c:	462b      	mov	r3, r5
 801e29e:	ec41 0b1a 	vmov	d10, r0, r1
 801e2a2:	4630      	mov	r0, r6
 801e2a4:	4639      	mov	r1, r7
 801e2a6:	f7e1 ffe1 	bl	800026c <__aeabi_dsub>
 801e2aa:	4602      	mov	r2, r0
 801e2ac:	460b      	mov	r3, r1
 801e2ae:	ec51 0b1a 	vmov	r0, r1, d10
 801e2b2:	f7e2 fc23 	bl	8000afc <__aeabi_dcmpgt>
 801e2b6:	2800      	cmp	r0, #0
 801e2b8:	f47f ae04 	bne.w	801dec4 <__ieee754_pow+0x3b4>
 801e2bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e2c0:	4aa3      	ldr	r2, [pc, #652]	; (801e550 <__ieee754_pow+0xa40>)
 801e2c2:	4293      	cmp	r3, r2
 801e2c4:	f340 8108 	ble.w	801e4d8 <__ieee754_pow+0x9c8>
 801e2c8:	151b      	asrs	r3, r3, #20
 801e2ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801e2ce:	48a1      	ldr	r0, [pc, #644]	; (801e554 <__ieee754_pow+0xa44>)
 801e2d0:	f1bb 0f00 	cmp.w	fp, #0
 801e2d4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801e2d8:	f04f 0200 	mov.w	r2, #0
 801e2dc:	fa4a fa03 	asr.w	sl, sl, r3
 801e2e0:	44da      	add	sl, fp
 801e2e2:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801e2e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801e2ea:	fa40 f001 	asr.w	r0, r0, r1
 801e2ee:	f1c1 0114 	rsb	r1, r1, #20
 801e2f2:	ea00 030a 	and.w	r3, r0, sl
 801e2f6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801e2fa:	4620      	mov	r0, r4
 801e2fc:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801e300:	fa4a fa01 	asr.w	sl, sl, r1
 801e304:	4629      	mov	r1, r5
 801e306:	bfb8      	it	lt
 801e308:	f1ca 0a00 	rsblt	sl, sl, #0
 801e30c:	f7e1 ffae 	bl	800026c <__aeabi_dsub>
 801e310:	ec41 0b19 	vmov	d9, r0, r1
 801e314:	4642      	mov	r2, r8
 801e316:	464b      	mov	r3, r9
 801e318:	ec51 0b19 	vmov	r0, r1, d9
 801e31c:	f7e1 ffa8 	bl	8000270 <__adddf3>
 801e320:	2000      	movs	r0, #0
 801e322:	460d      	mov	r5, r1
 801e324:	4604      	mov	r4, r0
 801e326:	a37a      	add	r3, pc, #488	; (adr r3, 801e510 <__ieee754_pow+0xa00>)
 801e328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e32c:	f7e2 f956 	bl	80005dc <__aeabi_dmul>
 801e330:	4606      	mov	r6, r0
 801e332:	460f      	mov	r7, r1
 801e334:	4620      	mov	r0, r4
 801e336:	4629      	mov	r1, r5
 801e338:	ec53 2b19 	vmov	r2, r3, d9
 801e33c:	f7e1 ff96 	bl	800026c <__aeabi_dsub>
 801e340:	4602      	mov	r2, r0
 801e342:	460b      	mov	r3, r1
 801e344:	4640      	mov	r0, r8
 801e346:	4649      	mov	r1, r9
 801e348:	f7e1 ff90 	bl	800026c <__aeabi_dsub>
 801e34c:	a372      	add	r3, pc, #456	; (adr r3, 801e518 <__ieee754_pow+0xa08>)
 801e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e352:	f7e2 f943 	bl	80005dc <__aeabi_dmul>
 801e356:	4680      	mov	r8, r0
 801e358:	4689      	mov	r9, r1
 801e35a:	4620      	mov	r0, r4
 801e35c:	4629      	mov	r1, r5
 801e35e:	a370      	add	r3, pc, #448	; (adr r3, 801e520 <__ieee754_pow+0xa10>)
 801e360:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e364:	f7e2 f93a 	bl	80005dc <__aeabi_dmul>
 801e368:	4602      	mov	r2, r0
 801e36a:	460b      	mov	r3, r1
 801e36c:	4640      	mov	r0, r8
 801e36e:	4649      	mov	r1, r9
 801e370:	f7e1 ff7e 	bl	8000270 <__adddf3>
 801e374:	4604      	mov	r4, r0
 801e376:	460d      	mov	r5, r1
 801e378:	4602      	mov	r2, r0
 801e37a:	460b      	mov	r3, r1
 801e37c:	4630      	mov	r0, r6
 801e37e:	4639      	mov	r1, r7
 801e380:	f7e1 ff76 	bl	8000270 <__adddf3>
 801e384:	4632      	mov	r2, r6
 801e386:	4680      	mov	r8, r0
 801e388:	4689      	mov	r9, r1
 801e38a:	463b      	mov	r3, r7
 801e38c:	f7e1 ff6e 	bl	800026c <__aeabi_dsub>
 801e390:	4602      	mov	r2, r0
 801e392:	460b      	mov	r3, r1
 801e394:	4620      	mov	r0, r4
 801e396:	4629      	mov	r1, r5
 801e398:	f7e1 ff68 	bl	800026c <__aeabi_dsub>
 801e39c:	4642      	mov	r2, r8
 801e39e:	4606      	mov	r6, r0
 801e3a0:	460f      	mov	r7, r1
 801e3a2:	464b      	mov	r3, r9
 801e3a4:	4640      	mov	r0, r8
 801e3a6:	4649      	mov	r1, r9
 801e3a8:	f7e2 f918 	bl	80005dc <__aeabi_dmul>
 801e3ac:	4604      	mov	r4, r0
 801e3ae:	460d      	mov	r5, r1
 801e3b0:	a35d      	add	r3, pc, #372	; (adr r3, 801e528 <__ieee754_pow+0xa18>)
 801e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3b6:	f7e2 f911 	bl	80005dc <__aeabi_dmul>
 801e3ba:	a35d      	add	r3, pc, #372	; (adr r3, 801e530 <__ieee754_pow+0xa20>)
 801e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3c0:	f7e1 ff54 	bl	800026c <__aeabi_dsub>
 801e3c4:	4622      	mov	r2, r4
 801e3c6:	462b      	mov	r3, r5
 801e3c8:	f7e2 f908 	bl	80005dc <__aeabi_dmul>
 801e3cc:	a35a      	add	r3, pc, #360	; (adr r3, 801e538 <__ieee754_pow+0xa28>)
 801e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3d2:	f7e1 ff4d 	bl	8000270 <__adddf3>
 801e3d6:	4622      	mov	r2, r4
 801e3d8:	462b      	mov	r3, r5
 801e3da:	f7e2 f8ff 	bl	80005dc <__aeabi_dmul>
 801e3de:	a358      	add	r3, pc, #352	; (adr r3, 801e540 <__ieee754_pow+0xa30>)
 801e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3e4:	f7e1 ff42 	bl	800026c <__aeabi_dsub>
 801e3e8:	4622      	mov	r2, r4
 801e3ea:	462b      	mov	r3, r5
 801e3ec:	f7e2 f8f6 	bl	80005dc <__aeabi_dmul>
 801e3f0:	a355      	add	r3, pc, #340	; (adr r3, 801e548 <__ieee754_pow+0xa38>)
 801e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3f6:	f7e1 ff3b 	bl	8000270 <__adddf3>
 801e3fa:	4622      	mov	r2, r4
 801e3fc:	462b      	mov	r3, r5
 801e3fe:	f7e2 f8ed 	bl	80005dc <__aeabi_dmul>
 801e402:	4602      	mov	r2, r0
 801e404:	460b      	mov	r3, r1
 801e406:	4640      	mov	r0, r8
 801e408:	4649      	mov	r1, r9
 801e40a:	f7e1 ff2f 	bl	800026c <__aeabi_dsub>
 801e40e:	4604      	mov	r4, r0
 801e410:	460d      	mov	r5, r1
 801e412:	4602      	mov	r2, r0
 801e414:	460b      	mov	r3, r1
 801e416:	4640      	mov	r0, r8
 801e418:	4649      	mov	r1, r9
 801e41a:	f7e2 f8df 	bl	80005dc <__aeabi_dmul>
 801e41e:	2200      	movs	r2, #0
 801e420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e424:	ec41 0b19 	vmov	d9, r0, r1
 801e428:	4620      	mov	r0, r4
 801e42a:	4629      	mov	r1, r5
 801e42c:	f7e1 ff1e 	bl	800026c <__aeabi_dsub>
 801e430:	4602      	mov	r2, r0
 801e432:	460b      	mov	r3, r1
 801e434:	ec51 0b19 	vmov	r0, r1, d9
 801e438:	f7e2 f9fa 	bl	8000830 <__aeabi_ddiv>
 801e43c:	4632      	mov	r2, r6
 801e43e:	4604      	mov	r4, r0
 801e440:	460d      	mov	r5, r1
 801e442:	463b      	mov	r3, r7
 801e444:	4640      	mov	r0, r8
 801e446:	4649      	mov	r1, r9
 801e448:	f7e2 f8c8 	bl	80005dc <__aeabi_dmul>
 801e44c:	4632      	mov	r2, r6
 801e44e:	463b      	mov	r3, r7
 801e450:	f7e1 ff0e 	bl	8000270 <__adddf3>
 801e454:	4602      	mov	r2, r0
 801e456:	460b      	mov	r3, r1
 801e458:	4620      	mov	r0, r4
 801e45a:	4629      	mov	r1, r5
 801e45c:	f7e1 ff06 	bl	800026c <__aeabi_dsub>
 801e460:	4642      	mov	r2, r8
 801e462:	464b      	mov	r3, r9
 801e464:	f7e1 ff02 	bl	800026c <__aeabi_dsub>
 801e468:	460b      	mov	r3, r1
 801e46a:	4602      	mov	r2, r0
 801e46c:	493a      	ldr	r1, [pc, #232]	; (801e558 <__ieee754_pow+0xa48>)
 801e46e:	2000      	movs	r0, #0
 801e470:	f7e1 fefc 	bl	800026c <__aeabi_dsub>
 801e474:	ec41 0b10 	vmov	d0, r0, r1
 801e478:	ee10 3a90 	vmov	r3, s1
 801e47c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801e480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e484:	da2b      	bge.n	801e4de <__ieee754_pow+0x9ce>
 801e486:	4650      	mov	r0, sl
 801e488:	f000 fdfa 	bl	801f080 <scalbn>
 801e48c:	ec51 0b10 	vmov	r0, r1, d0
 801e490:	ec53 2b18 	vmov	r2, r3, d8
 801e494:	f7ff bbed 	b.w	801dc72 <__ieee754_pow+0x162>
 801e498:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801e49c:	4b2f      	ldr	r3, [pc, #188]	; (801e55c <__ieee754_pow+0xa4c>)
 801e49e:	429e      	cmp	r6, r3
 801e4a0:	f77f af0c 	ble.w	801e2bc <__ieee754_pow+0x7ac>
 801e4a4:	4b2e      	ldr	r3, [pc, #184]	; (801e560 <__ieee754_pow+0xa50>)
 801e4a6:	440b      	add	r3, r1
 801e4a8:	4303      	orrs	r3, r0
 801e4aa:	d009      	beq.n	801e4c0 <__ieee754_pow+0x9b0>
 801e4ac:	2200      	movs	r2, #0
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	ec51 0b18 	vmov	r0, r1, d8
 801e4b4:	f7e2 fb04 	bl	8000ac0 <__aeabi_dcmplt>
 801e4b8:	3800      	subs	r0, #0
 801e4ba:	bf18      	it	ne
 801e4bc:	2001      	movne	r0, #1
 801e4be:	e447      	b.n	801dd50 <__ieee754_pow+0x240>
 801e4c0:	4622      	mov	r2, r4
 801e4c2:	462b      	mov	r3, r5
 801e4c4:	f7e1 fed2 	bl	800026c <__aeabi_dsub>
 801e4c8:	4642      	mov	r2, r8
 801e4ca:	464b      	mov	r3, r9
 801e4cc:	f7e2 fb0c 	bl	8000ae8 <__aeabi_dcmpge>
 801e4d0:	2800      	cmp	r0, #0
 801e4d2:	f43f aef3 	beq.w	801e2bc <__ieee754_pow+0x7ac>
 801e4d6:	e7e9      	b.n	801e4ac <__ieee754_pow+0x99c>
 801e4d8:	f04f 0a00 	mov.w	sl, #0
 801e4dc:	e71a      	b.n	801e314 <__ieee754_pow+0x804>
 801e4de:	ec51 0b10 	vmov	r0, r1, d0
 801e4e2:	4619      	mov	r1, r3
 801e4e4:	e7d4      	b.n	801e490 <__ieee754_pow+0x980>
 801e4e6:	2000      	movs	r0, #0
 801e4e8:	491b      	ldr	r1, [pc, #108]	; (801e558 <__ieee754_pow+0xa48>)
 801e4ea:	f7ff bb30 	b.w	801db4e <__ieee754_pow+0x3e>
 801e4ee:	2000      	movs	r0, #0
 801e4f0:	2100      	movs	r1, #0
 801e4f2:	f7ff bb2c 	b.w	801db4e <__ieee754_pow+0x3e>
 801e4f6:	4630      	mov	r0, r6
 801e4f8:	4639      	mov	r1, r7
 801e4fa:	f7ff bb28 	b.w	801db4e <__ieee754_pow+0x3e>
 801e4fe:	9204      	str	r2, [sp, #16]
 801e500:	f7ff bb7a 	b.w	801dbf8 <__ieee754_pow+0xe8>
 801e504:	2300      	movs	r3, #0
 801e506:	f7ff bb64 	b.w	801dbd2 <__ieee754_pow+0xc2>
 801e50a:	bf00      	nop
 801e50c:	f3af 8000 	nop.w
 801e510:	00000000 	.word	0x00000000
 801e514:	3fe62e43 	.word	0x3fe62e43
 801e518:	fefa39ef 	.word	0xfefa39ef
 801e51c:	3fe62e42 	.word	0x3fe62e42
 801e520:	0ca86c39 	.word	0x0ca86c39
 801e524:	be205c61 	.word	0xbe205c61
 801e528:	72bea4d0 	.word	0x72bea4d0
 801e52c:	3e663769 	.word	0x3e663769
 801e530:	c5d26bf1 	.word	0xc5d26bf1
 801e534:	3ebbbd41 	.word	0x3ebbbd41
 801e538:	af25de2c 	.word	0xaf25de2c
 801e53c:	3f11566a 	.word	0x3f11566a
 801e540:	16bebd93 	.word	0x16bebd93
 801e544:	3f66c16c 	.word	0x3f66c16c
 801e548:	5555553e 	.word	0x5555553e
 801e54c:	3fc55555 	.word	0x3fc55555
 801e550:	3fe00000 	.word	0x3fe00000
 801e554:	fff00000 	.word	0xfff00000
 801e558:	3ff00000 	.word	0x3ff00000
 801e55c:	4090cbff 	.word	0x4090cbff
 801e560:	3f6f3400 	.word	0x3f6f3400
 801e564:	652b82fe 	.word	0x652b82fe
 801e568:	3c971547 	.word	0x3c971547
 801e56c:	00000000 	.word	0x00000000

0801e570 <__ieee754_rem_pio2>:
 801e570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e574:	ec55 4b10 	vmov	r4, r5, d0
 801e578:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801e57c:	4bca      	ldr	r3, [pc, #808]	; (801e8a8 <__ieee754_rem_pio2+0x338>)
 801e57e:	4682      	mov	sl, r0
 801e580:	4598      	cmp	r8, r3
 801e582:	ed2d 8b02 	vpush	{d8}
 801e586:	b08b      	sub	sp, #44	; 0x2c
 801e588:	9502      	str	r5, [sp, #8]
 801e58a:	dc08      	bgt.n	801e59e <__ieee754_rem_pio2+0x2e>
 801e58c:	2200      	movs	r2, #0
 801e58e:	2300      	movs	r3, #0
 801e590:	ed80 0b00 	vstr	d0, [r0]
 801e594:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e598:	f04f 0b00 	mov.w	fp, #0
 801e59c:	e028      	b.n	801e5f0 <__ieee754_rem_pio2+0x80>
 801e59e:	4bc3      	ldr	r3, [pc, #780]	; (801e8ac <__ieee754_rem_pio2+0x33c>)
 801e5a0:	4598      	cmp	r8, r3
 801e5a2:	dc78      	bgt.n	801e696 <__ieee754_rem_pio2+0x126>
 801e5a4:	9b02      	ldr	r3, [sp, #8]
 801e5a6:	ee10 0a10 	vmov	r0, s0
 801e5aa:	4ec1      	ldr	r6, [pc, #772]	; (801e8b0 <__ieee754_rem_pio2+0x340>)
 801e5ac:	4629      	mov	r1, r5
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	a3af      	add	r3, pc, #700	; (adr r3, 801e870 <__ieee754_rem_pio2+0x300>)
 801e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5b6:	dd39      	ble.n	801e62c <__ieee754_rem_pio2+0xbc>
 801e5b8:	f7e1 fe58 	bl	800026c <__aeabi_dsub>
 801e5bc:	45b0      	cmp	r8, r6
 801e5be:	4604      	mov	r4, r0
 801e5c0:	460d      	mov	r5, r1
 801e5c2:	d01b      	beq.n	801e5fc <__ieee754_rem_pio2+0x8c>
 801e5c4:	a3ac      	add	r3, pc, #688	; (adr r3, 801e878 <__ieee754_rem_pio2+0x308>)
 801e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5ca:	f7e1 fe4f 	bl	800026c <__aeabi_dsub>
 801e5ce:	4602      	mov	r2, r0
 801e5d0:	460b      	mov	r3, r1
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	4629      	mov	r1, r5
 801e5d6:	e9ca 2300 	strd	r2, r3, [sl]
 801e5da:	f7e1 fe47 	bl	800026c <__aeabi_dsub>
 801e5de:	a3a6      	add	r3, pc, #664	; (adr r3, 801e878 <__ieee754_rem_pio2+0x308>)
 801e5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e4:	f04f 0b01 	mov.w	fp, #1
 801e5e8:	f7e1 fe40 	bl	800026c <__aeabi_dsub>
 801e5ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e5f0:	4658      	mov	r0, fp
 801e5f2:	b00b      	add	sp, #44	; 0x2c
 801e5f4:	ecbd 8b02 	vpop	{d8}
 801e5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5fc:	a3a0      	add	r3, pc, #640	; (adr r3, 801e880 <__ieee754_rem_pio2+0x310>)
 801e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e602:	f7e1 fe33 	bl	800026c <__aeabi_dsub>
 801e606:	4604      	mov	r4, r0
 801e608:	460d      	mov	r5, r1
 801e60a:	a39f      	add	r3, pc, #636	; (adr r3, 801e888 <__ieee754_rem_pio2+0x318>)
 801e60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e610:	f7e1 fe2c 	bl	800026c <__aeabi_dsub>
 801e614:	4602      	mov	r2, r0
 801e616:	460b      	mov	r3, r1
 801e618:	4620      	mov	r0, r4
 801e61a:	4629      	mov	r1, r5
 801e61c:	e9ca 2300 	strd	r2, r3, [sl]
 801e620:	f7e1 fe24 	bl	800026c <__aeabi_dsub>
 801e624:	a398      	add	r3, pc, #608	; (adr r3, 801e888 <__ieee754_rem_pio2+0x318>)
 801e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e62a:	e7db      	b.n	801e5e4 <__ieee754_rem_pio2+0x74>
 801e62c:	f7e1 fe20 	bl	8000270 <__adddf3>
 801e630:	45b0      	cmp	r8, r6
 801e632:	4604      	mov	r4, r0
 801e634:	460d      	mov	r5, r1
 801e636:	d016      	beq.n	801e666 <__ieee754_rem_pio2+0xf6>
 801e638:	a38f      	add	r3, pc, #572	; (adr r3, 801e878 <__ieee754_rem_pio2+0x308>)
 801e63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63e:	f7e1 fe17 	bl	8000270 <__adddf3>
 801e642:	4602      	mov	r2, r0
 801e644:	460b      	mov	r3, r1
 801e646:	4620      	mov	r0, r4
 801e648:	4629      	mov	r1, r5
 801e64a:	e9ca 2300 	strd	r2, r3, [sl]
 801e64e:	f7e1 fe0d 	bl	800026c <__aeabi_dsub>
 801e652:	a389      	add	r3, pc, #548	; (adr r3, 801e878 <__ieee754_rem_pio2+0x308>)
 801e654:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e658:	f7e1 fe0a 	bl	8000270 <__adddf3>
 801e65c:	f04f 3bff 	mov.w	fp, #4294967295
 801e660:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e664:	e7c4      	b.n	801e5f0 <__ieee754_rem_pio2+0x80>
 801e666:	a386      	add	r3, pc, #536	; (adr r3, 801e880 <__ieee754_rem_pio2+0x310>)
 801e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e66c:	f7e1 fe00 	bl	8000270 <__adddf3>
 801e670:	4604      	mov	r4, r0
 801e672:	460d      	mov	r5, r1
 801e674:	a384      	add	r3, pc, #528	; (adr r3, 801e888 <__ieee754_rem_pio2+0x318>)
 801e676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e67a:	f7e1 fdf9 	bl	8000270 <__adddf3>
 801e67e:	4602      	mov	r2, r0
 801e680:	460b      	mov	r3, r1
 801e682:	4620      	mov	r0, r4
 801e684:	4629      	mov	r1, r5
 801e686:	e9ca 2300 	strd	r2, r3, [sl]
 801e68a:	f7e1 fdef 	bl	800026c <__aeabi_dsub>
 801e68e:	a37e      	add	r3, pc, #504	; (adr r3, 801e888 <__ieee754_rem_pio2+0x318>)
 801e690:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e694:	e7e0      	b.n	801e658 <__ieee754_rem_pio2+0xe8>
 801e696:	4b87      	ldr	r3, [pc, #540]	; (801e8b4 <__ieee754_rem_pio2+0x344>)
 801e698:	4598      	cmp	r8, r3
 801e69a:	f300 80d8 	bgt.w	801e84e <__ieee754_rem_pio2+0x2de>
 801e69e:	f000 f96d 	bl	801e97c <fabs>
 801e6a2:	ee10 0a10 	vmov	r0, s0
 801e6a6:	ec55 4b10 	vmov	r4, r5, d0
 801e6aa:	a379      	add	r3, pc, #484	; (adr r3, 801e890 <__ieee754_rem_pio2+0x320>)
 801e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6b0:	4629      	mov	r1, r5
 801e6b2:	f7e1 ff93 	bl	80005dc <__aeabi_dmul>
 801e6b6:	2200      	movs	r2, #0
 801e6b8:	4b7f      	ldr	r3, [pc, #508]	; (801e8b8 <__ieee754_rem_pio2+0x348>)
 801e6ba:	f7e1 fdd9 	bl	8000270 <__adddf3>
 801e6be:	f7e2 fa3d 	bl	8000b3c <__aeabi_d2iz>
 801e6c2:	4683      	mov	fp, r0
 801e6c4:	f7e1 ff20 	bl	8000508 <__aeabi_i2d>
 801e6c8:	4602      	mov	r2, r0
 801e6ca:	460b      	mov	r3, r1
 801e6cc:	ec43 2b18 	vmov	d8, r2, r3
 801e6d0:	a367      	add	r3, pc, #412	; (adr r3, 801e870 <__ieee754_rem_pio2+0x300>)
 801e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d6:	f7e1 ff81 	bl	80005dc <__aeabi_dmul>
 801e6da:	4602      	mov	r2, r0
 801e6dc:	460b      	mov	r3, r1
 801e6de:	4620      	mov	r0, r4
 801e6e0:	4629      	mov	r1, r5
 801e6e2:	f7e1 fdc3 	bl	800026c <__aeabi_dsub>
 801e6e6:	4606      	mov	r6, r0
 801e6e8:	460f      	mov	r7, r1
 801e6ea:	a363      	add	r3, pc, #396	; (adr r3, 801e878 <__ieee754_rem_pio2+0x308>)
 801e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6f0:	ec51 0b18 	vmov	r0, r1, d8
 801e6f4:	f7e1 ff72 	bl	80005dc <__aeabi_dmul>
 801e6f8:	f1bb 0f1f 	cmp.w	fp, #31
 801e6fc:	4604      	mov	r4, r0
 801e6fe:	460d      	mov	r5, r1
 801e700:	dc0d      	bgt.n	801e71e <__ieee754_rem_pio2+0x1ae>
 801e702:	f10b 32ff 	add.w	r2, fp, #4294967295
 801e706:	4b6d      	ldr	r3, [pc, #436]	; (801e8bc <__ieee754_rem_pio2+0x34c>)
 801e708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e70c:	4543      	cmp	r3, r8
 801e70e:	d006      	beq.n	801e71e <__ieee754_rem_pio2+0x1ae>
 801e710:	4622      	mov	r2, r4
 801e712:	462b      	mov	r3, r5
 801e714:	4630      	mov	r0, r6
 801e716:	4639      	mov	r1, r7
 801e718:	f7e1 fda8 	bl	800026c <__aeabi_dsub>
 801e71c:	e00e      	b.n	801e73c <__ieee754_rem_pio2+0x1cc>
 801e71e:	462b      	mov	r3, r5
 801e720:	4622      	mov	r2, r4
 801e722:	4630      	mov	r0, r6
 801e724:	4639      	mov	r1, r7
 801e726:	f7e1 fda1 	bl	800026c <__aeabi_dsub>
 801e72a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e72e:	9303      	str	r3, [sp, #12]
 801e730:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e734:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801e738:	2b10      	cmp	r3, #16
 801e73a:	dc02      	bgt.n	801e742 <__ieee754_rem_pio2+0x1d2>
 801e73c:	e9ca 0100 	strd	r0, r1, [sl]
 801e740:	e039      	b.n	801e7b6 <__ieee754_rem_pio2+0x246>
 801e742:	a34f      	add	r3, pc, #316	; (adr r3, 801e880 <__ieee754_rem_pio2+0x310>)
 801e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e748:	ec51 0b18 	vmov	r0, r1, d8
 801e74c:	f7e1 ff46 	bl	80005dc <__aeabi_dmul>
 801e750:	4604      	mov	r4, r0
 801e752:	460d      	mov	r5, r1
 801e754:	4602      	mov	r2, r0
 801e756:	460b      	mov	r3, r1
 801e758:	4630      	mov	r0, r6
 801e75a:	4639      	mov	r1, r7
 801e75c:	f7e1 fd86 	bl	800026c <__aeabi_dsub>
 801e760:	4602      	mov	r2, r0
 801e762:	460b      	mov	r3, r1
 801e764:	4680      	mov	r8, r0
 801e766:	4689      	mov	r9, r1
 801e768:	4630      	mov	r0, r6
 801e76a:	4639      	mov	r1, r7
 801e76c:	f7e1 fd7e 	bl	800026c <__aeabi_dsub>
 801e770:	4622      	mov	r2, r4
 801e772:	462b      	mov	r3, r5
 801e774:	f7e1 fd7a 	bl	800026c <__aeabi_dsub>
 801e778:	4604      	mov	r4, r0
 801e77a:	460d      	mov	r5, r1
 801e77c:	a342      	add	r3, pc, #264	; (adr r3, 801e888 <__ieee754_rem_pio2+0x318>)
 801e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e782:	ec51 0b18 	vmov	r0, r1, d8
 801e786:	f7e1 ff29 	bl	80005dc <__aeabi_dmul>
 801e78a:	4622      	mov	r2, r4
 801e78c:	462b      	mov	r3, r5
 801e78e:	f7e1 fd6d 	bl	800026c <__aeabi_dsub>
 801e792:	4602      	mov	r2, r0
 801e794:	460b      	mov	r3, r1
 801e796:	4604      	mov	r4, r0
 801e798:	460d      	mov	r5, r1
 801e79a:	4640      	mov	r0, r8
 801e79c:	4649      	mov	r1, r9
 801e79e:	f7e1 fd65 	bl	800026c <__aeabi_dsub>
 801e7a2:	9a03      	ldr	r2, [sp, #12]
 801e7a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e7a8:	1ad3      	subs	r3, r2, r3
 801e7aa:	2b31      	cmp	r3, #49	; 0x31
 801e7ac:	dc24      	bgt.n	801e7f8 <__ieee754_rem_pio2+0x288>
 801e7ae:	4646      	mov	r6, r8
 801e7b0:	464f      	mov	r7, r9
 801e7b2:	e9ca 0100 	strd	r0, r1, [sl]
 801e7b6:	e9da 8900 	ldrd	r8, r9, [sl]
 801e7ba:	4630      	mov	r0, r6
 801e7bc:	4639      	mov	r1, r7
 801e7be:	4642      	mov	r2, r8
 801e7c0:	464b      	mov	r3, r9
 801e7c2:	f7e1 fd53 	bl	800026c <__aeabi_dsub>
 801e7c6:	462b      	mov	r3, r5
 801e7c8:	4622      	mov	r2, r4
 801e7ca:	f7e1 fd4f 	bl	800026c <__aeabi_dsub>
 801e7ce:	9b02      	ldr	r3, [sp, #8]
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e7d6:	f6bf af0b 	bge.w	801e5f0 <__ieee754_rem_pio2+0x80>
 801e7da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e7de:	f8ca 8000 	str.w	r8, [sl]
 801e7e2:	f8ca 0008 	str.w	r0, [sl, #8]
 801e7e6:	f8ca 3004 	str.w	r3, [sl, #4]
 801e7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e7ee:	f8ca 300c 	str.w	r3, [sl, #12]
 801e7f2:	f1cb 0b00 	rsb	fp, fp, #0
 801e7f6:	e6fb      	b.n	801e5f0 <__ieee754_rem_pio2+0x80>
 801e7f8:	a327      	add	r3, pc, #156	; (adr r3, 801e898 <__ieee754_rem_pio2+0x328>)
 801e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7fe:	ec51 0b18 	vmov	r0, r1, d8
 801e802:	f7e1 feeb 	bl	80005dc <__aeabi_dmul>
 801e806:	4604      	mov	r4, r0
 801e808:	460d      	mov	r5, r1
 801e80a:	4602      	mov	r2, r0
 801e80c:	460b      	mov	r3, r1
 801e80e:	4640      	mov	r0, r8
 801e810:	4649      	mov	r1, r9
 801e812:	f7e1 fd2b 	bl	800026c <__aeabi_dsub>
 801e816:	4602      	mov	r2, r0
 801e818:	460b      	mov	r3, r1
 801e81a:	4606      	mov	r6, r0
 801e81c:	460f      	mov	r7, r1
 801e81e:	4640      	mov	r0, r8
 801e820:	4649      	mov	r1, r9
 801e822:	f7e1 fd23 	bl	800026c <__aeabi_dsub>
 801e826:	4622      	mov	r2, r4
 801e828:	462b      	mov	r3, r5
 801e82a:	f7e1 fd1f 	bl	800026c <__aeabi_dsub>
 801e82e:	4604      	mov	r4, r0
 801e830:	460d      	mov	r5, r1
 801e832:	a31b      	add	r3, pc, #108	; (adr r3, 801e8a0 <__ieee754_rem_pio2+0x330>)
 801e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e838:	ec51 0b18 	vmov	r0, r1, d8
 801e83c:	f7e1 fece 	bl	80005dc <__aeabi_dmul>
 801e840:	4622      	mov	r2, r4
 801e842:	462b      	mov	r3, r5
 801e844:	f7e1 fd12 	bl	800026c <__aeabi_dsub>
 801e848:	4604      	mov	r4, r0
 801e84a:	460d      	mov	r5, r1
 801e84c:	e760      	b.n	801e710 <__ieee754_rem_pio2+0x1a0>
 801e84e:	4b1c      	ldr	r3, [pc, #112]	; (801e8c0 <__ieee754_rem_pio2+0x350>)
 801e850:	4598      	cmp	r8, r3
 801e852:	dd37      	ble.n	801e8c4 <__ieee754_rem_pio2+0x354>
 801e854:	ee10 2a10 	vmov	r2, s0
 801e858:	462b      	mov	r3, r5
 801e85a:	4620      	mov	r0, r4
 801e85c:	4629      	mov	r1, r5
 801e85e:	f7e1 fd05 	bl	800026c <__aeabi_dsub>
 801e862:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e866:	e9ca 0100 	strd	r0, r1, [sl]
 801e86a:	e695      	b.n	801e598 <__ieee754_rem_pio2+0x28>
 801e86c:	f3af 8000 	nop.w
 801e870:	54400000 	.word	0x54400000
 801e874:	3ff921fb 	.word	0x3ff921fb
 801e878:	1a626331 	.word	0x1a626331
 801e87c:	3dd0b461 	.word	0x3dd0b461
 801e880:	1a600000 	.word	0x1a600000
 801e884:	3dd0b461 	.word	0x3dd0b461
 801e888:	2e037073 	.word	0x2e037073
 801e88c:	3ba3198a 	.word	0x3ba3198a
 801e890:	6dc9c883 	.word	0x6dc9c883
 801e894:	3fe45f30 	.word	0x3fe45f30
 801e898:	2e000000 	.word	0x2e000000
 801e89c:	3ba3198a 	.word	0x3ba3198a
 801e8a0:	252049c1 	.word	0x252049c1
 801e8a4:	397b839a 	.word	0x397b839a
 801e8a8:	3fe921fb 	.word	0x3fe921fb
 801e8ac:	4002d97b 	.word	0x4002d97b
 801e8b0:	3ff921fb 	.word	0x3ff921fb
 801e8b4:	413921fb 	.word	0x413921fb
 801e8b8:	3fe00000 	.word	0x3fe00000
 801e8bc:	08021ec8 	.word	0x08021ec8
 801e8c0:	7fefffff 	.word	0x7fefffff
 801e8c4:	ea4f 5628 	mov.w	r6, r8, asr #20
 801e8c8:	4620      	mov	r0, r4
 801e8ca:	2703      	movs	r7, #3
 801e8cc:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801e8d0:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801e8d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801e8d8:	460d      	mov	r5, r1
 801e8da:	f7e2 f92f 	bl	8000b3c <__aeabi_d2iz>
 801e8de:	f7e1 fe13 	bl	8000508 <__aeabi_i2d>
 801e8e2:	4602      	mov	r2, r0
 801e8e4:	460b      	mov	r3, r1
 801e8e6:	4620      	mov	r0, r4
 801e8e8:	4629      	mov	r1, r5
 801e8ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e8ee:	f7e1 fcbd 	bl	800026c <__aeabi_dsub>
 801e8f2:	2200      	movs	r2, #0
 801e8f4:	4b1f      	ldr	r3, [pc, #124]	; (801e974 <__ieee754_rem_pio2+0x404>)
 801e8f6:	f7e1 fe71 	bl	80005dc <__aeabi_dmul>
 801e8fa:	460d      	mov	r5, r1
 801e8fc:	4604      	mov	r4, r0
 801e8fe:	f7e2 f91d 	bl	8000b3c <__aeabi_d2iz>
 801e902:	f7e1 fe01 	bl	8000508 <__aeabi_i2d>
 801e906:	4602      	mov	r2, r0
 801e908:	460b      	mov	r3, r1
 801e90a:	4620      	mov	r0, r4
 801e90c:	4629      	mov	r1, r5
 801e90e:	2400      	movs	r4, #0
 801e910:	2500      	movs	r5, #0
 801e912:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e916:	f7e1 fca9 	bl	800026c <__aeabi_dsub>
 801e91a:	2200      	movs	r2, #0
 801e91c:	4b15      	ldr	r3, [pc, #84]	; (801e974 <__ieee754_rem_pio2+0x404>)
 801e91e:	f7e1 fe5d 	bl	80005dc <__aeabi_dmul>
 801e922:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801e926:	4622      	mov	r2, r4
 801e928:	462b      	mov	r3, r5
 801e92a:	46b9      	mov	r9, r7
 801e92c:	3f01      	subs	r7, #1
 801e92e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801e932:	f7e2 f8bb 	bl	8000aac <__aeabi_dcmpeq>
 801e936:	2800      	cmp	r0, #0
 801e938:	d1f5      	bne.n	801e926 <__ieee754_rem_pio2+0x3b6>
 801e93a:	4b0f      	ldr	r3, [pc, #60]	; (801e978 <__ieee754_rem_pio2+0x408>)
 801e93c:	4632      	mov	r2, r6
 801e93e:	4651      	mov	r1, sl
 801e940:	a804      	add	r0, sp, #16
 801e942:	9301      	str	r3, [sp, #4]
 801e944:	2302      	movs	r3, #2
 801e946:	9300      	str	r3, [sp, #0]
 801e948:	464b      	mov	r3, r9
 801e94a:	f000 fc4d 	bl	801f1e8 <__kernel_rem_pio2>
 801e94e:	9b02      	ldr	r3, [sp, #8]
 801e950:	4683      	mov	fp, r0
 801e952:	2b00      	cmp	r3, #0
 801e954:	f6bf ae4c 	bge.w	801e5f0 <__ieee754_rem_pio2+0x80>
 801e958:	e9da 2100 	ldrd	r2, r1, [sl]
 801e95c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e960:	e9ca 2300 	strd	r2, r3, [sl]
 801e964:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801e968:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e96c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801e970:	e73f      	b.n	801e7f2 <__ieee754_rem_pio2+0x282>
 801e972:	bf00      	nop
 801e974:	41700000 	.word	0x41700000
 801e978:	08021f48 	.word	0x08021f48

0801e97c <fabs>:
 801e97c:	ec51 0b10 	vmov	r0, r1, d0
 801e980:	ee10 2a10 	vmov	r2, s0
 801e984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e988:	ec43 2b10 	vmov	d0, r2, r3
 801e98c:	4770      	bx	lr
	...

0801e990 <__kernel_cosf>:
 801e990:	ee10 3a10 	vmov	r3, s0
 801e994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e99c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801e9a0:	da05      	bge.n	801e9ae <__kernel_cosf+0x1e>
 801e9a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801e9a6:	ee17 2a90 	vmov	r2, s15
 801e9aa:	2a00      	cmp	r2, #0
 801e9ac:	d03b      	beq.n	801ea26 <__kernel_cosf+0x96>
 801e9ae:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e9b2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801ea2c <__kernel_cosf+0x9c>
 801e9b6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801ea30 <__kernel_cosf+0xa0>
 801e9ba:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801e9be:	4a1d      	ldr	r2, [pc, #116]	; (801ea34 <__kernel_cosf+0xa4>)
 801e9c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e9c4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801ea38 <__kernel_cosf+0xa8>
 801e9c8:	4293      	cmp	r3, r2
 801e9ca:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e9ce:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 801ea3c <__kernel_cosf+0xac>
 801e9d2:	eea7 6a87 	vfma.f32	s12, s15, s14
 801e9d6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801ea40 <__kernel_cosf+0xb0>
 801e9da:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e9de:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801ea44 <__kernel_cosf+0xb4>
 801e9e2:	eea7 6a87 	vfma.f32	s12, s15, s14
 801e9e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e9ee:	ee26 6a07 	vmul.f32	s12, s12, s14
 801e9f2:	eee7 0a06 	vfma.f32	s1, s14, s12
 801e9f6:	dc04      	bgt.n	801ea02 <__kernel_cosf+0x72>
 801e9f8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e9fc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801ea00:	4770      	bx	lr
 801ea02:	4a11      	ldr	r2, [pc, #68]	; (801ea48 <__kernel_cosf+0xb8>)
 801ea04:	4293      	cmp	r3, r2
 801ea06:	bfd6      	itet	le
 801ea08:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801ea0c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801ea10:	ee07 3a10 	vmovle	s14, r3
 801ea14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ea18:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801ea1c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801ea20:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ea24:	4770      	bx	lr
 801ea26:	eeb0 0a66 	vmov.f32	s0, s13
 801ea2a:	4770      	bx	lr
 801ea2c:	ad47d74e 	.word	0xad47d74e
 801ea30:	310f74f6 	.word	0x310f74f6
 801ea34:	3e999999 	.word	0x3e999999
 801ea38:	b493f27c 	.word	0xb493f27c
 801ea3c:	37d00d01 	.word	0x37d00d01
 801ea40:	bab60b61 	.word	0xbab60b61
 801ea44:	3d2aaaab 	.word	0x3d2aaaab
 801ea48:	3f480000 	.word	0x3f480000

0801ea4c <__kernel_sinf>:
 801ea4c:	ee10 3a10 	vmov	r3, s0
 801ea50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ea54:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801ea58:	da04      	bge.n	801ea64 <__kernel_sinf+0x18>
 801ea5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ea5e:	ee17 3a90 	vmov	r3, s15
 801ea62:	b35b      	cbz	r3, 801eabc <__kernel_sinf+0x70>
 801ea64:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ea68:	eddf 7a15 	vldr	s15, [pc, #84]	; 801eac0 <__kernel_sinf+0x74>
 801ea6c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801eac4 <__kernel_sinf+0x78>
 801ea70:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ea74:	eddf 7a14 	vldr	s15, [pc, #80]	; 801eac8 <__kernel_sinf+0x7c>
 801ea78:	ee60 6a07 	vmul.f32	s13, s0, s14
 801ea7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ea80:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801eacc <__kernel_sinf+0x80>
 801ea84:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ea88:	eddf 7a11 	vldr	s15, [pc, #68]	; 801ead0 <__kernel_sinf+0x84>
 801ea8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ea90:	b930      	cbnz	r0, 801eaa0 <__kernel_sinf+0x54>
 801ea92:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801ead4 <__kernel_sinf+0x88>
 801ea96:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ea9a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801ea9e:	4770      	bx	lr
 801eaa0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801eaa4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801eaa8:	eee0 7a86 	vfma.f32	s15, s1, s12
 801eaac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801eab0:	eddf 7a09 	vldr	s15, [pc, #36]	; 801ead8 <__kernel_sinf+0x8c>
 801eab4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801eab8:	ee30 0a60 	vsub.f32	s0, s0, s1
 801eabc:	4770      	bx	lr
 801eabe:	bf00      	nop
 801eac0:	2f2ec9d3 	.word	0x2f2ec9d3
 801eac4:	b2d72f34 	.word	0xb2d72f34
 801eac8:	3638ef1b 	.word	0x3638ef1b
 801eacc:	b9500d01 	.word	0xb9500d01
 801ead0:	3c088889 	.word	0x3c088889
 801ead4:	be2aaaab 	.word	0xbe2aaaab
 801ead8:	3e2aaaab 	.word	0x3e2aaaab

0801eadc <__ieee754_atan2f>:
 801eadc:	ee10 2a90 	vmov	r2, s1
 801eae0:	eef0 7a40 	vmov.f32	s15, s0
 801eae4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801eae8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801eaec:	b510      	push	{r4, lr}
 801eaee:	dc06      	bgt.n	801eafe <__ieee754_atan2f+0x22>
 801eaf0:	ee10 0a10 	vmov	r0, s0
 801eaf4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801eaf8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801eafc:	dd04      	ble.n	801eb08 <__ieee754_atan2f+0x2c>
 801eafe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801eb02:	eeb0 0a67 	vmov.f32	s0, s15
 801eb06:	bd10      	pop	{r4, pc}
 801eb08:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801eb0c:	d103      	bne.n	801eb16 <__ieee754_atan2f+0x3a>
 801eb0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb12:	f000 b9d9 	b.w	801eec8 <atanf>
 801eb16:	1794      	asrs	r4, r2, #30
 801eb18:	f004 0402 	and.w	r4, r4, #2
 801eb1c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801eb20:	b93b      	cbnz	r3, 801eb32 <__ieee754_atan2f+0x56>
 801eb22:	2c02      	cmp	r4, #2
 801eb24:	d05c      	beq.n	801ebe0 <__ieee754_atan2f+0x104>
 801eb26:	2c03      	cmp	r4, #3
 801eb28:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801ebf4 <__ieee754_atan2f+0x118>
 801eb2c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801eb30:	e7e7      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801eb32:	b939      	cbnz	r1, 801eb44 <__ieee754_atan2f+0x68>
 801eb34:	2800      	cmp	r0, #0
 801eb36:	eddf 7a30 	vldr	s15, [pc, #192]	; 801ebf8 <__ieee754_atan2f+0x11c>
 801eb3a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801ebfc <__ieee754_atan2f+0x120>
 801eb3e:	fe67 7a87 	vselge.f32	s15, s15, s14
 801eb42:	e7de      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801eb44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801eb48:	d110      	bne.n	801eb6c <__ieee754_atan2f+0x90>
 801eb4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801eb4e:	f104 34ff 	add.w	r4, r4, #4294967295
 801eb52:	d107      	bne.n	801eb64 <__ieee754_atan2f+0x88>
 801eb54:	2c02      	cmp	r4, #2
 801eb56:	d846      	bhi.n	801ebe6 <__ieee754_atan2f+0x10a>
 801eb58:	4b29      	ldr	r3, [pc, #164]	; (801ec00 <__ieee754_atan2f+0x124>)
 801eb5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801eb5e:	edd3 7a00 	vldr	s15, [r3]
 801eb62:	e7ce      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801eb64:	2c02      	cmp	r4, #2
 801eb66:	d841      	bhi.n	801ebec <__ieee754_atan2f+0x110>
 801eb68:	4b26      	ldr	r3, [pc, #152]	; (801ec04 <__ieee754_atan2f+0x128>)
 801eb6a:	e7f6      	b.n	801eb5a <__ieee754_atan2f+0x7e>
 801eb6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801eb70:	d0e0      	beq.n	801eb34 <__ieee754_atan2f+0x58>
 801eb72:	1a5b      	subs	r3, r3, r1
 801eb74:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801eb78:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801eb7c:	da1a      	bge.n	801ebb4 <__ieee754_atan2f+0xd8>
 801eb7e:	2a00      	cmp	r2, #0
 801eb80:	da01      	bge.n	801eb86 <__ieee754_atan2f+0xaa>
 801eb82:	313c      	adds	r1, #60	; 0x3c
 801eb84:	db19      	blt.n	801ebba <__ieee754_atan2f+0xde>
 801eb86:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801eb8a:	f000 fa71 	bl	801f070 <fabsf>
 801eb8e:	f000 f99b 	bl	801eec8 <atanf>
 801eb92:	eef0 7a40 	vmov.f32	s15, s0
 801eb96:	2c01      	cmp	r4, #1
 801eb98:	d012      	beq.n	801ebc0 <__ieee754_atan2f+0xe4>
 801eb9a:	2c02      	cmp	r4, #2
 801eb9c:	d017      	beq.n	801ebce <__ieee754_atan2f+0xf2>
 801eb9e:	2c00      	cmp	r4, #0
 801eba0:	d0af      	beq.n	801eb02 <__ieee754_atan2f+0x26>
 801eba2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801ec08 <__ieee754_atan2f+0x12c>
 801eba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ebaa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801ec0c <__ieee754_atan2f+0x130>
 801ebae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ebb2:	e7a6      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801ebb4:	eddf 7a10 	vldr	s15, [pc, #64]	; 801ebf8 <__ieee754_atan2f+0x11c>
 801ebb8:	e7ed      	b.n	801eb96 <__ieee754_atan2f+0xba>
 801ebba:	eddf 7a15 	vldr	s15, [pc, #84]	; 801ec10 <__ieee754_atan2f+0x134>
 801ebbe:	e7ea      	b.n	801eb96 <__ieee754_atan2f+0xba>
 801ebc0:	ee17 3a90 	vmov	r3, s15
 801ebc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ebc8:	ee07 3a90 	vmov	s15, r3
 801ebcc:	e799      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801ebce:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801ec08 <__ieee754_atan2f+0x12c>
 801ebd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ebd6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801ec0c <__ieee754_atan2f+0x130>
 801ebda:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ebde:	e790      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801ebe0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801ec0c <__ieee754_atan2f+0x130>
 801ebe4:	e78d      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801ebe6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801ec14 <__ieee754_atan2f+0x138>
 801ebea:	e78a      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801ebec:	eddf 7a08 	vldr	s15, [pc, #32]	; 801ec10 <__ieee754_atan2f+0x134>
 801ebf0:	e787      	b.n	801eb02 <__ieee754_atan2f+0x26>
 801ebf2:	bf00      	nop
 801ebf4:	c0490fdb 	.word	0xc0490fdb
 801ebf8:	3fc90fdb 	.word	0x3fc90fdb
 801ebfc:	bfc90fdb 	.word	0xbfc90fdb
 801ec00:	08022050 	.word	0x08022050
 801ec04:	0802205c 	.word	0x0802205c
 801ec08:	33bbbd2e 	.word	0x33bbbd2e
 801ec0c:	40490fdb 	.word	0x40490fdb
 801ec10:	00000000 	.word	0x00000000
 801ec14:	3f490fdb 	.word	0x3f490fdb

0801ec18 <__ieee754_rem_pio2f>:
 801ec18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec1a:	ee10 6a10 	vmov	r6, s0
 801ec1e:	4b85      	ldr	r3, [pc, #532]	; (801ee34 <__ieee754_rem_pio2f+0x21c>)
 801ec20:	b087      	sub	sp, #28
 801ec22:	4604      	mov	r4, r0
 801ec24:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801ec28:	429d      	cmp	r5, r3
 801ec2a:	dc05      	bgt.n	801ec38 <__ieee754_rem_pio2f+0x20>
 801ec2c:	2300      	movs	r3, #0
 801ec2e:	ed80 0a00 	vstr	s0, [r0]
 801ec32:	6043      	str	r3, [r0, #4]
 801ec34:	2000      	movs	r0, #0
 801ec36:	e020      	b.n	801ec7a <__ieee754_rem_pio2f+0x62>
 801ec38:	4b7f      	ldr	r3, [pc, #508]	; (801ee38 <__ieee754_rem_pio2f+0x220>)
 801ec3a:	429d      	cmp	r5, r3
 801ec3c:	dc38      	bgt.n	801ecb0 <__ieee754_rem_pio2f+0x98>
 801ec3e:	2e00      	cmp	r6, #0
 801ec40:	f025 050f 	bic.w	r5, r5, #15
 801ec44:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801ee3c <__ieee754_rem_pio2f+0x224>
 801ec48:	4b7d      	ldr	r3, [pc, #500]	; (801ee40 <__ieee754_rem_pio2f+0x228>)
 801ec4a:	dd18      	ble.n	801ec7e <__ieee754_rem_pio2f+0x66>
 801ec4c:	429d      	cmp	r5, r3
 801ec4e:	ee70 7a47 	vsub.f32	s15, s0, s14
 801ec52:	bf09      	itett	eq
 801ec54:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801ee44 <__ieee754_rem_pio2f+0x22c>
 801ec58:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 801ee48 <__ieee754_rem_pio2f+0x230>
 801ec5c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801ec60:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 801ee4c <__ieee754_rem_pio2f+0x234>
 801ec64:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801ec68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ec6c:	edc0 6a00 	vstr	s13, [r0]
 801ec70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ec74:	edc0 7a01 	vstr	s15, [r0, #4]
 801ec78:	2001      	movs	r0, #1
 801ec7a:	b007      	add	sp, #28
 801ec7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec7e:	429d      	cmp	r5, r3
 801ec80:	ee70 7a07 	vadd.f32	s15, s0, s14
 801ec84:	bf09      	itett	eq
 801ec86:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801ee44 <__ieee754_rem_pio2f+0x22c>
 801ec8a:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 801ee48 <__ieee754_rem_pio2f+0x230>
 801ec8e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801ec92:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 801ee4c <__ieee754_rem_pio2f+0x234>
 801ec96:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ec9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ec9e:	edc0 6a00 	vstr	s13, [r0]
 801eca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801eca6:	edc0 7a01 	vstr	s15, [r0, #4]
 801ecaa:	f04f 30ff 	mov.w	r0, #4294967295
 801ecae:	e7e4      	b.n	801ec7a <__ieee754_rem_pio2f+0x62>
 801ecb0:	4b67      	ldr	r3, [pc, #412]	; (801ee50 <__ieee754_rem_pio2f+0x238>)
 801ecb2:	429d      	cmp	r5, r3
 801ecb4:	dc70      	bgt.n	801ed98 <__ieee754_rem_pio2f+0x180>
 801ecb6:	f000 f9db 	bl	801f070 <fabsf>
 801ecba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ecbe:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801ee54 <__ieee754_rem_pio2f+0x23c>
 801ecc2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ecc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ecca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ecce:	ee17 0a90 	vmov	r0, s15
 801ecd2:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801ee3c <__ieee754_rem_pio2f+0x224>
 801ecd6:	281f      	cmp	r0, #31
 801ecd8:	eea7 0a67 	vfms.f32	s0, s14, s15
 801ecdc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801ee48 <__ieee754_rem_pio2f+0x230>
 801ece0:	eeb1 6a47 	vneg.f32	s12, s14
 801ece4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ece8:	ee70 6a67 	vsub.f32	s13, s0, s15
 801ecec:	ee16 2a90 	vmov	r2, s13
 801ecf0:	dc1c      	bgt.n	801ed2c <__ieee754_rem_pio2f+0x114>
 801ecf2:	1e47      	subs	r7, r0, #1
 801ecf4:	4958      	ldr	r1, [pc, #352]	; (801ee58 <__ieee754_rem_pio2f+0x240>)
 801ecf6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801ecfa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801ecfe:	428b      	cmp	r3, r1
 801ed00:	d014      	beq.n	801ed2c <__ieee754_rem_pio2f+0x114>
 801ed02:	6022      	str	r2, [r4, #0]
 801ed04:	ed94 7a00 	vldr	s14, [r4]
 801ed08:	2e00      	cmp	r6, #0
 801ed0a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ed0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ed12:	ed84 0a01 	vstr	s0, [r4, #4]
 801ed16:	dab0      	bge.n	801ec7a <__ieee754_rem_pio2f+0x62>
 801ed18:	eeb1 7a47 	vneg.f32	s14, s14
 801ed1c:	eeb1 0a40 	vneg.f32	s0, s0
 801ed20:	ed84 7a00 	vstr	s14, [r4]
 801ed24:	ed84 0a01 	vstr	s0, [r4, #4]
 801ed28:	4240      	negs	r0, r0
 801ed2a:	e7a6      	b.n	801ec7a <__ieee754_rem_pio2f+0x62>
 801ed2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801ed30:	15eb      	asrs	r3, r5, #23
 801ed32:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801ed36:	2908      	cmp	r1, #8
 801ed38:	dde3      	ble.n	801ed02 <__ieee754_rem_pio2f+0xea>
 801ed3a:	eef0 6a40 	vmov.f32	s13, s0
 801ed3e:	eddf 5a41 	vldr	s11, [pc, #260]	; 801ee44 <__ieee754_rem_pio2f+0x22c>
 801ed42:	eee6 6a25 	vfma.f32	s13, s12, s11
 801ed46:	ee70 7a66 	vsub.f32	s15, s0, s13
 801ed4a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ed4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801ee4c <__ieee754_rem_pio2f+0x234>
 801ed52:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801ed56:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801ed5a:	ee15 2a90 	vmov	r2, s11
 801ed5e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801ed62:	1a5b      	subs	r3, r3, r1
 801ed64:	2b19      	cmp	r3, #25
 801ed66:	dc04      	bgt.n	801ed72 <__ieee754_rem_pio2f+0x15a>
 801ed68:	eeb0 0a66 	vmov.f32	s0, s13
 801ed6c:	edc4 5a00 	vstr	s11, [r4]
 801ed70:	e7c8      	b.n	801ed04 <__ieee754_rem_pio2f+0xec>
 801ed72:	eeb0 0a66 	vmov.f32	s0, s13
 801ed76:	eddf 5a39 	vldr	s11, [pc, #228]	; 801ee5c <__ieee754_rem_pio2f+0x244>
 801ed7a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801ed7e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801ed82:	eddf 6a37 	vldr	s13, [pc, #220]	; 801ee60 <__ieee754_rem_pio2f+0x248>
 801ed86:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ed8a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801ed8e:	ee30 7a67 	vsub.f32	s14, s0, s15
 801ed92:	ed84 7a00 	vstr	s14, [r4]
 801ed96:	e7b5      	b.n	801ed04 <__ieee754_rem_pio2f+0xec>
 801ed98:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801ed9c:	db06      	blt.n	801edac <__ieee754_rem_pio2f+0x194>
 801ed9e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801eda2:	edc0 7a01 	vstr	s15, [r0, #4]
 801eda6:	edc0 7a00 	vstr	s15, [r0]
 801edaa:	e743      	b.n	801ec34 <__ieee754_rem_pio2f+0x1c>
 801edac:	15ea      	asrs	r2, r5, #23
 801edae:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801ee64 <__ieee754_rem_pio2f+0x24c>
 801edb2:	3a86      	subs	r2, #134	; 0x86
 801edb4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801edb8:	ee07 3a90 	vmov	s15, r3
 801edbc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801edc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801edc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801edc8:	ed8d 7a03 	vstr	s14, [sp, #12]
 801edcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801edd0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801edd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801edd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eddc:	ed8d 7a04 	vstr	s14, [sp, #16]
 801ede0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ede4:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ede8:	edcd 7a05 	vstr	s15, [sp, #20]
 801edec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edf0:	d11e      	bne.n	801ee30 <__ieee754_rem_pio2f+0x218>
 801edf2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801edf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edfa:	bf14      	ite	ne
 801edfc:	2302      	movne	r3, #2
 801edfe:	2301      	moveq	r3, #1
 801ee00:	4919      	ldr	r1, [pc, #100]	; (801ee68 <__ieee754_rem_pio2f+0x250>)
 801ee02:	a803      	add	r0, sp, #12
 801ee04:	9101      	str	r1, [sp, #4]
 801ee06:	2102      	movs	r1, #2
 801ee08:	9100      	str	r1, [sp, #0]
 801ee0a:	4621      	mov	r1, r4
 801ee0c:	f000 fd3e 	bl	801f88c <__kernel_rem_pio2f>
 801ee10:	2e00      	cmp	r6, #0
 801ee12:	f6bf af32 	bge.w	801ec7a <__ieee754_rem_pio2f+0x62>
 801ee16:	edd4 7a00 	vldr	s15, [r4]
 801ee1a:	eef1 7a67 	vneg.f32	s15, s15
 801ee1e:	edc4 7a00 	vstr	s15, [r4]
 801ee22:	edd4 7a01 	vldr	s15, [r4, #4]
 801ee26:	eef1 7a67 	vneg.f32	s15, s15
 801ee2a:	edc4 7a01 	vstr	s15, [r4, #4]
 801ee2e:	e77b      	b.n	801ed28 <__ieee754_rem_pio2f+0x110>
 801ee30:	2303      	movs	r3, #3
 801ee32:	e7e5      	b.n	801ee00 <__ieee754_rem_pio2f+0x1e8>
 801ee34:	3f490fd8 	.word	0x3f490fd8
 801ee38:	4016cbe3 	.word	0x4016cbe3
 801ee3c:	3fc90f80 	.word	0x3fc90f80
 801ee40:	3fc90fd0 	.word	0x3fc90fd0
 801ee44:	37354400 	.word	0x37354400
 801ee48:	37354443 	.word	0x37354443
 801ee4c:	2e85a308 	.word	0x2e85a308
 801ee50:	43490f80 	.word	0x43490f80
 801ee54:	3f22f984 	.word	0x3f22f984
 801ee58:	08022068 	.word	0x08022068
 801ee5c:	2e85a300 	.word	0x2e85a300
 801ee60:	248d3132 	.word	0x248d3132
 801ee64:	43800000 	.word	0x43800000
 801ee68:	080220e8 	.word	0x080220e8

0801ee6c <logf>:
 801ee6c:	b508      	push	{r3, lr}
 801ee6e:	ed2d 8b02 	vpush	{d8}
 801ee72:	eeb0 8a40 	vmov.f32	s16, s0
 801ee76:	f000 ff7d 	bl	801fd74 <__ieee754_logf>
 801ee7a:	eeb4 8a48 	vcmp.f32	s16, s16
 801ee7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee82:	d60f      	bvs.n	801eea4 <logf+0x38>
 801ee84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ee88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee8c:	dc0a      	bgt.n	801eea4 <logf+0x38>
 801ee8e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee96:	d108      	bne.n	801eeaa <logf+0x3e>
 801ee98:	f001 fc36 	bl	8020708 <__errno>
 801ee9c:	2322      	movs	r3, #34	; 0x22
 801ee9e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801eec0 <logf+0x54>
 801eea2:	6003      	str	r3, [r0, #0]
 801eea4:	ecbd 8b02 	vpop	{d8}
 801eea8:	bd08      	pop	{r3, pc}
 801eeaa:	f001 fc2d 	bl	8020708 <__errno>
 801eeae:	2321      	movs	r3, #33	; 0x21
 801eeb0:	ecbd 8b02 	vpop	{d8}
 801eeb4:	6003      	str	r3, [r0, #0]
 801eeb6:	4803      	ldr	r0, [pc, #12]	; (801eec4 <logf+0x58>)
 801eeb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801eebc:	f000 b98e 	b.w	801f1dc <nanf>
 801eec0:	ff800000 	.word	0xff800000
 801eec4:	08022552 	.word	0x08022552

0801eec8 <atanf>:
 801eec8:	b538      	push	{r3, r4, r5, lr}
 801eeca:	ee10 5a10 	vmov	r5, s0
 801eece:	eef0 7a40 	vmov.f32	s15, s0
 801eed2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801eed6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801eeda:	db0f      	blt.n	801eefc <atanf+0x34>
 801eedc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801eee0:	dd04      	ble.n	801eeec <atanf+0x24>
 801eee2:	ee70 7a00 	vadd.f32	s15, s0, s0
 801eee6:	eeb0 0a67 	vmov.f32	s0, s15
 801eeea:	bd38      	pop	{r3, r4, r5, pc}
 801eeec:	2d00      	cmp	r5, #0
 801eeee:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801f024 <atanf+0x15c>
 801eef2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801f028 <atanf+0x160>
 801eef6:	fe77 7a87 	vselgt.f32	s15, s15, s14
 801eefa:	e7f4      	b.n	801eee6 <atanf+0x1e>
 801eefc:	4b4b      	ldr	r3, [pc, #300]	; (801f02c <atanf+0x164>)
 801eefe:	429c      	cmp	r4, r3
 801ef00:	dc10      	bgt.n	801ef24 <atanf+0x5c>
 801ef02:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801ef06:	da0a      	bge.n	801ef1e <atanf+0x56>
 801ef08:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801f030 <atanf+0x168>
 801ef0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef10:	ee30 7a07 	vadd.f32	s14, s0, s14
 801ef14:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801ef18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef1c:	dce3      	bgt.n	801eee6 <atanf+0x1e>
 801ef1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ef22:	e013      	b.n	801ef4c <atanf+0x84>
 801ef24:	f000 f8a4 	bl	801f070 <fabsf>
 801ef28:	4b42      	ldr	r3, [pc, #264]	; (801f034 <atanf+0x16c>)
 801ef2a:	429c      	cmp	r4, r3
 801ef2c:	dc4f      	bgt.n	801efce <atanf+0x106>
 801ef2e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801ef32:	429c      	cmp	r4, r3
 801ef34:	dc41      	bgt.n	801efba <atanf+0xf2>
 801ef36:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801ef3a:	2300      	movs	r3, #0
 801ef3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801ef40:	eea0 7a27 	vfma.f32	s14, s0, s15
 801ef44:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ef48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ef4c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 801f038 <atanf+0x170>
 801ef50:	1c5a      	adds	r2, r3, #1
 801ef52:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801f03c <atanf+0x174>
 801ef56:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801f040 <atanf+0x178>
 801ef5a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801ef5e:	ee66 6a06 	vmul.f32	s13, s12, s12
 801ef62:	eee6 5a87 	vfma.f32	s11, s13, s14
 801ef66:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801f044 <atanf+0x17c>
 801ef6a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801ef6e:	eddf 5a36 	vldr	s11, [pc, #216]	; 801f048 <atanf+0x180>
 801ef72:	eee7 5a26 	vfma.f32	s11, s14, s13
 801ef76:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801f04c <atanf+0x184>
 801ef7a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801ef7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 801f050 <atanf+0x188>
 801ef82:	eee7 5a26 	vfma.f32	s11, s14, s13
 801ef86:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801f054 <atanf+0x18c>
 801ef8a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801ef8e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801f058 <atanf+0x190>
 801ef92:	eea5 7a26 	vfma.f32	s14, s10, s13
 801ef96:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801f05c <atanf+0x194>
 801ef9a:	eea7 5a26 	vfma.f32	s10, s14, s13
 801ef9e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801f060 <atanf+0x198>
 801efa2:	eea5 7a26 	vfma.f32	s14, s10, s13
 801efa6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801efaa:	eea5 7a86 	vfma.f32	s14, s11, s12
 801efae:	ee27 7a87 	vmul.f32	s14, s15, s14
 801efb2:	d121      	bne.n	801eff8 <atanf+0x130>
 801efb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801efb8:	e795      	b.n	801eee6 <atanf+0x1e>
 801efba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801efbe:	2301      	movs	r3, #1
 801efc0:	ee30 7a67 	vsub.f32	s14, s0, s15
 801efc4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801efc8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801efcc:	e7be      	b.n	801ef4c <atanf+0x84>
 801efce:	4b25      	ldr	r3, [pc, #148]	; (801f064 <atanf+0x19c>)
 801efd0:	429c      	cmp	r4, r3
 801efd2:	dc0b      	bgt.n	801efec <atanf+0x124>
 801efd4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801efd8:	2302      	movs	r3, #2
 801efda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801efde:	ee70 6a67 	vsub.f32	s13, s0, s15
 801efe2:	eea0 7a27 	vfma.f32	s14, s0, s15
 801efe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801efea:	e7af      	b.n	801ef4c <atanf+0x84>
 801efec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801eff0:	2303      	movs	r3, #3
 801eff2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eff6:	e7a9      	b.n	801ef4c <atanf+0x84>
 801eff8:	4a1b      	ldr	r2, [pc, #108]	; (801f068 <atanf+0x1a0>)
 801effa:	2d00      	cmp	r5, #0
 801effc:	491b      	ldr	r1, [pc, #108]	; (801f06c <atanf+0x1a4>)
 801effe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801f002:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f006:	edd3 6a00 	vldr	s13, [r3]
 801f00a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801f00e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f012:	edd2 7a00 	vldr	s15, [r2]
 801f016:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f01a:	bfb8      	it	lt
 801f01c:	eef1 7a67 	vneglt.f32	s15, s15
 801f020:	e761      	b.n	801eee6 <atanf+0x1e>
 801f022:	bf00      	nop
 801f024:	3fc90fdb 	.word	0x3fc90fdb
 801f028:	bfc90fdb 	.word	0xbfc90fdb
 801f02c:	3edfffff 	.word	0x3edfffff
 801f030:	7149f2ca 	.word	0x7149f2ca
 801f034:	3f97ffff 	.word	0x3f97ffff
 801f038:	3c8569d7 	.word	0x3c8569d7
 801f03c:	3d4bda59 	.word	0x3d4bda59
 801f040:	bd6ef16b 	.word	0xbd6ef16b
 801f044:	3d886b35 	.word	0x3d886b35
 801f048:	3dba2e6e 	.word	0x3dba2e6e
 801f04c:	3e124925 	.word	0x3e124925
 801f050:	3eaaaaab 	.word	0x3eaaaaab
 801f054:	bd15a221 	.word	0xbd15a221
 801f058:	bd9d8795 	.word	0xbd9d8795
 801f05c:	bde38e38 	.word	0xbde38e38
 801f060:	be4ccccd 	.word	0xbe4ccccd
 801f064:	401bffff 	.word	0x401bffff
 801f068:	08022400 	.word	0x08022400
 801f06c:	08022410 	.word	0x08022410

0801f070 <fabsf>:
 801f070:	ee10 3a10 	vmov	r3, s0
 801f074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f078:	ee00 3a10 	vmov	s0, r3
 801f07c:	4770      	bx	lr
	...

0801f080 <scalbn>:
 801f080:	b570      	push	{r4, r5, r6, lr}
 801f082:	ec55 4b10 	vmov	r4, r5, d0
 801f086:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801f08a:	4606      	mov	r6, r0
 801f08c:	462b      	mov	r3, r5
 801f08e:	b999      	cbnz	r1, 801f0b8 <scalbn+0x38>
 801f090:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f094:	4323      	orrs	r3, r4
 801f096:	d03f      	beq.n	801f118 <scalbn+0x98>
 801f098:	4b35      	ldr	r3, [pc, #212]	; (801f170 <scalbn+0xf0>)
 801f09a:	4629      	mov	r1, r5
 801f09c:	2200      	movs	r2, #0
 801f09e:	ee10 0a10 	vmov	r0, s0
 801f0a2:	f7e1 fa9b 	bl	80005dc <__aeabi_dmul>
 801f0a6:	4b33      	ldr	r3, [pc, #204]	; (801f174 <scalbn+0xf4>)
 801f0a8:	4604      	mov	r4, r0
 801f0aa:	460d      	mov	r5, r1
 801f0ac:	429e      	cmp	r6, r3
 801f0ae:	da10      	bge.n	801f0d2 <scalbn+0x52>
 801f0b0:	a327      	add	r3, pc, #156	; (adr r3, 801f150 <scalbn+0xd0>)
 801f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0b6:	e01f      	b.n	801f0f8 <scalbn+0x78>
 801f0b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801f0bc:	4291      	cmp	r1, r2
 801f0be:	d10c      	bne.n	801f0da <scalbn+0x5a>
 801f0c0:	ee10 2a10 	vmov	r2, s0
 801f0c4:	4620      	mov	r0, r4
 801f0c6:	4629      	mov	r1, r5
 801f0c8:	f7e1 f8d2 	bl	8000270 <__adddf3>
 801f0cc:	4604      	mov	r4, r0
 801f0ce:	460d      	mov	r5, r1
 801f0d0:	e022      	b.n	801f118 <scalbn+0x98>
 801f0d2:	460b      	mov	r3, r1
 801f0d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801f0d8:	3936      	subs	r1, #54	; 0x36
 801f0da:	f24c 3250 	movw	r2, #50000	; 0xc350
 801f0de:	4296      	cmp	r6, r2
 801f0e0:	dd0d      	ble.n	801f0fe <scalbn+0x7e>
 801f0e2:	2d00      	cmp	r5, #0
 801f0e4:	a11c      	add	r1, pc, #112	; (adr r1, 801f158 <scalbn+0xd8>)
 801f0e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0ea:	da02      	bge.n	801f0f2 <scalbn+0x72>
 801f0ec:	a11c      	add	r1, pc, #112	; (adr r1, 801f160 <scalbn+0xe0>)
 801f0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0f2:	a319      	add	r3, pc, #100	; (adr r3, 801f158 <scalbn+0xd8>)
 801f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0f8:	f7e1 fa70 	bl	80005dc <__aeabi_dmul>
 801f0fc:	e7e6      	b.n	801f0cc <scalbn+0x4c>
 801f0fe:	1872      	adds	r2, r6, r1
 801f100:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f104:	428a      	cmp	r2, r1
 801f106:	dcec      	bgt.n	801f0e2 <scalbn+0x62>
 801f108:	2a00      	cmp	r2, #0
 801f10a:	dd08      	ble.n	801f11e <scalbn+0x9e>
 801f10c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f110:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f114:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f118:	ec45 4b10 	vmov	d0, r4, r5
 801f11c:	bd70      	pop	{r4, r5, r6, pc}
 801f11e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f122:	da08      	bge.n	801f136 <scalbn+0xb6>
 801f124:	2d00      	cmp	r5, #0
 801f126:	a10a      	add	r1, pc, #40	; (adr r1, 801f150 <scalbn+0xd0>)
 801f128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f12c:	dac0      	bge.n	801f0b0 <scalbn+0x30>
 801f12e:	a10e      	add	r1, pc, #56	; (adr r1, 801f168 <scalbn+0xe8>)
 801f130:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f134:	e7bc      	b.n	801f0b0 <scalbn+0x30>
 801f136:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f13a:	3236      	adds	r2, #54	; 0x36
 801f13c:	4620      	mov	r0, r4
 801f13e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f142:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f146:	2200      	movs	r2, #0
 801f148:	4b0b      	ldr	r3, [pc, #44]	; (801f178 <scalbn+0xf8>)
 801f14a:	e7d5      	b.n	801f0f8 <scalbn+0x78>
 801f14c:	f3af 8000 	nop.w
 801f150:	c2f8f359 	.word	0xc2f8f359
 801f154:	01a56e1f 	.word	0x01a56e1f
 801f158:	8800759c 	.word	0x8800759c
 801f15c:	7e37e43c 	.word	0x7e37e43c
 801f160:	8800759c 	.word	0x8800759c
 801f164:	fe37e43c 	.word	0xfe37e43c
 801f168:	c2f8f359 	.word	0xc2f8f359
 801f16c:	81a56e1f 	.word	0x81a56e1f
 801f170:	43500000 	.word	0x43500000
 801f174:	ffff3cb0 	.word	0xffff3cb0
 801f178:	3c900000 	.word	0x3c900000

0801f17c <with_errno>:
 801f17c:	b570      	push	{r4, r5, r6, lr}
 801f17e:	4604      	mov	r4, r0
 801f180:	460d      	mov	r5, r1
 801f182:	4616      	mov	r6, r2
 801f184:	f001 fac0 	bl	8020708 <__errno>
 801f188:	4629      	mov	r1, r5
 801f18a:	6006      	str	r6, [r0, #0]
 801f18c:	4620      	mov	r0, r4
 801f18e:	bd70      	pop	{r4, r5, r6, pc}

0801f190 <xflow>:
 801f190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f192:	4614      	mov	r4, r2
 801f194:	461d      	mov	r5, r3
 801f196:	b108      	cbz	r0, 801f19c <xflow+0xc>
 801f198:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f19c:	4620      	mov	r0, r4
 801f19e:	4629      	mov	r1, r5
 801f1a0:	e9cd 2300 	strd	r2, r3, [sp]
 801f1a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f1a8:	f7e1 fa18 	bl	80005dc <__aeabi_dmul>
 801f1ac:	2222      	movs	r2, #34	; 0x22
 801f1ae:	b003      	add	sp, #12
 801f1b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f1b4:	f7ff bfe2 	b.w	801f17c <with_errno>

0801f1b8 <__math_uflow>:
 801f1b8:	b508      	push	{r3, lr}
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f1c0:	f7ff ffe6 	bl	801f190 <xflow>
 801f1c4:	ec41 0b10 	vmov	d0, r0, r1
 801f1c8:	bd08      	pop	{r3, pc}

0801f1ca <__math_oflow>:
 801f1ca:	b508      	push	{r3, lr}
 801f1cc:	2200      	movs	r2, #0
 801f1ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801f1d2:	f7ff ffdd 	bl	801f190 <xflow>
 801f1d6:	ec41 0b10 	vmov	d0, r0, r1
 801f1da:	bd08      	pop	{r3, pc}

0801f1dc <nanf>:
 801f1dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f1e4 <nanf+0x8>
 801f1e0:	4770      	bx	lr
 801f1e2:	bf00      	nop
 801f1e4:	7fc00000 	.word	0x7fc00000

0801f1e8 <__kernel_rem_pio2>:
 801f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1ec:	ed2d 8b02 	vpush	{d8}
 801f1f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801f1f4:	f112 0f14 	cmn.w	r2, #20
 801f1f8:	f04f 0500 	mov.w	r5, #0
 801f1fc:	9306      	str	r3, [sp, #24]
 801f1fe:	bfa8      	it	ge
 801f200:	1ed4      	subge	r4, r2, #3
 801f202:	4bc5      	ldr	r3, [pc, #788]	; (801f518 <__kernel_rem_pio2+0x330>)
 801f204:	bfb8      	it	lt
 801f206:	2400      	movlt	r4, #0
 801f208:	9104      	str	r1, [sp, #16]
 801f20a:	ae20      	add	r6, sp, #128	; 0x80
 801f20c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801f20e:	9009      	str	r0, [sp, #36]	; 0x24
 801f210:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f214:	9300      	str	r3, [sp, #0]
 801f216:	9b06      	ldr	r3, [sp, #24]
 801f218:	f103 33ff 	add.w	r3, r3, #4294967295
 801f21c:	9305      	str	r3, [sp, #20]
 801f21e:	bfa4      	itt	ge
 801f220:	2318      	movge	r3, #24
 801f222:	fb94 f4f3 	sdivge	r4, r4, r3
 801f226:	f06f 0317 	mvn.w	r3, #23
 801f22a:	fb04 3303 	mla	r3, r4, r3, r3
 801f22e:	eb03 0a02 	add.w	sl, r3, r2
 801f232:	9b00      	ldr	r3, [sp, #0]
 801f234:	9a05      	ldr	r2, [sp, #20]
 801f236:	eb03 0802 	add.w	r8, r3, r2
 801f23a:	1aa7      	subs	r7, r4, r2
 801f23c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801f23e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801f508 <__kernel_rem_pio2+0x320>
 801f242:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801f246:	4545      	cmp	r5, r8
 801f248:	dd13      	ble.n	801f272 <__kernel_rem_pio2+0x8a>
 801f24a:	aa20      	add	r2, sp, #128	; 0x80
 801f24c:	9b06      	ldr	r3, [sp, #24]
 801f24e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801f252:	f04f 0800 	mov.w	r8, #0
 801f256:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801f25a:	9b00      	ldr	r3, [sp, #0]
 801f25c:	4598      	cmp	r8, r3
 801f25e:	dc30      	bgt.n	801f2c2 <__kernel_rem_pio2+0xda>
 801f260:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f264:	462f      	mov	r7, r5
 801f266:	2600      	movs	r6, #0
 801f268:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801f508 <__kernel_rem_pio2+0x320>
 801f26c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f270:	e01b      	b.n	801f2aa <__kernel_rem_pio2+0xc2>
 801f272:	42ef      	cmn	r7, r5
 801f274:	d407      	bmi.n	801f286 <__kernel_rem_pio2+0x9e>
 801f276:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801f27a:	f7e1 f945 	bl	8000508 <__aeabi_i2d>
 801f27e:	3501      	adds	r5, #1
 801f280:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f284:	e7df      	b.n	801f246 <__kernel_rem_pio2+0x5e>
 801f286:	ec51 0b18 	vmov	r0, r1, d8
 801f28a:	e7f8      	b.n	801f27e <__kernel_rem_pio2+0x96>
 801f28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f290:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f294:	3601      	adds	r6, #1
 801f296:	f7e1 f9a1 	bl	80005dc <__aeabi_dmul>
 801f29a:	4602      	mov	r2, r0
 801f29c:	460b      	mov	r3, r1
 801f29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2a2:	f7e0 ffe5 	bl	8000270 <__adddf3>
 801f2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f2aa:	9b05      	ldr	r3, [sp, #20]
 801f2ac:	3f08      	subs	r7, #8
 801f2ae:	429e      	cmp	r6, r3
 801f2b0:	ddec      	ble.n	801f28c <__kernel_rem_pio2+0xa4>
 801f2b2:	f108 0801 	add.w	r8, r8, #1
 801f2b6:	3508      	adds	r5, #8
 801f2b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f2bc:	ecab 7b02 	vstmia	fp!, {d7}
 801f2c0:	e7cb      	b.n	801f25a <__kernel_rem_pio2+0x72>
 801f2c2:	9b00      	ldr	r3, [sp, #0]
 801f2c4:	aa0c      	add	r2, sp, #48	; 0x30
 801f2c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f2ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801f2ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801f2d2:	9c00      	ldr	r4, [sp, #0]
 801f2d4:	930a      	str	r3, [sp, #40]	; 0x28
 801f2d6:	00e3      	lsls	r3, r4, #3
 801f2d8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801f2dc:	46a1      	mov	r9, r4
 801f2de:	9308      	str	r3, [sp, #32]
 801f2e0:	ab98      	add	r3, sp, #608	; 0x260
 801f2e2:	46c3      	mov	fp, r8
 801f2e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f2e8:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801f2ec:	ab70      	add	r3, sp, #448	; 0x1c0
 801f2ee:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801f2f2:	f1b9 0f00 	cmp.w	r9, #0
 801f2f6:	f1a5 0508 	sub.w	r5, r5, #8
 801f2fa:	dc77      	bgt.n	801f3ec <__kernel_rem_pio2+0x204>
 801f2fc:	4650      	mov	r0, sl
 801f2fe:	ec47 6b10 	vmov	d0, r6, r7
 801f302:	f7ff febd 	bl	801f080 <scalbn>
 801f306:	2200      	movs	r2, #0
 801f308:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801f30c:	ee10 0a10 	vmov	r0, s0
 801f310:	ec57 6b10 	vmov	r6, r7, d0
 801f314:	4639      	mov	r1, r7
 801f316:	f7e1 f961 	bl	80005dc <__aeabi_dmul>
 801f31a:	ec41 0b10 	vmov	d0, r0, r1
 801f31e:	f000 fe7f 	bl	8020020 <floor>
 801f322:	2200      	movs	r2, #0
 801f324:	4b7d      	ldr	r3, [pc, #500]	; (801f51c <__kernel_rem_pio2+0x334>)
 801f326:	ec51 0b10 	vmov	r0, r1, d0
 801f32a:	f7e1 f957 	bl	80005dc <__aeabi_dmul>
 801f32e:	4602      	mov	r2, r0
 801f330:	460b      	mov	r3, r1
 801f332:	4630      	mov	r0, r6
 801f334:	4639      	mov	r1, r7
 801f336:	f7e0 ff99 	bl	800026c <__aeabi_dsub>
 801f33a:	460f      	mov	r7, r1
 801f33c:	4606      	mov	r6, r0
 801f33e:	f7e1 fbfd 	bl	8000b3c <__aeabi_d2iz>
 801f342:	9002      	str	r0, [sp, #8]
 801f344:	f7e1 f8e0 	bl	8000508 <__aeabi_i2d>
 801f348:	4602      	mov	r2, r0
 801f34a:	460b      	mov	r3, r1
 801f34c:	4630      	mov	r0, r6
 801f34e:	4639      	mov	r1, r7
 801f350:	f7e0 ff8c 	bl	800026c <__aeabi_dsub>
 801f354:	f1ba 0f00 	cmp.w	sl, #0
 801f358:	4606      	mov	r6, r0
 801f35a:	460f      	mov	r7, r1
 801f35c:	dd6d      	ble.n	801f43a <__kernel_rem_pio2+0x252>
 801f35e:	1e61      	subs	r1, r4, #1
 801f360:	ab0c      	add	r3, sp, #48	; 0x30
 801f362:	f1ca 0018 	rsb	r0, sl, #24
 801f366:	9d02      	ldr	r5, [sp, #8]
 801f368:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f36c:	fa43 f200 	asr.w	r2, r3, r0
 801f370:	4415      	add	r5, r2
 801f372:	4082      	lsls	r2, r0
 801f374:	1a9b      	subs	r3, r3, r2
 801f376:	aa0c      	add	r2, sp, #48	; 0x30
 801f378:	9502      	str	r5, [sp, #8]
 801f37a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f37e:	f1ca 0217 	rsb	r2, sl, #23
 801f382:	fa43 fb02 	asr.w	fp, r3, r2
 801f386:	f1bb 0f00 	cmp.w	fp, #0
 801f38a:	dd65      	ble.n	801f458 <__kernel_rem_pio2+0x270>
 801f38c:	9b02      	ldr	r3, [sp, #8]
 801f38e:	2200      	movs	r2, #0
 801f390:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801f394:	3301      	adds	r3, #1
 801f396:	4615      	mov	r5, r2
 801f398:	9302      	str	r3, [sp, #8]
 801f39a:	4294      	cmp	r4, r2
 801f39c:	f300 809f 	bgt.w	801f4de <__kernel_rem_pio2+0x2f6>
 801f3a0:	f1ba 0f00 	cmp.w	sl, #0
 801f3a4:	dd07      	ble.n	801f3b6 <__kernel_rem_pio2+0x1ce>
 801f3a6:	f1ba 0f01 	cmp.w	sl, #1
 801f3aa:	f000 80c3 	beq.w	801f534 <__kernel_rem_pio2+0x34c>
 801f3ae:	f1ba 0f02 	cmp.w	sl, #2
 801f3b2:	f000 80c9 	beq.w	801f548 <__kernel_rem_pio2+0x360>
 801f3b6:	f1bb 0f02 	cmp.w	fp, #2
 801f3ba:	d14d      	bne.n	801f458 <__kernel_rem_pio2+0x270>
 801f3bc:	4632      	mov	r2, r6
 801f3be:	463b      	mov	r3, r7
 801f3c0:	2000      	movs	r0, #0
 801f3c2:	4957      	ldr	r1, [pc, #348]	; (801f520 <__kernel_rem_pio2+0x338>)
 801f3c4:	f7e0 ff52 	bl	800026c <__aeabi_dsub>
 801f3c8:	4606      	mov	r6, r0
 801f3ca:	460f      	mov	r7, r1
 801f3cc:	2d00      	cmp	r5, #0
 801f3ce:	d043      	beq.n	801f458 <__kernel_rem_pio2+0x270>
 801f3d0:	4650      	mov	r0, sl
 801f3d2:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 801f510 <__kernel_rem_pio2+0x328>
 801f3d6:	f7ff fe53 	bl	801f080 <scalbn>
 801f3da:	4630      	mov	r0, r6
 801f3dc:	4639      	mov	r1, r7
 801f3de:	ec53 2b10 	vmov	r2, r3, d0
 801f3e2:	f7e0 ff43 	bl	800026c <__aeabi_dsub>
 801f3e6:	4606      	mov	r6, r0
 801f3e8:	460f      	mov	r7, r1
 801f3ea:	e035      	b.n	801f458 <__kernel_rem_pio2+0x270>
 801f3ec:	2200      	movs	r2, #0
 801f3ee:	4b4d      	ldr	r3, [pc, #308]	; (801f524 <__kernel_rem_pio2+0x33c>)
 801f3f0:	4630      	mov	r0, r6
 801f3f2:	4639      	mov	r1, r7
 801f3f4:	f7e1 f8f2 	bl	80005dc <__aeabi_dmul>
 801f3f8:	f109 39ff 	add.w	r9, r9, #4294967295
 801f3fc:	f7e1 fb9e 	bl	8000b3c <__aeabi_d2iz>
 801f400:	f7e1 f882 	bl	8000508 <__aeabi_i2d>
 801f404:	4602      	mov	r2, r0
 801f406:	460b      	mov	r3, r1
 801f408:	ec43 2b18 	vmov	d8, r2, r3
 801f40c:	2200      	movs	r2, #0
 801f40e:	4b46      	ldr	r3, [pc, #280]	; (801f528 <__kernel_rem_pio2+0x340>)
 801f410:	f7e1 f8e4 	bl	80005dc <__aeabi_dmul>
 801f414:	4602      	mov	r2, r0
 801f416:	460b      	mov	r3, r1
 801f418:	4630      	mov	r0, r6
 801f41a:	4639      	mov	r1, r7
 801f41c:	f7e0 ff26 	bl	800026c <__aeabi_dsub>
 801f420:	f7e1 fb8c 	bl	8000b3c <__aeabi_d2iz>
 801f424:	f84b 0b04 	str.w	r0, [fp], #4
 801f428:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f42c:	ec51 0b18 	vmov	r0, r1, d8
 801f430:	f7e0 ff1e 	bl	8000270 <__adddf3>
 801f434:	4606      	mov	r6, r0
 801f436:	460f      	mov	r7, r1
 801f438:	e75b      	b.n	801f2f2 <__kernel_rem_pio2+0x10a>
 801f43a:	d106      	bne.n	801f44a <__kernel_rem_pio2+0x262>
 801f43c:	1e63      	subs	r3, r4, #1
 801f43e:	aa0c      	add	r2, sp, #48	; 0x30
 801f440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f444:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801f448:	e79d      	b.n	801f386 <__kernel_rem_pio2+0x19e>
 801f44a:	2200      	movs	r2, #0
 801f44c:	4b37      	ldr	r3, [pc, #220]	; (801f52c <__kernel_rem_pio2+0x344>)
 801f44e:	f7e1 fb4b 	bl	8000ae8 <__aeabi_dcmpge>
 801f452:	2800      	cmp	r0, #0
 801f454:	d140      	bne.n	801f4d8 <__kernel_rem_pio2+0x2f0>
 801f456:	4683      	mov	fp, r0
 801f458:	2200      	movs	r2, #0
 801f45a:	2300      	movs	r3, #0
 801f45c:	4630      	mov	r0, r6
 801f45e:	4639      	mov	r1, r7
 801f460:	f7e1 fb24 	bl	8000aac <__aeabi_dcmpeq>
 801f464:	2800      	cmp	r0, #0
 801f466:	f000 80c3 	beq.w	801f5f0 <__kernel_rem_pio2+0x408>
 801f46a:	1e65      	subs	r5, r4, #1
 801f46c:	2200      	movs	r2, #0
 801f46e:	462b      	mov	r3, r5
 801f470:	9900      	ldr	r1, [sp, #0]
 801f472:	428b      	cmp	r3, r1
 801f474:	da6f      	bge.n	801f556 <__kernel_rem_pio2+0x36e>
 801f476:	2a00      	cmp	r2, #0
 801f478:	f000 808c 	beq.w	801f594 <__kernel_rem_pio2+0x3ac>
 801f47c:	ab0c      	add	r3, sp, #48	; 0x30
 801f47e:	f1aa 0a18 	sub.w	sl, sl, #24
 801f482:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801f486:	2b00      	cmp	r3, #0
 801f488:	f000 80b0 	beq.w	801f5ec <__kernel_rem_pio2+0x404>
 801f48c:	4650      	mov	r0, sl
 801f48e:	462c      	mov	r4, r5
 801f490:	f04f 0800 	mov.w	r8, #0
 801f494:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801f524 <__kernel_rem_pio2+0x33c>
 801f498:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 801f510 <__kernel_rem_pio2+0x328>
 801f49c:	f7ff fdf0 	bl	801f080 <scalbn>
 801f4a0:	1c6b      	adds	r3, r5, #1
 801f4a2:	00da      	lsls	r2, r3, #3
 801f4a4:	9205      	str	r2, [sp, #20]
 801f4a6:	aa70      	add	r2, sp, #448	; 0x1c0
 801f4a8:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801f4ac:	ec57 6b10 	vmov	r6, r7, d0
 801f4b0:	2c00      	cmp	r4, #0
 801f4b2:	f280 80d6 	bge.w	801f662 <__kernel_rem_pio2+0x47a>
 801f4b6:	462c      	mov	r4, r5
 801f4b8:	2c00      	cmp	r4, #0
 801f4ba:	f2c0 8104 	blt.w	801f6c6 <__kernel_rem_pio2+0x4de>
 801f4be:	4b1c      	ldr	r3, [pc, #112]	; (801f530 <__kernel_rem_pio2+0x348>)
 801f4c0:	f04f 0900 	mov.w	r9, #0
 801f4c4:	f04f 0a00 	mov.w	sl, #0
 801f4c8:	2700      	movs	r7, #0
 801f4ca:	461e      	mov	r6, r3
 801f4cc:	ab70      	add	r3, sp, #448	; 0x1c0
 801f4ce:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801f4d2:	1b2b      	subs	r3, r5, r4
 801f4d4:	9306      	str	r3, [sp, #24]
 801f4d6:	e0e8      	b.n	801f6aa <__kernel_rem_pio2+0x4c2>
 801f4d8:	f04f 0b02 	mov.w	fp, #2
 801f4dc:	e756      	b.n	801f38c <__kernel_rem_pio2+0x1a4>
 801f4de:	f8d8 3000 	ldr.w	r3, [r8]
 801f4e2:	b955      	cbnz	r5, 801f4fa <__kernel_rem_pio2+0x312>
 801f4e4:	b123      	cbz	r3, 801f4f0 <__kernel_rem_pio2+0x308>
 801f4e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801f4ea:	f8c8 3000 	str.w	r3, [r8]
 801f4ee:	2301      	movs	r3, #1
 801f4f0:	3201      	adds	r2, #1
 801f4f2:	f108 0804 	add.w	r8, r8, #4
 801f4f6:	461d      	mov	r5, r3
 801f4f8:	e74f      	b.n	801f39a <__kernel_rem_pio2+0x1b2>
 801f4fa:	1acb      	subs	r3, r1, r3
 801f4fc:	f8c8 3000 	str.w	r3, [r8]
 801f500:	462b      	mov	r3, r5
 801f502:	e7f5      	b.n	801f4f0 <__kernel_rem_pio2+0x308>
 801f504:	f3af 8000 	nop.w
	...
 801f514:	3ff00000 	.word	0x3ff00000
 801f518:	08022460 	.word	0x08022460
 801f51c:	40200000 	.word	0x40200000
 801f520:	3ff00000 	.word	0x3ff00000
 801f524:	3e700000 	.word	0x3e700000
 801f528:	41700000 	.word	0x41700000
 801f52c:	3fe00000 	.word	0x3fe00000
 801f530:	08022420 	.word	0x08022420
 801f534:	1e62      	subs	r2, r4, #1
 801f536:	ab0c      	add	r3, sp, #48	; 0x30
 801f538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f53c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f540:	a90c      	add	r1, sp, #48	; 0x30
 801f542:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f546:	e736      	b.n	801f3b6 <__kernel_rem_pio2+0x1ce>
 801f548:	1e62      	subs	r2, r4, #1
 801f54a:	ab0c      	add	r3, sp, #48	; 0x30
 801f54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f550:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f554:	e7f4      	b.n	801f540 <__kernel_rem_pio2+0x358>
 801f556:	a90c      	add	r1, sp, #48	; 0x30
 801f558:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f55c:	3b01      	subs	r3, #1
 801f55e:	430a      	orrs	r2, r1
 801f560:	e786      	b.n	801f470 <__kernel_rem_pio2+0x288>
 801f562:	3301      	adds	r3, #1
 801f564:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801f568:	2900      	cmp	r1, #0
 801f56a:	d0fa      	beq.n	801f562 <__kernel_rem_pio2+0x37a>
 801f56c:	9a08      	ldr	r2, [sp, #32]
 801f56e:	a920      	add	r1, sp, #128	; 0x80
 801f570:	18e3      	adds	r3, r4, r3
 801f572:	f104 0801 	add.w	r8, r4, #1
 801f576:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801f57a:	9302      	str	r3, [sp, #8]
 801f57c:	446a      	add	r2, sp
 801f57e:	3a98      	subs	r2, #152	; 0x98
 801f580:	9208      	str	r2, [sp, #32]
 801f582:	9a06      	ldr	r2, [sp, #24]
 801f584:	18a2      	adds	r2, r4, r2
 801f586:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801f58a:	9b02      	ldr	r3, [sp, #8]
 801f58c:	4543      	cmp	r3, r8
 801f58e:	da04      	bge.n	801f59a <__kernel_rem_pio2+0x3b2>
 801f590:	461c      	mov	r4, r3
 801f592:	e6a0      	b.n	801f2d6 <__kernel_rem_pio2+0xee>
 801f594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f596:	2301      	movs	r3, #1
 801f598:	e7e4      	b.n	801f564 <__kernel_rem_pio2+0x37c>
 801f59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f59c:	f04f 0900 	mov.w	r9, #0
 801f5a0:	2600      	movs	r6, #0
 801f5a2:	2700      	movs	r7, #0
 801f5a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801f5a8:	f7e0 ffae 	bl	8000508 <__aeabi_i2d>
 801f5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5ae:	e8e5 0102 	strd	r0, r1, [r5], #8
 801f5b2:	461c      	mov	r4, r3
 801f5b4:	46ab      	mov	fp, r5
 801f5b6:	9b05      	ldr	r3, [sp, #20]
 801f5b8:	4599      	cmp	r9, r3
 801f5ba:	dd06      	ble.n	801f5ca <__kernel_rem_pio2+0x3e2>
 801f5bc:	9b08      	ldr	r3, [sp, #32]
 801f5be:	f108 0801 	add.w	r8, r8, #1
 801f5c2:	e8e3 6702 	strd	r6, r7, [r3], #8
 801f5c6:	9308      	str	r3, [sp, #32]
 801f5c8:	e7df      	b.n	801f58a <__kernel_rem_pio2+0x3a2>
 801f5ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801f5ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801f5d2:	f7e1 f803 	bl	80005dc <__aeabi_dmul>
 801f5d6:	4602      	mov	r2, r0
 801f5d8:	460b      	mov	r3, r1
 801f5da:	4630      	mov	r0, r6
 801f5dc:	4639      	mov	r1, r7
 801f5de:	f109 0901 	add.w	r9, r9, #1
 801f5e2:	f7e0 fe45 	bl	8000270 <__adddf3>
 801f5e6:	4606      	mov	r6, r0
 801f5e8:	460f      	mov	r7, r1
 801f5ea:	e7e4      	b.n	801f5b6 <__kernel_rem_pio2+0x3ce>
 801f5ec:	3d01      	subs	r5, #1
 801f5ee:	e745      	b.n	801f47c <__kernel_rem_pio2+0x294>
 801f5f0:	f1ca 0000 	rsb	r0, sl, #0
 801f5f4:	ec47 6b10 	vmov	d0, r6, r7
 801f5f8:	f7ff fd42 	bl	801f080 <scalbn>
 801f5fc:	2200      	movs	r2, #0
 801f5fe:	4ba1      	ldr	r3, [pc, #644]	; (801f884 <__kernel_rem_pio2+0x69c>)
 801f600:	ee10 0a10 	vmov	r0, s0
 801f604:	ec57 6b10 	vmov	r6, r7, d0
 801f608:	4639      	mov	r1, r7
 801f60a:	f7e1 fa6d 	bl	8000ae8 <__aeabi_dcmpge>
 801f60e:	b1f8      	cbz	r0, 801f650 <__kernel_rem_pio2+0x468>
 801f610:	2200      	movs	r2, #0
 801f612:	4b9d      	ldr	r3, [pc, #628]	; (801f888 <__kernel_rem_pio2+0x6a0>)
 801f614:	4630      	mov	r0, r6
 801f616:	4639      	mov	r1, r7
 801f618:	f7e0 ffe0 	bl	80005dc <__aeabi_dmul>
 801f61c:	1c65      	adds	r5, r4, #1
 801f61e:	f7e1 fa8d 	bl	8000b3c <__aeabi_d2iz>
 801f622:	4680      	mov	r8, r0
 801f624:	f7e0 ff70 	bl	8000508 <__aeabi_i2d>
 801f628:	2200      	movs	r2, #0
 801f62a:	4b96      	ldr	r3, [pc, #600]	; (801f884 <__kernel_rem_pio2+0x69c>)
 801f62c:	f10a 0a18 	add.w	sl, sl, #24
 801f630:	f7e0 ffd4 	bl	80005dc <__aeabi_dmul>
 801f634:	460b      	mov	r3, r1
 801f636:	4602      	mov	r2, r0
 801f638:	4639      	mov	r1, r7
 801f63a:	4630      	mov	r0, r6
 801f63c:	f7e0 fe16 	bl	800026c <__aeabi_dsub>
 801f640:	f7e1 fa7c 	bl	8000b3c <__aeabi_d2iz>
 801f644:	ab0c      	add	r3, sp, #48	; 0x30
 801f646:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f64a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801f64e:	e71d      	b.n	801f48c <__kernel_rem_pio2+0x2a4>
 801f650:	4630      	mov	r0, r6
 801f652:	4639      	mov	r1, r7
 801f654:	f7e1 fa72 	bl	8000b3c <__aeabi_d2iz>
 801f658:	ab0c      	add	r3, sp, #48	; 0x30
 801f65a:	4625      	mov	r5, r4
 801f65c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f660:	e714      	b.n	801f48c <__kernel_rem_pio2+0x2a4>
 801f662:	ab0c      	add	r3, sp, #48	; 0x30
 801f664:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f668:	3c01      	subs	r4, #1
 801f66a:	f7e0 ff4d 	bl	8000508 <__aeabi_i2d>
 801f66e:	4632      	mov	r2, r6
 801f670:	463b      	mov	r3, r7
 801f672:	f7e0 ffb3 	bl	80005dc <__aeabi_dmul>
 801f676:	4642      	mov	r2, r8
 801f678:	464b      	mov	r3, r9
 801f67a:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801f67e:	4630      	mov	r0, r6
 801f680:	4639      	mov	r1, r7
 801f682:	f7e0 ffab 	bl	80005dc <__aeabi_dmul>
 801f686:	4606      	mov	r6, r0
 801f688:	460f      	mov	r7, r1
 801f68a:	e711      	b.n	801f4b0 <__kernel_rem_pio2+0x2c8>
 801f68c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801f690:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801f694:	f7e0 ffa2 	bl	80005dc <__aeabi_dmul>
 801f698:	4602      	mov	r2, r0
 801f69a:	460b      	mov	r3, r1
 801f69c:	4648      	mov	r0, r9
 801f69e:	4651      	mov	r1, sl
 801f6a0:	3701      	adds	r7, #1
 801f6a2:	f7e0 fde5 	bl	8000270 <__adddf3>
 801f6a6:	4681      	mov	r9, r0
 801f6a8:	468a      	mov	sl, r1
 801f6aa:	9b00      	ldr	r3, [sp, #0]
 801f6ac:	429f      	cmp	r7, r3
 801f6ae:	dc02      	bgt.n	801f6b6 <__kernel_rem_pio2+0x4ce>
 801f6b0:	9b06      	ldr	r3, [sp, #24]
 801f6b2:	429f      	cmp	r7, r3
 801f6b4:	ddea      	ble.n	801f68c <__kernel_rem_pio2+0x4a4>
 801f6b6:	ab48      	add	r3, sp, #288	; 0x120
 801f6b8:	9a06      	ldr	r2, [sp, #24]
 801f6ba:	3c01      	subs	r4, #1
 801f6bc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801f6c0:	e9c6 9a00 	strd	r9, sl, [r6]
 801f6c4:	e6f8      	b.n	801f4b8 <__kernel_rem_pio2+0x2d0>
 801f6c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801f6c8:	2b02      	cmp	r3, #2
 801f6ca:	dc0b      	bgt.n	801f6e4 <__kernel_rem_pio2+0x4fc>
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	dc39      	bgt.n	801f744 <__kernel_rem_pio2+0x55c>
 801f6d0:	d05d      	beq.n	801f78e <__kernel_rem_pio2+0x5a6>
 801f6d2:	9b02      	ldr	r3, [sp, #8]
 801f6d4:	f003 0007 	and.w	r0, r3, #7
 801f6d8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801f6dc:	ecbd 8b02 	vpop	{d8}
 801f6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6e4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801f6e6:	2b03      	cmp	r3, #3
 801f6e8:	d1f3      	bne.n	801f6d2 <__kernel_rem_pio2+0x4ea>
 801f6ea:	9b05      	ldr	r3, [sp, #20]
 801f6ec:	9500      	str	r5, [sp, #0]
 801f6ee:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801f6f2:	eb0d 0403 	add.w	r4, sp, r3
 801f6f6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801f6fa:	46a2      	mov	sl, r4
 801f6fc:	9b00      	ldr	r3, [sp, #0]
 801f6fe:	f1aa 0a08 	sub.w	sl, sl, #8
 801f702:	2b00      	cmp	r3, #0
 801f704:	dc69      	bgt.n	801f7da <__kernel_rem_pio2+0x5f2>
 801f706:	46aa      	mov	sl, r5
 801f708:	f1ba 0f01 	cmp.w	sl, #1
 801f70c:	f1a4 0408 	sub.w	r4, r4, #8
 801f710:	f300 8083 	bgt.w	801f81a <__kernel_rem_pio2+0x632>
 801f714:	9c05      	ldr	r4, [sp, #20]
 801f716:	ab48      	add	r3, sp, #288	; 0x120
 801f718:	2000      	movs	r0, #0
 801f71a:	2100      	movs	r1, #0
 801f71c:	441c      	add	r4, r3
 801f71e:	2d01      	cmp	r5, #1
 801f720:	f300 809a 	bgt.w	801f858 <__kernel_rem_pio2+0x670>
 801f724:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801f728:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801f72c:	f1bb 0f00 	cmp.w	fp, #0
 801f730:	f040 8098 	bne.w	801f864 <__kernel_rem_pio2+0x67c>
 801f734:	9b04      	ldr	r3, [sp, #16]
 801f736:	e9c3 7800 	strd	r7, r8, [r3]
 801f73a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f73e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f742:	e7c6      	b.n	801f6d2 <__kernel_rem_pio2+0x4ea>
 801f744:	9e05      	ldr	r6, [sp, #20]
 801f746:	ab48      	add	r3, sp, #288	; 0x120
 801f748:	462c      	mov	r4, r5
 801f74a:	2000      	movs	r0, #0
 801f74c:	441e      	add	r6, r3
 801f74e:	2100      	movs	r1, #0
 801f750:	2c00      	cmp	r4, #0
 801f752:	da33      	bge.n	801f7bc <__kernel_rem_pio2+0x5d4>
 801f754:	f1bb 0f00 	cmp.w	fp, #0
 801f758:	d036      	beq.n	801f7c8 <__kernel_rem_pio2+0x5e0>
 801f75a:	4602      	mov	r2, r0
 801f75c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f760:	9c04      	ldr	r4, [sp, #16]
 801f762:	ae4a      	add	r6, sp, #296	; 0x128
 801f764:	e9c4 2300 	strd	r2, r3, [r4]
 801f768:	2401      	movs	r4, #1
 801f76a:	4602      	mov	r2, r0
 801f76c:	460b      	mov	r3, r1
 801f76e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801f772:	f7e0 fd7b 	bl	800026c <__aeabi_dsub>
 801f776:	42a5      	cmp	r5, r4
 801f778:	da29      	bge.n	801f7ce <__kernel_rem_pio2+0x5e6>
 801f77a:	f1bb 0f00 	cmp.w	fp, #0
 801f77e:	d002      	beq.n	801f786 <__kernel_rem_pio2+0x59e>
 801f780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f784:	4619      	mov	r1, r3
 801f786:	9b04      	ldr	r3, [sp, #16]
 801f788:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f78c:	e7a1      	b.n	801f6d2 <__kernel_rem_pio2+0x4ea>
 801f78e:	9c05      	ldr	r4, [sp, #20]
 801f790:	ab48      	add	r3, sp, #288	; 0x120
 801f792:	2000      	movs	r0, #0
 801f794:	2100      	movs	r1, #0
 801f796:	441c      	add	r4, r3
 801f798:	2d00      	cmp	r5, #0
 801f79a:	da09      	bge.n	801f7b0 <__kernel_rem_pio2+0x5c8>
 801f79c:	f1bb 0f00 	cmp.w	fp, #0
 801f7a0:	d002      	beq.n	801f7a8 <__kernel_rem_pio2+0x5c0>
 801f7a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f7a6:	4619      	mov	r1, r3
 801f7a8:	9b04      	ldr	r3, [sp, #16]
 801f7aa:	e9c3 0100 	strd	r0, r1, [r3]
 801f7ae:	e790      	b.n	801f6d2 <__kernel_rem_pio2+0x4ea>
 801f7b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f7b4:	3d01      	subs	r5, #1
 801f7b6:	f7e0 fd5b 	bl	8000270 <__adddf3>
 801f7ba:	e7ed      	b.n	801f798 <__kernel_rem_pio2+0x5b0>
 801f7bc:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801f7c0:	3c01      	subs	r4, #1
 801f7c2:	f7e0 fd55 	bl	8000270 <__adddf3>
 801f7c6:	e7c3      	b.n	801f750 <__kernel_rem_pio2+0x568>
 801f7c8:	4602      	mov	r2, r0
 801f7ca:	460b      	mov	r3, r1
 801f7cc:	e7c8      	b.n	801f760 <__kernel_rem_pio2+0x578>
 801f7ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801f7d2:	3401      	adds	r4, #1
 801f7d4:	f7e0 fd4c 	bl	8000270 <__adddf3>
 801f7d8:	e7cd      	b.n	801f776 <__kernel_rem_pio2+0x58e>
 801f7da:	9b00      	ldr	r3, [sp, #0]
 801f7dc:	e9da 8900 	ldrd	r8, r9, [sl]
 801f7e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801f7e4:	3b01      	subs	r3, #1
 801f7e6:	4640      	mov	r0, r8
 801f7e8:	4632      	mov	r2, r6
 801f7ea:	4649      	mov	r1, r9
 801f7ec:	9300      	str	r3, [sp, #0]
 801f7ee:	463b      	mov	r3, r7
 801f7f0:	f7e0 fd3e 	bl	8000270 <__adddf3>
 801f7f4:	4602      	mov	r2, r0
 801f7f6:	460b      	mov	r3, r1
 801f7f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f7fc:	4640      	mov	r0, r8
 801f7fe:	4649      	mov	r1, r9
 801f800:	f7e0 fd34 	bl	800026c <__aeabi_dsub>
 801f804:	4632      	mov	r2, r6
 801f806:	463b      	mov	r3, r7
 801f808:	f7e0 fd32 	bl	8000270 <__adddf3>
 801f80c:	ed9d 7b06 	vldr	d7, [sp, #24]
 801f810:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801f814:	ed8a 7b00 	vstr	d7, [sl]
 801f818:	e770      	b.n	801f6fc <__kernel_rem_pio2+0x514>
 801f81a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801f81e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801f822:	4640      	mov	r0, r8
 801f824:	4649      	mov	r1, r9
 801f826:	4632      	mov	r2, r6
 801f828:	463b      	mov	r3, r7
 801f82a:	f7e0 fd21 	bl	8000270 <__adddf3>
 801f82e:	4602      	mov	r2, r0
 801f830:	460b      	mov	r3, r1
 801f832:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f836:	e9cd 0100 	strd	r0, r1, [sp]
 801f83a:	4640      	mov	r0, r8
 801f83c:	4649      	mov	r1, r9
 801f83e:	f7e0 fd15 	bl	800026c <__aeabi_dsub>
 801f842:	4632      	mov	r2, r6
 801f844:	463b      	mov	r3, r7
 801f846:	f7e0 fd13 	bl	8000270 <__adddf3>
 801f84a:	ed9d 7b00 	vldr	d7, [sp]
 801f84e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f852:	ed84 7b00 	vstr	d7, [r4]
 801f856:	e757      	b.n	801f708 <__kernel_rem_pio2+0x520>
 801f858:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f85c:	3d01      	subs	r5, #1
 801f85e:	f7e0 fd07 	bl	8000270 <__adddf3>
 801f862:	e75c      	b.n	801f71e <__kernel_rem_pio2+0x536>
 801f864:	9b04      	ldr	r3, [sp, #16]
 801f866:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801f86a:	9a04      	ldr	r2, [sp, #16]
 801f86c:	601f      	str	r7, [r3, #0]
 801f86e:	605c      	str	r4, [r3, #4]
 801f870:	609d      	str	r5, [r3, #8]
 801f872:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801f876:	6110      	str	r0, [r2, #16]
 801f878:	60d3      	str	r3, [r2, #12]
 801f87a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f87e:	6153      	str	r3, [r2, #20]
 801f880:	e727      	b.n	801f6d2 <__kernel_rem_pio2+0x4ea>
 801f882:	bf00      	nop
 801f884:	41700000 	.word	0x41700000
 801f888:	3e700000 	.word	0x3e700000

0801f88c <__kernel_rem_pio2f>:
 801f88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f890:	ed2d 8b04 	vpush	{d8-d9}
 801f894:	b0d9      	sub	sp, #356	; 0x164
 801f896:	4688      	mov	r8, r1
 801f898:	49b9      	ldr	r1, [pc, #740]	; (801fb80 <__kernel_rem_pio2f+0x2f4>)
 801f89a:	9002      	str	r0, [sp, #8]
 801f89c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801f89e:	9301      	str	r3, [sp, #4]
 801f8a0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801f8a4:	9901      	ldr	r1, [sp, #4]
 801f8a6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801f8a8:	f101 3bff 	add.w	fp, r1, #4294967295
 801f8ac:	1d11      	adds	r1, r2, #4
 801f8ae:	db25      	blt.n	801f8fc <__kernel_rem_pio2f+0x70>
 801f8b0:	1ed0      	subs	r0, r2, #3
 801f8b2:	bf48      	it	mi
 801f8b4:	1d10      	addmi	r0, r2, #4
 801f8b6:	10c0      	asrs	r0, r0, #3
 801f8b8:	1c45      	adds	r5, r0, #1
 801f8ba:	eba0 070b 	sub.w	r7, r0, fp
 801f8be:	eb0a 0c0b 	add.w	ip, sl, fp
 801f8c2:	ae1c      	add	r6, sp, #112	; 0x70
 801f8c4:	00e9      	lsls	r1, r5, #3
 801f8c6:	2400      	movs	r4, #0
 801f8c8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801f8cc:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 801fb90 <__kernel_rem_pio2f+0x304>
 801f8d0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801f8d4:	9103      	str	r1, [sp, #12]
 801f8d6:	4564      	cmp	r4, ip
 801f8d8:	dd12      	ble.n	801f900 <__kernel_rem_pio2f+0x74>
 801f8da:	ac1c      	add	r4, sp, #112	; 0x70
 801f8dc:	9901      	ldr	r1, [sp, #4]
 801f8de:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801f8e2:	f04f 0c00 	mov.w	ip, #0
 801f8e6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f8ea:	45d4      	cmp	ip, sl
 801f8ec:	dc29      	bgt.n	801f942 <__kernel_rem_pio2f+0xb6>
 801f8ee:	f8dd e008 	ldr.w	lr, [sp, #8]
 801f8f2:	4627      	mov	r7, r4
 801f8f4:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801fb90 <__kernel_rem_pio2f+0x304>
 801f8f8:	2600      	movs	r6, #0
 801f8fa:	e018      	b.n	801f92e <__kernel_rem_pio2f+0xa2>
 801f8fc:	2000      	movs	r0, #0
 801f8fe:	e7db      	b.n	801f8b8 <__kernel_rem_pio2f+0x2c>
 801f900:	42e7      	cmn	r7, r4
 801f902:	bf54      	ite	pl
 801f904:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801f908:	eef0 7a47 	vmovmi.f32	s15, s14
 801f90c:	f104 0401 	add.w	r4, r4, #1
 801f910:	bf5c      	itt	pl
 801f912:	ee07 1a90 	vmovpl	s15, r1
 801f916:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f91a:	ece6 7a01 	vstmia	r6!, {s15}
 801f91e:	e7da      	b.n	801f8d6 <__kernel_rem_pio2f+0x4a>
 801f920:	ecfe 6a01 	vldmia	lr!, {s13}
 801f924:	3601      	adds	r6, #1
 801f926:	ed97 7a00 	vldr	s14, [r7]
 801f92a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f92e:	455e      	cmp	r6, fp
 801f930:	f1a7 0704 	sub.w	r7, r7, #4
 801f934:	ddf4      	ble.n	801f920 <__kernel_rem_pio2f+0x94>
 801f936:	f10c 0c01 	add.w	ip, ip, #1
 801f93a:	3404      	adds	r4, #4
 801f93c:	ece9 7a01 	vstmia	r9!, {s15}
 801f940:	e7d3      	b.n	801f8ea <__kernel_rem_pio2f+0x5e>
 801f942:	a908      	add	r1, sp, #32
 801f944:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801f948:	4656      	mov	r6, sl
 801f94a:	eddf 8a90 	vldr	s17, [pc, #576]	; 801fb8c <__kernel_rem_pio2f+0x300>
 801f94e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f952:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801fb88 <__kernel_rem_pio2f+0x2fc>
 801f956:	9304      	str	r3, [sp, #16]
 801f958:	9105      	str	r1, [sp, #20]
 801f95a:	00b3      	lsls	r3, r6, #2
 801f95c:	ac08      	add	r4, sp, #32
 801f95e:	4637      	mov	r7, r6
 801f960:	9306      	str	r3, [sp, #24]
 801f962:	ab58      	add	r3, sp, #352	; 0x160
 801f964:	46a4      	mov	ip, r4
 801f966:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801f96a:	ab44      	add	r3, sp, #272	; 0x110
 801f96c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801f970:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801f974:	2f00      	cmp	r7, #0
 801f976:	f1a0 0004 	sub.w	r0, r0, #4
 801f97a:	dc4a      	bgt.n	801fa12 <__kernel_rem_pio2f+0x186>
 801f97c:	4628      	mov	r0, r5
 801f97e:	9207      	str	r2, [sp, #28]
 801f980:	f000 fae8 	bl	801ff54 <scalbnf>
 801f984:	eeb0 8a40 	vmov.f32	s16, s0
 801f988:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801f98c:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f990:	f000 fbc6 	bl	8020120 <floorf>
 801f994:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801f998:	2d00      	cmp	r5, #0
 801f99a:	9a07      	ldr	r2, [sp, #28]
 801f99c:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f9a0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f9a4:	ee17 9a90 	vmov	r9, s15
 801f9a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f9ac:	ee38 8a67 	vsub.f32	s16, s16, s15
 801f9b0:	dd41      	ble.n	801fa36 <__kernel_rem_pio2f+0x1aa>
 801f9b2:	f106 3cff 	add.w	ip, r6, #4294967295
 801f9b6:	ab08      	add	r3, sp, #32
 801f9b8:	f1c5 0e08 	rsb	lr, r5, #8
 801f9bc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801f9c0:	fa47 f00e 	asr.w	r0, r7, lr
 801f9c4:	4481      	add	r9, r0
 801f9c6:	fa00 f00e 	lsl.w	r0, r0, lr
 801f9ca:	1a3f      	subs	r7, r7, r0
 801f9cc:	f1c5 0007 	rsb	r0, r5, #7
 801f9d0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801f9d4:	4107      	asrs	r7, r0
 801f9d6:	2f00      	cmp	r7, #0
 801f9d8:	dd3c      	ble.n	801fa54 <__kernel_rem_pio2f+0x1c8>
 801f9da:	f04f 0e00 	mov.w	lr, #0
 801f9de:	f109 0901 	add.w	r9, r9, #1
 801f9e2:	4671      	mov	r1, lr
 801f9e4:	4576      	cmp	r6, lr
 801f9e6:	dc67      	bgt.n	801fab8 <__kernel_rem_pio2f+0x22c>
 801f9e8:	2d00      	cmp	r5, #0
 801f9ea:	dd03      	ble.n	801f9f4 <__kernel_rem_pio2f+0x168>
 801f9ec:	2d01      	cmp	r5, #1
 801f9ee:	d074      	beq.n	801fada <__kernel_rem_pio2f+0x24e>
 801f9f0:	2d02      	cmp	r5, #2
 801f9f2:	d07b      	beq.n	801faec <__kernel_rem_pio2f+0x260>
 801f9f4:	2f02      	cmp	r7, #2
 801f9f6:	d12d      	bne.n	801fa54 <__kernel_rem_pio2f+0x1c8>
 801f9f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f9fc:	ee30 8a48 	vsub.f32	s16, s0, s16
 801fa00:	b341      	cbz	r1, 801fa54 <__kernel_rem_pio2f+0x1c8>
 801fa02:	4628      	mov	r0, r5
 801fa04:	9207      	str	r2, [sp, #28]
 801fa06:	f000 faa5 	bl	801ff54 <scalbnf>
 801fa0a:	9a07      	ldr	r2, [sp, #28]
 801fa0c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801fa10:	e020      	b.n	801fa54 <__kernel_rem_pio2f+0x1c8>
 801fa12:	ee60 7a28 	vmul.f32	s15, s0, s17
 801fa16:	3f01      	subs	r7, #1
 801fa18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fa1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fa20:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801fa24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fa28:	ecac 0a01 	vstmia	ip!, {s0}
 801fa2c:	ed90 0a00 	vldr	s0, [r0]
 801fa30:	ee37 0a80 	vadd.f32	s0, s15, s0
 801fa34:	e79e      	b.n	801f974 <__kernel_rem_pio2f+0xe8>
 801fa36:	d105      	bne.n	801fa44 <__kernel_rem_pio2f+0x1b8>
 801fa38:	1e70      	subs	r0, r6, #1
 801fa3a:	ab08      	add	r3, sp, #32
 801fa3c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801fa40:	11ff      	asrs	r7, r7, #7
 801fa42:	e7c8      	b.n	801f9d6 <__kernel_rem_pio2f+0x14a>
 801fa44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801fa48:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801fa4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa50:	da30      	bge.n	801fab4 <__kernel_rem_pio2f+0x228>
 801fa52:	2700      	movs	r7, #0
 801fa54:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801fa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa5c:	f040 809a 	bne.w	801fb94 <__kernel_rem_pio2f+0x308>
 801fa60:	1e74      	subs	r4, r6, #1
 801fa62:	2100      	movs	r1, #0
 801fa64:	46a4      	mov	ip, r4
 801fa66:	45d4      	cmp	ip, sl
 801fa68:	da47      	bge.n	801fafa <__kernel_rem_pio2f+0x26e>
 801fa6a:	2900      	cmp	r1, #0
 801fa6c:	d063      	beq.n	801fb36 <__kernel_rem_pio2f+0x2aa>
 801fa6e:	ab08      	add	r3, sp, #32
 801fa70:	3d08      	subs	r5, #8
 801fa72:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d07f      	beq.n	801fb7a <__kernel_rem_pio2f+0x2ee>
 801fa7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fa7e:	4628      	mov	r0, r5
 801fa80:	f000 fa68 	bl	801ff54 <scalbnf>
 801fa84:	1c63      	adds	r3, r4, #1
 801fa86:	aa44      	add	r2, sp, #272	; 0x110
 801fa88:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801fb8c <__kernel_rem_pio2f+0x300>
 801fa8c:	0099      	lsls	r1, r3, #2
 801fa8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801fa92:	4623      	mov	r3, r4
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	f280 80ad 	bge.w	801fbf4 <__kernel_rem_pio2f+0x368>
 801fa9a:	4623      	mov	r3, r4
 801fa9c:	2b00      	cmp	r3, #0
 801fa9e:	f2c0 80cb 	blt.w	801fc38 <__kernel_rem_pio2f+0x3ac>
 801faa2:	aa44      	add	r2, sp, #272	; 0x110
 801faa4:	4e37      	ldr	r6, [pc, #220]	; (801fb84 <__kernel_rem_pio2f+0x2f8>)
 801faa6:	eddf 7a3a 	vldr	s15, [pc, #232]	; 801fb90 <__kernel_rem_pio2f+0x304>
 801faaa:	2000      	movs	r0, #0
 801faac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801fab0:	1ae2      	subs	r2, r4, r3
 801fab2:	e0b6      	b.n	801fc22 <__kernel_rem_pio2f+0x396>
 801fab4:	2702      	movs	r7, #2
 801fab6:	e790      	b.n	801f9da <__kernel_rem_pio2f+0x14e>
 801fab8:	6820      	ldr	r0, [r4, #0]
 801faba:	b949      	cbnz	r1, 801fad0 <__kernel_rem_pio2f+0x244>
 801fabc:	b118      	cbz	r0, 801fac6 <__kernel_rem_pio2f+0x23a>
 801fabe:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801fac2:	6020      	str	r0, [r4, #0]
 801fac4:	2001      	movs	r0, #1
 801fac6:	f10e 0e01 	add.w	lr, lr, #1
 801faca:	3404      	adds	r4, #4
 801facc:	4601      	mov	r1, r0
 801face:	e789      	b.n	801f9e4 <__kernel_rem_pio2f+0x158>
 801fad0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801fad4:	6020      	str	r0, [r4, #0]
 801fad6:	4608      	mov	r0, r1
 801fad8:	e7f5      	b.n	801fac6 <__kernel_rem_pio2f+0x23a>
 801fada:	1e74      	subs	r4, r6, #1
 801fadc:	ab08      	add	r3, sp, #32
 801fade:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801fae2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801fae6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801faea:	e783      	b.n	801f9f4 <__kernel_rem_pio2f+0x168>
 801faec:	1e74      	subs	r4, r6, #1
 801faee:	ab08      	add	r3, sp, #32
 801faf0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801faf4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801faf8:	e7f5      	b.n	801fae6 <__kernel_rem_pio2f+0x25a>
 801fafa:	ab08      	add	r3, sp, #32
 801fafc:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801fb00:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fb04:	4301      	orrs	r1, r0
 801fb06:	e7ae      	b.n	801fa66 <__kernel_rem_pio2f+0x1da>
 801fb08:	3001      	adds	r0, #1
 801fb0a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801fb0e:	2f00      	cmp	r7, #0
 801fb10:	d0fa      	beq.n	801fb08 <__kernel_rem_pio2f+0x27c>
 801fb12:	9b06      	ldr	r3, [sp, #24]
 801fb14:	f106 0c01 	add.w	ip, r6, #1
 801fb18:	4430      	add	r0, r6
 801fb1a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801fb1e:	eb0d 0403 	add.w	r4, sp, r3
 801fb22:	9b01      	ldr	r3, [sp, #4]
 801fb24:	18f7      	adds	r7, r6, r3
 801fb26:	ab1c      	add	r3, sp, #112	; 0x70
 801fb28:	3c4c      	subs	r4, #76	; 0x4c
 801fb2a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801fb2e:	4560      	cmp	r0, ip
 801fb30:	da04      	bge.n	801fb3c <__kernel_rem_pio2f+0x2b0>
 801fb32:	4606      	mov	r6, r0
 801fb34:	e711      	b.n	801f95a <__kernel_rem_pio2f+0xce>
 801fb36:	9c05      	ldr	r4, [sp, #20]
 801fb38:	2001      	movs	r0, #1
 801fb3a:	e7e6      	b.n	801fb0a <__kernel_rem_pio2f+0x27e>
 801fb3c:	9b04      	ldr	r3, [sp, #16]
 801fb3e:	2600      	movs	r6, #0
 801fb40:	f8dd e008 	ldr.w	lr, [sp, #8]
 801fb44:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fb48:	ee07 3a90 	vmov	s15, r3
 801fb4c:	9306      	str	r3, [sp, #24]
 801fb4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fb52:	ece7 7a01 	vstmia	r7!, {s15}
 801fb56:	46b9      	mov	r9, r7
 801fb58:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801fb90 <__kernel_rem_pio2f+0x304>
 801fb5c:	455e      	cmp	r6, fp
 801fb5e:	dd04      	ble.n	801fb6a <__kernel_rem_pio2f+0x2de>
 801fb60:	f10c 0c01 	add.w	ip, ip, #1
 801fb64:	ece4 7a01 	vstmia	r4!, {s15}
 801fb68:	e7e1      	b.n	801fb2e <__kernel_rem_pio2f+0x2a2>
 801fb6a:	ecfe 6a01 	vldmia	lr!, {s13}
 801fb6e:	3601      	adds	r6, #1
 801fb70:	ed39 7a01 	vldmdb	r9!, {s14}
 801fb74:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fb78:	e7f0      	b.n	801fb5c <__kernel_rem_pio2f+0x2d0>
 801fb7a:	3c01      	subs	r4, #1
 801fb7c:	e777      	b.n	801fa6e <__kernel_rem_pio2f+0x1e2>
 801fb7e:	bf00      	nop
 801fb80:	0802249c 	.word	0x0802249c
 801fb84:	08022470 	.word	0x08022470
 801fb88:	43800000 	.word	0x43800000
 801fb8c:	3b800000 	.word	0x3b800000
 801fb90:	00000000 	.word	0x00000000
 801fb94:	9b03      	ldr	r3, [sp, #12]
 801fb96:	eeb0 0a48 	vmov.f32	s0, s16
 801fb9a:	1a98      	subs	r0, r3, r2
 801fb9c:	f000 f9da 	bl	801ff54 <scalbnf>
 801fba0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801fb88 <__kernel_rem_pio2f+0x2fc>
 801fba4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801fba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbac:	db19      	blt.n	801fbe2 <__kernel_rem_pio2f+0x356>
 801fbae:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801fb8c <__kernel_rem_pio2f+0x300>
 801fbb2:	aa08      	add	r2, sp, #32
 801fbb4:	1c74      	adds	r4, r6, #1
 801fbb6:	3508      	adds	r5, #8
 801fbb8:	ee60 7a27 	vmul.f32	s15, s0, s15
 801fbbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fbc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fbc4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801fbc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fbcc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fbd0:	ee10 3a10 	vmov	r3, s0
 801fbd4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801fbd8:	ee17 3a90 	vmov	r3, s15
 801fbdc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801fbe0:	e74b      	b.n	801fa7a <__kernel_rem_pio2f+0x1ee>
 801fbe2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fbe6:	aa08      	add	r2, sp, #32
 801fbe8:	4634      	mov	r4, r6
 801fbea:	ee10 3a10 	vmov	r3, s0
 801fbee:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801fbf2:	e742      	b.n	801fa7a <__kernel_rem_pio2f+0x1ee>
 801fbf4:	a808      	add	r0, sp, #32
 801fbf6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801fbfa:	3b01      	subs	r3, #1
 801fbfc:	ee07 0a90 	vmov	s15, r0
 801fc00:	9001      	str	r0, [sp, #4]
 801fc02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fc06:	ee67 7a80 	vmul.f32	s15, s15, s0
 801fc0a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801fc0e:	ed62 7a01 	vstmdb	r2!, {s15}
 801fc12:	e73f      	b.n	801fa94 <__kernel_rem_pio2f+0x208>
 801fc14:	ecf6 6a01 	vldmia	r6!, {s13}
 801fc18:	3001      	adds	r0, #1
 801fc1a:	ecb5 7a01 	vldmia	r5!, {s14}
 801fc1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fc22:	4550      	cmp	r0, sl
 801fc24:	dc01      	bgt.n	801fc2a <__kernel_rem_pio2f+0x39e>
 801fc26:	4290      	cmp	r0, r2
 801fc28:	ddf4      	ble.n	801fc14 <__kernel_rem_pio2f+0x388>
 801fc2a:	a858      	add	r0, sp, #352	; 0x160
 801fc2c:	3b01      	subs	r3, #1
 801fc2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801fc32:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801fc36:	e731      	b.n	801fa9c <__kernel_rem_pio2f+0x210>
 801fc38:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801fc3a:	2b02      	cmp	r3, #2
 801fc3c:	dc09      	bgt.n	801fc52 <__kernel_rem_pio2f+0x3c6>
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	dc2b      	bgt.n	801fc9a <__kernel_rem_pio2f+0x40e>
 801fc42:	d044      	beq.n	801fcce <__kernel_rem_pio2f+0x442>
 801fc44:	f009 0007 	and.w	r0, r9, #7
 801fc48:	b059      	add	sp, #356	; 0x164
 801fc4a:	ecbd 8b04 	vpop	{d8-d9}
 801fc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc52:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801fc54:	2b03      	cmp	r3, #3
 801fc56:	d1f5      	bne.n	801fc44 <__kernel_rem_pio2f+0x3b8>
 801fc58:	aa30      	add	r2, sp, #192	; 0xc0
 801fc5a:	1f0b      	subs	r3, r1, #4
 801fc5c:	4620      	mov	r0, r4
 801fc5e:	4413      	add	r3, r2
 801fc60:	461a      	mov	r2, r3
 801fc62:	2800      	cmp	r0, #0
 801fc64:	f1a2 0204 	sub.w	r2, r2, #4
 801fc68:	dc52      	bgt.n	801fd10 <__kernel_rem_pio2f+0x484>
 801fc6a:	4622      	mov	r2, r4
 801fc6c:	2a01      	cmp	r2, #1
 801fc6e:	f1a3 0304 	sub.w	r3, r3, #4
 801fc72:	dc5d      	bgt.n	801fd30 <__kernel_rem_pio2f+0x4a4>
 801fc74:	ab30      	add	r3, sp, #192	; 0xc0
 801fc76:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801fb90 <__kernel_rem_pio2f+0x304>
 801fc7a:	440b      	add	r3, r1
 801fc7c:	2c01      	cmp	r4, #1
 801fc7e:	dc67      	bgt.n	801fd50 <__kernel_rem_pio2f+0x4c4>
 801fc80:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801fc84:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801fc88:	2f00      	cmp	r7, #0
 801fc8a:	d167      	bne.n	801fd5c <__kernel_rem_pio2f+0x4d0>
 801fc8c:	edc8 6a00 	vstr	s13, [r8]
 801fc90:	ed88 7a01 	vstr	s14, [r8, #4]
 801fc94:	edc8 7a02 	vstr	s15, [r8, #8]
 801fc98:	e7d4      	b.n	801fc44 <__kernel_rem_pio2f+0x3b8>
 801fc9a:	ab30      	add	r3, sp, #192	; 0xc0
 801fc9c:	4622      	mov	r2, r4
 801fc9e:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801fb90 <__kernel_rem_pio2f+0x304>
 801fca2:	440b      	add	r3, r1
 801fca4:	2a00      	cmp	r2, #0
 801fca6:	da24      	bge.n	801fcf2 <__kernel_rem_pio2f+0x466>
 801fca8:	b34f      	cbz	r7, 801fcfe <__kernel_rem_pio2f+0x472>
 801fcaa:	eef1 7a47 	vneg.f32	s15, s14
 801fcae:	edc8 7a00 	vstr	s15, [r8]
 801fcb2:	aa31      	add	r2, sp, #196	; 0xc4
 801fcb4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801fcb8:	2301      	movs	r3, #1
 801fcba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fcbe:	429c      	cmp	r4, r3
 801fcc0:	da20      	bge.n	801fd04 <__kernel_rem_pio2f+0x478>
 801fcc2:	b10f      	cbz	r7, 801fcc8 <__kernel_rem_pio2f+0x43c>
 801fcc4:	eef1 7a67 	vneg.f32	s15, s15
 801fcc8:	edc8 7a01 	vstr	s15, [r8, #4]
 801fccc:	e7ba      	b.n	801fc44 <__kernel_rem_pio2f+0x3b8>
 801fcce:	ab30      	add	r3, sp, #192	; 0xc0
 801fcd0:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801fb90 <__kernel_rem_pio2f+0x304>
 801fcd4:	440b      	add	r3, r1
 801fcd6:	2c00      	cmp	r4, #0
 801fcd8:	da05      	bge.n	801fce6 <__kernel_rem_pio2f+0x45a>
 801fcda:	b10f      	cbz	r7, 801fce0 <__kernel_rem_pio2f+0x454>
 801fcdc:	eef1 7a67 	vneg.f32	s15, s15
 801fce0:	edc8 7a00 	vstr	s15, [r8]
 801fce4:	e7ae      	b.n	801fc44 <__kernel_rem_pio2f+0x3b8>
 801fce6:	ed33 7a01 	vldmdb	r3!, {s14}
 801fcea:	3c01      	subs	r4, #1
 801fcec:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fcf0:	e7f1      	b.n	801fcd6 <__kernel_rem_pio2f+0x44a>
 801fcf2:	ed73 7a01 	vldmdb	r3!, {s15}
 801fcf6:	3a01      	subs	r2, #1
 801fcf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801fcfc:	e7d2      	b.n	801fca4 <__kernel_rem_pio2f+0x418>
 801fcfe:	eef0 7a47 	vmov.f32	s15, s14
 801fd02:	e7d4      	b.n	801fcae <__kernel_rem_pio2f+0x422>
 801fd04:	ecb2 7a01 	vldmia	r2!, {s14}
 801fd08:	3301      	adds	r3, #1
 801fd0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fd0e:	e7d6      	b.n	801fcbe <__kernel_rem_pio2f+0x432>
 801fd10:	edd2 7a00 	vldr	s15, [r2]
 801fd14:	3801      	subs	r0, #1
 801fd16:	edd2 6a01 	vldr	s13, [r2, #4]
 801fd1a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fd1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fd22:	ed82 7a00 	vstr	s14, [r2]
 801fd26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801fd2a:	edc2 7a01 	vstr	s15, [r2, #4]
 801fd2e:	e798      	b.n	801fc62 <__kernel_rem_pio2f+0x3d6>
 801fd30:	edd3 7a00 	vldr	s15, [r3]
 801fd34:	3a01      	subs	r2, #1
 801fd36:	edd3 6a01 	vldr	s13, [r3, #4]
 801fd3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fd3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fd42:	ed83 7a00 	vstr	s14, [r3]
 801fd46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801fd4a:	edc3 7a01 	vstr	s15, [r3, #4]
 801fd4e:	e78d      	b.n	801fc6c <__kernel_rem_pio2f+0x3e0>
 801fd50:	ed33 7a01 	vldmdb	r3!, {s14}
 801fd54:	3c01      	subs	r4, #1
 801fd56:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fd5a:	e78f      	b.n	801fc7c <__kernel_rem_pio2f+0x3f0>
 801fd5c:	eef1 6a66 	vneg.f32	s13, s13
 801fd60:	eeb1 7a47 	vneg.f32	s14, s14
 801fd64:	eef1 7a67 	vneg.f32	s15, s15
 801fd68:	edc8 6a00 	vstr	s13, [r8]
 801fd6c:	ed88 7a01 	vstr	s14, [r8, #4]
 801fd70:	e790      	b.n	801fc94 <__kernel_rem_pio2f+0x408>
 801fd72:	bf00      	nop

0801fd74 <__ieee754_logf>:
 801fd74:	ee10 3a10 	vmov	r3, s0
 801fd78:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801fd7c:	d106      	bne.n	801fd8c <__ieee754_logf+0x18>
 801fd7e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801ff14 <__ieee754_logf+0x1a0>
 801fd82:	eddf 7a65 	vldr	s15, [pc, #404]	; 801ff18 <__ieee754_logf+0x1a4>
 801fd86:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801fd8a:	4770      	bx	lr
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	da02      	bge.n	801fd96 <__ieee754_logf+0x22>
 801fd90:	ee30 7a40 	vsub.f32	s14, s0, s0
 801fd94:	e7f5      	b.n	801fd82 <__ieee754_logf+0xe>
 801fd96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801fd9a:	db02      	blt.n	801fda2 <__ieee754_logf+0x2e>
 801fd9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fda0:	4770      	bx	lr
 801fda2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801fda6:	485d      	ldr	r0, [pc, #372]	; (801ff1c <__ieee754_logf+0x1a8>)
 801fda8:	bfbb      	ittet	lt
 801fdaa:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 801ff20 <__ieee754_logf+0x1ac>
 801fdae:	f06f 0118 	mvnlt.w	r1, #24
 801fdb2:	2100      	movge	r1, #0
 801fdb4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801fdb8:	bfb8      	it	lt
 801fdba:	ee17 3a90 	vmovlt	r3, s15
 801fdbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801fdc2:	15da      	asrs	r2, r3, #23
 801fdc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801fdc8:	3a7f      	subs	r2, #127	; 0x7f
 801fdca:	4418      	add	r0, r3
 801fdcc:	440a      	add	r2, r1
 801fdce:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801fdd2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801fdd6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801fdda:	f103 000f 	add.w	r0, r3, #15
 801fdde:	4319      	orrs	r1, r3
 801fde0:	ee00 1a10 	vmov	s0, r1
 801fde4:	494f      	ldr	r1, [pc, #316]	; (801ff24 <__ieee754_logf+0x1b0>)
 801fde6:	4001      	ands	r1, r0
 801fde8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801fdec:	bb89      	cbnz	r1, 801fe52 <__ieee754_logf+0xde>
 801fdee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801fdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdf6:	d10f      	bne.n	801fe18 <__ieee754_logf+0xa4>
 801fdf8:	2a00      	cmp	r2, #0
 801fdfa:	f000 8087 	beq.w	801ff0c <__ieee754_logf+0x198>
 801fdfe:	ee07 2a90 	vmov	s15, r2
 801fe02:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801ff28 <__ieee754_logf+0x1b4>
 801fe06:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801ff2c <__ieee754_logf+0x1b8>
 801fe0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fe0e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fe12:	eea7 0a87 	vfma.f32	s0, s15, s14
 801fe16:	4770      	bx	lr
 801fe18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801fe1c:	eddf 6a44 	vldr	s13, [pc, #272]	; 801ff30 <__ieee754_logf+0x1bc>
 801fe20:	ee20 7a00 	vmul.f32	s14, s0, s0
 801fe24:	eee0 7a66 	vfms.f32	s15, s0, s13
 801fe28:	ee27 7a27 	vmul.f32	s14, s14, s15
 801fe2c:	b912      	cbnz	r2, 801fe34 <__ieee754_logf+0xc0>
 801fe2e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801fe32:	4770      	bx	lr
 801fe34:	ee07 2a90 	vmov	s15, r2
 801fe38:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801ff28 <__ieee754_logf+0x1b4>
 801fe3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fe40:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801fe44:	ee37 0a40 	vsub.f32	s0, s14, s0
 801fe48:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801ff2c <__ieee754_logf+0x1b8>
 801fe4c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801fe50:	4770      	bx	lr
 801fe52:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801fe56:	eddf 5a37 	vldr	s11, [pc, #220]	; 801ff34 <__ieee754_logf+0x1c0>
 801fe5a:	eddf 4a37 	vldr	s9, [pc, #220]	; 801ff38 <__ieee754_logf+0x1c4>
 801fe5e:	4937      	ldr	r1, [pc, #220]	; (801ff3c <__ieee754_logf+0x1c8>)
 801fe60:	ee70 7a27 	vadd.f32	s15, s0, s15
 801fe64:	4419      	add	r1, r3
 801fe66:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801fe6a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801fe6e:	ee07 2a90 	vmov	s15, r2
 801fe72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801fe76:	430b      	orrs	r3, r1
 801fe78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801fe7c:	eddf 7a30 	vldr	s15, [pc, #192]	; 801ff40 <__ieee754_logf+0x1cc>
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	ee26 5a06 	vmul.f32	s10, s12, s12
 801fe86:	ee25 7a05 	vmul.f32	s14, s10, s10
 801fe8a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fe8e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801ff44 <__ieee754_logf+0x1d0>
 801fe92:	eee7 5a87 	vfma.f32	s11, s15, s14
 801fe96:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801ff48 <__ieee754_logf+0x1d4>
 801fe9a:	eee7 7a24 	vfma.f32	s15, s14, s9
 801fe9e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 801ff4c <__ieee754_logf+0x1d8>
 801fea2:	eee7 4a87 	vfma.f32	s9, s15, s14
 801fea6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801ff50 <__ieee754_logf+0x1dc>
 801feaa:	eee4 7a87 	vfma.f32	s15, s9, s14
 801feae:	ee67 7a85 	vmul.f32	s15, s15, s10
 801feb2:	eee5 7a87 	vfma.f32	s15, s11, s14
 801feb6:	dd1a      	ble.n	801feee <__ieee754_logf+0x17a>
 801feb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801febc:	ee20 7a07 	vmul.f32	s14, s0, s14
 801fec0:	ee27 7a00 	vmul.f32	s14, s14, s0
 801fec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fec8:	ee67 7a86 	vmul.f32	s15, s15, s12
 801fecc:	b912      	cbnz	r2, 801fed4 <__ieee754_logf+0x160>
 801fece:	ee37 7a67 	vsub.f32	s14, s14, s15
 801fed2:	e7ac      	b.n	801fe2e <__ieee754_logf+0xba>
 801fed4:	ed9f 6a14 	vldr	s12, [pc, #80]	; 801ff28 <__ieee754_logf+0x1b4>
 801fed8:	eee6 7a86 	vfma.f32	s15, s13, s12
 801fedc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801fee0:	ee37 0a40 	vsub.f32	s0, s14, s0
 801fee4:	eddf 7a11 	vldr	s15, [pc, #68]	; 801ff2c <__ieee754_logf+0x1b8>
 801fee8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801feec:	4770      	bx	lr
 801feee:	ee70 7a67 	vsub.f32	s15, s0, s15
 801fef2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801fef6:	b912      	cbnz	r2, 801fefe <__ieee754_logf+0x18a>
 801fef8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801fefc:	4770      	bx	lr
 801fefe:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801ff28 <__ieee754_logf+0x1b4>
 801ff02:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801ff06:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ff0a:	e7eb      	b.n	801fee4 <__ieee754_logf+0x170>
 801ff0c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801ff18 <__ieee754_logf+0x1a4>
 801ff10:	4770      	bx	lr
 801ff12:	bf00      	nop
 801ff14:	cc000000 	.word	0xcc000000
 801ff18:	00000000 	.word	0x00000000
 801ff1c:	004afb20 	.word	0x004afb20
 801ff20:	4c000000 	.word	0x4c000000
 801ff24:	007ffff0 	.word	0x007ffff0
 801ff28:	3717f7d1 	.word	0x3717f7d1
 801ff2c:	3f317180 	.word	0x3f317180
 801ff30:	3eaaaaab 	.word	0x3eaaaaab
 801ff34:	3e1cd04f 	.word	0x3e1cd04f
 801ff38:	3e178897 	.word	0x3e178897
 801ff3c:	ffcf5c30 	.word	0xffcf5c30
 801ff40:	3e638e29 	.word	0x3e638e29
 801ff44:	3ecccccd 	.word	0x3ecccccd
 801ff48:	3e3a3325 	.word	0x3e3a3325
 801ff4c:	3e924925 	.word	0x3e924925
 801ff50:	3f2aaaab 	.word	0x3f2aaaab

0801ff54 <scalbnf>:
 801ff54:	ee10 3a10 	vmov	r3, s0
 801ff58:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801ff5c:	d02a      	beq.n	801ffb4 <scalbnf+0x60>
 801ff5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801ff62:	d302      	bcc.n	801ff6a <scalbnf+0x16>
 801ff64:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ff68:	4770      	bx	lr
 801ff6a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801ff6e:	d122      	bne.n	801ffb6 <scalbnf+0x62>
 801ff70:	4b23      	ldr	r3, [pc, #140]	; (8020000 <scalbnf+0xac>)
 801ff72:	eddf 7a24 	vldr	s15, [pc, #144]	; 8020004 <scalbnf+0xb0>
 801ff76:	4298      	cmp	r0, r3
 801ff78:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ff7c:	db16      	blt.n	801ffac <scalbnf+0x58>
 801ff7e:	ee10 3a10 	vmov	r3, s0
 801ff82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ff86:	3a19      	subs	r2, #25
 801ff88:	f24c 3150 	movw	r1, #50000	; 0xc350
 801ff8c:	4288      	cmp	r0, r1
 801ff8e:	dd14      	ble.n	801ffba <scalbnf+0x66>
 801ff90:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8020008 <scalbnf+0xb4>
 801ff94:	ee10 3a10 	vmov	r3, s0
 801ff98:	eddf 6a1c 	vldr	s13, [pc, #112]	; 802000c <scalbnf+0xb8>
 801ff9c:	eeb0 7a67 	vmov.f32	s14, s15
 801ffa0:	2b00      	cmp	r3, #0
 801ffa2:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801ffa6:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ffaa:	4770      	bx	lr
 801ffac:	eddf 7a18 	vldr	s15, [pc, #96]	; 8020010 <scalbnf+0xbc>
 801ffb0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ffb4:	4770      	bx	lr
 801ffb6:	0dd2      	lsrs	r2, r2, #23
 801ffb8:	e7e6      	b.n	801ff88 <scalbnf+0x34>
 801ffba:	4410      	add	r0, r2
 801ffbc:	28fe      	cmp	r0, #254	; 0xfe
 801ffbe:	dce7      	bgt.n	801ff90 <scalbnf+0x3c>
 801ffc0:	2800      	cmp	r0, #0
 801ffc2:	dd06      	ble.n	801ffd2 <scalbnf+0x7e>
 801ffc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ffc8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ffcc:	ee00 3a10 	vmov	s0, r3
 801ffd0:	4770      	bx	lr
 801ffd2:	f110 0f16 	cmn.w	r0, #22
 801ffd6:	da09      	bge.n	801ffec <scalbnf+0x98>
 801ffd8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8020010 <scalbnf+0xbc>
 801ffdc:	ee10 3a10 	vmov	r3, s0
 801ffe0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8020014 <scalbnf+0xc0>
 801ffe4:	eeb0 7a67 	vmov.f32	s14, s15
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	e7da      	b.n	801ffa2 <scalbnf+0x4e>
 801ffec:	3019      	adds	r0, #25
 801ffee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fff2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8020018 <scalbnf+0xc4>
 801fff6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801fffa:	ee07 3a90 	vmov	s15, r3
 801fffe:	e7d7      	b.n	801ffb0 <scalbnf+0x5c>
 8020000:	ffff3cb0 	.word	0xffff3cb0
 8020004:	4c000000 	.word	0x4c000000
 8020008:	7149f2ca 	.word	0x7149f2ca
 802000c:	f149f2ca 	.word	0xf149f2ca
 8020010:	0da24260 	.word	0x0da24260
 8020014:	8da24260 	.word	0x8da24260
 8020018:	33000000 	.word	0x33000000
 802001c:	00000000 	.word	0x00000000

08020020 <floor>:
 8020020:	ec51 0b10 	vmov	r0, r1, d0
 8020024:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8020028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802002c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8020030:	460c      	mov	r4, r1
 8020032:	ee10 5a10 	vmov	r5, s0
 8020036:	ee10 8a10 	vmov	r8, s0
 802003a:	2e13      	cmp	r6, #19
 802003c:	dc32      	bgt.n	80200a4 <floor+0x84>
 802003e:	2e00      	cmp	r6, #0
 8020040:	da14      	bge.n	802006c <floor+0x4c>
 8020042:	a333      	add	r3, pc, #204	; (adr r3, 8020110 <floor+0xf0>)
 8020044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020048:	f7e0 f912 	bl	8000270 <__adddf3>
 802004c:	2200      	movs	r2, #0
 802004e:	2300      	movs	r3, #0
 8020050:	f7e0 fd54 	bl	8000afc <__aeabi_dcmpgt>
 8020054:	b138      	cbz	r0, 8020066 <floor+0x46>
 8020056:	2c00      	cmp	r4, #0
 8020058:	da54      	bge.n	8020104 <floor+0xe4>
 802005a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 802005e:	4325      	orrs	r5, r4
 8020060:	d053      	beq.n	802010a <floor+0xea>
 8020062:	2500      	movs	r5, #0
 8020064:	4c2c      	ldr	r4, [pc, #176]	; (8020118 <floor+0xf8>)
 8020066:	4621      	mov	r1, r4
 8020068:	4628      	mov	r0, r5
 802006a:	e025      	b.n	80200b8 <floor+0x98>
 802006c:	4f2b      	ldr	r7, [pc, #172]	; (802011c <floor+0xfc>)
 802006e:	4137      	asrs	r7, r6
 8020070:	ea01 0307 	and.w	r3, r1, r7
 8020074:	4303      	orrs	r3, r0
 8020076:	d01f      	beq.n	80200b8 <floor+0x98>
 8020078:	a325      	add	r3, pc, #148	; (adr r3, 8020110 <floor+0xf0>)
 802007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802007e:	f7e0 f8f7 	bl	8000270 <__adddf3>
 8020082:	2200      	movs	r2, #0
 8020084:	2300      	movs	r3, #0
 8020086:	f7e0 fd39 	bl	8000afc <__aeabi_dcmpgt>
 802008a:	2800      	cmp	r0, #0
 802008c:	d0eb      	beq.n	8020066 <floor+0x46>
 802008e:	2c00      	cmp	r4, #0
 8020090:	f04f 0500 	mov.w	r5, #0
 8020094:	bfbe      	ittt	lt
 8020096:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802009a:	4133      	asrlt	r3, r6
 802009c:	18e4      	addlt	r4, r4, r3
 802009e:	ea24 0407 	bic.w	r4, r4, r7
 80200a2:	e7e0      	b.n	8020066 <floor+0x46>
 80200a4:	2e33      	cmp	r6, #51	; 0x33
 80200a6:	dd0b      	ble.n	80200c0 <floor+0xa0>
 80200a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80200ac:	d104      	bne.n	80200b8 <floor+0x98>
 80200ae:	ee10 2a10 	vmov	r2, s0
 80200b2:	460b      	mov	r3, r1
 80200b4:	f7e0 f8dc 	bl	8000270 <__adddf3>
 80200b8:	ec41 0b10 	vmov	d0, r0, r1
 80200bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200c0:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80200c4:	f04f 37ff 	mov.w	r7, #4294967295
 80200c8:	40df      	lsrs	r7, r3
 80200ca:	4238      	tst	r0, r7
 80200cc:	d0f4      	beq.n	80200b8 <floor+0x98>
 80200ce:	a310      	add	r3, pc, #64	; (adr r3, 8020110 <floor+0xf0>)
 80200d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200d4:	f7e0 f8cc 	bl	8000270 <__adddf3>
 80200d8:	2200      	movs	r2, #0
 80200da:	2300      	movs	r3, #0
 80200dc:	f7e0 fd0e 	bl	8000afc <__aeabi_dcmpgt>
 80200e0:	2800      	cmp	r0, #0
 80200e2:	d0c0      	beq.n	8020066 <floor+0x46>
 80200e4:	2c00      	cmp	r4, #0
 80200e6:	da0a      	bge.n	80200fe <floor+0xde>
 80200e8:	2e14      	cmp	r6, #20
 80200ea:	d101      	bne.n	80200f0 <floor+0xd0>
 80200ec:	3401      	adds	r4, #1
 80200ee:	e006      	b.n	80200fe <floor+0xde>
 80200f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80200f4:	2301      	movs	r3, #1
 80200f6:	40b3      	lsls	r3, r6
 80200f8:	441d      	add	r5, r3
 80200fa:	45a8      	cmp	r8, r5
 80200fc:	d8f6      	bhi.n	80200ec <floor+0xcc>
 80200fe:	ea25 0507 	bic.w	r5, r5, r7
 8020102:	e7b0      	b.n	8020066 <floor+0x46>
 8020104:	2500      	movs	r5, #0
 8020106:	462c      	mov	r4, r5
 8020108:	e7ad      	b.n	8020066 <floor+0x46>
 802010a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802010e:	e7aa      	b.n	8020066 <floor+0x46>
 8020110:	8800759c 	.word	0x8800759c
 8020114:	7e37e43c 	.word	0x7e37e43c
 8020118:	bff00000 	.word	0xbff00000
 802011c:	000fffff 	.word	0x000fffff

08020120 <floorf>:
 8020120:	febb 0a40 	vrintm.f32	s0, s0
 8020124:	4770      	bx	lr

08020126 <abort>:
 8020126:	2006      	movs	r0, #6
 8020128:	b508      	push	{r3, lr}
 802012a:	f000 fa7b 	bl	8020624 <raise>
 802012e:	2001      	movs	r0, #1
 8020130:	f7ef ffde 	bl	80100f0 <_exit>

08020134 <malloc>:
 8020134:	4b02      	ldr	r3, [pc, #8]	; (8020140 <malloc+0xc>)
 8020136:	4601      	mov	r1, r0
 8020138:	6818      	ldr	r0, [r3, #0]
 802013a:	f000 b82b 	b.w	8020194 <_malloc_r>
 802013e:	bf00      	nop
 8020140:	20000108 	.word	0x20000108

08020144 <free>:
 8020144:	4b02      	ldr	r3, [pc, #8]	; (8020150 <free+0xc>)
 8020146:	4601      	mov	r1, r0
 8020148:	6818      	ldr	r0, [r3, #0]
 802014a:	f000 bb35 	b.w	80207b8 <_free_r>
 802014e:	bf00      	nop
 8020150:	20000108 	.word	0x20000108

08020154 <sbrk_aligned>:
 8020154:	b570      	push	{r4, r5, r6, lr}
 8020156:	4e0e      	ldr	r6, [pc, #56]	; (8020190 <sbrk_aligned+0x3c>)
 8020158:	460c      	mov	r4, r1
 802015a:	4605      	mov	r5, r0
 802015c:	6831      	ldr	r1, [r6, #0]
 802015e:	b911      	cbnz	r1, 8020166 <sbrk_aligned+0x12>
 8020160:	f000 fab0 	bl	80206c4 <_sbrk_r>
 8020164:	6030      	str	r0, [r6, #0]
 8020166:	4621      	mov	r1, r4
 8020168:	4628      	mov	r0, r5
 802016a:	f000 faab 	bl	80206c4 <_sbrk_r>
 802016e:	1c43      	adds	r3, r0, #1
 8020170:	d00a      	beq.n	8020188 <sbrk_aligned+0x34>
 8020172:	1cc4      	adds	r4, r0, #3
 8020174:	f024 0403 	bic.w	r4, r4, #3
 8020178:	42a0      	cmp	r0, r4
 802017a:	d007      	beq.n	802018c <sbrk_aligned+0x38>
 802017c:	1a21      	subs	r1, r4, r0
 802017e:	4628      	mov	r0, r5
 8020180:	f000 faa0 	bl	80206c4 <_sbrk_r>
 8020184:	3001      	adds	r0, #1
 8020186:	d101      	bne.n	802018c <sbrk_aligned+0x38>
 8020188:	f04f 34ff 	mov.w	r4, #4294967295
 802018c:	4620      	mov	r0, r4
 802018e:	bd70      	pop	{r4, r5, r6, pc}
 8020190:	20009d74 	.word	0x20009d74

08020194 <_malloc_r>:
 8020194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020198:	1ccd      	adds	r5, r1, #3
 802019a:	4607      	mov	r7, r0
 802019c:	f025 0503 	bic.w	r5, r5, #3
 80201a0:	3508      	adds	r5, #8
 80201a2:	2d0c      	cmp	r5, #12
 80201a4:	bf38      	it	cc
 80201a6:	250c      	movcc	r5, #12
 80201a8:	2d00      	cmp	r5, #0
 80201aa:	db01      	blt.n	80201b0 <_malloc_r+0x1c>
 80201ac:	42a9      	cmp	r1, r5
 80201ae:	d905      	bls.n	80201bc <_malloc_r+0x28>
 80201b0:	230c      	movs	r3, #12
 80201b2:	2600      	movs	r6, #0
 80201b4:	603b      	str	r3, [r7, #0]
 80201b6:	4630      	mov	r0, r6
 80201b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80201bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8020290 <_malloc_r+0xfc>
 80201c0:	f000 f868 	bl	8020294 <__malloc_lock>
 80201c4:	f8d8 3000 	ldr.w	r3, [r8]
 80201c8:	461c      	mov	r4, r3
 80201ca:	bb5c      	cbnz	r4, 8020224 <_malloc_r+0x90>
 80201cc:	4629      	mov	r1, r5
 80201ce:	4638      	mov	r0, r7
 80201d0:	f7ff ffc0 	bl	8020154 <sbrk_aligned>
 80201d4:	1c43      	adds	r3, r0, #1
 80201d6:	4604      	mov	r4, r0
 80201d8:	d155      	bne.n	8020286 <_malloc_r+0xf2>
 80201da:	f8d8 4000 	ldr.w	r4, [r8]
 80201de:	4626      	mov	r6, r4
 80201e0:	2e00      	cmp	r6, #0
 80201e2:	d145      	bne.n	8020270 <_malloc_r+0xdc>
 80201e4:	2c00      	cmp	r4, #0
 80201e6:	d048      	beq.n	802027a <_malloc_r+0xe6>
 80201e8:	6823      	ldr	r3, [r4, #0]
 80201ea:	4631      	mov	r1, r6
 80201ec:	4638      	mov	r0, r7
 80201ee:	eb04 0903 	add.w	r9, r4, r3
 80201f2:	f000 fa67 	bl	80206c4 <_sbrk_r>
 80201f6:	4581      	cmp	r9, r0
 80201f8:	d13f      	bne.n	802027a <_malloc_r+0xe6>
 80201fa:	6821      	ldr	r1, [r4, #0]
 80201fc:	4638      	mov	r0, r7
 80201fe:	1a6d      	subs	r5, r5, r1
 8020200:	4629      	mov	r1, r5
 8020202:	f7ff ffa7 	bl	8020154 <sbrk_aligned>
 8020206:	3001      	adds	r0, #1
 8020208:	d037      	beq.n	802027a <_malloc_r+0xe6>
 802020a:	6823      	ldr	r3, [r4, #0]
 802020c:	442b      	add	r3, r5
 802020e:	6023      	str	r3, [r4, #0]
 8020210:	f8d8 3000 	ldr.w	r3, [r8]
 8020214:	2b00      	cmp	r3, #0
 8020216:	d038      	beq.n	802028a <_malloc_r+0xf6>
 8020218:	685a      	ldr	r2, [r3, #4]
 802021a:	42a2      	cmp	r2, r4
 802021c:	d12b      	bne.n	8020276 <_malloc_r+0xe2>
 802021e:	2200      	movs	r2, #0
 8020220:	605a      	str	r2, [r3, #4]
 8020222:	e00f      	b.n	8020244 <_malloc_r+0xb0>
 8020224:	6822      	ldr	r2, [r4, #0]
 8020226:	1b52      	subs	r2, r2, r5
 8020228:	d41f      	bmi.n	802026a <_malloc_r+0xd6>
 802022a:	2a0b      	cmp	r2, #11
 802022c:	d917      	bls.n	802025e <_malloc_r+0xca>
 802022e:	1961      	adds	r1, r4, r5
 8020230:	42a3      	cmp	r3, r4
 8020232:	6025      	str	r5, [r4, #0]
 8020234:	bf18      	it	ne
 8020236:	6059      	strne	r1, [r3, #4]
 8020238:	6863      	ldr	r3, [r4, #4]
 802023a:	bf08      	it	eq
 802023c:	f8c8 1000 	streq.w	r1, [r8]
 8020240:	5162      	str	r2, [r4, r5]
 8020242:	604b      	str	r3, [r1, #4]
 8020244:	f104 060b 	add.w	r6, r4, #11
 8020248:	4638      	mov	r0, r7
 802024a:	f000 f829 	bl	80202a0 <__malloc_unlock>
 802024e:	1d23      	adds	r3, r4, #4
 8020250:	f026 0607 	bic.w	r6, r6, #7
 8020254:	1af2      	subs	r2, r6, r3
 8020256:	d0ae      	beq.n	80201b6 <_malloc_r+0x22>
 8020258:	1b9b      	subs	r3, r3, r6
 802025a:	50a3      	str	r3, [r4, r2]
 802025c:	e7ab      	b.n	80201b6 <_malloc_r+0x22>
 802025e:	42a3      	cmp	r3, r4
 8020260:	6862      	ldr	r2, [r4, #4]
 8020262:	d1dd      	bne.n	8020220 <_malloc_r+0x8c>
 8020264:	f8c8 2000 	str.w	r2, [r8]
 8020268:	e7ec      	b.n	8020244 <_malloc_r+0xb0>
 802026a:	4623      	mov	r3, r4
 802026c:	6864      	ldr	r4, [r4, #4]
 802026e:	e7ac      	b.n	80201ca <_malloc_r+0x36>
 8020270:	4634      	mov	r4, r6
 8020272:	6876      	ldr	r6, [r6, #4]
 8020274:	e7b4      	b.n	80201e0 <_malloc_r+0x4c>
 8020276:	4613      	mov	r3, r2
 8020278:	e7cc      	b.n	8020214 <_malloc_r+0x80>
 802027a:	230c      	movs	r3, #12
 802027c:	4638      	mov	r0, r7
 802027e:	603b      	str	r3, [r7, #0]
 8020280:	f000 f80e 	bl	80202a0 <__malloc_unlock>
 8020284:	e797      	b.n	80201b6 <_malloc_r+0x22>
 8020286:	6025      	str	r5, [r4, #0]
 8020288:	e7dc      	b.n	8020244 <_malloc_r+0xb0>
 802028a:	605b      	str	r3, [r3, #4]
 802028c:	deff      	udf	#255	; 0xff
 802028e:	bf00      	nop
 8020290:	20009d70 	.word	0x20009d70

08020294 <__malloc_lock>:
 8020294:	4801      	ldr	r0, [pc, #4]	; (802029c <__malloc_lock+0x8>)
 8020296:	f000 ba62 	b.w	802075e <__retarget_lock_acquire_recursive>
 802029a:	bf00      	nop
 802029c:	20009eb8 	.word	0x20009eb8

080202a0 <__malloc_unlock>:
 80202a0:	4801      	ldr	r0, [pc, #4]	; (80202a8 <__malloc_unlock+0x8>)
 80202a2:	f000 ba5d 	b.w	8020760 <__retarget_lock_release_recursive>
 80202a6:	bf00      	nop
 80202a8:	20009eb8 	.word	0x20009eb8

080202ac <rand>:
 80202ac:	4b16      	ldr	r3, [pc, #88]	; (8020308 <rand+0x5c>)
 80202ae:	b510      	push	{r4, lr}
 80202b0:	681c      	ldr	r4, [r3, #0]
 80202b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80202b4:	b9b3      	cbnz	r3, 80202e4 <rand+0x38>
 80202b6:	2018      	movs	r0, #24
 80202b8:	f7ff ff3c 	bl	8020134 <malloc>
 80202bc:	4602      	mov	r2, r0
 80202be:	6320      	str	r0, [r4, #48]	; 0x30
 80202c0:	b920      	cbnz	r0, 80202cc <rand+0x20>
 80202c2:	4b12      	ldr	r3, [pc, #72]	; (802030c <rand+0x60>)
 80202c4:	2152      	movs	r1, #82	; 0x52
 80202c6:	4812      	ldr	r0, [pc, #72]	; (8020310 <rand+0x64>)
 80202c8:	f000 fa58 	bl	802077c <__assert_func>
 80202cc:	4911      	ldr	r1, [pc, #68]	; (8020314 <rand+0x68>)
 80202ce:	4b12      	ldr	r3, [pc, #72]	; (8020318 <rand+0x6c>)
 80202d0:	e9c0 1300 	strd	r1, r3, [r0]
 80202d4:	4b11      	ldr	r3, [pc, #68]	; (802031c <rand+0x70>)
 80202d6:	2100      	movs	r1, #0
 80202d8:	6083      	str	r3, [r0, #8]
 80202da:	230b      	movs	r3, #11
 80202dc:	8183      	strh	r3, [r0, #12]
 80202de:	2001      	movs	r0, #1
 80202e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80202e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80202e6:	480e      	ldr	r0, [pc, #56]	; (8020320 <rand+0x74>)
 80202e8:	690b      	ldr	r3, [r1, #16]
 80202ea:	694c      	ldr	r4, [r1, #20]
 80202ec:	4a0d      	ldr	r2, [pc, #52]	; (8020324 <rand+0x78>)
 80202ee:	4358      	muls	r0, r3
 80202f0:	fb02 0004 	mla	r0, r2, r4, r0
 80202f4:	fba3 3202 	umull	r3, r2, r3, r2
 80202f8:	3301      	adds	r3, #1
 80202fa:	eb40 0002 	adc.w	r0, r0, r2
 80202fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8020302:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020306:	bd10      	pop	{r4, pc}
 8020308:	20000108 	.word	0x20000108
 802030c:	080224a8 	.word	0x080224a8
 8020310:	080224bf 	.word	0x080224bf
 8020314:	abcd330e 	.word	0xabcd330e
 8020318:	e66d1234 	.word	0xe66d1234
 802031c:	0005deec 	.word	0x0005deec
 8020320:	5851f42d 	.word	0x5851f42d
 8020324:	4c957f2d 	.word	0x4c957f2d

08020328 <std>:
 8020328:	2300      	movs	r3, #0
 802032a:	b510      	push	{r4, lr}
 802032c:	4604      	mov	r4, r0
 802032e:	6083      	str	r3, [r0, #8]
 8020330:	8181      	strh	r1, [r0, #12]
 8020332:	4619      	mov	r1, r3
 8020334:	6643      	str	r3, [r0, #100]	; 0x64
 8020336:	81c2      	strh	r2, [r0, #14]
 8020338:	2208      	movs	r2, #8
 802033a:	6183      	str	r3, [r0, #24]
 802033c:	e9c0 3300 	strd	r3, r3, [r0]
 8020340:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020344:	305c      	adds	r0, #92	; 0x5c
 8020346:	f000 f93c 	bl	80205c2 <memset>
 802034a:	4b0d      	ldr	r3, [pc, #52]	; (8020380 <std+0x58>)
 802034c:	6224      	str	r4, [r4, #32]
 802034e:	6263      	str	r3, [r4, #36]	; 0x24
 8020350:	4b0c      	ldr	r3, [pc, #48]	; (8020384 <std+0x5c>)
 8020352:	62a3      	str	r3, [r4, #40]	; 0x28
 8020354:	4b0c      	ldr	r3, [pc, #48]	; (8020388 <std+0x60>)
 8020356:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020358:	4b0c      	ldr	r3, [pc, #48]	; (802038c <std+0x64>)
 802035a:	6323      	str	r3, [r4, #48]	; 0x30
 802035c:	4b0c      	ldr	r3, [pc, #48]	; (8020390 <std+0x68>)
 802035e:	429c      	cmp	r4, r3
 8020360:	d006      	beq.n	8020370 <std+0x48>
 8020362:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8020366:	4294      	cmp	r4, r2
 8020368:	d002      	beq.n	8020370 <std+0x48>
 802036a:	33d0      	adds	r3, #208	; 0xd0
 802036c:	429c      	cmp	r4, r3
 802036e:	d105      	bne.n	802037c <std+0x54>
 8020370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020378:	f000 b9f0 	b.w	802075c <__retarget_lock_init_recursive>
 802037c:	bd10      	pop	{r4, pc}
 802037e:	bf00      	nop
 8020380:	08020505 	.word	0x08020505
 8020384:	0802052b 	.word	0x0802052b
 8020388:	08020563 	.word	0x08020563
 802038c:	08020587 	.word	0x08020587
 8020390:	20009d78 	.word	0x20009d78

08020394 <stdio_exit_handler>:
 8020394:	4a02      	ldr	r2, [pc, #8]	; (80203a0 <stdio_exit_handler+0xc>)
 8020396:	4903      	ldr	r1, [pc, #12]	; (80203a4 <stdio_exit_handler+0x10>)
 8020398:	4803      	ldr	r0, [pc, #12]	; (80203a8 <stdio_exit_handler+0x14>)
 802039a:	f000 b869 	b.w	8020470 <_fwalk_sglue>
 802039e:	bf00      	nop
 80203a0:	200000b0 	.word	0x200000b0
 80203a4:	08020f95 	.word	0x08020f95
 80203a8:	200000bc 	.word	0x200000bc

080203ac <cleanup_stdio>:
 80203ac:	6841      	ldr	r1, [r0, #4]
 80203ae:	4b0c      	ldr	r3, [pc, #48]	; (80203e0 <cleanup_stdio+0x34>)
 80203b0:	4299      	cmp	r1, r3
 80203b2:	b510      	push	{r4, lr}
 80203b4:	4604      	mov	r4, r0
 80203b6:	d001      	beq.n	80203bc <cleanup_stdio+0x10>
 80203b8:	f000 fdec 	bl	8020f94 <_fflush_r>
 80203bc:	68a1      	ldr	r1, [r4, #8]
 80203be:	4b09      	ldr	r3, [pc, #36]	; (80203e4 <cleanup_stdio+0x38>)
 80203c0:	4299      	cmp	r1, r3
 80203c2:	d002      	beq.n	80203ca <cleanup_stdio+0x1e>
 80203c4:	4620      	mov	r0, r4
 80203c6:	f000 fde5 	bl	8020f94 <_fflush_r>
 80203ca:	68e1      	ldr	r1, [r4, #12]
 80203cc:	4b06      	ldr	r3, [pc, #24]	; (80203e8 <cleanup_stdio+0x3c>)
 80203ce:	4299      	cmp	r1, r3
 80203d0:	d004      	beq.n	80203dc <cleanup_stdio+0x30>
 80203d2:	4620      	mov	r0, r4
 80203d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203d8:	f000 bddc 	b.w	8020f94 <_fflush_r>
 80203dc:	bd10      	pop	{r4, pc}
 80203de:	bf00      	nop
 80203e0:	20009d78 	.word	0x20009d78
 80203e4:	20009de0 	.word	0x20009de0
 80203e8:	20009e48 	.word	0x20009e48

080203ec <global_stdio_init.part.0>:
 80203ec:	b510      	push	{r4, lr}
 80203ee:	4b0b      	ldr	r3, [pc, #44]	; (802041c <global_stdio_init.part.0+0x30>)
 80203f0:	2104      	movs	r1, #4
 80203f2:	4c0b      	ldr	r4, [pc, #44]	; (8020420 <global_stdio_init.part.0+0x34>)
 80203f4:	4a0b      	ldr	r2, [pc, #44]	; (8020424 <global_stdio_init.part.0+0x38>)
 80203f6:	4620      	mov	r0, r4
 80203f8:	601a      	str	r2, [r3, #0]
 80203fa:	2200      	movs	r2, #0
 80203fc:	f7ff ff94 	bl	8020328 <std>
 8020400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8020404:	2201      	movs	r2, #1
 8020406:	2109      	movs	r1, #9
 8020408:	f7ff ff8e 	bl	8020328 <std>
 802040c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8020410:	2202      	movs	r2, #2
 8020412:	2112      	movs	r1, #18
 8020414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020418:	f7ff bf86 	b.w	8020328 <std>
 802041c:	20009eb0 	.word	0x20009eb0
 8020420:	20009d78 	.word	0x20009d78
 8020424:	08020395 	.word	0x08020395

08020428 <__sfp_lock_acquire>:
 8020428:	4801      	ldr	r0, [pc, #4]	; (8020430 <__sfp_lock_acquire+0x8>)
 802042a:	f000 b998 	b.w	802075e <__retarget_lock_acquire_recursive>
 802042e:	bf00      	nop
 8020430:	20009eb9 	.word	0x20009eb9

08020434 <__sfp_lock_release>:
 8020434:	4801      	ldr	r0, [pc, #4]	; (802043c <__sfp_lock_release+0x8>)
 8020436:	f000 b993 	b.w	8020760 <__retarget_lock_release_recursive>
 802043a:	bf00      	nop
 802043c:	20009eb9 	.word	0x20009eb9

08020440 <__sinit>:
 8020440:	b510      	push	{r4, lr}
 8020442:	4604      	mov	r4, r0
 8020444:	f7ff fff0 	bl	8020428 <__sfp_lock_acquire>
 8020448:	6a23      	ldr	r3, [r4, #32]
 802044a:	b11b      	cbz	r3, 8020454 <__sinit+0x14>
 802044c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020450:	f7ff bff0 	b.w	8020434 <__sfp_lock_release>
 8020454:	4b04      	ldr	r3, [pc, #16]	; (8020468 <__sinit+0x28>)
 8020456:	6223      	str	r3, [r4, #32]
 8020458:	4b04      	ldr	r3, [pc, #16]	; (802046c <__sinit+0x2c>)
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	2b00      	cmp	r3, #0
 802045e:	d1f5      	bne.n	802044c <__sinit+0xc>
 8020460:	f7ff ffc4 	bl	80203ec <global_stdio_init.part.0>
 8020464:	e7f2      	b.n	802044c <__sinit+0xc>
 8020466:	bf00      	nop
 8020468:	080203ad 	.word	0x080203ad
 802046c:	20009eb0 	.word	0x20009eb0

08020470 <_fwalk_sglue>:
 8020470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020474:	4607      	mov	r7, r0
 8020476:	4688      	mov	r8, r1
 8020478:	4614      	mov	r4, r2
 802047a:	2600      	movs	r6, #0
 802047c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020480:	f1b9 0901 	subs.w	r9, r9, #1
 8020484:	d505      	bpl.n	8020492 <_fwalk_sglue+0x22>
 8020486:	6824      	ldr	r4, [r4, #0]
 8020488:	2c00      	cmp	r4, #0
 802048a:	d1f7      	bne.n	802047c <_fwalk_sglue+0xc>
 802048c:	4630      	mov	r0, r6
 802048e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020492:	89ab      	ldrh	r3, [r5, #12]
 8020494:	2b01      	cmp	r3, #1
 8020496:	d907      	bls.n	80204a8 <_fwalk_sglue+0x38>
 8020498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802049c:	3301      	adds	r3, #1
 802049e:	d003      	beq.n	80204a8 <_fwalk_sglue+0x38>
 80204a0:	4629      	mov	r1, r5
 80204a2:	4638      	mov	r0, r7
 80204a4:	47c0      	blx	r8
 80204a6:	4306      	orrs	r6, r0
 80204a8:	3568      	adds	r5, #104	; 0x68
 80204aa:	e7e9      	b.n	8020480 <_fwalk_sglue+0x10>

080204ac <siscanf>:
 80204ac:	b40e      	push	{r1, r2, r3}
 80204ae:	b510      	push	{r4, lr}
 80204b0:	b09f      	sub	sp, #124	; 0x7c
 80204b2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80204b6:	ac21      	add	r4, sp, #132	; 0x84
 80204b8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80204bc:	9004      	str	r0, [sp, #16]
 80204be:	f854 2b04 	ldr.w	r2, [r4], #4
 80204c2:	9008      	str	r0, [sp, #32]
 80204c4:	9201      	str	r2, [sp, #4]
 80204c6:	f7df fec5 	bl	8000254 <strlen>
 80204ca:	4b0c      	ldr	r3, [pc, #48]	; (80204fc <siscanf+0x50>)
 80204cc:	a904      	add	r1, sp, #16
 80204ce:	9005      	str	r0, [sp, #20]
 80204d0:	930d      	str	r3, [sp, #52]	; 0x34
 80204d2:	2300      	movs	r3, #0
 80204d4:	9009      	str	r0, [sp, #36]	; 0x24
 80204d6:	9311      	str	r3, [sp, #68]	; 0x44
 80204d8:	9316      	str	r3, [sp, #88]	; 0x58
 80204da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80204de:	4808      	ldr	r0, [pc, #32]	; (8020500 <siscanf+0x54>)
 80204e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80204e4:	4623      	mov	r3, r4
 80204e6:	9a01      	ldr	r2, [sp, #4]
 80204e8:	6800      	ldr	r0, [r0, #0]
 80204ea:	9403      	str	r4, [sp, #12]
 80204ec:	f000 fa0a 	bl	8020904 <__ssvfiscanf_r>
 80204f0:	b01f      	add	sp, #124	; 0x7c
 80204f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204f6:	b003      	add	sp, #12
 80204f8:	4770      	bx	lr
 80204fa:	bf00      	nop
 80204fc:	08020527 	.word	0x08020527
 8020500:	20000108 	.word	0x20000108

08020504 <__sread>:
 8020504:	b510      	push	{r4, lr}
 8020506:	460c      	mov	r4, r1
 8020508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802050c:	f000 f8b4 	bl	8020678 <_read_r>
 8020510:	2800      	cmp	r0, #0
 8020512:	bfab      	itete	ge
 8020514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020516:	89a3      	ldrhlt	r3, [r4, #12]
 8020518:	181b      	addge	r3, r3, r0
 802051a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802051e:	bfac      	ite	ge
 8020520:	6563      	strge	r3, [r4, #84]	; 0x54
 8020522:	81a3      	strhlt	r3, [r4, #12]
 8020524:	bd10      	pop	{r4, pc}

08020526 <__seofread>:
 8020526:	2000      	movs	r0, #0
 8020528:	4770      	bx	lr

0802052a <__swrite>:
 802052a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802052e:	461f      	mov	r7, r3
 8020530:	898b      	ldrh	r3, [r1, #12]
 8020532:	4605      	mov	r5, r0
 8020534:	460c      	mov	r4, r1
 8020536:	05db      	lsls	r3, r3, #23
 8020538:	4616      	mov	r6, r2
 802053a:	d505      	bpl.n	8020548 <__swrite+0x1e>
 802053c:	2302      	movs	r3, #2
 802053e:	2200      	movs	r2, #0
 8020540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020544:	f000 f886 	bl	8020654 <_lseek_r>
 8020548:	89a3      	ldrh	r3, [r4, #12]
 802054a:	4632      	mov	r2, r6
 802054c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020550:	4628      	mov	r0, r5
 8020552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020556:	81a3      	strh	r3, [r4, #12]
 8020558:	463b      	mov	r3, r7
 802055a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802055e:	f000 b8c1 	b.w	80206e4 <_write_r>

08020562 <__sseek>:
 8020562:	b510      	push	{r4, lr}
 8020564:	460c      	mov	r4, r1
 8020566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802056a:	f000 f873 	bl	8020654 <_lseek_r>
 802056e:	1c43      	adds	r3, r0, #1
 8020570:	89a3      	ldrh	r3, [r4, #12]
 8020572:	bf15      	itete	ne
 8020574:	6560      	strne	r0, [r4, #84]	; 0x54
 8020576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802057a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802057e:	81a3      	strheq	r3, [r4, #12]
 8020580:	bf18      	it	ne
 8020582:	81a3      	strhne	r3, [r4, #12]
 8020584:	bd10      	pop	{r4, pc}

08020586 <__sclose>:
 8020586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802058a:	f000 b853 	b.w	8020634 <_close_r>

0802058e <memmove>:
 802058e:	4288      	cmp	r0, r1
 8020590:	b510      	push	{r4, lr}
 8020592:	eb01 0402 	add.w	r4, r1, r2
 8020596:	d902      	bls.n	802059e <memmove+0x10>
 8020598:	4284      	cmp	r4, r0
 802059a:	4623      	mov	r3, r4
 802059c:	d807      	bhi.n	80205ae <memmove+0x20>
 802059e:	1e43      	subs	r3, r0, #1
 80205a0:	42a1      	cmp	r1, r4
 80205a2:	d008      	beq.n	80205b6 <memmove+0x28>
 80205a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80205a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80205ac:	e7f8      	b.n	80205a0 <memmove+0x12>
 80205ae:	4402      	add	r2, r0
 80205b0:	4601      	mov	r1, r0
 80205b2:	428a      	cmp	r2, r1
 80205b4:	d100      	bne.n	80205b8 <memmove+0x2a>
 80205b6:	bd10      	pop	{r4, pc}
 80205b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80205bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80205c0:	e7f7      	b.n	80205b2 <memmove+0x24>

080205c2 <memset>:
 80205c2:	4402      	add	r2, r0
 80205c4:	4603      	mov	r3, r0
 80205c6:	4293      	cmp	r3, r2
 80205c8:	d100      	bne.n	80205cc <memset+0xa>
 80205ca:	4770      	bx	lr
 80205cc:	f803 1b01 	strb.w	r1, [r3], #1
 80205d0:	e7f9      	b.n	80205c6 <memset+0x4>

080205d2 <_raise_r>:
 80205d2:	291f      	cmp	r1, #31
 80205d4:	b538      	push	{r3, r4, r5, lr}
 80205d6:	4604      	mov	r4, r0
 80205d8:	460d      	mov	r5, r1
 80205da:	d904      	bls.n	80205e6 <_raise_r+0x14>
 80205dc:	2316      	movs	r3, #22
 80205de:	6003      	str	r3, [r0, #0]
 80205e0:	f04f 30ff 	mov.w	r0, #4294967295
 80205e4:	bd38      	pop	{r3, r4, r5, pc}
 80205e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80205e8:	b112      	cbz	r2, 80205f0 <_raise_r+0x1e>
 80205ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80205ee:	b94b      	cbnz	r3, 8020604 <_raise_r+0x32>
 80205f0:	4620      	mov	r0, r4
 80205f2:	f000 f865 	bl	80206c0 <_getpid_r>
 80205f6:	462a      	mov	r2, r5
 80205f8:	4601      	mov	r1, r0
 80205fa:	4620      	mov	r0, r4
 80205fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020600:	f000 b84c 	b.w	802069c <_kill_r>
 8020604:	2b01      	cmp	r3, #1
 8020606:	d00a      	beq.n	802061e <_raise_r+0x4c>
 8020608:	1c59      	adds	r1, r3, #1
 802060a:	d103      	bne.n	8020614 <_raise_r+0x42>
 802060c:	2316      	movs	r3, #22
 802060e:	6003      	str	r3, [r0, #0]
 8020610:	2001      	movs	r0, #1
 8020612:	e7e7      	b.n	80205e4 <_raise_r+0x12>
 8020614:	2400      	movs	r4, #0
 8020616:	4628      	mov	r0, r5
 8020618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802061c:	4798      	blx	r3
 802061e:	2000      	movs	r0, #0
 8020620:	e7e0      	b.n	80205e4 <_raise_r+0x12>
	...

08020624 <raise>:
 8020624:	4b02      	ldr	r3, [pc, #8]	; (8020630 <raise+0xc>)
 8020626:	4601      	mov	r1, r0
 8020628:	6818      	ldr	r0, [r3, #0]
 802062a:	f7ff bfd2 	b.w	80205d2 <_raise_r>
 802062e:	bf00      	nop
 8020630:	20000108 	.word	0x20000108

08020634 <_close_r>:
 8020634:	b538      	push	{r3, r4, r5, lr}
 8020636:	2300      	movs	r3, #0
 8020638:	4d05      	ldr	r5, [pc, #20]	; (8020650 <_close_r+0x1c>)
 802063a:	4604      	mov	r4, r0
 802063c:	4608      	mov	r0, r1
 802063e:	602b      	str	r3, [r5, #0]
 8020640:	f7ef fd99 	bl	8010176 <_close>
 8020644:	1c43      	adds	r3, r0, #1
 8020646:	d102      	bne.n	802064e <_close_r+0x1a>
 8020648:	682b      	ldr	r3, [r5, #0]
 802064a:	b103      	cbz	r3, 802064e <_close_r+0x1a>
 802064c:	6023      	str	r3, [r4, #0]
 802064e:	bd38      	pop	{r3, r4, r5, pc}
 8020650:	20009eb4 	.word	0x20009eb4

08020654 <_lseek_r>:
 8020654:	b538      	push	{r3, r4, r5, lr}
 8020656:	4604      	mov	r4, r0
 8020658:	4d06      	ldr	r5, [pc, #24]	; (8020674 <_lseek_r+0x20>)
 802065a:	4608      	mov	r0, r1
 802065c:	4611      	mov	r1, r2
 802065e:	2200      	movs	r2, #0
 8020660:	602a      	str	r2, [r5, #0]
 8020662:	461a      	mov	r2, r3
 8020664:	f7ef fdae 	bl	80101c4 <_lseek>
 8020668:	1c43      	adds	r3, r0, #1
 802066a:	d102      	bne.n	8020672 <_lseek_r+0x1e>
 802066c:	682b      	ldr	r3, [r5, #0]
 802066e:	b103      	cbz	r3, 8020672 <_lseek_r+0x1e>
 8020670:	6023      	str	r3, [r4, #0]
 8020672:	bd38      	pop	{r3, r4, r5, pc}
 8020674:	20009eb4 	.word	0x20009eb4

08020678 <_read_r>:
 8020678:	b538      	push	{r3, r4, r5, lr}
 802067a:	4604      	mov	r4, r0
 802067c:	4d06      	ldr	r5, [pc, #24]	; (8020698 <_read_r+0x20>)
 802067e:	4608      	mov	r0, r1
 8020680:	4611      	mov	r1, r2
 8020682:	2200      	movs	r2, #0
 8020684:	602a      	str	r2, [r5, #0]
 8020686:	461a      	mov	r2, r3
 8020688:	f7ef fd3c 	bl	8010104 <_read>
 802068c:	1c43      	adds	r3, r0, #1
 802068e:	d102      	bne.n	8020696 <_read_r+0x1e>
 8020690:	682b      	ldr	r3, [r5, #0]
 8020692:	b103      	cbz	r3, 8020696 <_read_r+0x1e>
 8020694:	6023      	str	r3, [r4, #0]
 8020696:	bd38      	pop	{r3, r4, r5, pc}
 8020698:	20009eb4 	.word	0x20009eb4

0802069c <_kill_r>:
 802069c:	b538      	push	{r3, r4, r5, lr}
 802069e:	2300      	movs	r3, #0
 80206a0:	4d06      	ldr	r5, [pc, #24]	; (80206bc <_kill_r+0x20>)
 80206a2:	4604      	mov	r4, r0
 80206a4:	4608      	mov	r0, r1
 80206a6:	4611      	mov	r1, r2
 80206a8:	602b      	str	r3, [r5, #0]
 80206aa:	f7ef fd11 	bl	80100d0 <_kill>
 80206ae:	1c43      	adds	r3, r0, #1
 80206b0:	d102      	bne.n	80206b8 <_kill_r+0x1c>
 80206b2:	682b      	ldr	r3, [r5, #0]
 80206b4:	b103      	cbz	r3, 80206b8 <_kill_r+0x1c>
 80206b6:	6023      	str	r3, [r4, #0]
 80206b8:	bd38      	pop	{r3, r4, r5, pc}
 80206ba:	bf00      	nop
 80206bc:	20009eb4 	.word	0x20009eb4

080206c0 <_getpid_r>:
 80206c0:	f7ef bcfe 	b.w	80100c0 <_getpid>

080206c4 <_sbrk_r>:
 80206c4:	b538      	push	{r3, r4, r5, lr}
 80206c6:	2300      	movs	r3, #0
 80206c8:	4d05      	ldr	r5, [pc, #20]	; (80206e0 <_sbrk_r+0x1c>)
 80206ca:	4604      	mov	r4, r0
 80206cc:	4608      	mov	r0, r1
 80206ce:	602b      	str	r3, [r5, #0]
 80206d0:	f7ef fd86 	bl	80101e0 <_sbrk>
 80206d4:	1c43      	adds	r3, r0, #1
 80206d6:	d102      	bne.n	80206de <_sbrk_r+0x1a>
 80206d8:	682b      	ldr	r3, [r5, #0]
 80206da:	b103      	cbz	r3, 80206de <_sbrk_r+0x1a>
 80206dc:	6023      	str	r3, [r4, #0]
 80206de:	bd38      	pop	{r3, r4, r5, pc}
 80206e0:	20009eb4 	.word	0x20009eb4

080206e4 <_write_r>:
 80206e4:	b538      	push	{r3, r4, r5, lr}
 80206e6:	4604      	mov	r4, r0
 80206e8:	4d06      	ldr	r5, [pc, #24]	; (8020704 <_write_r+0x20>)
 80206ea:	4608      	mov	r0, r1
 80206ec:	4611      	mov	r1, r2
 80206ee:	2200      	movs	r2, #0
 80206f0:	602a      	str	r2, [r5, #0]
 80206f2:	461a      	mov	r2, r3
 80206f4:	f7ef fd23 	bl	801013e <_write>
 80206f8:	1c43      	adds	r3, r0, #1
 80206fa:	d102      	bne.n	8020702 <_write_r+0x1e>
 80206fc:	682b      	ldr	r3, [r5, #0]
 80206fe:	b103      	cbz	r3, 8020702 <_write_r+0x1e>
 8020700:	6023      	str	r3, [r4, #0]
 8020702:	bd38      	pop	{r3, r4, r5, pc}
 8020704:	20009eb4 	.word	0x20009eb4

08020708 <__errno>:
 8020708:	4b01      	ldr	r3, [pc, #4]	; (8020710 <__errno+0x8>)
 802070a:	6818      	ldr	r0, [r3, #0]
 802070c:	4770      	bx	lr
 802070e:	bf00      	nop
 8020710:	20000108 	.word	0x20000108

08020714 <__libc_init_array>:
 8020714:	b570      	push	{r4, r5, r6, lr}
 8020716:	4d0d      	ldr	r5, [pc, #52]	; (802074c <__libc_init_array+0x38>)
 8020718:	2600      	movs	r6, #0
 802071a:	4c0d      	ldr	r4, [pc, #52]	; (8020750 <__libc_init_array+0x3c>)
 802071c:	1b64      	subs	r4, r4, r5
 802071e:	10a4      	asrs	r4, r4, #2
 8020720:	42a6      	cmp	r6, r4
 8020722:	d109      	bne.n	8020738 <__libc_init_array+0x24>
 8020724:	4d0b      	ldr	r5, [pc, #44]	; (8020754 <__libc_init_array+0x40>)
 8020726:	2600      	movs	r6, #0
 8020728:	4c0b      	ldr	r4, [pc, #44]	; (8020758 <__libc_init_array+0x44>)
 802072a:	f001 fa0b 	bl	8021b44 <_init>
 802072e:	1b64      	subs	r4, r4, r5
 8020730:	10a4      	asrs	r4, r4, #2
 8020732:	42a6      	cmp	r6, r4
 8020734:	d105      	bne.n	8020742 <__libc_init_array+0x2e>
 8020736:	bd70      	pop	{r4, r5, r6, pc}
 8020738:	f855 3b04 	ldr.w	r3, [r5], #4
 802073c:	3601      	adds	r6, #1
 802073e:	4798      	blx	r3
 8020740:	e7ee      	b.n	8020720 <__libc_init_array+0xc>
 8020742:	f855 3b04 	ldr.w	r3, [r5], #4
 8020746:	3601      	adds	r6, #1
 8020748:	4798      	blx	r3
 802074a:	e7f2      	b.n	8020732 <__libc_init_array+0x1e>
 802074c:	080226ac 	.word	0x080226ac
 8020750:	080226ac 	.word	0x080226ac
 8020754:	080226ac 	.word	0x080226ac
 8020758:	080226bc 	.word	0x080226bc

0802075c <__retarget_lock_init_recursive>:
 802075c:	4770      	bx	lr

0802075e <__retarget_lock_acquire_recursive>:
 802075e:	4770      	bx	lr

08020760 <__retarget_lock_release_recursive>:
 8020760:	4770      	bx	lr

08020762 <memcpy>:
 8020762:	440a      	add	r2, r1
 8020764:	1e43      	subs	r3, r0, #1
 8020766:	4291      	cmp	r1, r2
 8020768:	d100      	bne.n	802076c <memcpy+0xa>
 802076a:	4770      	bx	lr
 802076c:	b510      	push	{r4, lr}
 802076e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020772:	4291      	cmp	r1, r2
 8020774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020778:	d1f9      	bne.n	802076e <memcpy+0xc>
 802077a:	bd10      	pop	{r4, pc}

0802077c <__assert_func>:
 802077c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802077e:	4614      	mov	r4, r2
 8020780:	461a      	mov	r2, r3
 8020782:	4b09      	ldr	r3, [pc, #36]	; (80207a8 <__assert_func+0x2c>)
 8020784:	4605      	mov	r5, r0
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	68d8      	ldr	r0, [r3, #12]
 802078a:	b14c      	cbz	r4, 80207a0 <__assert_func+0x24>
 802078c:	4b07      	ldr	r3, [pc, #28]	; (80207ac <__assert_func+0x30>)
 802078e:	9100      	str	r1, [sp, #0]
 8020790:	4907      	ldr	r1, [pc, #28]	; (80207b0 <__assert_func+0x34>)
 8020792:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020796:	462b      	mov	r3, r5
 8020798:	f000 fc24 	bl	8020fe4 <fiprintf>
 802079c:	f7ff fcc3 	bl	8020126 <abort>
 80207a0:	4b04      	ldr	r3, [pc, #16]	; (80207b4 <__assert_func+0x38>)
 80207a2:	461c      	mov	r4, r3
 80207a4:	e7f3      	b.n	802078e <__assert_func+0x12>
 80207a6:	bf00      	nop
 80207a8:	20000108 	.word	0x20000108
 80207ac:	08022517 	.word	0x08022517
 80207b0:	08022524 	.word	0x08022524
 80207b4:	08022552 	.word	0x08022552

080207b8 <_free_r>:
 80207b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80207ba:	2900      	cmp	r1, #0
 80207bc:	d043      	beq.n	8020846 <_free_r+0x8e>
 80207be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80207c2:	1f0c      	subs	r4, r1, #4
 80207c4:	9001      	str	r0, [sp, #4]
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	bfb8      	it	lt
 80207ca:	18e4      	addlt	r4, r4, r3
 80207cc:	f7ff fd62 	bl	8020294 <__malloc_lock>
 80207d0:	4a1e      	ldr	r2, [pc, #120]	; (802084c <_free_r+0x94>)
 80207d2:	9801      	ldr	r0, [sp, #4]
 80207d4:	6813      	ldr	r3, [r2, #0]
 80207d6:	b933      	cbnz	r3, 80207e6 <_free_r+0x2e>
 80207d8:	6063      	str	r3, [r4, #4]
 80207da:	6014      	str	r4, [r2, #0]
 80207dc:	b003      	add	sp, #12
 80207de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80207e2:	f7ff bd5d 	b.w	80202a0 <__malloc_unlock>
 80207e6:	42a3      	cmp	r3, r4
 80207e8:	d908      	bls.n	80207fc <_free_r+0x44>
 80207ea:	6825      	ldr	r5, [r4, #0]
 80207ec:	1961      	adds	r1, r4, r5
 80207ee:	428b      	cmp	r3, r1
 80207f0:	bf01      	itttt	eq
 80207f2:	6819      	ldreq	r1, [r3, #0]
 80207f4:	685b      	ldreq	r3, [r3, #4]
 80207f6:	1949      	addeq	r1, r1, r5
 80207f8:	6021      	streq	r1, [r4, #0]
 80207fa:	e7ed      	b.n	80207d8 <_free_r+0x20>
 80207fc:	461a      	mov	r2, r3
 80207fe:	685b      	ldr	r3, [r3, #4]
 8020800:	b10b      	cbz	r3, 8020806 <_free_r+0x4e>
 8020802:	42a3      	cmp	r3, r4
 8020804:	d9fa      	bls.n	80207fc <_free_r+0x44>
 8020806:	6811      	ldr	r1, [r2, #0]
 8020808:	1855      	adds	r5, r2, r1
 802080a:	42a5      	cmp	r5, r4
 802080c:	d10b      	bne.n	8020826 <_free_r+0x6e>
 802080e:	6824      	ldr	r4, [r4, #0]
 8020810:	4421      	add	r1, r4
 8020812:	1854      	adds	r4, r2, r1
 8020814:	6011      	str	r1, [r2, #0]
 8020816:	42a3      	cmp	r3, r4
 8020818:	d1e0      	bne.n	80207dc <_free_r+0x24>
 802081a:	681c      	ldr	r4, [r3, #0]
 802081c:	685b      	ldr	r3, [r3, #4]
 802081e:	440c      	add	r4, r1
 8020820:	6053      	str	r3, [r2, #4]
 8020822:	6014      	str	r4, [r2, #0]
 8020824:	e7da      	b.n	80207dc <_free_r+0x24>
 8020826:	d902      	bls.n	802082e <_free_r+0x76>
 8020828:	230c      	movs	r3, #12
 802082a:	6003      	str	r3, [r0, #0]
 802082c:	e7d6      	b.n	80207dc <_free_r+0x24>
 802082e:	6825      	ldr	r5, [r4, #0]
 8020830:	1961      	adds	r1, r4, r5
 8020832:	428b      	cmp	r3, r1
 8020834:	bf02      	ittt	eq
 8020836:	6819      	ldreq	r1, [r3, #0]
 8020838:	685b      	ldreq	r3, [r3, #4]
 802083a:	1949      	addeq	r1, r1, r5
 802083c:	6063      	str	r3, [r4, #4]
 802083e:	bf08      	it	eq
 8020840:	6021      	streq	r1, [r4, #0]
 8020842:	6054      	str	r4, [r2, #4]
 8020844:	e7ca      	b.n	80207dc <_free_r+0x24>
 8020846:	b003      	add	sp, #12
 8020848:	bd30      	pop	{r4, r5, pc}
 802084a:	bf00      	nop
 802084c:	20009d70 	.word	0x20009d70

08020850 <_sungetc_r>:
 8020850:	b538      	push	{r3, r4, r5, lr}
 8020852:	1c4b      	adds	r3, r1, #1
 8020854:	4614      	mov	r4, r2
 8020856:	d103      	bne.n	8020860 <_sungetc_r+0x10>
 8020858:	f04f 35ff 	mov.w	r5, #4294967295
 802085c:	4628      	mov	r0, r5
 802085e:	bd38      	pop	{r3, r4, r5, pc}
 8020860:	8993      	ldrh	r3, [r2, #12]
 8020862:	b2cd      	uxtb	r5, r1
 8020864:	f023 0320 	bic.w	r3, r3, #32
 8020868:	8193      	strh	r3, [r2, #12]
 802086a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802086c:	6852      	ldr	r2, [r2, #4]
 802086e:	b18b      	cbz	r3, 8020894 <_sungetc_r+0x44>
 8020870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020872:	4293      	cmp	r3, r2
 8020874:	dd08      	ble.n	8020888 <_sungetc_r+0x38>
 8020876:	6823      	ldr	r3, [r4, #0]
 8020878:	1e5a      	subs	r2, r3, #1
 802087a:	6022      	str	r2, [r4, #0]
 802087c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020880:	6863      	ldr	r3, [r4, #4]
 8020882:	3301      	adds	r3, #1
 8020884:	6063      	str	r3, [r4, #4]
 8020886:	e7e9      	b.n	802085c <_sungetc_r+0xc>
 8020888:	4621      	mov	r1, r4
 802088a:	f000 fbf6 	bl	802107a <__submore>
 802088e:	2800      	cmp	r0, #0
 8020890:	d0f1      	beq.n	8020876 <_sungetc_r+0x26>
 8020892:	e7e1      	b.n	8020858 <_sungetc_r+0x8>
 8020894:	6921      	ldr	r1, [r4, #16]
 8020896:	6823      	ldr	r3, [r4, #0]
 8020898:	b151      	cbz	r1, 80208b0 <_sungetc_r+0x60>
 802089a:	4299      	cmp	r1, r3
 802089c:	d208      	bcs.n	80208b0 <_sungetc_r+0x60>
 802089e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80208a2:	42a9      	cmp	r1, r5
 80208a4:	d104      	bne.n	80208b0 <_sungetc_r+0x60>
 80208a6:	3b01      	subs	r3, #1
 80208a8:	3201      	adds	r2, #1
 80208aa:	6023      	str	r3, [r4, #0]
 80208ac:	6062      	str	r2, [r4, #4]
 80208ae:	e7d5      	b.n	802085c <_sungetc_r+0xc>
 80208b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80208b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80208b8:	6363      	str	r3, [r4, #52]	; 0x34
 80208ba:	2303      	movs	r3, #3
 80208bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80208be:	4623      	mov	r3, r4
 80208c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80208c4:	6023      	str	r3, [r4, #0]
 80208c6:	2301      	movs	r3, #1
 80208c8:	e7dc      	b.n	8020884 <_sungetc_r+0x34>

080208ca <__ssrefill_r>:
 80208ca:	b510      	push	{r4, lr}
 80208cc:	460c      	mov	r4, r1
 80208ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80208d0:	b169      	cbz	r1, 80208ee <__ssrefill_r+0x24>
 80208d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80208d6:	4299      	cmp	r1, r3
 80208d8:	d001      	beq.n	80208de <__ssrefill_r+0x14>
 80208da:	f7ff ff6d 	bl	80207b8 <_free_r>
 80208de:	2000      	movs	r0, #0
 80208e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80208e2:	6360      	str	r0, [r4, #52]	; 0x34
 80208e4:	6063      	str	r3, [r4, #4]
 80208e6:	b113      	cbz	r3, 80208ee <__ssrefill_r+0x24>
 80208e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80208ea:	6023      	str	r3, [r4, #0]
 80208ec:	bd10      	pop	{r4, pc}
 80208ee:	6923      	ldr	r3, [r4, #16]
 80208f0:	f04f 30ff 	mov.w	r0, #4294967295
 80208f4:	6023      	str	r3, [r4, #0]
 80208f6:	2300      	movs	r3, #0
 80208f8:	6063      	str	r3, [r4, #4]
 80208fa:	89a3      	ldrh	r3, [r4, #12]
 80208fc:	f043 0320 	orr.w	r3, r3, #32
 8020900:	81a3      	strh	r3, [r4, #12]
 8020902:	e7f3      	b.n	80208ec <__ssrefill_r+0x22>

08020904 <__ssvfiscanf_r>:
 8020904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020908:	460c      	mov	r4, r1
 802090a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802090e:	2100      	movs	r1, #0
 8020910:	4606      	mov	r6, r0
 8020912:	f10d 0804 	add.w	r8, sp, #4
 8020916:	4fa6      	ldr	r7, [pc, #664]	; (8020bb0 <__ssvfiscanf_r+0x2ac>)
 8020918:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8020bbc <__ssvfiscanf_r+0x2b8>
 802091c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020920:	9300      	str	r3, [sp, #0]
 8020922:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020926:	49a3      	ldr	r1, [pc, #652]	; (8020bb4 <__ssvfiscanf_r+0x2b0>)
 8020928:	91a0      	str	r1, [sp, #640]	; 0x280
 802092a:	49a3      	ldr	r1, [pc, #652]	; (8020bb8 <__ssvfiscanf_r+0x2b4>)
 802092c:	91a1      	str	r1, [sp, #644]	; 0x284
 802092e:	7813      	ldrb	r3, [r2, #0]
 8020930:	2b00      	cmp	r3, #0
 8020932:	f000 815a 	beq.w	8020bea <__ssvfiscanf_r+0x2e6>
 8020936:	5cf9      	ldrb	r1, [r7, r3]
 8020938:	1c55      	adds	r5, r2, #1
 802093a:	f011 0108 	ands.w	r1, r1, #8
 802093e:	d019      	beq.n	8020974 <__ssvfiscanf_r+0x70>
 8020940:	6863      	ldr	r3, [r4, #4]
 8020942:	2b00      	cmp	r3, #0
 8020944:	dd0f      	ble.n	8020966 <__ssvfiscanf_r+0x62>
 8020946:	6823      	ldr	r3, [r4, #0]
 8020948:	781a      	ldrb	r2, [r3, #0]
 802094a:	5cba      	ldrb	r2, [r7, r2]
 802094c:	0712      	lsls	r2, r2, #28
 802094e:	d401      	bmi.n	8020954 <__ssvfiscanf_r+0x50>
 8020950:	462a      	mov	r2, r5
 8020952:	e7ec      	b.n	802092e <__ssvfiscanf_r+0x2a>
 8020954:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020956:	3301      	adds	r3, #1
 8020958:	3201      	adds	r2, #1
 802095a:	6023      	str	r3, [r4, #0]
 802095c:	9245      	str	r2, [sp, #276]	; 0x114
 802095e:	6862      	ldr	r2, [r4, #4]
 8020960:	3a01      	subs	r2, #1
 8020962:	6062      	str	r2, [r4, #4]
 8020964:	e7ec      	b.n	8020940 <__ssvfiscanf_r+0x3c>
 8020966:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020968:	4621      	mov	r1, r4
 802096a:	4630      	mov	r0, r6
 802096c:	4798      	blx	r3
 802096e:	2800      	cmp	r0, #0
 8020970:	d0e9      	beq.n	8020946 <__ssvfiscanf_r+0x42>
 8020972:	e7ed      	b.n	8020950 <__ssvfiscanf_r+0x4c>
 8020974:	2b25      	cmp	r3, #37	; 0x25
 8020976:	d012      	beq.n	802099e <__ssvfiscanf_r+0x9a>
 8020978:	469a      	mov	sl, r3
 802097a:	6863      	ldr	r3, [r4, #4]
 802097c:	2b00      	cmp	r3, #0
 802097e:	f340 8092 	ble.w	8020aa6 <__ssvfiscanf_r+0x1a2>
 8020982:	6822      	ldr	r2, [r4, #0]
 8020984:	7813      	ldrb	r3, [r2, #0]
 8020986:	4553      	cmp	r3, sl
 8020988:	f040 812f 	bne.w	8020bea <__ssvfiscanf_r+0x2e6>
 802098c:	6863      	ldr	r3, [r4, #4]
 802098e:	3201      	adds	r2, #1
 8020990:	3b01      	subs	r3, #1
 8020992:	6022      	str	r2, [r4, #0]
 8020994:	6063      	str	r3, [r4, #4]
 8020996:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020998:	3301      	adds	r3, #1
 802099a:	9345      	str	r3, [sp, #276]	; 0x114
 802099c:	e7d8      	b.n	8020950 <__ssvfiscanf_r+0x4c>
 802099e:	9141      	str	r1, [sp, #260]	; 0x104
 80209a0:	9143      	str	r1, [sp, #268]	; 0x10c
 80209a2:	7853      	ldrb	r3, [r2, #1]
 80209a4:	2b2a      	cmp	r3, #42	; 0x2a
 80209a6:	bf04      	itt	eq
 80209a8:	2310      	moveq	r3, #16
 80209aa:	1c95      	addeq	r5, r2, #2
 80209ac:	f04f 020a 	mov.w	r2, #10
 80209b0:	bf08      	it	eq
 80209b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80209b4:	46aa      	mov	sl, r5
 80209b6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80209ba:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80209be:	2b09      	cmp	r3, #9
 80209c0:	d91c      	bls.n	80209fc <__ssvfiscanf_r+0xf8>
 80209c2:	2203      	movs	r2, #3
 80209c4:	487d      	ldr	r0, [pc, #500]	; (8020bbc <__ssvfiscanf_r+0x2b8>)
 80209c6:	f000 fb8f 	bl	80210e8 <memchr>
 80209ca:	b138      	cbz	r0, 80209dc <__ssvfiscanf_r+0xd8>
 80209cc:	eba0 0009 	sub.w	r0, r0, r9
 80209d0:	2301      	movs	r3, #1
 80209d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80209d4:	4655      	mov	r5, sl
 80209d6:	4083      	lsls	r3, r0
 80209d8:	4313      	orrs	r3, r2
 80209da:	9341      	str	r3, [sp, #260]	; 0x104
 80209dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80209e0:	2b78      	cmp	r3, #120	; 0x78
 80209e2:	d806      	bhi.n	80209f2 <__ssvfiscanf_r+0xee>
 80209e4:	2b57      	cmp	r3, #87	; 0x57
 80209e6:	d810      	bhi.n	8020a0a <__ssvfiscanf_r+0x106>
 80209e8:	2b25      	cmp	r3, #37	; 0x25
 80209ea:	d0c5      	beq.n	8020978 <__ssvfiscanf_r+0x74>
 80209ec:	d856      	bhi.n	8020a9c <__ssvfiscanf_r+0x198>
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	d064      	beq.n	8020abc <__ssvfiscanf_r+0x1b8>
 80209f2:	2303      	movs	r3, #3
 80209f4:	9347      	str	r3, [sp, #284]	; 0x11c
 80209f6:	230a      	movs	r3, #10
 80209f8:	9342      	str	r3, [sp, #264]	; 0x108
 80209fa:	e075      	b.n	8020ae8 <__ssvfiscanf_r+0x1e4>
 80209fc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80209fe:	4655      	mov	r5, sl
 8020a00:	fb02 1103 	mla	r1, r2, r3, r1
 8020a04:	3930      	subs	r1, #48	; 0x30
 8020a06:	9143      	str	r1, [sp, #268]	; 0x10c
 8020a08:	e7d4      	b.n	80209b4 <__ssvfiscanf_r+0xb0>
 8020a0a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020a0e:	2a20      	cmp	r2, #32
 8020a10:	d8ef      	bhi.n	80209f2 <__ssvfiscanf_r+0xee>
 8020a12:	a101      	add	r1, pc, #4	; (adr r1, 8020a18 <__ssvfiscanf_r+0x114>)
 8020a14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020a18:	08020acb 	.word	0x08020acb
 8020a1c:	080209f3 	.word	0x080209f3
 8020a20:	080209f3 	.word	0x080209f3
 8020a24:	08020b29 	.word	0x08020b29
 8020a28:	080209f3 	.word	0x080209f3
 8020a2c:	080209f3 	.word	0x080209f3
 8020a30:	080209f3 	.word	0x080209f3
 8020a34:	080209f3 	.word	0x080209f3
 8020a38:	080209f3 	.word	0x080209f3
 8020a3c:	080209f3 	.word	0x080209f3
 8020a40:	080209f3 	.word	0x080209f3
 8020a44:	08020b3f 	.word	0x08020b3f
 8020a48:	08020b25 	.word	0x08020b25
 8020a4c:	08020aa3 	.word	0x08020aa3
 8020a50:	08020aa3 	.word	0x08020aa3
 8020a54:	08020aa3 	.word	0x08020aa3
 8020a58:	080209f3 	.word	0x080209f3
 8020a5c:	08020ae1 	.word	0x08020ae1
 8020a60:	080209f3 	.word	0x080209f3
 8020a64:	080209f3 	.word	0x080209f3
 8020a68:	080209f3 	.word	0x080209f3
 8020a6c:	080209f3 	.word	0x080209f3
 8020a70:	08020b4f 	.word	0x08020b4f
 8020a74:	08020b1d 	.word	0x08020b1d
 8020a78:	08020ac3 	.word	0x08020ac3
 8020a7c:	080209f3 	.word	0x080209f3
 8020a80:	080209f3 	.word	0x080209f3
 8020a84:	08020b4b 	.word	0x08020b4b
 8020a88:	080209f3 	.word	0x080209f3
 8020a8c:	08020b25 	.word	0x08020b25
 8020a90:	080209f3 	.word	0x080209f3
 8020a94:	080209f3 	.word	0x080209f3
 8020a98:	08020acb 	.word	0x08020acb
 8020a9c:	3b45      	subs	r3, #69	; 0x45
 8020a9e:	2b02      	cmp	r3, #2
 8020aa0:	d8a7      	bhi.n	80209f2 <__ssvfiscanf_r+0xee>
 8020aa2:	2305      	movs	r3, #5
 8020aa4:	e01f      	b.n	8020ae6 <__ssvfiscanf_r+0x1e2>
 8020aa6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020aa8:	4621      	mov	r1, r4
 8020aaa:	4630      	mov	r0, r6
 8020aac:	4798      	blx	r3
 8020aae:	2800      	cmp	r0, #0
 8020ab0:	f43f af67 	beq.w	8020982 <__ssvfiscanf_r+0x7e>
 8020ab4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020ab6:	2800      	cmp	r0, #0
 8020ab8:	f040 808d 	bne.w	8020bd6 <__ssvfiscanf_r+0x2d2>
 8020abc:	f04f 30ff 	mov.w	r0, #4294967295
 8020ac0:	e08f      	b.n	8020be2 <__ssvfiscanf_r+0x2de>
 8020ac2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020ac4:	f042 0220 	orr.w	r2, r2, #32
 8020ac8:	9241      	str	r2, [sp, #260]	; 0x104
 8020aca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020ad0:	9241      	str	r2, [sp, #260]	; 0x104
 8020ad2:	2210      	movs	r2, #16
 8020ad4:	2b6f      	cmp	r3, #111	; 0x6f
 8020ad6:	9242      	str	r2, [sp, #264]	; 0x108
 8020ad8:	bf34      	ite	cc
 8020ada:	2303      	movcc	r3, #3
 8020adc:	2304      	movcs	r3, #4
 8020ade:	e002      	b.n	8020ae6 <__ssvfiscanf_r+0x1e2>
 8020ae0:	2300      	movs	r3, #0
 8020ae2:	9342      	str	r3, [sp, #264]	; 0x108
 8020ae4:	2303      	movs	r3, #3
 8020ae6:	9347      	str	r3, [sp, #284]	; 0x11c
 8020ae8:	6863      	ldr	r3, [r4, #4]
 8020aea:	2b00      	cmp	r3, #0
 8020aec:	dd3e      	ble.n	8020b6c <__ssvfiscanf_r+0x268>
 8020aee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020af0:	0659      	lsls	r1, r3, #25
 8020af2:	d404      	bmi.n	8020afe <__ssvfiscanf_r+0x1fa>
 8020af4:	6823      	ldr	r3, [r4, #0]
 8020af6:	781a      	ldrb	r2, [r3, #0]
 8020af8:	5cba      	ldrb	r2, [r7, r2]
 8020afa:	0712      	lsls	r2, r2, #28
 8020afc:	d43d      	bmi.n	8020b7a <__ssvfiscanf_r+0x276>
 8020afe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020b00:	2b02      	cmp	r3, #2
 8020b02:	dc4c      	bgt.n	8020b9e <__ssvfiscanf_r+0x29a>
 8020b04:	466b      	mov	r3, sp
 8020b06:	4622      	mov	r2, r4
 8020b08:	a941      	add	r1, sp, #260	; 0x104
 8020b0a:	4630      	mov	r0, r6
 8020b0c:	f000 f872 	bl	8020bf4 <_scanf_chars>
 8020b10:	2801      	cmp	r0, #1
 8020b12:	d06a      	beq.n	8020bea <__ssvfiscanf_r+0x2e6>
 8020b14:	2802      	cmp	r0, #2
 8020b16:	f47f af1b 	bne.w	8020950 <__ssvfiscanf_r+0x4c>
 8020b1a:	e7cb      	b.n	8020ab4 <__ssvfiscanf_r+0x1b0>
 8020b1c:	2308      	movs	r3, #8
 8020b1e:	9342      	str	r3, [sp, #264]	; 0x108
 8020b20:	2304      	movs	r3, #4
 8020b22:	e7e0      	b.n	8020ae6 <__ssvfiscanf_r+0x1e2>
 8020b24:	220a      	movs	r2, #10
 8020b26:	e7d5      	b.n	8020ad4 <__ssvfiscanf_r+0x1d0>
 8020b28:	4629      	mov	r1, r5
 8020b2a:	4640      	mov	r0, r8
 8020b2c:	f000 fa6c 	bl	8021008 <__sccl>
 8020b30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020b32:	4605      	mov	r5, r0
 8020b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b38:	9341      	str	r3, [sp, #260]	; 0x104
 8020b3a:	2301      	movs	r3, #1
 8020b3c:	e7d3      	b.n	8020ae6 <__ssvfiscanf_r+0x1e2>
 8020b3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b44:	9341      	str	r3, [sp, #260]	; 0x104
 8020b46:	2300      	movs	r3, #0
 8020b48:	e7cd      	b.n	8020ae6 <__ssvfiscanf_r+0x1e2>
 8020b4a:	2302      	movs	r3, #2
 8020b4c:	e7cb      	b.n	8020ae6 <__ssvfiscanf_r+0x1e2>
 8020b4e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020b50:	06c3      	lsls	r3, r0, #27
 8020b52:	f53f aefd 	bmi.w	8020950 <__ssvfiscanf_r+0x4c>
 8020b56:	9b00      	ldr	r3, [sp, #0]
 8020b58:	07c0      	lsls	r0, r0, #31
 8020b5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020b5c:	f103 0104 	add.w	r1, r3, #4
 8020b60:	9100      	str	r1, [sp, #0]
 8020b62:	681b      	ldr	r3, [r3, #0]
 8020b64:	bf4c      	ite	mi
 8020b66:	801a      	strhmi	r2, [r3, #0]
 8020b68:	601a      	strpl	r2, [r3, #0]
 8020b6a:	e6f1      	b.n	8020950 <__ssvfiscanf_r+0x4c>
 8020b6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020b6e:	4621      	mov	r1, r4
 8020b70:	4630      	mov	r0, r6
 8020b72:	4798      	blx	r3
 8020b74:	2800      	cmp	r0, #0
 8020b76:	d0ba      	beq.n	8020aee <__ssvfiscanf_r+0x1ea>
 8020b78:	e79c      	b.n	8020ab4 <__ssvfiscanf_r+0x1b0>
 8020b7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020b7c:	3201      	adds	r2, #1
 8020b7e:	9245      	str	r2, [sp, #276]	; 0x114
 8020b80:	6862      	ldr	r2, [r4, #4]
 8020b82:	3a01      	subs	r2, #1
 8020b84:	2a00      	cmp	r2, #0
 8020b86:	6062      	str	r2, [r4, #4]
 8020b88:	dd02      	ble.n	8020b90 <__ssvfiscanf_r+0x28c>
 8020b8a:	3301      	adds	r3, #1
 8020b8c:	6023      	str	r3, [r4, #0]
 8020b8e:	e7b1      	b.n	8020af4 <__ssvfiscanf_r+0x1f0>
 8020b90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020b92:	4621      	mov	r1, r4
 8020b94:	4630      	mov	r0, r6
 8020b96:	4798      	blx	r3
 8020b98:	2800      	cmp	r0, #0
 8020b9a:	d0ab      	beq.n	8020af4 <__ssvfiscanf_r+0x1f0>
 8020b9c:	e78a      	b.n	8020ab4 <__ssvfiscanf_r+0x1b0>
 8020b9e:	2b04      	cmp	r3, #4
 8020ba0:	dc0e      	bgt.n	8020bc0 <__ssvfiscanf_r+0x2bc>
 8020ba2:	466b      	mov	r3, sp
 8020ba4:	4622      	mov	r2, r4
 8020ba6:	a941      	add	r1, sp, #260	; 0x104
 8020ba8:	4630      	mov	r0, r6
 8020baa:	f000 f87d 	bl	8020ca8 <_scanf_i>
 8020bae:	e7af      	b.n	8020b10 <__ssvfiscanf_r+0x20c>
 8020bb0:	08022573 	.word	0x08022573
 8020bb4:	08020851 	.word	0x08020851
 8020bb8:	080208cb 	.word	0x080208cb
 8020bbc:	08022553 	.word	0x08022553
 8020bc0:	4b0b      	ldr	r3, [pc, #44]	; (8020bf0 <__ssvfiscanf_r+0x2ec>)
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	f43f aec4 	beq.w	8020950 <__ssvfiscanf_r+0x4c>
 8020bc8:	466b      	mov	r3, sp
 8020bca:	4622      	mov	r2, r4
 8020bcc:	a941      	add	r1, sp, #260	; 0x104
 8020bce:	4630      	mov	r0, r6
 8020bd0:	f3af 8000 	nop.w
 8020bd4:	e79c      	b.n	8020b10 <__ssvfiscanf_r+0x20c>
 8020bd6:	89a3      	ldrh	r3, [r4, #12]
 8020bd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020bdc:	bf18      	it	ne
 8020bde:	f04f 30ff 	movne.w	r0, #4294967295
 8020be2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8020be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bea:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020bec:	e7f9      	b.n	8020be2 <__ssvfiscanf_r+0x2de>
 8020bee:	bf00      	nop
 8020bf0:	00000000 	.word	0x00000000

08020bf4 <_scanf_chars>:
 8020bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020bf8:	4615      	mov	r5, r2
 8020bfa:	688a      	ldr	r2, [r1, #8]
 8020bfc:	4680      	mov	r8, r0
 8020bfe:	460c      	mov	r4, r1
 8020c00:	b932      	cbnz	r2, 8020c10 <_scanf_chars+0x1c>
 8020c02:	698a      	ldr	r2, [r1, #24]
 8020c04:	2a00      	cmp	r2, #0
 8020c06:	bf0c      	ite	eq
 8020c08:	2201      	moveq	r2, #1
 8020c0a:	f04f 32ff 	movne.w	r2, #4294967295
 8020c0e:	608a      	str	r2, [r1, #8]
 8020c10:	6822      	ldr	r2, [r4, #0]
 8020c12:	2700      	movs	r7, #0
 8020c14:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020ca4 <_scanf_chars+0xb0>
 8020c18:	06d1      	lsls	r1, r2, #27
 8020c1a:	bf5f      	itttt	pl
 8020c1c:	681a      	ldrpl	r2, [r3, #0]
 8020c1e:	1d11      	addpl	r1, r2, #4
 8020c20:	6019      	strpl	r1, [r3, #0]
 8020c22:	6816      	ldrpl	r6, [r2, #0]
 8020c24:	69a0      	ldr	r0, [r4, #24]
 8020c26:	b188      	cbz	r0, 8020c4c <_scanf_chars+0x58>
 8020c28:	2801      	cmp	r0, #1
 8020c2a:	d107      	bne.n	8020c3c <_scanf_chars+0x48>
 8020c2c:	682a      	ldr	r2, [r5, #0]
 8020c2e:	7811      	ldrb	r1, [r2, #0]
 8020c30:	6962      	ldr	r2, [r4, #20]
 8020c32:	5c52      	ldrb	r2, [r2, r1]
 8020c34:	b952      	cbnz	r2, 8020c4c <_scanf_chars+0x58>
 8020c36:	2f00      	cmp	r7, #0
 8020c38:	d031      	beq.n	8020c9e <_scanf_chars+0xaa>
 8020c3a:	e022      	b.n	8020c82 <_scanf_chars+0x8e>
 8020c3c:	2802      	cmp	r0, #2
 8020c3e:	d120      	bne.n	8020c82 <_scanf_chars+0x8e>
 8020c40:	682b      	ldr	r3, [r5, #0]
 8020c42:	781b      	ldrb	r3, [r3, #0]
 8020c44:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020c48:	071b      	lsls	r3, r3, #28
 8020c4a:	d41a      	bmi.n	8020c82 <_scanf_chars+0x8e>
 8020c4c:	6823      	ldr	r3, [r4, #0]
 8020c4e:	3701      	adds	r7, #1
 8020c50:	06da      	lsls	r2, r3, #27
 8020c52:	bf5e      	ittt	pl
 8020c54:	682b      	ldrpl	r3, [r5, #0]
 8020c56:	781b      	ldrbpl	r3, [r3, #0]
 8020c58:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020c5c:	682a      	ldr	r2, [r5, #0]
 8020c5e:	686b      	ldr	r3, [r5, #4]
 8020c60:	3201      	adds	r2, #1
 8020c62:	3b01      	subs	r3, #1
 8020c64:	602a      	str	r2, [r5, #0]
 8020c66:	68a2      	ldr	r2, [r4, #8]
 8020c68:	606b      	str	r3, [r5, #4]
 8020c6a:	3a01      	subs	r2, #1
 8020c6c:	60a2      	str	r2, [r4, #8]
 8020c6e:	b142      	cbz	r2, 8020c82 <_scanf_chars+0x8e>
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	dcd7      	bgt.n	8020c24 <_scanf_chars+0x30>
 8020c74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020c78:	4629      	mov	r1, r5
 8020c7a:	4640      	mov	r0, r8
 8020c7c:	4798      	blx	r3
 8020c7e:	2800      	cmp	r0, #0
 8020c80:	d0d0      	beq.n	8020c24 <_scanf_chars+0x30>
 8020c82:	6823      	ldr	r3, [r4, #0]
 8020c84:	f013 0310 	ands.w	r3, r3, #16
 8020c88:	d105      	bne.n	8020c96 <_scanf_chars+0xa2>
 8020c8a:	68e2      	ldr	r2, [r4, #12]
 8020c8c:	3201      	adds	r2, #1
 8020c8e:	60e2      	str	r2, [r4, #12]
 8020c90:	69a2      	ldr	r2, [r4, #24]
 8020c92:	b102      	cbz	r2, 8020c96 <_scanf_chars+0xa2>
 8020c94:	7033      	strb	r3, [r6, #0]
 8020c96:	6923      	ldr	r3, [r4, #16]
 8020c98:	2000      	movs	r0, #0
 8020c9a:	443b      	add	r3, r7
 8020c9c:	6123      	str	r3, [r4, #16]
 8020c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ca2:	bf00      	nop
 8020ca4:	08022573 	.word	0x08022573

08020ca8 <_scanf_i>:
 8020ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cac:	4698      	mov	r8, r3
 8020cae:	b087      	sub	sp, #28
 8020cb0:	4b72      	ldr	r3, [pc, #456]	; (8020e7c <_scanf_i+0x1d4>)
 8020cb2:	460c      	mov	r4, r1
 8020cb4:	4682      	mov	sl, r0
 8020cb6:	4616      	mov	r6, r2
 8020cb8:	4627      	mov	r7, r4
 8020cba:	f04f 0b00 	mov.w	fp, #0
 8020cbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020cc2:	ab03      	add	r3, sp, #12
 8020cc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020cc8:	4b6d      	ldr	r3, [pc, #436]	; (8020e80 <_scanf_i+0x1d8>)
 8020cca:	69a1      	ldr	r1, [r4, #24]
 8020ccc:	4a6d      	ldr	r2, [pc, #436]	; (8020e84 <_scanf_i+0x1dc>)
 8020cce:	2903      	cmp	r1, #3
 8020cd0:	bf18      	it	ne
 8020cd2:	461a      	movne	r2, r3
 8020cd4:	68a3      	ldr	r3, [r4, #8]
 8020cd6:	9201      	str	r2, [sp, #4]
 8020cd8:	1e5a      	subs	r2, r3, #1
 8020cda:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020cde:	bf89      	itett	hi
 8020ce0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020ce4:	f04f 0900 	movls.w	r9, #0
 8020ce8:	eb03 0905 	addhi.w	r9, r3, r5
 8020cec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020cf0:	bf88      	it	hi
 8020cf2:	60a3      	strhi	r3, [r4, #8]
 8020cf4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020cf8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020cfc:	463d      	mov	r5, r7
 8020cfe:	6023      	str	r3, [r4, #0]
 8020d00:	6831      	ldr	r1, [r6, #0]
 8020d02:	ab03      	add	r3, sp, #12
 8020d04:	2202      	movs	r2, #2
 8020d06:	7809      	ldrb	r1, [r1, #0]
 8020d08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020d0c:	f000 f9ec 	bl	80210e8 <memchr>
 8020d10:	b328      	cbz	r0, 8020d5e <_scanf_i+0xb6>
 8020d12:	f1bb 0f01 	cmp.w	fp, #1
 8020d16:	d159      	bne.n	8020dcc <_scanf_i+0x124>
 8020d18:	6862      	ldr	r2, [r4, #4]
 8020d1a:	b92a      	cbnz	r2, 8020d28 <_scanf_i+0x80>
 8020d1c:	6822      	ldr	r2, [r4, #0]
 8020d1e:	2308      	movs	r3, #8
 8020d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020d24:	6063      	str	r3, [r4, #4]
 8020d26:	6022      	str	r2, [r4, #0]
 8020d28:	6822      	ldr	r2, [r4, #0]
 8020d2a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020d2e:	6022      	str	r2, [r4, #0]
 8020d30:	68a2      	ldr	r2, [r4, #8]
 8020d32:	1e51      	subs	r1, r2, #1
 8020d34:	60a1      	str	r1, [r4, #8]
 8020d36:	b192      	cbz	r2, 8020d5e <_scanf_i+0xb6>
 8020d38:	6832      	ldr	r2, [r6, #0]
 8020d3a:	1c51      	adds	r1, r2, #1
 8020d3c:	6031      	str	r1, [r6, #0]
 8020d3e:	7812      	ldrb	r2, [r2, #0]
 8020d40:	f805 2b01 	strb.w	r2, [r5], #1
 8020d44:	6872      	ldr	r2, [r6, #4]
 8020d46:	3a01      	subs	r2, #1
 8020d48:	2a00      	cmp	r2, #0
 8020d4a:	6072      	str	r2, [r6, #4]
 8020d4c:	dc07      	bgt.n	8020d5e <_scanf_i+0xb6>
 8020d4e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020d52:	4631      	mov	r1, r6
 8020d54:	4650      	mov	r0, sl
 8020d56:	4790      	blx	r2
 8020d58:	2800      	cmp	r0, #0
 8020d5a:	f040 8085 	bne.w	8020e68 <_scanf_i+0x1c0>
 8020d5e:	f10b 0b01 	add.w	fp, fp, #1
 8020d62:	f1bb 0f03 	cmp.w	fp, #3
 8020d66:	d1cb      	bne.n	8020d00 <_scanf_i+0x58>
 8020d68:	6863      	ldr	r3, [r4, #4]
 8020d6a:	b90b      	cbnz	r3, 8020d70 <_scanf_i+0xc8>
 8020d6c:	230a      	movs	r3, #10
 8020d6e:	6063      	str	r3, [r4, #4]
 8020d70:	6863      	ldr	r3, [r4, #4]
 8020d72:	f04f 0b00 	mov.w	fp, #0
 8020d76:	4944      	ldr	r1, [pc, #272]	; (8020e88 <_scanf_i+0x1e0>)
 8020d78:	6960      	ldr	r0, [r4, #20]
 8020d7a:	1ac9      	subs	r1, r1, r3
 8020d7c:	f000 f944 	bl	8021008 <__sccl>
 8020d80:	68a3      	ldr	r3, [r4, #8]
 8020d82:	6822      	ldr	r2, [r4, #0]
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d03d      	beq.n	8020e04 <_scanf_i+0x15c>
 8020d88:	6831      	ldr	r1, [r6, #0]
 8020d8a:	6960      	ldr	r0, [r4, #20]
 8020d8c:	f891 c000 	ldrb.w	ip, [r1]
 8020d90:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020d94:	2800      	cmp	r0, #0
 8020d96:	d035      	beq.n	8020e04 <_scanf_i+0x15c>
 8020d98:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020d9c:	d124      	bne.n	8020de8 <_scanf_i+0x140>
 8020d9e:	0510      	lsls	r0, r2, #20
 8020da0:	d522      	bpl.n	8020de8 <_scanf_i+0x140>
 8020da2:	f10b 0b01 	add.w	fp, fp, #1
 8020da6:	f1b9 0f00 	cmp.w	r9, #0
 8020daa:	d003      	beq.n	8020db4 <_scanf_i+0x10c>
 8020dac:	3301      	adds	r3, #1
 8020dae:	f109 39ff 	add.w	r9, r9, #4294967295
 8020db2:	60a3      	str	r3, [r4, #8]
 8020db4:	6873      	ldr	r3, [r6, #4]
 8020db6:	3b01      	subs	r3, #1
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	6073      	str	r3, [r6, #4]
 8020dbc:	dd1b      	ble.n	8020df6 <_scanf_i+0x14e>
 8020dbe:	6833      	ldr	r3, [r6, #0]
 8020dc0:	3301      	adds	r3, #1
 8020dc2:	6033      	str	r3, [r6, #0]
 8020dc4:	68a3      	ldr	r3, [r4, #8]
 8020dc6:	3b01      	subs	r3, #1
 8020dc8:	60a3      	str	r3, [r4, #8]
 8020dca:	e7d9      	b.n	8020d80 <_scanf_i+0xd8>
 8020dcc:	f1bb 0f02 	cmp.w	fp, #2
 8020dd0:	d1ae      	bne.n	8020d30 <_scanf_i+0x88>
 8020dd2:	6822      	ldr	r2, [r4, #0]
 8020dd4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020dd8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020ddc:	d1bf      	bne.n	8020d5e <_scanf_i+0xb6>
 8020dde:	2310      	movs	r3, #16
 8020de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020de4:	6063      	str	r3, [r4, #4]
 8020de6:	e7a2      	b.n	8020d2e <_scanf_i+0x86>
 8020de8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020dec:	6022      	str	r2, [r4, #0]
 8020dee:	780b      	ldrb	r3, [r1, #0]
 8020df0:	f805 3b01 	strb.w	r3, [r5], #1
 8020df4:	e7de      	b.n	8020db4 <_scanf_i+0x10c>
 8020df6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020dfa:	4631      	mov	r1, r6
 8020dfc:	4650      	mov	r0, sl
 8020dfe:	4798      	blx	r3
 8020e00:	2800      	cmp	r0, #0
 8020e02:	d0df      	beq.n	8020dc4 <_scanf_i+0x11c>
 8020e04:	6823      	ldr	r3, [r4, #0]
 8020e06:	05d9      	lsls	r1, r3, #23
 8020e08:	d50d      	bpl.n	8020e26 <_scanf_i+0x17e>
 8020e0a:	42bd      	cmp	r5, r7
 8020e0c:	d909      	bls.n	8020e22 <_scanf_i+0x17a>
 8020e0e:	f105 39ff 	add.w	r9, r5, #4294967295
 8020e12:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020e16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020e1a:	4632      	mov	r2, r6
 8020e1c:	464d      	mov	r5, r9
 8020e1e:	4650      	mov	r0, sl
 8020e20:	4798      	blx	r3
 8020e22:	42bd      	cmp	r5, r7
 8020e24:	d028      	beq.n	8020e78 <_scanf_i+0x1d0>
 8020e26:	6822      	ldr	r2, [r4, #0]
 8020e28:	f012 0210 	ands.w	r2, r2, #16
 8020e2c:	d113      	bne.n	8020e56 <_scanf_i+0x1ae>
 8020e2e:	702a      	strb	r2, [r5, #0]
 8020e30:	4639      	mov	r1, r7
 8020e32:	6863      	ldr	r3, [r4, #4]
 8020e34:	4650      	mov	r0, sl
 8020e36:	9e01      	ldr	r6, [sp, #4]
 8020e38:	47b0      	blx	r6
 8020e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8020e3e:	6821      	ldr	r1, [r4, #0]
 8020e40:	1d1a      	adds	r2, r3, #4
 8020e42:	f011 0f20 	tst.w	r1, #32
 8020e46:	f8c8 2000 	str.w	r2, [r8]
 8020e4a:	681b      	ldr	r3, [r3, #0]
 8020e4c:	d00f      	beq.n	8020e6e <_scanf_i+0x1c6>
 8020e4e:	6018      	str	r0, [r3, #0]
 8020e50:	68e3      	ldr	r3, [r4, #12]
 8020e52:	3301      	adds	r3, #1
 8020e54:	60e3      	str	r3, [r4, #12]
 8020e56:	1bed      	subs	r5, r5, r7
 8020e58:	6923      	ldr	r3, [r4, #16]
 8020e5a:	2000      	movs	r0, #0
 8020e5c:	445d      	add	r5, fp
 8020e5e:	442b      	add	r3, r5
 8020e60:	6123      	str	r3, [r4, #16]
 8020e62:	b007      	add	sp, #28
 8020e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e68:	f04f 0b00 	mov.w	fp, #0
 8020e6c:	e7ca      	b.n	8020e04 <_scanf_i+0x15c>
 8020e6e:	07ca      	lsls	r2, r1, #31
 8020e70:	bf4c      	ite	mi
 8020e72:	8018      	strhmi	r0, [r3, #0]
 8020e74:	6018      	strpl	r0, [r3, #0]
 8020e76:	e7eb      	b.n	8020e50 <_scanf_i+0x1a8>
 8020e78:	2001      	movs	r0, #1
 8020e7a:	e7f2      	b.n	8020e62 <_scanf_i+0x1ba>
 8020e7c:	08021cf8 	.word	0x08021cf8
 8020e80:	08021351 	.word	0x08021351
 8020e84:	08021269 	.word	0x08021269
 8020e88:	08022567 	.word	0x08022567

08020e8c <__sflush_r>:
 8020e8c:	898a      	ldrh	r2, [r1, #12]
 8020e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e92:	4605      	mov	r5, r0
 8020e94:	0710      	lsls	r0, r2, #28
 8020e96:	460c      	mov	r4, r1
 8020e98:	d458      	bmi.n	8020f4c <__sflush_r+0xc0>
 8020e9a:	684b      	ldr	r3, [r1, #4]
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	dc05      	bgt.n	8020eac <__sflush_r+0x20>
 8020ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	dc02      	bgt.n	8020eac <__sflush_r+0x20>
 8020ea6:	2000      	movs	r0, #0
 8020ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020eae:	2e00      	cmp	r6, #0
 8020eb0:	d0f9      	beq.n	8020ea6 <__sflush_r+0x1a>
 8020eb2:	2300      	movs	r3, #0
 8020eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020eb8:	682f      	ldr	r7, [r5, #0]
 8020eba:	6a21      	ldr	r1, [r4, #32]
 8020ebc:	602b      	str	r3, [r5, #0]
 8020ebe:	d032      	beq.n	8020f26 <__sflush_r+0x9a>
 8020ec0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020ec2:	89a3      	ldrh	r3, [r4, #12]
 8020ec4:	075a      	lsls	r2, r3, #29
 8020ec6:	d505      	bpl.n	8020ed4 <__sflush_r+0x48>
 8020ec8:	6863      	ldr	r3, [r4, #4]
 8020eca:	1ac0      	subs	r0, r0, r3
 8020ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020ece:	b10b      	cbz	r3, 8020ed4 <__sflush_r+0x48>
 8020ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020ed2:	1ac0      	subs	r0, r0, r3
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	4602      	mov	r2, r0
 8020ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020eda:	4628      	mov	r0, r5
 8020edc:	6a21      	ldr	r1, [r4, #32]
 8020ede:	47b0      	blx	r6
 8020ee0:	1c43      	adds	r3, r0, #1
 8020ee2:	89a3      	ldrh	r3, [r4, #12]
 8020ee4:	d106      	bne.n	8020ef4 <__sflush_r+0x68>
 8020ee6:	6829      	ldr	r1, [r5, #0]
 8020ee8:	291d      	cmp	r1, #29
 8020eea:	d82b      	bhi.n	8020f44 <__sflush_r+0xb8>
 8020eec:	4a28      	ldr	r2, [pc, #160]	; (8020f90 <__sflush_r+0x104>)
 8020eee:	410a      	asrs	r2, r1
 8020ef0:	07d6      	lsls	r6, r2, #31
 8020ef2:	d427      	bmi.n	8020f44 <__sflush_r+0xb8>
 8020ef4:	2200      	movs	r2, #0
 8020ef6:	04d9      	lsls	r1, r3, #19
 8020ef8:	6062      	str	r2, [r4, #4]
 8020efa:	6922      	ldr	r2, [r4, #16]
 8020efc:	6022      	str	r2, [r4, #0]
 8020efe:	d504      	bpl.n	8020f0a <__sflush_r+0x7e>
 8020f00:	1c42      	adds	r2, r0, #1
 8020f02:	d101      	bne.n	8020f08 <__sflush_r+0x7c>
 8020f04:	682b      	ldr	r3, [r5, #0]
 8020f06:	b903      	cbnz	r3, 8020f0a <__sflush_r+0x7e>
 8020f08:	6560      	str	r0, [r4, #84]	; 0x54
 8020f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020f0c:	602f      	str	r7, [r5, #0]
 8020f0e:	2900      	cmp	r1, #0
 8020f10:	d0c9      	beq.n	8020ea6 <__sflush_r+0x1a>
 8020f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020f16:	4299      	cmp	r1, r3
 8020f18:	d002      	beq.n	8020f20 <__sflush_r+0x94>
 8020f1a:	4628      	mov	r0, r5
 8020f1c:	f7ff fc4c 	bl	80207b8 <_free_r>
 8020f20:	2000      	movs	r0, #0
 8020f22:	6360      	str	r0, [r4, #52]	; 0x34
 8020f24:	e7c0      	b.n	8020ea8 <__sflush_r+0x1c>
 8020f26:	2301      	movs	r3, #1
 8020f28:	4628      	mov	r0, r5
 8020f2a:	47b0      	blx	r6
 8020f2c:	1c41      	adds	r1, r0, #1
 8020f2e:	d1c8      	bne.n	8020ec2 <__sflush_r+0x36>
 8020f30:	682b      	ldr	r3, [r5, #0]
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	d0c5      	beq.n	8020ec2 <__sflush_r+0x36>
 8020f36:	2b1d      	cmp	r3, #29
 8020f38:	d001      	beq.n	8020f3e <__sflush_r+0xb2>
 8020f3a:	2b16      	cmp	r3, #22
 8020f3c:	d101      	bne.n	8020f42 <__sflush_r+0xb6>
 8020f3e:	602f      	str	r7, [r5, #0]
 8020f40:	e7b1      	b.n	8020ea6 <__sflush_r+0x1a>
 8020f42:	89a3      	ldrh	r3, [r4, #12]
 8020f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f48:	81a3      	strh	r3, [r4, #12]
 8020f4a:	e7ad      	b.n	8020ea8 <__sflush_r+0x1c>
 8020f4c:	690f      	ldr	r7, [r1, #16]
 8020f4e:	2f00      	cmp	r7, #0
 8020f50:	d0a9      	beq.n	8020ea6 <__sflush_r+0x1a>
 8020f52:	0793      	lsls	r3, r2, #30
 8020f54:	680e      	ldr	r6, [r1, #0]
 8020f56:	600f      	str	r7, [r1, #0]
 8020f58:	bf0c      	ite	eq
 8020f5a:	694b      	ldreq	r3, [r1, #20]
 8020f5c:	2300      	movne	r3, #0
 8020f5e:	eba6 0807 	sub.w	r8, r6, r7
 8020f62:	608b      	str	r3, [r1, #8]
 8020f64:	f1b8 0f00 	cmp.w	r8, #0
 8020f68:	dd9d      	ble.n	8020ea6 <__sflush_r+0x1a>
 8020f6a:	4643      	mov	r3, r8
 8020f6c:	463a      	mov	r2, r7
 8020f6e:	6a21      	ldr	r1, [r4, #32]
 8020f70:	4628      	mov	r0, r5
 8020f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020f74:	47b0      	blx	r6
 8020f76:	2800      	cmp	r0, #0
 8020f78:	dc06      	bgt.n	8020f88 <__sflush_r+0xfc>
 8020f7a:	89a3      	ldrh	r3, [r4, #12]
 8020f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8020f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f84:	81a3      	strh	r3, [r4, #12]
 8020f86:	e78f      	b.n	8020ea8 <__sflush_r+0x1c>
 8020f88:	4407      	add	r7, r0
 8020f8a:	eba8 0800 	sub.w	r8, r8, r0
 8020f8e:	e7e9      	b.n	8020f64 <__sflush_r+0xd8>
 8020f90:	dfbffffe 	.word	0xdfbffffe

08020f94 <_fflush_r>:
 8020f94:	b538      	push	{r3, r4, r5, lr}
 8020f96:	690b      	ldr	r3, [r1, #16]
 8020f98:	4605      	mov	r5, r0
 8020f9a:	460c      	mov	r4, r1
 8020f9c:	b913      	cbnz	r3, 8020fa4 <_fflush_r+0x10>
 8020f9e:	2500      	movs	r5, #0
 8020fa0:	4628      	mov	r0, r5
 8020fa2:	bd38      	pop	{r3, r4, r5, pc}
 8020fa4:	b118      	cbz	r0, 8020fae <_fflush_r+0x1a>
 8020fa6:	6a03      	ldr	r3, [r0, #32]
 8020fa8:	b90b      	cbnz	r3, 8020fae <_fflush_r+0x1a>
 8020faa:	f7ff fa49 	bl	8020440 <__sinit>
 8020fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	d0f3      	beq.n	8020f9e <_fflush_r+0xa>
 8020fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020fb8:	07d0      	lsls	r0, r2, #31
 8020fba:	d404      	bmi.n	8020fc6 <_fflush_r+0x32>
 8020fbc:	0599      	lsls	r1, r3, #22
 8020fbe:	d402      	bmi.n	8020fc6 <_fflush_r+0x32>
 8020fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020fc2:	f7ff fbcc 	bl	802075e <__retarget_lock_acquire_recursive>
 8020fc6:	4628      	mov	r0, r5
 8020fc8:	4621      	mov	r1, r4
 8020fca:	f7ff ff5f 	bl	8020e8c <__sflush_r>
 8020fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020fd0:	4605      	mov	r5, r0
 8020fd2:	07da      	lsls	r2, r3, #31
 8020fd4:	d4e4      	bmi.n	8020fa0 <_fflush_r+0xc>
 8020fd6:	89a3      	ldrh	r3, [r4, #12]
 8020fd8:	059b      	lsls	r3, r3, #22
 8020fda:	d4e1      	bmi.n	8020fa0 <_fflush_r+0xc>
 8020fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020fde:	f7ff fbbf 	bl	8020760 <__retarget_lock_release_recursive>
 8020fe2:	e7dd      	b.n	8020fa0 <_fflush_r+0xc>

08020fe4 <fiprintf>:
 8020fe4:	b40e      	push	{r1, r2, r3}
 8020fe6:	b503      	push	{r0, r1, lr}
 8020fe8:	ab03      	add	r3, sp, #12
 8020fea:	4601      	mov	r1, r0
 8020fec:	4805      	ldr	r0, [pc, #20]	; (8021004 <fiprintf+0x20>)
 8020fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ff2:	6800      	ldr	r0, [r0, #0]
 8020ff4:	9301      	str	r3, [sp, #4]
 8020ff6:	f000 f9d7 	bl	80213a8 <_vfiprintf_r>
 8020ffa:	b002      	add	sp, #8
 8020ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8021000:	b003      	add	sp, #12
 8021002:	4770      	bx	lr
 8021004:	20000108 	.word	0x20000108

08021008 <__sccl>:
 8021008:	b570      	push	{r4, r5, r6, lr}
 802100a:	780b      	ldrb	r3, [r1, #0]
 802100c:	4604      	mov	r4, r0
 802100e:	3801      	subs	r0, #1
 8021010:	2b5e      	cmp	r3, #94	; 0x5e
 8021012:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021016:	bf13      	iteet	ne
 8021018:	1c4a      	addne	r2, r1, #1
 802101a:	1c8a      	addeq	r2, r1, #2
 802101c:	784b      	ldrbeq	r3, [r1, #1]
 802101e:	2100      	movne	r1, #0
 8021020:	bf08      	it	eq
 8021022:	2101      	moveq	r1, #1
 8021024:	f800 1f01 	strb.w	r1, [r0, #1]!
 8021028:	42a8      	cmp	r0, r5
 802102a:	d1fb      	bne.n	8021024 <__sccl+0x1c>
 802102c:	b90b      	cbnz	r3, 8021032 <__sccl+0x2a>
 802102e:	1e50      	subs	r0, r2, #1
 8021030:	bd70      	pop	{r4, r5, r6, pc}
 8021032:	f081 0101 	eor.w	r1, r1, #1
 8021036:	4610      	mov	r0, r2
 8021038:	54e1      	strb	r1, [r4, r3]
 802103a:	4602      	mov	r2, r0
 802103c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8021040:	2d2d      	cmp	r5, #45	; 0x2d
 8021042:	d005      	beq.n	8021050 <__sccl+0x48>
 8021044:	2d5d      	cmp	r5, #93	; 0x5d
 8021046:	d016      	beq.n	8021076 <__sccl+0x6e>
 8021048:	2d00      	cmp	r5, #0
 802104a:	d0f1      	beq.n	8021030 <__sccl+0x28>
 802104c:	462b      	mov	r3, r5
 802104e:	e7f2      	b.n	8021036 <__sccl+0x2e>
 8021050:	7846      	ldrb	r6, [r0, #1]
 8021052:	2e5d      	cmp	r6, #93	; 0x5d
 8021054:	d0fa      	beq.n	802104c <__sccl+0x44>
 8021056:	42b3      	cmp	r3, r6
 8021058:	dcf8      	bgt.n	802104c <__sccl+0x44>
 802105a:	3002      	adds	r0, #2
 802105c:	461a      	mov	r2, r3
 802105e:	3201      	adds	r2, #1
 8021060:	4296      	cmp	r6, r2
 8021062:	54a1      	strb	r1, [r4, r2]
 8021064:	dcfb      	bgt.n	802105e <__sccl+0x56>
 8021066:	1af2      	subs	r2, r6, r3
 8021068:	1c5d      	adds	r5, r3, #1
 802106a:	3a01      	subs	r2, #1
 802106c:	42b3      	cmp	r3, r6
 802106e:	bfa8      	it	ge
 8021070:	2200      	movge	r2, #0
 8021072:	18ab      	adds	r3, r5, r2
 8021074:	e7e1      	b.n	802103a <__sccl+0x32>
 8021076:	4610      	mov	r0, r2
 8021078:	e7da      	b.n	8021030 <__sccl+0x28>

0802107a <__submore>:
 802107a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802107e:	460c      	mov	r4, r1
 8021080:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021086:	4299      	cmp	r1, r3
 8021088:	d11a      	bne.n	80210c0 <__submore+0x46>
 802108a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802108e:	f7ff f881 	bl	8020194 <_malloc_r>
 8021092:	b918      	cbnz	r0, 802109c <__submore+0x22>
 8021094:	f04f 30ff 	mov.w	r0, #4294967295
 8021098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80210a0:	6360      	str	r0, [r4, #52]	; 0x34
 80210a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80210a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80210a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80210ac:	7083      	strb	r3, [r0, #2]
 80210ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80210b2:	7043      	strb	r3, [r0, #1]
 80210b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80210b8:	7003      	strb	r3, [r0, #0]
 80210ba:	6020      	str	r0, [r4, #0]
 80210bc:	2000      	movs	r0, #0
 80210be:	e7eb      	b.n	8021098 <__submore+0x1e>
 80210c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80210c2:	0077      	lsls	r7, r6, #1
 80210c4:	463a      	mov	r2, r7
 80210c6:	f000 f81d 	bl	8021104 <_realloc_r>
 80210ca:	4605      	mov	r5, r0
 80210cc:	2800      	cmp	r0, #0
 80210ce:	d0e1      	beq.n	8021094 <__submore+0x1a>
 80210d0:	eb00 0806 	add.w	r8, r0, r6
 80210d4:	4601      	mov	r1, r0
 80210d6:	4632      	mov	r2, r6
 80210d8:	4640      	mov	r0, r8
 80210da:	f7ff fb42 	bl	8020762 <memcpy>
 80210de:	f8c4 8000 	str.w	r8, [r4]
 80210e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80210e6:	e7e9      	b.n	80210bc <__submore+0x42>

080210e8 <memchr>:
 80210e8:	b2c9      	uxtb	r1, r1
 80210ea:	4402      	add	r2, r0
 80210ec:	b510      	push	{r4, lr}
 80210ee:	4290      	cmp	r0, r2
 80210f0:	4603      	mov	r3, r0
 80210f2:	d101      	bne.n	80210f8 <memchr+0x10>
 80210f4:	2300      	movs	r3, #0
 80210f6:	e003      	b.n	8021100 <memchr+0x18>
 80210f8:	781c      	ldrb	r4, [r3, #0]
 80210fa:	3001      	adds	r0, #1
 80210fc:	428c      	cmp	r4, r1
 80210fe:	d1f6      	bne.n	80210ee <memchr+0x6>
 8021100:	4618      	mov	r0, r3
 8021102:	bd10      	pop	{r4, pc}

08021104 <_realloc_r>:
 8021104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021108:	4680      	mov	r8, r0
 802110a:	4614      	mov	r4, r2
 802110c:	460e      	mov	r6, r1
 802110e:	b921      	cbnz	r1, 802111a <_realloc_r+0x16>
 8021110:	4611      	mov	r1, r2
 8021112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021116:	f7ff b83d 	b.w	8020194 <_malloc_r>
 802111a:	b92a      	cbnz	r2, 8021128 <_realloc_r+0x24>
 802111c:	4625      	mov	r5, r4
 802111e:	f7ff fb4b 	bl	80207b8 <_free_r>
 8021122:	4628      	mov	r0, r5
 8021124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021128:	f000 fc80 	bl	8021a2c <_malloc_usable_size_r>
 802112c:	4284      	cmp	r4, r0
 802112e:	4607      	mov	r7, r0
 8021130:	d802      	bhi.n	8021138 <_realloc_r+0x34>
 8021132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021136:	d812      	bhi.n	802115e <_realloc_r+0x5a>
 8021138:	4621      	mov	r1, r4
 802113a:	4640      	mov	r0, r8
 802113c:	f7ff f82a 	bl	8020194 <_malloc_r>
 8021140:	4605      	mov	r5, r0
 8021142:	2800      	cmp	r0, #0
 8021144:	d0ed      	beq.n	8021122 <_realloc_r+0x1e>
 8021146:	42bc      	cmp	r4, r7
 8021148:	4622      	mov	r2, r4
 802114a:	4631      	mov	r1, r6
 802114c:	bf28      	it	cs
 802114e:	463a      	movcs	r2, r7
 8021150:	f7ff fb07 	bl	8020762 <memcpy>
 8021154:	4631      	mov	r1, r6
 8021156:	4640      	mov	r0, r8
 8021158:	f7ff fb2e 	bl	80207b8 <_free_r>
 802115c:	e7e1      	b.n	8021122 <_realloc_r+0x1e>
 802115e:	4635      	mov	r5, r6
 8021160:	e7df      	b.n	8021122 <_realloc_r+0x1e>
	...

08021164 <_strtol_l.constprop.0>:
 8021164:	2b01      	cmp	r3, #1
 8021166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802116a:	d001      	beq.n	8021170 <_strtol_l.constprop.0+0xc>
 802116c:	2b24      	cmp	r3, #36	; 0x24
 802116e:	d906      	bls.n	802117e <_strtol_l.constprop.0+0x1a>
 8021170:	f7ff faca 	bl	8020708 <__errno>
 8021174:	2316      	movs	r3, #22
 8021176:	6003      	str	r3, [r0, #0]
 8021178:	2000      	movs	r0, #0
 802117a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802117e:	460d      	mov	r5, r1
 8021180:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8021264 <_strtol_l.constprop.0+0x100>
 8021184:	462e      	mov	r6, r5
 8021186:	f815 4b01 	ldrb.w	r4, [r5], #1
 802118a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802118e:	f017 0708 	ands.w	r7, r7, #8
 8021192:	d1f7      	bne.n	8021184 <_strtol_l.constprop.0+0x20>
 8021194:	2c2d      	cmp	r4, #45	; 0x2d
 8021196:	d132      	bne.n	80211fe <_strtol_l.constprop.0+0x9a>
 8021198:	782c      	ldrb	r4, [r5, #0]
 802119a:	2701      	movs	r7, #1
 802119c:	1cb5      	adds	r5, r6, #2
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d05b      	beq.n	802125a <_strtol_l.constprop.0+0xf6>
 80211a2:	2b10      	cmp	r3, #16
 80211a4:	d109      	bne.n	80211ba <_strtol_l.constprop.0+0x56>
 80211a6:	2c30      	cmp	r4, #48	; 0x30
 80211a8:	d107      	bne.n	80211ba <_strtol_l.constprop.0+0x56>
 80211aa:	782c      	ldrb	r4, [r5, #0]
 80211ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80211b0:	2c58      	cmp	r4, #88	; 0x58
 80211b2:	d14d      	bne.n	8021250 <_strtol_l.constprop.0+0xec>
 80211b4:	786c      	ldrb	r4, [r5, #1]
 80211b6:	2310      	movs	r3, #16
 80211b8:	3502      	adds	r5, #2
 80211ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80211be:	f04f 0e00 	mov.w	lr, #0
 80211c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80211c6:	4676      	mov	r6, lr
 80211c8:	fbb8 f9f3 	udiv	r9, r8, r3
 80211cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80211d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80211d4:	f1bc 0f09 	cmp.w	ip, #9
 80211d8:	d816      	bhi.n	8021208 <_strtol_l.constprop.0+0xa4>
 80211da:	4664      	mov	r4, ip
 80211dc:	42a3      	cmp	r3, r4
 80211de:	dd24      	ble.n	802122a <_strtol_l.constprop.0+0xc6>
 80211e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80211e4:	d008      	beq.n	80211f8 <_strtol_l.constprop.0+0x94>
 80211e6:	45b1      	cmp	r9, r6
 80211e8:	d31c      	bcc.n	8021224 <_strtol_l.constprop.0+0xc0>
 80211ea:	d101      	bne.n	80211f0 <_strtol_l.constprop.0+0x8c>
 80211ec:	45a2      	cmp	sl, r4
 80211ee:	db19      	blt.n	8021224 <_strtol_l.constprop.0+0xc0>
 80211f0:	fb06 4603 	mla	r6, r6, r3, r4
 80211f4:	f04f 0e01 	mov.w	lr, #1
 80211f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80211fc:	e7e8      	b.n	80211d0 <_strtol_l.constprop.0+0x6c>
 80211fe:	2c2b      	cmp	r4, #43	; 0x2b
 8021200:	bf04      	itt	eq
 8021202:	782c      	ldrbeq	r4, [r5, #0]
 8021204:	1cb5      	addeq	r5, r6, #2
 8021206:	e7ca      	b.n	802119e <_strtol_l.constprop.0+0x3a>
 8021208:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802120c:	f1bc 0f19 	cmp.w	ip, #25
 8021210:	d801      	bhi.n	8021216 <_strtol_l.constprop.0+0xb2>
 8021212:	3c37      	subs	r4, #55	; 0x37
 8021214:	e7e2      	b.n	80211dc <_strtol_l.constprop.0+0x78>
 8021216:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802121a:	f1bc 0f19 	cmp.w	ip, #25
 802121e:	d804      	bhi.n	802122a <_strtol_l.constprop.0+0xc6>
 8021220:	3c57      	subs	r4, #87	; 0x57
 8021222:	e7db      	b.n	80211dc <_strtol_l.constprop.0+0x78>
 8021224:	f04f 3eff 	mov.w	lr, #4294967295
 8021228:	e7e6      	b.n	80211f8 <_strtol_l.constprop.0+0x94>
 802122a:	f1be 3fff 	cmp.w	lr, #4294967295
 802122e:	d105      	bne.n	802123c <_strtol_l.constprop.0+0xd8>
 8021230:	2322      	movs	r3, #34	; 0x22
 8021232:	4646      	mov	r6, r8
 8021234:	6003      	str	r3, [r0, #0]
 8021236:	b942      	cbnz	r2, 802124a <_strtol_l.constprop.0+0xe6>
 8021238:	4630      	mov	r0, r6
 802123a:	e79e      	b.n	802117a <_strtol_l.constprop.0+0x16>
 802123c:	b107      	cbz	r7, 8021240 <_strtol_l.constprop.0+0xdc>
 802123e:	4276      	negs	r6, r6
 8021240:	2a00      	cmp	r2, #0
 8021242:	d0f9      	beq.n	8021238 <_strtol_l.constprop.0+0xd4>
 8021244:	f1be 0f00 	cmp.w	lr, #0
 8021248:	d000      	beq.n	802124c <_strtol_l.constprop.0+0xe8>
 802124a:	1e69      	subs	r1, r5, #1
 802124c:	6011      	str	r1, [r2, #0]
 802124e:	e7f3      	b.n	8021238 <_strtol_l.constprop.0+0xd4>
 8021250:	2430      	movs	r4, #48	; 0x30
 8021252:	2b00      	cmp	r3, #0
 8021254:	d1b1      	bne.n	80211ba <_strtol_l.constprop.0+0x56>
 8021256:	2308      	movs	r3, #8
 8021258:	e7af      	b.n	80211ba <_strtol_l.constprop.0+0x56>
 802125a:	2c30      	cmp	r4, #48	; 0x30
 802125c:	d0a5      	beq.n	80211aa <_strtol_l.constprop.0+0x46>
 802125e:	230a      	movs	r3, #10
 8021260:	e7ab      	b.n	80211ba <_strtol_l.constprop.0+0x56>
 8021262:	bf00      	nop
 8021264:	08022573 	.word	0x08022573

08021268 <_strtol_r>:
 8021268:	f7ff bf7c 	b.w	8021164 <_strtol_l.constprop.0>

0802126c <_strtoul_l.constprop.0>:
 802126c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021270:	4686      	mov	lr, r0
 8021272:	460d      	mov	r5, r1
 8021274:	4f35      	ldr	r7, [pc, #212]	; (802134c <_strtoul_l.constprop.0+0xe0>)
 8021276:	4628      	mov	r0, r5
 8021278:	f815 4b01 	ldrb.w	r4, [r5], #1
 802127c:	5d3e      	ldrb	r6, [r7, r4]
 802127e:	f016 0608 	ands.w	r6, r6, #8
 8021282:	d1f8      	bne.n	8021276 <_strtoul_l.constprop.0+0xa>
 8021284:	2c2d      	cmp	r4, #45	; 0x2d
 8021286:	d130      	bne.n	80212ea <_strtoul_l.constprop.0+0x7e>
 8021288:	782c      	ldrb	r4, [r5, #0]
 802128a:	2601      	movs	r6, #1
 802128c:	1c85      	adds	r5, r0, #2
 802128e:	2b00      	cmp	r3, #0
 8021290:	d057      	beq.n	8021342 <_strtoul_l.constprop.0+0xd6>
 8021292:	2b10      	cmp	r3, #16
 8021294:	d109      	bne.n	80212aa <_strtoul_l.constprop.0+0x3e>
 8021296:	2c30      	cmp	r4, #48	; 0x30
 8021298:	d107      	bne.n	80212aa <_strtoul_l.constprop.0+0x3e>
 802129a:	7828      	ldrb	r0, [r5, #0]
 802129c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80212a0:	2858      	cmp	r0, #88	; 0x58
 80212a2:	d149      	bne.n	8021338 <_strtoul_l.constprop.0+0xcc>
 80212a4:	786c      	ldrb	r4, [r5, #1]
 80212a6:	2310      	movs	r3, #16
 80212a8:	3502      	adds	r5, #2
 80212aa:	f04f 38ff 	mov.w	r8, #4294967295
 80212ae:	2700      	movs	r7, #0
 80212b0:	fbb8 f8f3 	udiv	r8, r8, r3
 80212b4:	fb03 f908 	mul.w	r9, r3, r8
 80212b8:	4638      	mov	r0, r7
 80212ba:	ea6f 0909 	mvn.w	r9, r9
 80212be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80212c2:	f1bc 0f09 	cmp.w	ip, #9
 80212c6:	d815      	bhi.n	80212f4 <_strtoul_l.constprop.0+0x88>
 80212c8:	4664      	mov	r4, ip
 80212ca:	42a3      	cmp	r3, r4
 80212cc:	dd23      	ble.n	8021316 <_strtoul_l.constprop.0+0xaa>
 80212ce:	f1b7 3fff 	cmp.w	r7, #4294967295
 80212d2:	d007      	beq.n	80212e4 <_strtoul_l.constprop.0+0x78>
 80212d4:	4580      	cmp	r8, r0
 80212d6:	d31b      	bcc.n	8021310 <_strtoul_l.constprop.0+0xa4>
 80212d8:	d101      	bne.n	80212de <_strtoul_l.constprop.0+0x72>
 80212da:	45a1      	cmp	r9, r4
 80212dc:	db18      	blt.n	8021310 <_strtoul_l.constprop.0+0xa4>
 80212de:	fb00 4003 	mla	r0, r0, r3, r4
 80212e2:	2701      	movs	r7, #1
 80212e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80212e8:	e7e9      	b.n	80212be <_strtoul_l.constprop.0+0x52>
 80212ea:	2c2b      	cmp	r4, #43	; 0x2b
 80212ec:	bf04      	itt	eq
 80212ee:	782c      	ldrbeq	r4, [r5, #0]
 80212f0:	1c85      	addeq	r5, r0, #2
 80212f2:	e7cc      	b.n	802128e <_strtoul_l.constprop.0+0x22>
 80212f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80212f8:	f1bc 0f19 	cmp.w	ip, #25
 80212fc:	d801      	bhi.n	8021302 <_strtoul_l.constprop.0+0x96>
 80212fe:	3c37      	subs	r4, #55	; 0x37
 8021300:	e7e3      	b.n	80212ca <_strtoul_l.constprop.0+0x5e>
 8021302:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8021306:	f1bc 0f19 	cmp.w	ip, #25
 802130a:	d804      	bhi.n	8021316 <_strtoul_l.constprop.0+0xaa>
 802130c:	3c57      	subs	r4, #87	; 0x57
 802130e:	e7dc      	b.n	80212ca <_strtoul_l.constprop.0+0x5e>
 8021310:	f04f 37ff 	mov.w	r7, #4294967295
 8021314:	e7e6      	b.n	80212e4 <_strtoul_l.constprop.0+0x78>
 8021316:	1c7b      	adds	r3, r7, #1
 8021318:	d106      	bne.n	8021328 <_strtoul_l.constprop.0+0xbc>
 802131a:	2322      	movs	r3, #34	; 0x22
 802131c:	4638      	mov	r0, r7
 802131e:	f8ce 3000 	str.w	r3, [lr]
 8021322:	b932      	cbnz	r2, 8021332 <_strtoul_l.constprop.0+0xc6>
 8021324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021328:	b106      	cbz	r6, 802132c <_strtoul_l.constprop.0+0xc0>
 802132a:	4240      	negs	r0, r0
 802132c:	2a00      	cmp	r2, #0
 802132e:	d0f9      	beq.n	8021324 <_strtoul_l.constprop.0+0xb8>
 8021330:	b107      	cbz	r7, 8021334 <_strtoul_l.constprop.0+0xc8>
 8021332:	1e69      	subs	r1, r5, #1
 8021334:	6011      	str	r1, [r2, #0]
 8021336:	e7f5      	b.n	8021324 <_strtoul_l.constprop.0+0xb8>
 8021338:	2430      	movs	r4, #48	; 0x30
 802133a:	2b00      	cmp	r3, #0
 802133c:	d1b5      	bne.n	80212aa <_strtoul_l.constprop.0+0x3e>
 802133e:	2308      	movs	r3, #8
 8021340:	e7b3      	b.n	80212aa <_strtoul_l.constprop.0+0x3e>
 8021342:	2c30      	cmp	r4, #48	; 0x30
 8021344:	d0a9      	beq.n	802129a <_strtoul_l.constprop.0+0x2e>
 8021346:	230a      	movs	r3, #10
 8021348:	e7af      	b.n	80212aa <_strtoul_l.constprop.0+0x3e>
 802134a:	bf00      	nop
 802134c:	08022573 	.word	0x08022573

08021350 <_strtoul_r>:
 8021350:	f7ff bf8c 	b.w	802126c <_strtoul_l.constprop.0>

08021354 <__sfputc_r>:
 8021354:	6893      	ldr	r3, [r2, #8]
 8021356:	3b01      	subs	r3, #1
 8021358:	2b00      	cmp	r3, #0
 802135a:	6093      	str	r3, [r2, #8]
 802135c:	b410      	push	{r4}
 802135e:	da08      	bge.n	8021372 <__sfputc_r+0x1e>
 8021360:	6994      	ldr	r4, [r2, #24]
 8021362:	42a3      	cmp	r3, r4
 8021364:	db01      	blt.n	802136a <__sfputc_r+0x16>
 8021366:	290a      	cmp	r1, #10
 8021368:	d103      	bne.n	8021372 <__sfputc_r+0x1e>
 802136a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802136e:	f000 bac7 	b.w	8021900 <__swbuf_r>
 8021372:	6813      	ldr	r3, [r2, #0]
 8021374:	1c58      	adds	r0, r3, #1
 8021376:	6010      	str	r0, [r2, #0]
 8021378:	4608      	mov	r0, r1
 802137a:	7019      	strb	r1, [r3, #0]
 802137c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021380:	4770      	bx	lr

08021382 <__sfputs_r>:
 8021382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021384:	4606      	mov	r6, r0
 8021386:	460f      	mov	r7, r1
 8021388:	4614      	mov	r4, r2
 802138a:	18d5      	adds	r5, r2, r3
 802138c:	42ac      	cmp	r4, r5
 802138e:	d101      	bne.n	8021394 <__sfputs_r+0x12>
 8021390:	2000      	movs	r0, #0
 8021392:	e007      	b.n	80213a4 <__sfputs_r+0x22>
 8021394:	463a      	mov	r2, r7
 8021396:	f814 1b01 	ldrb.w	r1, [r4], #1
 802139a:	4630      	mov	r0, r6
 802139c:	f7ff ffda 	bl	8021354 <__sfputc_r>
 80213a0:	1c43      	adds	r3, r0, #1
 80213a2:	d1f3      	bne.n	802138c <__sfputs_r+0xa>
 80213a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080213a8 <_vfiprintf_r>:
 80213a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213ac:	460d      	mov	r5, r1
 80213ae:	b09d      	sub	sp, #116	; 0x74
 80213b0:	4614      	mov	r4, r2
 80213b2:	4698      	mov	r8, r3
 80213b4:	4606      	mov	r6, r0
 80213b6:	b118      	cbz	r0, 80213c0 <_vfiprintf_r+0x18>
 80213b8:	6a03      	ldr	r3, [r0, #32]
 80213ba:	b90b      	cbnz	r3, 80213c0 <_vfiprintf_r+0x18>
 80213bc:	f7ff f840 	bl	8020440 <__sinit>
 80213c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80213c2:	07d9      	lsls	r1, r3, #31
 80213c4:	d405      	bmi.n	80213d2 <_vfiprintf_r+0x2a>
 80213c6:	89ab      	ldrh	r3, [r5, #12]
 80213c8:	059a      	lsls	r2, r3, #22
 80213ca:	d402      	bmi.n	80213d2 <_vfiprintf_r+0x2a>
 80213cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80213ce:	f7ff f9c6 	bl	802075e <__retarget_lock_acquire_recursive>
 80213d2:	89ab      	ldrh	r3, [r5, #12]
 80213d4:	071b      	lsls	r3, r3, #28
 80213d6:	d501      	bpl.n	80213dc <_vfiprintf_r+0x34>
 80213d8:	692b      	ldr	r3, [r5, #16]
 80213da:	b99b      	cbnz	r3, 8021404 <_vfiprintf_r+0x5c>
 80213dc:	4629      	mov	r1, r5
 80213de:	4630      	mov	r0, r6
 80213e0:	f000 facc 	bl	802197c <__swsetup_r>
 80213e4:	b170      	cbz	r0, 8021404 <_vfiprintf_r+0x5c>
 80213e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80213e8:	07dc      	lsls	r4, r3, #31
 80213ea:	d504      	bpl.n	80213f6 <_vfiprintf_r+0x4e>
 80213ec:	f04f 30ff 	mov.w	r0, #4294967295
 80213f0:	b01d      	add	sp, #116	; 0x74
 80213f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213f6:	89ab      	ldrh	r3, [r5, #12]
 80213f8:	0598      	lsls	r0, r3, #22
 80213fa:	d4f7      	bmi.n	80213ec <_vfiprintf_r+0x44>
 80213fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80213fe:	f7ff f9af 	bl	8020760 <__retarget_lock_release_recursive>
 8021402:	e7f3      	b.n	80213ec <_vfiprintf_r+0x44>
 8021404:	2300      	movs	r3, #0
 8021406:	f8cd 800c 	str.w	r8, [sp, #12]
 802140a:	f04f 0901 	mov.w	r9, #1
 802140e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80215c8 <_vfiprintf_r+0x220>
 8021412:	9309      	str	r3, [sp, #36]	; 0x24
 8021414:	2320      	movs	r3, #32
 8021416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802141a:	2330      	movs	r3, #48	; 0x30
 802141c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021420:	4623      	mov	r3, r4
 8021422:	469a      	mov	sl, r3
 8021424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021428:	b10a      	cbz	r2, 802142e <_vfiprintf_r+0x86>
 802142a:	2a25      	cmp	r2, #37	; 0x25
 802142c:	d1f9      	bne.n	8021422 <_vfiprintf_r+0x7a>
 802142e:	ebba 0b04 	subs.w	fp, sl, r4
 8021432:	d00b      	beq.n	802144c <_vfiprintf_r+0xa4>
 8021434:	465b      	mov	r3, fp
 8021436:	4622      	mov	r2, r4
 8021438:	4629      	mov	r1, r5
 802143a:	4630      	mov	r0, r6
 802143c:	f7ff ffa1 	bl	8021382 <__sfputs_r>
 8021440:	3001      	adds	r0, #1
 8021442:	f000 80a9 	beq.w	8021598 <_vfiprintf_r+0x1f0>
 8021446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021448:	445a      	add	r2, fp
 802144a:	9209      	str	r2, [sp, #36]	; 0x24
 802144c:	f89a 3000 	ldrb.w	r3, [sl]
 8021450:	2b00      	cmp	r3, #0
 8021452:	f000 80a1 	beq.w	8021598 <_vfiprintf_r+0x1f0>
 8021456:	2300      	movs	r3, #0
 8021458:	f04f 32ff 	mov.w	r2, #4294967295
 802145c:	f10a 0a01 	add.w	sl, sl, #1
 8021460:	9304      	str	r3, [sp, #16]
 8021462:	9307      	str	r3, [sp, #28]
 8021464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021468:	931a      	str	r3, [sp, #104]	; 0x68
 802146a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802146e:	4654      	mov	r4, sl
 8021470:	2205      	movs	r2, #5
 8021472:	4855      	ldr	r0, [pc, #340]	; (80215c8 <_vfiprintf_r+0x220>)
 8021474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021478:	f7ff fe36 	bl	80210e8 <memchr>
 802147c:	9a04      	ldr	r2, [sp, #16]
 802147e:	b9d8      	cbnz	r0, 80214b8 <_vfiprintf_r+0x110>
 8021480:	06d1      	lsls	r1, r2, #27
 8021482:	bf44      	itt	mi
 8021484:	2320      	movmi	r3, #32
 8021486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802148a:	0713      	lsls	r3, r2, #28
 802148c:	bf44      	itt	mi
 802148e:	232b      	movmi	r3, #43	; 0x2b
 8021490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021494:	f89a 3000 	ldrb.w	r3, [sl]
 8021498:	2b2a      	cmp	r3, #42	; 0x2a
 802149a:	d015      	beq.n	80214c8 <_vfiprintf_r+0x120>
 802149c:	9a07      	ldr	r2, [sp, #28]
 802149e:	4654      	mov	r4, sl
 80214a0:	2000      	movs	r0, #0
 80214a2:	f04f 0c0a 	mov.w	ip, #10
 80214a6:	4621      	mov	r1, r4
 80214a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80214ac:	3b30      	subs	r3, #48	; 0x30
 80214ae:	2b09      	cmp	r3, #9
 80214b0:	d94d      	bls.n	802154e <_vfiprintf_r+0x1a6>
 80214b2:	b1b0      	cbz	r0, 80214e2 <_vfiprintf_r+0x13a>
 80214b4:	9207      	str	r2, [sp, #28]
 80214b6:	e014      	b.n	80214e2 <_vfiprintf_r+0x13a>
 80214b8:	eba0 0308 	sub.w	r3, r0, r8
 80214bc:	46a2      	mov	sl, r4
 80214be:	fa09 f303 	lsl.w	r3, r9, r3
 80214c2:	4313      	orrs	r3, r2
 80214c4:	9304      	str	r3, [sp, #16]
 80214c6:	e7d2      	b.n	802146e <_vfiprintf_r+0xc6>
 80214c8:	9b03      	ldr	r3, [sp, #12]
 80214ca:	1d19      	adds	r1, r3, #4
 80214cc:	681b      	ldr	r3, [r3, #0]
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	9103      	str	r1, [sp, #12]
 80214d2:	bfbb      	ittet	lt
 80214d4:	425b      	neglt	r3, r3
 80214d6:	f042 0202 	orrlt.w	r2, r2, #2
 80214da:	9307      	strge	r3, [sp, #28]
 80214dc:	9307      	strlt	r3, [sp, #28]
 80214de:	bfb8      	it	lt
 80214e0:	9204      	strlt	r2, [sp, #16]
 80214e2:	7823      	ldrb	r3, [r4, #0]
 80214e4:	2b2e      	cmp	r3, #46	; 0x2e
 80214e6:	d10c      	bne.n	8021502 <_vfiprintf_r+0x15a>
 80214e8:	7863      	ldrb	r3, [r4, #1]
 80214ea:	2b2a      	cmp	r3, #42	; 0x2a
 80214ec:	d134      	bne.n	8021558 <_vfiprintf_r+0x1b0>
 80214ee:	9b03      	ldr	r3, [sp, #12]
 80214f0:	3402      	adds	r4, #2
 80214f2:	1d1a      	adds	r2, r3, #4
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	9203      	str	r2, [sp, #12]
 80214fa:	bfb8      	it	lt
 80214fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8021500:	9305      	str	r3, [sp, #20]
 8021502:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80215d8 <_vfiprintf_r+0x230>
 8021506:	2203      	movs	r2, #3
 8021508:	7821      	ldrb	r1, [r4, #0]
 802150a:	4650      	mov	r0, sl
 802150c:	f7ff fdec 	bl	80210e8 <memchr>
 8021510:	b138      	cbz	r0, 8021522 <_vfiprintf_r+0x17a>
 8021512:	eba0 000a 	sub.w	r0, r0, sl
 8021516:	2240      	movs	r2, #64	; 0x40
 8021518:	9b04      	ldr	r3, [sp, #16]
 802151a:	3401      	adds	r4, #1
 802151c:	4082      	lsls	r2, r0
 802151e:	4313      	orrs	r3, r2
 8021520:	9304      	str	r3, [sp, #16]
 8021522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021526:	2206      	movs	r2, #6
 8021528:	4828      	ldr	r0, [pc, #160]	; (80215cc <_vfiprintf_r+0x224>)
 802152a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802152e:	f7ff fddb 	bl	80210e8 <memchr>
 8021532:	2800      	cmp	r0, #0
 8021534:	d03f      	beq.n	80215b6 <_vfiprintf_r+0x20e>
 8021536:	4b26      	ldr	r3, [pc, #152]	; (80215d0 <_vfiprintf_r+0x228>)
 8021538:	bb1b      	cbnz	r3, 8021582 <_vfiprintf_r+0x1da>
 802153a:	9b03      	ldr	r3, [sp, #12]
 802153c:	3307      	adds	r3, #7
 802153e:	f023 0307 	bic.w	r3, r3, #7
 8021542:	3308      	adds	r3, #8
 8021544:	9303      	str	r3, [sp, #12]
 8021546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021548:	443b      	add	r3, r7
 802154a:	9309      	str	r3, [sp, #36]	; 0x24
 802154c:	e768      	b.n	8021420 <_vfiprintf_r+0x78>
 802154e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021552:	460c      	mov	r4, r1
 8021554:	2001      	movs	r0, #1
 8021556:	e7a6      	b.n	80214a6 <_vfiprintf_r+0xfe>
 8021558:	2300      	movs	r3, #0
 802155a:	3401      	adds	r4, #1
 802155c:	f04f 0c0a 	mov.w	ip, #10
 8021560:	4619      	mov	r1, r3
 8021562:	9305      	str	r3, [sp, #20]
 8021564:	4620      	mov	r0, r4
 8021566:	f810 2b01 	ldrb.w	r2, [r0], #1
 802156a:	3a30      	subs	r2, #48	; 0x30
 802156c:	2a09      	cmp	r2, #9
 802156e:	d903      	bls.n	8021578 <_vfiprintf_r+0x1d0>
 8021570:	2b00      	cmp	r3, #0
 8021572:	d0c6      	beq.n	8021502 <_vfiprintf_r+0x15a>
 8021574:	9105      	str	r1, [sp, #20]
 8021576:	e7c4      	b.n	8021502 <_vfiprintf_r+0x15a>
 8021578:	fb0c 2101 	mla	r1, ip, r1, r2
 802157c:	4604      	mov	r4, r0
 802157e:	2301      	movs	r3, #1
 8021580:	e7f0      	b.n	8021564 <_vfiprintf_r+0x1bc>
 8021582:	ab03      	add	r3, sp, #12
 8021584:	462a      	mov	r2, r5
 8021586:	a904      	add	r1, sp, #16
 8021588:	4630      	mov	r0, r6
 802158a:	9300      	str	r3, [sp, #0]
 802158c:	4b11      	ldr	r3, [pc, #68]	; (80215d4 <_vfiprintf_r+0x22c>)
 802158e:	f3af 8000 	nop.w
 8021592:	4607      	mov	r7, r0
 8021594:	1c78      	adds	r0, r7, #1
 8021596:	d1d6      	bne.n	8021546 <_vfiprintf_r+0x19e>
 8021598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802159a:	07d9      	lsls	r1, r3, #31
 802159c:	d405      	bmi.n	80215aa <_vfiprintf_r+0x202>
 802159e:	89ab      	ldrh	r3, [r5, #12]
 80215a0:	059a      	lsls	r2, r3, #22
 80215a2:	d402      	bmi.n	80215aa <_vfiprintf_r+0x202>
 80215a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80215a6:	f7ff f8db 	bl	8020760 <__retarget_lock_release_recursive>
 80215aa:	89ab      	ldrh	r3, [r5, #12]
 80215ac:	065b      	lsls	r3, r3, #25
 80215ae:	f53f af1d 	bmi.w	80213ec <_vfiprintf_r+0x44>
 80215b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80215b4:	e71c      	b.n	80213f0 <_vfiprintf_r+0x48>
 80215b6:	ab03      	add	r3, sp, #12
 80215b8:	462a      	mov	r2, r5
 80215ba:	a904      	add	r1, sp, #16
 80215bc:	4630      	mov	r0, r6
 80215be:	9300      	str	r3, [sp, #0]
 80215c0:	4b04      	ldr	r3, [pc, #16]	; (80215d4 <_vfiprintf_r+0x22c>)
 80215c2:	f000 f87d 	bl	80216c0 <_printf_i>
 80215c6:	e7e4      	b.n	8021592 <_vfiprintf_r+0x1ea>
 80215c8:	08022673 	.word	0x08022673
 80215cc:	08022679 	.word	0x08022679
 80215d0:	00000000 	.word	0x00000000
 80215d4:	08021383 	.word	0x08021383
 80215d8:	08022553 	.word	0x08022553

080215dc <_printf_common>:
 80215dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80215e0:	4616      	mov	r6, r2
 80215e2:	4699      	mov	r9, r3
 80215e4:	688a      	ldr	r2, [r1, #8]
 80215e6:	4607      	mov	r7, r0
 80215e8:	690b      	ldr	r3, [r1, #16]
 80215ea:	460c      	mov	r4, r1
 80215ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80215f0:	4293      	cmp	r3, r2
 80215f2:	bfb8      	it	lt
 80215f4:	4613      	movlt	r3, r2
 80215f6:	6033      	str	r3, [r6, #0]
 80215f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80215fc:	b10a      	cbz	r2, 8021602 <_printf_common+0x26>
 80215fe:	3301      	adds	r3, #1
 8021600:	6033      	str	r3, [r6, #0]
 8021602:	6823      	ldr	r3, [r4, #0]
 8021604:	0699      	lsls	r1, r3, #26
 8021606:	bf42      	ittt	mi
 8021608:	6833      	ldrmi	r3, [r6, #0]
 802160a:	3302      	addmi	r3, #2
 802160c:	6033      	strmi	r3, [r6, #0]
 802160e:	6825      	ldr	r5, [r4, #0]
 8021610:	f015 0506 	ands.w	r5, r5, #6
 8021614:	d106      	bne.n	8021624 <_printf_common+0x48>
 8021616:	f104 0a19 	add.w	sl, r4, #25
 802161a:	68e3      	ldr	r3, [r4, #12]
 802161c:	6832      	ldr	r2, [r6, #0]
 802161e:	1a9b      	subs	r3, r3, r2
 8021620:	42ab      	cmp	r3, r5
 8021622:	dc2b      	bgt.n	802167c <_printf_common+0xa0>
 8021624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021628:	1e13      	subs	r3, r2, #0
 802162a:	6822      	ldr	r2, [r4, #0]
 802162c:	bf18      	it	ne
 802162e:	2301      	movne	r3, #1
 8021630:	0692      	lsls	r2, r2, #26
 8021632:	d430      	bmi.n	8021696 <_printf_common+0xba>
 8021634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021638:	4649      	mov	r1, r9
 802163a:	4638      	mov	r0, r7
 802163c:	47c0      	blx	r8
 802163e:	3001      	adds	r0, #1
 8021640:	d023      	beq.n	802168a <_printf_common+0xae>
 8021642:	6823      	ldr	r3, [r4, #0]
 8021644:	341a      	adds	r4, #26
 8021646:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802164a:	f003 0306 	and.w	r3, r3, #6
 802164e:	2b04      	cmp	r3, #4
 8021650:	bf0a      	itet	eq
 8021652:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8021656:	2500      	movne	r5, #0
 8021658:	6833      	ldreq	r3, [r6, #0]
 802165a:	f04f 0600 	mov.w	r6, #0
 802165e:	bf08      	it	eq
 8021660:	1aed      	subeq	r5, r5, r3
 8021662:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8021666:	bf08      	it	eq
 8021668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802166c:	4293      	cmp	r3, r2
 802166e:	bfc4      	itt	gt
 8021670:	1a9b      	subgt	r3, r3, r2
 8021672:	18ed      	addgt	r5, r5, r3
 8021674:	42b5      	cmp	r5, r6
 8021676:	d11a      	bne.n	80216ae <_printf_common+0xd2>
 8021678:	2000      	movs	r0, #0
 802167a:	e008      	b.n	802168e <_printf_common+0xb2>
 802167c:	2301      	movs	r3, #1
 802167e:	4652      	mov	r2, sl
 8021680:	4649      	mov	r1, r9
 8021682:	4638      	mov	r0, r7
 8021684:	47c0      	blx	r8
 8021686:	3001      	adds	r0, #1
 8021688:	d103      	bne.n	8021692 <_printf_common+0xb6>
 802168a:	f04f 30ff 	mov.w	r0, #4294967295
 802168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021692:	3501      	adds	r5, #1
 8021694:	e7c1      	b.n	802161a <_printf_common+0x3e>
 8021696:	18e1      	adds	r1, r4, r3
 8021698:	1c5a      	adds	r2, r3, #1
 802169a:	2030      	movs	r0, #48	; 0x30
 802169c:	3302      	adds	r3, #2
 802169e:	4422      	add	r2, r4
 80216a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80216a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80216a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80216ac:	e7c2      	b.n	8021634 <_printf_common+0x58>
 80216ae:	2301      	movs	r3, #1
 80216b0:	4622      	mov	r2, r4
 80216b2:	4649      	mov	r1, r9
 80216b4:	4638      	mov	r0, r7
 80216b6:	47c0      	blx	r8
 80216b8:	3001      	adds	r0, #1
 80216ba:	d0e6      	beq.n	802168a <_printf_common+0xae>
 80216bc:	3601      	adds	r6, #1
 80216be:	e7d9      	b.n	8021674 <_printf_common+0x98>

080216c0 <_printf_i>:
 80216c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80216c4:	7e0f      	ldrb	r7, [r1, #24]
 80216c6:	4691      	mov	r9, r2
 80216c8:	4680      	mov	r8, r0
 80216ca:	460c      	mov	r4, r1
 80216cc:	2f78      	cmp	r7, #120	; 0x78
 80216ce:	469a      	mov	sl, r3
 80216d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80216d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80216d6:	d807      	bhi.n	80216e8 <_printf_i+0x28>
 80216d8:	2f62      	cmp	r7, #98	; 0x62
 80216da:	d80a      	bhi.n	80216f2 <_printf_i+0x32>
 80216dc:	2f00      	cmp	r7, #0
 80216de:	f000 80d3 	beq.w	8021888 <_printf_i+0x1c8>
 80216e2:	2f58      	cmp	r7, #88	; 0x58
 80216e4:	f000 80bf 	beq.w	8021866 <_printf_i+0x1a6>
 80216e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80216ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80216f0:	e03a      	b.n	8021768 <_printf_i+0xa8>
 80216f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80216f6:	2b15      	cmp	r3, #21
 80216f8:	d8f6      	bhi.n	80216e8 <_printf_i+0x28>
 80216fa:	a101      	add	r1, pc, #4	; (adr r1, 8021700 <_printf_i+0x40>)
 80216fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021700:	08021759 	.word	0x08021759
 8021704:	0802176d 	.word	0x0802176d
 8021708:	080216e9 	.word	0x080216e9
 802170c:	080216e9 	.word	0x080216e9
 8021710:	080216e9 	.word	0x080216e9
 8021714:	080216e9 	.word	0x080216e9
 8021718:	0802176d 	.word	0x0802176d
 802171c:	080216e9 	.word	0x080216e9
 8021720:	080216e9 	.word	0x080216e9
 8021724:	080216e9 	.word	0x080216e9
 8021728:	080216e9 	.word	0x080216e9
 802172c:	0802186f 	.word	0x0802186f
 8021730:	08021799 	.word	0x08021799
 8021734:	0802182b 	.word	0x0802182b
 8021738:	080216e9 	.word	0x080216e9
 802173c:	080216e9 	.word	0x080216e9
 8021740:	08021891 	.word	0x08021891
 8021744:	080216e9 	.word	0x080216e9
 8021748:	08021799 	.word	0x08021799
 802174c:	080216e9 	.word	0x080216e9
 8021750:	080216e9 	.word	0x080216e9
 8021754:	08021833 	.word	0x08021833
 8021758:	682b      	ldr	r3, [r5, #0]
 802175a:	1d1a      	adds	r2, r3, #4
 802175c:	681b      	ldr	r3, [r3, #0]
 802175e:	602a      	str	r2, [r5, #0]
 8021760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021768:	2301      	movs	r3, #1
 802176a:	e09e      	b.n	80218aa <_printf_i+0x1ea>
 802176c:	6820      	ldr	r0, [r4, #0]
 802176e:	682b      	ldr	r3, [r5, #0]
 8021770:	0607      	lsls	r7, r0, #24
 8021772:	f103 0104 	add.w	r1, r3, #4
 8021776:	6029      	str	r1, [r5, #0]
 8021778:	d501      	bpl.n	802177e <_printf_i+0xbe>
 802177a:	681e      	ldr	r6, [r3, #0]
 802177c:	e003      	b.n	8021786 <_printf_i+0xc6>
 802177e:	0646      	lsls	r6, r0, #25
 8021780:	d5fb      	bpl.n	802177a <_printf_i+0xba>
 8021782:	f9b3 6000 	ldrsh.w	r6, [r3]
 8021786:	2e00      	cmp	r6, #0
 8021788:	da03      	bge.n	8021792 <_printf_i+0xd2>
 802178a:	232d      	movs	r3, #45	; 0x2d
 802178c:	4276      	negs	r6, r6
 802178e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021792:	4859      	ldr	r0, [pc, #356]	; (80218f8 <_printf_i+0x238>)
 8021794:	230a      	movs	r3, #10
 8021796:	e012      	b.n	80217be <_printf_i+0xfe>
 8021798:	682b      	ldr	r3, [r5, #0]
 802179a:	6820      	ldr	r0, [r4, #0]
 802179c:	1d19      	adds	r1, r3, #4
 802179e:	6029      	str	r1, [r5, #0]
 80217a0:	0605      	lsls	r5, r0, #24
 80217a2:	d501      	bpl.n	80217a8 <_printf_i+0xe8>
 80217a4:	681e      	ldr	r6, [r3, #0]
 80217a6:	e002      	b.n	80217ae <_printf_i+0xee>
 80217a8:	0641      	lsls	r1, r0, #25
 80217aa:	d5fb      	bpl.n	80217a4 <_printf_i+0xe4>
 80217ac:	881e      	ldrh	r6, [r3, #0]
 80217ae:	2f6f      	cmp	r7, #111	; 0x6f
 80217b0:	4851      	ldr	r0, [pc, #324]	; (80218f8 <_printf_i+0x238>)
 80217b2:	bf0c      	ite	eq
 80217b4:	2308      	moveq	r3, #8
 80217b6:	230a      	movne	r3, #10
 80217b8:	2100      	movs	r1, #0
 80217ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80217be:	6865      	ldr	r5, [r4, #4]
 80217c0:	2d00      	cmp	r5, #0
 80217c2:	60a5      	str	r5, [r4, #8]
 80217c4:	bfa2      	ittt	ge
 80217c6:	6821      	ldrge	r1, [r4, #0]
 80217c8:	f021 0104 	bicge.w	r1, r1, #4
 80217cc:	6021      	strge	r1, [r4, #0]
 80217ce:	b90e      	cbnz	r6, 80217d4 <_printf_i+0x114>
 80217d0:	2d00      	cmp	r5, #0
 80217d2:	d04a      	beq.n	802186a <_printf_i+0x1aa>
 80217d4:	4615      	mov	r5, r2
 80217d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80217da:	fb03 6711 	mls	r7, r3, r1, r6
 80217de:	5dc7      	ldrb	r7, [r0, r7]
 80217e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80217e4:	4637      	mov	r7, r6
 80217e6:	460e      	mov	r6, r1
 80217e8:	42bb      	cmp	r3, r7
 80217ea:	d9f4      	bls.n	80217d6 <_printf_i+0x116>
 80217ec:	2b08      	cmp	r3, #8
 80217ee:	d10b      	bne.n	8021808 <_printf_i+0x148>
 80217f0:	6823      	ldr	r3, [r4, #0]
 80217f2:	07de      	lsls	r6, r3, #31
 80217f4:	d508      	bpl.n	8021808 <_printf_i+0x148>
 80217f6:	6923      	ldr	r3, [r4, #16]
 80217f8:	6861      	ldr	r1, [r4, #4]
 80217fa:	4299      	cmp	r1, r3
 80217fc:	bfde      	ittt	le
 80217fe:	2330      	movle	r3, #48	; 0x30
 8021800:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021804:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021808:	1b52      	subs	r2, r2, r5
 802180a:	6122      	str	r2, [r4, #16]
 802180c:	464b      	mov	r3, r9
 802180e:	aa03      	add	r2, sp, #12
 8021810:	4621      	mov	r1, r4
 8021812:	4640      	mov	r0, r8
 8021814:	f8cd a000 	str.w	sl, [sp]
 8021818:	f7ff fee0 	bl	80215dc <_printf_common>
 802181c:	3001      	adds	r0, #1
 802181e:	d149      	bne.n	80218b4 <_printf_i+0x1f4>
 8021820:	f04f 30ff 	mov.w	r0, #4294967295
 8021824:	b004      	add	sp, #16
 8021826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802182a:	6823      	ldr	r3, [r4, #0]
 802182c:	f043 0320 	orr.w	r3, r3, #32
 8021830:	6023      	str	r3, [r4, #0]
 8021832:	2778      	movs	r7, #120	; 0x78
 8021834:	4831      	ldr	r0, [pc, #196]	; (80218fc <_printf_i+0x23c>)
 8021836:	6823      	ldr	r3, [r4, #0]
 8021838:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802183c:	061f      	lsls	r7, r3, #24
 802183e:	6829      	ldr	r1, [r5, #0]
 8021840:	f851 6b04 	ldr.w	r6, [r1], #4
 8021844:	d402      	bmi.n	802184c <_printf_i+0x18c>
 8021846:	065f      	lsls	r7, r3, #25
 8021848:	bf48      	it	mi
 802184a:	b2b6      	uxthmi	r6, r6
 802184c:	07df      	lsls	r7, r3, #31
 802184e:	6029      	str	r1, [r5, #0]
 8021850:	bf44      	itt	mi
 8021852:	f043 0320 	orrmi.w	r3, r3, #32
 8021856:	6023      	strmi	r3, [r4, #0]
 8021858:	b91e      	cbnz	r6, 8021862 <_printf_i+0x1a2>
 802185a:	6823      	ldr	r3, [r4, #0]
 802185c:	f023 0320 	bic.w	r3, r3, #32
 8021860:	6023      	str	r3, [r4, #0]
 8021862:	2310      	movs	r3, #16
 8021864:	e7a8      	b.n	80217b8 <_printf_i+0xf8>
 8021866:	4824      	ldr	r0, [pc, #144]	; (80218f8 <_printf_i+0x238>)
 8021868:	e7e5      	b.n	8021836 <_printf_i+0x176>
 802186a:	4615      	mov	r5, r2
 802186c:	e7be      	b.n	80217ec <_printf_i+0x12c>
 802186e:	682b      	ldr	r3, [r5, #0]
 8021870:	6826      	ldr	r6, [r4, #0]
 8021872:	1d18      	adds	r0, r3, #4
 8021874:	6961      	ldr	r1, [r4, #20]
 8021876:	6028      	str	r0, [r5, #0]
 8021878:	0635      	lsls	r5, r6, #24
 802187a:	681b      	ldr	r3, [r3, #0]
 802187c:	d501      	bpl.n	8021882 <_printf_i+0x1c2>
 802187e:	6019      	str	r1, [r3, #0]
 8021880:	e002      	b.n	8021888 <_printf_i+0x1c8>
 8021882:	0670      	lsls	r0, r6, #25
 8021884:	d5fb      	bpl.n	802187e <_printf_i+0x1be>
 8021886:	8019      	strh	r1, [r3, #0]
 8021888:	2300      	movs	r3, #0
 802188a:	4615      	mov	r5, r2
 802188c:	6123      	str	r3, [r4, #16]
 802188e:	e7bd      	b.n	802180c <_printf_i+0x14c>
 8021890:	682b      	ldr	r3, [r5, #0]
 8021892:	2100      	movs	r1, #0
 8021894:	1d1a      	adds	r2, r3, #4
 8021896:	602a      	str	r2, [r5, #0]
 8021898:	681d      	ldr	r5, [r3, #0]
 802189a:	6862      	ldr	r2, [r4, #4]
 802189c:	4628      	mov	r0, r5
 802189e:	f7ff fc23 	bl	80210e8 <memchr>
 80218a2:	b108      	cbz	r0, 80218a8 <_printf_i+0x1e8>
 80218a4:	1b40      	subs	r0, r0, r5
 80218a6:	6060      	str	r0, [r4, #4]
 80218a8:	6863      	ldr	r3, [r4, #4]
 80218aa:	6123      	str	r3, [r4, #16]
 80218ac:	2300      	movs	r3, #0
 80218ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80218b2:	e7ab      	b.n	802180c <_printf_i+0x14c>
 80218b4:	6923      	ldr	r3, [r4, #16]
 80218b6:	462a      	mov	r2, r5
 80218b8:	4649      	mov	r1, r9
 80218ba:	4640      	mov	r0, r8
 80218bc:	47d0      	blx	sl
 80218be:	3001      	adds	r0, #1
 80218c0:	d0ae      	beq.n	8021820 <_printf_i+0x160>
 80218c2:	6823      	ldr	r3, [r4, #0]
 80218c4:	079b      	lsls	r3, r3, #30
 80218c6:	d413      	bmi.n	80218f0 <_printf_i+0x230>
 80218c8:	68e0      	ldr	r0, [r4, #12]
 80218ca:	9b03      	ldr	r3, [sp, #12]
 80218cc:	4298      	cmp	r0, r3
 80218ce:	bfb8      	it	lt
 80218d0:	4618      	movlt	r0, r3
 80218d2:	e7a7      	b.n	8021824 <_printf_i+0x164>
 80218d4:	2301      	movs	r3, #1
 80218d6:	4632      	mov	r2, r6
 80218d8:	4649      	mov	r1, r9
 80218da:	4640      	mov	r0, r8
 80218dc:	47d0      	blx	sl
 80218de:	3001      	adds	r0, #1
 80218e0:	d09e      	beq.n	8021820 <_printf_i+0x160>
 80218e2:	3501      	adds	r5, #1
 80218e4:	68e3      	ldr	r3, [r4, #12]
 80218e6:	9903      	ldr	r1, [sp, #12]
 80218e8:	1a5b      	subs	r3, r3, r1
 80218ea:	42ab      	cmp	r3, r5
 80218ec:	dcf2      	bgt.n	80218d4 <_printf_i+0x214>
 80218ee:	e7eb      	b.n	80218c8 <_printf_i+0x208>
 80218f0:	2500      	movs	r5, #0
 80218f2:	f104 0619 	add.w	r6, r4, #25
 80218f6:	e7f5      	b.n	80218e4 <_printf_i+0x224>
 80218f8:	08022680 	.word	0x08022680
 80218fc:	08022691 	.word	0x08022691

08021900 <__swbuf_r>:
 8021900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021902:	460e      	mov	r6, r1
 8021904:	4614      	mov	r4, r2
 8021906:	4605      	mov	r5, r0
 8021908:	b118      	cbz	r0, 8021912 <__swbuf_r+0x12>
 802190a:	6a03      	ldr	r3, [r0, #32]
 802190c:	b90b      	cbnz	r3, 8021912 <__swbuf_r+0x12>
 802190e:	f7fe fd97 	bl	8020440 <__sinit>
 8021912:	69a3      	ldr	r3, [r4, #24]
 8021914:	60a3      	str	r3, [r4, #8]
 8021916:	89a3      	ldrh	r3, [r4, #12]
 8021918:	071a      	lsls	r2, r3, #28
 802191a:	d525      	bpl.n	8021968 <__swbuf_r+0x68>
 802191c:	6923      	ldr	r3, [r4, #16]
 802191e:	b31b      	cbz	r3, 8021968 <__swbuf_r+0x68>
 8021920:	6823      	ldr	r3, [r4, #0]
 8021922:	b2f6      	uxtb	r6, r6
 8021924:	6922      	ldr	r2, [r4, #16]
 8021926:	4637      	mov	r7, r6
 8021928:	1a98      	subs	r0, r3, r2
 802192a:	6963      	ldr	r3, [r4, #20]
 802192c:	4283      	cmp	r3, r0
 802192e:	dc04      	bgt.n	802193a <__swbuf_r+0x3a>
 8021930:	4621      	mov	r1, r4
 8021932:	4628      	mov	r0, r5
 8021934:	f7ff fb2e 	bl	8020f94 <_fflush_r>
 8021938:	b9e0      	cbnz	r0, 8021974 <__swbuf_r+0x74>
 802193a:	68a3      	ldr	r3, [r4, #8]
 802193c:	3b01      	subs	r3, #1
 802193e:	60a3      	str	r3, [r4, #8]
 8021940:	6823      	ldr	r3, [r4, #0]
 8021942:	1c5a      	adds	r2, r3, #1
 8021944:	6022      	str	r2, [r4, #0]
 8021946:	701e      	strb	r6, [r3, #0]
 8021948:	1c43      	adds	r3, r0, #1
 802194a:	6962      	ldr	r2, [r4, #20]
 802194c:	429a      	cmp	r2, r3
 802194e:	d004      	beq.n	802195a <__swbuf_r+0x5a>
 8021950:	89a3      	ldrh	r3, [r4, #12]
 8021952:	07db      	lsls	r3, r3, #31
 8021954:	d506      	bpl.n	8021964 <__swbuf_r+0x64>
 8021956:	2e0a      	cmp	r6, #10
 8021958:	d104      	bne.n	8021964 <__swbuf_r+0x64>
 802195a:	4621      	mov	r1, r4
 802195c:	4628      	mov	r0, r5
 802195e:	f7ff fb19 	bl	8020f94 <_fflush_r>
 8021962:	b938      	cbnz	r0, 8021974 <__swbuf_r+0x74>
 8021964:	4638      	mov	r0, r7
 8021966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021968:	4621      	mov	r1, r4
 802196a:	4628      	mov	r0, r5
 802196c:	f000 f806 	bl	802197c <__swsetup_r>
 8021970:	2800      	cmp	r0, #0
 8021972:	d0d5      	beq.n	8021920 <__swbuf_r+0x20>
 8021974:	f04f 37ff 	mov.w	r7, #4294967295
 8021978:	e7f4      	b.n	8021964 <__swbuf_r+0x64>
	...

0802197c <__swsetup_r>:
 802197c:	b538      	push	{r3, r4, r5, lr}
 802197e:	4b2a      	ldr	r3, [pc, #168]	; (8021a28 <__swsetup_r+0xac>)
 8021980:	4605      	mov	r5, r0
 8021982:	460c      	mov	r4, r1
 8021984:	6818      	ldr	r0, [r3, #0]
 8021986:	b118      	cbz	r0, 8021990 <__swsetup_r+0x14>
 8021988:	6a03      	ldr	r3, [r0, #32]
 802198a:	b90b      	cbnz	r3, 8021990 <__swsetup_r+0x14>
 802198c:	f7fe fd58 	bl	8020440 <__sinit>
 8021990:	89a3      	ldrh	r3, [r4, #12]
 8021992:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021996:	0718      	lsls	r0, r3, #28
 8021998:	d422      	bmi.n	80219e0 <__swsetup_r+0x64>
 802199a:	06d9      	lsls	r1, r3, #27
 802199c:	d407      	bmi.n	80219ae <__swsetup_r+0x32>
 802199e:	2309      	movs	r3, #9
 80219a0:	602b      	str	r3, [r5, #0]
 80219a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80219a6:	f04f 30ff 	mov.w	r0, #4294967295
 80219aa:	81a3      	strh	r3, [r4, #12]
 80219ac:	e034      	b.n	8021a18 <__swsetup_r+0x9c>
 80219ae:	0758      	lsls	r0, r3, #29
 80219b0:	d512      	bpl.n	80219d8 <__swsetup_r+0x5c>
 80219b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80219b4:	b141      	cbz	r1, 80219c8 <__swsetup_r+0x4c>
 80219b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80219ba:	4299      	cmp	r1, r3
 80219bc:	d002      	beq.n	80219c4 <__swsetup_r+0x48>
 80219be:	4628      	mov	r0, r5
 80219c0:	f7fe fefa 	bl	80207b8 <_free_r>
 80219c4:	2300      	movs	r3, #0
 80219c6:	6363      	str	r3, [r4, #52]	; 0x34
 80219c8:	89a3      	ldrh	r3, [r4, #12]
 80219ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80219ce:	81a3      	strh	r3, [r4, #12]
 80219d0:	2300      	movs	r3, #0
 80219d2:	6063      	str	r3, [r4, #4]
 80219d4:	6923      	ldr	r3, [r4, #16]
 80219d6:	6023      	str	r3, [r4, #0]
 80219d8:	89a3      	ldrh	r3, [r4, #12]
 80219da:	f043 0308 	orr.w	r3, r3, #8
 80219de:	81a3      	strh	r3, [r4, #12]
 80219e0:	6923      	ldr	r3, [r4, #16]
 80219e2:	b94b      	cbnz	r3, 80219f8 <__swsetup_r+0x7c>
 80219e4:	89a3      	ldrh	r3, [r4, #12]
 80219e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80219ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80219ee:	d003      	beq.n	80219f8 <__swsetup_r+0x7c>
 80219f0:	4621      	mov	r1, r4
 80219f2:	4628      	mov	r0, r5
 80219f4:	f000 f847 	bl	8021a86 <__smakebuf_r>
 80219f8:	89a0      	ldrh	r0, [r4, #12]
 80219fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80219fe:	f010 0301 	ands.w	r3, r0, #1
 8021a02:	d00a      	beq.n	8021a1a <__swsetup_r+0x9e>
 8021a04:	2300      	movs	r3, #0
 8021a06:	60a3      	str	r3, [r4, #8]
 8021a08:	6963      	ldr	r3, [r4, #20]
 8021a0a:	425b      	negs	r3, r3
 8021a0c:	61a3      	str	r3, [r4, #24]
 8021a0e:	6923      	ldr	r3, [r4, #16]
 8021a10:	b943      	cbnz	r3, 8021a24 <__swsetup_r+0xa8>
 8021a12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021a16:	d1c4      	bne.n	80219a2 <__swsetup_r+0x26>
 8021a18:	bd38      	pop	{r3, r4, r5, pc}
 8021a1a:	0781      	lsls	r1, r0, #30
 8021a1c:	bf58      	it	pl
 8021a1e:	6963      	ldrpl	r3, [r4, #20]
 8021a20:	60a3      	str	r3, [r4, #8]
 8021a22:	e7f4      	b.n	8021a0e <__swsetup_r+0x92>
 8021a24:	2000      	movs	r0, #0
 8021a26:	e7f7      	b.n	8021a18 <__swsetup_r+0x9c>
 8021a28:	20000108 	.word	0x20000108

08021a2c <_malloc_usable_size_r>:
 8021a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021a30:	1f18      	subs	r0, r3, #4
 8021a32:	2b00      	cmp	r3, #0
 8021a34:	bfbc      	itt	lt
 8021a36:	580b      	ldrlt	r3, [r1, r0]
 8021a38:	18c0      	addlt	r0, r0, r3
 8021a3a:	4770      	bx	lr

08021a3c <__swhatbuf_r>:
 8021a3c:	b570      	push	{r4, r5, r6, lr}
 8021a3e:	460c      	mov	r4, r1
 8021a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a44:	b096      	sub	sp, #88	; 0x58
 8021a46:	4615      	mov	r5, r2
 8021a48:	2900      	cmp	r1, #0
 8021a4a:	461e      	mov	r6, r3
 8021a4c:	da0c      	bge.n	8021a68 <__swhatbuf_r+0x2c>
 8021a4e:	89a3      	ldrh	r3, [r4, #12]
 8021a50:	2100      	movs	r1, #0
 8021a52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8021a56:	bf0c      	ite	eq
 8021a58:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8021a5c:	2340      	movne	r3, #64	; 0x40
 8021a5e:	2000      	movs	r0, #0
 8021a60:	6031      	str	r1, [r6, #0]
 8021a62:	602b      	str	r3, [r5, #0]
 8021a64:	b016      	add	sp, #88	; 0x58
 8021a66:	bd70      	pop	{r4, r5, r6, pc}
 8021a68:	466a      	mov	r2, sp
 8021a6a:	f000 f849 	bl	8021b00 <_fstat_r>
 8021a6e:	2800      	cmp	r0, #0
 8021a70:	dbed      	blt.n	8021a4e <__swhatbuf_r+0x12>
 8021a72:	9901      	ldr	r1, [sp, #4]
 8021a74:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8021a78:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8021a7c:	4259      	negs	r1, r3
 8021a7e:	4159      	adcs	r1, r3
 8021a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021a84:	e7eb      	b.n	8021a5e <__swhatbuf_r+0x22>

08021a86 <__smakebuf_r>:
 8021a86:	898b      	ldrh	r3, [r1, #12]
 8021a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021a8a:	079d      	lsls	r5, r3, #30
 8021a8c:	4606      	mov	r6, r0
 8021a8e:	460c      	mov	r4, r1
 8021a90:	d507      	bpl.n	8021aa2 <__smakebuf_r+0x1c>
 8021a92:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021a96:	6023      	str	r3, [r4, #0]
 8021a98:	6123      	str	r3, [r4, #16]
 8021a9a:	2301      	movs	r3, #1
 8021a9c:	6163      	str	r3, [r4, #20]
 8021a9e:	b002      	add	sp, #8
 8021aa0:	bd70      	pop	{r4, r5, r6, pc}
 8021aa2:	ab01      	add	r3, sp, #4
 8021aa4:	466a      	mov	r2, sp
 8021aa6:	f7ff ffc9 	bl	8021a3c <__swhatbuf_r>
 8021aaa:	9900      	ldr	r1, [sp, #0]
 8021aac:	4605      	mov	r5, r0
 8021aae:	4630      	mov	r0, r6
 8021ab0:	f7fe fb70 	bl	8020194 <_malloc_r>
 8021ab4:	b948      	cbnz	r0, 8021aca <__smakebuf_r+0x44>
 8021ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021aba:	059a      	lsls	r2, r3, #22
 8021abc:	d4ef      	bmi.n	8021a9e <__smakebuf_r+0x18>
 8021abe:	f023 0303 	bic.w	r3, r3, #3
 8021ac2:	f043 0302 	orr.w	r3, r3, #2
 8021ac6:	81a3      	strh	r3, [r4, #12]
 8021ac8:	e7e3      	b.n	8021a92 <__smakebuf_r+0xc>
 8021aca:	89a3      	ldrh	r3, [r4, #12]
 8021acc:	6020      	str	r0, [r4, #0]
 8021ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021ad2:	6120      	str	r0, [r4, #16]
 8021ad4:	81a3      	strh	r3, [r4, #12]
 8021ad6:	9b00      	ldr	r3, [sp, #0]
 8021ad8:	6163      	str	r3, [r4, #20]
 8021ada:	9b01      	ldr	r3, [sp, #4]
 8021adc:	b15b      	cbz	r3, 8021af6 <__smakebuf_r+0x70>
 8021ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021ae2:	4630      	mov	r0, r6
 8021ae4:	f000 f81e 	bl	8021b24 <_isatty_r>
 8021ae8:	b128      	cbz	r0, 8021af6 <__smakebuf_r+0x70>
 8021aea:	89a3      	ldrh	r3, [r4, #12]
 8021aec:	f023 0303 	bic.w	r3, r3, #3
 8021af0:	f043 0301 	orr.w	r3, r3, #1
 8021af4:	81a3      	strh	r3, [r4, #12]
 8021af6:	89a3      	ldrh	r3, [r4, #12]
 8021af8:	431d      	orrs	r5, r3
 8021afa:	81a5      	strh	r5, [r4, #12]
 8021afc:	e7cf      	b.n	8021a9e <__smakebuf_r+0x18>
	...

08021b00 <_fstat_r>:
 8021b00:	b538      	push	{r3, r4, r5, lr}
 8021b02:	2300      	movs	r3, #0
 8021b04:	4d06      	ldr	r5, [pc, #24]	; (8021b20 <_fstat_r+0x20>)
 8021b06:	4604      	mov	r4, r0
 8021b08:	4608      	mov	r0, r1
 8021b0a:	4611      	mov	r1, r2
 8021b0c:	602b      	str	r3, [r5, #0]
 8021b0e:	f7ee fb3e 	bl	801018e <_fstat>
 8021b12:	1c43      	adds	r3, r0, #1
 8021b14:	d102      	bne.n	8021b1c <_fstat_r+0x1c>
 8021b16:	682b      	ldr	r3, [r5, #0]
 8021b18:	b103      	cbz	r3, 8021b1c <_fstat_r+0x1c>
 8021b1a:	6023      	str	r3, [r4, #0]
 8021b1c:	bd38      	pop	{r3, r4, r5, pc}
 8021b1e:	bf00      	nop
 8021b20:	20009eb4 	.word	0x20009eb4

08021b24 <_isatty_r>:
 8021b24:	b538      	push	{r3, r4, r5, lr}
 8021b26:	2300      	movs	r3, #0
 8021b28:	4d05      	ldr	r5, [pc, #20]	; (8021b40 <_isatty_r+0x1c>)
 8021b2a:	4604      	mov	r4, r0
 8021b2c:	4608      	mov	r0, r1
 8021b2e:	602b      	str	r3, [r5, #0]
 8021b30:	f7ee fb3d 	bl	80101ae <_isatty>
 8021b34:	1c43      	adds	r3, r0, #1
 8021b36:	d102      	bne.n	8021b3e <_isatty_r+0x1a>
 8021b38:	682b      	ldr	r3, [r5, #0]
 8021b3a:	b103      	cbz	r3, 8021b3e <_isatty_r+0x1a>
 8021b3c:	6023      	str	r3, [r4, #0]
 8021b3e:	bd38      	pop	{r3, r4, r5, pc}
 8021b40:	20009eb4 	.word	0x20009eb4

08021b44 <_init>:
 8021b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b46:	bf00      	nop
 8021b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021b4a:	bc08      	pop	{r3}
 8021b4c:	469e      	mov	lr, r3
 8021b4e:	4770      	bx	lr

08021b50 <_fini>:
 8021b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b52:	bf00      	nop
 8021b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021b56:	bc08      	pop	{r3}
 8021b58:	469e      	mov	lr, r3
 8021b5a:	4770      	bx	lr
