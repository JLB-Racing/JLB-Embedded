
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016340  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08016540  08016540  00026540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016888  08016888  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08016888  08016888  00026888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016890  08016890  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016890  08016890  00026890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016894  08016894  00026894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08016898  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003854  200000a8  08016940  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038fc  08016940  000338fc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300de  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046179  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000722f  00000000  00000000  0007629a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032f8  00000000  00000000  0007d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000274f  00000000  00000000  000807c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000381a0  00000000  00000000  00082f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038b7c  00000000  00000000  000bb0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015fc71  00000000  00000000  000f3c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000e9dc  00000000  00000000  002538a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00262280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a8 	.word	0x200000a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08016528 	.word	0x08016528

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ac 	.word	0x200000ac
 800023c:	08016528 	.word	0x08016528

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b982 	b.w	8000ef8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d146      	bne.n	8000caa <__udivmoddi4+0x9e>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d95e      	bls.n	8000ce0 <__udivmoddi4+0xd4>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	409c      	lsls	r4, r3
 8000c34:	fa20 f202 	lsr.w	r2, r0, r2
 8000c38:	4317      	orrs	r7, r2
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x5e>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x5c>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f200 8134 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000c68:	4639      	mov	r1, r7
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	fb00 f505 	mul.w	r5, r0, r5
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x88>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x86>
 8000c8c:	42a5      	cmp	r5, r4
 8000c8e:	f200 8119 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000c92:	4610      	mov	r0, r2
 8000c94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c98:	1b64      	subs	r4, r4, r5
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11e      	cbz	r6, 8000ca6 <__udivmoddi4+0x9a>
 8000c9e:	40dc      	lsrs	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0xb4>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f000 80fc 	beq.w	8000eac <__udivmoddi4+0x2a0>
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc0:	fab3 f183 	clz	r1, r3
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	d14c      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	f0c0 80f2 	bcc.w	8000eb2 <__udivmoddi4+0x2a6>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f240 80ef 	bls.w	8000eb2 <__udivmoddi4+0x2a6>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d0e5      	beq.n	8000ca6 <__udivmoddi4+0x9a>
 8000cda:	e9c6 4700 	strd	r4, r7, [r6]
 8000cde:	e7e2      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xd8>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f382 	clz	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 809f 	bne.w	8000e2c <__udivmoddi4+0x220>
 8000cee:	1a8a      	subs	r2, r1, r2
 8000cf0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb2 f5fe 	udiv	r5, r2, lr
 8000cfe:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d08:	fb07 f005 	mul.w	r0, r7, r5
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d90f      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d10:	eb1c 0202 	adds.w	r2, ip, r2
 8000d14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d18:	bf2c      	ite	cs
 8000d1a:	f04f 0901 	movcs.w	r9, #1
 8000d1e:	f04f 0900 	movcc.w	r9, #0
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d903      	bls.n	8000d2e <__udivmoddi4+0x122>
 8000d26:	f1b9 0f00 	cmp.w	r9, #0
 8000d2a:	f000 80ce 	beq.w	8000eca <__udivmoddi4+0x2be>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d38:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	42a7      	cmp	r7, r4
 8000d54:	f200 80b3 	bhi.w	8000ebe <__udivmoddi4+0x2b2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	1be4      	subs	r4, r4, r7
 8000d5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d60:	e79c      	b.n	8000c9c <__udivmoddi4+0x90>
 8000d62:	f1c1 0420 	rsb	r4, r1, #32
 8000d66:	408b      	lsls	r3, r1
 8000d68:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d6c:	fa22 f704 	lsr.w	r7, r2, r4
 8000d70:	40e5      	lsrs	r5, r4
 8000d72:	408a      	lsls	r2, r1
 8000d74:	431f      	orrs	r7, r3
 8000d76:	fa20 f304 	lsr.w	r3, r0, r4
 8000d7a:	4088      	lsls	r0, r1
 8000d7c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb5 fef8 	udiv	lr, r5, r8
 8000d90:	fb08 551e 	mls	r5, r8, lr, r5
 8000d94:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a9      	cmp	r9, r5
 8000d9e:	d90e      	bls.n	8000dbe <__udivmoddi4+0x1b2>
 8000da0:	197d      	adds	r5, r7, r5
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0b01 	movcs.w	fp, #1
 8000dac:	f04f 0b00 	movcc.w	fp, #0
 8000db0:	45a9      	cmp	r9, r5
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000db4:	f1bb 0f00 	cmp.w	fp, #0
 8000db8:	f000 808d 	beq.w	8000ed6 <__udivmoddi4+0x2ca>
 8000dbc:	46d6      	mov	lr, sl
 8000dbe:	eba5 0509 	sub.w	r5, r5, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb5 f3f8 	udiv	r3, r5, r8
 8000dca:	fb08 5513 	mls	r5, r8, r3, r5
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dd6:	45ac      	cmp	ip, r5
 8000dd8:	d906      	bls.n	8000de8 <__udivmoddi4+0x1dc>
 8000dda:	197d      	adds	r5, r7, r5
 8000ddc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000de0:	d201      	bcs.n	8000de6 <__udivmoddi4+0x1da>
 8000de2:	45ac      	cmp	ip, r5
 8000de4:	d87e      	bhi.n	8000ee4 <__udivmoddi4+0x2d8>
 8000de6:	4643      	mov	r3, r8
 8000de8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dec:	eba5 050c 	sub.w	r5, r5, ip
 8000df0:	fba3 9802 	umull	r9, r8, r3, r2
 8000df4:	4545      	cmp	r5, r8
 8000df6:	46ce      	mov	lr, r9
 8000df8:	46c4      	mov	ip, r8
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x1f6>
 8000dfc:	d106      	bne.n	8000e0c <__udivmoddi4+0x200>
 8000dfe:	4548      	cmp	r0, r9
 8000e00:	d204      	bcs.n	8000e0c <__udivmoddi4+0x200>
 8000e02:	3b01      	subs	r3, #1
 8000e04:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e08:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d06f      	beq.n	8000ef0 <__udivmoddi4+0x2e4>
 8000e10:	ebb0 020e 	subs.w	r2, r0, lr
 8000e14:	eb65 050c 	sbc.w	r5, r5, ip
 8000e18:	40ca      	lsrs	r2, r1
 8000e1a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e1e:	40cd      	lsrs	r5, r1
 8000e20:	4618      	mov	r0, r3
 8000e22:	4314      	orrs	r4, r2
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 4500 	strd	r4, r5, [r6]
 8000e2a:	e73c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	f1c3 0220 	rsb	r2, r3, #32
 8000e34:	4099      	lsls	r1, r3
 8000e36:	409c      	lsls	r4, r3
 8000e38:	40d5      	lsrs	r5, r2
 8000e3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e42:	fa1f f78c 	uxth.w	r7, ip
 8000e46:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e50:	0c11      	lsrs	r1, r2, #16
 8000e52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e56:	fb00 f507 	mul.w	r5, r0, r7
 8000e5a:	428d      	cmp	r5, r1
 8000e5c:	d90e      	bls.n	8000e7c <__udivmoddi4+0x270>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0901 	movcs.w	r9, #1
 8000e6c:	f04f 0900 	movcc.w	r9, #0
 8000e70:	428d      	cmp	r5, r1
 8000e72:	d902      	bls.n	8000e7a <__udivmoddi4+0x26e>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	d031      	beq.n	8000ede <__udivmoddi4+0x2d2>
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	1b49      	subs	r1, r1, r5
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	fbb1 f5fe 	udiv	r5, r1, lr
 8000e84:	fb0e 1115 	mls	r1, lr, r5, r1
 8000e88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8c:	fb05 f107 	mul.w	r1, r5, r7
 8000e90:	4291      	cmp	r1, r2
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x298>
 8000e94:	eb1c 0202 	adds.w	r2, ip, r2
 8000e98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9c:	d201      	bcs.n	8000ea2 <__udivmoddi4+0x296>
 8000e9e:	4291      	cmp	r1, r2
 8000ea0:	d823      	bhi.n	8000eea <__udivmoddi4+0x2de>
 8000ea2:	4645      	mov	r5, r8
 8000ea4:	1a52      	subs	r2, r2, r1
 8000ea6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eaa:	e726      	b.n	8000cfa <__udivmoddi4+0xee>
 8000eac:	4631      	mov	r1, r6
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e6f9      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000eb2:	1a84      	subs	r4, r0, r2
 8000eb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4617      	mov	r7, r2
 8000ebc:	e70b      	b.n	8000cd6 <__udivmoddi4+0xca>
 8000ebe:	4464      	add	r4, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74a      	b.n	8000d5a <__udivmoddi4+0x14e>
 8000ec4:	4464      	add	r4, ip
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	e6e4      	b.n	8000c94 <__udivmoddi4+0x88>
 8000eca:	3d02      	subs	r5, #2
 8000ecc:	4462      	add	r2, ip
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	3902      	subs	r1, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e6c9      	b.n	8000c6a <__udivmoddi4+0x5e>
 8000ed6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eda:	443d      	add	r5, r7
 8000edc:	e76f      	b.n	8000dbe <__udivmoddi4+0x1b2>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	e7cb      	b.n	8000e7c <__udivmoddi4+0x270>
 8000ee4:	3b02      	subs	r3, #2
 8000ee6:	443d      	add	r5, r7
 8000ee8:	e77e      	b.n	8000de8 <__udivmoddi4+0x1dc>
 8000eea:	3d02      	subs	r5, #2
 8000eec:	4462      	add	r2, ip
 8000eee:	e7d9      	b.n	8000ea4 <__udivmoddi4+0x298>
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	e6d7      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f0c:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f16:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f20:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[3];
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f2a:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[4];
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f34:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[5];
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f3e:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f48:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f52:	81da      	strh	r2, [r3, #14]

	vTaskResume(mainTaskHandle);
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f012 ff13 	bl	8013d84 <vTaskResume>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000c4 	.word	0x200000c4
 8000f6c:	200000e4 	.word	0x200000e4
 8000f70:	200001b4 	.word	0x200001b4

08000f74 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:

extern TIM_HandleTypeDef htim6;

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11;
 8000f82:	2311      	movs	r3, #17
 8000f84:	75bb      	strb	r3, [r7, #22]
	data = data << num;
 8000f86:	7dbb      	ldrb	r3, [r7, #22]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
 8000f9a:	e00a      	b.n	8000fb2 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x3e>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8000f9c:	f107 0116 	add.w	r1, r7, #22
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4821      	ldr	r0, [pc, #132]	; (800102c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb8>)
 8000fa8:	f00c ff33 	bl	800de12 <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	75fb      	strb	r3, [r7, #23]
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d9f1      	bls.n	8000f9c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x28>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f00a fd0c 	bl	800b9e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f00a fd02 	bl	800b9e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f00a fcfa 	bl	800b9e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f00a fcf0 	bl	800b9e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f00a fce8 	bl	800b9e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3302      	adds	r3, #2
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	4619      	mov	r1, r3
 8001020:	f00a fcde 	bl	800b9e0 <HAL_GPIO_WritePin>

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000524 	.word	0x20000524

08001030 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
}


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	2201      	movs	r2, #1
 8001044:	4619      	mov	r1, r3
 8001046:	f00a fccb 	bl	800b9e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3304      	adds	r3, #4
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3302      	adds	r3, #2
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	f00a fcc1 	bl	800b9e0 <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t num, uint8_t *res)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	71fb      	strb	r3, [r7, #7]
	uint8_t i, data;
	for(i = 0; i < 4; ++i)
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]
 800107c:	e03c      	b.n	80010f8 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x90>
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	4413      	add	r3, r2
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	f00a fca3 	bl	800b9e0 <HAL_GPIO_WritePin>
		data = num;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800109e:	f107 0116 	add.w	r1, r7, #22
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	2201      	movs	r2, #1
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0xa0>)
 80010aa:	f00c feb2 	bl	800de12 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*4], 2, HAL_MAX_DELAY);
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	461a      	mov	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	1899      	adds	r1, r3, r2
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	2202      	movs	r2, #2
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0xa0>)
 80010c0:	f00d f815 	bl	800e0ee <HAL_SPI_Receive>
		data = 4 + num;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	3304      	adds	r3, #4
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80010cc:	f107 0116 	add.w	r1, r7, #22
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	2201      	movs	r2, #1
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0xa0>)
 80010d8:	f00c fe9b 	bl	800de12 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*4 + 2], 2, HAL_MAX_DELAY);
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	18d1      	adds	r1, r2, r3
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	2202      	movs	r2, #2
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0xa0>)
 80010ee:	f00c fffe 	bl	800e0ee <HAL_SPI_Receive>
	for(i = 0; i < 4; ++i)
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75fb      	strb	r3, [r7, #23]
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d9bf      	bls.n	800107e <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x16>
	}

}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200004c0 	.word	0x200004c0

0800110c <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af02      	add	r7, sp, #8

	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, leds_front, leds_rear);


#else
	uint8_t i,j = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t temp_res_front[16] = {0u};
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
	uint8_t temp_res_rear[16] = {0u};
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
	for(i = 0; i < 4; ++i)
 8001136:	2300      	movs	r3, #0
 8001138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800113c:	e0bc      	b.n	80012b8 <_Z14LineSensorTaskv+0x1ac>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, 0);
 800113e:	2300      	movs	r3, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	4b88      	ldr	r3, [pc, #544]	; (8001364 <_Z14LineSensorTaskv+0x258>)
 8001144:	4a88      	ldr	r2, [pc, #544]	; (8001368 <_Z14LineSensorTaskv+0x25c>)
 8001146:	4987      	ldr	r1, [pc, #540]	; (8001364 <_Z14LineSensorTaskv+0x258>)
 8001148:	4888      	ldr	r0, [pc, #544]	; (800136c <_Z14LineSensorTaskv+0x260>)
 800114a:	f7ff ff13 	bl	8000f74 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>
		//TODO us delay
		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 800114e:	4b88      	ldr	r3, [pc, #544]	; (8001370 <_Z14LineSensorTaskv+0x264>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	623b      	str	r3, [r7, #32]
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8001156:	bf00      	nop
 8001158:	4b85      	ldr	r3, [pc, #532]	; (8001370 <_Z14LineSensorTaskv+0x264>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f240 125d 	movw	r2, #349	; 0x15d
 8001166:	4293      	cmp	r3, r2
 8001168:	bf94      	ite	ls
 800116a:	2301      	movls	r3, #1
 800116c:	2300      	movhi	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f1      	bne.n	8001158 <_Z14LineSensorTaskv+0x4c>
		ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, 0, temp_res_front);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	497e      	ldr	r1, [pc, #504]	; (8001374 <_Z14LineSensorTaskv+0x268>)
 800117c:	487e      	ldr	r0, [pc, #504]	; (8001378 <_Z14LineSensorTaskv+0x26c>)
 800117e:	f7ff ff73 	bl	8001068 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
		ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, 0, temp_res_rear);
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	497d      	ldr	r1, [pc, #500]	; (800137c <_Z14LineSensorTaskv+0x270>)
 8001188:	487d      	ldr	r0, [pc, #500]	; (8001380 <_Z14LineSensorTaskv+0x274>)
 800118a:	f7ff ff6d 	bl	8001068 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 800118e:	4975      	ldr	r1, [pc, #468]	; (8001364 <_Z14LineSensorTaskv+0x258>)
 8001190:	4875      	ldr	r0, [pc, #468]	; (8001368 <_Z14LineSensorTaskv+0x25c>)
 8001192:	f7ff ff4d 	bl	8001030 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
		for(j = 0; j < 4 ; ++j)
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800119c:	e082      	b.n	80012a4 <_Z14LineSensorTaskv+0x198>
		{
			ls_data.adc_values_f[i*8 + j] = (temp_res_front[4*j] << 4u) | (temp_res_front[4*j + 1]);
 800119e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	3328      	adds	r3, #40	; 0x28
 80011a6:	443b      	add	r3, r7
 80011a8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	3301      	adds	r3, #1
 80011b8:	3328      	adds	r3, #40	; 0x28
 80011ba:	443b      	add	r3, r7
 80011bc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b219      	sxth	r1, r3
 80011c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ca:	00da      	lsls	r2, r3, #3
 80011cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d0:	4413      	add	r3, r2
 80011d2:	b289      	uxth	r1, r1
 80011d4:	4a6b      	ldr	r2, [pc, #428]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 80011d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[i*8 + j + 4] = (temp_res_front[4*j+2] << 4u) | (temp_res_front[4*j + 3]);
 80011da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	3328      	adds	r3, #40	; 0x28
 80011e4:	443b      	add	r3, r7
 80011e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	3303      	adds	r3, #3
 80011f6:	3328      	adds	r3, #40	; 0x28
 80011f8:	443b      	add	r3, r7
 80011fa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b219      	sxth	r1, r3
 8001204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001208:	00da      	lsls	r2, r3, #3
 800120a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800120e:	4413      	add	r3, r2
 8001210:	3304      	adds	r3, #4
 8001212:	b289      	uxth	r1, r1
 8001214:	4a5b      	ldr	r2, [pc, #364]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 8001216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[i*8 + j] = (temp_res_rear[4*j] << 4u) | (temp_res_rear[4*j + 1]);
 800121a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	3328      	adds	r3, #40	; 0x28
 8001222:	443b      	add	r3, r7
 8001224:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	b21a      	sxth	r2, r3
 800122c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	3301      	adds	r3, #1
 8001234:	3328      	adds	r3, #40	; 0x28
 8001236:	443b      	add	r3, r7
 8001238:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b219      	sxth	r1, r3
 8001242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001246:	00da      	lsls	r2, r3, #3
 8001248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124c:	4413      	add	r3, r2
 800124e:	b289      	uxth	r1, r1
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 8001252:	3320      	adds	r3, #32
 8001254:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[i*8 + j + 4] = (temp_res_rear[4*j+2] << 4u) | (temp_res_rear[4*j + 3]);
 8001258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	3328      	adds	r3, #40	; 0x28
 8001262:	443b      	add	r3, r7
 8001264:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	b21a      	sxth	r2, r3
 800126c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	3303      	adds	r3, #3
 8001274:	3328      	adds	r3, #40	; 0x28
 8001276:	443b      	add	r3, r7
 8001278:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b219      	sxth	r1, r3
 8001282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001286:	00da      	lsls	r2, r3, #3
 8001288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800128c:	4413      	add	r3, r2
 800128e:	3304      	adds	r3, #4
 8001290:	b289      	uxth	r1, r1
 8001292:	4a3c      	ldr	r2, [pc, #240]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 8001294:	3320      	adds	r3, #32
 8001296:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4 ; ++j)
 800129a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800129e:	3301      	adds	r3, #1
 80012a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	f67f af78 	bls.w	800119e <_Z14LineSensorTaskv+0x92>
	for(i = 0; i < 4; ++i)
 80012ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b2:	3301      	adds	r3, #1
 80012b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012bc:	2b03      	cmp	r3, #3
 80012be:	f67f af3e 	bls.w	800113e <_Z14LineSensorTaskv+0x32>
		}
	}

	for(i = 1; i <= 32; ++i)
 80012c2:	2301      	movs	r3, #1
 80012c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012c8:	e02f      	b.n	800132a <_Z14LineSensorTaskv+0x21e>
	{
		ls_data.position_front += (float)(i * ls_data.adc_values_f[i]);
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 80012cc:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80012d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012d8:	492a      	ldr	r1, [pc, #168]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 80012da:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 80012f0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		ls_data.position_rear += (float)(i * ls_data.adc_values_r[i]);
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 80012f6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80012fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001302:	4920      	ldr	r1, [pc, #128]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 8001304:	3220      	adds	r2, #32
 8001306:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 800131c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	for(i = 1; i <= 32; ++i)
 8001320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001324:	3301      	adds	r3, #1
 8001326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800132a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800132e:	2b20      	cmp	r3, #32
 8001330:	d9cb      	bls.n	80012ca <_Z14LineSensorTaskv+0x1be>
	}
	ls_data.position_front /= 528.0f;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 8001334:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001338:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001388 <_Z14LineSensorTaskv+0x27c>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 8001342:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	ls_data.position_rear /= 528.0f;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 8001348:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800134c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001388 <_Z14LineSensorTaskv+0x27c>
 8001350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <_Z14LineSensorTaskv+0x278>)
 8001356:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84


#endif
}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000038 	.word	0x20000038
 8001368:	2000003c 	.word	0x2000003c
 800136c:	20000030 	.word	0x20000030
 8001370:	200006d0 	.word	0x200006d0
 8001374:	20000010 	.word	0x20000010
 8001378:	20000000 	.word	0x20000000
 800137c:	20000028 	.word	0x20000028
 8001380:	20000018 	.word	0x20000018
 8001384:	200000f4 	.word	0x200000f4
 8001388:	44040000 	.word	0x44040000

0800138c <_Z16MotorControlTaskv>:
extern TIM_HandleTypeDef htim5;

float pi_integral_error = 0;

void MotorControlTask()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2108      	movs	r1, #8
 8001396:	4835      	ldr	r0, [pc, #212]	; (800146c <_Z16MotorControlTaskv+0xe0>)
 8001398:	f00a fb22 	bl	800b9e0 <HAL_GPIO_WritePin>
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <_Z16MotorControlTaskv+0xe4>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013a8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001474 <_Z16MotorControlTaskv+0xe8>
 80013ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001478 <_Z16MotorControlTaskv+0xec>
 80013b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800147c <_Z16MotorControlTaskv+0xf0>
 80013bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <_Z16MotorControlTaskv+0xf4>)
 80013c2:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)(adc_values.motor_curr_raw)) / 4096.0f * 3.3f - MOTOR_CURR_NULL) * MOTOR_CURR_SENSITIVITY;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <_Z16MotorControlTaskv+0xe4>)
 80013c8:	885b      	ldrh	r3, [r3, #2]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001474 <_Z16MotorControlTaskv+0xe8>
 80013d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013da:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001478 <_Z16MotorControlTaskv+0xec>
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001484 <_Z16MotorControlTaskv+0xf8>
 80013e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001488 <_Z16MotorControlTaskv+0xfc>
 80013ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <_Z16MotorControlTaskv+0xf4>)
 80013f4:	edc3 7a01 	vstr	s15, [r3, #4]

	float pi_error = motorcontrol.target_velocity - motorcontrol.actual_velocity;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <_Z16MotorControlTaskv+0xf4>)
 80013fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <_Z16MotorControlTaskv+0xf4>)
 8001400:	edd3 7a02 	vldr	s15, [r3, #8]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a03 	vstr	s15, [r7, #12]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	60bb      	str	r3, [r7, #8]
	pi_integral_error = pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
 8001410:	ed97 7a03 	vldr	s14, [r7, #12]
 8001414:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800148c <_Z16MotorControlTaskv+0x100>
 8001418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <_Z16MotorControlTaskv+0x104>)
 800141e:	edc3 7a00 	vstr	s15, [r3]

	//float duty_cycle = pi_integral_error + pi_proportional_error;
	float duty_cycle = 0.42f;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <_Z16MotorControlTaskv+0x108>)
 8001424:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, duty_cycle * PWM_COUNTER_PREIOD);
 8001426:	edd7 7a01 	vldr	s15, [r7, #4]
 800142a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001498 <_Z16MotorControlTaskv+0x10c>
 800142e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <_Z16MotorControlTaskv+0x110>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143a:	ee17 2a90 	vmov	r2, s15
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (duty_cycle * PWM_COUNTER_PREIOD));
 8001440:	edd7 7a01 	vldr	s15, [r7, #4]
 8001444:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001498 <_Z16MotorControlTaskv+0x10c>
 8001448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001498 <_Z16MotorControlTaskv+0x10c>
 8001450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_Z16MotorControlTaskv+0x110>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145c:	ee17 2a90 	vmov	r2, s15
 8001460:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	42021400 	.word	0x42021400
 8001470:	200000e4 	.word	0x200000e4
 8001474:	45800000 	.word	0x45800000
 8001478:	40533333 	.word	0x40533333
 800147c:	40b66666 	.word	0x40b66666
 8001480:	2000017c 	.word	0x2000017c
 8001484:	3fd47ae1 	.word	0x3fd47ae1
 8001488:	3c112989 	.word	0x3c112989
 800148c:	43480000 	.word	0x43480000
 8001490:	20000190 	.word	0x20000190
 8001494:	3ed70a3d 	.word	0x3ed70a3d
 8001498:	44e54000 	.word	0x44e54000
 800149c:	20000684 	.word	0x20000684

080014a0 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 80014a4:	220c      	movs	r2, #12
 80014a6:	4903      	ldr	r1, [pc, #12]	; (80014b4 <_Z10Radio_Initv+0x14>)
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <_Z10Radio_Initv+0x18>)
 80014aa:	f00f f96b 	bl	8010784 <HAL_UART_Receive_IT>

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000194 	.word	0x20000194
 80014b8:	20000370 	.word	0x20000370

080014bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 80014c4:	220c      	movs	r2, #12
 80014c6:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_UART_RxCpltCallback+0x94>)
 80014c8:	4822      	ldr	r0, [pc, #136]	; (8001554 <HAL_UART_RxCpltCallback+0x98>)
 80014ca:	f00f f95b 	bl	8010784 <HAL_UART_Receive_IT>
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e009      	b.n	80014e8 <HAL_UART_RxCpltCallback+0x2c>
    {
    	if(radio_rxBuffer[i] == '\r')
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_UART_RxCpltCallback+0x94>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
 80014da:	2b0d      	cmp	r3, #13
 80014dc:	d101      	bne.n	80014e2 <HAL_UART_RxCpltCallback+0x26>
    	{
    		length = i;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b0b      	cmp	r3, #11
 80014ec:	d9f2      	bls.n	80014d4 <HAL_UART_RxCpltCallback+0x18>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d103      	bne.n	80014fc <HAL_UART_RxCpltCallback+0x40>
    {
    	countdown_value = radio_rxBuffer[0];
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_UART_RxCpltCallback+0x94>)
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_UART_RxCpltCallback+0x9c>)
 80014fa:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d115      	bne.n	800152e <HAL_UART_RxCpltCallback+0x72>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8001502:	4913      	ldr	r1, [pc, #76]	; (8001550 <HAL_UART_RxCpltCallback+0x94>)
 8001504:	4815      	ldr	r0, [pc, #84]	; (800155c <HAL_UART_RxCpltCallback+0xa0>)
 8001506:	f7fe fe9b 	bl	8000240 <strcmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d103      	bne.n	8001518 <HAL_UART_RxCpltCallback+0x5c>
    	{
    		flood_active = true;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_UART_RxCpltCallback+0xa4>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	e010      	b.n	800153a <HAL_UART_RxCpltCallback+0x7e>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_UART_RxCpltCallback+0xa8>)
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_UART_RxCpltCallback+0xac>)
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_UART_RxCpltCallback+0xb0>)
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <HAL_UART_RxCpltCallback+0xb4>)
 8001524:	4913      	ldr	r1, [pc, #76]	; (8001574 <HAL_UART_RxCpltCallback+0xb8>)
 8001526:	480a      	ldr	r0, [pc, #40]	; (8001550 <HAL_UART_RxCpltCallback+0x94>)
 8001528:	f014 fa08 	bl	801593c <siscanf>
 800152c:	e005      	b.n	800153a <HAL_UART_RxCpltCallback+0x7e>
    	}
    }

    else
    {
    	flood_counter++;
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_UART_RxCpltCallback+0xbc>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_UART_RxCpltCallback+0xbc>)
 8001538:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_UART_RxCpltCallback+0xbc>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b0a      	cmp	r3, #10
 8001540:	d902      	bls.n	8001548 <HAL_UART_RxCpltCallback+0x8c>
    {
    	flood_active = false;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <HAL_UART_RxCpltCallback+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
    }

}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000194 	.word	0x20000194
 8001554:	20000370 	.word	0x20000370
 8001558:	20000044 	.word	0x20000044
 800155c:	08016540 	.word	0x08016540
 8001560:	200001a0 	.word	0x200001a0
 8001564:	200001a8 	.word	0x200001a8
 8001568:	200001a4 	.word	0x200001a4
 800156c:	200001a3 	.word	0x200001a3
 8001570:	200001a2 	.word	0x200001a2
 8001574:	08016548 	.word	0x08016548
 8001578:	200001a1 	.word	0x200001a1

0800157c <_Z16SetSteeringAnglef>:
#include "main.h"

extern TIM_HandleTypeDef htim1;
/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = SERVO_NULL + (angle / 90.0f * SERVO_RANGE);
 8001586:	ed97 7a01 	vldr	s14, [r7, #4]
 800158a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80015c0 <_Z16SetSteeringAnglef+0x44>
 800158e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001592:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80015c4 <_Z16SetSteeringAnglef+0x48>
 8001596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80015c8 <_Z16SetSteeringAnglef+0x4c>
 800159e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a6:	ee17 3a90 	vmov	r3, s15
 80015aa:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare);
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_Z16SetSteeringAnglef+0x50>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	89fa      	ldrh	r2, [r7, #14]
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	42b40000 	.word	0x42b40000
 80015c4:	442f0000 	.word	0x442f0000
 80015c8:	44bb8000 	.word	0x44bb8000
 80015cc:	200005ec 	.word	0x200005ec

080015d0 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	2300      	movs	r3, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001606:	d205      	bcs.n	8001614 <_ZSt16__deque_buf_sizej+0x1c>
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	e000      	b.n	8001616 <_ZSt16__deque_buf_sizej+0x1e>
 8001614:	2301      	movs	r3, #1
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fce9 	bl	8005004 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f)
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	ed87 0a02 	vstr	s0, [r7, #8]
 8001648:	edc7 0a01 	vstr	s1, [r7, #4]
 800164c:	ed87 1a00 	vstr	s2, [r7]
            : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	ed97 0a00 	vldr	s0, [r7]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 f851 	bl	8001718 <_ZN3jlb8Odometry15normalize_angleEf>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	edc3 7a04 	vstr	s15, [r3, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3330      	adds	r3, #48	; 0x30
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ffb0 	bl	8001622 <_ZNSt5dequeIfSaIfEEC1Ev>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3358      	adds	r3, #88	; 0x58
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ffab 	bl	8001622 <_ZNSt5dequeIfSaIfEEC1Ev>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	ed87 0a03 	vstr	s0, [r7, #12]
 80016e8:	ed87 1b00 	vstr	d1, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7fe ff1d 	bl	800052c <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	ed97 1b00 	vldr	d1, [r7]
 80016fa:	ec43 2b10 	vmov	d0, r2, r3
 80016fe:	f013 ff1d 	bl	801553c <fmod>
 8001702:	eeb0 7a40 	vmov.f32	s14, s0
 8001706:	eef0 7a60 	vmov.f32	s15, s1
    }
 800170a:	eeb0 0a47 	vmov.f32	s0, s14
 800170e:	eef0 0a67 	vmov.f32	s1, s15
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN3jlb8Odometry15normalize_angleEf>:
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
        }

        float normalize_angle(float angle)
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 8001724:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001780 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8001728:	ed97 0a00 	vldr	s0, [r7]
 800172c:	f7ff ffd7 	bl	80016de <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001730:	ec53 2b10 	vmov	r2, r3, d0
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff fa00 	bl	8000b3c <__aeabi_d2f>
 800173c:	4603      	mov	r3, r0
 800173e:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f)
 8001740:	edd7 7a00 	vldr	s15, [r7]
 8001744:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174c:	d50f      	bpl.n	800176e <_ZN3jlb8Odometry15normalize_angleEf+0x56>
            {
                angle += 2.0f * M_PI;
 800174e:	6838      	ldr	r0, [r7, #0]
 8001750:	f7fe feec 	bl	800052c <__aeabi_f2d>
 8001754:	a30a      	add	r3, pc, #40	; (adr r3, 8001780 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe fd89 	bl	8000270 <__adddf3>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff f9e9 	bl	8000b3c <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	603b      	str	r3, [r7, #0]
            }
            return angle;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	ee07 3a90 	vmov	s15, r3
        }
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	54442d18 	.word	0x54442d18
 8001784:	401921fb 	.word	0x401921fb

08001788 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fc47 	bl	8005026 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ffeb 	bl	8001788 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        std::vector<float> line_positions_rear;

        Direction direction = Direction::STRAIGHT;
        Mission mission = Mission::LABYRINTH;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2210      	movs	r2, #16
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2210      	movs	r2, #16
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3360      	adds	r3, #96	; 0x60
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ffcb 	bl	80017a2 <_ZNSt6vectorIfSaIfEEC1Ev>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	336c      	adds	r3, #108	; 0x6c
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ffc6 	bl	80017a2 <_ZNSt6vectorIfSaIfEEC1Ev>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	679a      	str	r2, [r3, #120]	; 0x78
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	67da      	str	r2, [r3, #124]	; 0x7c
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateE>:
                const Controller &controller;
                const ASState &as_state;

#ifdef STM32
                // TODO: initialize UDPClient for STM32
                SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_) : odometry(odometry_), controller(controller_), as_state(as_state_)
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                {
                }
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f003 fc05 	bl	8005096 <_ZNSaIN3jlb4EdgeEED1Ev>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 fbe8 	bl	8005076 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ffeb 	bl	8001896 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_ZN3jlb4NodeC1Ecff>:
        char name;
        float x;
        float y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	460b      	mov	r3, r1
 80018d4:	ed87 0a01 	vstr	s0, [r7, #4]
 80018d8:	edc7 0a00 	vstr	s1, [r7]
 80018dc:	72fb      	strb	r3, [r7, #11]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	7afa      	ldrb	r2, [r7, #11]
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	330c      	adds	r3, #12
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ffdb 	bl	80018b0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	330c      	adds	r3, #12
 8001910:	4618      	mov	r0, r3
 8001912:	f003 fbe9 	bl	80050e8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3308      	adds	r3, #8
 800192c:	4618      	mov	r0, r3
 800192e:	f003 fc33 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f)
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b08d      	sub	sp, #52	; 0x34
 8001940:	af00      	add	r7, sp, #0
 8001942:	6178      	str	r0, [r7, #20]
 8001944:	60fa      	str	r2, [r7, #12]
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	ed87 0a01 	vstr	s0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	74fb      	strb	r3, [r7, #19]
        {
            edges.push_back(Edge{name_, direction_, prev_nodes_, weight_});
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f103 040c 	add.w	r4, r3, #12
 8001956:	7cfb      	ldrb	r3, [r7, #19]
 8001958:	763b      	strb	r3, [r7, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	3308      	adds	r3, #8
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fbd9 	bl	800511e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001970:	f107 0318 	add.w	r3, r7, #24
 8001974:	4619      	mov	r1, r3
 8001976:	4620      	mov	r0, r4
 8001978:	f003 fc29 	bl	80051ce <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ffcd 	bl	8001920 <_ZN3jlb4EdgeD1Ev>
        }
 8001986:	bf00      	nop
 8001988:	3734      	adds	r7, #52	; 0x34
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}

0800198e <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fc29 	bl	80051f0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ffeb 	bl	800198e <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	0000      	movs	r0, r0
 80019c4:	0000      	movs	r0, r0
	...

080019c8 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80019d4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80019d8:	6018      	str	r0, [r3, #0]
        {
 80019da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80019de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ffdf 	bl	80019a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 80019ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80019ee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	eddf 0af3 	vldr	s1, [pc, #972]	; 8001dc8 <_ZN3jlb5GraphC1Ev+0x400>
 80019fc:	ed9f 0af3 	vldr	s0, [pc, #972]	; 8001dcc <_ZN3jlb5GraphC1Ev+0x404>
 8001a00:	2141      	movs	r1, #65	; 0x41
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff61 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f003 fbfe 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff73 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 8001a1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001a22:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001a26:	681c      	ldr	r4, [r3, #0]
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	eddf 0aeb 	vldr	s1, [pc, #940]	; 8001ddc <_ZN3jlb5GraphC1Ev+0x414>
 8001a30:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 8001dcc <_ZN3jlb5GraphC1Ev+0x404>
 8001a34:	2142      	movs	r1, #66	; 0x42
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff47 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	4619      	mov	r1, r3
 8001a42:	4620      	mov	r0, r4
 8001a44:	f003 fbe4 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff59 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8001a52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001a56:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001a5a:	681c      	ldr	r4, [r3, #0]
 8001a5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a60:	eddf 0adb 	vldr	s1, [pc, #876]	; 8001dd0 <_ZN3jlb5GraphC1Ev+0x408>
 8001a64:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001a68:	2143      	movs	r1, #67	; 0x43
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff2d 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001a70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a74:	4619      	mov	r1, r3
 8001a76:	4620      	mov	r0, r4
 8001a78:	f003 fbca 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff3f 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 8001a86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001a8a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001a8e:	681c      	ldr	r4, [r3, #0]
 8001a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a94:	eddf 0acf 	vldr	s1, [pc, #828]	; 8001dd4 <_ZN3jlb5GraphC1Ev+0x40c>
 8001a98:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001a9c:	2144      	movs	r1, #68	; 0x44
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff13 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001aa4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f003 fbb0 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001ab0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff25 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 8001aba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001abe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ac8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001acc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001ad0:	2145      	movs	r1, #69	; 0x45
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fef9 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001ad8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001adc:	4619      	mov	r1, r3
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f003 fb96 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001ae4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff0b 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 8001aee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001af2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001af6:	681c      	ldr	r4, [r3, #0]
 8001af8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001afc:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8001dc8 <_ZN3jlb5GraphC1Ev+0x400>
 8001b00:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8001ddc <_ZN3jlb5GraphC1Ev+0x414>
 8001b04:	2146      	movs	r1, #70	; 0x46
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fedf 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001b0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b10:	4619      	mov	r1, r3
 8001b12:	4620      	mov	r0, r4
 8001b14:	f003 fb7c 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001b18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fef1 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 8001b22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001b26:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001b2a:	681c      	ldr	r4, [r3, #0]
 8001b2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b30:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8001ddc <_ZN3jlb5GraphC1Ev+0x414>
 8001b34:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8001ddc <_ZN3jlb5GraphC1Ev+0x414>
 8001b38:	2147      	movs	r1, #71	; 0x47
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fec5 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001b40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b44:	4619      	mov	r1, r3
 8001b46:	4620      	mov	r0, r4
 8001b48:	f003 fb62 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001b4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fed7 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8001b56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001b5a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001b5e:	681c      	ldr	r4, [r3, #0]
 8001b60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b64:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8001dd0 <_ZN3jlb5GraphC1Ev+0x408>
 8001b68:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8001dd4 <_ZN3jlb5GraphC1Ev+0x40c>
 8001b6c:	2148      	movs	r1, #72	; 0x48
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff feab 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001b74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f003 fb48 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001b80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff febd 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 8001b8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001b8e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001b92:	681c      	ldr	r4, [r3, #0]
 8001b94:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b98:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8001dd4 <_ZN3jlb5GraphC1Ev+0x40c>
 8001b9c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001dd4 <_ZN3jlb5GraphC1Ev+0x40c>
 8001ba0:	2149      	movs	r1, #73	; 0x49
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fe91 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001ba8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bac:	4619      	mov	r1, r3
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f003 fb2e 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001bb4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fea3 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 8001bbe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001bc2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001bc6:	681c      	ldr	r4, [r3, #0]
 8001bc8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bcc:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001bd0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8001dd4 <_ZN3jlb5GraphC1Ev+0x40c>
 8001bd4:	214a      	movs	r1, #74	; 0x4a
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fe77 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001bdc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001be0:	4619      	mov	r1, r3
 8001be2:	4620      	mov	r0, r4
 8001be4:	f003 fb14 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001be8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe89 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 8001bf2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001bf6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001bfa:	681c      	ldr	r4, [r3, #0]
 8001bfc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c00:	eddf 0a71 	vldr	s1, [pc, #452]	; 8001dc8 <_ZN3jlb5GraphC1Ev+0x400>
 8001c04:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8001dc8 <_ZN3jlb5GraphC1Ev+0x400>
 8001c08:	214b      	movs	r1, #75	; 0x4b
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fe5d 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001c10:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c14:	4619      	mov	r1, r3
 8001c16:	4620      	mov	r0, r4
 8001c18:	f003 fafa 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001c1c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fe6f 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 8001c26:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001c2a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001c2e:	681c      	ldr	r4, [r3, #0]
 8001c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c34:	eddf 0a69 	vldr	s1, [pc, #420]	; 8001ddc <_ZN3jlb5GraphC1Ev+0x414>
 8001c38:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8001dc8 <_ZN3jlb5GraphC1Ev+0x400>
 8001c3c:	214c      	movs	r1, #76	; 0x4c
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe43 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001c44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f003 fae0 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fe55 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 8001c5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001c5e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001c62:	681c      	ldr	r4, [r3, #0]
 8001c64:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c68:	eddf 0a59 	vldr	s1, [pc, #356]	; 8001dd0 <_ZN3jlb5GraphC1Ev+0x408>
 8001c6c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8001dd0 <_ZN3jlb5GraphC1Ev+0x408>
 8001c70:	214d      	movs	r1, #77	; 0x4d
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fe29 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001c78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f003 fac6 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001c84:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fe3b 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 8001c8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001c92:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001c96:	681c      	ldr	r4, [r3, #0]
 8001c98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c9c:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8001dd4 <_ZN3jlb5GraphC1Ev+0x40c>
 8001ca0:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001dd0 <_ZN3jlb5GraphC1Ev+0x408>
 8001ca4:	214e      	movs	r1, #78	; 0x4e
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fe0f 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001cac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f003 faac 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001cb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fe21 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 8001cc2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001cc6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001cca:	681c      	ldr	r4, [r3, #0]
 8001ccc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001cd0:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001cd4:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8001dd0 <_ZN3jlb5GraphC1Ev+0x408>
 8001cd8:	214f      	movs	r1, #79	; 0x4f
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fdf5 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001ce0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f003 fa92 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001cec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fe07 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 8001cf6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001cfa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001cfe:	681c      	ldr	r4, [r3, #0]
 8001d00:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d04:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001d08:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001d0c:	2150      	movs	r1, #80	; 0x50
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fddb 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001d14:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f003 fa78 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001d20:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fded 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 8001d2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001d2e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001d32:	681c      	ldr	r4, [r3, #0]
 8001d34:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d38:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001dd0 <_ZN3jlb5GraphC1Ev+0x408>
 8001d3c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001d40:	2151      	movs	r1, #81	; 0x51
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fdc1 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001d48:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f003 fa5e 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001d54:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fdd3 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 8001d5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001d62:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001d66:	681c      	ldr	r4, [r3, #0]
 8001d68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001d6c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001dc8 <_ZN3jlb5GraphC1Ev+0x400>
 8001d70:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001d74:	2152      	movs	r1, #82	; 0x52
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fda7 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001d7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f003 fa44 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001d88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fdb9 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 8001d92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001d96:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001d9a:	681c      	ldr	r4, [r3, #0]
 8001d9c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001da0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001dd4 <_ZN3jlb5GraphC1Ev+0x40c>
 8001da4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001da8:	2153      	movs	r1, #83	; 0x53
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fd8d 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001db0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001db4:	4619      	mov	r1, r3
 8001db6:	4620      	mov	r0, r4
 8001db8:	f003 fa2a 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001dbc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fd9f 	bl	8001904 <_ZN3jlb4NodeD1Ev>
 8001dc6:	e011      	b.n	8001dec <_ZN3jlb5GraphC1Ev+0x424>
 8001dc8:	40866667 	.word	0x40866667
 8001dcc:	40d33334 	.word	0x40d33334
 8001dd0:	40666667 	.word	0x40666667
 8001dd4:	4099999a 	.word	0x4099999a
 8001dd8:	40d33334 	.word	0x40d33334
 8001ddc:	40accccd 	.word	0x40accccd
 8001de0:	4019999a 	.word	0x4019999a
 8001de4:	40866667 	.word	0x40866667
 8001de8:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 8001dec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001df0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001df4:	681c      	ldr	r4, [r3, #0]
 8001df6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001dfa:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8001ddc <_ZN3jlb5GraphC1Ev+0x414>
 8001dfe:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001e02:	2154      	movs	r1, #84	; 0x54
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fd60 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001e0a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4620      	mov	r0, r4
 8001e12:	f003 f9fd 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001e16:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fd72 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8001e20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001e24:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001e28:	681c      	ldr	r4, [r3, #0]
 8001e2a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001e2e:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 8001dd8 <_ZN3jlb5GraphC1Ev+0x410>
 8001e32:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001e36:	2155      	movs	r1, #85	; 0x55
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fd46 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001e3e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001e42:	4619      	mov	r1, r3
 8001e44:	4620      	mov	r0, r4
 8001e46:	f003 f9e3 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001e4a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fd58 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8001e54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001e58:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001e5c:	681c      	ldr	r4, [r3, #0]
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 8001de4 <_ZN3jlb5GraphC1Ev+0x41c>
 8001e66:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8001de0 <_ZN3jlb5GraphC1Ev+0x418>
 8001e6a:	2156      	movs	r1, #86	; 0x56
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fd2c 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	4619      	mov	r1, r3
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f003 f9c9 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fd3e 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8001e88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001e8c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001e90:	681c      	ldr	r4, [r3, #0]
 8001e92:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001e96:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 8001ddc <_ZN3jlb5GraphC1Ev+0x414>
 8001e9a:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8001de0 <_ZN3jlb5GraphC1Ev+0x418>
 8001e9e:	2157      	movs	r1, #87	; 0x57
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fd12 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001ea6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4620      	mov	r0, r4
 8001eae:	f003 f9af 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001eb2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd24 	bl	8001904 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 8001ebc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001ec0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001ec4:	681c      	ldr	r4, [r3, #0]
 8001ec6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001eca:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 8001de4 <_ZN3jlb5GraphC1Ev+0x41c>
 8001ece:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 8001de8 <_ZN3jlb5GraphC1Ev+0x420>
 8001ed2:	2158      	movs	r1, #88	; 0x58
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fcf8 	bl	80018ca <_ZN3jlb4NodeC1Ecff>
 8001eda:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f003 f995 	bl	8005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001ee6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fd0a 	bl	8001904 <_ZN3jlb4NodeD1Ev>

            const auto UNIT = SQUARE_LENGTH;
 8001ef0:	4be9      	ldr	r3, [pc, #932]	; (8002298 <_ZN3jlb5GraphC1Ev+0x8d0>)
 8001ef2:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 8001ef6:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8001ef8:	a3e5      	add	r3, pc, #916	; (adr r3, 8002290 <_ZN3jlb5GraphC1Ev+0x8c8>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 8001f02:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 8001f06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f0a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001f0e:	2141      	movs	r1, #65	; 0x41
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	f002 ff7f 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8001f16:	4604      	mov	r4, r0
 8001f18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f1c:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8001f20:	4ade      	ldr	r2, [pc, #888]	; (800229c <_ZN3jlb5GraphC1Ev+0x8d4>)
 8001f22:	8812      	ldrh	r2, [r2, #0]
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f2a:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8001f2e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f38:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f44:	4618      	mov	r0, r3
 8001f46:	f013 fae6 	bl	8015516 <_ZNSaIcEC1Ev>
 8001f4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f4e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8001f52:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8001f56:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8001f5a:	ca06      	ldmia	r2, {r1, r2}
 8001f5c:	f003 f969 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8001f60:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001f64:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 80022a8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2143      	movs	r1, #67	; 0x43
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7ff fce5 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8001f72:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 f90e 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8001f7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f80:	4618      	mov	r0, r3
 8001f82:	f013 faca 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 8001f86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f8a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001f8e:	2141      	movs	r1, #65	; 0x41
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	f002 ff3f 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8001f96:	4604      	mov	r4, r0
 8001f98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f9c:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8001fa0:	2243      	movs	r2, #67	; 0x43
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001fa8:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8001fac:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001fb6:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8001fba:	2201      	movs	r2, #1
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f013 faa7 	bl	8015516 <_ZNSaIcEC1Ev>
 8001fc8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001fcc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8001fd0:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 8001fd4:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8001fd8:	ca06      	ldmia	r2, {r1, r2}
 8001fda:	f003 f92a 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8001fde:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001fe2:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 80022a0 <_ZN3jlb5GraphC1Ev+0x8d8>
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	2142      	movs	r1, #66	; 0x42
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff fca6 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8001ff0:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 f8cf 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8001ffa:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001ffe:	4618      	mov	r0, r3
 8002000:	f013 fa8b 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 8002004:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002008:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800200c:	2141      	movs	r1, #65	; 0x41
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	f002 ff00 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002014:	4604      	mov	r4, r0
 8002016:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800201a:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 800201e:	2243      	movs	r2, #67	; 0x43
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002026:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 800202a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002034:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8002038:	2201      	movs	r2, #1
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002040:	4618      	mov	r0, r3
 8002042:	f013 fa68 	bl	8015516 <_ZNSaIcEC1Ev>
 8002046:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800204a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800204e:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8002052:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8002056:	ca06      	ldmia	r2, {r1, r2}
 8002058:	f003 f8eb 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800205c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002060:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80022a8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002064:	2201      	movs	r2, #1
 8002066:	2144      	movs	r1, #68	; 0x44
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff fc67 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800206e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002072:	4618      	mov	r0, r3
 8002074:	f003 f890 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002078:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800207c:	4618      	mov	r0, r3
 800207e:	f013 fa4c 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8002082:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002086:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800208a:	2142      	movs	r1, #66	; 0x42
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f002 fec1 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002092:	4604      	mov	r4, r0
 8002094:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002098:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 800209c:	2245      	movs	r2, #69	; 0x45
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80020a4:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 80020a8:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80020b2:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 80020b6:	2201      	movs	r2, #1
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80020be:	4618      	mov	r0, r3
 80020c0:	f013 fa29 	bl	8015516 <_ZNSaIcEC1Ev>
 80020c4:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80020c8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80020cc:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 80020d0:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 80020d4:	ca06      	ldmia	r2, {r1, r2}
 80020d6:	f003 f8ac 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80020da:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80020de:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80022a0 <_ZN3jlb5GraphC1Ev+0x8d8>
 80020e2:	2202      	movs	r2, #2
 80020e4:	2141      	movs	r1, #65	; 0x41
 80020e6:	4620      	mov	r0, r4
 80020e8:	f7ff fc28 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80020ec:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 f851 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80020f6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80020fa:	4618      	mov	r0, r3
 80020fc:	f013 fa0d 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8002100:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002104:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002108:	2142      	movs	r1, #66	; 0x42
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	f002 fe82 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002110:	4604      	mov	r4, r0
 8002112:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002116:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 800211a:	4a62      	ldr	r2, [pc, #392]	; (80022a4 <_ZN3jlb5GraphC1Ev+0x8dc>)
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	801a      	strh	r2, [r3, #0]
 8002120:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002124:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8002128:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002132:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8002136:	2202      	movs	r2, #2
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800213e:	4618      	mov	r0, r3
 8002140:	f013 f9e9 	bl	8015516 <_ZNSaIcEC1Ev>
 8002144:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002148:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800214c:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8002150:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8002154:	ca06      	ldmia	r2, {r1, r2}
 8002156:	f003 f86c 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800215a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800215e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80022a8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002162:	2201      	movs	r2, #1
 8002164:	2145      	movs	r1, #69	; 0x45
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff fbe8 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800216c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002170:	4618      	mov	r0, r3
 8002172:	f003 f811 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002176:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800217a:	4618      	mov	r0, r3
 800217c:	f013 f9cd 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8002180:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002184:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002188:	2142      	movs	r1, #66	; 0x42
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	f002 fe42 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002190:	4604      	mov	r4, r0
 8002192:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002196:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800219a:	2245      	movs	r2, #69	; 0x45
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80021a2:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 80021a6:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80021b0:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 80021b4:	2201      	movs	r2, #1
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80021bc:	4618      	mov	r0, r3
 80021be:	f013 f9aa 	bl	8015516 <_ZNSaIcEC1Ev>
 80021c2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80021c6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80021ca:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 80021ce:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 80021d2:	ca06      	ldmia	r2, {r1, r2}
 80021d4:	f003 f82d 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80021d8:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80021dc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80022a8 <_ZN3jlb5GraphC1Ev+0x8e0>
 80021e0:	2200      	movs	r2, #0
 80021e2:	2144      	movs	r1, #68	; 0x44
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff fba9 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80021ea:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 ffd2 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80021f4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80021f8:	4618      	mov	r0, r3
 80021fa:	f013 f98e 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 80021fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002202:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002206:	2143      	movs	r1, #67	; 0x43
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	f002 fe03 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800220e:	4604      	mov	r4, r0
 8002210:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002214:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8002218:	2246      	movs	r2, #70	; 0x46
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002220:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8002224:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800222e:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8002232:	2201      	movs	r2, #1
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800223a:	4618      	mov	r0, r3
 800223c:	f013 f96b 	bl	8015516 <_ZNSaIcEC1Ev>
 8002240:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002244:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002248:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 800224c:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8002250:	ca06      	ldmia	r2, {r1, r2}
 8002252:	f002 ffee 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002256:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800225a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80022a8 <_ZN3jlb5GraphC1Ev+0x8e0>
 800225e:	2201      	movs	r2, #1
 8002260:	2141      	movs	r1, #65	; 0x41
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff fb6a 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002268:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800226c:	4618      	mov	r0, r3
 800226e:	f002 ff93 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002272:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002276:	4618      	mov	r0, r3
 8002278:	f013 f94f 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 800227c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002280:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002284:	2143      	movs	r1, #67	; 0x43
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	f002 fdc4 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800228c:	e00e      	b.n	80022ac <_ZN3jlb5GraphC1Ev+0x8e4>
 800228e:	bf00      	nop
 8002290:	460698c7 	.word	0x460698c7
 8002294:	3fee28c7 	.word	0x3fee28c7
 8002298:	3f19999a 	.word	0x3f19999a
 800229c:	08016560 	.word	0x08016560
 80022a0:	3f99999a 	.word	0x3f99999a
 80022a4:	08016564 	.word	0x08016564
 80022a8:	3f71463a 	.word	0x3f71463a
 80022ac:	4604      	mov	r4, r0
 80022ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80022b2:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 80022b6:	2241      	movs	r2, #65	; 0x41
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80022be:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 80022c2:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80022cc:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 80022d0:	2201      	movs	r2, #1
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80022d8:	4618      	mov	r0, r3
 80022da:	f013 f91c 	bl	8015516 <_ZNSaIcEC1Ev>
 80022de:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80022e2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80022e6:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 80022ea:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 80022ee:	ca06      	ldmia	r2, {r1, r2}
 80022f0:	f002 ff9f 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80022f4:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80022f8:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 80022a8 <_ZN3jlb5GraphC1Ev+0x8e0>
 80022fc:	2200      	movs	r2, #0
 80022fe:	2146      	movs	r1, #70	; 0x46
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff fb1b 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002306:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800230a:	4618      	mov	r0, r3
 800230c:	f002 ff44 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002310:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002314:	4618      	mov	r0, r3
 8002316:	f013 f900 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 800231a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800231e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002322:	2144      	movs	r1, #68	; 0x44
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	f002 fd75 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800232a:	4604      	mov	r4, r0
 800232c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002330:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8002334:	4ae5      	ldr	r2, [pc, #916]	; (80026cc <_ZN3jlb5GraphC1Ev+0xd04>)
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	4611      	mov	r1, r2
 800233a:	8019      	strh	r1, [r3, #0]
 800233c:	3302      	adds	r3, #2
 800233e:	0c12      	lsrs	r2, r2, #16
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002346:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 800234a:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002354:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8002358:	2203      	movs	r2, #3
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002360:	4618      	mov	r0, r3
 8002362:	f013 f8d8 	bl	8015516 <_ZNSaIcEC1Ev>
 8002366:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800236a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800236e:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8002372:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002376:	ca06      	ldmia	r2, {r1, r2}
 8002378:	f002 ff5b 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800237c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002380:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 80026dc <_ZN3jlb5GraphC1Ev+0xd14>
 8002384:	2200      	movs	r2, #0
 8002386:	2141      	movs	r1, #65	; 0x41
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff fad7 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800238e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002392:	4618      	mov	r0, r3
 8002394:	f002 ff00 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002398:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800239c:	4618      	mov	r0, r3
 800239e:	f013 f8bc 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 80023a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023aa:	2144      	movs	r1, #68	; 0x44
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	f002 fd31 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80023b2:	4604      	mov	r4, r0
 80023b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023b8:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 80023bc:	4ac3      	ldr	r2, [pc, #780]	; (80026cc <_ZN3jlb5GraphC1Ev+0xd04>)
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	4611      	mov	r1, r2
 80023c2:	8019      	strh	r1, [r3, #0]
 80023c4:	3302      	adds	r3, #2
 80023c6:	0c12      	lsrs	r2, r2, #16
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023ce:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 80023d2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023dc:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 80023e0:	2203      	movs	r2, #3
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80023e8:	4618      	mov	r0, r3
 80023ea:	f013 f894 	bl	8015516 <_ZNSaIcEC1Ev>
 80023ee:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80023f2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80023f6:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 80023fa:	f507 7051 	add.w	r0, r7, #836	; 0x344
 80023fe:	ca06      	ldmia	r2, {r1, r2}
 8002400:	f002 ff17 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002404:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8002408:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80026dc <_ZN3jlb5GraphC1Ev+0xd14>
 800240c:	2201      	movs	r2, #1
 800240e:	2142      	movs	r1, #66	; 0x42
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff fa93 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002416:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800241a:	4618      	mov	r0, r3
 800241c:	f002 febc 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002420:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8002424:	4618      	mov	r0, r3
 8002426:	f013 f878 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 800242a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800242e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002432:	2144      	movs	r1, #68	; 0x44
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	f002 fced 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800243a:	4604      	mov	r4, r0
 800243c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002440:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8002444:	4aa2      	ldr	r2, [pc, #648]	; (80026d0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8002446:	8812      	ldrh	r2, [r2, #0]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800244e:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8002452:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800245c:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8002460:	2202      	movs	r2, #2
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002468:	4618      	mov	r0, r3
 800246a:	f013 f854 	bl	8015516 <_ZNSaIcEC1Ev>
 800246e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002472:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002476:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 800247a:	f507 7058 	add.w	r0, r7, #864	; 0x360
 800247e:	ca06      	ldmia	r2, {r1, r2}
 8002480:	f002 fed7 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002484:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002488:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80026dc <_ZN3jlb5GraphC1Ev+0xd14>
 800248c:	2200      	movs	r2, #0
 800248e:	2147      	movs	r1, #71	; 0x47
 8002490:	4620      	mov	r0, r4
 8002492:	f7ff fa53 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002496:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fe7c 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80024a0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80024a4:	4618      	mov	r0, r3
 80024a6:	f013 f838 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 80024aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80024b2:	2144      	movs	r1, #68	; 0x44
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	f002 fcad 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80024ba:	4604      	mov	r4, r0
 80024bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024c0:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 80024c4:	4a82      	ldr	r2, [pc, #520]	; (80026d0 <_ZN3jlb5GraphC1Ev+0xd08>)
 80024c6:	8812      	ldrh	r2, [r2, #0]
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024ce:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80024d2:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024dc:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80024e0:	2202      	movs	r2, #2
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80024e8:	4618      	mov	r0, r3
 80024ea:	f013 f814 	bl	8015516 <_ZNSaIcEC1Ev>
 80024ee:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80024f2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80024f6:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 80024fa:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 80024fe:	ca06      	ldmia	r2, {r1, r2}
 8002500:	f002 fe97 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002504:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002508:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80026d4 <_ZN3jlb5GraphC1Ev+0xd0c>
 800250c:	2202      	movs	r2, #2
 800250e:	2149      	movs	r1, #73	; 0x49
 8002510:	4620      	mov	r0, r4
 8002512:	f7ff fa13 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002516:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fe3c 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002520:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002524:	4618      	mov	r0, r3
 8002526:	f012 fff8 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 800252a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800252e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002532:	2144      	movs	r1, #68	; 0x44
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	f002 fc6d 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800253a:	4604      	mov	r4, r0
 800253c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002540:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8002544:	4a62      	ldr	r2, [pc, #392]	; (80026d0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8002546:	8812      	ldrh	r2, [r2, #0]
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800254e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8002552:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800255c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8002560:	2202      	movs	r2, #2
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002568:	4618      	mov	r0, r3
 800256a:	f012 ffd4 	bl	8015516 <_ZNSaIcEC1Ev>
 800256e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002572:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002576:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 800257a:	f507 7066 	add.w	r0, r7, #920	; 0x398
 800257e:	ca06      	ldmia	r2, {r1, r2}
 8002580:	f002 fe57 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002584:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002588:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80026dc <_ZN3jlb5GraphC1Ev+0xd14>
 800258c:	2201      	movs	r2, #1
 800258e:	2146      	movs	r1, #70	; 0x46
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff f9d3 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002596:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800259a:	4618      	mov	r0, r3
 800259c:	f002 fdfc 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80025a0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f012 ffb8 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 80025aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025b2:	2145      	movs	r1, #69	; 0x45
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f002 fc2d 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80025ba:	4604      	mov	r4, r0
 80025bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025c0:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80025c4:	4a44      	ldr	r2, [pc, #272]	; (80026d8 <_ZN3jlb5GraphC1Ev+0xd10>)
 80025c6:	8812      	ldrh	r2, [r2, #0]
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025ce:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80025d2:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025dc:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80025e0:	2202      	movs	r2, #2
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80025e8:	4618      	mov	r0, r3
 80025ea:	f012 ff94 	bl	8015516 <_ZNSaIcEC1Ev>
 80025ee:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80025f2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80025f6:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 80025fa:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 80025fe:	ca06      	ldmia	r2, {r1, r2}
 8002600:	f002 fe17 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002604:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8002608:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80026dc <_ZN3jlb5GraphC1Ev+0xd14>
 800260c:	2200      	movs	r2, #0
 800260e:	2142      	movs	r1, #66	; 0x42
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff f993 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002616:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800261a:	4618      	mov	r0, r3
 800261c:	f002 fdbc 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002620:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8002624:	4618      	mov	r0, r3
 8002626:	f012 ff78 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 800262a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800262e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002632:	2145      	movs	r1, #69	; 0x45
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	f002 fbed 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800263a:	4604      	mov	r4, r0
 800263c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002640:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8002644:	2242      	movs	r2, #66	; 0x42
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800264c:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8002650:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800265a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800265e:	2201      	movs	r2, #1
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002666:	4618      	mov	r0, r3
 8002668:	f012 ff55 	bl	8015516 <_ZNSaIcEC1Ev>
 800266c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002670:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002674:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8002678:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 800267c:	ca06      	ldmia	r2, {r1, r2}
 800267e:	f002 fdd8 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002682:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002686:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80026d4 <_ZN3jlb5GraphC1Ev+0xd0c>
 800268a:	2202      	movs	r2, #2
 800268c:	214a      	movs	r1, #74	; 0x4a
 800268e:	4620      	mov	r0, r4
 8002690:	f7ff f954 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002694:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002698:	4618      	mov	r0, r3
 800269a:	f002 fd7d 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 800269e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80026a2:	4618      	mov	r0, r3
 80026a4:	f012 ff39 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 80026a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026ac:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80026b0:	2145      	movs	r1, #69	; 0x45
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	f002 fbae 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80026b8:	4604      	mov	r4, r0
 80026ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026be:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80026c2:	2242      	movs	r2, #66	; 0x42
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026ca:	e009      	b.n	80026e0 <_ZN3jlb5GraphC1Ev+0xd18>
 80026cc:	08016568 	.word	0x08016568
 80026d0:	0801656c 	.word	0x0801656c
 80026d4:	3f99999a 	.word	0x3f99999a
 80026d8:	08016570 	.word	0x08016570
 80026dc:	3f71463a 	.word	0x3f71463a
 80026e0:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 80026e4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026ee:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 80026f2:	2201      	movs	r2, #1
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80026fa:	4618      	mov	r0, r3
 80026fc:	f012 ff0b 	bl	8015516 <_ZNSaIcEC1Ev>
 8002700:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002704:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002708:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 800270c:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8002710:	ca06      	ldmia	r2, {r1, r2}
 8002712:	f002 fd8e 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002716:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800271a:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80026dc <_ZN3jlb5GraphC1Ev+0xd14>
 800271e:	2201      	movs	r2, #1
 8002720:	2147      	movs	r1, #71	; 0x47
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff f90a 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002728:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800272c:	4618      	mov	r0, r3
 800272e:	f002 fd33 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002732:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002736:	4618      	mov	r0, r3
 8002738:	f012 feef 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 800273c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002740:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002744:	2146      	movs	r1, #70	; 0x46
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	f002 fb64 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800274c:	4604      	mov	r4, r0
 800274e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002752:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8002756:	4ae4      	ldr	r2, [pc, #912]	; (8002ae8 <_ZN3jlb5GraphC1Ev+0x1120>)
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	4611      	mov	r1, r2
 800275c:	8019      	strh	r1, [r3, #0]
 800275e:	3302      	adds	r3, #2
 8002760:	0c12      	lsrs	r2, r2, #16
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002768:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800276c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002776:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800277a:	2203      	movs	r2, #3
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002782:	4618      	mov	r0, r3
 8002784:	f012 fec7 	bl	8015516 <_ZNSaIcEC1Ev>
 8002788:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800278c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002790:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 8002794:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8002798:	ca06      	ldmia	r2, {r1, r2}
 800279a:	f002 fd4a 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800279e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80027a2:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8002aec <_ZN3jlb5GraphC1Ev+0x1124>
 80027a6:	2201      	movs	r2, #1
 80027a8:	2143      	movs	r1, #67	; 0x43
 80027aa:	4620      	mov	r0, r4
 80027ac:	f7ff f8c6 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80027b0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fcef 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80027ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80027be:	4618      	mov	r0, r3
 80027c0:	f012 feab 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 80027c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027c8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80027cc:	2146      	movs	r1, #70	; 0x46
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	f002 fb20 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80027d4:	4604      	mov	r4, r0
 80027d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027da:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80027de:	4ac4      	ldr	r2, [pc, #784]	; (8002af0 <_ZN3jlb5GraphC1Ev+0x1128>)
 80027e0:	8812      	ldrh	r2, [r2, #0]
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027e8:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 80027ec:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027f6:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 80027fa:	2202      	movs	r2, #2
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8002802:	4618      	mov	r0, r3
 8002804:	f012 fe87 	bl	8015516 <_ZNSaIcEC1Ev>
 8002808:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800280c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002810:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8002814:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8002818:	ca06      	ldmia	r2, {r1, r2}
 800281a:	f002 fd0a 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800281e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002822:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8002aec <_ZN3jlb5GraphC1Ev+0x1124>
 8002826:	2200      	movs	r2, #0
 8002828:	2144      	movs	r1, #68	; 0x44
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff f886 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002830:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002834:	4618      	mov	r0, r3
 8002836:	f002 fcaf 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 800283a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800283e:	4618      	mov	r0, r3
 8002840:	f012 fe6b 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8002844:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002848:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800284c:	2146      	movs	r1, #70	; 0x46
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f002 fae0 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002854:	4604      	mov	r4, r0
 8002856:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800285a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800285e:	4aa4      	ldr	r2, [pc, #656]	; (8002af0 <_ZN3jlb5GraphC1Ev+0x1128>)
 8002860:	8812      	ldrh	r2, [r2, #0]
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002868:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800286c:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002876:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800287a:	2202      	movs	r2, #2
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002882:	4618      	mov	r0, r3
 8002884:	f012 fe47 	bl	8015516 <_ZNSaIcEC1Ev>
 8002888:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800288c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002890:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8002894:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8002898:	ca06      	ldmia	r2, {r1, r2}
 800289a:	f002 fcca 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800289e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80028a2:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002af4 <_ZN3jlb5GraphC1Ev+0x112c>
 80028a6:	2202      	movs	r2, #2
 80028a8:	2147      	movs	r1, #71	; 0x47
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7ff f846 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80028b0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 fc6f 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80028ba:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80028be:	4618      	mov	r0, r3
 80028c0:	f012 fe2b 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 80028c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028c8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80028cc:	2146      	movs	r1, #70	; 0x46
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	f002 faa0 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80028d4:	4604      	mov	r4, r0
 80028d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028da:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80028de:	4a84      	ldr	r2, [pc, #528]	; (8002af0 <_ZN3jlb5GraphC1Ev+0x1128>)
 80028e0:	8812      	ldrh	r2, [r2, #0]
 80028e2:	801a      	strh	r2, [r3, #0]
 80028e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028e8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80028ec:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028f6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80028fa:	2202      	movs	r2, #2
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8002902:	4618      	mov	r0, r3
 8002904:	f012 fe07 	bl	8015516 <_ZNSaIcEC1Ev>
 8002908:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800290c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002910:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8002914:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8002918:	ca06      	ldmia	r2, {r1, r2}
 800291a:	f002 fc8a 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800291e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8002922:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8002aec <_ZN3jlb5GraphC1Ev+0x1124>
 8002926:	2201      	movs	r2, #1
 8002928:	2149      	movs	r1, #73	; 0x49
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff f806 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002930:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8002934:	4618      	mov	r0, r3
 8002936:	f002 fc2f 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 800293a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800293e:	4618      	mov	r0, r3
 8002940:	f012 fdeb 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8002944:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002948:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800294c:	2146      	movs	r1, #70	; 0x46
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	f002 fa60 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002954:	4604      	mov	r4, r0
 8002956:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800295a:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800295e:	4a62      	ldr	r2, [pc, #392]	; (8002ae8 <_ZN3jlb5GraphC1Ev+0x1120>)
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4611      	mov	r1, r2
 8002964:	8019      	strh	r1, [r3, #0]
 8002966:	3302      	adds	r3, #2
 8002968:	0c12      	lsrs	r2, r2, #16
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002970:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8002974:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800297e:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8002982:	2203      	movs	r2, #3
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800298a:	4618      	mov	r0, r3
 800298c:	f012 fdc3 	bl	8015516 <_ZNSaIcEC1Ev>
 8002990:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002994:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002998:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 800299c:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 80029a0:	ca06      	ldmia	r2, {r1, r2}
 80029a2:	f002 fc46 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80029a6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80029aa:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002aec <_ZN3jlb5GraphC1Ev+0x1124>
 80029ae:	2200      	movs	r2, #0
 80029b0:	2148      	movs	r1, #72	; 0x48
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7fe ffc2 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80029b8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fbeb 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80029c2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80029c6:	4618      	mov	r0, r3
 80029c8:	f012 fda7 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 80029cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029d0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80029d4:	2147      	movs	r1, #71	; 0x47
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f002 fa1c 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80029dc:	4604      	mov	r4, r0
 80029de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029e2:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 80029e6:	4a44      	ldr	r2, [pc, #272]	; (8002af8 <_ZN3jlb5GraphC1Ev+0x1130>)
 80029e8:	8812      	ldrh	r2, [r2, #0]
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029f0:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 80029f4:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029fe:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8002a02:	2202      	movs	r2, #2
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f012 fd83 	bl	8015516 <_ZNSaIcEC1Ev>
 8002a10:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002a14:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002a18:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 8002a1c:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8002a20:	ca06      	ldmia	r2, {r1, r2}
 8002a22:	f002 fc06 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002a26:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002a2a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002af4 <_ZN3jlb5GraphC1Ev+0x112c>
 8002a2e:	2202      	movs	r2, #2
 8002a30:	2146      	movs	r1, #70	; 0x46
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7fe ff82 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002a38:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f002 fbab 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002a42:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002a46:	4618      	mov	r0, r3
 8002a48:	f012 fd67 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 8002a4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a50:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002a54:	2147      	movs	r1, #71	; 0x47
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	f002 f9dc 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a62:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8002a66:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <_ZN3jlb5GraphC1Ev+0x1130>)
 8002a68:	8812      	ldrh	r2, [r2, #0]
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a70:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8002a74:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a7e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8002a82:	2202      	movs	r2, #2
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f012 fd43 	bl	8015516 <_ZNSaIcEC1Ev>
 8002a90:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8002a94:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002a98:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 8002a9c:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8002aa0:	ca06      	ldmia	r2, {r1, r2}
 8002aa2:	f002 fbc6 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002aa6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002aaa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002aec <_ZN3jlb5GraphC1Ev+0x1124>
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2144      	movs	r1, #68	; 0x44
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7fe ff42 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002ab8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fb6b 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002ac2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f012 fd27 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8002acc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ad0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002ad4:	2147      	movs	r1, #71	; 0x47
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	f002 f99c 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002adc:	4604      	mov	r4, r0
 8002ade:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ae2:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8002ae6:	e009      	b.n	8002afc <_ZN3jlb5GraphC1Ev+0x1134>
 8002ae8:	08016574 	.word	0x08016574
 8002aec:	3f71463a 	.word	0x3f71463a
 8002af0:	08016578 	.word	0x08016578
 8002af4:	3f99999a 	.word	0x3f99999a
 8002af8:	0801657c 	.word	0x0801657c
 8002afc:	4ae6      	ldr	r2, [pc, #920]	; (8002e98 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	4611      	mov	r1, r2
 8002b02:	8019      	strh	r1, [r3, #0]
 8002b04:	3302      	adds	r3, #2
 8002b06:	0c12      	lsrs	r2, r2, #16
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b0e:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8002b12:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b1c:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8002b20:	2203      	movs	r2, #3
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f012 fcf4 	bl	8015516 <_ZNSaIcEC1Ev>
 8002b2e:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002b32:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002b36:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 8002b3a:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 8002b3e:	ca06      	ldmia	r2, {r1, r2}
 8002b40:	f002 fb77 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002b44:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8002b48:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8002e9c <_ZN3jlb5GraphC1Ev+0x14d4>
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2145      	movs	r1, #69	; 0x45
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7fe fef3 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002b56:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 fb1c 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002b60:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f012 fcd8 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8002b6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002b72:	2147      	movs	r1, #71	; 0x47
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	f002 f94d 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b80:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8002b84:	4ac4      	ldr	r2, [pc, #784]	; (8002e98 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	8019      	strh	r1, [r3, #0]
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	0c12      	lsrs	r2, r2, #16
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b96:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8002b9a:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ba4:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8002ba8:	2203      	movs	r2, #3
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f012 fcb0 	bl	8015516 <_ZNSaIcEC1Ev>
 8002bb6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002bba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002bbe:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 8002bc2:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 8002bc6:	ca06      	ldmia	r2, {r1, r2}
 8002bc8:	f002 fb33 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002bcc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8002bd0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8002e9c <_ZN3jlb5GraphC1Ev+0x14d4>
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	214a      	movs	r1, #74	; 0x4a
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7fe feaf 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002bde:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 fad8 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002be8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8002bec:	4618      	mov	r0, r3
 8002bee:	f012 fc94 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 8002bf2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002bf6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002bfa:	2147      	movs	r1, #71	; 0x47
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	f002 f909 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002c02:	4604      	mov	r4, r0
 8002c04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c08:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8002c0c:	4aa4      	ldr	r2, [pc, #656]	; (8002ea0 <_ZN3jlb5GraphC1Ev+0x14d8>)
 8002c0e:	8812      	ldrh	r2, [r2, #0]
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c16:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8002c1a:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c24:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8002c28:	2202      	movs	r2, #2
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8002c30:	4618      	mov	r0, r3
 8002c32:	f012 fc70 	bl	8015516 <_ZNSaIcEC1Ev>
 8002c36:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8002c3a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002c3e:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 8002c42:	f207 5004 	addw	r0, r7, #1284	; 0x504
 8002c46:	ca06      	ldmia	r2, {r1, r2}
 8002c48:	f002 faf3 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002c4c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8002c50:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8002e9c <_ZN3jlb5GraphC1Ev+0x14d4>
 8002c54:	2200      	movs	r2, #0
 8002c56:	2149      	movs	r1, #73	; 0x49
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7fe fe6f 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002c5e:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fa98 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002c68:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f012 fc54 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 8002c72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c76:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002c7a:	2148      	movs	r1, #72	; 0x48
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	f002 f8c9 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002c82:	4604      	mov	r4, r0
 8002c84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c88:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8002c8c:	4a85      	ldr	r2, [pc, #532]	; (8002ea4 <_ZN3jlb5GraphC1Ev+0x14dc>)
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c96:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8002c9a:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ca4:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8002ca8:	2202      	movs	r2, #2
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f012 fc30 	bl	8015516 <_ZNSaIcEC1Ev>
 8002cb6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8002cba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002cbe:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 8002cc2:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8002cc6:	ca06      	ldmia	r2, {r1, r2}
 8002cc8:	f002 fab3 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002ccc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002cd0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8002e9c <_ZN3jlb5GraphC1Ev+0x14d4>
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2146      	movs	r1, #70	; 0x46
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7fe fe2f 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002cde:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f002 fa58 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002ce8:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8002cec:	4618      	mov	r0, r3
 8002cee:	f012 fc14 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 8002cf2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002cf6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002cfa:	2148      	movs	r1, #72	; 0x48
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	f002 f889 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002d02:	4604      	mov	r4, r0
 8002d04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d08:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 8002d0c:	2246      	movs	r2, #70	; 0x46
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d14:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8002d18:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d22:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8002d26:	2201      	movs	r2, #1
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f012 fbf1 	bl	8015516 <_ZNSaIcEC1Ev>
 8002d34:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8002d38:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002d3c:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8002d40:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 8002d44:	ca06      	ldmia	r2, {r1, r2}
 8002d46:	f002 fa74 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002d4a:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8002d4e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002e9c <_ZN3jlb5GraphC1Ev+0x14d4>
 8002d52:	2200      	movs	r2, #0
 8002d54:	214b      	movs	r1, #75	; 0x4b
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7fe fdf0 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002d5c:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 fa19 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002d66:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f012 fbd5 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8002d70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d74:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002d78:	2148      	movs	r1, #72	; 0x48
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	f002 f84a 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002d80:	4604      	mov	r4, r0
 8002d82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d86:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8002d8a:	2246      	movs	r2, #70	; 0x46
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d92:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8002d96:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002da0:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8002da4:	2201      	movs	r2, #1
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8002dac:	4618      	mov	r0, r3
 8002dae:	f012 fbb2 	bl	8015516 <_ZNSaIcEC1Ev>
 8002db2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8002db6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002dba:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 8002dbe:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 8002dc2:	ca06      	ldmia	r2, {r1, r2}
 8002dc4:	f002 fa35 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002dc8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8002dcc:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8002eac <_ZN3jlb5GraphC1Ev+0x14e4>
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	214d      	movs	r1, #77	; 0x4d
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f7fe fdb1 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002dda:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 f9da 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002de4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8002de8:	4618      	mov	r0, r3
 8002dea:	f012 fb96 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8002dee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002df2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002df6:	2149      	movs	r1, #73	; 0x49
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f002 f80b 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002dfe:	4604      	mov	r4, r0
 8002e00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e04:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8002e08:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	8019      	strh	r1, [r3, #0]
 8002e10:	3302      	adds	r3, #2
 8002e12:	0c12      	lsrs	r2, r2, #16
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e1a:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8002e1e:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e28:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8002e34:	4618      	mov	r0, r3
 8002e36:	f012 fb6e 	bl	8015516 <_ZNSaIcEC1Ev>
 8002e3a:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8002e3e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002e42:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8002e46:	f207 5074 	addw	r0, r7, #1396	; 0x574
 8002e4a:	ca06      	ldmia	r2, {r1, r2}
 8002e4c:	f002 f9f1 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002e50:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8002e54:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002e9c <_ZN3jlb5GraphC1Ev+0x14d4>
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2146      	movs	r1, #70	; 0x46
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7fe fd6d 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002e62:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 f996 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002e6c:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8002e70:	4618      	mov	r0, r3
 8002e72:	f012 fb52 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8002e76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e7a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002e7e:	2149      	movs	r1, #73	; 0x49
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	f001 ffc7 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002e86:	4604      	mov	r4, r0
 8002e88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e8c:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8002e90:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	e00b      	b.n	8002eb0 <_ZN3jlb5GraphC1Ev+0x14e8>
 8002e98:	08016580 	.word	0x08016580
 8002e9c:	3f71463a 	.word	0x3f71463a
 8002ea0:	0801657c 	.word	0x0801657c
 8002ea4:	08016584 	.word	0x08016584
 8002ea8:	08016588 	.word	0x08016588
 8002eac:	3f99999a 	.word	0x3f99999a
 8002eb0:	8019      	strh	r1, [r3, #0]
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	0c12      	lsrs	r2, r2, #16
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ebc:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8002ec0:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002eca:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8002ece:	2203      	movs	r2, #3
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f012 fb1d 	bl	8015516 <_ZNSaIcEC1Ev>
 8002edc:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002ee0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002ee4:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8002ee8:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 8002eec:	ca06      	ldmia	r2, {r1, r2}
 8002eee:	f002 f9a0 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002ef2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002ef6:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8002eac <_ZN3jlb5GraphC1Ev+0x14e4>
 8002efa:	2202      	movs	r2, #2
 8002efc:	2144      	movs	r1, #68	; 0x44
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7fe fd1c 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002f04:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 f945 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002f0e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002f12:	4618      	mov	r0, r3
 8002f14:	f012 fb01 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8002f18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f1c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002f20:	2149      	movs	r1, #73	; 0x49
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	f001 ff76 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002f28:	4604      	mov	r4, r0
 8002f2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f2e:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8002f32:	4ae7      	ldr	r2, [pc, #924]	; (80032d0 <_ZN3jlb5GraphC1Ev+0x1908>)
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	4611      	mov	r1, r2
 8002f38:	8019      	strh	r1, [r3, #0]
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	0c12      	lsrs	r2, r2, #16
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f44:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8002f48:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f52:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8002f56:	2203      	movs	r2, #3
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f012 fad9 	bl	8015516 <_ZNSaIcEC1Ev>
 8002f64:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8002f68:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002f6c:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8002f70:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 8002f74:	ca06      	ldmia	r2, {r1, r2}
 8002f76:	f002 f95c 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002f7a:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8002f7e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80032d4 <_ZN3jlb5GraphC1Ev+0x190c>
 8002f82:	2201      	movs	r2, #1
 8002f84:	2147      	movs	r1, #71	; 0x47
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7fe fcd8 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002f8c:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8002f90:	4618      	mov	r0, r3
 8002f92:	f002 f901 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8002f96:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f012 fabd 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8002fa0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002fa4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002fa8:	2149      	movs	r1, #73	; 0x49
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	f001 ff32 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002fb6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8002fba:	4ac7      	ldr	r2, [pc, #796]	; (80032d8 <_ZN3jlb5GraphC1Ev+0x1910>)
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	8019      	strh	r1, [r3, #0]
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	0c12      	lsrs	r2, r2, #16
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002fcc:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8002fd0:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002fda:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8002fde:	2203      	movs	r2, #3
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f012 fa95 	bl	8015516 <_ZNSaIcEC1Ev>
 8002fec:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8002ff0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002ff4:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8002ff8:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8002ffc:	ca06      	ldmia	r2, {r1, r2}
 8002ffe:	f002 f918 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003002:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8003006:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80032d4 <_ZN3jlb5GraphC1Ev+0x190c>
 800300a:	2200      	movs	r2, #0
 800300c:	214c      	movs	r1, #76	; 0x4c
 800300e:	4620      	mov	r0, r4
 8003010:	f7fe fc94 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003014:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8003018:	4618      	mov	r0, r3
 800301a:	f002 f8bd 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 800301e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8003022:	4618      	mov	r0, r3
 8003024:	f012 fa79 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8003028:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800302c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003030:	2149      	movs	r1, #73	; 0x49
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	f001 feee 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003038:	4604      	mov	r4, r0
 800303a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800303e:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8003042:	4aa5      	ldr	r2, [pc, #660]	; (80032d8 <_ZN3jlb5GraphC1Ev+0x1910>)
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	4611      	mov	r1, r2
 8003048:	8019      	strh	r1, [r3, #0]
 800304a:	3302      	adds	r3, #2
 800304c:	0c12      	lsrs	r2, r2, #16
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003054:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8003058:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003062:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8003066:	2203      	movs	r2, #3
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 800306e:	4618      	mov	r0, r3
 8003070:	f012 fa51 	bl	8015516 <_ZNSaIcEC1Ev>
 8003074:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8003078:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800307c:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8003080:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8003084:	ca06      	ldmia	r2, {r1, r2}
 8003086:	f002 f8d4 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800308a:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 800308e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80032dc <_ZN3jlb5GraphC1Ev+0x1914>
 8003092:	2202      	movs	r2, #2
 8003094:	214e      	movs	r1, #78	; 0x4e
 8003096:	4620      	mov	r0, r4
 8003098:	f7fe fc50 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800309c:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 f879 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80030a6:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 80030aa:	4618      	mov	r0, r3
 80030ac:	f012 fa35 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 80030b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030b4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80030b8:	2149      	movs	r1, #73	; 0x49
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	f001 feaa 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80030c0:	4604      	mov	r4, r0
 80030c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030c6:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 80030ca:	4a83      	ldr	r2, [pc, #524]	; (80032d8 <_ZN3jlb5GraphC1Ev+0x1910>)
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	4611      	mov	r1, r2
 80030d0:	8019      	strh	r1, [r3, #0]
 80030d2:	3302      	adds	r3, #2
 80030d4:	0c12      	lsrs	r2, r2, #16
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030dc:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80030e0:	f207 6214 	addw	r2, r7, #1556	; 0x614
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030ea:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80030ee:	2203      	movs	r2, #3
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80030f6:	4618      	mov	r0, r3
 80030f8:	f012 fa0d 	bl	8015516 <_ZNSaIcEC1Ev>
 80030fc:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8003100:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003104:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8003108:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 800310c:	ca06      	ldmia	r2, {r1, r2}
 800310e:	f002 f890 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003112:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003116:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80032d4 <_ZN3jlb5GraphC1Ev+0x190c>
 800311a:	2201      	movs	r2, #1
 800311c:	214b      	movs	r1, #75	; 0x4b
 800311e:	4620      	mov	r0, r4
 8003120:	f7fe fc0c 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003124:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003128:	4618      	mov	r0, r3
 800312a:	f002 f835 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 800312e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8003132:	4618      	mov	r0, r3
 8003134:	f012 f9f1 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8003138:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800313c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003140:	214a      	movs	r1, #74	; 0x4a
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	f001 fe66 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003148:	4604      	mov	r4, r0
 800314a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800314e:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8003152:	224c      	movs	r2, #76	; 0x4c
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800315a:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800315e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003168:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800316c:	2201      	movs	r2, #1
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8003174:	4618      	mov	r0, r3
 8003176:	f012 f9ce 	bl	8015516 <_ZNSaIcEC1Ev>
 800317a:	f207 6334 	addw	r3, r7, #1588	; 0x634
 800317e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003182:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8003186:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 800318a:	ca06      	ldmia	r2, {r1, r2}
 800318c:	f002 f851 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003190:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8003194:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80032d4 <_ZN3jlb5GraphC1Ev+0x190c>
 8003198:	2200      	movs	r2, #0
 800319a:	2147      	movs	r1, #71	; 0x47
 800319c:	4620      	mov	r0, r4
 800319e:	f7fe fbcd 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80031a2:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 fff6 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80031ac:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80031b0:	4618      	mov	r0, r3
 80031b2:	f012 f9b2 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 80031b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80031be:	214a      	movs	r1, #74	; 0x4a
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	f001 fe27 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80031c6:	4604      	mov	r4, r0
 80031c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031cc:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 80031d0:	224c      	movs	r2, #76	; 0x4c
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031d8:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 80031dc:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031e6:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 80031ea:	2201      	movs	r2, #1
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80031f2:	4618      	mov	r0, r3
 80031f4:	f012 f98f 	bl	8015516 <_ZNSaIcEC1Ev>
 80031f8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80031fc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003200:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 8003204:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8003208:	ca06      	ldmia	r2, {r1, r2}
 800320a:	f002 f812 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800320e:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8003212:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80032dc <_ZN3jlb5GraphC1Ev+0x1914>
 8003216:	2202      	movs	r2, #2
 8003218:	2145      	movs	r1, #69	; 0x45
 800321a:	4620      	mov	r0, r4
 800321c:	f7fe fb8e 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003220:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8003224:	4618      	mov	r0, r3
 8003226:	f001 ffb7 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 800322a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800322e:	4618      	mov	r0, r3
 8003230:	f012 f973 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 8003234:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003238:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800323c:	214a      	movs	r1, #74	; 0x4a
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	f001 fde8 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003244:	4604      	mov	r4, r0
 8003246:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800324a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 800324e:	4a24      	ldr	r2, [pc, #144]	; (80032e0 <_ZN3jlb5GraphC1Ev+0x1918>)
 8003250:	8812      	ldrh	r2, [r2, #0]
 8003252:	801a      	strh	r2, [r3, #0]
 8003254:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003258:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 800325c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003266:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 800326a:	2202      	movs	r2, #2
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003272:	4618      	mov	r0, r3
 8003274:	f012 f94f 	bl	8015516 <_ZNSaIcEC1Ev>
 8003278:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800327c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003280:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8003284:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8003288:	ca06      	ldmia	r2, {r1, r2}
 800328a:	f001 ffd2 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800328e:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8003292:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80032d4 <_ZN3jlb5GraphC1Ev+0x190c>
 8003296:	2201      	movs	r2, #1
 8003298:	214c      	movs	r1, #76	; 0x4c
 800329a:	4620      	mov	r0, r4
 800329c:	f7fe fb4e 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80032a0:	f207 6354 	addw	r3, r7, #1620	; 0x654
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 ff77 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80032aa:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80032ae:	4618      	mov	r0, r3
 80032b0:	f012 f933 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 80032b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80032bc:	214b      	movs	r1, #75	; 0x4b
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	f001 fda8 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80032c4:	4604      	mov	r4, r0
 80032c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032ca:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80032ce:	e009      	b.n	80032e4 <_ZN3jlb5GraphC1Ev+0x191c>
 80032d0:	08016588 	.word	0x08016588
 80032d4:	3f71463a 	.word	0x3f71463a
 80032d8:	0801658c 	.word	0x0801658c
 80032dc:	3f99999a 	.word	0x3f99999a
 80032e0:	08016590 	.word	0x08016590
 80032e4:	4ae4      	ldr	r2, [pc, #912]	; (8003678 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	4611      	mov	r1, r2
 80032ea:	8019      	strh	r1, [r3, #0]
 80032ec:	3302      	adds	r3, #2
 80032ee:	0c12      	lsrs	r2, r2, #16
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032f6:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80032fa:	f207 6284 	addw	r2, r7, #1668	; 0x684
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003304:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8003308:	2203      	movs	r2, #3
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8003310:	4618      	mov	r0, r3
 8003312:	f012 f900 	bl	8015516 <_ZNSaIcEC1Ev>
 8003316:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800331a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800331e:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 8003322:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8003326:	ca06      	ldmia	r2, {r1, r2}
 8003328:	f001 ff83 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800332c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003330:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800367c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8003334:	2201      	movs	r2, #1
 8003336:	2148      	movs	r1, #72	; 0x48
 8003338:	4620      	mov	r0, r4
 800333a:	f7fe faff 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800333e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003342:	4618      	mov	r0, r3
 8003344:	f001 ff28 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003348:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800334c:	4618      	mov	r0, r3
 800334e:	f012 f8e4 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8003352:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003356:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800335a:	214b      	movs	r1, #75	; 0x4b
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	f001 fd59 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003362:	4604      	mov	r4, r0
 8003364:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003368:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800336c:	4ac4      	ldr	r2, [pc, #784]	; (8003680 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 800336e:	8812      	ldrh	r2, [r2, #0]
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003376:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800337a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003384:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8003388:	2202      	movs	r2, #2
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8003390:	4618      	mov	r0, r3
 8003392:	f012 f8c0 	bl	8015516 <_ZNSaIcEC1Ev>
 8003396:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 800339a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800339e:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 80033a2:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 80033a6:	ca06      	ldmia	r2, {r1, r2}
 80033a8:	f001 ff43 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80033ac:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 80033b0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800367c <_ZN3jlb5GraphC1Ev+0x1cb4>
 80033b4:	2200      	movs	r2, #0
 80033b6:	2149      	movs	r1, #73	; 0x49
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7fe fabf 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80033be:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fee8 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80033c8:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 80033cc:	4618      	mov	r0, r3
 80033ce:	f012 f8a4 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 80033d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80033da:	214b      	movs	r1, #75	; 0x4b
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	f001 fd19 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80033e2:	4604      	mov	r4, r0
 80033e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033e8:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80033ec:	4aa4      	ldr	r2, [pc, #656]	; (8003680 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 80033ee:	8812      	ldrh	r2, [r2, #0]
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033f6:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80033fa:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003404:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8003408:	2202      	movs	r2, #2
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8003410:	4618      	mov	r0, r3
 8003412:	f012 f880 	bl	8015516 <_ZNSaIcEC1Ev>
 8003416:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800341a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800341e:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 8003422:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 8003426:	ca06      	ldmia	r2, {r1, r2}
 8003428:	f001 ff03 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800342c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003430:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8003684 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8003434:	2202      	movs	r2, #2
 8003436:	214c      	movs	r1, #76	; 0x4c
 8003438:	4620      	mov	r0, r4
 800343a:	f7fe fa7f 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800343e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003442:	4618      	mov	r0, r3
 8003444:	f001 fea8 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003448:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800344c:	4618      	mov	r0, r3
 800344e:	f012 f864 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 8003452:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003456:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800345a:	214b      	movs	r1, #75	; 0x4b
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	f001 fcd9 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003462:	4604      	mov	r4, r0
 8003464:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003468:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800346c:	4a84      	ldr	r2, [pc, #528]	; (8003680 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 800346e:	8812      	ldrh	r2, [r2, #0]
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003476:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800347a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003484:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8003488:	2202      	movs	r2, #2
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8003490:	4618      	mov	r0, r3
 8003492:	f012 f840 	bl	8015516 <_ZNSaIcEC1Ev>
 8003496:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 800349a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800349e:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 80034a2:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 80034a6:	ca06      	ldmia	r2, {r1, r2}
 80034a8:	f001 fec3 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80034ac:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80034b0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800367c <_ZN3jlb5GraphC1Ev+0x1cb4>
 80034b4:	2201      	movs	r2, #1
 80034b6:	214e      	movs	r1, #78	; 0x4e
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7fe fa3f 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80034be:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 fe68 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80034c8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80034cc:	4618      	mov	r0, r3
 80034ce:	f012 f824 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 80034d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80034da:	214b      	movs	r1, #75	; 0x4b
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	f001 fc99 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80034e2:	4604      	mov	r4, r0
 80034e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034e8:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 80034ec:	4a62      	ldr	r2, [pc, #392]	; (8003678 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	4611      	mov	r1, r2
 80034f2:	8019      	strh	r1, [r3, #0]
 80034f4:	3302      	adds	r3, #2
 80034f6:	0c12      	lsrs	r2, r2, #16
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034fe:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8003502:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800350c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8003510:	2203      	movs	r2, #3
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8003518:	4618      	mov	r0, r3
 800351a:	f011 fffc 	bl	8015516 <_ZNSaIcEC1Ev>
 800351e:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8003522:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003526:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 800352a:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 800352e:	ca06      	ldmia	r2, {r1, r2}
 8003530:	f001 fe7f 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003534:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8003538:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800367c <_ZN3jlb5GraphC1Ev+0x1cb4>
 800353c:	2200      	movs	r2, #0
 800353e:	214d      	movs	r1, #77	; 0x4d
 8003540:	4620      	mov	r0, r4
 8003542:	f7fe f9fb 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003546:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fe24 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003550:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8003554:	4618      	mov	r0, r3
 8003556:	f011 ffe0 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 800355a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800355e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003562:	214c      	movs	r1, #76	; 0x4c
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	f001 fc55 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800356a:	4604      	mov	r4, r0
 800356c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003570:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8003574:	4a44      	ldr	r2, [pc, #272]	; (8003688 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8003576:	8812      	ldrh	r2, [r2, #0]
 8003578:	801a      	strh	r2, [r3, #0]
 800357a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800357e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8003582:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800358c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8003590:	2202      	movs	r2, #2
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8003598:	4618      	mov	r0, r3
 800359a:	f011 ffbc 	bl	8015516 <_ZNSaIcEC1Ev>
 800359e:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80035a2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80035a6:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 80035aa:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 80035ae:	ca06      	ldmia	r2, {r1, r2}
 80035b0:	f001 fe3f 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80035b4:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80035b8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003684 <_ZN3jlb5GraphC1Ev+0x1cbc>
 80035bc:	2202      	movs	r2, #2
 80035be:	214b      	movs	r1, #75	; 0x4b
 80035c0:	4620      	mov	r0, r4
 80035c2:	f7fe f9bb 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80035c6:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fde4 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80035d0:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80035d4:	4618      	mov	r0, r3
 80035d6:	f011 ffa0 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 80035da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80035e2:	214c      	movs	r1, #76	; 0x4c
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	f001 fc15 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80035ea:	4604      	mov	r4, r0
 80035ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035f0:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 80035f4:	4a24      	ldr	r2, [pc, #144]	; (8003688 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035fe:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8003602:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800360c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8003610:	2202      	movs	r2, #2
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003618:	4618      	mov	r0, r3
 800361a:	f011 ff7c 	bl	8015516 <_ZNSaIcEC1Ev>
 800361e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003622:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003626:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 800362a:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 800362e:	ca06      	ldmia	r2, {r1, r2}
 8003630:	f001 fdff 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003634:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8003638:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800367c <_ZN3jlb5GraphC1Ev+0x1cb4>
 800363c:	2201      	movs	r2, #1
 800363e:	2149      	movs	r1, #73	; 0x49
 8003640:	4620      	mov	r0, r4
 8003642:	f7fe f97b 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003646:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800364a:	4618      	mov	r0, r3
 800364c:	f001 fda4 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003650:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003654:	4618      	mov	r0, r3
 8003656:	f011 ff60 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 800365a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800365e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003662:	214c      	movs	r1, #76	; 0x4c
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	f001 fbd5 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800366a:	4604      	mov	r4, r0
 800366c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003670:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8003674:	e00a      	b.n	800368c <_ZN3jlb5GraphC1Ev+0x1cc4>
 8003676:	bf00      	nop
 8003678:	08016594 	.word	0x08016594
 800367c:	3f71463a 	.word	0x3f71463a
 8003680:	08016598 	.word	0x08016598
 8003684:	3f99999a 	.word	0x3f99999a
 8003688:	0801659c 	.word	0x0801659c
 800368c:	4ae4      	ldr	r2, [pc, #912]	; (8003a20 <_ZN3jlb5GraphC1Ev+0x2058>)
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	4611      	mov	r1, r2
 8003692:	8019      	strh	r1, [r3, #0]
 8003694:	3302      	adds	r3, #2
 8003696:	0c12      	lsrs	r2, r2, #16
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800369e:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80036a2:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036ac:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80036b0:	2203      	movs	r2, #3
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80036b8:	4618      	mov	r0, r3
 80036ba:	f011 ff2c 	bl	8015516 <_ZNSaIcEC1Ev>
 80036be:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80036c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80036c6:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 80036ca:	f207 7034 	addw	r0, r7, #1844	; 0x734
 80036ce:	ca06      	ldmia	r2, {r1, r2}
 80036d0:	f001 fdaf 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80036d4:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80036d8:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8003a24 <_ZN3jlb5GraphC1Ev+0x205c>
 80036dc:	2200      	movs	r2, #0
 80036de:	214a      	movs	r1, #74	; 0x4a
 80036e0:	4620      	mov	r0, r4
 80036e2:	f7fe f92b 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80036e6:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fd54 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80036f0:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80036f4:	4618      	mov	r0, r3
 80036f6:	f011 ff10 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 80036fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003702:	214c      	movs	r1, #76	; 0x4c
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	f001 fb85 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800370a:	4604      	mov	r4, r0
 800370c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003710:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8003714:	4ac2      	ldr	r2, [pc, #776]	; (8003a20 <_ZN3jlb5GraphC1Ev+0x2058>)
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	4611      	mov	r1, r2
 800371a:	8019      	strh	r1, [r3, #0]
 800371c:	3302      	adds	r3, #2
 800371e:	0c12      	lsrs	r2, r2, #16
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003726:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 800372a:	f207 7264 	addw	r2, r7, #1892	; 0x764
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003734:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8003738:	2203      	movs	r2, #3
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8003740:	4618      	mov	r0, r3
 8003742:	f011 fee8 	bl	8015516 <_ZNSaIcEC1Ev>
 8003746:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800374a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800374e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8003752:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8003756:	ca06      	ldmia	r2, {r1, r2}
 8003758:	f001 fd6b 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800375c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8003760:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8003a24 <_ZN3jlb5GraphC1Ev+0x205c>
 8003764:	2201      	movs	r2, #1
 8003766:	214f      	movs	r1, #79	; 0x4f
 8003768:	4620      	mov	r0, r4
 800376a:	f7fe f8e7 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800376e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fd10 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003778:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800377c:	4618      	mov	r0, r3
 800377e:	f011 fecc 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 8003782:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003786:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800378a:	214c      	movs	r1, #76	; 0x4c
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	f001 fb41 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003792:	4604      	mov	r4, r0
 8003794:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003798:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800379c:	4aa2      	ldr	r2, [pc, #648]	; (8003a28 <_ZN3jlb5GraphC1Ev+0x2060>)
 800379e:	8812      	ldrh	r2, [r2, #0]
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80037a6:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80037aa:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80037b4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80037b8:	2202      	movs	r2, #2
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80037c0:	4618      	mov	r0, r3
 80037c2:	f011 fea8 	bl	8015516 <_ZNSaIcEC1Ev>
 80037c6:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80037ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80037ce:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 80037d2:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 80037d6:	ca06      	ldmia	r2, {r1, r2}
 80037d8:	f001 fd2b 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80037dc:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80037e0:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8003a24 <_ZN3jlb5GraphC1Ev+0x205c>
 80037e4:	2200      	movs	r2, #0
 80037e6:	214e      	movs	r1, #78	; 0x4e
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7fe f8a7 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80037ee:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 fcd0 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80037f8:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80037fc:	4618      	mov	r0, r3
 80037fe:	f011 fe8c 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8003802:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003806:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800380a:	214d      	movs	r1, #77	; 0x4d
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	f001 fb01 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003812:	4604      	mov	r4, r0
 8003814:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003818:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800381c:	4a83      	ldr	r2, [pc, #524]	; (8003a2c <_ZN3jlb5GraphC1Ev+0x2064>)
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	4611      	mov	r1, r2
 8003822:	8019      	strh	r1, [r3, #0]
 8003824:	3302      	adds	r3, #2
 8003826:	0c12      	lsrs	r2, r2, #16
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800382e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003832:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800383c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003840:	2203      	movs	r2, #3
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8003848:	4618      	mov	r0, r3
 800384a:	f011 fe64 	bl	8015516 <_ZNSaIcEC1Ev>
 800384e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8003852:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003856:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 800385a:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 800385e:	ca06      	ldmia	r2, {r1, r2}
 8003860:	f001 fce7 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003864:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8003868:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8003a30 <_ZN3jlb5GraphC1Ev+0x2068>
 800386c:	2202      	movs	r2, #2
 800386e:	2148      	movs	r1, #72	; 0x48
 8003870:	4620      	mov	r0, r4
 8003872:	f7fe f863 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003876:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fc8c 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003880:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8003884:	4618      	mov	r0, r3
 8003886:	f011 fe48 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 800388a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800388e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003892:	214d      	movs	r1, #77	; 0x4d
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	f001 fabd 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800389a:	4604      	mov	r4, r0
 800389c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038a0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80038a4:	4a61      	ldr	r2, [pc, #388]	; (8003a2c <_ZN3jlb5GraphC1Ev+0x2064>)
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	4611      	mov	r1, r2
 80038aa:	8019      	strh	r1, [r3, #0]
 80038ac:	3302      	adds	r3, #2
 80038ae:	0c12      	lsrs	r2, r2, #16
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038b6:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80038ba:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038c4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80038c8:	2203      	movs	r2, #3
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80038d0:	4618      	mov	r0, r3
 80038d2:	f011 fe20 	bl	8015516 <_ZNSaIcEC1Ev>
 80038d6:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80038da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80038de:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 80038e2:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 80038e6:	ca06      	ldmia	r2, {r1, r2}
 80038e8:	f001 fca3 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80038ec:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80038f0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8003a24 <_ZN3jlb5GraphC1Ev+0x205c>
 80038f4:	2201      	movs	r2, #1
 80038f6:	214b      	movs	r1, #75	; 0x4b
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7fe f81f 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80038fe:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fc48 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003908:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 800390c:	4618      	mov	r0, r3
 800390e:	f011 fe04 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8003912:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003916:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800391a:	214d      	movs	r1, #77	; 0x4d
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	f001 fa79 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003922:	4604      	mov	r4, r0
 8003924:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003928:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800392c:	4a41      	ldr	r2, [pc, #260]	; (8003a34 <_ZN3jlb5GraphC1Ev+0x206c>)
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	801a      	strh	r2, [r3, #0]
 8003932:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003936:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800393a:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003944:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8003948:	2202      	movs	r2, #2
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8003950:	4618      	mov	r0, r3
 8003952:	f011 fde0 	bl	8015516 <_ZNSaIcEC1Ev>
 8003956:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800395a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800395e:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8003962:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8003966:	ca06      	ldmia	r2, {r1, r2}
 8003968:	f001 fc63 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800396c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8003970:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003a24 <_ZN3jlb5GraphC1Ev+0x205c>
 8003974:	2200      	movs	r2, #0
 8003976:	2152      	movs	r1, #82	; 0x52
 8003978:	4620      	mov	r0, r4
 800397a:	f7fd ffdf 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800397e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fc08 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003988:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800398c:	4618      	mov	r0, r3
 800398e:	f011 fdc4 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 8003992:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003996:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800399a:	214d      	movs	r1, #77	; 0x4d
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	f001 fa39 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80039a2:	4604      	mov	r4, r0
 80039a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039a8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80039ac:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <_ZN3jlb5GraphC1Ev+0x206c>)
 80039ae:	8812      	ldrh	r2, [r2, #0]
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039b6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80039ba:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039c4:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80039c8:	2202      	movs	r2, #2
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80039d0:	4618      	mov	r0, r3
 80039d2:	f011 fda0 	bl	8015516 <_ZNSaIcEC1Ev>
 80039d6:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80039da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80039de:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 80039e2:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 80039e6:	ca06      	ldmia	r2, {r1, r2}
 80039e8:	f001 fc23 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80039ec:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 80039f0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003a38 <_ZN3jlb5GraphC1Ev+0x2070>
 80039f4:	2202      	movs	r2, #2
 80039f6:	2151      	movs	r1, #81	; 0x51
 80039f8:	4620      	mov	r0, r4
 80039fa:	f7fd ff9f 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80039fe:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fbc8 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003a08:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f011 fd84 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8003a12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003a1a:	214d      	movs	r1, #77	; 0x4d
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	e00d      	b.n	8003a3c <_ZN3jlb5GraphC1Ev+0x2074>
 8003a20:	080165a0 	.word	0x080165a0
 8003a24:	3f71463a 	.word	0x3f71463a
 8003a28:	0801659c 	.word	0x0801659c
 8003a2c:	080165a4 	.word	0x080165a4
 8003a30:	3f99999a 	.word	0x3f99999a
 8003a34:	080165a8 	.word	0x080165a8
 8003a38:	3f19999a 	.word	0x3f19999a
 8003a3c:	f001 f9ea 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003a40:	4604      	mov	r4, r0
 8003a42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a46:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8003a4a:	4ae5      	ldr	r2, [pc, #916]	; (8003de0 <_ZN3jlb5GraphC1Ev+0x2418>)
 8003a4c:	8812      	ldrh	r2, [r2, #0]
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a54:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003a58:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a62:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003a66:	2202      	movs	r2, #2
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f011 fd51 	bl	8015516 <_ZNSaIcEC1Ev>
 8003a74:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003a78:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003a7c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8003a80:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 8003a84:	ca06      	ldmia	r2, {r1, r2}
 8003a86:	f001 fbd4 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003a8a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003a8e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8003de4 <_ZN3jlb5GraphC1Ev+0x241c>
 8003a92:	2201      	movs	r2, #1
 8003a94:	2150      	movs	r1, #80	; 0x50
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7fd ff50 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003a9c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 fb79 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003aa6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f011 fd35 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8003ab0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ab4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003ab8:	214e      	movs	r1, #78	; 0x4e
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	f001 f9aa 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ac6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8003aca:	4ac7      	ldr	r2, [pc, #796]	; (8003de8 <_ZN3jlb5GraphC1Ev+0x2420>)
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	8019      	strh	r1, [r3, #0]
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	0c12      	lsrs	r2, r2, #16
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003adc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8003ae0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003aea:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8003aee:	2203      	movs	r2, #3
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8003af6:	4618      	mov	r0, r3
 8003af8:	f011 fd0d 	bl	8015516 <_ZNSaIcEC1Ev>
 8003afc:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8003b00:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003b04:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8003b08:	f607 0014 	addw	r0, r7, #2068	; 0x814
 8003b0c:	ca06      	ldmia	r2, {r1, r2}
 8003b0e:	f001 fb90 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003b12:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8003b16:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8003de4 <_ZN3jlb5GraphC1Ev+0x241c>
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	214b      	movs	r1, #75	; 0x4b
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7fd ff0c 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003b24:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fb35 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003b2e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8003b32:	4618      	mov	r0, r3
 8003b34:	f011 fcf1 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8003b38:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b3c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003b40:	214e      	movs	r1, #78	; 0x4e
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	f001 f966 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b4e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8003b52:	4aa5      	ldr	r2, [pc, #660]	; (8003de8 <_ZN3jlb5GraphC1Ev+0x2420>)
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	4611      	mov	r1, r2
 8003b58:	8019      	strh	r1, [r3, #0]
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	0c12      	lsrs	r2, r2, #16
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b64:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8003b68:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b72:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8003b76:	2203      	movs	r2, #3
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f011 fcc9 	bl	8015516 <_ZNSaIcEC1Ev>
 8003b84:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8003b88:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003b8c:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8003b90:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 8003b94:	ca06      	ldmia	r2, {r1, r2}
 8003b96:	f001 fb4c 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003b9a:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8003b9e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8003dec <_ZN3jlb5GraphC1Ev+0x2424>
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	2149      	movs	r1, #73	; 0x49
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7fd fec8 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003bac:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 faf1 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003bb6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f011 fcad 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8003bc0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bc4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003bc8:	214e      	movs	r1, #78	; 0x4e
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	f001 f922 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bd6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003bda:	4a83      	ldr	r2, [pc, #524]	; (8003de8 <_ZN3jlb5GraphC1Ev+0x2420>)
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	4611      	mov	r1, r2
 8003be0:	8019      	strh	r1, [r3, #0]
 8003be2:	3302      	adds	r3, #2
 8003be4:	0c12      	lsrs	r2, r2, #16
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bec:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003bf0:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bfa:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003bfe:	2203      	movs	r2, #3
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8003c06:	4618      	mov	r0, r3
 8003c08:	f011 fc85 	bl	8015516 <_ZNSaIcEC1Ev>
 8003c0c:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8003c10:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003c14:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8003c18:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 8003c1c:	ca06      	ldmia	r2, {r1, r2}
 8003c1e:	f001 fb08 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003c22:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8003c26:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8003de4 <_ZN3jlb5GraphC1Ev+0x241c>
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	214c      	movs	r1, #76	; 0x4c
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7fd fe84 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003c34:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 faad 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003c3e:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8003c42:	4618      	mov	r0, r3
 8003c44:	f011 fc69 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8003c48:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c4c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003c50:	214e      	movs	r1, #78	; 0x4e
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	f001 f8de 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003c58:	4604      	mov	r4, r0
 8003c5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c5e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8003c62:	4a63      	ldr	r2, [pc, #396]	; (8003df0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	4611      	mov	r1, r2
 8003c68:	8019      	strh	r1, [r3, #0]
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	0c12      	lsrs	r2, r2, #16
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c74:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8003c78:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c82:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8003c86:	2203      	movs	r2, #3
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f011 fc41 	bl	8015516 <_ZNSaIcEC1Ev>
 8003c94:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003c98:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003c9c:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8003ca0:	f607 0068 	addw	r0, r7, #2152	; 0x868
 8003ca4:	ca06      	ldmia	r2, {r1, r2}
 8003ca6:	f001 fac4 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003caa:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8003cae:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8003de4 <_ZN3jlb5GraphC1Ev+0x241c>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2154      	movs	r1, #84	; 0x54
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7fd fe40 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003cbc:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fa69 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003cc6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f011 fc25 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 8003cd0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003cd4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003cd8:	214e      	movs	r1, #78	; 0x4e
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	f001 f89a 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ce6:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8003cea:	4a41      	ldr	r2, [pc, #260]	; (8003df0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	4611      	mov	r1, r2
 8003cf0:	8019      	strh	r1, [r3, #0]
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	0c12      	lsrs	r2, r2, #16
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003cfc:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8003d00:	f607 0298 	addw	r2, r7, #2200	; 0x898
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d0a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8003d0e:	2203      	movs	r2, #3
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8003d16:	4618      	mov	r0, r3
 8003d18:	f011 fbfd 	bl	8015516 <_ZNSaIcEC1Ev>
 8003d1c:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8003d20:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003d24:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003d28:	f607 0084 	addw	r0, r7, #2180	; 0x884
 8003d2c:	ca06      	ldmia	r2, {r1, r2}
 8003d2e:	f001 fa80 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003d32:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8003d36:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003df4 <_ZN3jlb5GraphC1Ev+0x242c>
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	2153      	movs	r1, #83	; 0x53
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f7fd fdfc 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003d44:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 fa25 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003d4e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8003d52:	4618      	mov	r0, r3
 8003d54:	f011 fbe1 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8003d58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d5c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003d60:	214e      	movs	r1, #78	; 0x4e
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	f001 f856 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003d68:	4604      	mov	r4, r0
 8003d6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d6e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8003d72:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	4611      	mov	r1, r2
 8003d78:	8019      	strh	r1, [r3, #0]
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	0c12      	lsrs	r2, r2, #16
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d84:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8003d88:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d92:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8003d96:	2203      	movs	r2, #3
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f011 fbb9 	bl	8015516 <_ZNSaIcEC1Ev>
 8003da4:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8003da8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003dac:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8003db0:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 8003db4:	ca06      	ldmia	r2, {r1, r2}
 8003db6:	f001 fa3c 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003dba:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8003dbe:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003de4 <_ZN3jlb5GraphC1Ev+0x241c>
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	2152      	movs	r1, #82	; 0x52
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7fd fdb8 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003dcc:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 f9e1 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003dd6:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8003dda:	4618      	mov	r0, r3
 8003ddc:	e00c      	b.n	8003df8 <_ZN3jlb5GraphC1Ev+0x2430>
 8003dde:	bf00      	nop
 8003de0:	080165a8 	.word	0x080165a8
 8003de4:	3f71463a 	.word	0x3f71463a
 8003de8:	080165ac 	.word	0x080165ac
 8003dec:	3f99999a 	.word	0x3f99999a
 8003df0:	080165b0 	.word	0x080165b0
 8003df4:	3f19999a 	.word	0x3f19999a
 8003df8:	f011 fb8f 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 8003dfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e00:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003e04:	214f      	movs	r1, #79	; 0x4f
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	f001 f804 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e12:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8003e16:	4aeb      	ldr	r2, [pc, #940]	; (80041c4 <_ZN3jlb5GraphC1Ev+0x27fc>)
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	8019      	strh	r1, [r3, #0]
 8003e1e:	3302      	adds	r3, #2
 8003e20:	0c12      	lsrs	r2, r2, #16
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e28:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8003e2c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e36:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f011 fb67 	bl	8015516 <_ZNSaIcEC1Ev>
 8003e48:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8003e4c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003e50:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8003e54:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8003e58:	ca06      	ldmia	r2, {r1, r2}
 8003e5a:	f001 f9ea 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003e5e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8003e62:	ed9f 0adc 	vldr	s0, [pc, #880]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x280c>
 8003e66:	2200      	movs	r2, #0
 8003e68:	214c      	movs	r1, #76	; 0x4c
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f7fd fd66 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003e70:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 f98f 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003e7a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f011 fb4b 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8003e84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e88:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003e8c:	214f      	movs	r1, #79	; 0x4f
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	f000 ffc0 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003e94:	4604      	mov	r4, r0
 8003e96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e9a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8003e9e:	224c      	movs	r2, #76	; 0x4c
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ea6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8003eaa:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003eb4:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8003eb8:	2201      	movs	r2, #1
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f011 fb28 	bl	8015516 <_ZNSaIcEC1Ev>
 8003ec6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003eca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003ece:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8003ed2:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 8003ed6:	ca06      	ldmia	r2, {r1, r2}
 8003ed8:	f001 f9ab 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003edc:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8003ee0:	ed9f 0abc 	vldr	s0, [pc, #752]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x280c>
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2155      	movs	r1, #85	; 0x55
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7fd fd27 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003eee:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 f950 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003ef8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f011 fb0c 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 8003f02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003f0a:	214f      	movs	r1, #79	; 0x4f
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	f000 ff81 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003f12:	4604      	mov	r4, r0
 8003f14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f18:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8003f1c:	224c      	movs	r2, #76	; 0x4c
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f24:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8003f28:	f607 1208 	addw	r2, r7, #2312	; 0x908
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f32:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8003f36:	2201      	movs	r2, #1
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f011 fae9 	bl	8015516 <_ZNSaIcEC1Ev>
 8003f44:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8003f48:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003f4c:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8003f50:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8003f54:	ca06      	ldmia	r2, {r1, r2}
 8003f56:	f001 f96c 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003f5a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8003f5e:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80041c8 <_ZN3jlb5GraphC1Ev+0x2800>
 8003f62:	2202      	movs	r2, #2
 8003f64:	2157      	movs	r1, #87	; 0x57
 8003f66:	4620      	mov	r0, r4
 8003f68:	f7fd fce8 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003f6c:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f911 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003f76:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f011 facd 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 8003f80:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f84:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003f88:	214f      	movs	r1, #79	; 0x4f
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	f000 ff42 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8003f90:	4604      	mov	r4, r0
 8003f92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f96:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8003f9a:	224c      	movs	r2, #76	; 0x4c
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fa2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8003fa6:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fb0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f011 faaa 	bl	8015516 <_ZNSaIcEC1Ev>
 8003fc2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003fc6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003fca:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8003fce:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 8003fd2:	ca06      	ldmia	r2, {r1, r2}
 8003fd4:	f001 f92d 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003fd8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8003fdc:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x280c>
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2154      	movs	r1, #84	; 0x54
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7fd fca9 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003fea:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 f8d2 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8003ff4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f011 fa8e 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8003ffe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004002:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004006:	2150      	movs	r1, #80	; 0x50
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f000 ff03 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800400e:	4604      	mov	r4, r0
 8004010:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004014:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8004018:	2250      	movs	r2, #80	; 0x50
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004020:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8004024:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800402e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8004032:	2201      	movs	r2, #1
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	f607 1344 	addw	r3, r7, #2372	; 0x944
 800403a:	4618      	mov	r0, r3
 800403c:	f011 fa6b 	bl	8015516 <_ZNSaIcEC1Ev>
 8004040:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8004044:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004048:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 800404c:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8004050:	ca06      	ldmia	r2, {r1, r2}
 8004052:	f001 f8ee 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004056:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 800405a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x280c>
 800405e:	2200      	movs	r2, #0
 8004060:	214d      	movs	r1, #77	; 0x4d
 8004062:	4620      	mov	r0, r4
 8004064:	f7fd fc6a 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004068:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 800406c:	4618      	mov	r0, r3
 800406e:	f001 f893 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004072:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8004076:	4618      	mov	r0, r3
 8004078:	f011 fa4f 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 800407c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004080:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004084:	2150      	movs	r1, #80	; 0x50
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f000 fec4 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800408c:	4604      	mov	r4, r0
 800408e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004092:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8004096:	2250      	movs	r2, #80	; 0x50
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800409e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80040a2:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040ac:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80040b0:	2201      	movs	r2, #1
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80040b8:	4618      	mov	r0, r3
 80040ba:	f011 fa2c 	bl	8015516 <_ZNSaIcEC1Ev>
 80040be:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80040c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80040c6:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80040ca:	f607 1048 	addw	r0, r7, #2376	; 0x948
 80040ce:	ca06      	ldmia	r2, {r1, r2}
 80040d0:	f001 f8af 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80040d4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80040d8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80041d0 <_ZN3jlb5GraphC1Ev+0x2808>
 80040dc:	2202      	movs	r2, #2
 80040de:	2151      	movs	r1, #81	; 0x51
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fd fc2b 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80040e6:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f854 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 80040f0:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80040f4:	4618      	mov	r0, r3
 80040f6:	f011 fa10 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 80040fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004102:	2151      	movs	r1, #81	; 0x51
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	f000 fe85 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800410a:	4604      	mov	r4, r0
 800410c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004110:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8004114:	2252      	movs	r2, #82	; 0x52
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800411c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8004120:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800412a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800412e:	2201      	movs	r2, #1
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8004136:	4618      	mov	r0, r3
 8004138:	f011 f9ed 	bl	8015516 <_ZNSaIcEC1Ev>
 800413c:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8004140:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004144:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8004148:	f607 1064 	addw	r0, r7, #2404	; 0x964
 800414c:	ca06      	ldmia	r2, {r1, r2}
 800414e:	f001 f870 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004152:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8004156:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80041d0 <_ZN3jlb5GraphC1Ev+0x2808>
 800415a:	2202      	movs	r2, #2
 800415c:	2150      	movs	r1, #80	; 0x50
 800415e:	4620      	mov	r0, r4
 8004160:	f7fd fbec 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004164:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8004168:	4618      	mov	r0, r3
 800416a:	f001 f815 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 800416e:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8004172:	4618      	mov	r0, r3
 8004174:	f011 f9d1 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8004178:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800417c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004180:	2151      	movs	r1, #81	; 0x51
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	f000 fe46 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004188:	4604      	mov	r4, r0
 800418a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800418e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8004192:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <_ZN3jlb5GraphC1Ev+0x2804>)
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800419c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80041a0:	f607 1294 	addw	r2, r7, #2452	; 0x994
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80041aa:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80041ae:	2202      	movs	r2, #2
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80041b6:	4618      	mov	r0, r3
 80041b8:	f011 f9ad 	bl	8015516 <_ZNSaIcEC1Ev>
 80041bc:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80041c0:	e00c      	b.n	80041dc <_ZN3jlb5GraphC1Ev+0x2814>
 80041c2:	bf00      	nop
 80041c4:	080165b4 	.word	0x080165b4
 80041c8:	3fc56fea 	.word	0x3fc56fea
 80041cc:	080165b8 	.word	0x080165b8
 80041d0:	3f19999a 	.word	0x3f19999a
 80041d4:	3f71463a 	.word	0x3f71463a
 80041d8:	401c518f 	.word	0x401c518f
 80041dc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80041e0:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 80041e4:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 80041e8:	ca06      	ldmia	r2, {r1, r2}
 80041ea:	f001 f822 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80041ee:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80041f2:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 80041d0 <_ZN3jlb5GraphC1Ev+0x2808>
 80041f6:	2202      	movs	r2, #2
 80041f8:	214d      	movs	r1, #77	; 0x4d
 80041fa:	4620      	mov	r0, r4
 80041fc:	f7fd fb9e 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004200:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8004204:	4618      	mov	r0, r3
 8004206:	f000 ffc7 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 800420a:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800420e:	4618      	mov	r0, r3
 8004210:	f011 f983 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 8004214:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004218:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800421c:	2151      	movs	r1, #81	; 0x51
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	f000 fdf8 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004224:	4604      	mov	r4, r0
 8004226:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800422a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800422e:	2250      	movs	r2, #80	; 0x50
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004236:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800423a:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004244:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8004248:	2201      	movs	r2, #1
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8004250:	4618      	mov	r0, r3
 8004252:	f011 f960 	bl	8015516 <_ZNSaIcEC1Ev>
 8004256:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 800425a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800425e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8004262:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8004266:	ca06      	ldmia	r2, {r1, r2}
 8004268:	f000 ffe3 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800426c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8004270:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 80041d0 <_ZN3jlb5GraphC1Ev+0x2808>
 8004274:	2202      	movs	r2, #2
 8004276:	2152      	movs	r1, #82	; 0x52
 8004278:	4620      	mov	r0, r4
 800427a:	f7fd fb5f 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800427e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8004282:	4618      	mov	r0, r3
 8004284:	f000 ff88 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004288:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 800428c:	4618      	mov	r0, r3
 800428e:	f011 f944 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8004292:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004296:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800429a:	2151      	movs	r1, #81	; 0x51
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	f000 fdb9 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80042a2:	4604      	mov	r4, r0
 80042a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042a8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80042ac:	224d      	movs	r2, #77	; 0x4d
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042b4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80042b8:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042c2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80042c6:	2201      	movs	r2, #1
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f011 f921 	bl	8015516 <_ZNSaIcEC1Ev>
 80042d4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80042d8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80042dc:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80042e0:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 80042e4:	ca06      	ldmia	r2, {r1, r2}
 80042e6:	f000 ffa4 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80042ea:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80042ee:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x280c>
 80042f2:	2200      	movs	r2, #0
 80042f4:	2156      	movs	r1, #86	; 0x56
 80042f6:	4620      	mov	r0, r4
 80042f8:	f7fd fb20 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80042fc:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8004300:	4618      	mov	r0, r3
 8004302:	f000 ff49 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004306:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800430a:	4618      	mov	r0, r3
 800430c:	f011 f905 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8004310:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004314:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004318:	2151      	movs	r1, #81	; 0x51
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	f000 fd7a 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004320:	4604      	mov	r4, r0
 8004322:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004326:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800432a:	224d      	movs	r2, #77	; 0x4d
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004332:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8004336:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004340:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8004344:	2201      	movs	r2, #1
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 800434c:	4618      	mov	r0, r3
 800434e:	f011 f8e2 	bl	8015516 <_ZNSaIcEC1Ev>
 8004352:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8004356:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800435a:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 800435e:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 8004362:	ca06      	ldmia	r2, {r1, r2}
 8004364:	f000 ff65 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004368:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 800436c:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 80041d8 <_ZN3jlb5GraphC1Ev+0x2810>
 8004370:	2202      	movs	r2, #2
 8004372:	2158      	movs	r1, #88	; 0x58
 8004374:	4620      	mov	r0, r4
 8004376:	f7fd fae1 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800437a:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 800437e:	4618      	mov	r0, r3
 8004380:	f000 ff0a 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004384:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8004388:	4618      	mov	r0, r3
 800438a:	f011 f8c6 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 800438e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004392:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004396:	2152      	movs	r1, #82	; 0x52
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	f000 fd3b 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800439e:	4604      	mov	r4, r0
 80043a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043a4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80043a8:	4ae6      	ldr	r2, [pc, #920]	; (8004744 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 80043aa:	8812      	ldrh	r2, [r2, #0]
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043b2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80043b6:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043c0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80043c4:	2202      	movs	r2, #2
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80043cc:	4618      	mov	r0, r3
 80043ce:	f011 f8a2 	bl	8015516 <_ZNSaIcEC1Ev>
 80043d2:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80043d6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80043da:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 80043de:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 80043e2:	ca06      	ldmia	r2, {r1, r2}
 80043e4:	f000 ff25 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80043e8:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80043ec:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8004748 <_ZN3jlb5GraphC1Ev+0x2d80>
 80043f0:	2202      	movs	r2, #2
 80043f2:	2151      	movs	r1, #81	; 0x51
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7fd faa1 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80043fa:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 feca 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004404:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8004408:	4618      	mov	r0, r3
 800440a:	f011 f886 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 800440e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004412:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004416:	2152      	movs	r1, #82	; 0x52
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	f000 fcfb 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800441e:	4604      	mov	r4, r0
 8004420:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004424:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8004428:	4ac6      	ldr	r2, [pc, #792]	; (8004744 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	801a      	strh	r2, [r3, #0]
 800442e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004432:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8004436:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004440:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8004444:	2202      	movs	r2, #2
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 800444c:	4618      	mov	r0, r3
 800444e:	f011 f862 	bl	8015516 <_ZNSaIcEC1Ev>
 8004452:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8004456:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800445a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 800445e:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 8004462:	ca06      	ldmia	r2, {r1, r2}
 8004464:	f000 fee5 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004468:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 800446c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004754 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004470:	2201      	movs	r2, #1
 8004472:	214d      	movs	r1, #77	; 0x4d
 8004474:	4620      	mov	r0, r4
 8004476:	f7fd fa61 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800447a:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fe8a 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004484:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8004488:	4618      	mov	r0, r3
 800448a:	f011 f846 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 800448e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004492:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004496:	2152      	movs	r1, #82	; 0x52
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f000 fcbb 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800449e:	4604      	mov	r4, r0
 80044a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044a4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80044a8:	4aa8      	ldr	r2, [pc, #672]	; (800474c <_ZN3jlb5GraphC1Ev+0x2d84>)
 80044aa:	8812      	ldrh	r2, [r2, #0]
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044b2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80044b6:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044c0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80044c4:	2202      	movs	r2, #2
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044cc:	4618      	mov	r0, r3
 80044ce:	f011 f822 	bl	8015516 <_ZNSaIcEC1Ev>
 80044d2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044d6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80044da:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 80044de:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 80044e2:	ca06      	ldmia	r2, {r1, r2}
 80044e4:	f000 fea5 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80044e8:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80044ec:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8004754 <_ZN3jlb5GraphC1Ev+0x2d8c>
 80044f0:	2200      	movs	r2, #0
 80044f2:	214e      	movs	r1, #78	; 0x4e
 80044f4:	4620      	mov	r0, r4
 80044f6:	f7fd fa21 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80044fa:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fe4a 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004504:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004508:	4618      	mov	r0, r3
 800450a:	f011 f806 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 800450e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004512:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004516:	2152      	movs	r1, #82	; 0x52
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	f000 fc7b 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800451e:	4604      	mov	r4, r0
 8004520:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004524:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8004528:	4a88      	ldr	r2, [pc, #544]	; (800474c <_ZN3jlb5GraphC1Ev+0x2d84>)
 800452a:	8812      	ldrh	r2, [r2, #0]
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004532:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004536:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004540:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004544:	2202      	movs	r2, #2
 8004546:	605a      	str	r2, [r3, #4]
 8004548:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 800454c:	4618      	mov	r0, r3
 800454e:	f010 ffe2 	bl	8015516 <_ZNSaIcEC1Ev>
 8004552:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8004556:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800455a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800455e:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 8004562:	ca06      	ldmia	r2, {r1, r2}
 8004564:	f000 fe65 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004568:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800456c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8004748 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004570:	2202      	movs	r2, #2
 8004572:	2153      	movs	r1, #83	; 0x53
 8004574:	4620      	mov	r0, r4
 8004576:	f7fd f9e1 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800457a:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fe0a 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004584:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8004588:	4618      	mov	r0, r3
 800458a:	f010 ffc6 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 800458e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004592:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004596:	2153      	movs	r1, #83	; 0x53
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f000 fc3b 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800459e:	4604      	mov	r4, r0
 80045a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045a4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80045a8:	2254      	movs	r2, #84	; 0x54
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045b4:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c2:	2201      	movs	r2, #1
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80045ca:	4618      	mov	r0, r3
 80045cc:	f010 ffa3 	bl	8015516 <_ZNSaIcEC1Ev>
 80045d0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80045d4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80045d8:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 80045dc:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 80045e0:	ca06      	ldmia	r2, {r1, r2}
 80045e2:	f000 fe26 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80045e6:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80045ea:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8004748 <_ZN3jlb5GraphC1Ev+0x2d80>
 80045ee:	2202      	movs	r2, #2
 80045f0:	2152      	movs	r1, #82	; 0x52
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7fd f9a2 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80045f8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fdcb 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004602:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004606:	4618      	mov	r0, r3
 8004608:	f010 ff87 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 800460c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004610:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004614:	2153      	movs	r1, #83	; 0x53
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	f000 fbfc 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800461c:	4604      	mov	r4, r0
 800461e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004622:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004626:	4a4a      	ldr	r2, [pc, #296]	; (8004750 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8004628:	8812      	ldrh	r2, [r2, #0]
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004630:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004634:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800463e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004642:	2202      	movs	r2, #2
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 800464a:	4618      	mov	r0, r3
 800464c:	f010 ff63 	bl	8015516 <_ZNSaIcEC1Ev>
 8004650:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8004654:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004658:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800465c:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8004660:	ca06      	ldmia	r2, {r1, r2}
 8004662:	f000 fde6 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004666:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800466a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004748 <_ZN3jlb5GraphC1Ev+0x2d80>
 800466e:	2202      	movs	r2, #2
 8004670:	214e      	movs	r1, #78	; 0x4e
 8004672:	4620      	mov	r0, r4
 8004674:	f7fd f962 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004678:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fd8b 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004682:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8004686:	4618      	mov	r0, r3
 8004688:	f010 ff47 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 800468c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004690:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004694:	2153      	movs	r1, #83	; 0x53
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	f000 fbbc 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800469c:	4604      	mov	r4, r0
 800469e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046a2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80046a6:	2252      	movs	r2, #82	; 0x52
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80046b2:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046bc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80046c0:	2201      	movs	r2, #1
 80046c2:	605a      	str	r2, [r3, #4]
 80046c4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f010 ff24 	bl	8015516 <_ZNSaIcEC1Ev>
 80046ce:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80046d2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80046d6:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80046da:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 80046de:	ca06      	ldmia	r2, {r1, r2}
 80046e0:	f000 fda7 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80046e4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80046e8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8004748 <_ZN3jlb5GraphC1Ev+0x2d80>
 80046ec:	2202      	movs	r2, #2
 80046ee:	2154      	movs	r1, #84	; 0x54
 80046f0:	4620      	mov	r0, r4
 80046f2:	f7fd f923 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80046f6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fd4c 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004700:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004704:	4618      	mov	r0, r3
 8004706:	f010 ff08 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 800470a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800470e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004712:	2153      	movs	r1, #83	; 0x53
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f000 fb7d 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800471a:	4604      	mov	r4, r0
 800471c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004720:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004724:	224e      	movs	r2, #78	; 0x4e
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800472c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004730:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800473a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800473e:	2201      	movs	r2, #1
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	e009      	b.n	8004758 <_ZN3jlb5GraphC1Ev+0x2d90>
 8004744:	080165bc 	.word	0x080165bc
 8004748:	3f19999a 	.word	0x3f19999a
 800474c:	080165c0 	.word	0x080165c0
 8004750:	080165c4 	.word	0x080165c4
 8004754:	3f71463a 	.word	0x3f71463a
 8004758:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 800475c:	4618      	mov	r0, r3
 800475e:	f010 feda 	bl	8015516 <_ZNSaIcEC1Ev>
 8004762:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8004766:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800476a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800476e:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8004772:	ca06      	ldmia	r2, {r1, r2}
 8004774:	f000 fd5d 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004778:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800477c:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8004754 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004780:	2200      	movs	r2, #0
 8004782:	2157      	movs	r1, #87	; 0x57
 8004784:	4620      	mov	r0, r4
 8004786:	f7fd f8d9 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800478a:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fd02 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004794:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8004798:	4618      	mov	r0, r3
 800479a:	f010 febe 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 800479e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047a2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80047a6:	2153      	movs	r1, #83	; 0x53
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	f000 fb33 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80047ae:	4604      	mov	r4, r0
 80047b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047b8:	224e      	movs	r2, #78	; 0x4e
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047c4:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047d2:	2201      	movs	r2, #1
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80047da:	4618      	mov	r0, r3
 80047dc:	f010 fe9b 	bl	8015516 <_ZNSaIcEC1Ev>
 80047e0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80047e4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80047e8:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 80047ec:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 80047f0:	ca06      	ldmia	r2, {r1, r2}
 80047f2:	f000 fd1e 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80047f6:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80047fa:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8004754 <_ZN3jlb5GraphC1Ev+0x2d8c>
 80047fe:	2201      	movs	r2, #1
 8004800:	2156      	movs	r1, #86	; 0x56
 8004802:	4620      	mov	r0, r4
 8004804:	f7fd f89a 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004808:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fcc3 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004812:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004816:	4618      	mov	r0, r3
 8004818:	f010 fe7f 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 800481c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004820:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004824:	2154      	movs	r1, #84	; 0x54
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	f000 faf4 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800482c:	4604      	mov	r4, r0
 800482e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004832:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004836:	4ae9      	ldr	r2, [pc, #932]	; (8004bdc <_ZN3jlb5GraphC1Ev+0x3214>)
 8004838:	8812      	ldrh	r2, [r2, #0]
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004840:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004844:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800484e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004852:	2202      	movs	r2, #2
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 800485a:	4618      	mov	r0, r3
 800485c:	f010 fe5b 	bl	8015516 <_ZNSaIcEC1Ev>
 8004860:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8004864:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004868:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 800486c:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8004870:	ca06      	ldmia	r2, {r1, r2}
 8004872:	f000 fcde 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004876:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800487a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8004be0 <_ZN3jlb5GraphC1Ev+0x3218>
 800487e:	2202      	movs	r2, #2
 8004880:	2153      	movs	r1, #83	; 0x53
 8004882:	4620      	mov	r0, r4
 8004884:	f7fd f85a 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004888:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fc83 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004892:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8004896:	4618      	mov	r0, r3
 8004898:	f010 fe3f 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 800489c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048a0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80048a4:	2154      	movs	r1, #84	; 0x54
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	f000 fab4 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80048ac:	4604      	mov	r4, r0
 80048ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80048b6:	4ac9      	ldr	r2, [pc, #804]	; (8004bdc <_ZN3jlb5GraphC1Ev+0x3214>)
 80048b8:	8812      	ldrh	r2, [r2, #0]
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048c0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048c4:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048d2:	2202      	movs	r2, #2
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80048da:	4618      	mov	r0, r3
 80048dc:	f010 fe1b 	bl	8015516 <_ZNSaIcEC1Ev>
 80048e0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80048e4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80048e8:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80048ec:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 80048f0:	ca06      	ldmia	r2, {r1, r2}
 80048f2:	f000 fc9e 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80048f6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80048fa:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8004bf0 <_ZN3jlb5GraphC1Ev+0x3228>
 80048fe:	2201      	movs	r2, #1
 8004900:	214e      	movs	r1, #78	; 0x4e
 8004902:	4620      	mov	r0, r4
 8004904:	f7fd f81a 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004908:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fc43 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004912:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8004916:	4618      	mov	r0, r3
 8004918:	f010 fdff 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 800491c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004920:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004924:	2154      	movs	r1, #84	; 0x54
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	f000 fa74 	bl	8004e14 <_ZN3jlb5GraphixEc>
 800492c:	4604      	mov	r4, r0
 800492e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004936:	4aab      	ldr	r2, [pc, #684]	; (8004be4 <_ZN3jlb5GraphC1Ev+0x321c>)
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004940:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004944:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800494e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004952:	2202      	movs	r2, #2
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800495a:	4618      	mov	r0, r3
 800495c:	f010 fddb 	bl	8015516 <_ZNSaIcEC1Ev>
 8004960:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8004964:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004968:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800496c:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8004970:	ca06      	ldmia	r2, {r1, r2}
 8004972:	f000 fc5e 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004976:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800497a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8004bf0 <_ZN3jlb5GraphC1Ev+0x3228>
 800497e:	2200      	movs	r2, #0
 8004980:	214f      	movs	r1, #79	; 0x4f
 8004982:	4620      	mov	r0, r4
 8004984:	f7fc ffda 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004988:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fc03 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004992:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8004996:	4618      	mov	r0, r3
 8004998:	f010 fdbf 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 800499c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049a0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80049a4:	2154      	movs	r1, #84	; 0x54
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	f000 fa34 	bl	8004e14 <_ZN3jlb5GraphixEc>
 80049ac:	4604      	mov	r4, r0
 80049ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049b6:	4a8b      	ldr	r2, [pc, #556]	; (8004be4 <_ZN3jlb5GraphC1Ev+0x321c>)
 80049b8:	8812      	ldrh	r2, [r2, #0]
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049c4:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049d2:	2202      	movs	r2, #2
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80049da:	4618      	mov	r0, r3
 80049dc:	f010 fd9b 	bl	8015516 <_ZNSaIcEC1Ev>
 80049e0:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80049e4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80049e8:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80049ec:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 80049f0:	ca06      	ldmia	r2, {r1, r2}
 80049f2:	f000 fc1e 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80049f6:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80049fa:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8004bec <_ZN3jlb5GraphC1Ev+0x3224>
 80049fe:	2202      	movs	r2, #2
 8004a00:	2155      	movs	r1, #85	; 0x55
 8004a02:	4620      	mov	r0, r4
 8004a04:	f7fc ff9a 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004a08:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fbc3 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004a12:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8004a16:	4618      	mov	r0, r3
 8004a18:	f010 fd7f 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 8004a1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a20:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a24:	2155      	movs	r1, #85	; 0x55
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	f000 f9f4 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	2355      	movs	r3, #85	; 0x55
 8004a30:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8004a34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a3c:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a46:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8004a52:	4618      	mov	r0, r3
 8004a54:	f010 fd5f 	bl	8015516 <_ZNSaIcEC1Ev>
 8004a58:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8004a5c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004a60:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004a64:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8004a68:	ca06      	ldmia	r2, {r1, r2}
 8004a6a:	f000 fbe2 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004a6e:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8004a72:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8004bec <_ZN3jlb5GraphC1Ev+0x3224>
 8004a76:	2202      	movs	r2, #2
 8004a78:	2154      	movs	r1, #84	; 0x54
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7fc ff5e 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004a80:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fb87 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004a8a:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f010 fd43 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 8004a94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a98:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a9c:	2155      	movs	r1, #85	; 0x55
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	f000 f9b8 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	2355      	movs	r3, #85	; 0x55
 8004aa8:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 8004aac:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8004ab0:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 8004aba:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f010 fd29 	bl	8015516 <_ZNSaIcEC1Ev>
 8004ac4:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8004ac8:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 8004acc:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8004ad0:	ca06      	ldmia	r2, {r1, r2}
 8004ad2:	f000 fbae 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004ad6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8004ada:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8004bf0 <_ZN3jlb5GraphC1Ev+0x3228>
 8004ade:	2201      	movs	r2, #1
 8004ae0:	214f      	movs	r1, #79	; 0x4f
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7fc ff2a 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ae8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fb53 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004af2:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8004af6:	4618      	mov	r0, r3
 8004af8:	f010 fd0f 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 8004afc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b00:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b04:	2156      	movs	r1, #86	; 0x56
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	f000 f984 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <_ZN3jlb5GraphC1Ev+0x3220>)
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8004b16:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8004b1a:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 8004b1e:	2302      	movs	r3, #2
 8004b20:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8004b24:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f010 fcf4 	bl	8015516 <_ZNSaIcEC1Ev>
 8004b2e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8004b32:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8004b36:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8004b3a:	ca06      	ldmia	r2, {r1, r2}
 8004b3c:	f000 fb79 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b40:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8004b44:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8004bf0 <_ZN3jlb5GraphC1Ev+0x3228>
 8004b48:	2201      	movs	r2, #1
 8004b4a:	2151      	movs	r1, #81	; 0x51
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7fc fef5 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004b52:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fb1e 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004b5c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8004b60:	4618      	mov	r0, r3
 8004b62:	f010 fcda 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 8004b66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b6a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b6e:	2156      	movs	r1, #86	; 0x56
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	f000 f94f 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004b76:	4604      	mov	r4, r0
 8004b78:	2351      	movs	r3, #81	; 0x51
 8004b7a:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 8004b7e:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 8004b82:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 8004b86:	2301      	movs	r3, #1
 8004b88:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 8004b8c:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8004b90:	4618      	mov	r0, r3
 8004b92:	f010 fcc0 	bl	8015516 <_ZNSaIcEC1Ev>
 8004b96:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8004b9a:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 8004b9e:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8004ba2:	ca06      	ldmia	r2, {r1, r2}
 8004ba4:	f000 fb45 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004ba8:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8004bac:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004bf0 <_ZN3jlb5GraphC1Ev+0x3228>
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2153      	movs	r1, #83	; 0x53
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7fc fec1 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004bba:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 faea 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004bc4:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f010 fca6 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 8004bce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bd2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004bd6:	2156      	movs	r1, #86	; 0x56
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	e00b      	b.n	8004bf4 <_ZN3jlb5GraphC1Ev+0x322c>
 8004bdc:	080165c8 	.word	0x080165c8
 8004be0:	3f19999a 	.word	0x3f19999a
 8004be4:	080165bc 	.word	0x080165bc
 8004be8:	080165cc 	.word	0x080165cc
 8004bec:	3f99999a 	.word	0x3f99999a
 8004bf0:	3f71463a 	.word	0x3f71463a
 8004bf4:	f000 f90e 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	2351      	movs	r3, #81	; 0x51
 8004bfc:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 8004c00:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8004c04:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8004c0e:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f010 fc7f 	bl	8015516 <_ZNSaIcEC1Ev>
 8004c18:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8004c1c:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8004c20:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8004c24:	ca06      	ldmia	r2, {r1, r2}
 8004c26:	f000 fb04 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c2a:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8004c2e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8004bec <_ZN3jlb5GraphC1Ev+0x3224>
 8004c32:	2202      	movs	r2, #2
 8004c34:	2157      	movs	r1, #87	; 0x57
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7fc fe80 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004c3c:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 faa9 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004c46:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f010 fc65 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8004c50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c54:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c58:	2157      	movs	r1, #87	; 0x57
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	f000 f8da 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004c60:	4604      	mov	r4, r0
 8004c62:	234f      	movs	r3, #79	; 0x4f
 8004c64:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8004c68:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 8004c6c:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8004c70:	2301      	movs	r3, #1
 8004c72:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 8004c76:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f010 fc4b 	bl	8015516 <_ZNSaIcEC1Ev>
 8004c80:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8004c84:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 8004c88:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 8004c8c:	ca06      	ldmia	r2, {r1, r2}
 8004c8e:	f000 fad0 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c92:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8004c96:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 8004bec <_ZN3jlb5GraphC1Ev+0x3224>
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	2156      	movs	r1, #86	; 0x56
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f7fc fe4c 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ca4:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fa75 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004cae:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f010 fc31 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 8004cb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cbc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004cc0:	2157      	movs	r1, #87	; 0x57
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	f000 f8a6 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	234f      	movs	r3, #79	; 0x4f
 8004ccc:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 8004cd0:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8004cd4:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 8004cde:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f010 fc17 	bl	8015516 <_ZNSaIcEC1Ev>
 8004ce8:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8004cec:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 8004cf0:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 8004cf4:	ca06      	ldmia	r2, {r1, r2}
 8004cf6:	f000 fa9c 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004cfa:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8004cfe:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8004bf0 <_ZN3jlb5GraphC1Ev+0x3228>
 8004d02:	2201      	movs	r2, #1
 8004d04:	2153      	movs	r1, #83	; 0x53
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7fc fe18 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004d0c:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fa41 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004d16:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f010 fbfd 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8004d20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d24:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d28:	2157      	movs	r1, #87	; 0x57
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	f000 f872 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004d30:	4604      	mov	r4, r0
 8004d32:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <_ZN3jlb5GraphC1Ev+0x3440>)
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 8004d3a:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 8004d3e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8004d42:	2302      	movs	r3, #2
 8004d44:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8004d48:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f010 fbe2 	bl	8015516 <_ZNSaIcEC1Ev>
 8004d52:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8004d56:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 8004d5a:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 8004d5e:	ca06      	ldmia	r2, {r1, r2}
 8004d60:	f000 fa67 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004d64:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8004d68:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8004e0c <_ZN3jlb5GraphC1Ev+0x3444>
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	214f      	movs	r1, #79	; 0x4f
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7fc fde3 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004d76:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fa0c 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004d80:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8004d84:	4618      	mov	r0, r3
 8004d86:	f010 fbc8 	bl	801551a <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8004d8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d8e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d92:	2158      	movs	r1, #88	; 0x58
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	f000 f83d 	bl	8004e14 <_ZN3jlb5GraphixEc>
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	2358      	movs	r3, #88	; 0x58
 8004d9e:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 8004da2:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8004da6:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 8004daa:	2301      	movs	r3, #1
 8004dac:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8004db0:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8004db4:	4618      	mov	r0, r3
 8004db6:	f010 fbae 	bl	8015516 <_ZNSaIcEC1Ev>
 8004dba:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8004dbe:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 8004dc2:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 8004dc6:	ca06      	ldmia	r2, {r1, r2}
 8004dc8:	f000 fa33 	bl	8005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004dcc:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8004dd0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8004e10 <_ZN3jlb5GraphC1Ev+0x3448>
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	2151      	movs	r1, #81	; 0x51
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7fc fdaf 	bl	800193c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004dde:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f9d8 	bl	8005198 <_ZNSt6vectorIcSaIcEED1Ev>
 8004de8:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8004dec:	4618      	mov	r0, r3
 8004dee:	f010 fb94 	bl	801551a <_ZNSaIcED1Ev>
        }
 8004df2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004df6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd90      	pop	{r4, r7, pc}
 8004e06:	bf00      	nop
 8004e08:	080165d0 	.word	0x080165d0
 8004e0c:	3fc56fea 	.word	0x3fc56fea
 8004e10:	401c518f 	.word	0x401c518f

08004e14 <_ZN3jlb5GraphixEc>:

        ~Graph() {}

        Node &operator[](char name)
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
            if (nodes.empty())
                throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X')
                throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	3b41      	subs	r3, #65	; 0x41
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f000 fa23 	bl	8005274 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8004e2e:	4603      	mov	r3, r0
        }
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
        Controller controller;
        ASState as_state;
        Graph graph;
        SignalSender signal_sender = SignalSender(odometry, controller, as_state);

        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6178      	str	r0, [r7, #20]
 8004e40:	6139      	str	r1, [r7, #16]
 8004e42:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e46:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e4a:	ed87 1a01 	vstr	s2, [r7, #4]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	ed97 1a01 	vldr	s2, [r7, #4]
 8004e54:	edd7 0a02 	vldr	s1, [r7, #8]
 8004e58:	ed97 0a03 	vldr	s0, [r7, #12]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fc fbed 	bl	800163c <_ZN3jlb8OdometryC1Efff>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3384      	adds	r3, #132	; 0x84
 8004e66:	6939      	ldr	r1, [r7, #16]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fc fca7 	bl	80017bc <_ZN3jlb10ControllerC1ENS_9DirectionE>
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fc fda7 	bl	80019c8 <_ZN3jlb5GraphC1Ev>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8004e80:	6979      	ldr	r1, [r7, #20]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004e8e:	f7fc fcdc 	bl	800184a <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateE>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2255      	movs	r2, #85	; 0x55
 8004eae:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2255      	movs	r2, #85	; 0x55
 8004eb6:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_Z19RegistrateUserTasksv>:




void RegistrateUserTasks()
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8004ec8:	4a08      	ldr	r2, [pc, #32]	; (8004eec <_Z19RegistrateUserTasksv+0x28>)
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4808      	ldr	r0, [pc, #32]	; (8004ef0 <_Z19RegistrateUserTasksv+0x2c>)
 8004ece:	f00d ff27 	bl	8012d20 <osThreadNew>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <_Z19RegistrateUserTasksv+0x30>)
 8004ed6:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8004ed8:	4a07      	ldr	r2, [pc, #28]	; (8004ef8 <_Z19RegistrateUserTasksv+0x34>)
 8004eda:	2100      	movs	r1, #0
 8004edc:	4807      	ldr	r0, [pc, #28]	; (8004efc <_Z19RegistrateUserTasksv+0x38>)
 8004ede:	f00d ff1f 	bl	8012d20 <osThreadNew>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <_Z19RegistrateUserTasksv+0x3c>)
 8004ee6:	6013      	str	r3, [r2, #0]

}
 8004ee8:	bf00      	nop
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	08016668 	.word	0x08016668
 8004ef0:	08004f05 	.word	0x08004f05
 8004ef4:	200001b0 	.word	0x200001b0
 8004ef8:	0801668c 	.word	0x0801668c
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	200001b4 	.word	0x200001b4

08004f04 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8004f0c:	f00f f87a 	bl	8014004 <xTaskGetTickCount>
 8004f10:	4603      	mov	r3, r0
 8004f12:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8004f14:	2208      	movs	r2, #8
 8004f16:	4905      	ldr	r1, [pc, #20]	; (8004f2c <_Z7ADCTaskPv+0x28>)
 8004f18:	4805      	ldr	r0, [pc, #20]	; (8004f30 <_Z7ADCTaskPv+0x2c>)
 8004f1a:	f004 fe67 	bl	8009bec <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 8004f1e:	f107 030c 	add.w	r3, r7, #12
 8004f22:	2105      	movs	r1, #5
 8004f24:	4618      	mov	r0, r3
 8004f26:	f00e fe1d 	bl	8013b64 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8004f2a:	e7f3      	b.n	8004f14 <_Z7ADCTaskPv+0x10>
 8004f2c:	200000c4 	.word	0x200000c4
 8004f30:	200001b8 	.word	0x200001b8

08004f34 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f40:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f44:	6018      	str	r0, [r3, #0]
	static uint8_t direction = 1u;
	jlb::Logic logic;
 8004f46:	f107 0308 	add.w	r3, r7, #8
 8004f4a:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8004ff0 <_Z8MainTaskPv+0xbc>
 8004f4e:	eddf 0a28 	vldr	s1, [pc, #160]	; 8004ff0 <_Z8MainTaskPv+0xbc>
 8004f52:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8004ff0 <_Z8MainTaskPv+0xbc>
 8004f56:	2102      	movs	r1, #2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff ff6d 	bl	8004e38 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
	for (;;)
	{
#ifdef TESTING
		LineSensorTask();
 8004f5e:	f7fc f8d5 	bl	800110c <_Z14LineSensorTaskv>
		SetSteeringAngle(pwm_servo_test);
 8004f62:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <_Z8MainTaskPv+0xc0>)
 8004f64:	edd3 7a00 	vldr	s15, [r3]
 8004f68:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6c:	f7fc fb06 	bl	800157c <_Z16SetSteeringAnglef>
		if(pwm_servo_test > 19.0f)
 8004f70:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <_Z8MainTaskPv+0xc0>)
 8004f72:	edd3 7a00 	vldr	s15, [r3]
 8004f76:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	dd03      	ble.n	8004f8c <_Z8MainTaskPv+0x58>
		{
			direction = 0u;
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <_Z8MainTaskPv+0xc4>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e00c      	b.n	8004fa6 <_Z8MainTaskPv+0x72>
		}
		else if(pwm_servo_test < -19.0f)
 8004f8c:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <_Z8MainTaskPv+0xc0>)
 8004f8e:	edd3 7a00 	vldr	s15, [r3]
 8004f92:	eebb 7a03 	vmov.f32	s14, #179	; 0xc1980000 -19.0
 8004f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	d502      	bpl.n	8004fa6 <_Z8MainTaskPv+0x72>
		{
			direction = 1u;
 8004fa0:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <_Z8MainTaskPv+0xc4>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
		}
		if(direction == 1u)
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <_Z8MainTaskPv+0xc4>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10a      	bne.n	8004fc4 <_Z8MainTaskPv+0x90>
		{
			pwm_servo_test+= 0.1f;
 8004fae:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <_Z8MainTaskPv+0xc0>)
 8004fb0:	edd3 7a00 	vldr	s15, [r3]
 8004fb4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004ffc <_Z8MainTaskPv+0xc8>
 8004fb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <_Z8MainTaskPv+0xc0>)
 8004fbe:	edc3 7a00 	vstr	s15, [r3]
 8004fc2:	e009      	b.n	8004fd8 <_Z8MainTaskPv+0xa4>
		}
		else
		{
			pwm_servo_test-= 0.1f;
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <_Z8MainTaskPv+0xc0>)
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ffc <_Z8MainTaskPv+0xc8>
 8004fce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <_Z8MainTaskPv+0xc0>)
 8004fd4:	edc3 7a00 	vstr	s15, [r3]
		}
		MotorControlTask();
 8004fd8:	f7fc f9d8 	bl	800138c <_Z16MotorControlTaskv>
		MotorControlTask();

		logic.signal_sender.send_telemetry();

#endif
		vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <_Z8MainTaskPv+0xcc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f00e fe41 	bl	8013c68 <vTaskSuspend>
		vTaskDelay(5);
 8004fe6:	2005      	movs	r0, #5
 8004fe8:	f00e fe1a 	bl	8013c20 <vTaskDelay>
		LineSensorTask();
 8004fec:	e7b7      	b.n	8004f5e <_Z8MainTaskPv+0x2a>
 8004fee:	bf00      	nop
 8004ff0:	00000000 	.word	0x00000000
 8004ff4:	200001ac 	.word	0x200001ac
 8004ff8:	20000045 	.word	0x20000045
 8004ffc:	3dcccccd 	.word	0x3dcccccd
 8005000:	200001b4 	.word	0x200001b4

08005004 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f95a 	bl	80052c8 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8005014:	2100      	movs	r1, #0
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f966 	bl	80052e8 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9bd 	bl	80053ae <_ZNSaIfEC1Ev>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f9c5 	bl	80053c6 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8005046:	b590      	push	{r4, r7, lr}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f9cb 	bl	80053ee <_ZSt12__miter_baseIPKcET_S2_>
 8005058:	4604      	mov	r4, r0
 800505a:	68b8      	ldr	r0, [r7, #8]
 800505c:	f000 f9c7 	bl	80053ee <_ZSt12__miter_baseIPKcET_S2_>
 8005060:	4603      	mov	r3, r0
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4619      	mov	r1, r3
 8005066:	4620      	mov	r0, r4
 8005068:	f000 f9cc 	bl	8005404 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800506c:	4603      	mov	r3, r0
    }
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	bd90      	pop	{r4, r7, pc}

08005076 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9e3 	bl	800544a <_ZNSaIN3jlb4EdgeEEC1Ev>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f9eb 	bl	8005462 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <_ZNSaIN3jlb4EdgeEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	10db      	asrs	r3, r3, #3
 80050c4:	4a07      	ldr	r2, [pc, #28]	; (80050e4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80050ca:	461a      	mov	r2, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f9dc 	bl	800548a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fc fbd2 	bl	800187e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	aaaaaaab 	.word	0xaaaaaaab

080050e8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80050e8:	b5b0      	push	{r4, r5, r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681c      	ldr	r4, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 f9d8 	bl	80054b0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8005100:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005102:	461a      	mov	r2, r3
 8005104:	4629      	mov	r1, r5
 8005106:	4620      	mov	r0, r4
 8005108:	f000 f9dd 	bl	80054c6 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ffcc 	bl	80050ac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bdb0      	pop	{r4, r5, r7, pc}

0800511e <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 800511e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8005128:	687c      	ldr	r4, [r7, #4]
 800512a:	6838      	ldr	r0, [r7, #0]
 800512c:	f000 f9d9 	bl	80054e2 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8005130:	4605      	mov	r5, r0
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f9f1 	bl	800551c <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800513a:	4602      	mov	r2, r0
 800513c:	f107 030c 	add.w	r3, r7, #12
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f9dc 	bl	8005500 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8005148:	f107 030c 	add.w	r3, r7, #12
 800514c:	461a      	mov	r2, r3
 800514e:	4629      	mov	r1, r5
 8005150:	4620      	mov	r0, r4
 8005152:	f000 f9fa 	bl	800554a <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 8005156:	f107 030c 	add.w	r3, r7, #12
 800515a:	4618      	mov	r0, r3
 800515c:	f010 f9dd 	bl	801551a <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8005160:	6838      	ldr	r0, [r7, #0]
 8005162:	f000 fa1e 	bl	80055a2 <_ZNKSt6vectorIcSaIcEE5beginEv>
 8005166:	4605      	mov	r5, r0
 8005168:	6838      	ldr	r0, [r7, #0]
 800516a:	f000 fa2a 	bl	80055c2 <_ZNKSt6vectorIcSaIcEE3endEv>
 800516e:	4606      	mov	r6, r0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fa34 	bl	80055e4 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800517c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800517e:	4622      	mov	r2, r4
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fa39 	bl	80055fa <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 8005188:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	605a      	str	r2, [r3, #4]
      }
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005198 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8005198:	b5b0      	push	{r4, r5, r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681c      	ldr	r4, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fa1a 	bl	80055e4 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80051b0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80051b2:	461a      	mov	r2, r3
 80051b4:	4629      	mov	r1, r5
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 fa30 	bl	800561c <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f9d7 	bl	8005572 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bdb0      	pop	{r4, r5, r7, pc}

080051ce <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f000 fa2d 	bl	8005638 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 80051de:	4603      	mov	r3, r0
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa33 	bl	800564e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fa5b 	bl	80056b4 <_ZNSaIN3jlb4NodeEEC1Ev>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fa63 	bl	80056cc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800521a:	6838      	ldr	r0, [r7, #0]
 800521c:	f000 fa96 	bl	800574c <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 8005220:	4603      	mov	r3, r0
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa9c 	bl	8005762 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 8005232:	b5b0      	push	{r4, r5, r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	1d38      	adds	r0, r7, #4
 800523c:	e880 0006 	stmia.w	r0, {r1, r2}
 8005240:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fabe 	bl	80057c8 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fac9 	bl	80057e6 <_ZNKSt16initializer_listIcE5beginEv>
 8005254:	4604      	mov	r4, r0
 8005256:	1d3b      	adds	r3, r7, #4
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fad0 	bl	80057fe <_ZNKSt16initializer_listIcE3endEv>
 800525e:	4602      	mov	r2, r0
 8005260:	462b      	mov	r3, r5
 8005262:	4621      	mov	r1, r4
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 faef 	bl	8005848 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bdb0      	pop	{r4, r5, r7, pc}

08005274 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	440b      	add	r3, r1
      }
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	10db      	asrs	r3, r3, #3
 80052b0:	4a04      	ldr	r2, [pc, #16]	; (80052c4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 80052b2:	fb02 f303 	mul.w	r3, r2, r3
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	aaaaaaab 	.word	0xaaaaaaab

080052c8 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f86c 	bl	80053ae <_ZNSaIfEC1Ev>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 faed 	bl	80058b8 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b089      	sub	sp, #36	; 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80052f2:	2004      	movs	r0, #4
 80052f4:	f7fc f980 	bl	80015f8 <_ZSt16__deque_buf_sizej>
 80052f8:	4602      	mov	r2, r0
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005300:	3301      	adds	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005304:	2308      	movs	r3, #8
 8005306:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	3302      	adds	r3, #2
 800530c:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800530e:	f107 0210 	add.w	r2, r7, #16
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fae6 	bl	80058ea <_ZSt3maxIjERKT_S2_S2_>
 800531e:	4603      	mov	r3, r0
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 faf0 	bl	8005912 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8005332:	4602      	mov	r2, r0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	1acb      	subs	r3, r1, r3
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005348:	4413      	add	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4413      	add	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	69b9      	ldr	r1, [r7, #24]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 faf6 	bl	800594c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3308      	adds	r3, #8
 8005364:	69b9      	ldr	r1, [r7, #24]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fb0b 	bl	8005982 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f103 0218 	add.w	r2, r3, #24
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	3b04      	subs	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f000 fb02 	bl	8005982 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800538a:	2004      	movs	r0, #4
 800538c:	f7fc f934 	bl	80015f8 <_ZSt16__deque_buf_sizej>
 8005390:	4602      	mov	r2, r0
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	fbb3 f1f2 	udiv	r1, r3, r2
 8005398:	fb01 f202 	mul.w	r2, r1, r2
 800539c:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	619a      	str	r2, [r3, #24]
    }
 80053a6:	bf00      	nop
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd90      	pop	{r4, r7, pc}

080053ae <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fb32 	bl	8005a20 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
	{ }
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005404:	b5b0      	push	{r4, r5, r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fb10 	bl	8005a36 <_ZSt12__niter_baseIPKcET_S2_>
 8005416:	4604      	mov	r4, r0
 8005418:	68b8      	ldr	r0, [r7, #8]
 800541a:	f000 fb0c 	bl	8005a36 <_ZSt12__niter_baseIPKcET_S2_>
 800541e:	4605      	mov	r5, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fb12 	bl	8005a4c <_ZSt12__niter_baseIPcET_S1_>
 8005428:	4603      	mov	r3, r0
 800542a:	461a      	mov	r2, r3
 800542c:	4629      	mov	r1, r5
 800542e:	4620      	mov	r0, r4
 8005430:	f000 fb17 	bl	8005a62 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 8005434:	4602      	mov	r2, r0
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	4611      	mov	r1, r2
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fb21 	bl	8005a82 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8005440:	4603      	mov	r3, r0
    }
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bdb0      	pop	{r4, r5, r7, pc}

0800544a <_ZNSaIN3jlb4EdgeEEC1Ev>:
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fb21 	bl	8005a9a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	609a      	str	r2, [r3, #8]
	{ }
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
	if (__p)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fb04 	bl	8005ab0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fb0a 	bl	8005aee <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fb03 	bl	8005b1a <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f00f ffed 	bl	801551a <_ZNSaIcED1Ev>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 faea 	bl	8005b34 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 faf8 	bl	8005b58 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8005588:	461a      	mov	r2, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fafe 	bl	8005b8c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff ffcd 	bl	8005532 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	f107 030c 	add.w	r3, r7, #12
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fafd 	bl	8005bb2 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	1d1a      	adds	r2, r3, #4
 80055ce:	f107 030c 	add.w	r3, r7, #12
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 faec 	bl	8005bb2 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
 8005606:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fae0 	bl	8005bd2 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 8005612:	4603      	mov	r3, r0
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fae3 	bl	8005bf6 <_ZSt8_DestroyIPcEvT_S1_>
    }
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800564e:	b5b0      	push	{r4, r5, r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d012      	beq.n	800568a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005664:	687c      	ldr	r4, [r7, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685d      	ldr	r5, [r3, #4]
 800566a:	6838      	ldr	r0, [r7, #0]
 800566c:	f000 fad9 	bl	8005c22 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	4629      	mov	r1, r5
 8005676:	4620      	mov	r0, r4
 8005678:	f000 fb35 	bl	8005ce6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f103 0218 	add.w	r2, r3, #24
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	605a      	str	r2, [r3, #4]
 8005688:	e00c      	b.n	80056a4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fb3d 	bl	8005d0a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8005690:	4604      	mov	r4, r0
 8005692:	6838      	ldr	r0, [r7, #0]
 8005694:	f000 fac5 	bl	8005c22 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	4621      	mov	r1, r4
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fb44 	bl	8005d2c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fbcb 	bl	8005e40 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 80056aa:	4603      	mov	r3, r0
#endif
      }
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bdb0      	pop	{r4, r5, r7, pc}

080056b4 <_ZNSaIN3jlb4NodeEEC1Ev>:
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fbda 	bl	8005e76 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	605a      	str	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	609a      	str	r2, [r3, #8]
	{ }
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
	if (__p)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fbbd 	bl	8005e8c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fbc3 	bl	8005eca <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8005762:	b5b0      	push	{r4, r5, r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	429a      	cmp	r2, r3
 8005776:	d012      	beq.n	800579e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005778:	687c      	ldr	r4, [r7, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685d      	ldr	r5, [r3, #4]
 800577e:	6838      	ldr	r0, [r7, #0]
 8005780:	f000 fbb9 	bl	8005ef6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	4629      	mov	r1, r5
 800578a:	4620      	mov	r0, r4
 800578c:	f000 fbf5 	bl	8005f7a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f103 0218 	add.w	r2, r3, #24
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	605a      	str	r2, [r3, #4]
 800579c:	e00c      	b.n	80057b8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fbfd 	bl	8005f9e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 80057a4:	4604      	mov	r4, r0
 80057a6:	6838      	ldr	r0, [r7, #0]
 80057a8:	f000 fba5 	bl	8005ef6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	4621      	mov	r1, r4
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fc04 	bl	8005fc0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fc95 	bl	80060e8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 80057be:	4603      	mov	r3, r0
      }
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bdb0      	pop	{r4, r5, r7, pc}

080057c8 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f9ac 	bl	8005b34 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80057fe:	b590      	push	{r4, r7, lr}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ffed 	bl	80057e6 <_ZNKSt16initializer_listIcE5beginEv>
 800580c:	4604      	mov	r4, r0
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fc85 	bl	800611e <_ZNKSt16initializer_listIcE4sizeEv>
 8005814:	4603      	mov	r3, r0
 8005816:	4423      	add	r3, r4
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bd90      	pop	{r4, r7, pc}

08005820 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8005820:	b5b0      	push	{r4, r5, r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800582a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fc81 	bl	8006136 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8005834:	462a      	mov	r2, r5
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	4620      	mov	r0, r4
 800583a:	f000 fc86 	bl	800614a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800583e:	4603      	mov	r3, r0
    }
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bdb0      	pop	{r4, r5, r7, pc}

08005848 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	68b8      	ldr	r0, [r7, #8]
 800585a:	f7ff ffe1 	bl	8005820 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800585e:	4603      	mov	r3, r0
 8005860:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8005862:	68fc      	ldr	r4, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff febc 	bl	80055e4 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800586c:	4603      	mov	r3, r0
 800586e:	4619      	mov	r1, r3
 8005870:	6978      	ldr	r0, [r7, #20]
 8005872:	f000 fc79 	bl	8006168 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 8005876:	4603      	mov	r3, r0
 8005878:	4619      	mov	r1, r3
 800587a:	4620      	mov	r0, r4
 800587c:	f000 fc9c 	bl	80061b8 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8005880:	4602      	mov	r2, r0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	441a      	add	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fea3 	bl	80055e4 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800589e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80058a0:	4622      	mov	r2, r4
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	68b8      	ldr	r0, [r7, #8]
 80058a6:	f000 fc9b 	bl	80061e0 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 80058aa:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	605a      	str	r2, [r3, #4]
	}
 80058b0:	bf00      	nop
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd90      	pop	{r4, r7, pc}

080058b8 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	605a      	str	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3308      	adds	r3, #8
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fc96 	bl	8006202 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3318      	adds	r3, #24
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fc91 	bl	8006202 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d201      	bcs.n	8005904 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	e000      	b.n	8005906 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005904:	687b      	ldr	r3, [r7, #4]
    }
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005912:	b590      	push	{r4, r7, lr}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800591c:	f107 030c 	add.w	r3, r7, #12
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f846 	bl	80059b4 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005928:	f107 030c 	add.w	r3, r7, #12
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fc7e 	bl	8006230 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 8005934:	4604      	mov	r4, r0
 8005936:	bf00      	nop
      }
 8005938:	f107 030c 	add.w	r3, r7, #12
 800593c:	4618      	mov	r0, r3
 800593e:	f000 f84a 	bl	80059d6 <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005942:	4623      	mov	r3, r4
      }
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bd90      	pop	{r4, r7, pc}

0800594c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e008      	b.n	8005970 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f844 	bl	80059ec <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8005964:	4602      	mov	r2, r0
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	3304      	adds	r3, #4
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d3f2      	bcc.n	800595e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005982:	b590      	push	{r4, r7, lr}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685c      	ldr	r4, [r3, #4]
 800599e:	f000 f837 	bl	8005a10 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 80059a2:	4603      	mov	r3, r0
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	18e2      	adds	r2, r4, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	609a      	str	r2, [r3, #8]
      }
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd90      	pop	{r4, r7, pc}

080059b4 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80059be:	6838      	ldr	r0, [r7, #0]
 80059c0:	f000 fc56 	bl	8006270 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80059c4:	4603      	mov	r3, r0
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fc5c 	bl	8006286 <_ZNSaIPfEC1IfEERKSaIT_E>
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80059f4:	687c      	ldr	r4, [r7, #4]
 80059f6:	2004      	movs	r0, #4
 80059f8:	f7fb fdfe 	bl	80015f8 <_ZSt16__deque_buf_sizej>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4619      	mov	r1, r3
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fc4d 	bl	80062a0 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8005a06:	4603      	mov	r3, r0
      }
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd90      	pop	{r4, r7, pc}

08005a10 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005a14:	2004      	movs	r0, #4
 8005a16:	f7fb fdef 	bl	80015f8 <_ZSt16__deque_buf_sizej>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fc34 	bl	80062e0 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8005ac8:	f7fb fd82 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 8005ad2:	69b8      	ldr	r0, [r7, #24]
 8005ad4:	f00f fd0a 	bl	80154ec <_ZdlPv>
	    return;
 8005ad8:	e005      	b.n	8005ae6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	69b9      	ldr	r1, [r7, #24]
 8005ade:	69f8      	ldr	r0, [r7, #28]
 8005ae0:	f000 ff92 	bl	8006a08 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 8005af8:	f7fb fd6a 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d004      	beq.n	8005b0c <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fc45 	bl	8006394 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 8005b0a:	e003      	b.n	8005b14 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fc40 	bl	8006394 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f00f fcf6 	bl	8015518 <_ZNSaIcEC1ERKS_>
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f00f fce9 	bl	8015518 <_ZNSaIcEC1ERKS_>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fc3c 	bl	80063c6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fb27 	bl	80061b8 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	441a      	add	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	609a      	str	r2, [r3, #8]
      }
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
	if (__p)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fbd6 	bl	8006356 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005bde:	2301      	movs	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fc01 	bl	80063ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 8005bec:	4603      	mov	r3, r0
    }
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005c00:	f7fb fce6 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fbfe 	bl	800640e <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 8005c12:	e003      	b.n	8005c1c <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fc12 	bl	8006440 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fc04 	bl	8006456 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff ffe5 	bl	8005c38 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f103 0208 	add.w	r2, r3, #8
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f7ff ffda 	bl	8005c58 <_ZNSt6vectorIcSaIcEEC1EOS1_>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	615a      	str	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8005cb6:	b5b0      	push	{r4, r5, r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8005cc0:	6838      	ldr	r0, [r7, #0]
 8005cc2:	f7ff ffae 	bl	8005c22 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	2018      	movs	r0, #24
 8005cce:	f7fb fc87 	bl	80015e0 <_ZnwjPv>
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7ff ffce 	bl	8005c78 <_ZN3jlb4EdgeC1EOS0_>
 8005cdc:	4623      	mov	r3, r4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bdb0      	pop	{r4, r5, r7, pc}

08005ce6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ff95 	bl	8005c22 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	68b8      	ldr	r0, [r7, #8]
 8005cfe:	f7ff ffda 	bl	8005cb6 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	f107 030c 	add.w	r3, r7, #12
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fbb5 	bl	800648c <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8005d2c:	b5b0      	push	{r4, r5, r7, lr}
 8005d2e:	b08c      	sub	sp, #48	; 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8005d38:	4a3f      	ldr	r2, [pc, #252]	; (8005e38 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fbb5 	bl	80064ac <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 8005d42:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fbf2 	bl	800653a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 8005d56:	4603      	mov	r3, r0
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	f107 0214 	add.w	r2, r7, #20
 8005d5e:	f107 0308 	add.w	r3, r7, #8
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fbf9 	bl	800655c <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fc0c 	bl	8006590 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 8005d78:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8005d7e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005d80:	6a3a      	ldr	r2, [r7, #32]
 8005d82:	4613      	mov	r3, r2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4413      	add	r3, r2
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	189d      	adds	r5, r3, r2
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff ff46 	bl	8005c22 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f7ff ffa2 	bl	8005ce6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005da6:	f107 0308 	add.w	r3, r7, #8
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fc18 	bl	80065e0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8005db0:	4603      	mov	r3, r0
 8005db2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fb7a 	bl	80054b0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8005dbc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc4:	f000 fbf8 	bl	80065b8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8005dc8:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	3318      	adds	r3, #24
 8005dce:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005dd0:	f107 0308 	add.w	r3, r7, #8
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fc03 	bl	80065e0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fb65 	bl	80054b0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8005de6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dec:	4620      	mov	r0, r4
 8005dee:	f000 fbe3 	bl	80065b8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8005df2:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8005df4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	10db      	asrs	r3, r3, #3
 8005e00:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8005e06:	461a      	mov	r2, r3
 8005e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e0a:	f7ff fb3e 	bl	800548a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	461a      	mov	r2, r3
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	441a      	add	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	609a      	str	r2, [r3, #8]
    }
 8005e2e:	bf00      	nop
 8005e30:	3730      	adds	r7, #48	; 0x30
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bdb0      	pop	{r4, r5, r7, pc}
 8005e36:	bf00      	nop
 8005e38:	080165e8 	.word	0x080165e8
 8005e3c:	aaaaaaab 	.word	0xaaaaaaab

08005e40 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff5e 	bl	8005d0a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	f107 030c 	add.w	r3, r7, #12
 8005e56:	2101      	movs	r1, #1
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fbd8 	bl	800660e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	f107 0308 	add.w	r3, r7, #8
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fbed 	bl	8006646 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8005e6c:	4603      	mov	r3, r0
      }
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005ea4:	f7fb fb94 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8005eae:	69b8      	ldr	r0, [r7, #24]
 8005eb0:	f00f fb1c 	bl	80154ec <_ZdlPv>
	    return;
 8005eb4:	e005      	b.n	8005ec2 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	69b9      	ldr	r1, [r7, #24]
 8005eba:	69f8      	ldr	r0, [r7, #28]
 8005ebc:	f000 fe6e 	bl	8006b9c <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005ed4:	f7fb fb7c 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d004      	beq.n	8005ee8 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fbbc 	bl	800665e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 8005ee6:	e003      	b.n	8005ef0 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fbb7 	bl	800665e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	609a      	str	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f103 020c 	add.w	r2, r3, #12
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f000 fba8 	bl	8006690 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8005f4a:	b5b0      	push	{r4, r5, r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8005f54:	6838      	ldr	r0, [r7, #0]
 8005f56:	f7ff ffce 	bl	8005ef6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	2018      	movs	r0, #24
 8005f62:	f7fb fb3d 	bl	80015e0 <_ZnwjPv>
 8005f66:	4604      	mov	r4, r0
 8005f68:	4629      	mov	r1, r5
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7ff ffce 	bl	8005f0c <_ZN3jlb4NodeC1ERKS0_>
 8005f70:	4623      	mov	r3, r4
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bdb0      	pop	{r4, r5, r7, pc}

08005f7a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff ffb5 	bl	8005ef6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68b8      	ldr	r0, [r7, #8]
 8005f92:	f7ff ffda 	bl	8005f4a <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	1d1a      	adds	r2, r3, #4
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fbaa 	bl	800670a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005fc0:	b5b0      	push	{r4, r5, r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8005fcc:	4a44      	ldr	r2, [pc, #272]	; (80060e0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 8005fce:	2101      	movs	r1, #1
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fbaa 	bl	800672a <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 8005fd6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fbe7 	bl	80067b8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 8005fea:	4603      	mov	r3, r0
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	f107 0214 	add.w	r2, r7, #20
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fbed 	bl	80067d8 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8005ffe:	4603      	mov	r3, r0
 8006000:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc00 	bl	800680c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 800600c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006012:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	189d      	adds	r5, r3, r2
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff66 	bl	8005ef6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800602a:	4603      	mov	r3, r0
 800602c:	461a      	mov	r2, r3
 800602e:	4629      	mov	r1, r5
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff ffa2 	bl	8005f7a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fbf8 	bl	8006834 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006044:	4603      	mov	r3, r0
 8006046:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fb65 	bl	800571a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006050:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	4621      	mov	r1, r4
 8006056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006058:	f000 fbf7 	bl	800684a <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800605c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	3318      	adds	r3, #24
 8006062:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 8006064:	f107 0308 	add.w	r3, r7, #8
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fbe3 	bl	8006834 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800606e:	4603      	mov	r3, r0
 8006070:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fb50 	bl	800571a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800607a:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fbe2 	bl	800684a <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8006086:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fb45 	bl	800571a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006090:	4603      	mov	r3, r0
 8006092:	461a      	mov	r2, r3
 8006094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006098:	f7ff fb4a 	bl	8005730 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800609c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	10db      	asrs	r3, r3, #3
 80060a8:	4a0e      	ldr	r2, [pc, #56]	; (80060e4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 80060ae:	461a      	mov	r2, r3
 80060b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060b2:	f7ff fb1f 	bl	80056f4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80060c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c4:	4613      	mov	r3, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4413      	add	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	461a      	mov	r2, r3
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	609a      	str	r2, [r3, #8]
    }
 80060d6:	bf00      	nop
 80060d8:	3730      	adds	r7, #48	; 0x30
 80060da:	46bd      	mov	sp, r7
 80060dc:	bdb0      	pop	{r4, r5, r7, pc}
 80060de:	bf00      	nop
 80060e0:	080165e8 	.word	0x080165e8
 80060e4:	aaaaaaab 	.word	0xaaaaaaab

080060e8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff54 	bl	8005f9e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 80060f6:	4603      	mov	r3, r0
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	2101      	movs	r1, #1
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fbbb 	bl	800687c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 8006106:	4603      	mov	r3, r0
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	f107 0308 	add.w	r3, r7, #8
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fbd0 	bl	80068b4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 8006114:	4603      	mov	r3, r0
      }
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	1ad3      	subs	r3, r2, r3
    }
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8006172:	f107 030c 	add.w	r3, r7, #12
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f00f f9cd 	bl	8015518 <_ZNSaIcEC1ERKS_>
 800617e:	f107 030c 	add.w	r3, r7, #12
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fbae 	bl	80068e4 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 8006188:	4602      	mov	r2, r0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4293      	cmp	r3, r2
 800618e:	bf8c      	ite	hi
 8006190:	2301      	movhi	r3, #1
 8006192:	2300      	movls	r3, #0
 8006194:	b2dc      	uxtb	r4, r3
 8006196:	f107 030c 	add.w	r3, r7, #12
 800619a:	4618      	mov	r0, r3
 800619c:	f00f f9bd 	bl	801551a <_ZNSaIcED1Ev>
 80061a0:	2c00      	cmp	r4, #0
 80061a2:	d002      	beq.n	80061aa <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 80061a4:	4803      	ldr	r0, [pc, #12]	; (80061b4 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 80061a6:	f00f f9bf 	bl	8015528 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 80061aa:	687b      	ldr	r3, [r7, #4]
      }
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd90      	pop	{r4, r7, pc}
 80061b4:	08016604 	.word	0x08016604

080061b8 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d006      	beq.n	80061d6 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 f8a4 	bl	800631a <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 80061d2:	4603      	mov	r3, r0
 80061d4:	e000      	b.n	80061d8 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 80061d6:	2300      	movs	r3, #0
      }
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fb90 	bl	8006918 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 80061f8:	4603      	mov	r3, r0
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006242:	f7fb f9c5 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d006      	beq.n	800625a <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4618      	mov	r0, r3
 8006252:	f00f f94f 	bl	80154f4 <_Znwj>
 8006256:	4603      	mov	r3, r0
 8006258:	e006      	b.n	8006268 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800625a:	2200      	movs	r2, #0
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fdb0 	bl	8006dc4 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 8006264:	4603      	mov	r3, r0
 8006266:	bf00      	nop
      { return __a.allocate(__n); }
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb53 	bl	800693c <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80062b2:	f7fb f98d 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d006      	beq.n	80062ca <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f00f f917 	bl	80154f4 <_Znwj>
 80062c6:	4603      	mov	r3, r0
 80062c8:	e006      	b.n	80062d8 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80062ca:	2200      	movs	r2, #0
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fdae 	bl	8006e30 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 80062d4:	4603      	mov	r3, r0
 80062d6:	bf00      	nop
      { return __a.allocate(__n); }
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80062ec:	f7fb f970 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d006      	beq.n	8006304 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 fb3d 	bl	800697a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 8006300:	4603      	mov	r3, r0
 8006302:	e006      	b.n	8006312 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fb58 	bl	80069be <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800630e:	4603      	mov	r3, r0
 8006310:	bf00      	nop
    }
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800632c:	f7fb f950 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f00f f8dc 	bl	80154f4 <_Znwj>
 800633c:	4603      	mov	r3, r0
 800633e:	e006      	b.n	800634e <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8006340:	2200      	movs	r2, #0
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fda9 	bl	8006e9c <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800634a:	4603      	mov	r3, r0
 800634c:	bf00      	nop
      { return __a.allocate(__n); }
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006356:	b580      	push	{r7, lr}
 8006358:	b088      	sub	sp, #32
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800636e:	f7fb f92f 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 8006378:	69b8      	ldr	r0, [r7, #24]
 800637a:	f00f f8b7 	bl	80154ec <_ZdlPv>
	    return;
 800637e:	e005      	b.n	800638c <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	69b9      	ldr	r1, [r7, #24]
 8006384:	69f8      	ldr	r0, [r7, #28]
 8006386:	f000 fdab 	bl	8006ee0 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800639e:	e009      	b.n	80063b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fb43 	bl	8006a2c <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80063a6:	4603      	mov	r3, r0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fb4a 	bl	8006a42 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3318      	adds	r3, #24
 80063b2:	607b      	str	r3, [r7, #4]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d1f1      	bne.n	80063a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	609a      	str	r2, [r3, #8]
	{ }
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fb2a 	bl	8006a58 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 8006404:	4603      	mov	r3, r0
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006418:	e009      	b.n	800642e <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fae9 	bl	80069f2 <_ZSt11__addressofIcEPT_RS0_>
 8006420:	4603      	mov	r3, r0
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fb30 	bl	8006a88 <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3301      	adds	r3, #1
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d1f1      	bne.n	800641a <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8006456:	b590      	push	{r4, r7, lr}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8006460:	6838      	ldr	r0, [r7, #0]
 8006462:	f000 fb1c 	bl	8006a9e <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8006466:	4603      	mov	r3, r0
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f00f f854 	bl	8015518 <_ZNSaIcEC1ERKS_>
 8006470:	687c      	ldr	r4, [r7, #4]
 8006472:	6838      	ldr	r0, [r7, #0]
 8006474:	f000 fb13 	bl	8006a9e <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8006478:	4603      	mov	r3, r0
 800647a:	4619      	mov	r1, r3
 800647c:	4620      	mov	r0, r4
 800647e:	f000 fb19 	bl	8006ab4 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	bd90      	pop	{r4, r7, pc}

0800648c <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80064ac:	b590      	push	{r4, r7, lr}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fb1e 	bl	8006afa <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 80064be:	4604      	mov	r4, r0
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7fe feeb 	bl	800529c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 80064c6:	4603      	mov	r3, r0
 80064c8:	1ae2      	subs	r2, r4, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	bf34      	ite	cc
 80064d0:	2301      	movcc	r3, #1
 80064d2:	2300      	movcs	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f00f f824 	bl	8015528 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f7fe fedb 	bl	800529c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 80064e6:	4604      	mov	r4, r0
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7fe fed7 	bl	800529c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 80064ee:	4603      	mov	r3, r0
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	f107 0208 	add.w	r2, r7, #8
 80064f6:	f107 0310 	add.w	r3, r7, #16
 80064fa:	4611      	mov	r1, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff f9f4 	bl	80058ea <_ZSt3maxIjERKT_S2_S2_>
 8006502:	4603      	mov	r3, r0
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4423      	add	r3, r4
 8006508:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7fe fec6 	bl	800529c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006510:	4602      	mov	r2, r0
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4293      	cmp	r3, r2
 8006516:	d306      	bcc.n	8006526 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 faee 	bl	8006afa <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800651e:	4602      	mov	r2, r0
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	4293      	cmp	r3, r2
 8006524:	d904      	bls.n	8006530 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fae7 	bl	8006afa <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800652c:	4603      	mov	r3, r0
 800652e:	e000      	b.n	8006532 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 8006530:	697b      	ldr	r3, [r7, #20]
      }
 8006532:	4618      	mov	r0, r3
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd90      	pop	{r4, r7, pc}

0800653a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	f107 030c 	add.w	r3, r7, #12
 8006548:	4611      	mov	r1, r2
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff ff9e 	bl	800648c <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f83a 	bl	80065e0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800656c:	4603      	mov	r3, r0
 800656e:	681c      	ldr	r4, [r3, #0]
 8006570:	6838      	ldr	r0, [r7, #0]
 8006572:	f000 f835 	bl	80065e0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006576:	4603      	mov	r3, r0
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	1ae3      	subs	r3, r4, r3
 800657c:	10db      	asrs	r3, r3, #3
 800657e:	4a03      	ldr	r2, [pc, #12]	; (800658c <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8006580:	fb02 f303 	mul.w	r3, r2, r3
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	bd90      	pop	{r4, r7, pc}
 800658c:	aaaaaaab 	.word	0xaaaaaaab

08006590 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d006      	beq.n	80065ae <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fab9 	bl	8006b1c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 80065aa:	4603      	mov	r3, r0
 80065ac:	e000      	b.n	80065b0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 80065ae:	2300      	movs	r3, #0
      }
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80065c6:	f88d 4000 	strb.w	r4, [sp]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fac6 	bl	8006b62 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80065d6:	4603      	mov	r3, r0
      }
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd90      	pop	{r4, r7, pc}

080065e0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8006600:	6838      	ldr	r0, [r7, #0]
 8006602:	f000 fac0 	bl	8006b86 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6819      	ldr	r1, [r3, #0]
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	425b      	negs	r3, r3
 8006628:	440b      	add	r3, r1
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	f107 020c 	add.w	r2, r7, #12
 8006630:	f107 0308 	add.w	r3, r7, #8
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff ff28 	bl	800648c <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006668:	e009      	b.n	800667e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 faa8 	bl	8006bc0 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8006670:	4603      	mov	r3, r0
 8006672:	4618      	mov	r0, r3
 8006674:	f000 faaf 	bl	8006bd6 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3318      	adds	r3, #24
 800667c:	607b      	str	r3, [r7, #4]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d1f1      	bne.n	800666a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8006690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800669a:	687c      	ldr	r4, [r7, #4]
 800669c:	6838      	ldr	r0, [r7, #0]
 800669e:	f7fe fdfd 	bl	800529c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 80066a2:	4605      	mov	r5, r0
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 faae 	bl	8006c08 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f107 030c 	add.w	r3, r7, #12
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fa99 	bl	8006bec <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 80066ba:	f107 030c 	add.w	r3, r7, #12
 80066be:	461a      	mov	r2, r3
 80066c0:	4629      	mov	r1, r5
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 faab 	bl	8006c1e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 80066c8:	f107 030c 	add.w	r3, r7, #12
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe fce2 	bl	8005096 <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80066d2:	6838      	ldr	r0, [r7, #0]
 80066d4:	f000 fab7 	bl	8006c46 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 80066d8:	4605      	mov	r5, r0
 80066da:	6838      	ldr	r0, [r7, #0]
 80066dc:	f000 fac3 	bl	8006c66 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 80066e0:	4606      	mov	r6, r0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe fee1 	bl	80054b0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80066ee:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80066f0:	4622      	mov	r2, r4
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	f000 fac7 	bl	8006c88 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 80066fa:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]
      }
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800670a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800672a:	b590      	push	{r4, r7, lr}
 800672c:	b087      	sub	sp, #28
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fab7 	bl	8006caa <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800673c:	4604      	mov	r4, r0
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fac4 	bl	8006ccc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8006744:	4603      	mov	r3, r0
 8006746:	1ae2      	subs	r2, r4, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	bf34      	ite	cc
 800674e:	2301      	movcc	r3, #1
 8006750:	2300      	movcs	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f00e fee5 	bl	8015528 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fab4 	bl	8006ccc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8006764:	4604      	mov	r4, r0
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fab0 	bl	8006ccc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800676c:	4603      	mov	r3, r0
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	f107 0208 	add.w	r2, r7, #8
 8006774:	f107 0310 	add.w	r3, r7, #16
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff f8b5 	bl	80058ea <_ZSt3maxIjERKT_S2_S2_>
 8006780:	4603      	mov	r3, r0
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4423      	add	r3, r4
 8006786:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fa9f 	bl	8006ccc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800678e:	4602      	mov	r2, r0
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	4293      	cmp	r3, r2
 8006794:	d306      	bcc.n	80067a4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fa87 	bl	8006caa <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800679c:	4602      	mov	r2, r0
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d904      	bls.n	80067ae <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fa80 	bl	8006caa <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 80067aa:	4603      	mov	r3, r0
 80067ac:	e000      	b.n	80067b0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 80067ae:	697b      	ldr	r3, [r7, #20]
      }
 80067b0:	4618      	mov	r0, r3
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd90      	pop	{r4, r7, pc}

080067b8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	f107 030c 	add.w	r3, r7, #12
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff ff9e 	bl	800670a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f826 	bl	8006834 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 80067e8:	4603      	mov	r3, r0
 80067ea:	681c      	ldr	r4, [r3, #0]
 80067ec:	6838      	ldr	r0, [r7, #0]
 80067ee:	f000 f821 	bl	8006834 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 80067f2:	4603      	mov	r3, r0
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	1ae3      	subs	r3, r4, r3
 80067f8:	10db      	asrs	r3, r3, #3
 80067fa:	4a03      	ldr	r2, [pc, #12]	; (8006808 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	bd90      	pop	{r4, r7, pc}
 8006808:	aaaaaaab 	.word	0xaaaaaaab

0800680c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d006      	beq.n	800682a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fa69 	bl	8006cf8 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 8006826:	4603      	mov	r3, r0
 8006828:	e000      	b.n	800682c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800682a:	2300      	movs	r3, #0
      }
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800684a:	b590      	push	{r4, r7, lr}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
 8006856:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 fa70 	bl	8006d3e <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800685e:	4604      	mov	r4, r0
 8006860:	68b8      	ldr	r0, [r7, #8]
 8006862:	f000 fa6c 	bl	8006d3e <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 8006866:	4601      	mov	r1, r0
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fa71 	bl	8006d54 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 8006872:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bd90      	pop	{r4, r7, pc}

0800687c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	4413      	add	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	425b      	negs	r3, r3
 8006896:	440b      	add	r3, r1
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	f107 020c 	add.w	r2, r7, #12
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff ff30 	bl	800670a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80068d4:	f04f 33ff 	mov.w	r3, #4294967295
      }
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80068ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80068f0:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff ffea 	bl	80068cc <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 80068f8:	4603      	mov	r3, r0
 80068fa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80068fc:	f107 0208 	add.w	r2, r7, #8
 8006900:	f107 030c 	add.w	r3, r7, #12
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f823 	bl	8006952 <_ZSt3minIjERKT_S2_S2_>
 800690c:	4603      	mov	r3, r0
 800690e:	681b      	ldr	r3, [r3, #0]
      }
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006924:	2301      	movs	r3, #1
 8006926:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fa2d 	bl	8006d8c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 8006932:	4603      	mov	r3, r0
    }
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d201      	bcs.n	800696c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	e000      	b.n	800696e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800696c:	687b      	ldr	r3, [r7, #4]
    }
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800697a:	b480      	push	{r7}
 800697c:	b087      	sub	sp, #28
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e00c      	b.n	80069aa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3301      	adds	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3301      	adds	r3, #1
 80069a2:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dcef      	bgt.n	8006990 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 80069b0:	687b      	ldr	r3, [r7, #4]
	}
 80069b2:	4618      	mov	r0, r3
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	461a      	mov	r2, r3
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f00e ffda 	bl	8015998 <memmove>
	  return __result + _Num;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	4413      	add	r3, r2
	}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68b8      	ldr	r0, [r7, #8]
 8006a22:	f00e fd65 	bl	80154f0 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f89b 	bl	8006b86 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fa48 	bl	8006efa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	68b8      	ldr	r0, [r7, #8]
 8006a6e:	f000 fa44 	bl	8006efa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8006a72:	4603      	mov	r3, r0
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4619      	mov	r1, r3
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 fa49 	bl	8006f10 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 8006a7e:	4603      	mov	r3, r0
    }
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd90      	pop	{r4, r7, pc}

08006a88 <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa60 	bl	8006f56 <_ZSt10destroy_atIcEvPT_>
    }
 8006a96:	bf00      	nop
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	609a      	str	r2, [r3, #8]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f87f 	bl	8006c08 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fa3b 	bl	8006f88 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006b2e:	f7fa fd4f 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4413      	add	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	4618      	mov	r0, r3
 8006b44:	f00e fcd6 	bl	80154f4 <_Znwj>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	e006      	b.n	8006b5a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fb15 	bl	8007180 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 8006b56:	4603      	mov	r3, r0
 8006b58:	bf00      	nop
      { return __a.allocate(__n); }
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fa22 	bl	8006fc0 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8006b7c:	4603      	mov	r3, r0
      }
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fa fec6 	bl	8001920 <_ZN3jlb4EdgeD1Ev>
    }
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	4413      	add	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68b8      	ldr	r0, [r7, #8]
 8006bb6:	f00e fc9b 	bl	80154f0 <_ZdlPvj>
      }
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f8c9 	bl	8006d76 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 f9fd 	bl	8006ffa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f9f0 	bl	8007014 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f9fe 	bl	8007038 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	f107 030c 	add.w	r3, r7, #12
 8006c54:	4611      	mov	r1, r2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fa0c 	bl	8007074 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	1d1a      	adds	r2, r3, #4
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4611      	mov	r1, r2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 f9fb 	bl	8007074 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68b9      	ldr	r1, [r7, #8]
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f9fa 	bl	8007094 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fa29 	bl	800710c <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fa09 	bl	80070d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	10db      	asrs	r3, r3, #3
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	aaaaaaab 	.word	0xaaaaaaab

08006cf8 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006d0a:	f7fa fc61 	bl	80015d0 <_ZSt21is_constant_evaluatedv>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f00e fbe8 	bl	80154f4 <_Znwj>
 8006d24:	4603      	mov	r3, r0
 8006d26:	e006      	b.n	8006d36 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8006d28:	2200      	movs	r2, #0
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 faf3 	bl	8007318 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 8006d32:	4603      	mov	r3, r0
 8006d34:	bf00      	nop
      { return __a.allocate(__n); }
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f9db 	bl	8007122 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fa fdc0 	bl	8001904 <_ZN3jlb4NodeD1Ev>
    }
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7fe f952 	bl	8005046 <_ZSt4copyIPKcPcET0_T_S4_S3_>
 8006da2:	4603      	mov	r3, r0
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006db4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff ffeb 	bl	8006dac <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	bf8c      	ite	hi
 8006dde:	2301      	movhi	r3, #1
 8006de0:	2300      	movls	r3, #0
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df8:	d301      	bcc.n	8006dfe <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8006dfa:	f00e fb92 	bl	8015522 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8006dfe:	f00e fb8d 	bl	801551c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f00e fb74 	bl	80154f4 <_Znwj>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	bf00      	nop
      }
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006e20:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff ffeb 	bl	8006e18 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8006e42:	4602      	mov	r2, r0
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4293      	cmp	r3, r2
 8006e48:	bf8c      	ite	hi
 8006e4a:	2301      	movhi	r3, #1
 8006e4c:	2300      	movls	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf14      	ite	ne
 8006e54:	2301      	movne	r3, #1
 8006e56:	2300      	moveq	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d301      	bcc.n	8006e6a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8006e66:	f00e fb5c 	bl	8015522 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8006e6a:	f00e fb57 	bl	801551c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f00e fb3e 	bl	80154f4 <_Znwj>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	bf00      	nop
      }
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006e8c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff ffeb 	bl	8006e84 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	bf8c      	ite	hi
 8006eb6:	2301      	movhi	r3, #1
 8006eb8:	2300      	movls	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8006eca:	f00e fb27 	bl	801551c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006ece:	68b8      	ldr	r0, [r7, #8]
 8006ed0:	f00e fb10 	bl	80154f4 <_Znwj>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	bf00      	nop
      }
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	68b8      	ldr	r0, [r7, #8]
 8006ef0:	f00e fafe 	bl	80154f0 <_ZdlPvj>
      }
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006f10:	b5b0      	push	{r4, r5, r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f912 	bl	8007146 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006f22:	4604      	mov	r4, r0
 8006f24:	68b8      	ldr	r0, [r7, #8]
 8006f26:	f000 f90e 	bl	8007146 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fd8c 	bl	8005a4c <_ZSt12__niter_baseIPcET_S1_>
 8006f34:	4603      	mov	r3, r0
 8006f36:	461a      	mov	r2, r3
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7fe fd91 	bl	8005a62 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 8006f40:	4602      	mov	r2, r0
 8006f42:	1d3b      	adds	r3, r7, #4
 8006f44:	4611      	mov	r1, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fd9b 	bl	8005a82 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8006f4c:	4603      	mov	r3, r0
    }
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bdb0      	pop	{r4, r5, r7, pc}

08006f56 <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
    }
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
	...

08006f6c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8006f74:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	0aaaaaaa 	.word	0x0aaaaaaa

08006f88 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8006f92:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff ffe9 	bl	8006f6c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006f9e:	f107 0208 	add.w	r2, r7, #8
 8006fa2:	f107 030c 	add.w	r3, r7, #12
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fcd2 	bl	8006952 <_ZSt3minIjERKT_S2_S2_>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	681b      	ldr	r3, [r3, #0]
      }
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	05555555 	.word	0x05555555

08006fc0 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f906 	bl	80071e0 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	68b8      	ldr	r0, [r7, #8]
 8006fd8:	f000 f902 	bl	80071e0 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8006fdc:	4605      	mov	r5, r0
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8fe 	bl	80071e0 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	4629      	mov	r1, r5
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 f903 	bl	80071f6 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8006ff0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bdb0      	pop	{r4, r5, r7, pc}

08006ffa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f91b 	bl	8007242 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f90e 	bl	8007242 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe fa1a 	bl	8005462 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff faa3 	bl	8006590 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800704a:	4602      	mov	r2, r0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6819      	ldr	r1, [r3, #0]
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	4613      	mov	r3, r2
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	4413      	add	r3, r2
 8007064:	00db      	lsls	r3, r3, #3
 8007066:	18ca      	adds	r2, r1, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	609a      	str	r2, [r3, #8]
      }
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80070a0:	2301      	movs	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f8f4 	bl	8007296 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 80070ae:	4603      	mov	r3, r0
    }
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80070c0:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	0aaaaaaa 	.word	0x0aaaaaaa

080070d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80070dc:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 80070de:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ffe9 	bl	80070b8 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 80070e6:	4603      	mov	r3, r0
 80070e8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80070ea:	f107 0208 	add.w	r2, r7, #8
 80070ee:	f107 030c 	add.w	r3, r7, #12
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fc2c 	bl	8006952 <_ZSt3minIjERKT_S2_S2_>
 80070fa:	4603      	mov	r3, r0
 80070fc:	681b      	ldr	r3, [r3, #0]
      }
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	05555555 	.word	0x05555555

0800710c <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007122:	b580      	push	{r7, lr}
 8007124:	b086      	sub	sp, #24
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800712e:	2301      	movs	r3, #1
 8007130:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f91e 	bl	8007378 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 800713c:	4603      	mov	r3, r0
    }
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800714e:	1d3b      	adds	r3, r7, #4
 8007150:	4618      	mov	r0, r3
 8007152:	f000 f931 	bl	80073b8 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 8007156:	4603      	mov	r3, r0
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800716c:	4b03      	ldr	r3, [pc, #12]	; (800717c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	05555555 	.word	0x05555555

08007180 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7ff ffe9 	bl	8007164 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 8007192:	4602      	mov	r2, r0
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4293      	cmp	r3, r2
 8007198:	bf8c      	ite	hi
 800719a:	2301      	movhi	r3, #1
 800719c:	2300      	movls	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	bf14      	ite	ne
 80071a4:	2301      	movne	r3, #1
 80071a6:	2300      	moveq	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d901      	bls.n	80071ba <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80071b6:	f00e f9b4 	bl	8015522 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80071ba:	f00e f9af 	bl	801551c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4613      	mov	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4618      	mov	r0, r3
 80071ca:	f00e f993 	bl	80154f4 <_Znwj>
 80071ce:	4603      	mov	r3, r0
 80071d0:	bf00      	nop
      }
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	0aaaaaaa 	.word	0x0aaaaaaa

080071e0 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4618      	mov	r0, r3
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80071f6:	b590      	push	{r4, r7, lr}
 80071f8:	b087      	sub	sp, #28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8007208:	e012      	b.n	8007230 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800720a:	6978      	ldr	r0, [r7, #20]
 800720c:	f7ff fc0e 	bl	8006a2c <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8007210:	4604      	mov	r4, r0
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7ff fc0a 	bl	8006a2c <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8007218:	4603      	mov	r3, r0
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	4619      	mov	r1, r3
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f8d5 	bl	80073ce <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3318      	adds	r3, #24
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	3318      	adds	r3, #24
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	429a      	cmp	r2, r3
 8007236:	d1e8      	bne.n	800720a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 8007238:	697b      	ldr	r3, [r7, #20]
    }
 800723a:	4618      	mov	r0, r3
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	bd90      	pop	{r4, r7, pc}

08007242 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f8d8 	bl	8007404 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f103 0218 	add.w	r2, r3, #24
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	601a      	str	r2, [r3, #0]
	return *this;
 8007288:	687b      	ldr	r3, [r7, #4]
      }
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007296:	b590      	push	{r4, r7, lr}
 8007298:	b087      	sub	sp, #28
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80072a6:	e015      	b.n	80072d4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 80072a8:	6978      	ldr	r0, [r7, #20]
 80072aa:	f7ff fbbf 	bl	8006a2c <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80072ae:	4604      	mov	r4, r0
 80072b0:	f107 030c 	add.w	r3, r7, #12
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f8c9 	bl	800744c <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4619      	mov	r1, r3
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f8ef 	bl	80074a2 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80072c4:	f107 030c 	add.w	r3, r7, #12
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff ffd3 	bl	8007274 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	3318      	adds	r3, #24
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	f107 0208 	add.w	r2, r7, #8
 80072d8:	f107 030c 	add.w	r3, r7, #12
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 f89c 	bl	800741c <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f083 0301 	eor.w	r3, r3, #1
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1db      	bne.n	80072a8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 80072f0:	697b      	ldr	r3, [r7, #20]
	}
 80072f2:	4618      	mov	r0, r3
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd90      	pop	{r4, r7, pc}
	...

080072fc <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007304:	4b03      	ldr	r3, [pc, #12]	; (8007314 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	05555555 	.word	0x05555555

08007318 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff ffe9 	bl	80072fc <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 800732a:	4602      	mov	r2, r0
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4293      	cmp	r3, r2
 8007330:	bf8c      	ite	hi
 8007332:	2301      	movhi	r3, #1
 8007334:	2300      	movls	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf14      	ite	ne
 800733c:	2301      	movne	r3, #1
 800733e:	2300      	moveq	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d901      	bls.n	8007352 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800734e:	f00e f8e8 	bl	8015522 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8007352:	f00e f8e3 	bl	801551c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4613      	mov	r3, r2
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4413      	add	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4618      	mov	r0, r3
 8007362:	f00e f8c7 	bl	80154f4 <_Znwj>
 8007366:	4603      	mov	r3, r0
 8007368:	bf00      	nop
      }
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	0aaaaaaa 	.word	0x0aaaaaaa

08007378 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8007388:	e00d      	b.n	80073a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800738a:	6978      	ldr	r0, [r7, #20]
 800738c:	f7ff fc18 	bl	8006bc0 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8007390:	4603      	mov	r3, r0
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 f89a 	bl	80074ce <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3318      	adds	r3, #24
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	3318      	adds	r3, #24
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d1ed      	bne.n	800738a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 80073ae:	697b      	ldr	r3, [r7, #20]
	}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80073da:	68b8      	ldr	r0, [r7, #8]
 80073dc:	f7fe f92c 	bl	8005638 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 80073e0:	4603      	mov	r3, r0
 80073e2:	461a      	mov	r2, r3
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fe fc7d 	bl	8005ce6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80073ec:	68b8      	ldr	r0, [r7, #8]
 80073ee:	f7ff fb1d 	bl	8006a2c <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80073f2:	4603      	mov	r3, r0
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff f8fd 	bl	80065f6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800741c:	b590      	push	{r4, r7, lr}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff ff19 	bl	800725e <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800742c:	4603      	mov	r3, r0
 800742e:	681c      	ldr	r4, [r3, #0]
 8007430:	6838      	ldr	r0, [r7, #0]
 8007432:	f7ff ff14 	bl	800725e <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8007436:	4603      	mov	r3, r0
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	429c      	cmp	r4, r3
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	bd90      	pop	{r4, r7, pc}

0800744c <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f103 0208 	add.w	r2, r3, #8
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	3308      	adds	r3, #8
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	f7fd fe47 	bl	800511e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	615a      	str	r2, [r3, #20]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80074a2:	b590      	push	{r4, r7, lr}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80074ac:	6838      	ldr	r0, [r7, #0]
 80074ae:	f000 f824 	bl	80074fa <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 80074b2:	4604      	mov	r4, r0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4619      	mov	r1, r3
 80074b8:	2018      	movs	r0, #24
 80074ba:	f7fa f891 	bl	80015e0 <_ZnwjPv>
 80074be:	4603      	mov	r3, r0
 80074c0:	4621      	mov	r1, r4
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff ffce 	bl	8007464 <_ZN3jlb4EdgeC1ERKS0_>
    }
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd90      	pop	{r4, r7, pc}

080074ce <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80074ce:	b590      	push	{r4, r7, lr}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80074d8:	6838      	ldr	r0, [r7, #0]
 80074da:	f000 f819 	bl	8007510 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 80074de:	4604      	mov	r4, r0
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4619      	mov	r1, r3
 80074e4:	2018      	movs	r0, #24
 80074e6:	f7fa f87b 	bl	80015e0 <_ZnwjPv>
 80074ea:	4603      	mov	r3, r0
 80074ec:	4621      	mov	r1, r4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fd0c 	bl	8005f0c <_ZN3jlb4NodeC1ERKS0_>
    }
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd90      	pop	{r4, r7, pc}

080074fa <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
	...

08007528 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007530:	4b08      	ldr	r3, [pc, #32]	; (8007554 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007534:	4907      	ldr	r1, [pc, #28]	; (8007554 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4313      	orrs	r3, r2
 800753a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800753c:	4b05      	ldr	r3, [pc, #20]	; (8007554 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800753e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4013      	ands	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007546:	68fb      	ldr	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	40021000 	.word	0x40021000

08007558 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8007560:	4b08      	ldr	r3, [pc, #32]	; (8007584 <LL_APB1_GRP2_EnableClock+0x2c>)
 8007562:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007564:	4907      	ldr	r1, [pc, #28]	; (8007584 <LL_APB1_GRP2_EnableClock+0x2c>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4313      	orrs	r3, r2
 800756a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <LL_APB1_GRP2_EnableClock+0x2c>)
 800756e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4013      	ands	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007576:	68fb      	ldr	r3, [r7, #12]
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40021000 	.word	0x40021000

08007588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800758c:	f001 ff9d 	bl	80094ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007590:	f000 f850 	bl	8007634 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007594:	f000 ff6a 	bl	800846c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8007598:	f000 ff3e 	bl	8008418 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 800759c:	f000 fa50 	bl	8007a40 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 80075a0:	f000 fb70 	bl	8007c84 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 80075a4:	f000 fed4 	bl	8008350 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 80075a8:	f000 ff08 	bl	80083bc <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 80075ac:	f000 faaa 	bl	8007b04 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 80075b0:	f000 fbbc 	bl	8007d2c <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 80075b4:	f000 fbfc 	bl	8007db0 <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 80075b8:	f000 fc3c 	bl	8007e34 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 80075bc:	f000 fc7c 	bl	8007eb8 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80075c0:	f000 fd86 	bl	80080d0 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80075c4:	f000 fafe 	bl	8007bc4 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80075c8:	f000 f8a4 	bl	8007714 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 80075cc:	f000 fde0 	bl	8008190 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 80075d0:	f000 f9ca 	bl	8007968 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 80075d4:	f000 fa16 	bl	8007a04 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 80075d8:	f000 fe7a 	bl	80082d0 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 80075dc:	f7f9 ff60 	bl	80014a0 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80075e0:	2100      	movs	r1, #0
 80075e2:	480e      	ldr	r0, [pc, #56]	; (800761c <main+0x94>)
 80075e4:	f007 fc14 	bl	800ee10 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80075e8:	2100      	movs	r1, #0
 80075ea:	480d      	ldr	r0, [pc, #52]	; (8007620 <main+0x98>)
 80075ec:	f007 fc10 	bl	800ee10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80075f0:	210c      	movs	r1, #12
 80075f2:	480b      	ldr	r0, [pc, #44]	; (8007620 <main+0x98>)
 80075f4:	f007 fc0c 	bl	800ee10 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim6);
 80075f8:	480a      	ldr	r0, [pc, #40]	; (8007624 <main+0x9c>)
 80075fa:	f007 facf 	bl	800eb9c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80075fe:	f00b fb45 	bl	8012c8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007602:	4a09      	ldr	r2, [pc, #36]	; (8007628 <main+0xa0>)
 8007604:	2100      	movs	r1, #0
 8007606:	4809      	ldr	r0, [pc, #36]	; (800762c <main+0xa4>)
 8007608:	f00b fb8a 	bl	8012d20 <osThreadNew>
 800760c:	4603      	mov	r3, r0
 800760e:	4a08      	ldr	r2, [pc, #32]	; (8007630 <main+0xa8>)
 8007610:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 8007612:	f7fd fc57 	bl	8004ec4 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8007616:	f00b fb5d 	bl	8012cd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800761a:	e7fe      	b.n	800761a <main+0x92>
 800761c:	200005ec 	.word	0x200005ec
 8007620:	20000684 	.word	0x20000684
 8007624:	200006d0 	.word	0x200006d0
 8007628:	080166b0 	.word	0x080166b0
 800762c:	080086d1 	.word	0x080086d1
 8007630:	20000a10 	.word	0x20000a10

08007634 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b098      	sub	sp, #96	; 0x60
 8007638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800763a:	f107 0318 	add.w	r3, r7, #24
 800763e:	2248      	movs	r2, #72	; 0x48
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f00e f9c2 	bl	80159cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007648:	1d3b      	adds	r3, r7, #4
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	605a      	str	r2, [r3, #4]
 8007650:	609a      	str	r2, [r3, #8]
 8007652:	60da      	str	r2, [r3, #12]
 8007654:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8007656:	2000      	movs	r0, #0
 8007658:	f004 fc6c 	bl	800bf34 <HAL_PWREx_ControlVoltageScaling>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	bf14      	ite	ne
 8007662:	2301      	movne	r3, #1
 8007664:	2300      	moveq	r3, #0
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800766c:	f001 f84f 	bl	800870e <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007670:	f004 fc42 	bl	800bef8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007674:	4b26      	ldr	r3, [pc, #152]	; (8007710 <_Z18SystemClock_Configv+0xdc>)
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767a:	4a25      	ldr	r2, [pc, #148]	; (8007710 <_Z18SystemClock_Configv+0xdc>)
 800767c:	f023 0318 	bic.w	r3, r3, #24
 8007680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8007684:	2334      	movs	r3, #52	; 0x34
 8007686:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007688:	2381      	movs	r3, #129	; 0x81
 800768a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800768c:	2301      	movs	r3, #1
 800768e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007690:	2301      	movs	r3, #1
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007694:	2300      	movs	r3, #0
 8007696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007698:	2360      	movs	r3, #96	; 0x60
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800769c:	2302      	movs	r3, #2
 800769e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80076a0:	2301      	movs	r3, #1
 80076a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80076a4:	2301      	movs	r3, #1
 80076a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80076a8:	2337      	movs	r3, #55	; 0x37
 80076aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80076ac:	2307      	movs	r3, #7
 80076ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80076b0:	2302      	movs	r3, #2
 80076b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80076b4:	2302      	movs	r3, #2
 80076b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076b8:	f107 0318 	add.w	r3, r7, #24
 80076bc:	4618      	mov	r0, r3
 80076be:	f004 fcc9 	bl	800c054 <HAL_RCC_OscConfig>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bf14      	ite	ne
 80076c8:	2301      	movne	r3, #1
 80076ca:	2300      	moveq	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80076d2:	f001 f81c 	bl	800870e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076d6:	230f      	movs	r3, #15
 80076d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076da:	2303      	movs	r3, #3
 80076dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	2105      	movs	r1, #5
 80076ee:	4618      	mov	r0, r3
 80076f0:	f005 f986 	bl	800ca00 <HAL_RCC_ClockConfig>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	bf14      	ite	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	2300      	moveq	r3, #0
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8007704:	f001 f803 	bl	800870e <Error_Handler>
  }
}
 8007708:	bf00      	nop
 800770a:	3760      	adds	r7, #96	; 0x60
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40021000 	.word	0x40021000

08007714 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800771a:	f107 031c 	add.w	r3, r7, #28
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	605a      	str	r2, [r3, #4]
 8007724:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007726:	1d3b      	adds	r3, r7, #4
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	605a      	str	r2, [r3, #4]
 800772e:	609a      	str	r2, [r3, #8]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	611a      	str	r2, [r3, #16]
 8007734:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007736:	4b82      	ldr	r3, [pc, #520]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007738:	4a82      	ldr	r2, [pc, #520]	; (8007944 <_ZL12MX_ADC1_Initv+0x230>)
 800773a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800773c:	4b80      	ldr	r3, [pc, #512]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800773e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007742:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007744:	4b7e      	ldr	r3, [pc, #504]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007746:	2200      	movs	r2, #0
 8007748:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800774a:	4b7d      	ldr	r3, [pc, #500]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800774c:	2200      	movs	r2, #0
 800774e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007750:	4b7b      	ldr	r3, [pc, #492]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007752:	2201      	movs	r2, #1
 8007754:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007756:	4b7a      	ldr	r3, [pc, #488]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007758:	2208      	movs	r2, #8
 800775a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800775c:	4b78      	ldr	r3, [pc, #480]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800775e:	2201      	movs	r2, #1
 8007760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007762:	4b77      	ldr	r3, [pc, #476]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007764:	2200      	movs	r2, #0
 8007766:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8007768:	4b75      	ldr	r3, [pc, #468]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800776a:	2208      	movs	r2, #8
 800776c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800776e:	4b74      	ldr	r3, [pc, #464]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007776:	4b72      	ldr	r3, [pc, #456]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007778:	2200      	movs	r2, #0
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800777c:	4b70      	ldr	r3, [pc, #448]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800777e:	2200      	movs	r2, #0
 8007780:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007782:	4b6f      	ldr	r3, [pc, #444]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800778a:	4b6d      	ldr	r3, [pc, #436]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800778c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007790:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8007792:	4b6b      	ldr	r3, [pc, #428]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 800779a:	4b69      	ldr	r3, [pc, #420]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800779c:	2214      	movs	r2, #20
 800779e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 80077a0:	4b67      	ldr	r3, [pc, #412]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 80077a2:	22c0      	movs	r2, #192	; 0xc0
 80077a4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80077a6:	4b66      	ldr	r3, [pc, #408]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80077ac:	4b64      	ldr	r3, [pc, #400]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80077b2:	4863      	ldr	r0, [pc, #396]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 80077b4:	f002 f8ce 	bl	8009954 <HAL_ADC_Init>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	bf14      	ite	ne
 80077be:	2301      	movne	r3, #1
 80077c0:	2300      	moveq	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 80077c8:	f000 ffa1 	bl	800870e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80077d0:	f107 031c 	add.w	r3, r7, #28
 80077d4:	4619      	mov	r1, r3
 80077d6:	485a      	ldr	r0, [pc, #360]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 80077d8:	f003 fa50 	bl	800ac7c <HAL_ADCEx_MultiModeConfigChannel>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bf14      	ite	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	2300      	moveq	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 80077ec:	f000 ff8f 	bl	800870e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80077f0:	4b55      	ldr	r3, [pc, #340]	; (8007948 <_ZL12MX_ADC1_Initv+0x234>)
 80077f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80077f4:	2306      	movs	r3, #6
 80077f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80077f8:	2301      	movs	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80077fc:	237f      	movs	r3, #127	; 0x7f
 80077fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007800:	2304      	movs	r3, #4
 8007802:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007808:	1d3b      	adds	r3, r7, #4
 800780a:	4619      	mov	r1, r3
 800780c:	484c      	ldr	r0, [pc, #304]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800780e:	f002 fcd9 	bl	800a1c4 <HAL_ADC_ConfigChannel>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	bf14      	ite	ne
 8007818:	2301      	movne	r3, #1
 800781a:	2300      	moveq	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 8007822:	f000 ff74 	bl	800870e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007826:	4b49      	ldr	r3, [pc, #292]	; (800794c <_ZL12MX_ADC1_Initv+0x238>)
 8007828:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800782a:	230c      	movs	r3, #12
 800782c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800782e:	1d3b      	adds	r3, r7, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4843      	ldr	r0, [pc, #268]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007834:	f002 fcc6 	bl	800a1c4 <HAL_ADC_ConfigChannel>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	bf14      	ite	ne
 800783e:	2301      	movne	r3, #1
 8007840:	2300      	moveq	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 8007848:	f000 ff61 	bl	800870e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800784c:	4b40      	ldr	r3, [pc, #256]	; (8007950 <_ZL12MX_ADC1_Initv+0x23c>)
 800784e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007850:	2312      	movs	r3, #18
 8007852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	4619      	mov	r1, r3
 8007858:	4839      	ldr	r0, [pc, #228]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 800785a:	f002 fcb3 	bl	800a1c4 <HAL_ADC_ConfigChannel>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	bf14      	ite	ne
 8007864:	2301      	movne	r3, #1
 8007866:	2300      	moveq	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 800786e:	f000 ff4e 	bl	800870e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8007872:	4b38      	ldr	r3, [pc, #224]	; (8007954 <_ZL12MX_ADC1_Initv+0x240>)
 8007874:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007876:	2318      	movs	r3, #24
 8007878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800787a:	1d3b      	adds	r3, r7, #4
 800787c:	4619      	mov	r1, r3
 800787e:	4830      	ldr	r0, [pc, #192]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007880:	f002 fca0 	bl	800a1c4 <HAL_ADC_ConfigChannel>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	bf14      	ite	ne
 800788a:	2301      	movne	r3, #1
 800788c:	2300      	moveq	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 8007894:	f000 ff3b 	bl	800870e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007898:	4b2f      	ldr	r3, [pc, #188]	; (8007958 <_ZL12MX_ADC1_Initv+0x244>)
 800789a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800789c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80078a2:	1d3b      	adds	r3, r7, #4
 80078a4:	4619      	mov	r1, r3
 80078a6:	4826      	ldr	r0, [pc, #152]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 80078a8:	f002 fc8c 	bl	800a1c4 <HAL_ADC_ConfigChannel>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bf14      	ite	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	2300      	moveq	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 80078bc:	f000 ff27 	bl	800870e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80078c0:	4b26      	ldr	r3, [pc, #152]	; (800795c <_ZL12MX_ADC1_Initv+0x248>)
 80078c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80078c4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80078c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80078ca:	1d3b      	adds	r3, r7, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	481c      	ldr	r0, [pc, #112]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 80078d0:	f002 fc78 	bl	800a1c4 <HAL_ADC_ConfigChannel>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	bf14      	ite	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	2300      	moveq	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 80078e4:	f000 ff13 	bl	800870e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80078e8:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <_ZL12MX_ADC1_Initv+0x24c>)
 80078ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80078ec:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80078f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80078f2:	1d3b      	adds	r3, r7, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4812      	ldr	r0, [pc, #72]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 80078f8:	f002 fc64 	bl	800a1c4 <HAL_ADC_ConfigChannel>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bf14      	ite	ne
 8007902:	2301      	movne	r3, #1
 8007904:	2300      	moveq	r3, #0
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 800790c:	f000 feff 	bl	800870e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8007910:	4b14      	ldr	r3, [pc, #80]	; (8007964 <_ZL12MX_ADC1_Initv+0x250>)
 8007912:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8007914:	f44f 7389 	mov.w	r3, #274	; 0x112
 8007918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800791a:	1d3b      	adds	r3, r7, #4
 800791c:	4619      	mov	r1, r3
 800791e:	4808      	ldr	r0, [pc, #32]	; (8007940 <_ZL12MX_ADC1_Initv+0x22c>)
 8007920:	f002 fc50 	bl	800a1c4 <HAL_ADC_ConfigChannel>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	bf14      	ite	ne
 800792a:	2301      	movne	r3, #1
 800792c:	2300      	moveq	r3, #0
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 8007934:	f000 feeb 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007938:	bf00      	nop
 800793a:	3728      	adds	r7, #40	; 0x28
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	200001b8 	.word	0x200001b8
 8007944:	42028000 	.word	0x42028000
 8007948:	04300002 	.word	0x04300002
 800794c:	08600004 	.word	0x08600004
 8007950:	0c900008 	.word	0x0c900008
 8007954:	1d500080 	.word	0x1d500080
 8007958:	21800100 	.word	0x21800100
 800795c:	25b00200 	.word	0x25b00200
 8007960:	32601000 	.word	0x32601000
 8007964:	43210000 	.word	0x43210000

08007968 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800796c:	4b22      	ldr	r3, [pc, #136]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 800796e:	4a23      	ldr	r2, [pc, #140]	; (80079fc <_ZL12MX_I2C1_Initv+0x94>)
 8007970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A21D58;
 8007972:	4b21      	ldr	r3, [pc, #132]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 8007974:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <_ZL12MX_I2C1_Initv+0x98>)
 8007976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007978:	4b1f      	ldr	r3, [pc, #124]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800797e:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 8007980:	2201      	movs	r2, #1
 8007982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007984:	4b1c      	ldr	r3, [pc, #112]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 8007986:	2200      	movs	r2, #0
 8007988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800798a:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 800798c:	2200      	movs	r2, #0
 800798e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007990:	4b19      	ldr	r3, [pc, #100]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 8007992:	2200      	movs	r2, #0
 8007994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007996:	4b18      	ldr	r3, [pc, #96]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 8007998:	2200      	movs	r2, #0
 800799a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800799c:	4b16      	ldr	r3, [pc, #88]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 800799e:	2200      	movs	r2, #0
 80079a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80079a2:	4815      	ldr	r0, [pc, #84]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 80079a4:	f004 f84e 	bl	800ba44 <HAL_I2C_Init>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80079b8:	f000 fea9 	bl	800870e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80079bc:	2100      	movs	r1, #0
 80079be:	480e      	ldr	r0, [pc, #56]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 80079c0:	f004 f8cf 	bl	800bb62 <HAL_I2CEx_ConfigAnalogFilter>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bf14      	ite	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	2300      	moveq	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80079d4:	f000 fe9b 	bl	800870e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80079d8:	2100      	movs	r1, #0
 80079da:	4807      	ldr	r0, [pc, #28]	; (80079f8 <_ZL12MX_I2C1_Initv+0x90>)
 80079dc:	f004 f90c 	bl	800bbf8 <HAL_I2CEx_ConfigDigitalFilter>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf14      	ite	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	2300      	moveq	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80079f0:	f000 fe8d 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80079f4:	bf00      	nop
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20000288 	.word	0x20000288
 80079fc:	40005400 	.word	0x40005400
 8007a00:	10a21d58 	.word	0x10a21d58

08007a04 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f004 f941 	bl	800bc90 <HAL_ICACHE_ConfigAssociativityMode>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8007a1e:	f000 fe76 	bl	800870e <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8007a22:	f004 f955 	bl	800bcd0 <HAL_ICACHE_Enable>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf14      	ite	ne
 8007a2c:	2301      	movne	r3, #1
 8007a2e:	2300      	moveq	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8007a36:	f000 fe6a 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8007a3a:	bf00      	nop
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007a44:	4b2c      	ldr	r3, [pc, #176]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a46:	4a2d      	ldr	r2, [pc, #180]	; (8007afc <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8007a48:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8007a4a:	4b2b      	ldr	r3, [pc, #172]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a4c:	4a2c      	ldr	r2, [pc, #176]	; (8007b00 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 8007a4e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007a50:	4b29      	ldr	r3, [pc, #164]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007a56:	4b28      	ldr	r3, [pc, #160]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8007a5c:	4b26      	ldr	r3, [pc, #152]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8007a62:	4b25      	ldr	r3, [pc, #148]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a64:	220c      	movs	r2, #12
 8007a66:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a68:	4b23      	ldr	r3, [pc, #140]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007a6e:	4b22      	ldr	r3, [pc, #136]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007a74:	4b20      	ldr	r3, [pc, #128]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007a7a:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8007a80:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007a86:	481c      	ldr	r0, [pc, #112]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007a88:	f008 fe2c 	bl	80106e4 <HAL_UART_Init>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	bf14      	ite	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	2300      	moveq	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 8007a9c:	f000 fe37 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4815      	ldr	r0, [pc, #84]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007aa4:	f00a fdef 	bl	8012686 <HAL_UARTEx_SetTxFifoThreshold>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bf14      	ite	ne
 8007aae:	2301      	movne	r3, #1
 8007ab0:	2300      	moveq	r3, #0
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8007ab8:	f000 fe29 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007abc:	2100      	movs	r1, #0
 8007abe:	480e      	ldr	r0, [pc, #56]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007ac0:	f00a fe1f 	bl	8012702 <HAL_UARTEx_SetRxFifoThreshold>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bf14      	ite	ne
 8007aca:	2301      	movne	r3, #1
 8007acc:	2300      	moveq	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 8007ad4:	f000 fe1b 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007ad8:	4807      	ldr	r0, [pc, #28]	; (8007af8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8007ada:	f00a fd9b 	bl	8012614 <HAL_UARTEx_DisableFifoMode>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bf14      	ite	ne
 8007ae4:	2301      	movne	r3, #1
 8007ae6:	2300      	moveq	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8007aee:	f000 fe0e 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007af2:	bf00      	nop
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	200002dc 	.word	0x200002dc
 8007afc:	40008000 	.word	0x40008000
 8007b00:	00033324 	.word	0x00033324

08007b04 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007b08:	4b2c      	ldr	r3, [pc, #176]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b0a:	4a2d      	ldr	r2, [pc, #180]	; (8007bc0 <_ZL13MX_UART4_Initv+0xbc>)
 8007b0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007b0e:	4b2b      	ldr	r3, [pc, #172]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007b16:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007b1c:	4b27      	ldr	r3, [pc, #156]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007b22:	4b26      	ldr	r3, [pc, #152]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8007b28:	4b24      	ldr	r3, [pc, #144]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b2e:	4b23      	ldr	r3, [pc, #140]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b34:	4b21      	ldr	r3, [pc, #132]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007b3a:	4b20      	ldr	r3, [pc, #128]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007b40:	4b1e      	ldr	r3, [pc, #120]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007b46:	4b1d      	ldr	r3, [pc, #116]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007b4c:	481b      	ldr	r0, [pc, #108]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b4e:	f008 fdc9 	bl	80106e4 <HAL_UART_Init>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bf14      	ite	ne
 8007b58:	2301      	movne	r3, #1
 8007b5a:	2300      	moveq	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 8007b62:	f000 fdd4 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007b66:	2100      	movs	r1, #0
 8007b68:	4814      	ldr	r0, [pc, #80]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b6a:	f00a fd8c 	bl	8012686 <HAL_UARTEx_SetTxFifoThreshold>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bf14      	ite	ne
 8007b74:	2301      	movne	r3, #1
 8007b76:	2300      	moveq	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8007b7e:	f000 fdc6 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007b82:	2100      	movs	r1, #0
 8007b84:	480d      	ldr	r0, [pc, #52]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007b86:	f00a fdbc 	bl	8012702 <HAL_UARTEx_SetRxFifoThreshold>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 8007b9a:	f000 fdb8 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007b9e:	4807      	ldr	r0, [pc, #28]	; (8007bbc <_ZL13MX_UART4_Initv+0xb8>)
 8007ba0:	f00a fd38 	bl	8012614 <HAL_UARTEx_DisableFifoMode>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf14      	ite	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	2300      	moveq	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8007bb4:	f000 fdab 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007bb8:	bf00      	nop
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000370 	.word	0x20000370
 8007bc0:	40004c00 	.word	0x40004c00

08007bc4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007bc8:	4b2c      	ldr	r3, [pc, #176]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007bca:	4a2d      	ldr	r2, [pc, #180]	; (8007c80 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8007bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007bce:	4b2b      	ldr	r3, [pc, #172]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007bd6:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007bdc:	4b27      	ldr	r3, [pc, #156]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007be2:	4b26      	ldr	r3, [pc, #152]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007be8:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007bea:	220c      	movs	r2, #12
 8007bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007bee:	4b23      	ldr	r3, [pc, #140]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007bf4:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007bfa:	4b20      	ldr	r3, [pc, #128]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007c00:	4b1e      	ldr	r3, [pc, #120]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007c06:	4b1d      	ldr	r3, [pc, #116]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007c0c:	481b      	ldr	r0, [pc, #108]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007c0e:	f008 fd69 	bl	80106e4 <HAL_UART_Init>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bf14      	ite	ne
 8007c18:	2301      	movne	r3, #1
 8007c1a:	2300      	moveq	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8007c22:	f000 fd74 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007c26:	2100      	movs	r1, #0
 8007c28:	4814      	ldr	r0, [pc, #80]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007c2a:	f00a fd2c 	bl	8012686 <HAL_UARTEx_SetTxFifoThreshold>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bf14      	ite	ne
 8007c34:	2301      	movne	r3, #1
 8007c36:	2300      	moveq	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8007c3e:	f000 fd66 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007c42:	2100      	movs	r1, #0
 8007c44:	480d      	ldr	r0, [pc, #52]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007c46:	f00a fd5c 	bl	8012702 <HAL_UARTEx_SetRxFifoThreshold>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bf14      	ite	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	2300      	moveq	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8007c5a:	f000 fd58 	bl	800870e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007c5e:	4807      	ldr	r0, [pc, #28]	; (8007c7c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8007c60:	f00a fcd8 	bl	8012614 <HAL_UARTEx_DisableFifoMode>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bf14      	ite	ne
 8007c6a:	2301      	movne	r3, #1
 8007c6c:	2300      	moveq	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8007c74:	f000 fd4b 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007c78:	bf00      	nop
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000404 	.word	0x20000404
 8007c80:	40004400 	.word	0x40004400

08007c84 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8007c8a:	463b      	mov	r3, r7
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	609a      	str	r2, [r3, #8]
 8007c94:	60da      	str	r2, [r3, #12]
 8007c96:	611a      	str	r2, [r3, #16]
 8007c98:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007c9a:	4b22      	ldr	r3, [pc, #136]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007c9c:	4a22      	ldr	r2, [pc, #136]	; (8007d28 <_ZL11MX_RTC_Initv+0xa4>)
 8007c9e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007ca0:	4b20      	ldr	r3, [pc, #128]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007ca6:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007ca8:	227f      	movs	r2, #127	; 0x7f
 8007caa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007cac:	4b1d      	ldr	r3, [pc, #116]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007cae:	22ff      	movs	r2, #255	; 0xff
 8007cb0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007cbe:	4b19      	ldr	r3, [pc, #100]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007cc4:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007cca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8007ccc:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007cd2:	4814      	ldr	r0, [pc, #80]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007cd4:	f005 fec0 	bl	800da58 <HAL_RTC_Init>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bf14      	ite	ne
 8007cde:	2301      	movne	r3, #1
 8007ce0:	2300      	moveq	r3, #0
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8007ce8:	f000 fd11 	bl	800870e <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8007cec:	2300      	movs	r3, #0
 8007cee:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8007cfc:	463b      	mov	r3, r7
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4808      	ldr	r0, [pc, #32]	; (8007d24 <_ZL11MX_RTC_Initv+0xa0>)
 8007d02:	f005 ffb7 	bl	800dc74 <HAL_RTCEx_PrivilegeModeSet>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bf14      	ite	ne
 8007d0c:	2301      	movne	r3, #1
 8007d0e:	2300      	moveq	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8007d16:	f000 fcfa 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000498 	.word	0x20000498
 8007d28:	40002800 	.word	0x40002800

08007d2c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007d30:	4b1d      	ldr	r3, [pc, #116]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d32:	4a1e      	ldr	r2, [pc, #120]	; (8007dac <_ZL12MX_SPI1_Initv+0x80>)
 8007d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007d36:	4b1c      	ldr	r3, [pc, #112]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007d3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007d3e:	4b1a      	ldr	r3, [pc, #104]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d44:	4b18      	ldr	r3, [pc, #96]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007d4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d4c:	4b16      	ldr	r3, [pc, #88]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d52:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007d58:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007d60:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d62:	2210      	movs	r2, #16
 8007d64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8007d66:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d68:	2280      	movs	r2, #128	; 0x80
 8007d6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d72:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007d78:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d7a:	2207      	movs	r2, #7
 8007d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007d84:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d86:	2208      	movs	r2, #8
 8007d88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007d8a:	4807      	ldr	r0, [pc, #28]	; (8007da8 <_ZL12MX_SPI1_Initv+0x7c>)
 8007d8c:	f005 ff9e 	bl	800dccc <HAL_SPI_Init>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bf14      	ite	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	2300      	moveq	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8007da0:	f000 fcb5 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007da4:	bf00      	nop
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	200004c0 	.word	0x200004c0
 8007dac:	40013000 	.word	0x40013000

08007db0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007db4:	4b1d      	ldr	r3, [pc, #116]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007db6:	4a1e      	ldr	r2, [pc, #120]	; (8007e30 <_ZL12MX_SPI2_Initv+0x80>)
 8007db8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007dba:	4b1c      	ldr	r3, [pc, #112]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007dbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007dc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007dc2:	4b1a      	ldr	r3, [pc, #104]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007dc8:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007dca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007dce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007dd0:	4b16      	ldr	r3, [pc, #88]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007dd6:	4b15      	ldr	r3, [pc, #84]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007ddc:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007de2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007de4:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007de6:	2218      	movs	r2, #24
 8007de8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8007dea:	4b10      	ldr	r3, [pc, #64]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007dec:	2280      	movs	r2, #128	; 0x80
 8007dee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007df0:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007df6:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007dfe:	2207      	movs	r2, #7
 8007e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007e02:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007e08:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007e0a:	2208      	movs	r2, #8
 8007e0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007e0e:	4807      	ldr	r0, [pc, #28]	; (8007e2c <_ZL12MX_SPI2_Initv+0x7c>)
 8007e10:	f005 ff5c 	bl	800dccc <HAL_SPI_Init>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	bf14      	ite	ne
 8007e1a:	2301      	movne	r3, #1
 8007e1c:	2300      	moveq	r3, #0
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8007e24:	f000 fc73 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007e28:	bf00      	nop
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000524 	.word	0x20000524
 8007e30:	40003800 	.word	0x40003800

08007e34 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007e38:	4b1d      	ldr	r3, [pc, #116]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e3a:	4a1e      	ldr	r2, [pc, #120]	; (8007eb4 <_ZL12MX_SPI3_Initv+0x80>)
 8007e3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007e3e:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007e44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007e46:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e4c:	4b18      	ldr	r3, [pc, #96]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007e52:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e54:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e5a:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007e60:	4b13      	ldr	r3, [pc, #76]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e66:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007e68:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e6a:	2218      	movs	r2, #24
 8007e6c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e6e:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e74:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007e80:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e82:	2207      	movs	r2, #7
 8007e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007e86:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007e8c:	4b08      	ldr	r3, [pc, #32]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e8e:	2208      	movs	r2, #8
 8007e90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007e92:	4807      	ldr	r0, [pc, #28]	; (8007eb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8007e94:	f005 ff1a 	bl	800dccc <HAL_SPI_Init>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bf14      	ite	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	2300      	moveq	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8007ea8:	f000 fc31 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007eac:	bf00      	nop
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20000588 	.word	0x20000588
 8007eb4:	40003c00 	.word	0x40003c00

08007eb8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b0a0      	sub	sp, #128	; 0x80
 8007ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007ebe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	605a      	str	r2, [r3, #4]
 8007ec8:	609a      	str	r2, [r3, #8]
 8007eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ecc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	605a      	str	r2, [r3, #4]
 8007ed6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007ed8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	605a      	str	r2, [r3, #4]
 8007ee2:	609a      	str	r2, [r3, #8]
 8007ee4:	60da      	str	r2, [r3, #12]
 8007ee6:	611a      	str	r2, [r3, #16]
 8007ee8:	615a      	str	r2, [r3, #20]
 8007eea:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007eec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	609a      	str	r2, [r3, #8]
 8007ef8:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007efa:	1d3b      	adds	r3, r7, #4
 8007efc:	2234      	movs	r2, #52	; 0x34
 8007efe:	2100      	movs	r1, #0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f00d fd63 	bl	80159cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007f06:	4b70      	ldr	r3, [pc, #448]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f08:	4a70      	ldr	r2, [pc, #448]	; (80080cc <_ZL12MX_TIM1_Initv+0x214>)
 8007f0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 8007f0c:	4b6e      	ldr	r3, [pc, #440]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f0e:	226e      	movs	r2, #110	; 0x6e
 8007f10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f12:	4b6d      	ldr	r3, [pc, #436]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8007f18:	4b6b      	ldr	r3, [pc, #428]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f20:	4b69      	ldr	r3, [pc, #420]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f26:	4b68      	ldr	r3, [pc, #416]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f2c:	4b66      	ldr	r3, [pc, #408]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f2e:	2280      	movs	r2, #128	; 0x80
 8007f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007f32:	4865      	ldr	r0, [pc, #404]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f34:	f006 fdda 	bl	800eaec <HAL_TIM_Base_Init>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bf14      	ite	ne
 8007f3e:	2301      	movne	r3, #1
 8007f40:	2300      	moveq	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <_ZL12MX_TIM1_Initv+0x94>
  {
    Error_Handler();
 8007f48:	f000 fbe1 	bl	800870e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f50:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007f52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f56:	4619      	mov	r1, r3
 8007f58:	485b      	ldr	r0, [pc, #364]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f5a:	f007 fc35 	bl	800f7c8 <HAL_TIM_ConfigClockSource>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bf14      	ite	ne
 8007f64:	2301      	movne	r3, #1
 8007f66:	2300      	moveq	r3, #0
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <_ZL12MX_TIM1_Initv+0xba>
  {
    Error_Handler();
 8007f6e:	f000 fbce 	bl	800870e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007f72:	4855      	ldr	r0, [pc, #340]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f74:	f006 feea 	bl	800ed4c <HAL_TIM_PWM_Init>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bf14      	ite	ne
 8007f7e:	2301      	movne	r3, #1
 8007f80:	2300      	moveq	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <_ZL12MX_TIM1_Initv+0xd4>
  {
    Error_Handler();
 8007f88:	f000 fbc1 	bl	800870e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8007f8c:	484e      	ldr	r0, [pc, #312]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007f8e:	f007 f845 	bl	800f01c <HAL_TIM_IC_Init>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bf14      	ite	ne
 8007f98:	2301      	movne	r3, #1
 8007f9a:	2300      	moveq	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <_ZL12MX_TIM1_Initv+0xee>
  {
    Error_Handler();
 8007fa2:	f000 fbb4 	bl	800870e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007faa:	2300      	movs	r3, #0
 8007fac:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007fb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4843      	ldr	r0, [pc, #268]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007fba:	f008 fa4d 	bl	8010458 <HAL_TIMEx_MasterConfigSynchronization>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bf14      	ite	ne
 8007fc4:	2301      	movne	r3, #1
 8007fc6:	2300      	moveq	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <_ZL12MX_TIM1_Initv+0x11a>
  {
    Error_Handler();
 8007fce:	f000 fb9e 	bl	800870e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007fd2:	2360      	movs	r3, #96	; 0x60
 8007fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.Pulse = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007fea:	2300      	movs	r3, #0
 8007fec:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007fee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4834      	ldr	r0, [pc, #208]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 8007ff8:	f007 fad2 	bl	800f5a0 <HAL_TIM_PWM_ConfigChannel>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bf14      	ite	ne
 8008002:	2301      	movne	r3, #1
 8008004:	2300      	moveq	r3, #0
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <_ZL12MX_TIM1_Initv+0x158>
  {
    Error_Handler();
 800800c:	f000 fb7f 	bl	800870e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008010:	2300      	movs	r3, #0
 8008012:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008014:	2301      	movs	r3, #1
 8008016:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008018:	2300      	movs	r3, #0
 800801a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8008020:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008024:	2208      	movs	r2, #8
 8008026:	4619      	mov	r1, r3
 8008028:	4827      	ldr	r0, [pc, #156]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 800802a:	f007 fa1d 	bl	800f468 <HAL_TIM_IC_ConfigChannel>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	bf14      	ite	ne
 8008034:	2301      	movne	r3, #1
 8008036:	2300      	moveq	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <_ZL12MX_TIM1_Initv+0x18a>
  {
    Error_Handler();
 800803e:	f000 fb66 	bl	800870e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8008042:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008046:	220c      	movs	r2, #12
 8008048:	4619      	mov	r1, r3
 800804a:	481f      	ldr	r0, [pc, #124]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 800804c:	f007 fa0c 	bl	800f468 <HAL_TIM_IC_ConfigChannel>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	bf14      	ite	ne
 8008056:	2301      	movne	r3, #1
 8008058:	2300      	moveq	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <_ZL12MX_TIM1_Initv+0x1ac>
  {
    Error_Handler();
 8008060:	f000 fb55 	bl	800870e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008064:	2300      	movs	r3, #0
 8008066:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008068:	2300      	movs	r3, #0
 800806a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800807c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008082:	2300      	movs	r3, #0
 8008084:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008086:	2300      	movs	r3, #0
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800808a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800808e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008094:	2300      	movs	r3, #0
 8008096:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008098:	2300      	movs	r3, #0
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800809c:	1d3b      	adds	r3, r7, #4
 800809e:	4619      	mov	r1, r3
 80080a0:	4809      	ldr	r0, [pc, #36]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 80080a2:	f008 fa61 	bl	8010568 <HAL_TIMEx_ConfigBreakDeadTime>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bf14      	ite	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	2300      	moveq	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <_ZL12MX_TIM1_Initv+0x202>
  {
    Error_Handler();
 80080b6:	f000 fb2a 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80080ba:	4803      	ldr	r0, [pc, #12]	; (80080c8 <_ZL12MX_TIM1_Initv+0x210>)
 80080bc:	f000 ff5c 	bl	8008f78 <HAL_TIM_MspPostInit>

}
 80080c0:	bf00      	nop
 80080c2:	3780      	adds	r7, #128	; 0x80
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200005ec 	.word	0x200005ec
 80080cc:	40012c00 	.word	0x40012c00

080080d0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08c      	sub	sp, #48	; 0x30
 80080d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80080d6:	f107 030c 	add.w	r3, r7, #12
 80080da:	2224      	movs	r2, #36	; 0x24
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f00d fc74 	bl	80159cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080e4:	463b      	mov	r3, r7
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	605a      	str	r2, [r3, #4]
 80080ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80080ee:	4b26      	ldr	r3, [pc, #152]	; (8008188 <_ZL12MX_TIM3_Initv+0xb8>)
 80080f0:	4a26      	ldr	r2, [pc, #152]	; (800818c <_ZL12MX_TIM3_Initv+0xbc>)
 80080f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80080f4:	4b24      	ldr	r3, [pc, #144]	; (8008188 <_ZL12MX_TIM3_Initv+0xb8>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080fa:	4b23      	ldr	r3, [pc, #140]	; (8008188 <_ZL12MX_TIM3_Initv+0xb8>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008100:	4b21      	ldr	r3, [pc, #132]	; (8008188 <_ZL12MX_TIM3_Initv+0xb8>)
 8008102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008106:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008108:	4b1f      	ldr	r3, [pc, #124]	; (8008188 <_ZL12MX_TIM3_Initv+0xb8>)
 800810a:	2200      	movs	r2, #0
 800810c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800810e:	4b1e      	ldr	r3, [pc, #120]	; (8008188 <_ZL12MX_TIM3_Initv+0xb8>)
 8008110:	2200      	movs	r2, #0
 8008112:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008114:	2303      	movs	r3, #3
 8008116:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008118:	2300      	movs	r3, #0
 800811a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800811c:	2301      	movs	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008128:	2300      	movs	r3, #0
 800812a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800812c:	2301      	movs	r3, #1
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008130:	2300      	movs	r3, #0
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8008138:	f107 030c 	add.w	r3, r7, #12
 800813c:	4619      	mov	r1, r3
 800813e:	4812      	ldr	r0, [pc, #72]	; (8008188 <_ZL12MX_TIM3_Initv+0xb8>)
 8008140:	f006 ffcd 	bl	800f0de <HAL_TIM_Encoder_Init>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	bf14      	ite	ne
 800814a:	2301      	movne	r3, #1
 800814c:	2300      	moveq	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8008154:	f000 fadb 	bl	800870e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008158:	2300      	movs	r3, #0
 800815a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800815c:	2300      	movs	r3, #0
 800815e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008160:	463b      	mov	r3, r7
 8008162:	4619      	mov	r1, r3
 8008164:	4808      	ldr	r0, [pc, #32]	; (8008188 <_ZL12MX_TIM3_Initv+0xb8>)
 8008166:	f008 f977 	bl	8010458 <HAL_TIMEx_MasterConfigSynchronization>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	bf14      	ite	ne
 8008170:	2301      	movne	r3, #1
 8008172:	2300      	moveq	r3, #0
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800817a:	f000 fac8 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800817e:	bf00      	nop
 8008180:	3730      	adds	r7, #48	; 0x30
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000638 	.word	0x20000638
 800818c:	40000400 	.word	0x40000400

08008190 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08e      	sub	sp, #56	; 0x38
 8008194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	605a      	str	r2, [r3, #4]
 80081a0:	609a      	str	r2, [r3, #8]
 80081a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081a4:	f107 031c 	add.w	r3, r7, #28
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	605a      	str	r2, [r3, #4]
 80081ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80081b0:	463b      	mov	r3, r7
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	605a      	str	r2, [r3, #4]
 80081b8:	609a      	str	r2, [r3, #8]
 80081ba:	60da      	str	r2, [r3, #12]
 80081bc:	611a      	str	r2, [r3, #16]
 80081be:	615a      	str	r2, [r3, #20]
 80081c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80081c2:	4b41      	ldr	r3, [pc, #260]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80081c4:	4a41      	ldr	r2, [pc, #260]	; (80082cc <_ZL12MX_TIM5_Initv+0x13c>)
 80081c6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80081c8:	4b3f      	ldr	r3, [pc, #252]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80081ce:	4b3e      	ldr	r3, [pc, #248]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80081d0:	2220      	movs	r2, #32
 80081d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 80081d4:	4b3c      	ldr	r3, [pc, #240]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80081d6:	f240 722a 	movw	r2, #1834	; 0x72a
 80081da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081dc:	4b3a      	ldr	r3, [pc, #232]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80081de:	2200      	movs	r2, #0
 80081e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80081e2:	4b39      	ldr	r3, [pc, #228]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80081e4:	2280      	movs	r2, #128	; 0x80
 80081e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80081e8:	4837      	ldr	r0, [pc, #220]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80081ea:	f006 fc7f 	bl	800eaec <HAL_TIM_Base_Init>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf14      	ite	ne
 80081f4:	2301      	movne	r3, #1
 80081f6:	2300      	moveq	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 80081fe:	f000 fa86 	bl	800870e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800820c:	4619      	mov	r1, r3
 800820e:	482e      	ldr	r0, [pc, #184]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 8008210:	f007 fada 	bl	800f7c8 <HAL_TIM_ConfigClockSource>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	bf14      	ite	ne
 800821a:	2301      	movne	r3, #1
 800821c:	2300      	moveq	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8008224:	f000 fa73 	bl	800870e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8008228:	4827      	ldr	r0, [pc, #156]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 800822a:	f006 fd8f 	bl	800ed4c <HAL_TIM_PWM_Init>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	bf14      	ite	ne
 8008234:	2301      	movne	r3, #1
 8008236:	2300      	moveq	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800823e:	f000 fa66 	bl	800870e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008242:	2300      	movs	r3, #0
 8008244:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008246:	2300      	movs	r3, #0
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800824a:	f107 031c 	add.w	r3, r7, #28
 800824e:	4619      	mov	r1, r3
 8008250:	481d      	ldr	r0, [pc, #116]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 8008252:	f008 f901 	bl	8010458 <HAL_TIMEx_MasterConfigSynchronization>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	bf14      	ite	ne
 800825c:	2301      	movne	r3, #1
 800825e:	2300      	moveq	r3, #0
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8008266:	f000 fa52 	bl	800870e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800826a:	2360      	movs	r3, #96	; 0x60
 800826c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800827a:	463b      	mov	r3, r7
 800827c:	2200      	movs	r2, #0
 800827e:	4619      	mov	r1, r3
 8008280:	4811      	ldr	r0, [pc, #68]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 8008282:	f007 f98d 	bl	800f5a0 <HAL_TIM_PWM_ConfigChannel>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	bf14      	ite	ne
 800828c:	2301      	movne	r3, #1
 800828e:	2300      	moveq	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8008296:	f000 fa3a 	bl	800870e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800829a:	463b      	mov	r3, r7
 800829c:	220c      	movs	r2, #12
 800829e:	4619      	mov	r1, r3
 80082a0:	4809      	ldr	r0, [pc, #36]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80082a2:	f007 f97d 	bl	800f5a0 <HAL_TIM_PWM_ConfigChannel>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bf14      	ite	ne
 80082ac:	2301      	movne	r3, #1
 80082ae:	2300      	moveq	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 80082b6:	f000 fa2a 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80082ba:	4803      	ldr	r0, [pc, #12]	; (80082c8 <_ZL12MX_TIM5_Initv+0x138>)
 80082bc:	f000 fe5c 	bl	8008f78 <HAL_TIM_MspPostInit>

}
 80082c0:	bf00      	nop
 80082c2:	3738      	adds	r7, #56	; 0x38
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000684 	.word	0x20000684
 80082cc:	40000c00 	.word	0x40000c00

080082d0 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082d6:	1d3b      	adds	r3, r7, #4
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	605a      	str	r2, [r3, #4]
 80082de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80082e0:	4b19      	ldr	r3, [pc, #100]	; (8008348 <_ZL12MX_TIM6_Initv+0x78>)
 80082e2:	4a1a      	ldr	r2, [pc, #104]	; (800834c <_ZL12MX_TIM6_Initv+0x7c>)
 80082e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 80082e6:	4b18      	ldr	r3, [pc, #96]	; (8008348 <_ZL12MX_TIM6_Initv+0x78>)
 80082e8:	226e      	movs	r2, #110	; 0x6e
 80082ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082ec:	4b16      	ldr	r3, [pc, #88]	; (8008348 <_ZL12MX_TIM6_Initv+0x78>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <_ZL12MX_TIM6_Initv+0x78>)
 80082f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082fa:	4b13      	ldr	r3, [pc, #76]	; (8008348 <_ZL12MX_TIM6_Initv+0x78>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008300:	4811      	ldr	r0, [pc, #68]	; (8008348 <_ZL12MX_TIM6_Initv+0x78>)
 8008302:	f006 fbf3 	bl	800eaec <HAL_TIM_Base_Init>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	bf14      	ite	ne
 800830c:	2301      	movne	r3, #1
 800830e:	2300      	moveq	r3, #0
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8008316:	f000 f9fa 	bl	800870e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800831a:	2300      	movs	r3, #0
 800831c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008322:	1d3b      	adds	r3, r7, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4808      	ldr	r0, [pc, #32]	; (8008348 <_ZL12MX_TIM6_Initv+0x78>)
 8008328:	f008 f896 	bl	8010458 <HAL_TIMEx_MasterConfigSynchronization>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	bf14      	ite	ne
 8008332:	2301      	movne	r3, #1
 8008334:	2300      	moveq	r3, #0
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800833c:	f000 f9e7 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008340:	bf00      	nop
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	200006d0 	.word	0x200006d0
 800834c:	40001000 	.word	0x40001000

08008350 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008356:	463b      	mov	r3, r7
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	605a      	str	r2, [r3, #4]
 800835e:	609a      	str	r2, [r3, #8]
 8008360:	60da      	str	r2, [r3, #12]
 8008362:	611a      	str	r2, [r3, #16]
 8008364:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8008366:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800836a:	f7ff f8f5 	bl	8007558 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800836e:	2002      	movs	r0, #2
 8008370:	f7ff f8da 	bl	8007528 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8008374:	2001      	movs	r0, #1
 8008376:	f7ff f8d7 	bl	8007528 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800837a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008380:	2303      	movs	r3, #3
 8008382:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008384:	2300      	movs	r3, #0
 8008386:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008388:	463b      	mov	r3, r7
 800838a:	4619      	mov	r1, r3
 800838c:	4809      	ldr	r0, [pc, #36]	; (80083b4 <_ZL13MX_UCPD1_Initv+0x64>)
 800838e:	f00a fb90 	bl	8012ab2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8008392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008396:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008398:	2303      	movs	r3, #3
 800839a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800839c:	2300      	movs	r3, #0
 800839e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083a0:	463b      	mov	r3, r7
 80083a2:	4619      	mov	r1, r3
 80083a4:	4804      	ldr	r0, [pc, #16]	; (80083b8 <_ZL13MX_UCPD1_Initv+0x68>)
 80083a6:	f00a fb84 	bl	8012ab2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80083aa:	bf00      	nop
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	42020400 	.word	0x42020400
 80083b8:	42020000 	.word	0x42020000

080083bc <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80083c0:	4b13      	ldr	r3, [pc, #76]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083c2:	4a14      	ldr	r2, [pc, #80]	; (8008414 <_ZL15MX_USB_PCD_Initv+0x58>)
 80083c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083c6:	4b12      	ldr	r3, [pc, #72]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083c8:	2208      	movs	r2, #8
 80083ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083cc:	4b10      	ldr	r3, [pc, #64]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083ce:	2202      	movs	r2, #2
 80083d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083d2:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083d4:	2202      	movs	r2, #2
 80083d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80083d8:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083da:	2200      	movs	r2, #0
 80083dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083e4:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083ea:	4b09      	ldr	r3, [pc, #36]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083f0:	4807      	ldr	r0, [pc, #28]	; (8008410 <_ZL15MX_USB_PCD_Initv+0x54>)
 80083f2:	f003 fc7d 	bl	800bcf0 <HAL_PCD_Init>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bf14      	ite	ne
 80083fc:	2301      	movne	r3, #1
 80083fe:	2300      	moveq	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8008406:	f000 f982 	bl	800870e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800840a:	bf00      	nop
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	2000071c 	.word	0x2000071c
 8008414:	4000d400 	.word	0x4000d400

08008418 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <_ZL11MX_DMA_Initv+0x50>)
 8008420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008422:	4a11      	ldr	r2, [pc, #68]	; (8008468 <_ZL11MX_DMA_Initv+0x50>)
 8008424:	f043 0304 	orr.w	r3, r3, #4
 8008428:	6493      	str	r3, [r2, #72]	; 0x48
 800842a:	4b0f      	ldr	r3, [pc, #60]	; (8008468 <_ZL11MX_DMA_Initv+0x50>)
 800842c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	607b      	str	r3, [r7, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008436:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <_ZL11MX_DMA_Initv+0x50>)
 8008438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800843a:	4a0b      	ldr	r2, [pc, #44]	; (8008468 <_ZL11MX_DMA_Initv+0x50>)
 800843c:	f043 0301 	orr.w	r3, r3, #1
 8008440:	6493      	str	r3, [r2, #72]	; 0x48
 8008442:	4b09      	ldr	r3, [pc, #36]	; (8008468 <_ZL11MX_DMA_Initv+0x50>)
 8008444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800844e:	2200      	movs	r2, #0
 8008450:	2105      	movs	r1, #5
 8008452:	201d      	movs	r0, #29
 8008454:	f002 fd6e 	bl	800af34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008458:	201d      	movs	r0, #29
 800845a:	f002 fd85 	bl	800af68 <HAL_NVIC_EnableIRQ>

}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40021000 	.word	0x40021000

0800846c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08c      	sub	sp, #48	; 0x30
 8008470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008472:	f107 031c 	add.w	r3, r7, #28
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	605a      	str	r2, [r3, #4]
 800847c:	609a      	str	r2, [r3, #8]
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008482:	4b8b      	ldr	r3, [pc, #556]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 8008484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008486:	4a8a      	ldr	r2, [pc, #552]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 8008488:	f043 0310 	orr.w	r3, r3, #16
 800848c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800848e:	4b88      	ldr	r3, [pc, #544]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 8008490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008492:	f003 0310 	and.w	r3, r3, #16
 8008496:	61bb      	str	r3, [r7, #24]
 8008498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800849a:	4b85      	ldr	r3, [pc, #532]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 800849c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849e:	4a84      	ldr	r2, [pc, #528]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084a0:	f043 0304 	orr.w	r3, r3, #4
 80084a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084a6:	4b82      	ldr	r3, [pc, #520]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80084b2:	4b7f      	ldr	r3, [pc, #508]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b6:	4a7e      	ldr	r2, [pc, #504]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084b8:	f043 0320 	orr.w	r3, r3, #32
 80084bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084be:	4b7c      	ldr	r3, [pc, #496]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084ca:	4b79      	ldr	r3, [pc, #484]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ce:	4a78      	ldr	r2, [pc, #480]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084d0:	f043 0301 	orr.w	r3, r3, #1
 80084d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084d6:	4b76      	ldr	r3, [pc, #472]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084e2:	4b73      	ldr	r3, [pc, #460]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e6:	4a72      	ldr	r2, [pc, #456]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084e8:	f043 0302 	orr.w	r3, r3, #2
 80084ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084ee:	4b70      	ldr	r3, [pc, #448]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	60bb      	str	r3, [r7, #8]
 80084f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084fa:	4b6d      	ldr	r3, [pc, #436]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 80084fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fe:	4a6c      	ldr	r2, [pc, #432]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 8008500:	f043 0308 	orr.w	r3, r3, #8
 8008504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008506:	4b6a      	ldr	r3, [pc, #424]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 8008508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	607b      	str	r3, [r7, #4]
 8008510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008512:	4b67      	ldr	r3, [pc, #412]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 8008514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008516:	4a66      	ldr	r2, [pc, #408]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 8008518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800851c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800851e:	4b64      	ldr	r3, [pc, #400]	; (80086b0 <_ZL12MX_GPIO_Initv+0x244>)
 8008520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800852a:	f003 fd5f 	bl	800bfec <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 800852e:	2200      	movs	r2, #0
 8008530:	f24e 0108 	movw	r1, #57352	; 0xe008
 8008534:	485f      	ldr	r0, [pc, #380]	; (80086b4 <_ZL12MX_GPIO_Initv+0x248>)
 8008536:	f003 fa53 	bl	800b9e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800853a:	2200      	movs	r2, #0
 800853c:	21a4      	movs	r1, #164	; 0xa4
 800853e:	485e      	ldr	r0, [pc, #376]	; (80086b8 <_ZL12MX_GPIO_Initv+0x24c>)
 8008540:	f003 fa4e 	bl	800b9e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8008544:	2200      	movs	r2, #0
 8008546:	f64f 7187 	movw	r1, #65415	; 0xff87
 800854a:	485c      	ldr	r0, [pc, #368]	; (80086bc <_ZL12MX_GPIO_Initv+0x250>)
 800854c:	f003 fa48 	bl	800b9e0 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8008550:	2200      	movs	r2, #0
 8008552:	2180      	movs	r1, #128	; 0x80
 8008554:	485a      	ldr	r0, [pc, #360]	; (80086c0 <_ZL12MX_GPIO_Initv+0x254>)
 8008556:	f003 fa43 	bl	800b9e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800855a:	2200      	movs	r2, #0
 800855c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008560:	4858      	ldr	r0, [pc, #352]	; (80086c4 <_ZL12MX_GPIO_Initv+0x258>)
 8008562:	f003 fa3d 	bl	800b9e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8008566:	2200      	movs	r2, #0
 8008568:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 800856c:	4856      	ldr	r0, [pc, #344]	; (80086c8 <_ZL12MX_GPIO_Initv+0x25c>)
 800856e:	f003 fa37 	bl	800b9e0 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 8008572:	2308      	movs	r3, #8
 8008574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008576:	2301      	movs	r3, #1
 8008578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857a:	2300      	movs	r3, #0
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800857e:	2303      	movs	r3, #3
 8008580:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8008582:	f107 031c 	add.w	r3, r7, #28
 8008586:	4619      	mov	r1, r3
 8008588:	484a      	ldr	r0, [pc, #296]	; (80086b4 <_ZL12MX_GPIO_Initv+0x248>)
 800858a:	f003 f8a9 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 800858e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8008592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008594:	2300      	movs	r3, #0
 8008596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008598:	2300      	movs	r3, #0
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800859c:	f107 031c 	add.w	r3, r7, #28
 80085a0:	4619      	mov	r1, r3
 80085a2:	4844      	ldr	r0, [pc, #272]	; (80086b4 <_ZL12MX_GPIO_Initv+0x248>)
 80085a4:	f003 f89c 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 80085a8:	23a4      	movs	r3, #164	; 0xa4
 80085aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ac:	2301      	movs	r3, #1
 80085ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b0:	2300      	movs	r3, #0
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085b4:	2300      	movs	r3, #0
 80085b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085b8:	f107 031c 	add.w	r3, r7, #28
 80085bc:	4619      	mov	r1, r3
 80085be:	483e      	ldr	r0, [pc, #248]	; (80086b8 <_ZL12MX_GPIO_Initv+0x24c>)
 80085c0:	f003 f88e 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 80085c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80085c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ca:	2301      	movs	r3, #1
 80085cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085d2:	2300      	movs	r3, #0
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80085d6:	f107 031c 	add.w	r3, r7, #28
 80085da:	4619      	mov	r1, r3
 80085dc:	4835      	ldr	r0, [pc, #212]	; (80086b4 <_ZL12MX_GPIO_Initv+0x248>)
 80085de:	f003 f87f 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 80085e2:	f643 6301 	movw	r3, #15873	; 0x3e01
 80085e6:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085e8:	2300      	movs	r3, #0
 80085ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80085f0:	f107 031c 	add.w	r3, r7, #28
 80085f4:	4619      	mov	r1, r3
 80085f6:	4835      	ldr	r0, [pc, #212]	; (80086cc <_ZL12MX_GPIO_Initv+0x260>)
 80085f8:	f003 f872 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80085fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008602:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008608:	2300      	movs	r3, #0
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800860c:	f107 031c 	add.w	r3, r7, #28
 8008610:	4619      	mov	r1, r3
 8008612:	4829      	ldr	r0, [pc, #164]	; (80086b8 <_ZL12MX_GPIO_Initv+0x24c>)
 8008614:	f003 f864 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8008618:	f64f 7387 	movw	r3, #65415	; 0xff87
 800861c:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800861e:	2301      	movs	r3, #1
 8008620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008622:	2300      	movs	r3, #0
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008626:	2300      	movs	r3, #0
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800862a:	f107 031c 	add.w	r3, r7, #28
 800862e:	4619      	mov	r1, r3
 8008630:	4822      	ldr	r0, [pc, #136]	; (80086bc <_ZL12MX_GPIO_Initv+0x250>)
 8008632:	f003 f855 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 8008636:	2370      	movs	r3, #112	; 0x70
 8008638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800863a:	2300      	movs	r3, #0
 800863c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863e:	2300      	movs	r3, #0
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008642:	f107 031c 	add.w	r3, r7, #28
 8008646:	4619      	mov	r1, r3
 8008648:	481f      	ldr	r0, [pc, #124]	; (80086c8 <_ZL12MX_GPIO_Initv+0x25c>)
 800864a:	f003 f849 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800864e:	2380      	movs	r3, #128	; 0x80
 8008650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008652:	2301      	movs	r3, #1
 8008654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008656:	2300      	movs	r3, #0
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800865a:	2300      	movs	r3, #0
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800865e:	f107 031c 	add.w	r3, r7, #28
 8008662:	4619      	mov	r1, r3
 8008664:	4816      	ldr	r0, [pc, #88]	; (80086c0 <_ZL12MX_GPIO_Initv+0x254>)
 8008666:	f003 f83b 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800866a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800866e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008670:	2301      	movs	r3, #1
 8008672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008674:	2300      	movs	r3, #0
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008678:	2300      	movs	r3, #0
 800867a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800867c:	f107 031c 	add.w	r3, r7, #28
 8008680:	4619      	mov	r1, r3
 8008682:	4810      	ldr	r0, [pc, #64]	; (80086c4 <_ZL12MX_GPIO_Initv+0x258>)
 8008684:	f003 f82c 	bl	800b6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8008688:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 800868c:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800868e:	2301      	movs	r3, #1
 8008690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008692:	2300      	movs	r3, #0
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008696:	2300      	movs	r3, #0
 8008698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800869a:	f107 031c 	add.w	r3, r7, #28
 800869e:	4619      	mov	r1, r3
 80086a0:	4809      	ldr	r0, [pc, #36]	; (80086c8 <_ZL12MX_GPIO_Initv+0x25c>)
 80086a2:	f003 f81d 	bl	800b6e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80086a6:	bf00      	nop
 80086a8:	3730      	adds	r7, #48	; 0x30
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	40021000 	.word	0x40021000
 80086b4:	42021400 	.word	0x42021400
 80086b8:	42020400 	.word	0x42020400
 80086bc:	42020c00 	.word	0x42020c00
 80086c0:	42020800 	.word	0x42020800
 80086c4:	42020000 	.word	0x42020000
 80086c8:	42021800 	.word	0x42021800
 80086cc:	42021000 	.word	0x42021000

080086d0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80086d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086dc:	4803      	ldr	r0, [pc, #12]	; (80086ec <_Z16StartDefaultTaskPv+0x1c>)
 80086de:	f003 f997 	bl	800ba10 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 80086e2:	2064      	movs	r0, #100	; 0x64
 80086e4:	f00b fa9c 	bl	8013c20 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80086e8:	e7f6      	b.n	80086d8 <_Z16StartDefaultTaskPv+0x8>
 80086ea:	bf00      	nop
 80086ec:	42020000 	.word	0x42020000

080086f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008700:	d101      	bne.n	8008706 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008702:	f000 fefd 	bl	8009500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800870e:	b480      	push	{r7}
 8008710:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008712:	b672      	cpsid	i
}
 8008714:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008716:	e7fe      	b.n	8008716 <Error_Handler+0x8>

08008718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800871e:	4b11      	ldr	r3, [pc, #68]	; (8008764 <HAL_MspInit+0x4c>)
 8008720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008722:	4a10      	ldr	r2, [pc, #64]	; (8008764 <HAL_MspInit+0x4c>)
 8008724:	f043 0301 	orr.w	r3, r3, #1
 8008728:	6613      	str	r3, [r2, #96]	; 0x60
 800872a:	4b0e      	ldr	r3, [pc, #56]	; (8008764 <HAL_MspInit+0x4c>)
 800872c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	607b      	str	r3, [r7, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008736:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <HAL_MspInit+0x4c>)
 8008738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873a:	4a0a      	ldr	r2, [pc, #40]	; (8008764 <HAL_MspInit+0x4c>)
 800873c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008740:	6593      	str	r3, [r2, #88]	; 0x58
 8008742:	4b08      	ldr	r3, [pc, #32]	; (8008764 <HAL_MspInit+0x4c>)
 8008744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800874e:	2200      	movs	r2, #0
 8008750:	2107      	movs	r1, #7
 8008752:	f06f 0001 	mvn.w	r0, #1
 8008756:	f002 fbed 	bl	800af34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	40021000 	.word	0x40021000

08008768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08c      	sub	sp, #48	; 0x30
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008770:	f107 031c 	add.w	r3, r7, #28
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	609a      	str	r2, [r3, #8]
 800877c:	60da      	str	r2, [r3, #12]
 800877e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a4b      	ldr	r2, [pc, #300]	; (80088b4 <HAL_ADC_MspInit+0x14c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	f040 8090 	bne.w	80088ac <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800878c:	4b4a      	ldr	r3, [pc, #296]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 800878e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008790:	4a49      	ldr	r2, [pc, #292]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 8008792:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008798:	4b47      	ldr	r3, [pc, #284]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 800879a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800879c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087a0:	61bb      	str	r3, [r7, #24]
 80087a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087a4:	4b44      	ldr	r3, [pc, #272]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a8:	4a43      	ldr	r2, [pc, #268]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087aa:	f043 0304 	orr.w	r3, r3, #4
 80087ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087b0:	4b41      	ldr	r3, [pc, #260]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	617b      	str	r3, [r7, #20]
 80087ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087bc:	4b3e      	ldr	r3, [pc, #248]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c0:	4a3d      	ldr	r2, [pc, #244]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087c8:	4b3b      	ldr	r3, [pc, #236]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	613b      	str	r3, [r7, #16]
 80087d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087d4:	4b38      	ldr	r3, [pc, #224]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087d8:	4a37      	ldr	r2, [pc, #220]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087da:	f043 0302 	orr.w	r3, r3, #2
 80087de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087e0:	4b35      	ldr	r3, [pc, #212]	; (80088b8 <HAL_ADC_MspInit+0x150>)
 80087e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 80087ec:	230f      	movs	r3, #15
 80087ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087f0:	2303      	movs	r3, #3
 80087f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087f8:	f107 031c 	add.w	r3, r7, #28
 80087fc:	4619      	mov	r1, r3
 80087fe:	482f      	ldr	r0, [pc, #188]	; (80088bc <HAL_ADC_MspInit+0x154>)
 8008800:	f002 ff6e 	bl	800b6e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 8008804:	239c      	movs	r3, #156	; 0x9c
 8008806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008808:	2303      	movs	r3, #3
 800880a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800880c:	2300      	movs	r3, #0
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008810:	f107 031c 	add.w	r3, r7, #28
 8008814:	4619      	mov	r1, r3
 8008816:	482a      	ldr	r0, [pc, #168]	; (80088c0 <HAL_ADC_MspInit+0x158>)
 8008818:	f002 ff62 	bl	800b6e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 800881c:	2303      	movs	r3, #3
 800881e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008820:	2303      	movs	r3, #3
 8008822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008824:	2300      	movs	r3, #0
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008828:	f107 031c 	add.w	r3, r7, #28
 800882c:	4619      	mov	r1, r3
 800882e:	4825      	ldr	r0, [pc, #148]	; (80088c4 <HAL_ADC_MspInit+0x15c>)
 8008830:	f002 ff56 	bl	800b6e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008834:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008836:	4a25      	ldr	r2, [pc, #148]	; (80088cc <HAL_ADC_MspInit+0x164>)
 8008838:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800883a:	4b23      	ldr	r3, [pc, #140]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 800883c:	2205      	movs	r2, #5
 800883e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008840:	4b21      	ldr	r3, [pc, #132]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008842:	2200      	movs	r2, #0
 8008844:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008846:	4b20      	ldr	r3, [pc, #128]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008848:	2200      	movs	r2, #0
 800884a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800884c:	4b1e      	ldr	r3, [pc, #120]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 800884e:	2280      	movs	r2, #128	; 0x80
 8008850:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008852:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008858:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800885a:	4b1b      	ldr	r3, [pc, #108]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 800885c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008860:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8008862:	4b19      	ldr	r3, [pc, #100]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008864:	2200      	movs	r2, #0
 8008866:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008868:	4b17      	ldr	r3, [pc, #92]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 800886a:	2200      	movs	r2, #0
 800886c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800886e:	4816      	ldr	r0, [pc, #88]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008870:	f002 fb88 	bl	800af84 <HAL_DMA_Init>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800887a:	f7ff ff48 	bl	800870e <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800887e:	2110      	movs	r1, #16
 8008880:	4811      	ldr	r0, [pc, #68]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008882:	f002 fe5d 	bl	800b540 <HAL_DMA_ConfigChannelAttributes>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 800888c:	f7ff ff3f 	bl	800870e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a0d      	ldr	r2, [pc, #52]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008894:	651a      	str	r2, [r3, #80]	; 0x50
 8008896:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <HAL_ADC_MspInit+0x160>)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800889c:	2200      	movs	r2, #0
 800889e:	2105      	movs	r1, #5
 80088a0:	2025      	movs	r0, #37	; 0x25
 80088a2:	f002 fb47 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80088a6:	2025      	movs	r0, #37	; 0x25
 80088a8:	f002 fb5e 	bl	800af68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80088ac:	bf00      	nop
 80088ae:	3730      	adds	r7, #48	; 0x30
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	42028000 	.word	0x42028000
 80088b8:	40021000 	.word	0x40021000
 80088bc:	42020800 	.word	0x42020800
 80088c0:	42020000 	.word	0x42020000
 80088c4:	42020400 	.word	0x42020400
 80088c8:	20000220 	.word	0x20000220
 80088cc:	40020008 	.word	0x40020008

080088d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b0ae      	sub	sp, #184	; 0xb8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80088e8:	f107 0310 	add.w	r3, r7, #16
 80088ec:	2294      	movs	r2, #148	; 0x94
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f00d f86b 	bl	80159cc <memset>
  if(hi2c->Instance==I2C1)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a21      	ldr	r2, [pc, #132]	; (8008980 <HAL_I2C_MspInit+0xb0>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d13b      	bne.n	8008978 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008900:	2340      	movs	r3, #64	; 0x40
 8008902:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008904:	2300      	movs	r3, #0
 8008906:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008908:	f107 0310 	add.w	r3, r7, #16
 800890c:	4618      	mov	r0, r3
 800890e:	f004 fb8d 	bl	800d02c <HAL_RCCEx_PeriphCLKConfig>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8008918:	f7ff fef9 	bl	800870e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800891c:	4b19      	ldr	r3, [pc, #100]	; (8008984 <HAL_I2C_MspInit+0xb4>)
 800891e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008920:	4a18      	ldr	r2, [pc, #96]	; (8008984 <HAL_I2C_MspInit+0xb4>)
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008928:	4b16      	ldr	r3, [pc, #88]	; (8008984 <HAL_I2C_MspInit+0xb4>)
 800892a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008934:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800893c:	2312      	movs	r3, #18
 800893e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008942:	2300      	movs	r3, #0
 8008944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008948:	2300      	movs	r3, #0
 800894a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800894e:	2304      	movs	r3, #4
 8008950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008954:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008958:	4619      	mov	r1, r3
 800895a:	480b      	ldr	r0, [pc, #44]	; (8008988 <HAL_I2C_MspInit+0xb8>)
 800895c:	f002 fec0 	bl	800b6e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008960:	4b08      	ldr	r3, [pc, #32]	; (8008984 <HAL_I2C_MspInit+0xb4>)
 8008962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008964:	4a07      	ldr	r2, [pc, #28]	; (8008984 <HAL_I2C_MspInit+0xb4>)
 8008966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800896a:	6593      	str	r3, [r2, #88]	; 0x58
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <HAL_I2C_MspInit+0xb4>)
 800896e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008974:	60bb      	str	r3, [r7, #8]
 8008976:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008978:	bf00      	nop
 800897a:	37b8      	adds	r7, #184	; 0xb8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	40005400 	.word	0x40005400
 8008984:	40021000 	.word	0x40021000
 8008988:	42020400 	.word	0x42020400

0800898c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b0b2      	sub	sp, #200	; 0xc8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008994:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	605a      	str	r2, [r3, #4]
 800899e:	609a      	str	r2, [r3, #8]
 80089a0:	60da      	str	r2, [r3, #12]
 80089a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80089a4:	f107 0320 	add.w	r3, r7, #32
 80089a8:	2294      	movs	r2, #148	; 0x94
 80089aa:	2100      	movs	r1, #0
 80089ac:	4618      	mov	r0, r3
 80089ae:	f00d f80d 	bl	80159cc <memset>
  if(huart->Instance==LPUART1)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a67      	ldr	r2, [pc, #412]	; (8008b54 <HAL_UART_MspInit+0x1c8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d13e      	bne.n	8008a3a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80089bc:	2320      	movs	r3, #32
 80089be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80089c0:	2300      	movs	r3, #0
 80089c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80089c4:	f107 0320 	add.w	r3, r7, #32
 80089c8:	4618      	mov	r0, r3
 80089ca:	f004 fb2f 	bl	800d02c <HAL_RCCEx_PeriphCLKConfig>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80089d4:	f7ff fe9b 	bl	800870e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80089d8:	4b5f      	ldr	r3, [pc, #380]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 80089da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089dc:	4a5e      	ldr	r2, [pc, #376]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80089e4:	4b5c      	ldr	r3, [pc, #368]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 80089e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	61fb      	str	r3, [r7, #28]
 80089ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80089f0:	4b59      	ldr	r3, [pc, #356]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 80089f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f4:	4a58      	ldr	r2, [pc, #352]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 80089f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089fc:	4b56      	ldr	r3, [pc, #344]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 80089fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8008a08:	f003 faf0 	bl	800bfec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8008a0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a14:	2302      	movs	r3, #2
 8008a16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a20:	2300      	movs	r3, #0
 8008a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8008a26:	2308      	movs	r3, #8
 8008a28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008a30:	4619      	mov	r1, r3
 8008a32:	484a      	ldr	r0, [pc, #296]	; (8008b5c <HAL_UART_MspInit+0x1d0>)
 8008a34:	f002 fe54 	bl	800b6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008a38:	e088      	b.n	8008b4c <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a48      	ldr	r2, [pc, #288]	; (8008b60 <HAL_UART_MspInit+0x1d4>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d143      	bne.n	8008acc <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008a44:	2308      	movs	r3, #8
 8008a46:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008a4c:	f107 0320 	add.w	r3, r7, #32
 8008a50:	4618      	mov	r0, r3
 8008a52:	f004 faeb 	bl	800d02c <HAL_RCCEx_PeriphCLKConfig>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8008a5c:	f7ff fe57 	bl	800870e <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8008a60:	4b3d      	ldr	r3, [pc, #244]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a64:	4a3c      	ldr	r2, [pc, #240]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008a66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8008a6c:	4b3a      	ldr	r3, [pc, #232]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a78:	4b37      	ldr	r3, [pc, #220]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7c:	4a36      	ldr	r2, [pc, #216]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008a7e:	f043 0301 	orr.w	r3, r3, #1
 8008a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a84:	4b34      	ldr	r3, [pc, #208]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	613b      	str	r3, [r7, #16]
 8008a8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008a90:	2303      	movs	r3, #3
 8008a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a96:	2302      	movs	r3, #2
 8008a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	482b      	ldr	r0, [pc, #172]	; (8008b64 <HAL_UART_MspInit+0x1d8>)
 8008ab6:	f002 fe13 	bl	800b6e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8008aba:	2200      	movs	r2, #0
 8008abc:	2105      	movs	r1, #5
 8008abe:	2040      	movs	r0, #64	; 0x40
 8008ac0:	f002 fa38 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008ac4:	2040      	movs	r0, #64	; 0x40
 8008ac6:	f002 fa4f 	bl	800af68 <HAL_NVIC_EnableIRQ>
}
 8008aca:	e03f      	b.n	8008b4c <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a25      	ldr	r2, [pc, #148]	; (8008b68 <HAL_UART_MspInit+0x1dc>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d13a      	bne.n	8008b4c <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008ada:	2300      	movs	r3, #0
 8008adc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008ade:	f107 0320 	add.w	r3, r7, #32
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f004 faa2 	bl	800d02c <HAL_RCCEx_PeriphCLKConfig>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8008aee:	f7ff fe0e 	bl	800870e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008af2:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af6:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008afc:	6593      	str	r3, [r2, #88]	; 0x58
 8008afe:	4b16      	ldr	r3, [pc, #88]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0e:	4a12      	ldr	r2, [pc, #72]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008b10:	f043 0308 	orr.w	r3, r3, #8
 8008b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <HAL_UART_MspInit+0x1cc>)
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	60bb      	str	r3, [r7, #8]
 8008b20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8008b22:	2360      	movs	r3, #96	; 0x60
 8008b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b34:	2300      	movs	r3, #0
 8008b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008b3a:	2307      	movs	r3, #7
 8008b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008b44:	4619      	mov	r1, r3
 8008b46:	4809      	ldr	r0, [pc, #36]	; (8008b6c <HAL_UART_MspInit+0x1e0>)
 8008b48:	f002 fdca 	bl	800b6e0 <HAL_GPIO_Init>
}
 8008b4c:	bf00      	nop
 8008b4e:	37c8      	adds	r7, #200	; 0xc8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	40008000 	.word	0x40008000
 8008b58:	40021000 	.word	0x40021000
 8008b5c:	42021800 	.word	0x42021800
 8008b60:	40004c00 	.word	0x40004c00
 8008b64:	42020000 	.word	0x42020000
 8008b68:	40004400 	.word	0x40004400
 8008b6c:	42020c00 	.word	0x42020c00

08008b70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b0a8      	sub	sp, #160	; 0xa0
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b78:	f107 030c 	add.w	r3, r7, #12
 8008b7c:	2294      	movs	r2, #148	; 0x94
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f00c ff23 	bl	80159cc <memset>
  if(hrtc->Instance==RTC)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a16      	ldr	r2, [pc, #88]	; (8008be4 <HAL_RTC_MspInit+0x74>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d124      	bne.n	8008bda <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b94:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b9e:	f107 030c 	add.w	r3, r7, #12
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f004 fa42 	bl	800d02c <HAL_RCCEx_PeriphCLKConfig>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8008bae:	f7ff fdae 	bl	800870e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008bb2:	4b0d      	ldr	r3, [pc, #52]	; (8008be8 <HAL_RTC_MspInit+0x78>)
 8008bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb8:	4a0b      	ldr	r2, [pc, #44]	; (8008be8 <HAL_RTC_MspInit+0x78>)
 8008bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <HAL_RTC_MspInit+0x78>)
 8008bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc6:	4a08      	ldr	r2, [pc, #32]	; (8008be8 <HAL_RTC_MspInit+0x78>)
 8008bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_RTC_MspInit+0x78>)
 8008bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bd6:	60bb      	str	r3, [r7, #8]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008bda:	bf00      	nop
 8008bdc:	37a0      	adds	r7, #160	; 0xa0
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	40002800 	.word	0x40002800
 8008be8:	40021000 	.word	0x40021000

08008bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b090      	sub	sp, #64	; 0x40
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a62      	ldr	r2, [pc, #392]	; (8008d94 <HAL_SPI_MspInit+0x1a8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d145      	bne.n	8008c9a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008c0e:	4b62      	ldr	r3, [pc, #392]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c12:	4a61      	ldr	r2, [pc, #388]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c18:	6613      	str	r3, [r2, #96]	; 0x60
 8008c1a:	4b5f      	ldr	r3, [pc, #380]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c26:	4b5c      	ldr	r3, [pc, #368]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c2a:	4a5b      	ldr	r2, [pc, #364]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c32:	4b59      	ldr	r3, [pc, #356]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008c3e:	4b56      	ldr	r3, [pc, #344]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c42:	4a55      	ldr	r2, [pc, #340]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c44:	f043 0310 	orr.w	r3, r3, #16
 8008c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c4a:	4b53      	ldr	r3, [pc, #332]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c4e:	f003 0310 	and.w	r3, r3, #16
 8008c52:	623b      	str	r3, [r7, #32]
 8008c54:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8008c56:	2360      	movs	r3, #96	; 0x60
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c62:	2300      	movs	r3, #0
 8008c64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008c66:	2305      	movs	r3, #5
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c6e:	4619      	mov	r1, r3
 8008c70:	484a      	ldr	r0, [pc, #296]	; (8008d9c <HAL_SPI_MspInit+0x1b0>)
 8008c72:	f002 fd35 	bl	800b6e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8008c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c84:	2300      	movs	r3, #0
 8008c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008c88:	2305      	movs	r3, #5
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8008c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c90:	4619      	mov	r1, r3
 8008c92:	4843      	ldr	r0, [pc, #268]	; (8008da0 <HAL_SPI_MspInit+0x1b4>)
 8008c94:	f002 fd24 	bl	800b6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008c98:	e078      	b.n	8008d8c <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a41      	ldr	r2, [pc, #260]	; (8008da4 <HAL_SPI_MspInit+0x1b8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d145      	bne.n	8008d30 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008ca4:	4b3c      	ldr	r3, [pc, #240]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca8:	4a3b      	ldr	r2, [pc, #236]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cae:	6593      	str	r3, [r2, #88]	; 0x58
 8008cb0:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cbc:	4b36      	ldr	r3, [pc, #216]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc0:	4a35      	ldr	r2, [pc, #212]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008cc2:	f043 0302 	orr.w	r3, r3, #2
 8008cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cc8:	4b33      	ldr	r3, [pc, #204]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	61bb      	str	r3, [r7, #24]
 8008cd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008cd4:	4b30      	ldr	r3, [pc, #192]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd8:	4a2f      	ldr	r2, [pc, #188]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008cda:	f043 0308 	orr.w	r3, r3, #8
 8008cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ce0:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008cfe:	2305      	movs	r3, #5
 8008d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d06:	4619      	mov	r1, r3
 8008d08:	4827      	ldr	r0, [pc, #156]	; (8008da8 <HAL_SPI_MspInit+0x1bc>)
 8008d0a:	f002 fce9 	bl	800b6e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8008d0e:	2318      	movs	r3, #24
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d12:	2302      	movs	r3, #2
 8008d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008d1e:	2305      	movs	r3, #5
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d26:	4619      	mov	r1, r3
 8008d28:	4820      	ldr	r0, [pc, #128]	; (8008dac <HAL_SPI_MspInit+0x1c0>)
 8008d2a:	f002 fcd9 	bl	800b6e0 <HAL_GPIO_Init>
}
 8008d2e:	e02d      	b.n	8008d8c <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a1e      	ldr	r2, [pc, #120]	; (8008db0 <HAL_SPI_MspInit+0x1c4>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d128      	bne.n	8008d8c <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008d3a:	4b17      	ldr	r3, [pc, #92]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3e:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d44:	6593      	str	r3, [r2, #88]	; 0x58
 8008d46:	4b14      	ldr	r3, [pc, #80]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d52:	4b11      	ldr	r3, [pc, #68]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d56:	4a10      	ldr	r2, [pc, #64]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008d58:	f043 0304 	orr.w	r3, r3, #4
 8008d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d5e:	4b0e      	ldr	r3, [pc, #56]	; (8008d98 <HAL_SPI_MspInit+0x1ac>)
 8008d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008d6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d70:	2302      	movs	r3, #2
 8008d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d74:	2300      	movs	r3, #0
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008d7c:	2306      	movs	r3, #6
 8008d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d84:	4619      	mov	r1, r3
 8008d86:	480b      	ldr	r0, [pc, #44]	; (8008db4 <HAL_SPI_MspInit+0x1c8>)
 8008d88:	f002 fcaa 	bl	800b6e0 <HAL_GPIO_Init>
}
 8008d8c:	bf00      	nop
 8008d8e:	3740      	adds	r7, #64	; 0x40
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	40013000 	.word	0x40013000
 8008d98:	40021000 	.word	0x40021000
 8008d9c:	42020000 	.word	0x42020000
 8008da0:	42021000 	.word	0x42021000
 8008da4:	40003800 	.word	0x40003800
 8008da8:	42020400 	.word	0x42020400
 8008dac:	42020c00 	.word	0x42020c00
 8008db0:	40003c00 	.word	0x40003c00
 8008db4:	42020800 	.word	0x42020800

08008db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08c      	sub	sp, #48	; 0x30
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dc0:	f107 031c 	add.w	r3, r7, #28
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	605a      	str	r2, [r3, #4]
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a3c      	ldr	r2, [pc, #240]	; (8008ec8 <HAL_TIM_Base_MspInit+0x110>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d146      	bne.n	8008e68 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008dda:	4b3c      	ldr	r3, [pc, #240]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dde:	4a3b      	ldr	r2, [pc, #236]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008de4:	6613      	str	r3, [r2, #96]	; 0x60
 8008de6:	4b39      	ldr	r3, [pc, #228]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dee:	61bb      	str	r3, [r7, #24]
 8008df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008df2:	4b36      	ldr	r3, [pc, #216]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df6:	4a35      	ldr	r2, [pc, #212]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008df8:	f043 0310 	orr.w	r3, r3, #16
 8008dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dfe:	4b33      	ldr	r3, [pc, #204]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e02:	f003 0310 	and.w	r3, r3, #16
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e0a:	4b30      	ldr	r3, [pc, #192]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e0e:	4a2f      	ldr	r2, [pc, #188]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e10:	f043 0301 	orr.w	r3, r3, #1
 8008e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e16:	4b2d      	ldr	r3, [pc, #180]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8008e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e30:	2300      	movs	r3, #0
 8008e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008e34:	2301      	movs	r3, #1
 8008e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8008e38:	f107 031c 	add.w	r3, r7, #28
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4824      	ldr	r0, [pc, #144]	; (8008ed0 <HAL_TIM_Base_MspInit+0x118>)
 8008e40:	f002 fc4e 	bl	800b6e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_THROTTLE_IN_Pin;
 8008e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e52:	2300      	movs	r3, #0
 8008e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008e56:	2301      	movs	r3, #1
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_THROTTLE_IN_GPIO_Port, &GPIO_InitStruct);
 8008e5a:	f107 031c 	add.w	r3, r7, #28
 8008e5e:	4619      	mov	r1, r3
 8008e60:	481c      	ldr	r0, [pc, #112]	; (8008ed4 <HAL_TIM_Base_MspInit+0x11c>)
 8008e62:	f002 fc3d 	bl	800b6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8008e66:	e02a      	b.n	8008ebe <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1a      	ldr	r2, [pc, #104]	; (8008ed8 <HAL_TIM_Base_MspInit+0x120>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d10c      	bne.n	8008e8c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008e72:	4b16      	ldr	r3, [pc, #88]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e76:	4a15      	ldr	r2, [pc, #84]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e78:	f043 0308 	orr.w	r3, r3, #8
 8008e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8008e7e:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e82:	f003 0308 	and.w	r3, r3, #8
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	68fb      	ldr	r3, [r7, #12]
}
 8008e8a:	e018      	b.n	8008ebe <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM6)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a12      	ldr	r2, [pc, #72]	; (8008edc <HAL_TIM_Base_MspInit+0x124>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d113      	bne.n	8008ebe <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008e96:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e9a:	4a0c      	ldr	r2, [pc, #48]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008e9c:	f043 0310 	orr.w	r3, r3, #16
 8008ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8008ea2:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <HAL_TIM_Base_MspInit+0x114>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea6:	f003 0310 	and.w	r3, r3, #16
 8008eaa:	60bb      	str	r3, [r7, #8]
 8008eac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2105      	movs	r1, #5
 8008eb2:	2031      	movs	r0, #49	; 0x31
 8008eb4:	f002 f83e 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8008eb8:	2031      	movs	r0, #49	; 0x31
 8008eba:	f002 f855 	bl	800af68 <HAL_NVIC_EnableIRQ>
}
 8008ebe:	bf00      	nop
 8008ec0:	3730      	adds	r7, #48	; 0x30
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40012c00 	.word	0x40012c00
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	42021000 	.word	0x42021000
 8008ed4:	42020000 	.word	0x42020000
 8008ed8:	40000c00 	.word	0x40000c00
 8008edc:	40001000 	.word	0x40001000

08008ee0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08a      	sub	sp, #40	; 0x28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	605a      	str	r2, [r3, #4]
 8008ef2:	609a      	str	r2, [r3, #8]
 8008ef4:	60da      	str	r2, [r3, #12]
 8008ef6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1b      	ldr	r2, [pc, #108]	; (8008f6c <HAL_TIM_Encoder_MspInit+0x8c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d12f      	bne.n	8008f62 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008f02:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <HAL_TIM_Encoder_MspInit+0x90>)
 8008f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f06:	4a1a      	ldr	r2, [pc, #104]	; (8008f70 <HAL_TIM_Encoder_MspInit+0x90>)
 8008f08:	f043 0302 	orr.w	r3, r3, #2
 8008f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f0e:	4b18      	ldr	r3, [pc, #96]	; (8008f70 <HAL_TIM_Encoder_MspInit+0x90>)
 8008f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008f1a:	4b15      	ldr	r3, [pc, #84]	; (8008f70 <HAL_TIM_Encoder_MspInit+0x90>)
 8008f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1e:	4a14      	ldr	r2, [pc, #80]	; (8008f70 <HAL_TIM_Encoder_MspInit+0x90>)
 8008f20:	f043 0310 	orr.w	r3, r3, #16
 8008f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f26:	4b12      	ldr	r3, [pc, #72]	; (8008f70 <HAL_TIM_Encoder_MspInit+0x90>)
 8008f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8008f32:	2318      	movs	r3, #24
 8008f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f36:	2302      	movs	r3, #2
 8008f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008f42:	2302      	movs	r3, #2
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008f46:	f107 0314 	add.w	r3, r7, #20
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4809      	ldr	r0, [pc, #36]	; (8008f74 <HAL_TIM_Encoder_MspInit+0x94>)
 8008f4e:	f002 fbc7 	bl	800b6e0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8008f52:	2200      	movs	r2, #0
 8008f54:	2105      	movs	r1, #5
 8008f56:	202e      	movs	r0, #46	; 0x2e
 8008f58:	f001 ffec 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008f5c:	202e      	movs	r0, #46	; 0x2e
 8008f5e:	f002 f803 	bl	800af68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008f62:	bf00      	nop
 8008f64:	3728      	adds	r7, #40	; 0x28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	40021000 	.word	0x40021000
 8008f74:	42021000 	.word	0x42021000

08008f78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	; 0x28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f80:	f107 0314 	add.w	r3, r7, #20
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	605a      	str	r2, [r3, #4]
 8008f8a:	609a      	str	r2, [r3, #8]
 8008f8c:	60da      	str	r2, [r3, #12]
 8008f8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a23      	ldr	r2, [pc, #140]	; (8009024 <HAL_TIM_MspPostInit+0xac>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d11d      	bne.n	8008fd6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f9a:	4b23      	ldr	r3, [pc, #140]	; (8009028 <HAL_TIM_MspPostInit+0xb0>)
 8008f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9e:	4a22      	ldr	r2, [pc, #136]	; (8009028 <HAL_TIM_MspPostInit+0xb0>)
 8008fa0:	f043 0301 	orr.w	r3, r3, #1
 8008fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fa6:	4b20      	ldr	r3, [pc, #128]	; (8009028 <HAL_TIM_MspPostInit+0xb0>)
 8008fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin;
 8008fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RC_PWM_STEERING_GPIO_Port, &GPIO_InitStruct);
 8008fc8:	f107 0314 	add.w	r3, r7, #20
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4817      	ldr	r0, [pc, #92]	; (800902c <HAL_TIM_MspPostInit+0xb4>)
 8008fd0:	f002 fb86 	bl	800b6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008fd4:	e021      	b.n	800901a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a15      	ldr	r2, [pc, #84]	; (8009030 <HAL_TIM_MspPostInit+0xb8>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d11c      	bne.n	800901a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008fe0:	4b11      	ldr	r3, [pc, #68]	; (8009028 <HAL_TIM_MspPostInit+0xb0>)
 8008fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe4:	4a10      	ldr	r2, [pc, #64]	; (8009028 <HAL_TIM_MspPostInit+0xb0>)
 8008fe6:	f043 0320 	orr.w	r3, r3, #32
 8008fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fec:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <HAL_TIM_MspPostInit+0xb0>)
 8008fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8008ff8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ffe:	2302      	movs	r3, #2
 8009000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009002:	2300      	movs	r3, #0
 8009004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009006:	2300      	movs	r3, #0
 8009008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800900a:	2302      	movs	r3, #2
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800900e:	f107 0314 	add.w	r3, r7, #20
 8009012:	4619      	mov	r1, r3
 8009014:	4807      	ldr	r0, [pc, #28]	; (8009034 <HAL_TIM_MspPostInit+0xbc>)
 8009016:	f002 fb63 	bl	800b6e0 <HAL_GPIO_Init>
}
 800901a:	bf00      	nop
 800901c:	3728      	adds	r7, #40	; 0x28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40021000 	.word	0x40021000
 800902c:	42020000 	.word	0x42020000
 8009030:	40000c00 	.word	0x40000c00
 8009034:	42021400 	.word	0x42021400

08009038 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b0ae      	sub	sp, #184	; 0xb8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	605a      	str	r2, [r3, #4]
 800904a:	609a      	str	r2, [r3, #8]
 800904c:	60da      	str	r2, [r3, #12]
 800904e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009050:	f107 0310 	add.w	r3, r7, #16
 8009054:	2294      	movs	r2, #148	; 0x94
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f00c fcb7 	bl	80159cc <memset>
  if(hpcd->Instance==USB)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a22      	ldr	r2, [pc, #136]	; (80090ec <HAL_PCD_MspInit+0xb4>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d13d      	bne.n	80090e4 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800906c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800906e:	2300      	movs	r3, #0
 8009070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009074:	f107 0310 	add.w	r3, r7, #16
 8009078:	4618      	mov	r0, r3
 800907a:	f003 ffd7 	bl	800d02c <HAL_RCCEx_PeriphCLKConfig>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8009084:	f7ff fb43 	bl	800870e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009088:	4b19      	ldr	r3, [pc, #100]	; (80090f0 <HAL_PCD_MspInit+0xb8>)
 800908a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800908c:	4a18      	ldr	r2, [pc, #96]	; (80090f0 <HAL_PCD_MspInit+0xb8>)
 800908e:	f043 0301 	orr.w	r3, r3, #1
 8009092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009094:	4b16      	ldr	r3, [pc, #88]	; (80090f0 <HAL_PCD_MspInit+0xb8>)
 8009096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80090a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80090a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090a8:	2302      	movs	r3, #2
 80090aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090b4:	2300      	movs	r3, #0
 80090b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80090ba:	230a      	movs	r3, #10
 80090bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80090c4:	4619      	mov	r1, r3
 80090c6:	480b      	ldr	r0, [pc, #44]	; (80090f4 <HAL_PCD_MspInit+0xbc>)
 80090c8:	f002 fb0a 	bl	800b6e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090cc:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <HAL_PCD_MspInit+0xb8>)
 80090ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d0:	4a07      	ldr	r2, [pc, #28]	; (80090f0 <HAL_PCD_MspInit+0xb8>)
 80090d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80090d8:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <HAL_PCD_MspInit+0xb8>)
 80090da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090e0:	60bb      	str	r3, [r7, #8]
 80090e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80090e4:	bf00      	nop
 80090e6:	37b8      	adds	r7, #184	; 0xb8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	4000d400 	.word	0x4000d400
 80090f0:	40021000 	.word	0x40021000
 80090f4:	42020000 	.word	0x42020000

080090f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08c      	sub	sp, #48	; 0x30
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8009108:	2200      	movs	r2, #0
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	202d      	movs	r0, #45	; 0x2d
 800910e:	f001 ff11 	bl	800af34 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009112:	202d      	movs	r0, #45	; 0x2d
 8009114:	f001 ff28 	bl	800af68 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8009118:	4b1f      	ldr	r3, [pc, #124]	; (8009198 <HAL_InitTick+0xa0>)
 800911a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911c:	4a1e      	ldr	r2, [pc, #120]	; (8009198 <HAL_InitTick+0xa0>)
 800911e:	f043 0301 	orr.w	r3, r3, #1
 8009122:	6593      	str	r3, [r2, #88]	; 0x58
 8009124:	4b1c      	ldr	r3, [pc, #112]	; (8009198 <HAL_InitTick+0xa0>)
 8009126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009130:	f107 0210 	add.w	r2, r7, #16
 8009134:	f107 0314 	add.w	r3, r7, #20
 8009138:	4611      	mov	r1, r2
 800913a:	4618      	mov	r0, r3
 800913c:	f003 fe72 	bl	800ce24 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009140:	f003 fe48 	bl	800cdd4 <HAL_RCC_GetPCLK1Freq>
 8009144:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	4a14      	ldr	r2, [pc, #80]	; (800919c <HAL_InitTick+0xa4>)
 800914a:	fba2 2303 	umull	r2, r3, r2, r3
 800914e:	0c9b      	lsrs	r3, r3, #18
 8009150:	3b01      	subs	r3, #1
 8009152:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8009154:	4b12      	ldr	r3, [pc, #72]	; (80091a0 <HAL_InitTick+0xa8>)
 8009156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800915a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800915c:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <HAL_InitTick+0xa8>)
 800915e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009162:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8009164:	4a0e      	ldr	r2, [pc, #56]	; (80091a0 <HAL_InitTick+0xa8>)
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800916a:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <HAL_InitTick+0xa8>)
 800916c:	2200      	movs	r2, #0
 800916e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <HAL_InitTick+0xa8>)
 8009172:	2200      	movs	r2, #0
 8009174:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8009176:	480a      	ldr	r0, [pc, #40]	; (80091a0 <HAL_InitTick+0xa8>)
 8009178:	f005 fcb8 	bl	800eaec <HAL_TIM_Base_Init>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8009182:	4807      	ldr	r0, [pc, #28]	; (80091a0 <HAL_InitTick+0xa8>)
 8009184:	f005 fd72 	bl	800ec6c <HAL_TIM_Base_Start_IT>
 8009188:	4603      	mov	r3, r0
 800918a:	e000      	b.n	800918e <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
}
 800918e:	4618      	mov	r0, r3
 8009190:	3730      	adds	r7, #48	; 0x30
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	40021000 	.word	0x40021000
 800919c:	431bde83 	.word	0x431bde83
 80091a0:	20000a14 	.word	0x20000a14

080091a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80091a8:	e7fe      	b.n	80091a8 <NMI_Handler+0x4>

080091aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091aa:	b480      	push	{r7}
 80091ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091ae:	e7fe      	b.n	80091ae <HardFault_Handler+0x4>

080091b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091b4:	e7fe      	b.n	80091b4 <MemManage_Handler+0x4>

080091b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091b6:	b480      	push	{r7}
 80091b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091ba:	e7fe      	b.n	80091ba <BusFault_Handler+0x4>

080091bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091c0:	e7fe      	b.n	80091c0 <UsageFault_Handler+0x4>

080091c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091c2:	b480      	push	{r7}
 80091c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091c6:	bf00      	nop
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80091d4:	4802      	ldr	r0, [pc, #8]	; (80091e0 <DMA1_Channel1_IRQHandler+0x10>)
 80091d6:	f002 f8b3 	bl	800b340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80091da:	bf00      	nop
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000220 	.word	0x20000220

080091e4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80091e8:	4802      	ldr	r0, [pc, #8]	; (80091f4 <ADC1_2_IRQHandler+0x10>)
 80091ea:	f000 fdb3 	bl	8009d54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80091ee:	bf00      	nop
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	200001b8 	.word	0x200001b8

080091f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80091fc:	4802      	ldr	r0, [pc, #8]	; (8009208 <TIM2_IRQHandler+0x10>)
 80091fe:	f006 f814 	bl	800f22a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009202:	bf00      	nop
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000a14 	.word	0x20000a14

0800920c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009210:	4802      	ldr	r0, [pc, #8]	; (800921c <TIM3_IRQHandler+0x10>)
 8009212:	f006 f80a 	bl	800f22a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009216:	bf00      	nop
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20000638 	.word	0x20000638

08009220 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009224:	4802      	ldr	r0, [pc, #8]	; (8009230 <TIM6_IRQHandler+0x10>)
 8009226:	f006 f800 	bl	800f22a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800922a:	bf00      	nop
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	200006d0 	.word	0x200006d0

08009234 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009238:	4802      	ldr	r0, [pc, #8]	; (8009244 <UART4_IRQHandler+0x10>)
 800923a:	f007 faef 	bl	801081c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800923e:	bf00      	nop
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20000370 	.word	0x20000370

08009248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  return 1;
 800924c:	2301      	movs	r3, #1
}
 800924e:	4618      	mov	r0, r3
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <_kill>:

int _kill(int pid, int sig)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009262:	f00c fc0f 	bl	8015a84 <__errno>
 8009266:	4603      	mov	r3, r0
 8009268:	2216      	movs	r2, #22
 800926a:	601a      	str	r2, [r3, #0]
  return -1;
 800926c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <_exit>:

void _exit (int status)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009280:	f04f 31ff 	mov.w	r1, #4294967295
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff ffe7 	bl	8009258 <_kill>
  while (1) {}    /* Make sure we hang here */
 800928a:	e7fe      	b.n	800928a <_exit+0x12>

0800928c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009294:	4a14      	ldr	r2, [pc, #80]	; (80092e8 <_sbrk+0x5c>)
 8009296:	4b15      	ldr	r3, [pc, #84]	; (80092ec <_sbrk+0x60>)
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80092a0:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <_sbrk+0x64>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80092a8:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <_sbrk+0x64>)
 80092aa:	4a12      	ldr	r2, [pc, #72]	; (80092f4 <_sbrk+0x68>)
 80092ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80092ae:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <_sbrk+0x64>)
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4413      	add	r3, r2
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d207      	bcs.n	80092cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80092bc:	f00c fbe2 	bl	8015a84 <__errno>
 80092c0:	4603      	mov	r3, r0
 80092c2:	220c      	movs	r2, #12
 80092c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ca:	e009      	b.n	80092e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80092cc:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <_sbrk+0x64>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80092d2:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <_sbrk+0x64>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4413      	add	r3, r2
 80092da:	4a05      	ldr	r2, [pc, #20]	; (80092f0 <_sbrk+0x64>)
 80092dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80092de:	68fb      	ldr	r3, [r7, #12]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	20030000 	.word	0x20030000
 80092ec:	00000400 	.word	0x00000400
 80092f0:	20000a60 	.word	0x20000a60
 80092f4:	20003900 	.word	0x20003900

080092f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80092fc:	4b06      	ldr	r3, [pc, #24]	; (8009318 <SystemInit+0x20>)
 80092fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009302:	4a05      	ldr	r2, [pc, #20]	; (8009318 <SystemInit+0x20>)
 8009304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800930c:	bf00      	nop
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	e000ed00 	.word	0xe000ed00

0800931c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8009322:	4b4f      	ldr	r3, [pc, #316]	; (8009460 <SystemCoreClockUpdate+0x144>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0308 	and.w	r3, r3, #8
 800932a:	2b00      	cmp	r3, #0
 800932c:	d107      	bne.n	800933e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800932e:	4b4c      	ldr	r3, [pc, #304]	; (8009460 <SystemCoreClockUpdate+0x144>)
 8009330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009334:	0a1b      	lsrs	r3, r3, #8
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	e005      	b.n	800934a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800933e:	4b48      	ldr	r3, [pc, #288]	; (8009460 <SystemCoreClockUpdate+0x144>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	091b      	lsrs	r3, r3, #4
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800934a:	4a46      	ldr	r2, [pc, #280]	; (8009464 <SystemCoreClockUpdate+0x148>)
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009352:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009354:	4b42      	ldr	r3, [pc, #264]	; (8009460 <SystemCoreClockUpdate+0x144>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f003 030c 	and.w	r3, r3, #12
 800935c:	2b0c      	cmp	r3, #12
 800935e:	d866      	bhi.n	800942e <SystemCoreClockUpdate+0x112>
 8009360:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <SystemCoreClockUpdate+0x4c>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	0800939d 	.word	0x0800939d
 800936c:	0800942f 	.word	0x0800942f
 8009370:	0800942f 	.word	0x0800942f
 8009374:	0800942f 	.word	0x0800942f
 8009378:	080093a5 	.word	0x080093a5
 800937c:	0800942f 	.word	0x0800942f
 8009380:	0800942f 	.word	0x0800942f
 8009384:	0800942f 	.word	0x0800942f
 8009388:	080093ad 	.word	0x080093ad
 800938c:	0800942f 	.word	0x0800942f
 8009390:	0800942f 	.word	0x0800942f
 8009394:	0800942f 	.word	0x0800942f
 8009398:	080093b5 	.word	0x080093b5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800939c:	4a32      	ldr	r2, [pc, #200]	; (8009468 <SystemCoreClockUpdate+0x14c>)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	6013      	str	r3, [r2, #0]
      break;
 80093a2:	e048      	b.n	8009436 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80093a4:	4b30      	ldr	r3, [pc, #192]	; (8009468 <SystemCoreClockUpdate+0x14c>)
 80093a6:	4a31      	ldr	r2, [pc, #196]	; (800946c <SystemCoreClockUpdate+0x150>)
 80093a8:	601a      	str	r2, [r3, #0]
      break;
 80093aa:	e044      	b.n	8009436 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80093ac:	4b2e      	ldr	r3, [pc, #184]	; (8009468 <SystemCoreClockUpdate+0x14c>)
 80093ae:	4a30      	ldr	r2, [pc, #192]	; (8009470 <SystemCoreClockUpdate+0x154>)
 80093b0:	601a      	str	r2, [r3, #0]
      break;
 80093b2:	e040      	b.n	8009436 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80093b4:	4b2a      	ldr	r3, [pc, #168]	; (8009460 <SystemCoreClockUpdate+0x144>)
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f003 0303 	and.w	r3, r3, #3
 80093bc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80093be:	4b28      	ldr	r3, [pc, #160]	; (8009460 <SystemCoreClockUpdate+0x144>)
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	091b      	lsrs	r3, r3, #4
 80093c4:	f003 030f 	and.w	r3, r3, #15
 80093c8:	3301      	adds	r3, #1
 80093ca:	60bb      	str	r3, [r7, #8]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d003      	beq.n	80093da <SystemCoreClockUpdate+0xbe>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d006      	beq.n	80093e6 <SystemCoreClockUpdate+0xca>
 80093d8:	e00b      	b.n	80093f2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80093da:	4a24      	ldr	r2, [pc, #144]	; (800946c <SystemCoreClockUpdate+0x150>)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e2:	613b      	str	r3, [r7, #16]
          break;
 80093e4:	e00b      	b.n	80093fe <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80093e6:	4a22      	ldr	r2, [pc, #136]	; (8009470 <SystemCoreClockUpdate+0x154>)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ee:	613b      	str	r3, [r7, #16]
          break;
 80093f0:	e005      	b.n	80093fe <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fa:	613b      	str	r3, [r7, #16]
          break;
 80093fc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80093fe:	4b18      	ldr	r3, [pc, #96]	; (8009460 <SystemCoreClockUpdate+0x144>)
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	0a1b      	lsrs	r3, r3, #8
 8009404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	fb02 f303 	mul.w	r3, r2, r3
 800940e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8009410:	4b13      	ldr	r3, [pc, #76]	; (8009460 <SystemCoreClockUpdate+0x144>)
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	0e5b      	lsrs	r3, r3, #25
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	3301      	adds	r3, #1
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	fbb2 f3f3 	udiv	r3, r2, r3
 8009428:	4a0f      	ldr	r2, [pc, #60]	; (8009468 <SystemCoreClockUpdate+0x14c>)
 800942a:	6013      	str	r3, [r2, #0]
      break;
 800942c:	e003      	b.n	8009436 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800942e:	4a0e      	ldr	r2, [pc, #56]	; (8009468 <SystemCoreClockUpdate+0x14c>)
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	6013      	str	r3, [r2, #0]
      break;
 8009434:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8009436:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <SystemCoreClockUpdate+0x144>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	091b      	lsrs	r3, r3, #4
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	4a0c      	ldr	r2, [pc, #48]	; (8009474 <SystemCoreClockUpdate+0x158>)
 8009442:	5cd3      	ldrb	r3, [r2, r3]
 8009444:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8009446:	4b08      	ldr	r3, [pc, #32]	; (8009468 <SystemCoreClockUpdate+0x14c>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	fa22 f303 	lsr.w	r3, r2, r3
 8009450:	4a05      	ldr	r2, [pc, #20]	; (8009468 <SystemCoreClockUpdate+0x14c>)
 8009452:	6013      	str	r3, [r2, #0]
}
 8009454:	bf00      	nop
 8009456:	371c      	adds	r7, #28
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	40021000 	.word	0x40021000
 8009464:	080166ec 	.word	0x080166ec
 8009468:	20000048 	.word	0x20000048
 800946c:	00f42400 	.word	0x00f42400
 8009470:	007a1200 	.word	0x007a1200
 8009474:	080166d4 	.word	0x080166d4

08009478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8009478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80094b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800947c:	f7ff ff3c 	bl	80092f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009480:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009482:	e003      	b.n	800948c <LoopCopyDataInit>

08009484 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009484:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009486:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009488:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800948a:	3104      	adds	r1, #4

0800948c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800948c:	480a      	ldr	r0, [pc, #40]	; (80094b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8009490:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009492:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009494:	d3f6      	bcc.n	8009484 <CopyDataInit>
	ldr	r2, =_sbss
 8009496:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009498:	e002      	b.n	80094a0 <LoopFillZerobss>

0800949a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800949a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800949c:	f842 3b04 	str.w	r3, [r2], #4

080094a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80094a0:	4b08      	ldr	r3, [pc, #32]	; (80094c4 <LoopForever+0x16>)
	cmp	r2, r3
 80094a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80094a4:	d3f9      	bcc.n	800949a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80094a6:	f00c faf3 	bl	8015a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80094aa:	f7fe f86d 	bl	8007588 <main>

080094ae <LoopForever>:

LoopForever:
    b LoopForever
 80094ae:	e7fe      	b.n	80094ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80094b0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80094b4:	08016898 	.word	0x08016898
	ldr	r0, =_sdata
 80094b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80094bc:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 80094c0:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 80094c4:	200038fc 	.word	0x200038fc

080094c8 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80094c8:	e7fe      	b.n	80094c8 <COMP_IRQHandler>

080094ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80094d4:	2004      	movs	r0, #4
 80094d6:	f001 fd22 	bl	800af1e <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80094da:	f7ff ff1f 	bl	800931c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80094de:	2007      	movs	r0, #7
 80094e0:	f7ff fe0a 	bl	80090f8 <HAL_InitTick>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	71fb      	strb	r3, [r7, #7]
 80094ee:	e001      	b.n	80094f4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80094f0:	f7ff f912 	bl	8008718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80094f4:	79fb      	ldrb	r3, [r7, #7]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009500:	b480      	push	{r7}
 8009502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009504:	4b06      	ldr	r3, [pc, #24]	; (8009520 <HAL_IncTick+0x20>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	4b06      	ldr	r3, [pc, #24]	; (8009524 <HAL_IncTick+0x24>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4413      	add	r3, r2
 8009510:	4a04      	ldr	r2, [pc, #16]	; (8009524 <HAL_IncTick+0x24>)
 8009512:	6013      	str	r3, [r2, #0]
}
 8009514:	bf00      	nop
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	20000050 	.word	0x20000050
 8009524:	20000a64 	.word	0x20000a64

08009528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009528:	b480      	push	{r7}
 800952a:	af00      	add	r7, sp, #0
  return uwTick;
 800952c:	4b03      	ldr	r3, [pc, #12]	; (800953c <HAL_GetTick+0x14>)
 800952e:	681b      	ldr	r3, [r3, #0]
}
 8009530:	4618      	mov	r0, r3
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000a64 	.word	0x20000a64

08009540 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	431a      	orrs	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	609a      	str	r2, [r3, #8]
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	609a      	str	r2, [r3, #8]
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3360      	adds	r3, #96	; 0x60
 80095ba:	461a      	mov	r2, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	4b08      	ldr	r3, [pc, #32]	; (80095ec <LL_ADC_SetOffset+0x44>)
 80095ca:	4013      	ands	r3, r2
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80095e0:	bf00      	nop
 80095e2:	371c      	adds	r7, #28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	03fff000 	.word	0x03fff000

080095f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3360      	adds	r3, #96	; 0x60
 80095fe:	461a      	mov	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3360      	adds	r3, #96	; 0x60
 800962c:	461a      	mov	r2, r3
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	431a      	orrs	r2, r3
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009646:	bf00      	nop
 8009648:	371c      	adds	r7, #28
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	615a      	str	r2, [r3, #20]
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800968c:	2301      	movs	r3, #1
 800968e:	e000      	b.n	8009692 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800969e:	b480      	push	{r7}
 80096a0:	b087      	sub	sp, #28
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3330      	adds	r3, #48	; 0x30
 80096ae:	461a      	mov	r2, r3
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	0a1b      	lsrs	r3, r3, #8
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	f003 030c 	and.w	r3, r3, #12
 80096ba:	4413      	add	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	211f      	movs	r1, #31
 80096ca:	fa01 f303 	lsl.w	r3, r1, r3
 80096ce:	43db      	mvns	r3, r3
 80096d0:	401a      	ands	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	0e9b      	lsrs	r3, r3, #26
 80096d6:	f003 011f 	and.w	r1, r3, #31
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	f003 031f 	and.w	r3, r3, #31
 80096e0:	fa01 f303 	lsl.w	r3, r1, r3
 80096e4:	431a      	orrs	r2, r3
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b083      	sub	sp, #12
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009702:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800970a:	2301      	movs	r3, #1
 800970c:	e000      	b.n	8009710 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3314      	adds	r3, #20
 800972c:	461a      	mov	r2, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	0e5b      	lsrs	r3, r3, #25
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	4413      	add	r3, r2
 800973a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	0d1b      	lsrs	r3, r3, #20
 8009744:	f003 031f 	and.w	r3, r3, #31
 8009748:	2107      	movs	r1, #7
 800974a:	fa01 f303 	lsl.w	r3, r1, r3
 800974e:	43db      	mvns	r3, r3
 8009750:	401a      	ands	r2, r3
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	0d1b      	lsrs	r3, r3, #20
 8009756:	f003 031f 	and.w	r3, r3, #31
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	fa01 f303 	lsl.w	r3, r1, r3
 8009760:	431a      	orrs	r2, r3
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009766:	bf00      	nop
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800978c:	43db      	mvns	r3, r3
 800978e:	401a      	ands	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f003 0318 	and.w	r3, r3, #24
 8009796:	4908      	ldr	r1, [pc, #32]	; (80097b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009798:	40d9      	lsrs	r1, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	400b      	ands	r3, r1
 800979e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097a2:	431a      	orrs	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	0007ffff 	.word	0x0007ffff

080097bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f003 031f 	and.w	r3, r3, #31
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6093      	str	r3, [r2, #8]
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800982c:	d101      	bne.n	8009832 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8009850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009854:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800987c:	d101      	bne.n	8009882 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80098a4:	f043 0201 	orr.w	r2, r3, #1
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <LL_ADC_IsEnabled+0x18>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <LL_ADC_IsEnabled+0x1a>
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80098f2:	f043 0204 	orr.w	r2, r3, #4
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80098fa:	bf00      	nop
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f003 0304 	and.w	r3, r3, #4
 8009916:	2b04      	cmp	r3, #4
 8009918:	d101      	bne.n	800991e <LL_ADC_REG_IsConversionOngoing+0x18>
 800991a:	2301      	movs	r3, #1
 800991c:	e000      	b.n	8009920 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f003 0308 	and.w	r3, r3, #8
 800993c:	2b08      	cmp	r3, #8
 800993e:	d101      	bne.n	8009944 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009940:	2301      	movs	r3, #1
 8009942:	e000      	b.n	8009946 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009954:	b590      	push	{r4, r7, lr}
 8009956:	b089      	sub	sp, #36	; 0x24
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e12e      	b.n	8009bcc <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7fe fef3 	bl	8008768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4618      	mov	r0, r3
 8009996:	f7ff ff3f 	bl	8009818 <LL_ADC_IsDeepPowerDownEnabled>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d004      	beq.n	80099aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff ff25 	bl	80097f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff ff5a 	bl	8009868 <LL_ADC_IsInternalRegulatorEnabled>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d115      	bne.n	80099e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff ff3e 	bl	8009840 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80099c4:	4b83      	ldr	r3, [pc, #524]	; (8009bd4 <HAL_ADC_Init+0x280>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	099b      	lsrs	r3, r3, #6
 80099ca:	4a83      	ldr	r2, [pc, #524]	; (8009bd8 <HAL_ADC_Init+0x284>)
 80099cc:	fba2 2303 	umull	r2, r3, r2, r3
 80099d0:	099b      	lsrs	r3, r3, #6
 80099d2:	3301      	adds	r3, #1
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80099d8:	e002      	b.n	80099e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3b01      	subs	r3, #1
 80099de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1f9      	bne.n	80099da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff ff3c 	bl	8009868 <LL_ADC_IsInternalRegulatorEnabled>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10d      	bne.n	8009a12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099fa:	f043 0210 	orr.w	r2, r3, #16
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a06:	f043 0201 	orr.w	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff ff75 	bl	8009906 <LL_ADC_REG_IsConversionOngoing>
 8009a1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a22:	f003 0310 	and.w	r3, r3, #16
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f040 80c7 	bne.w	8009bba <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f040 80c3 	bne.w	8009bba <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009a3c:	f043 0202 	orr.w	r2, r3, #2
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff ff35 	bl	80098b8 <LL_ADC_IsEnabled>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d110      	bne.n	8009a76 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009a54:	4861      	ldr	r0, [pc, #388]	; (8009bdc <HAL_ADC_Init+0x288>)
 8009a56:	f7ff ff2f 	bl	80098b8 <LL_ADC_IsEnabled>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	4860      	ldr	r0, [pc, #384]	; (8009be0 <HAL_ADC_Init+0x28c>)
 8009a5e:	f7ff ff2b 	bl	80098b8 <LL_ADC_IsEnabled>
 8009a62:	4603      	mov	r3, r0
 8009a64:	4323      	orrs	r3, r4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	485c      	ldr	r0, [pc, #368]	; (8009be4 <HAL_ADC_Init+0x290>)
 8009a72:	f7ff fd65 	bl	8009540 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	7e5b      	ldrb	r3, [r3, #25]
 8009a7a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009a80:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009a86:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009a8c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a94:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009a96:	4313      	orrs	r3, r2
 8009a98:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d106      	bne.n	8009ab2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	045b      	lsls	r3, r3, #17
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abe:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	4b44      	ldr	r3, [pc, #272]	; (8009be8 <HAL_ADC_Init+0x294>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6812      	ldr	r2, [r2, #0]
 8009adc:	69b9      	ldr	r1, [r7, #24]
 8009ade:	430b      	orrs	r3, r1
 8009ae0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff ff20 	bl	800992c <LL_ADC_INJ_IsConversionOngoing>
 8009aec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d140      	bne.n	8009b76 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d13d      	bne.n	8009b76 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7e1b      	ldrb	r3, [r3, #24]
 8009b02:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009b04:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b0c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b1c:	f023 0306 	bic.w	r3, r3, #6
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6812      	ldr	r2, [r2, #0]
 8009b24:	69b9      	ldr	r1, [r7, #24]
 8009b26:	430b      	orrs	r3, r1
 8009b28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d118      	bne.n	8009b66 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b3e:	f023 0304 	bic.w	r3, r3, #4
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009b4a:	4311      	orrs	r1, r2
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009b50:	4311      	orrs	r1, r2
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009b56:	430a      	orrs	r2, r1
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0201 	orr.w	r2, r2, #1
 8009b62:	611a      	str	r2, [r3, #16]
 8009b64:	e007      	b.n	8009b76 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f022 0201 	bic.w	r2, r2, #1
 8009b74:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d10c      	bne.n	8009b98 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b84:	f023 010f 	bic.w	r1, r3, #15
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	1e5a      	subs	r2, r3, #1
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	631a      	str	r2, [r3, #48]	; 0x30
 8009b96:	e007      	b.n	8009ba8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 020f 	bic.w	r2, r2, #15
 8009ba6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bac:	f023 0303 	bic.w	r3, r3, #3
 8009bb0:	f043 0201 	orr.w	r2, r3, #1
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8009bb8:	e007      	b.n	8009bca <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbe:	f043 0210 	orr.w	r2, r3, #16
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009bca:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3724      	adds	r7, #36	; 0x24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd90      	pop	{r4, r7, pc}
 8009bd4:	20000048 	.word	0x20000048
 8009bd8:	053e2d63 	.word	0x053e2d63
 8009bdc:	42028000 	.word	0x42028000
 8009be0:	42028100 	.word	0x42028100
 8009be4:	42028300 	.word	0x42028300
 8009be8:	fff0c007 	.word	0xfff0c007

08009bec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009bf8:	4850      	ldr	r0, [pc, #320]	; (8009d3c <HAL_ADC_Start_DMA+0x150>)
 8009bfa:	f7ff fddf 	bl	80097bc <LL_ADC_GetMultimode>
 8009bfe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7ff fe7e 	bl	8009906 <LL_ADC_REG_IsConversionOngoing>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f040 808e 	bne.w	8009d2e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d101      	bne.n	8009c20 <HAL_ADC_Start_DMA+0x34>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e089      	b.n	8009d34 <HAL_ADC_Start_DMA+0x148>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d005      	beq.n	8009c3a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2b05      	cmp	r3, #5
 8009c32:	d002      	beq.n	8009c3a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	2b09      	cmp	r3, #9
 8009c38:	d172      	bne.n	8009d20 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 feac 	bl	800a998 <ADC_Enable>
 8009c40:	4603      	mov	r3, r0
 8009c42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d165      	bne.n	8009d16 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c52:	f023 0301 	bic.w	r3, r3, #1
 8009c56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a37      	ldr	r2, [pc, #220]	; (8009d40 <HAL_ADC_Start_DMA+0x154>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d002      	beq.n	8009c6e <HAL_ADC_Start_DMA+0x82>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	e000      	b.n	8009c70 <HAL_ADC_Start_DMA+0x84>
 8009c6e:	4b35      	ldr	r3, [pc, #212]	; (8009d44 <HAL_ADC_Start_DMA+0x158>)
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	6812      	ldr	r2, [r2, #0]
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d002      	beq.n	8009c7e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d105      	bne.n	8009c8a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d006      	beq.n	8009ca4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c9a:	f023 0206 	bic.w	r2, r3, #6
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ca2:	e002      	b.n	8009caa <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cae:	4a26      	ldr	r2, [pc, #152]	; (8009d48 <HAL_ADC_Start_DMA+0x15c>)
 8009cb0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb6:	4a25      	ldr	r2, [pc, #148]	; (8009d4c <HAL_ADC_Start_DMA+0x160>)
 8009cb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cbe:	4a24      	ldr	r2, [pc, #144]	; (8009d50 <HAL_ADC_Start_DMA+0x164>)
 8009cc0:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	221c      	movs	r2, #28
 8009cc8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f042 0210 	orr.w	r2, r2, #16
 8009ce0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68da      	ldr	r2, [r3, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f042 0201 	orr.w	r2, r2, #1
 8009cf0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3340      	adds	r3, #64	; 0x40
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f001 f9e7 	bl	800b0d4 <HAL_DMA_Start_IT>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fde5 	bl	80098de <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009d14:	e00d      	b.n	8009d32 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8009d1e:	e008      	b.n	8009d32 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009d2c:	e001      	b.n	8009d32 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	42028300 	.word	0x42028300
 8009d40:	42028100 	.word	0x42028100
 8009d44:	42028000 	.word	0x42028000
 8009d48:	0800aaa5 	.word	0x0800aaa5
 8009d4c:	0800ab7d 	.word	0x0800ab7d
 8009d50:	0800ab99 	.word	0x0800ab99

08009d54 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b08a      	sub	sp, #40	; 0x28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009d70:	4882      	ldr	r0, [pc, #520]	; (8009f7c <HAL_ADC_IRQHandler+0x228>)
 8009d72:	f7ff fd23 	bl	80097bc <LL_ADC_GetMultimode>
 8009d76:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d017      	beq.n	8009db2 <HAL_ADC_IRQHandler+0x5e>
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d012      	beq.n	8009db2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d90:	f003 0310 	and.w	r3, r3, #16
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d105      	bne.n	8009da4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 ff5f 	bl	800ac68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2202      	movs	r2, #2
 8009db0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <HAL_ADC_IRQHandler+0x72>
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	f003 0304 	and.w	r3, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10a      	bne.n	8009ddc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f000 8083 	beq.w	8009ed8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f003 0308 	and.w	r3, r3, #8
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d07d      	beq.n	8009ed8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009de0:	f003 0310 	and.w	r3, r3, #16
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d105      	bne.n	8009df4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff fc3d 	bl	8009678 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d062      	beq.n	8009eca <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a5d      	ldr	r2, [pc, #372]	; (8009f80 <HAL_ADC_IRQHandler+0x22c>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d002      	beq.n	8009e14 <HAL_ADC_IRQHandler+0xc0>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	e000      	b.n	8009e16 <HAL_ADC_IRQHandler+0xc2>
 8009e14:	4b5b      	ldr	r3, [pc, #364]	; (8009f84 <HAL_ADC_IRQHandler+0x230>)
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d008      	beq.n	8009e30 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b05      	cmp	r3, #5
 8009e28:	d002      	beq.n	8009e30 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2b09      	cmp	r3, #9
 8009e2e:	d104      	bne.n	8009e3a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	623b      	str	r3, [r7, #32]
 8009e38:	e00c      	b.n	8009e54 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a50      	ldr	r2, [pc, #320]	; (8009f80 <HAL_ADC_IRQHandler+0x22c>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d002      	beq.n	8009e4a <HAL_ADC_IRQHandler+0xf6>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	e000      	b.n	8009e4c <HAL_ADC_IRQHandler+0xf8>
 8009e4a:	4b4e      	ldr	r3, [pc, #312]	; (8009f84 <HAL_ADC_IRQHandler+0x230>)
 8009e4c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d135      	bne.n	8009eca <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b08      	cmp	r3, #8
 8009e6a:	d12e      	bne.n	8009eca <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff fd48 	bl	8009906 <LL_ADC_REG_IsConversionOngoing>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d11a      	bne.n	8009eb2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 020c 	bic.w	r2, r2, #12
 8009e8a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d112      	bne.n	8009eca <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea8:	f043 0201 	orr.w	r2, r3, #1
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	659a      	str	r2, [r3, #88]	; 0x58
 8009eb0:	e00b      	b.n	8009eca <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb6:	f043 0210 	orr.w	r2, r3, #16
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec2:	f043 0201 	orr.w	r2, r3, #1
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7f7 f816 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	220c      	movs	r2, #12
 8009ed6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d004      	beq.n	8009eec <HAL_ADC_IRQHandler+0x198>
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	f003 0320 	and.w	r3, r3, #32
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10b      	bne.n	8009f04 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 809f 	beq.w	800a036 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 8099 	beq.w	800a036 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f08:	f003 0310 	and.w	r3, r3, #16
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d105      	bne.n	8009f1c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff fbe8 	bl	80096f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009f26:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7ff fba3 	bl	8009678 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009f32:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a11      	ldr	r2, [pc, #68]	; (8009f80 <HAL_ADC_IRQHandler+0x22c>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d002      	beq.n	8009f44 <HAL_ADC_IRQHandler+0x1f0>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	e000      	b.n	8009f46 <HAL_ADC_IRQHandler+0x1f2>
 8009f44:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <HAL_ADC_IRQHandler+0x230>)
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d008      	beq.n	8009f60 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	2b06      	cmp	r3, #6
 8009f58:	d002      	beq.n	8009f60 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b07      	cmp	r3, #7
 8009f5e:	d104      	bne.n	8009f6a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	623b      	str	r3, [r7, #32]
 8009f68:	e013      	b.n	8009f92 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a04      	ldr	r2, [pc, #16]	; (8009f80 <HAL_ADC_IRQHandler+0x22c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d009      	beq.n	8009f88 <HAL_ADC_IRQHandler+0x234>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	e007      	b.n	8009f8a <HAL_ADC_IRQHandler+0x236>
 8009f7a:	bf00      	nop
 8009f7c:	42028300 	.word	0x42028300
 8009f80:	42028100 	.word	0x42028100
 8009f84:	42028000 	.word	0x42028000
 8009f88:	4b7d      	ldr	r3, [pc, #500]	; (800a180 <HAL_ADC_IRQHandler+0x42c>)
 8009f8a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d047      	beq.n	800a028 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d007      	beq.n	8009fb2 <HAL_ADC_IRQHandler+0x25e>
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d03f      	beq.n	800a028 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d13a      	bne.n	800a028 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fbc:	2b40      	cmp	r3, #64	; 0x40
 8009fbe:	d133      	bne.n	800a028 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d12e      	bne.n	800a028 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff fcac 	bl	800992c <LL_ADC_INJ_IsConversionOngoing>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d11a      	bne.n	800a010 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009fe8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d112      	bne.n	800a028 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a006:	f043 0201 	orr.w	r2, r3, #1
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	659a      	str	r2, [r3, #88]	; 0x58
 800a00e:	e00b      	b.n	800a028 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a014:	f043 0210 	orr.w	r2, r3, #16
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a020:	f043 0201 	orr.w	r2, r3, #1
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fdf5 	bl	800ac18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2260      	movs	r2, #96	; 0x60
 800a034:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d011      	beq.n	800a064 <HAL_ADC_IRQHandler+0x310>
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00c      	beq.n	800a064 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a04e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f8a0 	bl	800a19c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2280      	movs	r2, #128	; 0x80
 800a062:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d012      	beq.n	800a094 <HAL_ADC_IRQHandler+0x340>
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00d      	beq.n	800a094 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fddb 	bl	800ac40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a092:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d012      	beq.n	800a0c4 <HAL_ADC_IRQHandler+0x370>
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00d      	beq.n	800a0c4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fdcd 	bl	800ac54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	f003 0310 	and.w	r3, r3, #16
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d036      	beq.n	800a13c <HAL_ADC_IRQHandler+0x3e8>
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d031      	beq.n	800a13c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a0e4:	e014      	b.n	800a110 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d008      	beq.n	800a0fe <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a0ec:	4825      	ldr	r0, [pc, #148]	; (800a184 <HAL_ADC_IRQHandler+0x430>)
 800a0ee:	f7ff fb73 	bl	80097d8 <LL_ADC_GetMultiDMATransfer>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a0fc:	e008      	b.n	800a110 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	f003 0301 	and.w	r3, r3, #1
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800a10c:	2301      	movs	r3, #1
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	2b01      	cmp	r3, #1
 800a114:	d10e      	bne.n	800a134 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a11a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a126:	f043 0202 	orr.w	r2, r3, #2
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f83e 	bl	800a1b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2210      	movs	r2, #16
 800a13a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a142:	2b00      	cmp	r3, #0
 800a144:	d018      	beq.n	800a178 <HAL_ADC_IRQHandler+0x424>
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d013      	beq.n	800a178 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a154:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a160:	f043 0208 	orr.w	r2, r3, #8
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a170:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fd5a 	bl	800ac2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a178:	bf00      	nop
 800a17a:	3728      	adds	r7, #40	; 0x28
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	42028000 	.word	0x42028000
 800a184:	42028300 	.word	0x42028300

0800a188 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a1c4:	b590      	push	{r4, r7, lr}
 800a1c6:	b0b7      	sub	sp, #220	; 0xdc
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d101      	bne.n	800a1e6 <HAL_ADC_ConfigChannel+0x22>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	e3c1      	b.n	800a96a <HAL_ADC_ConfigChannel+0x7a6>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff fb87 	bl	8009906 <LL_ADC_REG_IsConversionOngoing>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f040 83a6 	bne.w	800a94c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	6859      	ldr	r1, [r3, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	f7ff fa46 	bl	800969e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fb75 	bl	8009906 <LL_ADC_REG_IsConversionOngoing>
 800a21c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4618      	mov	r0, r3
 800a226:	f7ff fb81 	bl	800992c <LL_ADC_INJ_IsConversionOngoing>
 800a22a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a22e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a232:	2b00      	cmp	r3, #0
 800a234:	f040 81c1 	bne.w	800a5ba <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f040 81bc 	bne.w	800a5ba <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a24a:	d10f      	bne.n	800a26c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2200      	movs	r2, #0
 800a256:	4619      	mov	r1, r3
 800a258:	f7ff fa60 	bl	800971c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff f9f4 	bl	8009652 <LL_ADC_SetSamplingTimeCommonConfig>
 800a26a:	e00e      	b.n	800a28a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	6819      	ldr	r1, [r3, #0]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	461a      	mov	r2, r3
 800a27a:	f7ff fa4f 	bl	800971c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff f9e4 	bl	8009652 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	695a      	ldr	r2, [r3, #20]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	08db      	lsrs	r3, r3, #3
 800a296:	f003 0303 	and.w	r3, r3, #3
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d00a      	beq.n	800a2c2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6818      	ldr	r0, [r3, #0]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	6919      	ldr	r1, [r3, #16]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2bc:	f7ff f974 	bl	80095a8 <LL_ADC_SetOffset>
 800a2c0:	e17b      	b.n	800a5ba <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7ff f991 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <HAL_ADC_ConfigChannel+0x12a>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2100      	movs	r1, #0
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff f986 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	0e9b      	lsrs	r3, r3, #26
 800a2e8:	f003 021f 	and.w	r2, r3, #31
 800a2ec:	e01e      	b.n	800a32c <HAL_ADC_ConfigChannel+0x168>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff f97b 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a300:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a304:	fa93 f3a3 	rbit	r3, r3
 800a308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a30c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a314:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800a31c:	2320      	movs	r3, #32
 800a31e:	e004      	b.n	800a32a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800a320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a324:	fab3 f383 	clz	r3, r3
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a334:	2b00      	cmp	r3, #0
 800a336:	d105      	bne.n	800a344 <HAL_ADC_ConfigChannel+0x180>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	0e9b      	lsrs	r3, r3, #26
 800a33e:	f003 031f 	and.w	r3, r3, #31
 800a342:	e018      	b.n	800a376 <HAL_ADC_ConfigChannel+0x1b2>
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a34c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a350:	fa93 f3a3 	rbit	r3, r3
 800a354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800a358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a35c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800a360:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800a368:	2320      	movs	r3, #32
 800a36a:	e004      	b.n	800a376 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800a36c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a370:	fab3 f383 	clz	r3, r3
 800a374:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a376:	429a      	cmp	r2, r3
 800a378:	d106      	bne.n	800a388 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2200      	movs	r2, #0
 800a380:	2100      	movs	r1, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f7ff f94a 	bl	800961c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2101      	movs	r1, #1
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff f92e 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a394:	4603      	mov	r3, r0
 800a396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10a      	bne.n	800a3b4 <HAL_ADC_ConfigChannel+0x1f0>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff f923 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	0e9b      	lsrs	r3, r3, #26
 800a3ae:	f003 021f 	and.w	r2, r3, #31
 800a3b2:	e01e      	b.n	800a3f2 <HAL_ADC_ConfigChannel+0x22e>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff f918 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3ca:	fa93 f3a3 	rbit	r3, r3
 800a3ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800a3d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800a3da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800a3e2:	2320      	movs	r3, #32
 800a3e4:	e004      	b.n	800a3f0 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800a3e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3ea:	fab3 f383 	clz	r3, r3
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d105      	bne.n	800a40a <HAL_ADC_ConfigChannel+0x246>
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	0e9b      	lsrs	r3, r3, #26
 800a404:	f003 031f 	and.w	r3, r3, #31
 800a408:	e018      	b.n	800a43c <HAL_ADC_ConfigChannel+0x278>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a412:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a416:	fa93 f3a3 	rbit	r3, r3
 800a41a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800a41e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800a426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800a42e:	2320      	movs	r3, #32
 800a430:	e004      	b.n	800a43c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800a432:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a436:	fab3 f383 	clz	r3, r3
 800a43a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d106      	bne.n	800a44e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2200      	movs	r2, #0
 800a446:	2101      	movs	r1, #1
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff f8e7 	bl	800961c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2102      	movs	r1, #2
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff f8cb 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <HAL_ADC_ConfigChannel+0x2b6>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2102      	movs	r1, #2
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff f8c0 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a470:	4603      	mov	r3, r0
 800a472:	0e9b      	lsrs	r3, r3, #26
 800a474:	f003 021f 	and.w	r2, r3, #31
 800a478:	e01e      	b.n	800a4b8 <HAL_ADC_ConfigChannel+0x2f4>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2102      	movs	r1, #2
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff f8b5 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a486:	4603      	mov	r3, r0
 800a488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a48c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a490:	fa93 f3a3 	rbit	r3, r3
 800a494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800a498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a49c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800a4a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	e004      	b.n	800a4b6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 800a4ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4b0:	fab3 f383 	clz	r3, r3
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d105      	bne.n	800a4d0 <HAL_ADC_ConfigChannel+0x30c>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	0e9b      	lsrs	r3, r3, #26
 800a4ca:	f003 031f 	and.w	r3, r3, #31
 800a4ce:	e016      	b.n	800a4fe <HAL_ADC_ConfigChannel+0x33a>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4dc:	fa93 f3a3 	rbit	r3, r3
 800a4e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800a4e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800a4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800a4f0:	2320      	movs	r3, #32
 800a4f2:	e004      	b.n	800a4fe <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800a4f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4f8:	fab3 f383 	clz	r3, r3
 800a4fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d106      	bne.n	800a510 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2200      	movs	r2, #0
 800a508:	2102      	movs	r1, #2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff f886 	bl	800961c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2103      	movs	r1, #3
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff f86a 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <HAL_ADC_ConfigChannel+0x378>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2103      	movs	r1, #3
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7ff f85f 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a532:	4603      	mov	r3, r0
 800a534:	0e9b      	lsrs	r3, r3, #26
 800a536:	f003 021f 	and.w	r2, r3, #31
 800a53a:	e017      	b.n	800a56c <HAL_ADC_ConfigChannel+0x3a8>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2103      	movs	r1, #3
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff f854 	bl	80095f0 <LL_ADC_GetOffsetChannel>
 800a548:	4603      	mov	r3, r0
 800a54a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a54c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a54e:	fa93 f3a3 	rbit	r3, r3
 800a552:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800a554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a556:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800a558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800a55e:	2320      	movs	r3, #32
 800a560:	e003      	b.n	800a56a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800a562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a564:	fab3 f383 	clz	r3, r3
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a574:	2b00      	cmp	r3, #0
 800a576:	d105      	bne.n	800a584 <HAL_ADC_ConfigChannel+0x3c0>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	0e9b      	lsrs	r3, r3, #26
 800a57e:	f003 031f 	and.w	r3, r3, #31
 800a582:	e011      	b.n	800a5a8 <HAL_ADC_ConfigChannel+0x3e4>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a58a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a58c:	fa93 f3a3 	rbit	r3, r3
 800a590:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800a592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a594:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800a596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 800a59c:	2320      	movs	r3, #32
 800a59e:	e003      	b.n	800a5a8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800a5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a2:	fab3 f383 	clz	r3, r3
 800a5a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d106      	bne.n	800a5ba <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2103      	movs	r1, #3
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff f831 	bl	800961c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff f97a 	bl	80098b8 <LL_ADC_IsEnabled>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f040 81c9 	bne.w	800a95e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	6819      	ldr	r1, [r3, #0]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	f7ff f8cb 	bl	8009774 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	4a8f      	ldr	r2, [pc, #572]	; (800a820 <HAL_ADC_ConfigChannel+0x65c>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	f040 8131 	bne.w	800a84c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <HAL_ADC_ConfigChannel+0x44e>
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	0e9b      	lsrs	r3, r3, #26
 800a600:	3301      	adds	r3, #1
 800a602:	f003 031f 	and.w	r3, r3, #31
 800a606:	2b09      	cmp	r3, #9
 800a608:	bf94      	ite	ls
 800a60a:	2301      	movls	r3, #1
 800a60c:	2300      	movhi	r3, #0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	e019      	b.n	800a646 <HAL_ADC_ConfigChannel+0x482>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a61a:	fa93 f3a3 	rbit	r3, r3
 800a61e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800a620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a622:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800a624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800a62a:	2320      	movs	r3, #32
 800a62c:	e003      	b.n	800a636 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800a62e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a630:	fab3 f383 	clz	r3, r3
 800a634:	b2db      	uxtb	r3, r3
 800a636:	3301      	adds	r3, #1
 800a638:	f003 031f 	and.w	r3, r3, #31
 800a63c:	2b09      	cmp	r3, #9
 800a63e:	bf94      	ite	ls
 800a640:	2301      	movls	r3, #1
 800a642:	2300      	movhi	r3, #0
 800a644:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a646:	2b00      	cmp	r3, #0
 800a648:	d079      	beq.n	800a73e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a652:	2b00      	cmp	r3, #0
 800a654:	d107      	bne.n	800a666 <HAL_ADC_ConfigChannel+0x4a2>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	0e9b      	lsrs	r3, r3, #26
 800a65c:	3301      	adds	r3, #1
 800a65e:	069b      	lsls	r3, r3, #26
 800a660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a664:	e015      	b.n	800a692 <HAL_ADC_ConfigChannel+0x4ce>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66e:	fa93 f3a3 	rbit	r3, r3
 800a672:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a676:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800a678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800a67e:	2320      	movs	r3, #32
 800a680:	e003      	b.n	800a68a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800a682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a684:	fab3 f383 	clz	r3, r3
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	3301      	adds	r3, #1
 800a68c:	069b      	lsls	r3, r3, #26
 800a68e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d109      	bne.n	800a6b2 <HAL_ADC_ConfigChannel+0x4ee>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	0e9b      	lsrs	r3, r3, #26
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	f003 031f 	and.w	r3, r3, #31
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b0:	e017      	b.n	800a6e2 <HAL_ADC_ConfigChannel+0x51e>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ba:	fa93 f3a3 	rbit	r3, r3
 800a6be:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800a6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800a6c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800a6ca:	2320      	movs	r3, #32
 800a6cc:	e003      	b.n	800a6d6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800a6ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d0:	fab3 f383 	clz	r3, r3
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	f003 031f 	and.w	r3, r3, #31
 800a6dc:	2101      	movs	r1, #1
 800a6de:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e2:	ea42 0103 	orr.w	r1, r2, r3
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <HAL_ADC_ConfigChannel+0x544>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	0e9b      	lsrs	r3, r3, #26
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	f003 021f 	and.w	r2, r3, #31
 800a6fe:	4613      	mov	r3, r2
 800a700:	005b      	lsls	r3, r3, #1
 800a702:	4413      	add	r3, r2
 800a704:	051b      	lsls	r3, r3, #20
 800a706:	e018      	b.n	800a73a <HAL_ADC_ConfigChannel+0x576>
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a710:	fa93 f3a3 	rbit	r3, r3
 800a714:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a718:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800a71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800a720:	2320      	movs	r3, #32
 800a722:	e003      	b.n	800a72c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800a724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a726:	fab3 f383 	clz	r3, r3
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	3301      	adds	r3, #1
 800a72e:	f003 021f 	and.w	r2, r3, #31
 800a732:	4613      	mov	r3, r2
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	4413      	add	r3, r2
 800a738:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a73a:	430b      	orrs	r3, r1
 800a73c:	e081      	b.n	800a842 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a746:	2b00      	cmp	r3, #0
 800a748:	d107      	bne.n	800a75a <HAL_ADC_ConfigChannel+0x596>
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	0e9b      	lsrs	r3, r3, #26
 800a750:	3301      	adds	r3, #1
 800a752:	069b      	lsls	r3, r3, #26
 800a754:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a758:	e015      	b.n	800a786 <HAL_ADC_ConfigChannel+0x5c2>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a762:	fa93 f3a3 	rbit	r3, r3
 800a766:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800a772:	2320      	movs	r3, #32
 800a774:	e003      	b.n	800a77e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	fab3 f383 	clz	r3, r3
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	3301      	adds	r3, #1
 800a780:	069b      	lsls	r3, r3, #26
 800a782:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d109      	bne.n	800a7a6 <HAL_ADC_ConfigChannel+0x5e2>
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	0e9b      	lsrs	r3, r3, #26
 800a798:	3301      	adds	r3, #1
 800a79a:	f003 031f 	and.w	r3, r3, #31
 800a79e:	2101      	movs	r1, #1
 800a7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a4:	e017      	b.n	800a7d6 <HAL_ADC_ConfigChannel+0x612>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7ac:	6a3b      	ldr	r3, [r7, #32]
 800a7ae:	fa93 f3a3 	rbit	r3, r3
 800a7b2:	61fb      	str	r3, [r7, #28]
  return result;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800a7be:	2320      	movs	r3, #32
 800a7c0:	e003      	b.n	800a7ca <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	fab3 f383 	clz	r3, r3
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	f003 031f 	and.w	r3, r3, #31
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d6:	ea42 0103 	orr.w	r1, r2, r3
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10d      	bne.n	800a802 <HAL_ADC_ConfigChannel+0x63e>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	0e9b      	lsrs	r3, r3, #26
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	f003 021f 	and.w	r2, r3, #31
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4413      	add	r3, r2
 800a7f8:	3b1e      	subs	r3, #30
 800a7fa:	051b      	lsls	r3, r3, #20
 800a7fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a800:	e01e      	b.n	800a840 <HAL_ADC_ConfigChannel+0x67c>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	fa93 f3a3 	rbit	r3, r3
 800a80e:	613b      	str	r3, [r7, #16]
  return result;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d104      	bne.n	800a824 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800a81a:	2320      	movs	r3, #32
 800a81c:	e006      	b.n	800a82c <HAL_ADC_ConfigChannel+0x668>
 800a81e:	bf00      	nop
 800a820:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	fab3 f383 	clz	r3, r3
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	3301      	adds	r3, #1
 800a82e:	f003 021f 	and.w	r2, r3, #31
 800a832:	4613      	mov	r3, r2
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	4413      	add	r3, r2
 800a838:	3b1e      	subs	r3, #30
 800a83a:	051b      	lsls	r3, r3, #20
 800a83c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a840:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a846:	4619      	mov	r1, r3
 800a848:	f7fe ff68 	bl	800971c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	4b48      	ldr	r3, [pc, #288]	; (800a974 <HAL_ADC_ConfigChannel+0x7b0>)
 800a852:	4013      	ands	r3, r2
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 8082 	beq.w	800a95e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a85a:	4847      	ldr	r0, [pc, #284]	; (800a978 <HAL_ADC_ConfigChannel+0x7b4>)
 800a85c:	f7fe fe96 	bl	800958c <LL_ADC_GetCommonPathInternalCh>
 800a860:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a864:	4845      	ldr	r0, [pc, #276]	; (800a97c <HAL_ADC_ConfigChannel+0x7b8>)
 800a866:	f7ff f827 	bl	80098b8 <LL_ADC_IsEnabled>
 800a86a:	4604      	mov	r4, r0
 800a86c:	4844      	ldr	r0, [pc, #272]	; (800a980 <HAL_ADC_ConfigChannel+0x7bc>)
 800a86e:	f7ff f823 	bl	80098b8 <LL_ADC_IsEnabled>
 800a872:	4603      	mov	r3, r0
 800a874:	4323      	orrs	r3, r4
 800a876:	2b00      	cmp	r3, #0
 800a878:	d15e      	bne.n	800a938 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a41      	ldr	r2, [pc, #260]	; (800a984 <HAL_ADC_ConfigChannel+0x7c0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d127      	bne.n	800a8d4 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d121      	bne.n	800a8d4 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a39      	ldr	r2, [pc, #228]	; (800a97c <HAL_ADC_ConfigChannel+0x7b8>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d161      	bne.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a89a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a89e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	4834      	ldr	r0, [pc, #208]	; (800a978 <HAL_ADC_ConfigChannel+0x7b4>)
 800a8a6:	f7fe fe5e 	bl	8009566 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a8aa:	4b37      	ldr	r3, [pc, #220]	; (800a988 <HAL_ADC_ConfigChannel+0x7c4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	099b      	lsrs	r3, r3, #6
 800a8b0:	4a36      	ldr	r2, [pc, #216]	; (800a98c <HAL_ADC_ConfigChannel+0x7c8>)
 800a8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b6:	099b      	lsrs	r3, r3, #6
 800a8b8:	1c5a      	adds	r2, r3, #1
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	005b      	lsls	r3, r3, #1
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800a8c2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800a8c4:	e002      	b.n	800a8cc <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1f9      	bne.n	800a8c6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a8d2:	e044      	b.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a2d      	ldr	r2, [pc, #180]	; (800a990 <HAL_ADC_ConfigChannel+0x7cc>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d113      	bne.n	800a906 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a8de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10d      	bne.n	800a906 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a23      	ldr	r2, [pc, #140]	; (800a97c <HAL_ADC_ConfigChannel+0x7b8>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d134      	bne.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a8f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	481e      	ldr	r0, [pc, #120]	; (800a978 <HAL_ADC_ConfigChannel+0x7b4>)
 800a900:	f7fe fe31 	bl	8009566 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a904:	e02b      	b.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a22      	ldr	r2, [pc, #136]	; (800a994 <HAL_ADC_ConfigChannel+0x7d0>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d126      	bne.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a910:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d120      	bne.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a16      	ldr	r2, [pc, #88]	; (800a97c <HAL_ADC_ConfigChannel+0x7b8>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d11b      	bne.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a92a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a92e:	4619      	mov	r1, r3
 800a930:	4811      	ldr	r0, [pc, #68]	; (800a978 <HAL_ADC_ConfigChannel+0x7b4>)
 800a932:	f7fe fe18 	bl	8009566 <LL_ADC_SetCommonPathInternalCh>
 800a936:	e012      	b.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a93c:	f043 0220 	orr.w	r2, r3, #32
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800a94a:	e008      	b.n	800a95e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a950:	f043 0220 	orr.w	r2, r3, #32
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800a966:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	37dc      	adds	r7, #220	; 0xdc
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd90      	pop	{r4, r7, pc}
 800a972:	bf00      	nop
 800a974:	80080000 	.word	0x80080000
 800a978:	42028300 	.word	0x42028300
 800a97c:	42028000 	.word	0x42028000
 800a980:	42028100 	.word	0x42028100
 800a984:	c7520000 	.word	0xc7520000
 800a988:	20000048 	.word	0x20000048
 800a98c:	053e2d63 	.word	0x053e2d63
 800a990:	cb840000 	.word	0xcb840000
 800a994:	80000001 	.word	0x80000001

0800a998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe ff85 	bl	80098b8 <LL_ADC_IsEnabled>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d169      	bne.n	800aa88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	4b36      	ldr	r3, [pc, #216]	; (800aa94 <ADC_Enable+0xfc>)
 800a9bc:	4013      	ands	r3, r2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00d      	beq.n	800a9de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c6:	f043 0210 	orr.w	r2, r3, #16
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d2:	f043 0201 	orr.w	r2, r3, #1
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e055      	b.n	800aa8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe ff54 	bl	8009890 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a9e8:	482b      	ldr	r0, [pc, #172]	; (800aa98 <ADC_Enable+0x100>)
 800a9ea:	f7fe fdcf 	bl	800958c <LL_ADC_GetCommonPathInternalCh>
 800a9ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a9f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d013      	beq.n	800aa20 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a9f8:	4b28      	ldr	r3, [pc, #160]	; (800aa9c <ADC_Enable+0x104>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	099b      	lsrs	r3, r3, #6
 800a9fe:	4a28      	ldr	r2, [pc, #160]	; (800aaa0 <ADC_Enable+0x108>)
 800aa00:	fba2 2303 	umull	r2, r3, r2, r3
 800aa04:	099b      	lsrs	r3, r3, #6
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	4613      	mov	r3, r2
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800aa12:	e002      	b.n	800aa1a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f9      	bne.n	800aa14 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800aa20:	f7fe fd82 	bl	8009528 <HAL_GetTick>
 800aa24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aa26:	e028      	b.n	800aa7a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fe ff43 	bl	80098b8 <LL_ADC_IsEnabled>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d104      	bne.n	800aa42 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fe ff27 	bl	8009890 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aa42:	f7fe fd71 	bl	8009528 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d914      	bls.n	800aa7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d00d      	beq.n	800aa7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa62:	f043 0210 	orr.w	r2, r3, #16
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa6e:	f043 0201 	orr.w	r2, r3, #1
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e007      	b.n	800aa8a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d1cf      	bne.n	800aa28 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	8000003f 	.word	0x8000003f
 800aa98:	42028300 	.word	0x42028300
 800aa9c:	20000048 	.word	0x20000048
 800aaa0:	053e2d63 	.word	0x053e2d63

0800aaa4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d14b      	bne.n	800ab56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aac2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0308 	and.w	r3, r3, #8
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d021      	beq.n	800ab1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fdcb 	bl	8009678 <LL_ADC_REG_IsTriggerSourceSWStart>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d032      	beq.n	800ab4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d12b      	bne.n	800ab4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aafa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d11f      	bne.n	800ab4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab12:	f043 0201 	orr.w	r2, r3, #1
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	659a      	str	r2, [r3, #88]	; 0x58
 800ab1a:	e018      	b.n	800ab4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d111      	bne.n	800ab4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d105      	bne.n	800ab4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab46:	f043 0201 	orr.w	r2, r3, #1
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7f6 f9d4 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ab54:	e00e      	b.n	800ab74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5a:	f003 0310 	and.w	r3, r3, #16
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f7ff fb24 	bl	800a1b0 <HAL_ADC_ErrorCallback>
}
 800ab68:	e004      	b.n	800ab74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
}
 800ab74:	bf00      	nop
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7ff fafc 	bl	800a188 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ab90:	bf00      	nop
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abb6:	f043 0204 	orr.w	r2, r3, #4
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff faf6 	bl	800a1b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800abc4:	bf00      	nop
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <LL_ADC_IsEnabled>:
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <LL_ADC_IsEnabled+0x18>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e000      	b.n	800abe6 <LL_ADC_IsEnabled+0x1a>
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <LL_ADC_REG_IsConversionOngoing>:
{
 800abf2:	b480      	push	{r7}
 800abf4:	b083      	sub	sp, #12
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d101      	bne.n	800ac0a <LL_ADC_REG_IsConversionOngoing+0x18>
 800ac06:	2301      	movs	r3, #1
 800ac08:	e000      	b.n	800ac0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800ac7c:	b590      	push	{r4, r7, lr}
 800ac7e:	b0a1      	sub	sp, #132	; 0x84
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d101      	bne.n	800ac9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800ac96:	2302      	movs	r3, #2
 800ac98:	e089      	b.n	800adae <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800aca2:	2300      	movs	r3, #0
 800aca4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800aca6:	2300      	movs	r3, #0
 800aca8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a42      	ldr	r2, [pc, #264]	; (800adb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d102      	bne.n	800acba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800acb4:	4b41      	ldr	r3, [pc, #260]	; (800adbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	e001      	b.n	800acbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10b      	bne.n	800acdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc8:	f043 0220 	orr.w	r2, r3, #32
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e068      	b.n	800adae <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4618      	mov	r0, r3
 800ace0:	f7ff ff87 	bl	800abf2 <LL_ADC_REG_IsConversionOngoing>
 800ace4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff ff81 	bl	800abf2 <LL_ADC_REG_IsConversionOngoing>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d14a      	bne.n	800ad8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800acf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d147      	bne.n	800ad8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800acfc:	4b30      	ldr	r3, [pc, #192]	; (800adc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800acfe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d027      	beq.n	800ad58 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800ad08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	6859      	ldr	r1, [r3, #4]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad1a:	035b      	lsls	r3, r3, #13
 800ad1c:	430b      	orrs	r3, r1
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ad24:	4824      	ldr	r0, [pc, #144]	; (800adb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800ad26:	f7ff ff51 	bl	800abcc <LL_ADC_IsEnabled>
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4823      	ldr	r0, [pc, #140]	; (800adbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800ad2e:	f7ff ff4d 	bl	800abcc <LL_ADC_IsEnabled>
 800ad32:	4603      	mov	r3, r0
 800ad34:	4323      	orrs	r3, r4
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d132      	bne.n	800ada0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800ad3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800ad42:	f023 030f 	bic.w	r3, r3, #15
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	6811      	ldr	r1, [r2, #0]
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	6892      	ldr	r2, [r2, #8]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	431a      	orrs	r2, r3
 800ad52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad54:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ad56:	e023      	b.n	800ada0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800ad58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ad60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ad64:	4814      	ldr	r0, [pc, #80]	; (800adb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800ad66:	f7ff ff31 	bl	800abcc <LL_ADC_IsEnabled>
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4813      	ldr	r0, [pc, #76]	; (800adbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800ad6e:	f7ff ff2d 	bl	800abcc <LL_ADC_IsEnabled>
 800ad72:	4603      	mov	r3, r0
 800ad74:	4323      	orrs	r3, r4
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d112      	bne.n	800ada0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800ad7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800ad82:	f023 030f 	bic.w	r3, r3, #15
 800ad86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad88:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ad8a:	e009      	b.n	800ada0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad90:	f043 0220 	orr.w	r2, r3, #32
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ad9e:	e000      	b.n	800ada2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ada0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800adaa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3784      	adds	r7, #132	; 0x84
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd90      	pop	{r4, r7, pc}
 800adb6:	bf00      	nop
 800adb8:	42028000 	.word	0x42028000
 800adbc:	42028100 	.word	0x42028100
 800adc0:	42028300 	.word	0x42028300

0800adc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f003 0307 	and.w	r3, r3, #7
 800add2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800add4:	4b0c      	ldr	r3, [pc, #48]	; (800ae08 <__NVIC_SetPriorityGrouping+0x44>)
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ade0:	4013      	ands	r3, r2
 800ade2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800adec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800adf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800adf6:	4a04      	ldr	r2, [pc, #16]	; (800ae08 <__NVIC_SetPriorityGrouping+0x44>)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	60d3      	str	r3, [r2, #12]
}
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	e000ed00 	.word	0xe000ed00

0800ae0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ae10:	4b04      	ldr	r3, [pc, #16]	; (800ae24 <__NVIC_GetPriorityGrouping+0x18>)
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	0a1b      	lsrs	r3, r3, #8
 800ae16:	f003 0307 	and.w	r3, r3, #7
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	e000ed00 	.word	0xe000ed00

0800ae28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	db0b      	blt.n	800ae52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	f003 021f 	and.w	r2, r3, #31
 800ae40:	4907      	ldr	r1, [pc, #28]	; (800ae60 <__NVIC_EnableIRQ+0x38>)
 800ae42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae46:	095b      	lsrs	r3, r3, #5
 800ae48:	2001      	movs	r0, #1
 800ae4a:	fa00 f202 	lsl.w	r2, r0, r2
 800ae4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ae52:	bf00      	nop
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	e000e100 	.word	0xe000e100

0800ae64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	6039      	str	r1, [r7, #0]
 800ae6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	db0a      	blt.n	800ae8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	490c      	ldr	r1, [pc, #48]	; (800aeb0 <__NVIC_SetPriority+0x4c>)
 800ae7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae82:	0152      	lsls	r2, r2, #5
 800ae84:	b2d2      	uxtb	r2, r2
 800ae86:	440b      	add	r3, r1
 800ae88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ae8c:	e00a      	b.n	800aea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	4908      	ldr	r1, [pc, #32]	; (800aeb4 <__NVIC_SetPriority+0x50>)
 800ae94:	79fb      	ldrb	r3, [r7, #7]
 800ae96:	f003 030f 	and.w	r3, r3, #15
 800ae9a:	3b04      	subs	r3, #4
 800ae9c:	0152      	lsls	r2, r2, #5
 800ae9e:	b2d2      	uxtb	r2, r2
 800aea0:	440b      	add	r3, r1
 800aea2:	761a      	strb	r2, [r3, #24]
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	e000e100 	.word	0xe000e100
 800aeb4:	e000ed00 	.word	0xe000ed00

0800aeb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b089      	sub	sp, #36	; 0x24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 0307 	and.w	r3, r3, #7
 800aeca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	f1c3 0307 	rsb	r3, r3, #7
 800aed2:	2b03      	cmp	r3, #3
 800aed4:	bf28      	it	cs
 800aed6:	2303      	movcs	r3, #3
 800aed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	3303      	adds	r3, #3
 800aede:	2b06      	cmp	r3, #6
 800aee0:	d902      	bls.n	800aee8 <NVIC_EncodePriority+0x30>
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	3b04      	subs	r3, #4
 800aee6:	e000      	b.n	800aeea <NVIC_EncodePriority+0x32>
 800aee8:	2300      	movs	r3, #0
 800aeea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	fa02 f303 	lsl.w	r3, r2, r3
 800aef6:	43da      	mvns	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	401a      	ands	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af00:	f04f 31ff 	mov.w	r1, #4294967295
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	fa01 f303 	lsl.w	r3, r1, r3
 800af0a:	43d9      	mvns	r1, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af10:	4313      	orrs	r3, r2
         );
}
 800af12:	4618      	mov	r0, r3
 800af14:	3724      	adds	r7, #36	; 0x24
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr

0800af1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff ff4c 	bl	800adc4 <__NVIC_SetPriorityGrouping>
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800af42:	f7ff ff63 	bl	800ae0c <__NVIC_GetPriorityGrouping>
 800af46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	6978      	ldr	r0, [r7, #20]
 800af4e:	f7ff ffb3 	bl	800aeb8 <NVIC_EncodePriority>
 800af52:	4602      	mov	r2, r0
 800af54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff ff82 	bl	800ae64 <__NVIC_SetPriority>
}
 800af60:	bf00      	nop
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800af72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af76:	4618      	mov	r0, r3
 800af78:	f7ff ff56 	bl	800ae28 <__NVIC_EnableIRQ>
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e08d      	b.n	800b0b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	461a      	mov	r2, r3
 800af9c:	4b47      	ldr	r3, [pc, #284]	; (800b0bc <HAL_DMA_Init+0x138>)
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d80f      	bhi.n	800afc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	4b45      	ldr	r3, [pc, #276]	; (800b0c0 <HAL_DMA_Init+0x13c>)
 800afaa:	4413      	add	r3, r2
 800afac:	4a45      	ldr	r2, [pc, #276]	; (800b0c4 <HAL_DMA_Init+0x140>)
 800afae:	fba2 2303 	umull	r2, r3, r2, r3
 800afb2:	091b      	lsrs	r3, r3, #4
 800afb4:	009a      	lsls	r2, r3, #2
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a42      	ldr	r2, [pc, #264]	; (800b0c8 <HAL_DMA_Init+0x144>)
 800afbe:	649a      	str	r2, [r3, #72]	; 0x48
 800afc0:	e00e      	b.n	800afe0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	461a      	mov	r2, r3
 800afc8:	4b40      	ldr	r3, [pc, #256]	; (800b0cc <HAL_DMA_Init+0x148>)
 800afca:	4413      	add	r3, r2
 800afcc:	4a3d      	ldr	r2, [pc, #244]	; (800b0c4 <HAL_DMA_Init+0x140>)
 800afce:	fba2 2303 	umull	r2, r3, r2, r3
 800afd2:	091b      	lsrs	r3, r3, #4
 800afd4:	009a      	lsls	r2, r3, #2
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a3c      	ldr	r2, [pc, #240]	; (800b0d0 <HAL_DMA_Init+0x14c>)
 800afde:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800aff6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800affa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b01c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 faf2 	bl	800b61c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b040:	d102      	bne.n	800b048 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b050:	b2d2      	uxtb	r2, r2
 800b052:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b05c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d010      	beq.n	800b088 <HAL_DMA_Init+0x104>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d80c      	bhi.n	800b088 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fb12 	bl	800b698 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b084:	605a      	str	r2, [r3, #4]
 800b086:	e008      	b.n	800b09a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	40020407 	.word	0x40020407
 800b0c0:	bffdfff8 	.word	0xbffdfff8
 800b0c4:	cccccccd 	.word	0xcccccccd
 800b0c8:	40020000 	.word	0x40020000
 800b0cc:	bffdfbf8 	.word	0xbffdfbf8
 800b0d0:	40020400 	.word	0x40020400

0800b0d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d101      	bne.n	800b0f4 <HAL_DMA_Start_IT+0x20>
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e066      	b.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b01      	cmp	r3, #1
 800b106:	d155      	bne.n	800b1b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f022 0201 	bic.w	r2, r2, #1
 800b124:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	68b9      	ldr	r1, [r7, #8]
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 fa37 	bl	800b5a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	2b00      	cmp	r3, #0
 800b138:	d008      	beq.n	800b14c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f042 020e 	orr.w	r2, r2, #14
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	e00f      	b.n	800b16c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f022 0204 	bic.w	r2, r2, #4
 800b15a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f042 020a 	orr.w	r2, r2, #10
 800b16a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d007      	beq.n	800b18a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b188:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d007      	beq.n	800b1a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b19c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f042 0201 	orr.w	r2, r2, #1
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	e005      	b.n	800b1c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b1bc:	2302      	movs	r3, #2
 800b1be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3718      	adds	r7, #24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b085      	sub	sp, #20
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d008      	beq.n	800b1f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2204      	movs	r2, #4
 800b1e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e040      	b.n	800b276 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f022 020e 	bic.w	r2, r2, #14
 800b202:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0201 	bic.w	r2, r2, #1
 800b222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b228:	f003 021c 	and.w	r2, r3, #28
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b230:	2101      	movs	r1, #1
 800b232:	fa01 f202 	lsl.w	r2, r1, r2
 800b236:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b240:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00c      	beq.n	800b264 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b258:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b262:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800b276:	4618      	mov	r0, r3
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b02      	cmp	r3, #2
 800b298:	d005      	beq.n	800b2a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2204      	movs	r2, #4
 800b29e:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	73fb      	strb	r3, [r7, #15]
 800b2a4:	e047      	b.n	800b336 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 020e 	bic.w	r2, r2, #14
 800b2b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 0201 	bic.w	r2, r2, #1
 800b2c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2da:	f003 021c 	and.w	r2, r3, #28
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	fa01 f202 	lsl.w	r2, r1, r2
 800b2e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b2f2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00c      	beq.n	800b316 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b30a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b314:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	4798      	blx	r3
    }
  }
  return status;
 800b336:	7bfb      	ldrb	r3, [r7, #15]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35c:	f003 031c 	and.w	r3, r3, #28
 800b360:	2204      	movs	r2, #4
 800b362:	409a      	lsls	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4013      	ands	r3, r2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d053      	beq.n	800b414 <HAL_DMA_IRQHandler+0xd4>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f003 0304 	and.w	r3, r3, #4
 800b372:	2b00      	cmp	r3, #0
 800b374:	d04e      	beq.n	800b414 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d024      	beq.n	800b3ce <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b388:	f003 021c 	and.w	r2, r3, #28
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b390:	2104      	movs	r1, #4
 800b392:	fa01 f202 	lsl.w	r2, r1, r2
 800b396:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d109      	bne.n	800b3ba <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 80c0 	beq.w	800b530 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b3b8:	e0ba      	b.n	800b530 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f000 80b6 	beq.w	800b530 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b3cc:	e0b0      	b.n	800b530 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0320 	and.w	r3, r3, #32
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d107      	bne.n	800b3ec <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f022 0204 	bic.w	r2, r2, #4
 800b3ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3f0:	f003 021c 	and.w	r2, r3, #28
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f8:	2104      	movs	r1, #4
 800b3fa:	fa01 f202 	lsl.w	r2, r1, r2
 800b3fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 8093 	beq.w	800b530 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b412:	e08d      	b.n	800b530 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b418:	f003 031c 	and.w	r3, r3, #28
 800b41c:	2202      	movs	r2, #2
 800b41e:	409a      	lsls	r2, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4013      	ands	r3, r2
 800b424:	2b00      	cmp	r3, #0
 800b426:	d04e      	beq.n	800b4c6 <HAL_DMA_IRQHandler+0x186>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f003 0302 	and.w	r3, r3, #2
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d049      	beq.n	800b4c6 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d018      	beq.n	800b472 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d108      	bne.n	800b460 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b452:	2b00      	cmp	r3, #0
 800b454:	d06e      	beq.n	800b534 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b45e:	e069      	b.n	800b534 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d065      	beq.n	800b534 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b470:	e060      	b.n	800b534 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f003 0320 	and.w	r3, r3, #32
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10b      	bne.n	800b498 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 020a 	bic.w	r2, r2, #10
 800b48e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b49c:	f003 021c 	and.w	r2, r3, #28
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4a4:	2102      	movs	r1, #2
 800b4a6:	fa01 f202 	lsl.w	r2, r1, r2
 800b4aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d03b      	beq.n	800b534 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b4c4:	e036      	b.n	800b534 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ca:	f003 031c 	and.w	r3, r3, #28
 800b4ce:	2208      	movs	r2, #8
 800b4d0:	409a      	lsls	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d02e      	beq.n	800b538 <HAL_DMA_IRQHandler+0x1f8>
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	f003 0308 	and.w	r3, r3, #8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d029      	beq.n	800b538 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f022 020e 	bic.w	r2, r2, #14
 800b4f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f8:	f003 021c 	and.w	r2, r3, #28
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b500:	2101      	movs	r1, #1
 800b502:	fa01 f202 	lsl.w	r2, r1, r2
 800b506:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d008      	beq.n	800b538 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b52e:	e002      	b.n	800b536 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b530:	bf00      	nop
 800b532:	e000      	b.n	800b536 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b534:	bf00      	nop
  return;
 800b536:	bf00      	nop
 800b538:	bf00      	nop
}
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d103      	bne.n	800b55c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	72fb      	strb	r3, [r7, #11]
    return status;
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	e01b      	b.n	800b594 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	f003 0310 	and.w	r3, r3, #16
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00d      	beq.n	800b58a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d004      	beq.n	800b582 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	e003      	b.n	800b58a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b588:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	601a      	str	r2, [r3, #0]

  return status;
 800b592:	7afb      	ldrb	r3, [r7, #11]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b5b6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d004      	beq.n	800b5ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b5c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ce:	f003 021c 	and.w	r2, r3, #28
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	fa01 f202 	lsl.w	r2, r1, r2
 800b5dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	2b10      	cmp	r3, #16
 800b5ec:	d108      	bne.n	800b600 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800b5fe:	e007      	b.n	800b610 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	60da      	str	r2, [r3, #12]
}
 800b610:	bf00      	nop
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	4b17      	ldr	r3, [pc, #92]	; (800b688 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d80a      	bhi.n	800b646 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b634:	089b      	lsrs	r3, r3, #2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b63c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	6513      	str	r3, [r2, #80]	; 0x50
 800b644:	e007      	b.n	800b656 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b64a:	089b      	lsrs	r3, r3, #2
 800b64c:	009a      	lsls	r2, r3, #2
 800b64e:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b650:	4413      	add	r3, r2
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	3b08      	subs	r3, #8
 800b65e:	4a0c      	ldr	r2, [pc, #48]	; (800b690 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b660:	fba2 2303 	umull	r2, r3, r2, r3
 800b664:	091b      	lsrs	r3, r3, #4
 800b666:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a0a      	ldr	r2, [pc, #40]	; (800b694 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b66c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f003 031f 	and.w	r3, r3, #31
 800b674:	2201      	movs	r2, #1
 800b676:	409a      	lsls	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800b67c:	bf00      	nop
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	40020407 	.word	0x40020407
 800b68c:	40020820 	.word	0x40020820
 800b690:	cccccccd 	.word	0xcccccccd
 800b694:	40020880 	.word	0x40020880

0800b698 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4b0b      	ldr	r3, [pc, #44]	; (800b6d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a08      	ldr	r2, [pc, #32]	; (800b6dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b6ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	f003 0303 	and.w	r3, r3, #3
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	409a      	lsls	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b6cc:	bf00      	nop
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr
 800b6d8:	1000823f 	.word	0x1000823f
 800b6dc:	40020940 	.word	0x40020940

0800b6e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b6ee:	e158      	b.n	800b9a2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 814a 	beq.w	800b99c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	f003 0303 	and.w	r3, r3, #3
 800b710:	2b01      	cmp	r3, #1
 800b712:	d005      	beq.n	800b720 <HAL_GPIO_Init+0x40>
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	f003 0303 	and.w	r3, r3, #3
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d130      	bne.n	800b782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	2203      	movs	r2, #3
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	43db      	mvns	r3, r3
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	4013      	ands	r3, r2
 800b736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	68da      	ldr	r2, [r3, #12]
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	fa02 f303 	lsl.w	r3, r2, r3
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	4313      	orrs	r3, r2
 800b748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b756:	2201      	movs	r2, #1
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	fa02 f303 	lsl.w	r3, r2, r3
 800b75e:	43db      	mvns	r3, r3
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	4013      	ands	r3, r2
 800b764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	091b      	lsrs	r3, r3, #4
 800b76c:	f003 0201 	and.w	r2, r3, #1
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	fa02 f303 	lsl.w	r3, r2, r3
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	4313      	orrs	r3, r2
 800b77a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	f003 0303 	and.w	r3, r3, #3
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d017      	beq.n	800b7be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	2203      	movs	r2, #3
 800b79a:	fa02 f303 	lsl.w	r3, r2, r3
 800b79e:	43db      	mvns	r3, r3
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	689a      	ldr	r2, [r3, #8]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	f003 0303 	and.w	r3, r3, #3
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d123      	bne.n	800b812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	08da      	lsrs	r2, r3, #3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3208      	adds	r2, #8
 800b7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	f003 0307 	and.w	r3, r3, #7
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	220f      	movs	r2, #15
 800b7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e6:	43db      	mvns	r3, r3
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	691a      	ldr	r2, [r3, #16]
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f003 0307 	and.w	r3, r3, #7
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b7fe:	693a      	ldr	r2, [r7, #16]
 800b800:	4313      	orrs	r3, r2
 800b802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	08da      	lsrs	r2, r3, #3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3208      	adds	r2, #8
 800b80c:	6939      	ldr	r1, [r7, #16]
 800b80e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	005b      	lsls	r3, r3, #1
 800b81c:	2203      	movs	r2, #3
 800b81e:	fa02 f303 	lsl.w	r3, r2, r3
 800b822:	43db      	mvns	r3, r3
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4013      	ands	r3, r2
 800b828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	f003 0203 	and.w	r2, r3, #3
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	fa02 f303 	lsl.w	r3, r2, r3
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 80a4 	beq.w	800b99c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800b854:	4a5a      	ldr	r2, [pc, #360]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	089b      	lsrs	r3, r3, #2
 800b85a:	3318      	adds	r3, #24
 800b85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b860:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	220f      	movs	r2, #15
 800b86c:	fa02 f303 	lsl.w	r3, r2, r3
 800b870:	43db      	mvns	r3, r3
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4013      	ands	r3, r2
 800b876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a52      	ldr	r2, [pc, #328]	; (800b9c4 <HAL_GPIO_Init+0x2e4>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d025      	beq.n	800b8cc <HAL_GPIO_Init+0x1ec>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a51      	ldr	r2, [pc, #324]	; (800b9c8 <HAL_GPIO_Init+0x2e8>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d01f      	beq.n	800b8c8 <HAL_GPIO_Init+0x1e8>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a50      	ldr	r2, [pc, #320]	; (800b9cc <HAL_GPIO_Init+0x2ec>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d019      	beq.n	800b8c4 <HAL_GPIO_Init+0x1e4>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a4f      	ldr	r2, [pc, #316]	; (800b9d0 <HAL_GPIO_Init+0x2f0>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d013      	beq.n	800b8c0 <HAL_GPIO_Init+0x1e0>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a4e      	ldr	r2, [pc, #312]	; (800b9d4 <HAL_GPIO_Init+0x2f4>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d00d      	beq.n	800b8bc <HAL_GPIO_Init+0x1dc>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a4d      	ldr	r2, [pc, #308]	; (800b9d8 <HAL_GPIO_Init+0x2f8>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d007      	beq.n	800b8b8 <HAL_GPIO_Init+0x1d8>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a4c      	ldr	r2, [pc, #304]	; (800b9dc <HAL_GPIO_Init+0x2fc>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d101      	bne.n	800b8b4 <HAL_GPIO_Init+0x1d4>
 800b8b0:	2306      	movs	r3, #6
 800b8b2:	e00c      	b.n	800b8ce <HAL_GPIO_Init+0x1ee>
 800b8b4:	2307      	movs	r3, #7
 800b8b6:	e00a      	b.n	800b8ce <HAL_GPIO_Init+0x1ee>
 800b8b8:	2305      	movs	r3, #5
 800b8ba:	e008      	b.n	800b8ce <HAL_GPIO_Init+0x1ee>
 800b8bc:	2304      	movs	r3, #4
 800b8be:	e006      	b.n	800b8ce <HAL_GPIO_Init+0x1ee>
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e004      	b.n	800b8ce <HAL_GPIO_Init+0x1ee>
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	e002      	b.n	800b8ce <HAL_GPIO_Init+0x1ee>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e000      	b.n	800b8ce <HAL_GPIO_Init+0x1ee>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	f002 0203 	and.w	r2, r2, #3
 800b8d4:	00d2      	lsls	r2, r2, #3
 800b8d6:	4093      	lsls	r3, r2
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800b8de:	4938      	ldr	r1, [pc, #224]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	089b      	lsrs	r3, r3, #2
 800b8e4:	3318      	adds	r3, #24
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b8ec:	4b34      	ldr	r3, [pc, #208]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	43db      	mvns	r3, r3
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b910:	4a2b      	ldr	r2, [pc, #172]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b916:	4b2a      	ldr	r3, [pc, #168]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	43db      	mvns	r3, r3
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4013      	ands	r3, r2
 800b924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4313      	orrs	r3, r2
 800b938:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b93a:	4a21      	ldr	r2, [pc, #132]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b940:	4b1f      	ldr	r3, [pc, #124]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	43db      	mvns	r3, r3
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	4013      	ands	r3, r2
 800b950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d003      	beq.n	800b966 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4313      	orrs	r3, r2
 800b964:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b966:	4a16      	ldr	r2, [pc, #88]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800b96e:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	43db      	mvns	r3, r3
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	4013      	ands	r3, r2
 800b97e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	4313      	orrs	r3, r2
 800b992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b994:	4a0a      	ldr	r2, [pc, #40]	; (800b9c0 <HAL_GPIO_Init+0x2e0>)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f47f ae9f 	bne.w	800b6f0 <HAL_GPIO_Init+0x10>
  }
}
 800b9b2:	bf00      	nop
 800b9b4:	bf00      	nop
 800b9b6:	371c      	adds	r7, #28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	4002f400 	.word	0x4002f400
 800b9c4:	42020000 	.word	0x42020000
 800b9c8:	42020400 	.word	0x42020400
 800b9cc:	42020800 	.word	0x42020800
 800b9d0:	42020c00 	.word	0x42020c00
 800b9d4:	42021000 	.word	0x42021000
 800b9d8:	42021400 	.word	0x42021400
 800b9dc:	42021800 	.word	0x42021800

0800b9e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	807b      	strh	r3, [r7, #2]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b9f0:	787b      	ldrb	r3, [r7, #1]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b9f6:	887a      	ldrh	r2, [r7, #2]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b9fc:	e002      	b.n	800ba04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b9fe:	887a      	ldrh	r2, [r7, #2]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	695b      	ldr	r3, [r3, #20]
 800ba20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ba22:	887a      	ldrh	r2, [r7, #2]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4013      	ands	r3, r2
 800ba28:	041a      	lsls	r2, r3, #16
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	43d9      	mvns	r1, r3
 800ba2e:	887b      	ldrh	r3, [r7, #2]
 800ba30:	400b      	ands	r3, r1
 800ba32:	431a      	orrs	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	619a      	str	r2, [r3, #24]
}
 800ba38:	bf00      	nop
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e081      	b.n	800bb5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7fc ff30 	bl	80088d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2224      	movs	r2, #36	; 0x24
 800ba74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f022 0201 	bic.w	r2, r2, #1
 800ba86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ba94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689a      	ldr	r2, [r3, #8]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800baa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d107      	bne.n	800babe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	689a      	ldr	r2, [r3, #8]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800baba:	609a      	str	r2, [r3, #8]
 800babc:	e006      	b.n	800bacc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	689a      	ldr	r2, [r3, #8]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800baca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d104      	bne.n	800bade <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800badc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	6812      	ldr	r2, [r2, #0]
 800bae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800baec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68da      	ldr	r2, [r3, #12]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	691a      	ldr	r2, [r3, #16]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	69d9      	ldr	r1, [r3, #28]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6a1a      	ldr	r2, [r3, #32]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	430a      	orrs	r2, r1
 800bb2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f042 0201 	orr.w	r2, r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2220      	movs	r2, #32
 800bb46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b20      	cmp	r3, #32
 800bb76:	d138      	bne.n	800bbea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d101      	bne.n	800bb86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bb82:	2302      	movs	r3, #2
 800bb84:	e032      	b.n	800bbec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2224      	movs	r2, #36	; 0x24
 800bb92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f022 0201 	bic.w	r2, r2, #1
 800bba4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bbb4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6819      	ldr	r1, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	430a      	orrs	r2, r1
 800bbc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f042 0201 	orr.w	r2, r2, #1
 800bbd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2220      	movs	r2, #32
 800bbda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	e000      	b.n	800bbec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bbea:	2302      	movs	r3, #2
  }
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b20      	cmp	r3, #32
 800bc0c:	d139      	bne.n	800bc82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d101      	bne.n	800bc1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e033      	b.n	800bc84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2224      	movs	r2, #36	; 0x24
 800bc28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f022 0201 	bic.w	r2, r2, #1
 800bc3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bc4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	021b      	lsls	r3, r3, #8
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f042 0201 	orr.w	r2, r2, #1
 800bc6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e000      	b.n	800bc84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bc82:	2302      	movs	r3, #2
  }
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800bc9c:	4b0b      	ldr	r3, [pc, #44]	; (800bccc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	73fb      	strb	r3, [r7, #15]
 800bcac:	e007      	b.n	800bcbe <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800bcae:	4b07      	ldr	r3, [pc, #28]	; (800bccc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f023 0204 	bic.w	r2, r3, #4
 800bcb6:	4905      	ldr	r1, [pc, #20]	; (800bccc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	600b      	str	r3, [r1, #0]
  }

  return status;
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	40030400 	.word	0x40030400

0800bcd0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800bcd4:	4b05      	ldr	r3, [pc, #20]	; (800bcec <HAL_ICACHE_Enable+0x1c>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a04      	ldr	r2, [pc, #16]	; (800bcec <HAL_ICACHE_Enable+0x1c>)
 800bcda:	f043 0301 	orr.w	r3, r3, #1
 800bcde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	40030400 	.word	0x40030400

0800bcf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcf2:	b08b      	sub	sp, #44	; 0x2c
 800bcf4:	af06      	add	r7, sp, #24
 800bcf6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e0cb      	b.n	800be9a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7fd f98e 	bl	8009038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2203      	movs	r2, #3
 800bd20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f006 ff2f 	bl	8012b8c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd2e:	2300      	movs	r3, #0
 800bd30:	73fb      	strb	r3, [r7, #15]
 800bd32:	e040      	b.n	800bdb6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	00db      	lsls	r3, r3, #3
 800bd42:	440b      	add	r3, r1
 800bd44:	3301      	adds	r3, #1
 800bd46:	2201      	movs	r2, #1
 800bd48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	440b      	add	r3, r1
 800bd5a:	7bfa      	ldrb	r2, [r7, #15]
 800bd5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	6879      	ldr	r1, [r7, #4]
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	440b      	add	r3, r1
 800bd6e:	3303      	adds	r3, #3
 800bd70:	2200      	movs	r2, #0
 800bd72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bd74:	7bfa      	ldrb	r2, [r7, #15]
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	440b      	add	r3, r1
 800bd82:	3338      	adds	r3, #56	; 0x38
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bd88:	7bfa      	ldrb	r2, [r7, #15]
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	440b      	add	r3, r1
 800bd96:	333c      	adds	r3, #60	; 0x3c
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bd9c:	7bfa      	ldrb	r2, [r7, #15]
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	4613      	mov	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	440b      	add	r3, r1
 800bdaa:	3340      	adds	r3, #64	; 0x40
 800bdac:	2200      	movs	r2, #0
 800bdae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	73fb      	strb	r3, [r7, #15]
 800bdb6:	7bfa      	ldrb	r2, [r7, #15]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d3b9      	bcc.n	800bd34 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	73fb      	strb	r3, [r7, #15]
 800bdc4:	e044      	b.n	800be50 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bdc6:	7bfa      	ldrb	r2, [r7, #15]
 800bdc8:	6879      	ldr	r1, [r7, #4]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	00db      	lsls	r3, r3, #3
 800bdd2:	440b      	add	r3, r1
 800bdd4:	f203 1369 	addw	r3, r3, #361	; 0x169
 800bdd8:	2200      	movs	r2, #0
 800bdda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bddc:	7bfa      	ldrb	r2, [r7, #15]
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	440b      	add	r3, r1
 800bdea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bdee:	7bfa      	ldrb	r2, [r7, #15]
 800bdf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bdf2:	7bfa      	ldrb	r2, [r7, #15]
 800bdf4:	6879      	ldr	r1, [r7, #4]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	440b      	add	r3, r1
 800be00:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800be04:	2200      	movs	r2, #0
 800be06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800be08:	7bfa      	ldrb	r2, [r7, #15]
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	4613      	mov	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	00db      	lsls	r3, r3, #3
 800be14:	440b      	add	r3, r1
 800be16:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800be1e:	7bfa      	ldrb	r2, [r7, #15]
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	440b      	add	r3, r1
 800be2c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800be30:	2200      	movs	r2, #0
 800be32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800be34:	7bfa      	ldrb	r2, [r7, #15]
 800be36:	6879      	ldr	r1, [r7, #4]
 800be38:	4613      	mov	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	00db      	lsls	r3, r3, #3
 800be40:	440b      	add	r3, r1
 800be42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800be46:	2200      	movs	r2, #0
 800be48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	3301      	adds	r3, #1
 800be4e:	73fb      	strb	r3, [r7, #15]
 800be50:	7bfa      	ldrb	r2, [r7, #15]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	429a      	cmp	r2, r3
 800be58:	d3b5      	bcc.n	800bdc6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	687e      	ldr	r6, [r7, #4]
 800be62:	466d      	mov	r5, sp
 800be64:	f106 0410 	add.w	r4, r6, #16
 800be68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	602b      	str	r3, [r5, #0]
 800be70:	1d33      	adds	r3, r6, #4
 800be72:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be74:	6838      	ldr	r0, [r7, #0]
 800be76:	f006 fea4 	bl	8012bc2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d102      	bne.n	800be98 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f805 	bl	800bea2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bea2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	f043 0301 	orr.w	r3, r3, #1
 800becc:	b29a      	uxth	r2, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800beda:	b29b      	uxth	r3, r3
 800bedc:	f043 0302 	orr.w	r3, r3, #2
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
	...

0800bef8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bef8:	b480      	push	{r7}
 800befa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800befc:	4b05      	ldr	r3, [pc, #20]	; (800bf14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a04      	ldr	r2, [pc, #16]	; (800bf14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bf02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf06:	6013      	str	r3, [r2, #0]
}
 800bf08:	bf00      	nop
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	40007000 	.word	0x40007000

0800bf18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800bf1c:	4b04      	ldr	r3, [pc, #16]	; (800bf30 <HAL_PWREx_GetVoltageRange+0x18>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	40007000 	.word	0x40007000

0800bf34 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800bf3c:	4b27      	ldr	r3, [pc, #156]	; (800bfdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bf44:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800bf46:	f000 f861 	bl	800c00c <HAL_PWREx_SMPS_GetEffectiveMode>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf50:	d101      	bne.n	800bf56 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	e03e      	b.n	800bfd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800bf56:	4b21      	ldr	r3, [pc, #132]	; (800bfdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf62:	d101      	bne.n	800bf68 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e035      	b.n	800bfd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d101      	bne.n	800bf74 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	e02f      	b.n	800bfd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800bf74:	4b19      	ldr	r3, [pc, #100]	; (800bfdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bf7c:	4917      	ldr	r1, [pc, #92]	; (800bfdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800bf84:	4b16      	ldr	r3, [pc, #88]	; (800bfe0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	095b      	lsrs	r3, r3, #5
 800bf8a:	4a16      	ldr	r2, [pc, #88]	; (800bfe4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800bf8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf90:	09db      	lsrs	r3, r3, #7
 800bf92:	2232      	movs	r2, #50	; 0x32
 800bf94:	fb02 f303 	mul.w	r3, r2, r3
 800bf98:	4a13      	ldr	r2, [pc, #76]	; (800bfe8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800bf9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9e:	08db      	lsrs	r3, r3, #3
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bfa4:	e002      	b.n	800bfac <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bfac:	4b0b      	ldr	r3, [pc, #44]	; (800bfdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfb8:	d102      	bne.n	800bfc0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1f2      	bne.n	800bfa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bfc0:	4b06      	ldr	r3, [pc, #24]	; (800bfdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfcc:	d101      	bne.n	800bfd2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	e000      	b.n	800bfd4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	40007000 	.word	0x40007000
 800bfe0:	20000048 	.word	0x20000048
 800bfe4:	0a7c5ac5 	.word	0x0a7c5ac5
 800bfe8:	cccccccd 	.word	0xcccccccd

0800bfec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800bfec:	b480      	push	{r7}
 800bfee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800bff0:	4b05      	ldr	r3, [pc, #20]	; (800c008 <HAL_PWREx_EnableVddIO2+0x1c>)
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	4a04      	ldr	r2, [pc, #16]	; (800c008 <HAL_PWREx_EnableVddIO2+0x1c>)
 800bff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bffa:	6053      	str	r3, [r2, #4]
}
 800bffc:	bf00      	nop
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	40007000 	.word	0x40007000

0800c00c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800c012:	4b0f      	ldr	r3, [pc, #60]	; (800c050 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800c022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c026:	607b      	str	r3, [r7, #4]
 800c028:	e00a      	b.n	800c040 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d103      	bne.n	800c03c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800c034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c038:	607b      	str	r3, [r7, #4]
 800c03a:	e001      	b.n	800c040 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800c03c:	2300      	movs	r3, #0
 800c03e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800c040:	687b      	ldr	r3, [r7, #4]
}
 800c042:	4618      	mov	r0, r3
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	40007000 	.word	0x40007000

0800c054 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	f000 bcc2 	b.w	800c9ec <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c068:	4b99      	ldr	r3, [pc, #612]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	f003 030c 	and.w	r3, r3, #12
 800c070:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c072:	4b97      	ldr	r3, [pc, #604]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f003 0303 	and.w	r3, r3, #3
 800c07a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f003 0310 	and.w	r3, r3, #16
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 80e9 	beq.w	800c25c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d006      	beq.n	800c09e <HAL_RCC_OscConfig+0x4a>
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	2b0c      	cmp	r3, #12
 800c094:	f040 8083 	bne.w	800c19e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d17f      	bne.n	800c19e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c09e:	4b8c      	ldr	r3, [pc, #560]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0302 	and.w	r3, r3, #2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d006      	beq.n	800c0b8 <HAL_RCC_OscConfig+0x64>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d102      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	f000 bc9a 	b.w	800c9ec <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0bc:	4b84      	ldr	r3, [pc, #528]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0308 	and.w	r3, r3, #8
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d004      	beq.n	800c0d2 <HAL_RCC_OscConfig+0x7e>
 800c0c8:	4b81      	ldr	r3, [pc, #516]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0d0:	e005      	b.n	800c0de <HAL_RCC_OscConfig+0x8a>
 800c0d2:	4b7f      	ldr	r3, [pc, #508]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c0d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0d8:	091b      	lsrs	r3, r3, #4
 800c0da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d224      	bcs.n	800c12c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fece 	bl	800ce88 <RCC_SetFlashLatencyFromMSIRange>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d002      	beq.n	800c0f8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	f000 bc7a 	b.w	800c9ec <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c0f8:	4b75      	ldr	r3, [pc, #468]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a74      	ldr	r2, [pc, #464]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c0fe:	f043 0308 	orr.w	r3, r3, #8
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	4b72      	ldr	r3, [pc, #456]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	496f      	ldr	r1, [pc, #444]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c112:	4313      	orrs	r3, r2
 800c114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c116:	4b6e      	ldr	r3, [pc, #440]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	021b      	lsls	r3, r3, #8
 800c124:	496a      	ldr	r1, [pc, #424]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c126:	4313      	orrs	r3, r2
 800c128:	604b      	str	r3, [r1, #4]
 800c12a:	e026      	b.n	800c17a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c12c:	4b68      	ldr	r3, [pc, #416]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a67      	ldr	r2, [pc, #412]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c132:	f043 0308 	orr.w	r3, r3, #8
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	4b65      	ldr	r3, [pc, #404]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c144:	4962      	ldr	r1, [pc, #392]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c146:	4313      	orrs	r3, r2
 800c148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c14a:	4b61      	ldr	r3, [pc, #388]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	021b      	lsls	r3, r3, #8
 800c158:	495d      	ldr	r1, [pc, #372]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fe8d 	bl	800ce88 <RCC_SetFlashLatencyFromMSIRange>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	f000 bc39 	b.w	800c9ec <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c17a:	f000 fe17 	bl	800cdac <HAL_RCC_GetHCLKFreq>
 800c17e:	4603      	mov	r3, r0
 800c180:	4a54      	ldr	r2, [pc, #336]	; (800c2d4 <HAL_RCC_OscConfig+0x280>)
 800c182:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c184:	4b54      	ldr	r3, [pc, #336]	; (800c2d8 <HAL_RCC_OscConfig+0x284>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fc ffb5 	bl	80090f8 <HAL_InitTick>
 800c18e:	4603      	mov	r3, r0
 800c190:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d060      	beq.n	800c25a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	f000 bc27 	b.w	800c9ec <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d039      	beq.n	800c21a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c1a6:	4b4a      	ldr	r3, [pc, #296]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a49      	ldr	r2, [pc, #292]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c1ac:	f043 0301 	orr.w	r3, r3, #1
 800c1b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c1b2:	f7fd f9b9 	bl	8009528 <HAL_GetTick>
 800c1b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c1b8:	e00f      	b.n	800c1da <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c1ba:	f7fd f9b5 	bl	8009528 <HAL_GetTick>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d908      	bls.n	800c1da <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c1c8:	4b41      	ldr	r3, [pc, #260]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 0302 	and.w	r3, r3, #2
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d102      	bne.n	800c1da <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	f000 bc09 	b.w	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c1da:	4b3d      	ldr	r3, [pc, #244]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 0302 	and.w	r3, r3, #2
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0e9      	beq.n	800c1ba <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c1e6:	4b3a      	ldr	r3, [pc, #232]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a39      	ldr	r2, [pc, #228]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c1ec:	f043 0308 	orr.w	r3, r3, #8
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	4b37      	ldr	r3, [pc, #220]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fe:	4934      	ldr	r1, [pc, #208]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c200:	4313      	orrs	r3, r2
 800c202:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c204:	4b32      	ldr	r3, [pc, #200]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a1b      	ldr	r3, [r3, #32]
 800c210:	021b      	lsls	r3, r3, #8
 800c212:	492f      	ldr	r1, [pc, #188]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c214:	4313      	orrs	r3, r2
 800c216:	604b      	str	r3, [r1, #4]
 800c218:	e020      	b.n	800c25c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c21a:	4b2d      	ldr	r3, [pc, #180]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a2c      	ldr	r2, [pc, #176]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c220:	f023 0301 	bic.w	r3, r3, #1
 800c224:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c226:	f7fd f97f 	bl	8009528 <HAL_GetTick>
 800c22a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c22c:	e00e      	b.n	800c24c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c22e:	f7fd f97b 	bl	8009528 <HAL_GetTick>
 800c232:	4602      	mov	r2, r0
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d907      	bls.n	800c24c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c23c:	4b24      	ldr	r3, [pc, #144]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0302 	and.w	r3, r3, #2
 800c244:	2b00      	cmp	r3, #0
 800c246:	d001      	beq.n	800c24c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800c248:	2303      	movs	r3, #3
 800c24a:	e3cf      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c24c:	4b20      	ldr	r3, [pc, #128]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0302 	and.w	r3, r3, #2
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1ea      	bne.n	800c22e <HAL_RCC_OscConfig+0x1da>
 800c258:	e000      	b.n	800c25c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c25a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f003 0301 	and.w	r3, r3, #1
 800c264:	2b00      	cmp	r3, #0
 800c266:	d07e      	beq.n	800c366 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	2b08      	cmp	r3, #8
 800c26c:	d005      	beq.n	800c27a <HAL_RCC_OscConfig+0x226>
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	2b0c      	cmp	r3, #12
 800c272:	d10e      	bne.n	800c292 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2b03      	cmp	r3, #3
 800c278:	d10b      	bne.n	800c292 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c27a:	4b15      	ldr	r3, [pc, #84]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d06e      	beq.n	800c364 <HAL_RCC_OscConfig+0x310>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d16a      	bne.n	800c364 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e3ac      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c29a:	d106      	bne.n	800c2aa <HAL_RCC_OscConfig+0x256>
 800c29c:	4b0c      	ldr	r3, [pc, #48]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a0b      	ldr	r2, [pc, #44]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c2a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2a6:	6013      	str	r3, [r2, #0]
 800c2a8:	e024      	b.n	800c2f4 <HAL_RCC_OscConfig+0x2a0>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2b2:	d113      	bne.n	800c2dc <HAL_RCC_OscConfig+0x288>
 800c2b4:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a05      	ldr	r2, [pc, #20]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c2ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a02      	ldr	r2, [pc, #8]	; (800c2d0 <HAL_RCC_OscConfig+0x27c>)
 800c2c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	e012      	b.n	800c2f4 <HAL_RCC_OscConfig+0x2a0>
 800c2ce:	bf00      	nop
 800c2d0:	40021000 	.word	0x40021000
 800c2d4:	20000048 	.word	0x20000048
 800c2d8:	2000004c 	.word	0x2000004c
 800c2dc:	4b8b      	ldr	r3, [pc, #556]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a8a      	ldr	r2, [pc, #552]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c2e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	4b88      	ldr	r3, [pc, #544]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a87      	ldr	r2, [pc, #540]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c2ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d019      	beq.n	800c330 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2fc:	f7fd f914 	bl	8009528 <HAL_GetTick>
 800c300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c302:	e00e      	b.n	800c322 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c304:	f7fd f910 	bl	8009528 <HAL_GetTick>
 800c308:	4602      	mov	r2, r0
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	2b64      	cmp	r3, #100	; 0x64
 800c310:	d907      	bls.n	800c322 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c312:	4b7e      	ldr	r3, [pc, #504]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800c31e:	2303      	movs	r3, #3
 800c320:	e364      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c322:	4b7a      	ldr	r3, [pc, #488]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0ea      	beq.n	800c304 <HAL_RCC_OscConfig+0x2b0>
 800c32e:	e01a      	b.n	800c366 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c330:	f7fd f8fa 	bl	8009528 <HAL_GetTick>
 800c334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c336:	e00e      	b.n	800c356 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c338:	f7fd f8f6 	bl	8009528 <HAL_GetTick>
 800c33c:	4602      	mov	r2, r0
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	2b64      	cmp	r3, #100	; 0x64
 800c344:	d907      	bls.n	800c356 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c346:	4b71      	ldr	r3, [pc, #452]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800c352:	2303      	movs	r3, #3
 800c354:	e34a      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c356:	4b6d      	ldr	r3, [pc, #436]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1ea      	bne.n	800c338 <HAL_RCC_OscConfig+0x2e4>
 800c362:	e000      	b.n	800c366 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0302 	and.w	r3, r3, #2
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d06c      	beq.n	800c44c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	2b04      	cmp	r3, #4
 800c376:	d005      	beq.n	800c384 <HAL_RCC_OscConfig+0x330>
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	2b0c      	cmp	r3, #12
 800c37c:	d119      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	2b02      	cmp	r3, #2
 800c382:	d116      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c384:	4b61      	ldr	r3, [pc, #388]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d005      	beq.n	800c39c <HAL_RCC_OscConfig+0x348>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e327      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c39c:	4b5b      	ldr	r3, [pc, #364]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	061b      	lsls	r3, r3, #24
 800c3aa:	4958      	ldr	r1, [pc, #352]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3b0:	e04c      	b.n	800c44c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d029      	beq.n	800c40e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3ba:	4b54      	ldr	r3, [pc, #336]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a53      	ldr	r2, [pc, #332]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3c6:	f7fd f8af 	bl	8009528 <HAL_GetTick>
 800c3ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c3cc:	e00e      	b.n	800c3ec <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3ce:	f7fd f8ab 	bl	8009528 <HAL_GetTick>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d907      	bls.n	800c3ec <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c3dc:	4b4b      	ldr	r3, [pc, #300]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e2ff      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c3ec:	4b47      	ldr	r3, [pc, #284]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0ea      	beq.n	800c3ce <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3f8:	4b44      	ldr	r3, [pc, #272]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	061b      	lsls	r3, r3, #24
 800c406:	4941      	ldr	r1, [pc, #260]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c408:	4313      	orrs	r3, r2
 800c40a:	604b      	str	r3, [r1, #4]
 800c40c:	e01e      	b.n	800c44c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c40e:	4b3f      	ldr	r3, [pc, #252]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a3e      	ldr	r2, [pc, #248]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c41a:	f7fd f885 	bl	8009528 <HAL_GetTick>
 800c41e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c420:	e00e      	b.n	800c440 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c422:	f7fd f881 	bl	8009528 <HAL_GetTick>
 800c426:	4602      	mov	r2, r0
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d907      	bls.n	800c440 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c430:	4b36      	ldr	r3, [pc, #216]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800c43c:	2303      	movs	r3, #3
 800c43e:	e2d5      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c440:	4b32      	ldr	r3, [pc, #200]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1ea      	bne.n	800c422 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f003 0308 	and.w	r3, r3, #8
 800c454:	2b00      	cmp	r3, #0
 800c456:	d062      	beq.n	800c51e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	695b      	ldr	r3, [r3, #20]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d038      	beq.n	800c4d2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d108      	bne.n	800c47a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800c468:	4b28      	ldr	r3, [pc, #160]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c46a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c46e:	4a27      	ldr	r2, [pc, #156]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c470:	f023 0310 	bic.w	r3, r3, #16
 800c474:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c478:	e007      	b.n	800c48a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800c47a:	4b24      	ldr	r3, [pc, #144]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c47c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c480:	4a22      	ldr	r2, [pc, #136]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c482:	f043 0310 	orr.w	r3, r3, #16
 800c486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c48a:	4b20      	ldr	r3, [pc, #128]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c48c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c490:	4a1e      	ldr	r2, [pc, #120]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c49a:	f7fd f845 	bl	8009528 <HAL_GetTick>
 800c49e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4a0:	e00f      	b.n	800c4c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4a2:	f7fd f841 	bl	8009528 <HAL_GetTick>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	2b07      	cmp	r3, #7
 800c4ae:	d908      	bls.n	800c4c2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4b0:	4b16      	ldr	r3, [pc, #88]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c4b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4b6:	f003 0302 	and.w	r3, r3, #2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e294      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4c2:	4b12      	ldr	r3, [pc, #72]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c4c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4c8:	f003 0302 	and.w	r3, r3, #2
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d0e8      	beq.n	800c4a2 <HAL_RCC_OscConfig+0x44e>
 800c4d0:	e025      	b.n	800c51e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4d2:	4b0e      	ldr	r3, [pc, #56]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c4d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4d8:	4a0c      	ldr	r2, [pc, #48]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c4da:	f023 0301 	bic.w	r3, r3, #1
 800c4de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4e2:	f7fd f821 	bl	8009528 <HAL_GetTick>
 800c4e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4e8:	e012      	b.n	800c510 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4ea:	f7fd f81d 	bl	8009528 <HAL_GetTick>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	2b07      	cmp	r3, #7
 800c4f6:	d90b      	bls.n	800c510 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4f8:	4b04      	ldr	r3, [pc, #16]	; (800c50c <HAL_RCC_OscConfig+0x4b8>)
 800c4fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4fe:	f003 0302 	and.w	r3, r3, #2
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800c506:	2303      	movs	r3, #3
 800c508:	e270      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
 800c50a:	bf00      	nop
 800c50c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c510:	4ba8      	ldr	r3, [pc, #672]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c516:	f003 0302 	and.w	r3, r3, #2
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1e5      	bne.n	800c4ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 0304 	and.w	r3, r3, #4
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 812d 	beq.w	800c786 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c52c:	2300      	movs	r3, #0
 800c52e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c530:	4ba0      	ldr	r3, [pc, #640]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10d      	bne.n	800c558 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c53c:	4b9d      	ldr	r3, [pc, #628]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c53e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c540:	4a9c      	ldr	r2, [pc, #624]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c546:	6593      	str	r3, [r2, #88]	; 0x58
 800c548:	4b9a      	ldr	r3, [pc, #616]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c54c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c550:	60bb      	str	r3, [r7, #8]
 800c552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c554:	2301      	movs	r3, #1
 800c556:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c558:	4b97      	ldr	r3, [pc, #604]	; (800c7b8 <HAL_RCC_OscConfig+0x764>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c560:	2b00      	cmp	r3, #0
 800c562:	d11e      	bne.n	800c5a2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c564:	4b94      	ldr	r3, [pc, #592]	; (800c7b8 <HAL_RCC_OscConfig+0x764>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a93      	ldr	r2, [pc, #588]	; (800c7b8 <HAL_RCC_OscConfig+0x764>)
 800c56a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c56e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c570:	f7fc ffda 	bl	8009528 <HAL_GetTick>
 800c574:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c576:	e00e      	b.n	800c596 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c578:	f7fc ffd6 	bl	8009528 <HAL_GetTick>
 800c57c:	4602      	mov	r2, r0
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	2b02      	cmp	r3, #2
 800c584:	d907      	bls.n	800c596 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c586:	4b8c      	ldr	r3, [pc, #560]	; (800c7b8 <HAL_RCC_OscConfig+0x764>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e22a      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c596:	4b88      	ldr	r3, [pc, #544]	; (800c7b8 <HAL_RCC_OscConfig+0x764>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0ea      	beq.n	800c578 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f003 0301 	and.w	r3, r3, #1
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d01f      	beq.n	800c5ee <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	f003 0304 	and.w	r3, r3, #4
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d010      	beq.n	800c5dc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c5ba:	4b7e      	ldr	r3, [pc, #504]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5c0:	4a7c      	ldr	r2, [pc, #496]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c5c2:	f043 0304 	orr.w	r3, r3, #4
 800c5c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c5ca:	4b7a      	ldr	r3, [pc, #488]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d0:	4a78      	ldr	r2, [pc, #480]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c5d2:	f043 0301 	orr.w	r3, r3, #1
 800c5d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5da:	e018      	b.n	800c60e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c5dc:	4b75      	ldr	r3, [pc, #468]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c5de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5e2:	4a74      	ldr	r2, [pc, #464]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c5e4:	f043 0301 	orr.w	r3, r3, #1
 800c5e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5ec:	e00f      	b.n	800c60e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c5ee:	4b71      	ldr	r3, [pc, #452]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5f4:	4a6f      	ldr	r2, [pc, #444]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c5f6:	f023 0301 	bic.w	r3, r3, #1
 800c5fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c5fe:	4b6d      	ldr	r3, [pc, #436]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c604:	4a6b      	ldr	r2, [pc, #428]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c606:	f023 0304 	bic.w	r3, r3, #4
 800c60a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d068      	beq.n	800c6e8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c616:	f7fc ff87 	bl	8009528 <HAL_GetTick>
 800c61a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c61c:	e011      	b.n	800c642 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c61e:	f7fc ff83 	bl	8009528 <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	f241 3288 	movw	r2, #5000	; 0x1388
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d908      	bls.n	800c642 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c630:	4b60      	ldr	r3, [pc, #384]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c636:	f003 0302 	and.w	r3, r3, #2
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e1d4      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c642:	4b5c      	ldr	r3, [pc, #368]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c648:	f003 0302 	and.w	r3, r3, #2
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0e6      	beq.n	800c61e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d022      	beq.n	800c6a2 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c65c:	4b55      	ldr	r3, [pc, #340]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c65e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c662:	4a54      	ldr	r2, [pc, #336]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c66c:	e011      	b.n	800c692 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c66e:	f7fc ff5b 	bl	8009528 <HAL_GetTick>
 800c672:	4602      	mov	r2, r0
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	f241 3288 	movw	r2, #5000	; 0x1388
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d908      	bls.n	800c692 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c680:	4b4c      	ldr	r3, [pc, #304]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e1ac      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c692:	4b48      	ldr	r3, [pc, #288]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d0e6      	beq.n	800c66e <HAL_RCC_OscConfig+0x61a>
 800c6a0:	e068      	b.n	800c774 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c6a2:	4b44      	ldr	r3, [pc, #272]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6a8:	4a42      	ldr	r2, [pc, #264]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c6aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c6b2:	e011      	b.n	800c6d8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6b4:	f7fc ff38 	bl	8009528 <HAL_GetTick>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d908      	bls.n	800c6d8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c6c6:	4b3b      	ldr	r3, [pc, #236]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d001      	beq.n	800c6d8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	e189      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c6d8:	4b36      	ldr	r3, [pc, #216]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1e6      	bne.n	800c6b4 <HAL_RCC_OscConfig+0x660>
 800c6e6:	e045      	b.n	800c774 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6e8:	f7fc ff1e 	bl	8009528 <HAL_GetTick>
 800c6ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6ee:	e011      	b.n	800c714 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6f0:	f7fc ff1a 	bl	8009528 <HAL_GetTick>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d908      	bls.n	800c714 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c702:	4b2c      	ldr	r3, [pc, #176]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d001      	beq.n	800c714 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800c710:	2303      	movs	r3, #3
 800c712:	e16b      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c714:	4b27      	ldr	r3, [pc, #156]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c71a:	f003 0302 	and.w	r3, r3, #2
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1e6      	bne.n	800c6f0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c722:	4b24      	ldr	r3, [pc, #144]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d021      	beq.n	800c774 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c730:	4b20      	ldr	r3, [pc, #128]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c736:	4a1f      	ldr	r2, [pc, #124]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c73c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c740:	e011      	b.n	800c766 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c742:	f7fc fef1 	bl	8009528 <HAL_GetTick>
 800c746:	4602      	mov	r2, r0
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c750:	4293      	cmp	r3, r2
 800c752:	d908      	bls.n	800c766 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c754:	4b17      	ldr	r3, [pc, #92]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c75a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e142      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c766:	4b13      	ldr	r3, [pc, #76]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1e6      	bne.n	800c742 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c774:	7ffb      	ldrb	r3, [r7, #31]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d105      	bne.n	800c786 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c77a:	4b0e      	ldr	r3, [pc, #56]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c77e:	4a0d      	ldr	r2, [pc, #52]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c784:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 0320 	and.w	r3, r3, #32
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d04f      	beq.n	800c832 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c796:	2b00      	cmp	r3, #0
 800c798:	d028      	beq.n	800c7ec <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c79a:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c79c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7a0:	4a04      	ldr	r2, [pc, #16]	; (800c7b4 <HAL_RCC_OscConfig+0x760>)
 800c7a2:	f043 0301 	orr.w	r3, r3, #1
 800c7a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7aa:	f7fc febd 	bl	8009528 <HAL_GetTick>
 800c7ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c7b0:	e014      	b.n	800c7dc <HAL_RCC_OscConfig+0x788>
 800c7b2:	bf00      	nop
 800c7b4:	40021000 	.word	0x40021000
 800c7b8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c7bc:	f7fc feb4 	bl	8009528 <HAL_GetTick>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d908      	bls.n	800c7dc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c7ca:	4b8a      	ldr	r3, [pc, #552]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c7cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e107      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c7dc:	4b85      	ldr	r3, [pc, #532]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c7de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7e2:	f003 0302 	and.w	r3, r3, #2
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d0e8      	beq.n	800c7bc <HAL_RCC_OscConfig+0x768>
 800c7ea:	e022      	b.n	800c832 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c7ec:	4b81      	ldr	r3, [pc, #516]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c7ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7f2:	4a80      	ldr	r2, [pc, #512]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c7f4:	f023 0301 	bic.w	r3, r3, #1
 800c7f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7fc:	f7fc fe94 	bl	8009528 <HAL_GetTick>
 800c800:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c802:	e00f      	b.n	800c824 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c804:	f7fc fe90 	bl	8009528 <HAL_GetTick>
 800c808:	4602      	mov	r2, r0
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d908      	bls.n	800c824 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c812:	4b78      	ldr	r3, [pc, #480]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c818:	f003 0302 	and.w	r3, r3, #2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800c820:	2303      	movs	r3, #3
 800c822:	e0e3      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c824:	4b73      	ldr	r3, [pc, #460]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c82a:	f003 0302 	and.w	r3, r3, #2
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1e8      	bne.n	800c804 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c836:	2b00      	cmp	r3, #0
 800c838:	f000 80d7 	beq.w	800c9ea <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c83c:	4b6d      	ldr	r3, [pc, #436]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	f003 030c 	and.w	r3, r3, #12
 800c844:	2b0c      	cmp	r3, #12
 800c846:	f000 8091 	beq.w	800c96c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d166      	bne.n	800c920 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c852:	4b68      	ldr	r3, [pc, #416]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a67      	ldr	r2, [pc, #412]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c85c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c85e:	f7fc fe63 	bl	8009528 <HAL_GetTick>
 800c862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c864:	e00e      	b.n	800c884 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c866:	f7fc fe5f 	bl	8009528 <HAL_GetTick>
 800c86a:	4602      	mov	r2, r0
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	2b02      	cmp	r3, #2
 800c872:	d907      	bls.n	800c884 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c874:	4b5f      	ldr	r3, [pc, #380]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800c880:	2303      	movs	r3, #3
 800c882:	e0b3      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c884:	4b5b      	ldr	r3, [pc, #364]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1ea      	bne.n	800c866 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c890:	4b58      	ldr	r3, [pc, #352]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c892:	68da      	ldr	r2, [r3, #12]
 800c894:	4b58      	ldr	r3, [pc, #352]	; (800c9f8 <HAL_RCC_OscConfig+0x9a4>)
 800c896:	4013      	ands	r3, r2
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c8a0:	3a01      	subs	r2, #1
 800c8a2:	0112      	lsls	r2, r2, #4
 800c8a4:	4311      	orrs	r1, r2
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c8aa:	0212      	lsls	r2, r2, #8
 800c8ac:	4311      	orrs	r1, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c8b2:	0852      	lsrs	r2, r2, #1
 800c8b4:	3a01      	subs	r2, #1
 800c8b6:	0552      	lsls	r2, r2, #21
 800c8b8:	4311      	orrs	r1, r2
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c8be:	0852      	lsrs	r2, r2, #1
 800c8c0:	3a01      	subs	r2, #1
 800c8c2:	0652      	lsls	r2, r2, #25
 800c8c4:	4311      	orrs	r1, r2
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c8ca:	06d2      	lsls	r2, r2, #27
 800c8cc:	430a      	orrs	r2, r1
 800c8ce:	4949      	ldr	r1, [pc, #292]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8d4:	4b47      	ldr	r3, [pc, #284]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a46      	ldr	r2, [pc, #280]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c8da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c8e0:	4b44      	ldr	r3, [pc, #272]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	4a43      	ldr	r2, [pc, #268]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c8e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ec:	f7fc fe1c 	bl	8009528 <HAL_GetTick>
 800c8f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8f2:	e00e      	b.n	800c912 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8f4:	f7fc fe18 	bl	8009528 <HAL_GetTick>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d907      	bls.n	800c912 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c902:	4b3c      	ldr	r3, [pc, #240]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800c90e:	2303      	movs	r3, #3
 800c910:	e06c      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c912:	4b38      	ldr	r3, [pc, #224]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d0ea      	beq.n	800c8f4 <HAL_RCC_OscConfig+0x8a0>
 800c91e:	e064      	b.n	800c9ea <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c920:	4b34      	ldr	r3, [pc, #208]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a33      	ldr	r2, [pc, #204]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c92a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c92c:	f7fc fdfc 	bl	8009528 <HAL_GetTick>
 800c930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c932:	e00e      	b.n	800c952 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c934:	f7fc fdf8 	bl	8009528 <HAL_GetTick>
 800c938:	4602      	mov	r2, r0
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d907      	bls.n	800c952 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c942:	4b2c      	ldr	r3, [pc, #176]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800c94e:	2303      	movs	r3, #3
 800c950:	e04c      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c952:	4b28      	ldr	r3, [pc, #160]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1ea      	bne.n	800c934 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c95e:	4b25      	ldr	r3, [pc, #148]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c960:	68da      	ldr	r2, [r3, #12]
 800c962:	4924      	ldr	r1, [pc, #144]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c964:	4b25      	ldr	r3, [pc, #148]	; (800c9fc <HAL_RCC_OscConfig+0x9a8>)
 800c966:	4013      	ands	r3, r2
 800c968:	60cb      	str	r3, [r1, #12]
 800c96a:	e03e      	b.n	800c9ea <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c970:	2b01      	cmp	r3, #1
 800c972:	d101      	bne.n	800c978 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e039      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800c978:	4b1e      	ldr	r3, [pc, #120]	; (800c9f4 <HAL_RCC_OscConfig+0x9a0>)
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f003 0203 	and.w	r2, r3, #3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c988:	429a      	cmp	r2, r3
 800c98a:	d12c      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c996:	3b01      	subs	r3, #1
 800c998:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d123      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d11b      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b8:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d113      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c8:	085b      	lsrs	r3, r3, #1
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d109      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9dc:	085b      	lsrs	r3, r3, #1
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d001      	beq.n	800c9ea <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e000      	b.n	800c9ec <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	40021000 	.word	0x40021000
 800c9f8:	019f800c 	.word	0x019f800c
 800c9fc:	feeefffc 	.word	0xfeeefffc

0800ca00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d101      	bne.n	800ca18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e11c      	b.n	800cc52 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca18:	4b90      	ldr	r3, [pc, #576]	; (800cc5c <HAL_RCC_ClockConfig+0x25c>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 030f 	and.w	r3, r3, #15
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d910      	bls.n	800ca48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca26:	4b8d      	ldr	r3, [pc, #564]	; (800cc5c <HAL_RCC_ClockConfig+0x25c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f023 020f 	bic.w	r2, r3, #15
 800ca2e:	498b      	ldr	r1, [pc, #556]	; (800cc5c <HAL_RCC_ClockConfig+0x25c>)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca36:	4b89      	ldr	r3, [pc, #548]	; (800cc5c <HAL_RCC_ClockConfig+0x25c>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 030f 	and.w	r3, r3, #15
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d001      	beq.n	800ca48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	e104      	b.n	800cc52 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 0302 	and.w	r3, r3, #2
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d010      	beq.n	800ca76 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	4b81      	ldr	r3, [pc, #516]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d908      	bls.n	800ca76 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca64:	4b7e      	ldr	r3, [pc, #504]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	497b      	ldr	r1, [pc, #492]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800ca72:	4313      	orrs	r3, r2
 800ca74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 0301 	and.w	r3, r3, #1
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 8085 	beq.w	800cb8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	2b03      	cmp	r3, #3
 800ca8a:	d11f      	bne.n	800cacc <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ca8c:	4b74      	ldr	r3, [pc, #464]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d101      	bne.n	800ca9c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e0da      	b.n	800cc52 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ca9c:	f000 fa58 	bl	800cf50 <RCC_GetSysClockFreqFromPLLSource>
 800caa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	4a6f      	ldr	r2, [pc, #444]	; (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d947      	bls.n	800cb3a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800caaa:	4b6d      	ldr	r3, [pc, #436]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d141      	bne.n	800cb3a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cab6:	4b6a      	ldr	r3, [pc, #424]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cabe:	4a68      	ldr	r2, [pc, #416]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cac4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cac6:	2380      	movs	r3, #128	; 0x80
 800cac8:	617b      	str	r3, [r7, #20]
 800caca:	e036      	b.n	800cb3a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d107      	bne.n	800cae4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cad4:	4b62      	ldr	r3, [pc, #392]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d115      	bne.n	800cb0c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e0b6      	b.n	800cc52 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d107      	bne.n	800cafc <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800caec:	4b5c      	ldr	r3, [pc, #368]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d109      	bne.n	800cb0c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e0aa      	b.n	800cc52 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cafc:	4b58      	ldr	r3, [pc, #352]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d101      	bne.n	800cb0c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e0a2      	b.n	800cc52 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cb0c:	f000 f8b0 	bl	800cc70 <HAL_RCC_GetSysClockFreq>
 800cb10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	4a53      	ldr	r2, [pc, #332]	; (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d90f      	bls.n	800cb3a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800cb1a:	4b51      	ldr	r3, [pc, #324]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d109      	bne.n	800cb3a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cb26:	4b4e      	ldr	r3, [pc, #312]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb2e:	4a4c      	ldr	r2, [pc, #304]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cb36:	2380      	movs	r3, #128	; 0x80
 800cb38:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cb3a:	4b49      	ldr	r3, [pc, #292]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f023 0203 	bic.w	r2, r3, #3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	4946      	ldr	r1, [pc, #280]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb4c:	f7fc fcec 	bl	8009528 <HAL_GetTick>
 800cb50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb52:	e013      	b.n	800cb7c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb54:	f7fc fce8 	bl	8009528 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d90a      	bls.n	800cb7c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb66:	4b3e      	ldr	r3, [pc, #248]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	f003 020c 	and.w	r2, r3, #12
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d001      	beq.n	800cb7c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	e06a      	b.n	800cc52 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb7c:	4b38      	ldr	r3, [pc, #224]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	f003 020c 	and.w	r2, r3, #12
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d1e2      	bne.n	800cb54 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	2b80      	cmp	r3, #128	; 0x80
 800cb92:	d105      	bne.n	800cba0 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cb94:	4b32      	ldr	r3, [pc, #200]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	4a31      	ldr	r2, [pc, #196]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cb9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb9e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 0302 	and.w	r3, r3, #2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d010      	beq.n	800cbce <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	689a      	ldr	r2, [r3, #8]
 800cbb0:	4b2b      	ldr	r3, [pc, #172]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d208      	bcs.n	800cbce <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbbc:	4b28      	ldr	r3, [pc, #160]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	4925      	ldr	r1, [pc, #148]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cbce:	4b23      	ldr	r3, [pc, #140]	; (800cc5c <HAL_RCC_ClockConfig+0x25c>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 030f 	and.w	r3, r3, #15
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d210      	bcs.n	800cbfe <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbdc:	4b1f      	ldr	r3, [pc, #124]	; (800cc5c <HAL_RCC_ClockConfig+0x25c>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f023 020f 	bic.w	r2, r3, #15
 800cbe4:	491d      	ldr	r1, [pc, #116]	; (800cc5c <HAL_RCC_ClockConfig+0x25c>)
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbec:	4b1b      	ldr	r3, [pc, #108]	; (800cc5c <HAL_RCC_ClockConfig+0x25c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 030f 	and.w	r3, r3, #15
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d001      	beq.n	800cbfe <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e029      	b.n	800cc52 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0304 	and.w	r3, r3, #4
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d008      	beq.n	800cc1c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc0a:	4b15      	ldr	r3, [pc, #84]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	4912      	ldr	r1, [pc, #72]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0308 	and.w	r3, r3, #8
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d009      	beq.n	800cc3c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc28:	4b0d      	ldr	r3, [pc, #52]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	490a      	ldr	r1, [pc, #40]	; (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cc3c:	f000 f8b6 	bl	800cdac <HAL_RCC_GetHCLKFreq>
 800cc40:	4603      	mov	r3, r0
 800cc42:	4a09      	ldr	r2, [pc, #36]	; (800cc68 <HAL_RCC_ClockConfig+0x268>)
 800cc44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cc46:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <HAL_RCC_ClockConfig+0x26c>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fc fa54 	bl	80090f8 <HAL_InitTick>
 800cc50:	4603      	mov	r3, r0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3718      	adds	r7, #24
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	40022000 	.word	0x40022000
 800cc60:	40021000 	.word	0x40021000
 800cc64:	04c4b400 	.word	0x04c4b400
 800cc68:	20000048 	.word	0x20000048
 800cc6c:	2000004c 	.word	0x2000004c

0800cc70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b089      	sub	sp, #36	; 0x24
 800cc74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800cc76:	2300      	movs	r3, #0
 800cc78:	61fb      	str	r3, [r7, #28]
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc7e:	4b47      	ldr	r3, [pc, #284]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f003 030c 	and.w	r3, r3, #12
 800cc86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cc88:	4b44      	ldr	r3, [pc, #272]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	f003 0303 	and.w	r3, r3, #3
 800cc90:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d005      	beq.n	800cca4 <HAL_RCC_GetSysClockFreq+0x34>
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	2b0c      	cmp	r3, #12
 800cc9c:	d121      	bne.n	800cce2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d11e      	bne.n	800cce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800cca4:	4b3d      	ldr	r3, [pc, #244]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f003 0308 	and.w	r3, r3, #8
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d107      	bne.n	800ccc0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ccb0:	4b3a      	ldr	r3, [pc, #232]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ccb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccb6:	0a1b      	lsrs	r3, r3, #8
 800ccb8:	f003 030f 	and.w	r3, r3, #15
 800ccbc:	61fb      	str	r3, [r7, #28]
 800ccbe:	e005      	b.n	800cccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ccc0:	4b36      	ldr	r3, [pc, #216]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	091b      	lsrs	r3, r3, #4
 800ccc6:	f003 030f 	and.w	r3, r3, #15
 800ccca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800cccc:	4a34      	ldr	r2, [pc, #208]	; (800cda0 <HAL_RCC_GetSysClockFreq+0x130>)
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10d      	bne.n	800ccf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cce0:	e00a      	b.n	800ccf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2b04      	cmp	r3, #4
 800cce6:	d102      	bne.n	800ccee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cce8:	4b2e      	ldr	r3, [pc, #184]	; (800cda4 <HAL_RCC_GetSysClockFreq+0x134>)
 800ccea:	61bb      	str	r3, [r7, #24]
 800ccec:	e004      	b.n	800ccf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b08      	cmp	r3, #8
 800ccf2:	d101      	bne.n	800ccf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ccf4:	4b2c      	ldr	r3, [pc, #176]	; (800cda8 <HAL_RCC_GetSysClockFreq+0x138>)
 800ccf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	2b0c      	cmp	r3, #12
 800ccfc:	d146      	bne.n	800cd8c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800ccfe:	4b27      	ldr	r3, [pc, #156]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	f003 0303 	and.w	r3, r3, #3
 800cd06:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cd08:	4b24      	ldr	r3, [pc, #144]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	091b      	lsrs	r3, r3, #4
 800cd0e:	f003 030f 	and.w	r3, r3, #15
 800cd12:	3301      	adds	r3, #1
 800cd14:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d003      	beq.n	800cd24 <HAL_RCC_GetSysClockFreq+0xb4>
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2b03      	cmp	r3, #3
 800cd20:	d00d      	beq.n	800cd3e <HAL_RCC_GetSysClockFreq+0xce>
 800cd22:	e019      	b.n	800cd58 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cd24:	4a1f      	ldr	r2, [pc, #124]	; (800cda4 <HAL_RCC_GetSysClockFreq+0x134>)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd2c:	4a1b      	ldr	r2, [pc, #108]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cd2e:	68d2      	ldr	r2, [r2, #12]
 800cd30:	0a12      	lsrs	r2, r2, #8
 800cd32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd36:	fb02 f303 	mul.w	r3, r2, r3
 800cd3a:	617b      	str	r3, [r7, #20]
        break;
 800cd3c:	e019      	b.n	800cd72 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cd3e:	4a1a      	ldr	r2, [pc, #104]	; (800cda8 <HAL_RCC_GetSysClockFreq+0x138>)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd46:	4a15      	ldr	r2, [pc, #84]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cd48:	68d2      	ldr	r2, [r2, #12]
 800cd4a:	0a12      	lsrs	r2, r2, #8
 800cd4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd50:	fb02 f303 	mul.w	r3, r2, r3
 800cd54:	617b      	str	r3, [r7, #20]
        break;
 800cd56:	e00c      	b.n	800cd72 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cd58:	69fa      	ldr	r2, [r7, #28]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd60:	4a0e      	ldr	r2, [pc, #56]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cd62:	68d2      	ldr	r2, [r2, #12]
 800cd64:	0a12      	lsrs	r2, r2, #8
 800cd66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd6a:	fb02 f303 	mul.w	r3, r2, r3
 800cd6e:	617b      	str	r3, [r7, #20]
        break;
 800cd70:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800cd72:	4b0a      	ldr	r3, [pc, #40]	; (800cd9c <HAL_RCC_GetSysClockFreq+0x12c>)
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	0e5b      	lsrs	r3, r3, #25
 800cd78:	f003 0303 	and.w	r3, r3, #3
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cd8c:	69bb      	ldr	r3, [r7, #24]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3724      	adds	r7, #36	; 0x24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	40021000 	.word	0x40021000
 800cda0:	080166ec 	.word	0x080166ec
 800cda4:	00f42400 	.word	0x00f42400
 800cda8:	007a1200 	.word	0x007a1200

0800cdac <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800cdb0:	f7ff ff5e 	bl	800cc70 <HAL_RCC_GetSysClockFreq>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	4b05      	ldr	r3, [pc, #20]	; (800cdcc <HAL_RCC_GetHCLKFreq+0x20>)
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	091b      	lsrs	r3, r3, #4
 800cdbc:	f003 030f 	and.w	r3, r3, #15
 800cdc0:	4903      	ldr	r1, [pc, #12]	; (800cdd0 <HAL_RCC_GetHCLKFreq+0x24>)
 800cdc2:	5ccb      	ldrb	r3, [r1, r3]
 800cdc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	40021000 	.word	0x40021000
 800cdd0:	080166d4 	.word	0x080166d4

0800cdd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cdd8:	f7ff ffe8 	bl	800cdac <HAL_RCC_GetHCLKFreq>
 800cddc:	4602      	mov	r2, r0
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	0a1b      	lsrs	r3, r3, #8
 800cde4:	f003 0307 	and.w	r3, r3, #7
 800cde8:	4903      	ldr	r1, [pc, #12]	; (800cdf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cdea:	5ccb      	ldrb	r3, [r1, r3]
 800cdec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	40021000 	.word	0x40021000
 800cdf8:	080166e4 	.word	0x080166e4

0800cdfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ce00:	f7ff ffd4 	bl	800cdac <HAL_RCC_GetHCLKFreq>
 800ce04:	4602      	mov	r2, r0
 800ce06:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	0adb      	lsrs	r3, r3, #11
 800ce0c:	f003 0307 	and.w	r3, r3, #7
 800ce10:	4903      	ldr	r1, [pc, #12]	; (800ce20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce12:	5ccb      	ldrb	r3, [r1, r3]
 800ce14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	40021000 	.word	0x40021000
 800ce20:	080166e4 	.word	0x080166e4

0800ce24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	220f      	movs	r2, #15
 800ce32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ce34:	4b12      	ldr	r3, [pc, #72]	; (800ce80 <HAL_RCC_GetClockConfig+0x5c>)
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	f003 0203 	and.w	r2, r3, #3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ce40:	4b0f      	ldr	r3, [pc, #60]	; (800ce80 <HAL_RCC_GetClockConfig+0x5c>)
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ce4c:	4b0c      	ldr	r3, [pc, #48]	; (800ce80 <HAL_RCC_GetClockConfig+0x5c>)
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ce58:	4b09      	ldr	r3, [pc, #36]	; (800ce80 <HAL_RCC_GetClockConfig+0x5c>)
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	08db      	lsrs	r3, r3, #3
 800ce5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ce66:	4b07      	ldr	r3, [pc, #28]	; (800ce84 <HAL_RCC_GetClockConfig+0x60>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 020f 	and.w	r2, r3, #15
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	601a      	str	r2, [r3, #0]
}
 800ce72:	bf00      	nop
 800ce74:	370c      	adds	r7, #12
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	40021000 	.word	0x40021000
 800ce84:	40022000 	.word	0x40022000

0800ce88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ce90:	2300      	movs	r3, #0
 800ce92:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ce94:	4b2c      	ldr	r3, [pc, #176]	; (800cf48 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ce96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d003      	beq.n	800cea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cea0:	f7ff f83a 	bl	800bf18 <HAL_PWREx_GetVoltageRange>
 800cea4:	6138      	str	r0, [r7, #16]
 800cea6:	e014      	b.n	800ced2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cea8:	4b27      	ldr	r3, [pc, #156]	; (800cf48 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ceaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceac:	4a26      	ldr	r2, [pc, #152]	; (800cf48 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ceae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceb2:	6593      	str	r3, [r2, #88]	; 0x58
 800ceb4:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ceb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cebc:	60fb      	str	r3, [r7, #12]
 800cebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cec0:	f7ff f82a 	bl	800bf18 <HAL_PWREx_GetVoltageRange>
 800cec4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cec6:	4b20      	ldr	r3, [pc, #128]	; (800cf48 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800cec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceca:	4a1f      	ldr	r2, [pc, #124]	; (800cf48 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800cecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ced0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d003      	beq.n	800cee0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cede:	d10b      	bne.n	800cef8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b80      	cmp	r3, #128	; 0x80
 800cee4:	d919      	bls.n	800cf1a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2ba0      	cmp	r3, #160	; 0xa0
 800ceea:	d902      	bls.n	800cef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ceec:	2302      	movs	r3, #2
 800ceee:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800cef0:	e013      	b.n	800cf1a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cef2:	2301      	movs	r3, #1
 800cef4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800cef6:	e010      	b.n	800cf1a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b80      	cmp	r3, #128	; 0x80
 800cefc:	d902      	bls.n	800cf04 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cefe:	2303      	movs	r3, #3
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	e00a      	b.n	800cf1a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b80      	cmp	r3, #128	; 0x80
 800cf08:	d102      	bne.n	800cf10 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	617b      	str	r3, [r7, #20]
 800cf0e:	e004      	b.n	800cf1a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b70      	cmp	r3, #112	; 0x70
 800cf14:	d101      	bne.n	800cf1a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cf16:	2301      	movs	r3, #1
 800cf18:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cf1a:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f023 020f 	bic.w	r2, r3, #15
 800cf22:	490a      	ldr	r1, [pc, #40]	; (800cf4c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800cf2a:	4b08      	ldr	r3, [pc, #32]	; (800cf4c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f003 030f 	and.w	r3, r3, #15
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d001      	beq.n	800cf3c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e000      	b.n	800cf3e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	40021000 	.word	0x40021000
 800cf4c:	40022000 	.word	0x40022000

0800cf50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cf56:	4b31      	ldr	r3, [pc, #196]	; (800d01c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	f003 0303 	and.w	r3, r3, #3
 800cf5e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cf60:	4b2e      	ldr	r3, [pc, #184]	; (800d01c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	091b      	lsrs	r3, r3, #4
 800cf66:	f003 030f 	and.w	r3, r3, #15
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2b03      	cmp	r3, #3
 800cf72:	d015      	beq.n	800cfa0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d839      	bhi.n	800cfee <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d01c      	beq.n	800cfba <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d133      	bne.n	800cfee <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf86:	4a26      	ldr	r2, [pc, #152]	; (800d020 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf8e:	4a23      	ldr	r2, [pc, #140]	; (800d01c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800cf90:	68d2      	ldr	r2, [r2, #12]
 800cf92:	0a12      	lsrs	r2, r2, #8
 800cf94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf98:	fb02 f303 	mul.w	r3, r2, r3
 800cf9c:	613b      	str	r3, [r7, #16]
      break;
 800cf9e:	e029      	b.n	800cff4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cfa0:	4a20      	ldr	r2, [pc, #128]	; (800d024 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfa8:	4a1c      	ldr	r2, [pc, #112]	; (800d01c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800cfaa:	68d2      	ldr	r2, [r2, #12]
 800cfac:	0a12      	lsrs	r2, r2, #8
 800cfae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cfb2:	fb02 f303 	mul.w	r3, r2, r3
 800cfb6:	613b      	str	r3, [r7, #16]
      break;
 800cfb8:	e01c      	b.n	800cff4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800cfba:	4b18      	ldr	r3, [pc, #96]	; (800d01c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0308 	and.w	r3, r3, #8
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d107      	bne.n	800cfd6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800cfc6:	4b15      	ldr	r3, [pc, #84]	; (800d01c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800cfc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfcc:	0a1b      	lsrs	r3, r3, #8
 800cfce:	f003 030f 	and.w	r3, r3, #15
 800cfd2:	617b      	str	r3, [r7, #20]
 800cfd4:	e005      	b.n	800cfe2 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800cfd6:	4b11      	ldr	r3, [pc, #68]	; (800d01c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	091b      	lsrs	r3, r3, #4
 800cfdc:	f003 030f 	and.w	r3, r3, #15
 800cfe0:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800cfe2:	4a11      	ldr	r2, [pc, #68]	; (800d028 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfea:	613b      	str	r3, [r7, #16]
        break;
 800cfec:	e002      	b.n	800cff4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
      break;
 800cff2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800cff4:	4b09      	ldr	r3, [pc, #36]	; (800d01c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	0e5b      	lsrs	r3, r3, #25
 800cffa:	f003 0303 	and.w	r3, r3, #3
 800cffe:	3301      	adds	r3, #1
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	fbb2 f3f3 	udiv	r3, r2, r3
 800d00c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800d00e:	683b      	ldr	r3, [r7, #0]
}
 800d010:	4618      	mov	r0, r3
 800d012:	371c      	adds	r7, #28
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	40021000 	.word	0x40021000
 800d020:	00f42400 	.word	0x00f42400
 800d024:	007a1200 	.word	0x007a1200
 800d028:	080166ec 	.word	0x080166ec

0800d02c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d034:	2300      	movs	r3, #0
 800d036:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d038:	2300      	movs	r3, #0
 800d03a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d044:	2b00      	cmp	r3, #0
 800d046:	d040      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d04c:	2b80      	cmp	r3, #128	; 0x80
 800d04e:	d02a      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d050:	2b80      	cmp	r3, #128	; 0x80
 800d052:	d825      	bhi.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d054:	2b60      	cmp	r3, #96	; 0x60
 800d056:	d026      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d058:	2b60      	cmp	r3, #96	; 0x60
 800d05a:	d821      	bhi.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d05c:	2b40      	cmp	r3, #64	; 0x40
 800d05e:	d006      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800d060:	2b40      	cmp	r3, #64	; 0x40
 800d062:	d81d      	bhi.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d064:	2b00      	cmp	r3, #0
 800d066:	d009      	beq.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x50>
 800d068:	2b20      	cmp	r3, #32
 800d06a:	d010      	beq.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d06c:	e018      	b.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d06e:	4b8f      	ldr	r3, [pc, #572]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	4a8e      	ldr	r2, [pc, #568]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d078:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d07a:	e015      	b.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3304      	adds	r3, #4
 800d080:	2100      	movs	r1, #0
 800d082:	4618      	mov	r0, r3
 800d084:	f000 fb56 	bl	800d734 <RCCEx_PLLSAI1_Config>
 800d088:	4603      	mov	r3, r0
 800d08a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d08c:	e00c      	b.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3320      	adds	r3, #32
 800d092:	2100      	movs	r1, #0
 800d094:	4618      	mov	r0, r3
 800d096:	f000 fc33 	bl	800d900 <RCCEx_PLLSAI2_Config>
 800d09a:	4603      	mov	r3, r0
 800d09c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d09e:	e003      	b.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	77fb      	strb	r3, [r7, #31]
        break;
 800d0a4:	e000      	b.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800d0a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0a8:	7ffb      	ldrb	r3, [r7, #31]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10b      	bne.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d0ae:	4b7f      	ldr	r3, [pc, #508]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d0b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d0b4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0bc:	497b      	ldr	r1, [pc, #492]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d0c4:	e001      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0c6:	7ffb      	ldrb	r3, [r7, #31]
 800d0c8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d047      	beq.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0de:	d030      	beq.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800d0e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0e4:	d82a      	bhi.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d0e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0ea:	d02a      	beq.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800d0ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0f0:	d824      	bhi.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d0f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0f6:	d008      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800d0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0fc:	d81e      	bhi.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00a      	beq.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800d102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d106:	d010      	beq.n	800d12a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d108:	e018      	b.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d10a:	4b68      	ldr	r3, [pc, #416]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	4a67      	ldr	r2, [pc, #412]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d114:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d116:	e015      	b.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	3304      	adds	r3, #4
 800d11c:	2100      	movs	r1, #0
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 fb08 	bl	800d734 <RCCEx_PLLSAI1_Config>
 800d124:	4603      	mov	r3, r0
 800d126:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d128:	e00c      	b.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3320      	adds	r3, #32
 800d12e:	2100      	movs	r1, #0
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fbe5 	bl	800d900 <RCCEx_PLLSAI2_Config>
 800d136:	4603      	mov	r3, r0
 800d138:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d13a:	e003      	b.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d13c:	2301      	movs	r3, #1
 800d13e:	77fb      	strb	r3, [r7, #31]
        break;
 800d140:	e000      	b.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800d142:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d144:	7ffb      	ldrb	r3, [r7, #31]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10b      	bne.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d14a:	4b58      	ldr	r3, [pc, #352]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d14c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d158:	4954      	ldr	r1, [pc, #336]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d15a:	4313      	orrs	r3, r2
 800d15c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d160:	e001      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d162:	7ffb      	ldrb	r3, [r7, #31]
 800d164:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 80ab 	beq.w	800d2ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d174:	2300      	movs	r3, #0
 800d176:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d178:	4b4c      	ldr	r3, [pc, #304]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d17a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d17c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10d      	bne.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d184:	4b49      	ldr	r3, [pc, #292]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d188:	4a48      	ldr	r2, [pc, #288]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d18a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d18e:	6593      	str	r3, [r2, #88]	; 0x58
 800d190:	4b46      	ldr	r3, [pc, #280]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d19c:	2301      	movs	r3, #1
 800d19e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d1a0:	4b43      	ldr	r3, [pc, #268]	; (800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a42      	ldr	r2, [pc, #264]	; (800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800d1a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d1ac:	f7fc f9bc 	bl	8009528 <HAL_GetTick>
 800d1b0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d1b2:	e00f      	b.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1b4:	f7fc f9b8 	bl	8009528 <HAL_GetTick>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d908      	bls.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d1c2:	4b3b      	ldr	r3, [pc, #236]	; (800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d109      	bne.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800d1d2:	e006      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d1d4:	4b36      	ldr	r3, [pc, #216]	; (800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d0e9      	beq.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800d1e0:	e000      	b.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800d1e2:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800d1e4:	7ffb      	ldrb	r3, [r7, #31]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d164      	bne.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d1ea:	4b30      	ldr	r3, [pc, #192]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1f4:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01f      	beq.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	429a      	cmp	r2, r3
 800d206:	d019      	beq.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d208:	4b28      	ldr	r3, [pc, #160]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d20e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d212:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d214:	4b25      	ldr	r3, [pc, #148]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d21a:	4a24      	ldr	r2, [pc, #144]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d21c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d224:	4b21      	ldr	r3, [pc, #132]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d22a:	4a20      	ldr	r2, [pc, #128]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d22c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d234:	4a1d      	ldr	r2, [pc, #116]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	d01f      	beq.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d246:	f7fc f96f 	bl	8009528 <HAL_GetTick>
 800d24a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d24c:	e012      	b.n	800d274 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d24e:	f7fc f96b 	bl	8009528 <HAL_GetTick>
 800d252:	4602      	mov	r2, r0
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	f241 3288 	movw	r2, #5000	; 0x1388
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d909      	bls.n	800d274 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d260:	4b12      	ldr	r3, [pc, #72]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d266:	f003 0302 	and.w	r3, r3, #2
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10a      	bne.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800d26e:	2303      	movs	r3, #3
 800d270:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800d272:	e007      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d274:	4b0d      	ldr	r3, [pc, #52]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27a:	f003 0302 	and.w	r3, r3, #2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0e5      	beq.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800d282:	e000      	b.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800d284:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800d286:	7ffb      	ldrb	r3, [r7, #31]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10c      	bne.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d28c:	4b07      	ldr	r3, [pc, #28]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d28e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d29c:	4903      	ldr	r1, [pc, #12]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d2a4:	e008      	b.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d2a6:	7ffb      	ldrb	r3, [r7, #31]
 800d2a8:	77bb      	strb	r3, [r7, #30]
 800d2aa:	e005      	b.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d2ac:	40021000 	.word	0x40021000
 800d2b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2b4:	7ffb      	ldrb	r3, [r7, #31]
 800d2b6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d2b8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d105      	bne.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d2be:	4b9c      	ldr	r3, [pc, #624]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2c2:	4a9b      	ldr	r2, [pc, #620]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d2c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d2d6:	4b96      	ldr	r3, [pc, #600]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2dc:	f023 0203 	bic.w	r2, r3, #3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e4:	4992      	ldr	r1, [pc, #584]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f003 0302 	and.w	r3, r3, #2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00a      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d2f8:	4b8d      	ldr	r3, [pc, #564]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2fe:	f023 020c 	bic.w	r2, r3, #12
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d306:	498a      	ldr	r1, [pc, #552]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d308:	4313      	orrs	r3, r2
 800d30a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0304 	and.w	r3, r3, #4
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00a      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d31a:	4b85      	ldr	r3, [pc, #532]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d320:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d328:	4981      	ldr	r1, [pc, #516]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d32a:	4313      	orrs	r3, r2
 800d32c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f003 0308 	and.w	r3, r3, #8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00a      	beq.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d33c:	4b7c      	ldr	r3, [pc, #496]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d342:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34a:	4979      	ldr	r1, [pc, #484]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d34c:	4313      	orrs	r3, r2
 800d34e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0310 	and.w	r3, r3, #16
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00a      	beq.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d35e:	4b74      	ldr	r3, [pc, #464]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d36c:	4970      	ldr	r1, [pc, #448]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d36e:	4313      	orrs	r3, r2
 800d370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f003 0320 	and.w	r3, r3, #32
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00a      	beq.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d380:	4b6b      	ldr	r3, [pc, #428]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d386:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d38e:	4968      	ldr	r1, [pc, #416]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d390:	4313      	orrs	r3, r2
 800d392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00a      	beq.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d3a2:	4b63      	ldr	r3, [pc, #396]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3b0:	495f      	ldr	r1, [pc, #380]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00a      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d3c4:	4b5a      	ldr	r3, [pc, #360]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3d2:	4957      	ldr	r1, [pc, #348]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00a      	beq.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800d3e6:	4b52      	ldr	r3, [pc, #328]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3f4:	494e      	ldr	r1, [pc, #312]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d031      	beq.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d40c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d410:	d00e      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d416:	d814      	bhi.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d015      	beq.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800d41c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d420:	d10f      	bne.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d422:	4b43      	ldr	r3, [pc, #268]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	4a42      	ldr	r2, [pc, #264]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d42c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800d42e:	e00c      	b.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	3304      	adds	r3, #4
 800d434:	2100      	movs	r1, #0
 800d436:	4618      	mov	r0, r3
 800d438:	f000 f97c 	bl	800d734 <RCCEx_PLLSAI1_Config>
 800d43c:	4603      	mov	r3, r0
 800d43e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800d440:	e003      	b.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	77fb      	strb	r3, [r7, #31]
        break;
 800d446:	e000      	b.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800d448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d44a:	7ffb      	ldrb	r3, [r7, #31]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10b      	bne.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d450:	4b37      	ldr	r3, [pc, #220]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d456:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d45e:	4934      	ldr	r1, [pc, #208]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d460:	4313      	orrs	r3, r2
 800d462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d466:	e001      	b.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d468:	7ffb      	ldrb	r3, [r7, #31]
 800d46a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00a      	beq.n	800d48e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d478:	4b2d      	ldr	r3, [pc, #180]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d47e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d486:	492a      	ldr	r1, [pc, #168]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d488:	4313      	orrs	r3, r2
 800d48a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00a      	beq.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d49a:	4b25      	ldr	r3, [pc, #148]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4a8:	4921      	ldr	r1, [pc, #132]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00a      	beq.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d4bc:	4b1c      	ldr	r3, [pc, #112]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ca:	4919      	ldr	r1, [pc, #100]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00a      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d4de:	4b14      	ldr	r3, [pc, #80]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d4e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d4e4:	f023 0203 	bic.w	r2, r3, #3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ec:	4910      	ldr	r1, [pc, #64]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d02b      	beq.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d500:	4b0b      	ldr	r3, [pc, #44]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d50e:	4908      	ldr	r1, [pc, #32]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d510:	4313      	orrs	r3, r2
 800d512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d51a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d51e:	d109      	bne.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d520:	4b03      	ldr	r3, [pc, #12]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	4a02      	ldr	r2, [pc, #8]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800d526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d52a:	60d3      	str	r3, [r2, #12]
 800d52c:	e014      	b.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800d52e:	bf00      	nop
 800d530:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d53c:	d10c      	bne.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	3304      	adds	r3, #4
 800d542:	2101      	movs	r1, #1
 800d544:	4618      	mov	r0, r3
 800d546:	f000 f8f5 	bl	800d734 <RCCEx_PLLSAI1_Config>
 800d54a:	4603      	mov	r3, r0
 800d54c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800d54e:	7ffb      	ldrb	r3, [r7, #31]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800d554:	7ffb      	ldrb	r3, [r7, #31]
 800d556:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d04a      	beq.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d56c:	d108      	bne.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800d56e:	4b70      	ldr	r3, [pc, #448]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d574:	4a6e      	ldr	r2, [pc, #440]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d57a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800d57e:	e012      	b.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800d580:	4b6b      	ldr	r3, [pc, #428]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d58e:	4968      	ldr	r1, [pc, #416]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d590:	4313      	orrs	r3, r2
 800d592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d596:	4b66      	ldr	r3, [pc, #408]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d59c:	4a64      	ldr	r2, [pc, #400]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d59e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d5ae:	d10d      	bne.n	800d5cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 f8bc 	bl	800d734 <RCCEx_PLLSAI1_Config>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d5c0:	7ffb      	ldrb	r3, [r7, #31]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d019      	beq.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800d5c6:	7ffb      	ldrb	r3, [r7, #31]
 800d5c8:	77bb      	strb	r3, [r7, #30]
 800d5ca:	e016      	b.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5d4:	d106      	bne.n	800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d5d6:	4b56      	ldr	r3, [pc, #344]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	4a55      	ldr	r2, [pc, #340]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d5dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5e0:	60d3      	str	r3, [r2, #12]
 800d5e2:	e00a      	b.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5ec:	d105      	bne.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d5ee:	4b50      	ldr	r3, [pc, #320]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	4a4f      	ldr	r2, [pc, #316]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d5f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5f8:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d602:	2b00      	cmp	r3, #0
 800d604:	d028      	beq.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d606:	4b4a      	ldr	r3, [pc, #296]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d60c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d614:	4946      	ldr	r1, [pc, #280]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d616:	4313      	orrs	r3, r2
 800d618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d624:	d106      	bne.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d626:	4b42      	ldr	r3, [pc, #264]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	4a41      	ldr	r2, [pc, #260]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d62c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d630:	60d3      	str	r3, [r2, #12]
 800d632:	e011      	b.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d63c:	d10c      	bne.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3304      	adds	r3, #4
 800d642:	2101      	movs	r1, #1
 800d644:	4618      	mov	r0, r3
 800d646:	f000 f875 	bl	800d734 <RCCEx_PLLSAI1_Config>
 800d64a:	4603      	mov	r3, r0
 800d64c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d64e:	7ffb      	ldrb	r3, [r7, #31]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800d654:	7ffb      	ldrb	r3, [r7, #31]
 800d656:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d660:	2b00      	cmp	r3, #0
 800d662:	d01e      	beq.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d664:	4b32      	ldr	r3, [pc, #200]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d66a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d674:	492e      	ldr	r1, [pc, #184]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d676:	4313      	orrs	r3, r2
 800d678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d686:	d10c      	bne.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3304      	adds	r3, #4
 800d68c:	2102      	movs	r1, #2
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f850 	bl	800d734 <RCCEx_PLLSAI1_Config>
 800d694:	4603      	mov	r3, r0
 800d696:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d698:	7ffb      	ldrb	r3, [r7, #31]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800d69e:	7ffb      	ldrb	r3, [r7, #31]
 800d6a0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00b      	beq.n	800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d6ae:	4b20      	ldr	r3, [pc, #128]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d6b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d6b4:	f023 0204 	bic.w	r2, r3, #4
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6be:	491c      	ldr	r1, [pc, #112]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00b      	beq.n	800d6ea <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d6d2:	4b17      	ldr	r3, [pc, #92]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d6d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d6d8:	f023 0218 	bic.w	r2, r3, #24
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6e2:	4913      	ldr	r1, [pc, #76]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d017      	beq.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d6f6:	4b0e      	ldr	r3, [pc, #56]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d6f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d6fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d706:	490a      	ldr	r1, [pc, #40]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d708:	4313      	orrs	r3, r2
 800d70a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d718:	d105      	bne.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d71a:	4b05      	ldr	r3, [pc, #20]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	4a04      	ldr	r2, [pc, #16]	; (800d730 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800d720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d724:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800d726:	7fbb      	ldrb	r3, [r7, #30]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3720      	adds	r7, #32
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	40021000 	.word	0x40021000

0800d734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d73e:	2300      	movs	r3, #0
 800d740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b03      	cmp	r3, #3
 800d748:	d018      	beq.n	800d77c <RCCEx_PLLSAI1_Config+0x48>
 800d74a:	2b03      	cmp	r3, #3
 800d74c:	d81f      	bhi.n	800d78e <RCCEx_PLLSAI1_Config+0x5a>
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d002      	beq.n	800d758 <RCCEx_PLLSAI1_Config+0x24>
 800d752:	2b02      	cmp	r3, #2
 800d754:	d009      	beq.n	800d76a <RCCEx_PLLSAI1_Config+0x36>
 800d756:	e01a      	b.n	800d78e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d758:	4b65      	ldr	r3, [pc, #404]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 0302 	and.w	r3, r3, #2
 800d760:	2b00      	cmp	r3, #0
 800d762:	d117      	bne.n	800d794 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800d764:	2301      	movs	r3, #1
 800d766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d768:	e014      	b.n	800d794 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d76a:	4b61      	ldr	r3, [pc, #388]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d772:	2b00      	cmp	r3, #0
 800d774:	d110      	bne.n	800d798 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d77a:	e00d      	b.n	800d798 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800d77c:	4b5c      	ldr	r3, [pc, #368]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800d784:	2b00      	cmp	r3, #0
 800d786:	d109      	bne.n	800d79c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d78c:	e006      	b.n	800d79c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800d78e:	2301      	movs	r3, #1
 800d790:	73fb      	strb	r3, [r7, #15]
      break;
 800d792:	e004      	b.n	800d79e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800d794:	bf00      	nop
 800d796:	e002      	b.n	800d79e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800d798:	bf00      	nop
 800d79a:	e000      	b.n	800d79e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800d79c:	bf00      	nop
  }

  if (status == HAL_OK)
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f040 809f 	bne.w	800d8e4 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d7a6:	4b52      	ldr	r3, [pc, #328]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a51      	ldr	r2, [pc, #324]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d7ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d7b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7b2:	f7fb feb9 	bl	8009528 <HAL_GetTick>
 800d7b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d7b8:	e00f      	b.n	800d7da <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d7ba:	f7fb feb5 	bl	8009528 <HAL_GetTick>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d908      	bls.n	800d7da <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d7c8:	4b49      	ldr	r3, [pc, #292]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d009      	beq.n	800d7e8 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d7d8:	e006      	b.n	800d7e8 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d7da:	4b45      	ldr	r3, [pc, #276]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1e9      	bne.n	800d7ba <RCCEx_PLLSAI1_Config+0x86>
 800d7e6:	e000      	b.n	800d7ea <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800d7e8:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800d7ea:	7bfb      	ldrb	r3, [r7, #15]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d179      	bne.n	800d8e4 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d116      	bne.n	800d824 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d7f6:	4b3e      	ldr	r3, [pc, #248]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d7f8:	691a      	ldr	r2, [r3, #16]
 800d7fa:	4b3e      	ldr	r3, [pc, #248]	; (800d8f4 <RCCEx_PLLSAI1_Config+0x1c0>)
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	6892      	ldr	r2, [r2, #8]
 800d802:	0211      	lsls	r1, r2, #8
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	68d2      	ldr	r2, [r2, #12]
 800d808:	06d2      	lsls	r2, r2, #27
 800d80a:	4311      	orrs	r1, r2
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	6852      	ldr	r2, [r2, #4]
 800d810:	3a01      	subs	r2, #1
 800d812:	0112      	lsls	r2, r2, #4
 800d814:	4311      	orrs	r1, r2
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	6812      	ldr	r2, [r2, #0]
 800d81a:	430a      	orrs	r2, r1
 800d81c:	4934      	ldr	r1, [pc, #208]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d81e:	4313      	orrs	r3, r2
 800d820:	610b      	str	r3, [r1, #16]
 800d822:	e033      	b.n	800d88c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d118      	bne.n	800d85c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d82a:	4b31      	ldr	r3, [pc, #196]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d82c:	691a      	ldr	r2, [r3, #16]
 800d82e:	4b32      	ldr	r3, [pc, #200]	; (800d8f8 <RCCEx_PLLSAI1_Config+0x1c4>)
 800d830:	4013      	ands	r3, r2
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	6892      	ldr	r2, [r2, #8]
 800d836:	0211      	lsls	r1, r2, #8
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	6912      	ldr	r2, [r2, #16]
 800d83c:	0852      	lsrs	r2, r2, #1
 800d83e:	3a01      	subs	r2, #1
 800d840:	0552      	lsls	r2, r2, #21
 800d842:	4311      	orrs	r1, r2
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	6852      	ldr	r2, [r2, #4]
 800d848:	3a01      	subs	r2, #1
 800d84a:	0112      	lsls	r2, r2, #4
 800d84c:	4311      	orrs	r1, r2
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	6812      	ldr	r2, [r2, #0]
 800d852:	430a      	orrs	r2, r1
 800d854:	4926      	ldr	r1, [pc, #152]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d856:	4313      	orrs	r3, r2
 800d858:	610b      	str	r3, [r1, #16]
 800d85a:	e017      	b.n	800d88c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d85c:	4b24      	ldr	r3, [pc, #144]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d85e:	691a      	ldr	r2, [r3, #16]
 800d860:	4b26      	ldr	r3, [pc, #152]	; (800d8fc <RCCEx_PLLSAI1_Config+0x1c8>)
 800d862:	4013      	ands	r3, r2
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	6892      	ldr	r2, [r2, #8]
 800d868:	0211      	lsls	r1, r2, #8
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6952      	ldr	r2, [r2, #20]
 800d86e:	0852      	lsrs	r2, r2, #1
 800d870:	3a01      	subs	r2, #1
 800d872:	0652      	lsls	r2, r2, #25
 800d874:	4311      	orrs	r1, r2
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	6852      	ldr	r2, [r2, #4]
 800d87a:	3a01      	subs	r2, #1
 800d87c:	0112      	lsls	r2, r2, #4
 800d87e:	4311      	orrs	r1, r2
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	6812      	ldr	r2, [r2, #0]
 800d884:	430a      	orrs	r2, r1
 800d886:	491a      	ldr	r1, [pc, #104]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d888:	4313      	orrs	r3, r2
 800d88a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d88c:	4b18      	ldr	r3, [pc, #96]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a17      	ldr	r2, [pc, #92]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d898:	f7fb fe46 	bl	8009528 <HAL_GetTick>
 800d89c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d89e:	e00f      	b.n	800d8c0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d8a0:	f7fb fe42 	bl	8009528 <HAL_GetTick>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	1ad3      	subs	r3, r2, r3
 800d8aa:	2b02      	cmp	r3, #2
 800d8ac:	d908      	bls.n	800d8c0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d8ae:	4b10      	ldr	r3, [pc, #64]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d109      	bne.n	800d8ce <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800d8be:	e006      	b.n	800d8ce <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d8c0:	4b0b      	ldr	r3, [pc, #44]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d0e9      	beq.n	800d8a0 <RCCEx_PLLSAI1_Config+0x16c>
 800d8cc:	e000      	b.n	800d8d0 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800d8ce:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d106      	bne.n	800d8e4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800d8d6:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d8d8:	691a      	ldr	r2, [r3, #16]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	4904      	ldr	r1, [pc, #16]	; (800d8f0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	40021000 	.word	0x40021000
 800d8f4:	07ff800c 	.word	0x07ff800c
 800d8f8:	ff9f800c 	.word	0xff9f800c
 800d8fc:	f9ff800c 	.word	0xf9ff800c

0800d900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d90a:	2300      	movs	r3, #0
 800d90c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b03      	cmp	r3, #3
 800d914:	d018      	beq.n	800d948 <RCCEx_PLLSAI2_Config+0x48>
 800d916:	2b03      	cmp	r3, #3
 800d918:	d81f      	bhi.n	800d95a <RCCEx_PLLSAI2_Config+0x5a>
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d002      	beq.n	800d924 <RCCEx_PLLSAI2_Config+0x24>
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d009      	beq.n	800d936 <RCCEx_PLLSAI2_Config+0x36>
 800d922:	e01a      	b.n	800d95a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d924:	4b4a      	ldr	r3, [pc, #296]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f003 0302 	and.w	r3, r3, #2
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d117      	bne.n	800d960 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800d930:	2301      	movs	r3, #1
 800d932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d934:	e014      	b.n	800d960 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d936:	4b46      	ldr	r3, [pc, #280]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d110      	bne.n	800d964 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800d942:	2301      	movs	r3, #1
 800d944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d946:	e00d      	b.n	800d964 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800d948:	4b41      	ldr	r3, [pc, #260]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800d950:	2b00      	cmp	r3, #0
 800d952:	d109      	bne.n	800d968 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800d954:	2301      	movs	r3, #1
 800d956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d958:	e006      	b.n	800d968 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	73fb      	strb	r3, [r7, #15]
      break;
 800d95e:	e004      	b.n	800d96a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800d960:	bf00      	nop
 800d962:	e002      	b.n	800d96a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800d964:	bf00      	nop
 800d966:	e000      	b.n	800d96a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800d968:	bf00      	nop
  }

  if (status == HAL_OK)
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d169      	bne.n	800da44 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d970:	4b37      	ldr	r3, [pc, #220]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a36      	ldr	r2, [pc, #216]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d97a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d97c:	f7fb fdd4 	bl	8009528 <HAL_GetTick>
 800d980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d982:	e00f      	b.n	800d9a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d984:	f7fb fdd0 	bl	8009528 <HAL_GetTick>
 800d988:	4602      	mov	r2, r0
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	1ad3      	subs	r3, r2, r3
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d908      	bls.n	800d9a4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d992:	4b2f      	ldr	r3, [pc, #188]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d009      	beq.n	800d9b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d9a2:	e006      	b.n	800d9b2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d9a4:	4b2a      	ldr	r3, [pc, #168]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1e9      	bne.n	800d984 <RCCEx_PLLSAI2_Config+0x84>
 800d9b0:	e000      	b.n	800d9b4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800d9b2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d144      	bne.n	800da44 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d115      	bne.n	800d9ec <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d9c0:	4b23      	ldr	r3, [pc, #140]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d9c2:	695a      	ldr	r2, [r3, #20]
 800d9c4:	4b23      	ldr	r3, [pc, #140]	; (800da54 <RCCEx_PLLSAI2_Config+0x154>)
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	6892      	ldr	r2, [r2, #8]
 800d9cc:	0211      	lsls	r1, r2, #8
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	68d2      	ldr	r2, [r2, #12]
 800d9d2:	06d2      	lsls	r2, r2, #27
 800d9d4:	4311      	orrs	r1, r2
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	6852      	ldr	r2, [r2, #4]
 800d9da:	3a01      	subs	r2, #1
 800d9dc:	0112      	lsls	r2, r2, #4
 800d9de:	4311      	orrs	r1, r2
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	6812      	ldr	r2, [r2, #0]
 800d9e4:	430a      	orrs	r2, r1
 800d9e6:	491a      	ldr	r1, [pc, #104]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d9ec:	4b18      	ldr	r3, [pc, #96]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a17      	ldr	r2, [pc, #92]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800d9f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9f8:	f7fb fd96 	bl	8009528 <HAL_GetTick>
 800d9fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d9fe:	e00f      	b.n	800da20 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800da00:	f7fb fd92 	bl	8009528 <HAL_GetTick>
 800da04:	4602      	mov	r2, r0
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d908      	bls.n	800da20 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800da0e:	4b10      	ldr	r3, [pc, #64]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da16:	2b00      	cmp	r3, #0
 800da18:	d109      	bne.n	800da2e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800da1a:	2303      	movs	r3, #3
 800da1c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800da1e:	e006      	b.n	800da2e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800da20:	4b0b      	ldr	r3, [pc, #44]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d0e9      	beq.n	800da00 <RCCEx_PLLSAI2_Config+0x100>
 800da2c:	e000      	b.n	800da30 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800da2e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800da30:	7bfb      	ldrb	r3, [r7, #15]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d106      	bne.n	800da44 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800da36:	4b06      	ldr	r3, [pc, #24]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800da38:	695a      	ldr	r2, [r3, #20]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	4904      	ldr	r1, [pc, #16]	; (800da50 <RCCEx_PLLSAI2_Config+0x150>)
 800da40:	4313      	orrs	r3, r2
 800da42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800da44:	7bfb      	ldrb	r3, [r7, #15]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3710      	adds	r7, #16
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	40021000 	.word	0x40021000
 800da54:	07ff800c 	.word	0x07ff800c

0800da58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d066      	beq.n	800db38 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800da70:	b2db      	uxtb	r3, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7fb f876 	bl	8008b70 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2202      	movs	r2, #2
 800da88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	f003 0310 	and.w	r3, r3, #16
 800da96:	2b10      	cmp	r3, #16
 800da98:	d045      	beq.n	800db26 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da9a:	4b2a      	ldr	r3, [pc, #168]	; (800db44 <HAL_RTC_Init+0xec>)
 800da9c:	22ca      	movs	r2, #202	; 0xca
 800da9e:	625a      	str	r2, [r3, #36]	; 0x24
 800daa0:	4b28      	ldr	r3, [pc, #160]	; (800db44 <HAL_RTC_Init+0xec>)
 800daa2:	2253      	movs	r2, #83	; 0x53
 800daa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f872 	bl	800db90 <RTC_EnterInitMode>
 800daac:	4603      	mov	r3, r0
 800daae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d121      	bne.n	800dafa <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800dab6:	4b23      	ldr	r3, [pc, #140]	; (800db44 <HAL_RTC_Init+0xec>)
 800dab8:	699b      	ldr	r3, [r3, #24]
 800daba:	4a22      	ldr	r2, [pc, #136]	; (800db44 <HAL_RTC_Init+0xec>)
 800dabc:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800dac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dac4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800dac6:	4b1f      	ldr	r3, [pc, #124]	; (800db44 <HAL_RTC_Init+0xec>)
 800dac8:	699a      	ldr	r2, [r3, #24]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6859      	ldr	r1, [r3, #4]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	691b      	ldr	r3, [r3, #16]
 800dad2:	4319      	orrs	r1, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	699b      	ldr	r3, [r3, #24]
 800dad8:	430b      	orrs	r3, r1
 800dada:	491a      	ldr	r1, [pc, #104]	; (800db44 <HAL_RTC_Init+0xec>)
 800dadc:	4313      	orrs	r3, r2
 800dade:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68da      	ldr	r2, [r3, #12]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	689b      	ldr	r3, [r3, #8]
 800dae8:	041b      	lsls	r3, r3, #16
 800daea:	4916      	ldr	r1, [pc, #88]	; (800db44 <HAL_RTC_Init+0xec>)
 800daec:	4313      	orrs	r3, r2
 800daee:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f881 	bl	800dbf8 <RTC_ExitInitMode>
 800daf6:	4603      	mov	r3, r0
 800daf8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800dafa:	7bfb      	ldrb	r3, [r7, #15]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10e      	bne.n	800db1e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800db00:	4b10      	ldr	r3, [pc, #64]	; (800db44 <HAL_RTC_Init+0xec>)
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a19      	ldr	r1, [r3, #32]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	69db      	ldr	r3, [r3, #28]
 800db10:	4319      	orrs	r1, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	695b      	ldr	r3, [r3, #20]
 800db16:	430b      	orrs	r3, r1
 800db18:	490a      	ldr	r1, [pc, #40]	; (800db44 <HAL_RTC_Init+0xec>)
 800db1a:	4313      	orrs	r3, r2
 800db1c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db1e:	4b09      	ldr	r3, [pc, #36]	; (800db44 <HAL_RTC_Init+0xec>)
 800db20:	22ff      	movs	r2, #255	; 0xff
 800db22:	625a      	str	r2, [r3, #36]	; 0x24
 800db24:	e001      	b.n	800db2a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800db2a:	7bfb      	ldrb	r3, [r7, #15]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d103      	bne.n	800db38 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800db38:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	40002800 	.word	0x40002800

0800db48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800db50:	4b0d      	ldr	r3, [pc, #52]	; (800db88 <HAL_RTC_WaitForSynchro+0x40>)
 800db52:	4a0e      	ldr	r2, [pc, #56]	; (800db8c <HAL_RTC_WaitForSynchro+0x44>)
 800db54:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800db56:	f7fb fce7 	bl	8009528 <HAL_GetTick>
 800db5a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800db5c:	e009      	b.n	800db72 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db5e:	f7fb fce3 	bl	8009528 <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db6c:	d901      	bls.n	800db72 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800db6e:	2303      	movs	r3, #3
 800db70:	e006      	b.n	800db80 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800db72:	4b05      	ldr	r3, [pc, #20]	; (800db88 <HAL_RTC_WaitForSynchro+0x40>)
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	f003 0320 	and.w	r3, r3, #32
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d0ef      	beq.n	800db5e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800db7e:	2300      	movs	r3, #0
}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	40002800 	.word	0x40002800
 800db8c:	0001005c 	.word	0x0001005c

0800db90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db98:	2300      	movs	r3, #0
 800db9a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800db9c:	4b15      	ldr	r3, [pc, #84]	; (800dbf4 <RTC_EnterInitMode+0x64>)
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d120      	bne.n	800dbea <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dba8:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <RTC_EnterInitMode+0x64>)
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	4a11      	ldr	r2, [pc, #68]	; (800dbf4 <RTC_EnterInitMode+0x64>)
 800dbae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbb2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800dbb4:	f7fb fcb8 	bl	8009528 <HAL_GetTick>
 800dbb8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dbba:	e00d      	b.n	800dbd8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dbbc:	f7fb fcb4 	bl	8009528 <HAL_GetTick>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	1ad3      	subs	r3, r2, r3
 800dbc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbca:	d905      	bls.n	800dbd8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dbcc:	2303      	movs	r3, #3
 800dbce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2203      	movs	r2, #3
 800dbd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dbd8:	4b06      	ldr	r3, [pc, #24]	; (800dbf4 <RTC_EnterInitMode+0x64>)
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d102      	bne.n	800dbea <RTC_EnterInitMode+0x5a>
 800dbe4:	7bfb      	ldrb	r3, [r7, #15]
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d1e8      	bne.n	800dbbc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	40002800 	.word	0x40002800

0800dbf8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dc04:	4b1a      	ldr	r3, [pc, #104]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	4a19      	ldr	r2, [pc, #100]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc0e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dc10:	4b17      	ldr	r3, [pc, #92]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc12:	699b      	ldr	r3, [r3, #24]
 800dc14:	f003 0320 	and.w	r3, r3, #32
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10c      	bne.n	800dc36 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff ff93 	bl	800db48 <HAL_RTC_WaitForSynchro>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01e      	beq.n	800dc66 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2203      	movs	r2, #3
 800dc2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800dc30:	2303      	movs	r3, #3
 800dc32:	73fb      	strb	r3, [r7, #15]
 800dc34:	e017      	b.n	800dc66 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc36:	4b0e      	ldr	r3, [pc, #56]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	4a0d      	ldr	r2, [pc, #52]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc3c:	f023 0320 	bic.w	r3, r3, #32
 800dc40:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7ff ff80 	bl	800db48 <HAL_RTC_WaitForSynchro>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d005      	beq.n	800dc5a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2203      	movs	r2, #3
 800dc52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800dc56:	2303      	movs	r3, #3
 800dc58:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc5a:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	4a04      	ldr	r2, [pc, #16]	; (800dc70 <RTC_ExitInitMode+0x78>)
 800dc60:	f043 0320 	orr.w	r3, r3, #32
 800dc64:	6193      	str	r3, [r2, #24]
  }

  return status;
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	40002800 	.word	0x40002800

0800dc74 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	490f      	ldr	r1, [pc, #60]	; (800dcc4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	689a      	ldr	r2, [r3, #8]
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	490c      	ldr	r1, [pc, #48]	; (800dcc8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800dc96:	4313      	orrs	r3, r2
 800dc98:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800dc9a:	4b0b      	ldr	r3, [pc, #44]	; (800dcc8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800dc9c:	6a1b      	ldr	r3, [r3, #32]
 800dc9e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	6919      	ldr	r1, [r3, #16]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	041b      	lsls	r3, r3, #16
 800dcac:	430b      	orrs	r3, r1
 800dcae:	4906      	ldr	r1, [pc, #24]	; (800dcc8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	40002800 	.word	0x40002800
 800dcc8:	40003400 	.word	0x40003400

0800dccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e095      	b.n	800de0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d108      	bne.n	800dcf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcee:	d009      	beq.n	800dd04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	61da      	str	r2, [r3, #28]
 800dcf6:	e005      	b.n	800dd04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d106      	bne.n	800dd24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7fa ff64 	bl	8008bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2202      	movs	r2, #2
 800dd28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd44:	d902      	bls.n	800dd4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dd46:	2300      	movs	r3, #0
 800dd48:	60fb      	str	r3, [r7, #12]
 800dd4a:	e002      	b.n	800dd52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dd4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dd5a:	d007      	beq.n	800dd6c <HAL_SPI_Init+0xa0>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd64:	d002      	beq.n	800dd6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dd7c:	431a      	orrs	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	f003 0302 	and.w	r3, r3, #2
 800dd86:	431a      	orrs	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	695b      	ldr	r3, [r3, #20]
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	431a      	orrs	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	699b      	ldr	r3, [r3, #24]
 800dd96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd9a:	431a      	orrs	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	69db      	ldr	r3, [r3, #28]
 800dda0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dda4:	431a      	orrs	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddae:	ea42 0103 	orr.w	r1, r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	430a      	orrs	r2, r1
 800ddc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	0c1b      	lsrs	r3, r3, #16
 800ddc8:	f003 0204 	and.w	r2, r3, #4
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd0:	f003 0310 	and.w	r3, r3, #16
 800ddd4:	431a      	orrs	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddda:	f003 0308 	and.w	r3, r3, #8
 800ddde:	431a      	orrs	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dde8:	ea42 0103 	orr.w	r1, r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2201      	movs	r2, #1
 800de04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b088      	sub	sp, #32
 800de16:	af00      	add	r7, sp, #0
 800de18:	60f8      	str	r0, [r7, #12]
 800de1a:	60b9      	str	r1, [r7, #8]
 800de1c:	603b      	str	r3, [r7, #0]
 800de1e:	4613      	mov	r3, r2
 800de20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d101      	bne.n	800de34 <HAL_SPI_Transmit+0x22>
 800de30:	2302      	movs	r3, #2
 800de32:	e158      	b.n	800e0e6 <HAL_SPI_Transmit+0x2d4>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2201      	movs	r2, #1
 800de38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de3c:	f7fb fb74 	bl	8009528 <HAL_GetTick>
 800de40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de42:	88fb      	ldrh	r3, [r7, #6]
 800de44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d002      	beq.n	800de58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800de52:	2302      	movs	r3, #2
 800de54:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de56:	e13d      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <HAL_SPI_Transmit+0x52>
 800de5e:	88fb      	ldrh	r3, [r7, #6]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d102      	bne.n	800de6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800de64:	2301      	movs	r3, #1
 800de66:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de68:	e134      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2203      	movs	r2, #3
 800de6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	88fa      	ldrh	r2, [r7, #6]
 800de82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	88fa      	ldrh	r2, [r7, #6]
 800de88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2200      	movs	r2, #0
 800dea4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deb4:	d10f      	bne.n	800ded6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ded4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dee0:	2b40      	cmp	r3, #64	; 0x40
 800dee2:	d007      	beq.n	800def4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800def2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800defc:	d94b      	bls.n	800df96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d002      	beq.n	800df0c <HAL_SPI_Transmit+0xfa>
 800df06:	8afb      	ldrh	r3, [r7, #22]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d13e      	bne.n	800df8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df10:	881a      	ldrh	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1c:	1c9a      	adds	r2, r3, #2
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df26:	b29b      	uxth	r3, r3
 800df28:	3b01      	subs	r3, #1
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800df30:	e02b      	b.n	800df8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d112      	bne.n	800df66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df44:	881a      	ldrh	r2, [r3, #0]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df50:	1c9a      	adds	r2, r3, #2
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	3b01      	subs	r3, #1
 800df5e:	b29a      	uxth	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df64:	e011      	b.n	800df8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df66:	f7fb fadf 	bl	8009528 <HAL_GetTick>
 800df6a:	4602      	mov	r2, r0
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	429a      	cmp	r2, r3
 800df74:	d803      	bhi.n	800df7e <HAL_SPI_Transmit+0x16c>
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7c:	d102      	bne.n	800df84 <HAL_SPI_Transmit+0x172>
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d102      	bne.n	800df8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800df84:	2303      	movs	r3, #3
 800df86:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df88:	e0a4      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df8e:	b29b      	uxth	r3, r3
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1ce      	bne.n	800df32 <HAL_SPI_Transmit+0x120>
 800df94:	e07c      	b.n	800e090 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d002      	beq.n	800dfa4 <HAL_SPI_Transmit+0x192>
 800df9e:	8afb      	ldrh	r3, [r7, #22]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d170      	bne.n	800e086 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d912      	bls.n	800dfd4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb2:	881a      	ldrh	r2, [r3, #0]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbe:	1c9a      	adds	r2, r3, #2
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	3b02      	subs	r3, #2
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfd2:	e058      	b.n	800e086 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	330c      	adds	r3, #12
 800dfde:	7812      	ldrb	r2, [r2, #0]
 800dfe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	3b01      	subs	r3, #1
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800dffa:	e044      	b.n	800e086 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	f003 0302 	and.w	r3, r3, #2
 800e006:	2b02      	cmp	r3, #2
 800e008:	d12b      	bne.n	800e062 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e00e:	b29b      	uxth	r3, r3
 800e010:	2b01      	cmp	r3, #1
 800e012:	d912      	bls.n	800e03a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e018:	881a      	ldrh	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e024:	1c9a      	adds	r2, r3, #2
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e02e:	b29b      	uxth	r3, r3
 800e030:	3b02      	subs	r3, #2
 800e032:	b29a      	uxth	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e038:	e025      	b.n	800e086 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	330c      	adds	r3, #12
 800e044:	7812      	ldrb	r2, [r2, #0]
 800e046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e04c:	1c5a      	adds	r2, r3, #1
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e056:	b29b      	uxth	r3, r3
 800e058:	3b01      	subs	r3, #1
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e060:	e011      	b.n	800e086 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e062:	f7fb fa61 	bl	8009528 <HAL_GetTick>
 800e066:	4602      	mov	r2, r0
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	1ad3      	subs	r3, r2, r3
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d803      	bhi.n	800e07a <HAL_SPI_Transmit+0x268>
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e078:	d102      	bne.n	800e080 <HAL_SPI_Transmit+0x26e>
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d102      	bne.n	800e086 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e080:	2303      	movs	r3, #3
 800e082:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e084:	e026      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1b5      	bne.n	800dffc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e090:	69ba      	ldr	r2, [r7, #24]
 800e092:	6839      	ldr	r1, [r7, #0]
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f000 fce3 	bl	800ea60 <SPI_EndRxTxTransaction>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2220      	movs	r2, #32
 800e0a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10a      	bne.n	800e0c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	613b      	str	r3, [r7, #16]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	613b      	str	r3, [r7, #16]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	613b      	str	r3, [r7, #16]
 800e0c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	77fb      	strb	r3, [r7, #31]
 800e0d0:	e000      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e0d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e0e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b088      	sub	sp, #32
 800e0f2:	af02      	add	r7, sp, #8
 800e0f4:	60f8      	str	r0, [r7, #12]
 800e0f6:	60b9      	str	r1, [r7, #8]
 800e0f8:	603b      	str	r3, [r7, #0]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e10a:	d112      	bne.n	800e132 <HAL_SPI_Receive+0x44>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10e      	bne.n	800e132 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2204      	movs	r2, #4
 800e118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e11c:	88fa      	ldrh	r2, [r7, #6]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	4613      	mov	r3, r2
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	68b9      	ldr	r1, [r7, #8]
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f000 f910 	bl	800e34e <HAL_SPI_TransmitReceive>
 800e12e:	4603      	mov	r3, r0
 800e130:	e109      	b.n	800e346 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d101      	bne.n	800e140 <HAL_SPI_Receive+0x52>
 800e13c:	2302      	movs	r3, #2
 800e13e:	e102      	b.n	800e346 <HAL_SPI_Receive+0x258>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2201      	movs	r2, #1
 800e144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e148:	f7fb f9ee 	bl	8009528 <HAL_GetTick>
 800e14c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e154:	b2db      	uxtb	r3, r3
 800e156:	2b01      	cmp	r3, #1
 800e158:	d002      	beq.n	800e160 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e15a:	2302      	movs	r3, #2
 800e15c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e15e:	e0e9      	b.n	800e334 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d002      	beq.n	800e16c <HAL_SPI_Receive+0x7e>
 800e166:	88fb      	ldrh	r3, [r7, #6]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d102      	bne.n	800e172 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e170:	e0e0      	b.n	800e334 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2204      	movs	r2, #4
 800e176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2200      	movs	r2, #0
 800e17e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	88fa      	ldrh	r2, [r7, #6]
 800e18a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	88fa      	ldrh	r2, [r7, #6]
 800e192:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1bc:	d908      	bls.n	800e1d0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	685a      	ldr	r2, [r3, #4]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1cc:	605a      	str	r2, [r3, #4]
 800e1ce:	e007      	b.n	800e1e0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e1de:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1e8:	d10f      	bne.n	800e20a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e208:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e214:	2b40      	cmp	r3, #64	; 0x40
 800e216:	d007      	beq.n	800e228 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e226:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e230:	d867      	bhi.n	800e302 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e232:	e030      	b.n	800e296 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	f003 0301 	and.w	r3, r3, #1
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d117      	bne.n	800e272 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f103 020c 	add.w	r2, r3, #12
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24e:	7812      	ldrb	r2, [r2, #0]
 800e250:	b2d2      	uxtb	r2, r2
 800e252:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e264:	b29b      	uxth	r3, r3
 800e266:	3b01      	subs	r3, #1
 800e268:	b29a      	uxth	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e270:	e011      	b.n	800e296 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e272:	f7fb f959 	bl	8009528 <HAL_GetTick>
 800e276:	4602      	mov	r2, r0
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d803      	bhi.n	800e28a <HAL_SPI_Receive+0x19c>
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e288:	d102      	bne.n	800e290 <HAL_SPI_Receive+0x1a2>
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d102      	bne.n	800e296 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e290:	2303      	movs	r3, #3
 800e292:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e294:	e04e      	b.n	800e334 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1c8      	bne.n	800e234 <HAL_SPI_Receive+0x146>
 800e2a2:	e034      	b.n	800e30e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	f003 0301 	and.w	r3, r3, #1
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d115      	bne.n	800e2de <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	68da      	ldr	r2, [r3, #12]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2bc:	b292      	uxth	r2, r2
 800e2be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c4:	1c9a      	adds	r2, r3, #2
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e2dc:	e011      	b.n	800e302 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2de:	f7fb f923 	bl	8009528 <HAL_GetTick>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d803      	bhi.n	800e2f6 <HAL_SPI_Receive+0x208>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f4:	d102      	bne.n	800e2fc <HAL_SPI_Receive+0x20e>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e300:	e018      	b.n	800e334 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e308:	b29b      	uxth	r3, r3
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d1ca      	bne.n	800e2a4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e30e:	693a      	ldr	r2, [r7, #16]
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f000 fb4c 	bl	800e9b0 <SPI_EndRxTransaction>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2220      	movs	r2, #32
 800e322:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	75fb      	strb	r3, [r7, #23]
 800e330:	e000      	b.n	800e334 <HAL_SPI_Receive+0x246>
  }

error :
 800e332:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e344:	7dfb      	ldrb	r3, [r7, #23]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b08a      	sub	sp, #40	; 0x28
 800e352:	af00      	add	r7, sp, #0
 800e354:	60f8      	str	r0, [r7, #12]
 800e356:	60b9      	str	r1, [r7, #8]
 800e358:	607a      	str	r2, [r7, #4]
 800e35a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e35c:	2301      	movs	r3, #1
 800e35e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e360:	2300      	movs	r3, #0
 800e362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d101      	bne.n	800e374 <HAL_SPI_TransmitReceive+0x26>
 800e370:	2302      	movs	r3, #2
 800e372:	e1fb      	b.n	800e76c <HAL_SPI_TransmitReceive+0x41e>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2201      	movs	r2, #1
 800e378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e37c:	f7fb f8d4 	bl	8009528 <HAL_GetTick>
 800e380:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e388:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e390:	887b      	ldrh	r3, [r7, #2]
 800e392:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e394:	887b      	ldrh	r3, [r7, #2]
 800e396:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e398:	7efb      	ldrb	r3, [r7, #27]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d00e      	beq.n	800e3bc <HAL_SPI_TransmitReceive+0x6e>
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3a4:	d106      	bne.n	800e3b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d102      	bne.n	800e3b4 <HAL_SPI_TransmitReceive+0x66>
 800e3ae:	7efb      	ldrb	r3, [r7, #27]
 800e3b0:	2b04      	cmp	r3, #4
 800e3b2:	d003      	beq.n	800e3bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3ba:	e1cd      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d005      	beq.n	800e3ce <HAL_SPI_TransmitReceive+0x80>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d002      	beq.n	800e3ce <HAL_SPI_TransmitReceive+0x80>
 800e3c8:	887b      	ldrh	r3, [r7, #2]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d103      	bne.n	800e3d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3d4:	e1c0      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b04      	cmp	r3, #4
 800e3e0:	d003      	beq.n	800e3ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2205      	movs	r2, #5
 800e3e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	887a      	ldrh	r2, [r7, #2]
 800e3fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	887a      	ldrh	r2, [r7, #2]
 800e402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	68ba      	ldr	r2, [r7, #8]
 800e40a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	887a      	ldrh	r2, [r7, #2]
 800e410:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	887a      	ldrh	r2, [r7, #2]
 800e416:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2200      	movs	r2, #0
 800e41c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e42c:	d802      	bhi.n	800e434 <HAL_SPI_TransmitReceive+0xe6>
 800e42e:	8a3b      	ldrh	r3, [r7, #16]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d908      	bls.n	800e446 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	685a      	ldr	r2, [r3, #4]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e442:	605a      	str	r2, [r3, #4]
 800e444:	e007      	b.n	800e456 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	685a      	ldr	r2, [r3, #4]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e454:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e460:	2b40      	cmp	r3, #64	; 0x40
 800e462:	d007      	beq.n	800e474 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e47c:	d97c      	bls.n	800e578 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <HAL_SPI_TransmitReceive+0x13e>
 800e486:	8a7b      	ldrh	r3, [r7, #18]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d169      	bne.n	800e560 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e490:	881a      	ldrh	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49c:	1c9a      	adds	r2, r3, #2
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4b0:	e056      	b.n	800e560 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	f003 0302 	and.w	r3, r3, #2
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d11b      	bne.n	800e4f8 <HAL_SPI_TransmitReceive+0x1aa>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d016      	beq.n	800e4f8 <HAL_SPI_TransmitReceive+0x1aa>
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d113      	bne.n	800e4f8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d4:	881a      	ldrh	r2, [r3, #0]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e0:	1c9a      	adds	r2, r3, #2
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	f003 0301 	and.w	r3, r3, #1
 800e502:	2b01      	cmp	r3, #1
 800e504:	d11c      	bne.n	800e540 <HAL_SPI_TransmitReceive+0x1f2>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d016      	beq.n	800e540 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68da      	ldr	r2, [r3, #12]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51c:	b292      	uxth	r2, r2
 800e51e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e524:	1c9a      	adds	r2, r3, #2
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e530:	b29b      	uxth	r3, r3
 800e532:	3b01      	subs	r3, #1
 800e534:	b29a      	uxth	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e53c:	2301      	movs	r3, #1
 800e53e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e540:	f7fa fff2 	bl	8009528 <HAL_GetTick>
 800e544:	4602      	mov	r2, r0
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d807      	bhi.n	800e560 <HAL_SPI_TransmitReceive+0x212>
 800e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e556:	d003      	beq.n	800e560 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e558:	2303      	movs	r3, #3
 800e55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e55e:	e0fb      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e564:	b29b      	uxth	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1a3      	bne.n	800e4b2 <HAL_SPI_TransmitReceive+0x164>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e570:	b29b      	uxth	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	d19d      	bne.n	800e4b2 <HAL_SPI_TransmitReceive+0x164>
 800e576:	e0df      	b.n	800e738 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d003      	beq.n	800e588 <HAL_SPI_TransmitReceive+0x23a>
 800e580:	8a7b      	ldrh	r3, [r7, #18]
 800e582:	2b01      	cmp	r3, #1
 800e584:	f040 80cb 	bne.w	800e71e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d912      	bls.n	800e5b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e596:	881a      	ldrh	r2, [r3, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a2:	1c9a      	adds	r2, r3, #2
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	3b02      	subs	r3, #2
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5b6:	e0b2      	b.n	800e71e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	7812      	ldrb	r2, [r2, #0]
 800e5c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ca:	1c5a      	adds	r2, r3, #1
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5de:	e09e      	b.n	800e71e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f003 0302 	and.w	r3, r3, #2
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d134      	bne.n	800e658 <HAL_SPI_TransmitReceive+0x30a>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d02f      	beq.n	800e658 <HAL_SPI_TransmitReceive+0x30a>
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d12c      	bne.n	800e658 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e602:	b29b      	uxth	r3, r3
 800e604:	2b01      	cmp	r3, #1
 800e606:	d912      	bls.n	800e62e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60c:	881a      	ldrh	r2, [r3, #0]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e618:	1c9a      	adds	r2, r3, #2
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e622:	b29b      	uxth	r3, r3
 800e624:	3b02      	subs	r3, #2
 800e626:	b29a      	uxth	r2, r3
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e62c:	e012      	b.n	800e654 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	330c      	adds	r3, #12
 800e638:	7812      	ldrb	r2, [r2, #0]
 800e63a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	3b01      	subs	r3, #1
 800e64e:	b29a      	uxth	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e654:	2300      	movs	r3, #0
 800e656:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b01      	cmp	r3, #1
 800e664:	d148      	bne.n	800e6f8 <HAL_SPI_TransmitReceive+0x3aa>
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d042      	beq.n	800e6f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d923      	bls.n	800e6c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e688:	b292      	uxth	r2, r2
 800e68a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e690:	1c9a      	adds	r2, r3, #2
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	3b02      	subs	r3, #2
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d81f      	bhi.n	800e6f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	685a      	ldr	r2, [r3, #4]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e6c2:	605a      	str	r2, [r3, #4]
 800e6c4:	e016      	b.n	800e6f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f103 020c 	add.w	r2, r3, #12
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d2:	7812      	ldrb	r2, [r2, #0]
 800e6d4:	b2d2      	uxtb	r2, r2
 800e6d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e6f8:	f7fa ff16 	bl	8009528 <HAL_GetTick>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e704:	429a      	cmp	r2, r3
 800e706:	d803      	bhi.n	800e710 <HAL_SPI_TransmitReceive+0x3c2>
 800e708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e70e:	d102      	bne.n	800e716 <HAL_SPI_TransmitReceive+0x3c8>
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	2b00      	cmp	r3, #0
 800e714:	d103      	bne.n	800e71e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e716:	2303      	movs	r3, #3
 800e718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e71c:	e01c      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e722:	b29b      	uxth	r3, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	f47f af5b 	bne.w	800e5e0 <HAL_SPI_TransmitReceive+0x292>
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e730:	b29b      	uxth	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	f47f af54 	bne.w	800e5e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e738:	69fa      	ldr	r2, [r7, #28]
 800e73a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 f98f 	bl	800ea60 <SPI_EndRxTxTransaction>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d006      	beq.n	800e756 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2220      	movs	r2, #32
 800e752:	661a      	str	r2, [r3, #96]	; 0x60
 800e754:	e000      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e756:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3728      	adds	r7, #40	; 0x28
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b088      	sub	sp, #32
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	4613      	mov	r3, r2
 800e782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e784:	f7fa fed0 	bl	8009528 <HAL_GetTick>
 800e788:	4602      	mov	r2, r0
 800e78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78c:	1a9b      	subs	r3, r3, r2
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	4413      	add	r3, r2
 800e792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e794:	f7fa fec8 	bl	8009528 <HAL_GetTick>
 800e798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e79a:	4b39      	ldr	r3, [pc, #228]	; (800e880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	015b      	lsls	r3, r3, #5
 800e7a0:	0d1b      	lsrs	r3, r3, #20
 800e7a2:	69fa      	ldr	r2, [r7, #28]
 800e7a4:	fb02 f303 	mul.w	r3, r2, r3
 800e7a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7aa:	e054      	b.n	800e856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b2:	d050      	beq.n	800e856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e7b4:	f7fa feb8 	bl	8009528 <HAL_GetTick>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	69fa      	ldr	r2, [r7, #28]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d902      	bls.n	800e7ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d13d      	bne.n	800e846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685a      	ldr	r2, [r3, #4]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e7d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7e2:	d111      	bne.n	800e808 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7ec:	d004      	beq.n	800e7f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7f6:	d107      	bne.n	800e808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e810:	d10f      	bne.n	800e832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2201      	movs	r2, #1
 800e836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e842:	2303      	movs	r3, #3
 800e844:	e017      	b.n	800e876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d101      	bne.n	800e850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e84c:	2300      	movs	r3, #0
 800e84e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	3b01      	subs	r3, #1
 800e854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	689a      	ldr	r2, [r3, #8]
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	4013      	ands	r3, r2
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	429a      	cmp	r2, r3
 800e864:	bf0c      	ite	eq
 800e866:	2301      	moveq	r3, #1
 800e868:	2300      	movne	r3, #0
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	461a      	mov	r2, r3
 800e86e:	79fb      	ldrb	r3, [r7, #7]
 800e870:	429a      	cmp	r2, r3
 800e872:	d19b      	bne.n	800e7ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e874:	2300      	movs	r3, #0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3720      	adds	r7, #32
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	20000048 	.word	0x20000048

0800e884 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b08a      	sub	sp, #40	; 0x28
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
 800e890:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e892:	2300      	movs	r3, #0
 800e894:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e896:	f7fa fe47 	bl	8009528 <HAL_GetTick>
 800e89a:	4602      	mov	r2, r0
 800e89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89e:	1a9b      	subs	r3, r3, r2
 800e8a0:	683a      	ldr	r2, [r7, #0]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e8a6:	f7fa fe3f 	bl	8009528 <HAL_GetTick>
 800e8aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	330c      	adds	r3, #12
 800e8b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e8b4:	4b3d      	ldr	r3, [pc, #244]	; (800e9ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	4413      	add	r3, r2
 800e8be:	00da      	lsls	r2, r3, #3
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	0d1b      	lsrs	r3, r3, #20
 800e8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c6:	fb02 f303 	mul.w	r3, r2, r3
 800e8ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e8cc:	e060      	b.n	800e990 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e8d4:	d107      	bne.n	800e8e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d104      	bne.n	800e8e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e8e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ec:	d050      	beq.n	800e990 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e8ee:	f7fa fe1b 	bl	8009528 <HAL_GetTick>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d902      	bls.n	800e904 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	2b00      	cmp	r3, #0
 800e902:	d13d      	bne.n	800e980 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e91c:	d111      	bne.n	800e942 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e926:	d004      	beq.n	800e932 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	689b      	ldr	r3, [r3, #8]
 800e92c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e930:	d107      	bne.n	800e942 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e940:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e94a:	d10f      	bne.n	800e96c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e95a:	601a      	str	r2, [r3, #0]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e96a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e97c:	2303      	movs	r3, #3
 800e97e:	e010      	b.n	800e9a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d101      	bne.n	800e98a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e986:	2300      	movs	r3, #0
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	3b01      	subs	r3, #1
 800e98e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	689a      	ldr	r2, [r3, #8]
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	4013      	ands	r3, r2
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d196      	bne.n	800e8ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3728      	adds	r7, #40	; 0x28
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	20000048 	.word	0x20000048

0800e9b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9c4:	d111      	bne.n	800e9ea <SPI_EndRxTransaction+0x3a>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ce:	d004      	beq.n	800e9da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9d8:	d107      	bne.n	800e9ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	9300      	str	r3, [sp, #0]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	2180      	movs	r1, #128	; 0x80
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f7ff febd 	bl	800e774 <SPI_WaitFlagStateUntilTimeout>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d007      	beq.n	800ea10 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea04:	f043 0220 	orr.w	r2, r3, #32
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea0c:	2303      	movs	r3, #3
 800ea0e:	e023      	b.n	800ea58 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea18:	d11d      	bne.n	800ea56 <SPI_EndRxTransaction+0xa6>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea22:	d004      	beq.n	800ea2e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea2c:	d113      	bne.n	800ea56 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f7ff ff22 	bl	800e884 <SPI_WaitFifoStateUntilTimeout>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d007      	beq.n	800ea56 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea4a:	f043 0220 	orr.w	r2, r3, #32
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ea52:	2303      	movs	r3, #3
 800ea54:	e000      	b.n	800ea58 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af02      	add	r7, sp, #8
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f7ff ff03 	bl	800e884 <SPI_WaitFifoStateUntilTimeout>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d007      	beq.n	800ea94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea88:	f043 0220 	orr.w	r2, r3, #32
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea90:	2303      	movs	r3, #3
 800ea92:	e027      	b.n	800eae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	9300      	str	r3, [sp, #0]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	2180      	movs	r1, #128	; 0x80
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f7ff fe68 	bl	800e774 <SPI_WaitFlagStateUntilTimeout>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d007      	beq.n	800eaba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaae:	f043 0220 	orr.w	r2, r3, #32
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eab6:	2303      	movs	r3, #3
 800eab8:	e014      	b.n	800eae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7ff fedc 	bl	800e884 <SPI_WaitFifoStateUntilTimeout>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d007      	beq.n	800eae2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ead6:	f043 0220 	orr.w	r2, r3, #32
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eade:	2303      	movs	r3, #3
 800eae0:	e000      	b.n	800eae4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3710      	adds	r7, #16
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e049      	b.n	800eb92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d106      	bne.n	800eb18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7fa f950 	bl	8008db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3304      	adds	r3, #4
 800eb28:	4619      	mov	r1, r3
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	f000 ff3e 	bl	800f9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3708      	adds	r7, #8
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
	...

0800eb9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d001      	beq.n	800ebb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e047      	b.n	800ec44 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2202      	movs	r2, #2
 800ebb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a23      	ldr	r2, [pc, #140]	; (800ec50 <HAL_TIM_Base_Start+0xb4>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d01d      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebce:	d018      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a1f      	ldr	r2, [pc, #124]	; (800ec54 <HAL_TIM_Base_Start+0xb8>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d013      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a1e      	ldr	r2, [pc, #120]	; (800ec58 <HAL_TIM_Base_Start+0xbc>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d00e      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a1c      	ldr	r2, [pc, #112]	; (800ec5c <HAL_TIM_Base_Start+0xc0>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d009      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a1b      	ldr	r2, [pc, #108]	; (800ec60 <HAL_TIM_Base_Start+0xc4>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d004      	beq.n	800ec02 <HAL_TIM_Base_Start+0x66>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a19      	ldr	r2, [pc, #100]	; (800ec64 <HAL_TIM_Base_Start+0xc8>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d115      	bne.n	800ec2e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	689a      	ldr	r2, [r3, #8]
 800ec08:	4b17      	ldr	r3, [pc, #92]	; (800ec68 <HAL_TIM_Base_Start+0xcc>)
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2b06      	cmp	r3, #6
 800ec12:	d015      	beq.n	800ec40 <HAL_TIM_Base_Start+0xa4>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec1a:	d011      	beq.n	800ec40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f042 0201 	orr.w	r2, r2, #1
 800ec2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec2c:	e008      	b.n	800ec40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f042 0201 	orr.w	r2, r2, #1
 800ec3c:	601a      	str	r2, [r3, #0]
 800ec3e:	e000      	b.n	800ec42 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3714      	adds	r7, #20
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	40012c00 	.word	0x40012c00
 800ec54:	40000400 	.word	0x40000400
 800ec58:	40000800 	.word	0x40000800
 800ec5c:	40000c00 	.word	0x40000c00
 800ec60:	40013400 	.word	0x40013400
 800ec64:	40014000 	.word	0x40014000
 800ec68:	00010007 	.word	0x00010007

0800ec6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d001      	beq.n	800ec84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e04f      	b.n	800ed24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2202      	movs	r2, #2
 800ec88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68da      	ldr	r2, [r3, #12]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f042 0201 	orr.w	r2, r2, #1
 800ec9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a23      	ldr	r2, [pc, #140]	; (800ed30 <HAL_TIM_Base_Start_IT+0xc4>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d01d      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecae:	d018      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a1f      	ldr	r2, [pc, #124]	; (800ed34 <HAL_TIM_Base_Start_IT+0xc8>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d013      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4a1e      	ldr	r2, [pc, #120]	; (800ed38 <HAL_TIM_Base_Start_IT+0xcc>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d00e      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a1c      	ldr	r2, [pc, #112]	; (800ed3c <HAL_TIM_Base_Start_IT+0xd0>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d009      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a1b      	ldr	r2, [pc, #108]	; (800ed40 <HAL_TIM_Base_Start_IT+0xd4>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d004      	beq.n	800ece2 <HAL_TIM_Base_Start_IT+0x76>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a19      	ldr	r2, [pc, #100]	; (800ed44 <HAL_TIM_Base_Start_IT+0xd8>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d115      	bne.n	800ed0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	689a      	ldr	r2, [r3, #8]
 800ece8:	4b17      	ldr	r3, [pc, #92]	; (800ed48 <HAL_TIM_Base_Start_IT+0xdc>)
 800ecea:	4013      	ands	r3, r2
 800ecec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2b06      	cmp	r3, #6
 800ecf2:	d015      	beq.n	800ed20 <HAL_TIM_Base_Start_IT+0xb4>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecfa:	d011      	beq.n	800ed20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f042 0201 	orr.w	r2, r2, #1
 800ed0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed0c:	e008      	b.n	800ed20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f042 0201 	orr.w	r2, r2, #1
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	e000      	b.n	800ed22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr
 800ed30:	40012c00 	.word	0x40012c00
 800ed34:	40000400 	.word	0x40000400
 800ed38:	40000800 	.word	0x40000800
 800ed3c:	40000c00 	.word	0x40000c00
 800ed40:	40013400 	.word	0x40013400
 800ed44:	40014000 	.word	0x40014000
 800ed48:	00010007 	.word	0x00010007

0800ed4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e049      	b.n	800edf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d106      	bne.n	800ed78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f841 	bl	800edfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2202      	movs	r2, #2
 800ed7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	3304      	adds	r3, #4
 800ed88:	4619      	mov	r1, r3
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	f000 fe0e 	bl	800f9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800edfa:	b480      	push	{r7}
 800edfc:	b083      	sub	sp, #12
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ee02:	bf00      	nop
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr
	...

0800ee10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d109      	bne.n	800ee34 <HAL_TIM_PWM_Start+0x24>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	bf14      	ite	ne
 800ee2c:	2301      	movne	r3, #1
 800ee2e:	2300      	moveq	r3, #0
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	e03c      	b.n	800eeae <HAL_TIM_PWM_Start+0x9e>
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2b04      	cmp	r3, #4
 800ee38:	d109      	bne.n	800ee4e <HAL_TIM_PWM_Start+0x3e>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	bf14      	ite	ne
 800ee46:	2301      	movne	r3, #1
 800ee48:	2300      	moveq	r3, #0
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	e02f      	b.n	800eeae <HAL_TIM_PWM_Start+0x9e>
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b08      	cmp	r3, #8
 800ee52:	d109      	bne.n	800ee68 <HAL_TIM_PWM_Start+0x58>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	bf14      	ite	ne
 800ee60:	2301      	movne	r3, #1
 800ee62:	2300      	moveq	r3, #0
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	e022      	b.n	800eeae <HAL_TIM_PWM_Start+0x9e>
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2b0c      	cmp	r3, #12
 800ee6c:	d109      	bne.n	800ee82 <HAL_TIM_PWM_Start+0x72>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	bf14      	ite	ne
 800ee7a:	2301      	movne	r3, #1
 800ee7c:	2300      	moveq	r3, #0
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	e015      	b.n	800eeae <HAL_TIM_PWM_Start+0x9e>
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	2b10      	cmp	r3, #16
 800ee86:	d109      	bne.n	800ee9c <HAL_TIM_PWM_Start+0x8c>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	bf14      	ite	ne
 800ee94:	2301      	movne	r3, #1
 800ee96:	2300      	moveq	r3, #0
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	e008      	b.n	800eeae <HAL_TIM_PWM_Start+0x9e>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	bf14      	ite	ne
 800eea8:	2301      	movne	r3, #1
 800eeaa:	2300      	moveq	r3, #0
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d001      	beq.n	800eeb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e09c      	b.n	800eff0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d104      	bne.n	800eec6 <HAL_TIM_PWM_Start+0xb6>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2202      	movs	r2, #2
 800eec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eec4:	e023      	b.n	800ef0e <HAL_TIM_PWM_Start+0xfe>
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	2b04      	cmp	r3, #4
 800eeca:	d104      	bne.n	800eed6 <HAL_TIM_PWM_Start+0xc6>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2202      	movs	r2, #2
 800eed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eed4:	e01b      	b.n	800ef0e <HAL_TIM_PWM_Start+0xfe>
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2b08      	cmp	r3, #8
 800eeda:	d104      	bne.n	800eee6 <HAL_TIM_PWM_Start+0xd6>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2202      	movs	r2, #2
 800eee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eee4:	e013      	b.n	800ef0e <HAL_TIM_PWM_Start+0xfe>
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	2b0c      	cmp	r3, #12
 800eeea:	d104      	bne.n	800eef6 <HAL_TIM_PWM_Start+0xe6>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2202      	movs	r2, #2
 800eef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eef4:	e00b      	b.n	800ef0e <HAL_TIM_PWM_Start+0xfe>
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	2b10      	cmp	r3, #16
 800eefa:	d104      	bne.n	800ef06 <HAL_TIM_PWM_Start+0xf6>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2202      	movs	r2, #2
 800ef00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef04:	e003      	b.n	800ef0e <HAL_TIM_PWM_Start+0xfe>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2202      	movs	r2, #2
 800ef0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2201      	movs	r2, #1
 800ef14:	6839      	ldr	r1, [r7, #0]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f001 fa78 	bl	801040c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a35      	ldr	r2, [pc, #212]	; (800eff8 <HAL_TIM_PWM_Start+0x1e8>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d013      	beq.n	800ef4e <HAL_TIM_PWM_Start+0x13e>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4a34      	ldr	r2, [pc, #208]	; (800effc <HAL_TIM_PWM_Start+0x1ec>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d00e      	beq.n	800ef4e <HAL_TIM_PWM_Start+0x13e>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a32      	ldr	r2, [pc, #200]	; (800f000 <HAL_TIM_PWM_Start+0x1f0>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d009      	beq.n	800ef4e <HAL_TIM_PWM_Start+0x13e>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4a31      	ldr	r2, [pc, #196]	; (800f004 <HAL_TIM_PWM_Start+0x1f4>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d004      	beq.n	800ef4e <HAL_TIM_PWM_Start+0x13e>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4a2f      	ldr	r2, [pc, #188]	; (800f008 <HAL_TIM_PWM_Start+0x1f8>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d101      	bne.n	800ef52 <HAL_TIM_PWM_Start+0x142>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e000      	b.n	800ef54 <HAL_TIM_PWM_Start+0x144>
 800ef52:	2300      	movs	r3, #0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d007      	beq.n	800ef68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a22      	ldr	r2, [pc, #136]	; (800eff8 <HAL_TIM_PWM_Start+0x1e8>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d01d      	beq.n	800efae <HAL_TIM_PWM_Start+0x19e>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef7a:	d018      	beq.n	800efae <HAL_TIM_PWM_Start+0x19e>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a22      	ldr	r2, [pc, #136]	; (800f00c <HAL_TIM_PWM_Start+0x1fc>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d013      	beq.n	800efae <HAL_TIM_PWM_Start+0x19e>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4a21      	ldr	r2, [pc, #132]	; (800f010 <HAL_TIM_PWM_Start+0x200>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d00e      	beq.n	800efae <HAL_TIM_PWM_Start+0x19e>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a1f      	ldr	r2, [pc, #124]	; (800f014 <HAL_TIM_PWM_Start+0x204>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d009      	beq.n	800efae <HAL_TIM_PWM_Start+0x19e>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	4a17      	ldr	r2, [pc, #92]	; (800effc <HAL_TIM_PWM_Start+0x1ec>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d004      	beq.n	800efae <HAL_TIM_PWM_Start+0x19e>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4a15      	ldr	r2, [pc, #84]	; (800f000 <HAL_TIM_PWM_Start+0x1f0>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d115      	bne.n	800efda <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	689a      	ldr	r2, [r3, #8]
 800efb4:	4b18      	ldr	r3, [pc, #96]	; (800f018 <HAL_TIM_PWM_Start+0x208>)
 800efb6:	4013      	ands	r3, r2
 800efb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2b06      	cmp	r3, #6
 800efbe:	d015      	beq.n	800efec <HAL_TIM_PWM_Start+0x1dc>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efc6:	d011      	beq.n	800efec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f042 0201 	orr.w	r2, r2, #1
 800efd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd8:	e008      	b.n	800efec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f042 0201 	orr.w	r2, r2, #1
 800efe8:	601a      	str	r2, [r3, #0]
 800efea:	e000      	b.n	800efee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	40012c00 	.word	0x40012c00
 800effc:	40013400 	.word	0x40013400
 800f000:	40014000 	.word	0x40014000
 800f004:	40014400 	.word	0x40014400
 800f008:	40014800 	.word	0x40014800
 800f00c:	40000400 	.word	0x40000400
 800f010:	40000800 	.word	0x40000800
 800f014:	40000c00 	.word	0x40000c00
 800f018:	00010007 	.word	0x00010007

0800f01c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d101      	bne.n	800f02e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	e049      	b.n	800f0c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d106      	bne.n	800f048 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 f841 	bl	800f0ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2202      	movs	r2, #2
 800f04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	3304      	adds	r3, #4
 800f058:	4619      	mov	r1, r3
 800f05a:	4610      	mov	r0, r2
 800f05c:	f000 fca6 	bl	800f9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2201      	movs	r2, #1
 800f064:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2201      	movs	r2, #1
 800f084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2201      	movs	r2, #1
 800f08c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2201      	movs	r2, #1
 800f094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3708      	adds	r7, #8
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800f0ca:	b480      	push	{r7}
 800f0cc:	b083      	sub	sp, #12
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800f0d2:	bf00      	nop
 800f0d4:	370c      	adds	r7, #12
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b086      	sub	sp, #24
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
 800f0e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d101      	bne.n	800f0f2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e097      	b.n	800f222 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d106      	bne.n	800f10c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7f9 feea 	bl	8008ee0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2202      	movs	r2, #2
 800f110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	6812      	ldr	r2, [r2, #0]
 800f11e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800f122:	f023 0307 	bic.w	r3, r3, #7
 800f126:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	3304      	adds	r3, #4
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f000 fc3a 	bl	800f9ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	6a1b      	ldr	r3, [r3, #32]
 800f14e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	697a      	ldr	r2, [r7, #20]
 800f156:	4313      	orrs	r3, r2
 800f158:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f160:	f023 0303 	bic.w	r3, r3, #3
 800f164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	689a      	ldr	r2, [r3, #8]
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	699b      	ldr	r3, [r3, #24]
 800f16e:	021b      	lsls	r3, r3, #8
 800f170:	4313      	orrs	r3, r2
 800f172:	693a      	ldr	r2, [r7, #16]
 800f174:	4313      	orrs	r3, r2
 800f176:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f17e:	f023 030c 	bic.w	r3, r3, #12
 800f182:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f18a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f18e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	68da      	ldr	r2, [r3, #12]
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	69db      	ldr	r3, [r3, #28]
 800f198:	021b      	lsls	r3, r3, #8
 800f19a:	4313      	orrs	r3, r2
 800f19c:	693a      	ldr	r2, [r7, #16]
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	011a      	lsls	r2, r3, #4
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	6a1b      	ldr	r3, [r3, #32]
 800f1ac:	031b      	lsls	r3, r3, #12
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	693a      	ldr	r2, [r7, #16]
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f1bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f1c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	685a      	ldr	r2, [r3, #4]
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	695b      	ldr	r3, [r3, #20]
 800f1ce:	011b      	lsls	r3, r3, #4
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	697a      	ldr	r2, [r7, #20]
 800f1de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2201      	movs	r2, #1
 800f20c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2201      	movs	r2, #1
 800f214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2201      	movs	r2, #1
 800f21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f220:	2300      	movs	r3, #0
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b082      	sub	sp, #8
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	f003 0302 	and.w	r3, r3, #2
 800f23c:	2b02      	cmp	r3, #2
 800f23e:	d122      	bne.n	800f286 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	f003 0302 	and.w	r3, r3, #2
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d11b      	bne.n	800f286 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f06f 0202 	mvn.w	r2, #2
 800f256:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2201      	movs	r2, #1
 800f25c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	f003 0303 	and.w	r3, r3, #3
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d003      	beq.n	800f274 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fb7e 	bl	800f96e <HAL_TIM_IC_CaptureCallback>
 800f272:	e005      	b.n	800f280 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 fb70 	bl	800f95a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fb81 	bl	800f982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	f003 0304 	and.w	r3, r3, #4
 800f290:	2b04      	cmp	r3, #4
 800f292:	d122      	bne.n	800f2da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	f003 0304 	and.w	r3, r3, #4
 800f29e:	2b04      	cmp	r3, #4
 800f2a0:	d11b      	bne.n	800f2da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f06f 0204 	mvn.w	r2, #4
 800f2aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	699b      	ldr	r3, [r3, #24]
 800f2b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d003      	beq.n	800f2c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 fb54 	bl	800f96e <HAL_TIM_IC_CaptureCallback>
 800f2c6:	e005      	b.n	800f2d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 fb46 	bl	800f95a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 fb57 	bl	800f982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	691b      	ldr	r3, [r3, #16]
 800f2e0:	f003 0308 	and.w	r3, r3, #8
 800f2e4:	2b08      	cmp	r3, #8
 800f2e6:	d122      	bne.n	800f32e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	f003 0308 	and.w	r3, r3, #8
 800f2f2:	2b08      	cmp	r3, #8
 800f2f4:	d11b      	bne.n	800f32e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f06f 0208 	mvn.w	r2, #8
 800f2fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2204      	movs	r2, #4
 800f304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	69db      	ldr	r3, [r3, #28]
 800f30c:	f003 0303 	and.w	r3, r3, #3
 800f310:	2b00      	cmp	r3, #0
 800f312:	d003      	beq.n	800f31c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 fb2a 	bl	800f96e <HAL_TIM_IC_CaptureCallback>
 800f31a:	e005      	b.n	800f328 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fb1c 	bl	800f95a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 fb2d 	bl	800f982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	f003 0310 	and.w	r3, r3, #16
 800f338:	2b10      	cmp	r3, #16
 800f33a:	d122      	bne.n	800f382 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	f003 0310 	and.w	r3, r3, #16
 800f346:	2b10      	cmp	r3, #16
 800f348:	d11b      	bne.n	800f382 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f06f 0210 	mvn.w	r2, #16
 800f352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2208      	movs	r2, #8
 800f358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	69db      	ldr	r3, [r3, #28]
 800f360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f364:	2b00      	cmp	r3, #0
 800f366:	d003      	beq.n	800f370 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 fb00 	bl	800f96e <HAL_TIM_IC_CaptureCallback>
 800f36e:	e005      	b.n	800f37c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f000 faf2 	bl	800f95a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fb03 	bl	800f982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	691b      	ldr	r3, [r3, #16]
 800f388:	f003 0301 	and.w	r3, r3, #1
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d10e      	bne.n	800f3ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	f003 0301 	and.w	r3, r3, #1
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d107      	bne.n	800f3ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f06f 0201 	mvn.w	r2, #1
 800f3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7f9 f9a1 	bl	80086f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	691b      	ldr	r3, [r3, #16]
 800f3b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3b8:	2b80      	cmp	r3, #128	; 0x80
 800f3ba:	d10e      	bne.n	800f3da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3c6:	2b80      	cmp	r3, #128	; 0x80
 800f3c8:	d107      	bne.n	800f3da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f001 f971 	bl	80106bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3e8:	d10e      	bne.n	800f408 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3f4:	2b80      	cmp	r3, #128	; 0x80
 800f3f6:	d107      	bne.n	800f408 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f001 f964 	bl	80106d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	691b      	ldr	r3, [r3, #16]
 800f40e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f412:	2b40      	cmp	r3, #64	; 0x40
 800f414:	d10e      	bne.n	800f434 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f420:	2b40      	cmp	r3, #64	; 0x40
 800f422:	d107      	bne.n	800f434 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fab1 	bl	800f996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	f003 0320 	and.w	r3, r3, #32
 800f43e:	2b20      	cmp	r3, #32
 800f440:	d10e      	bne.n	800f460 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	f003 0320 	and.w	r3, r3, #32
 800f44c:	2b20      	cmp	r3, #32
 800f44e:	d107      	bne.n	800f460 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f06f 0220 	mvn.w	r2, #32
 800f458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f001 f924 	bl	80106a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f460:	bf00      	nop
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b086      	sub	sp, #24
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f474:	2300      	movs	r3, #0
 800f476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d101      	bne.n	800f486 <HAL_TIM_IC_ConfigChannel+0x1e>
 800f482:	2302      	movs	r3, #2
 800f484:	e088      	b.n	800f598 <HAL_TIM_IC_ConfigChannel+0x130>
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2201      	movs	r2, #1
 800f48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d11b      	bne.n	800f4cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800f4a4:	f000 fdf2 	bl	801008c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	699a      	ldr	r2, [r3, #24]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f022 020c 	bic.w	r2, r2, #12
 800f4b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6999      	ldr	r1, [r3, #24]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	689a      	ldr	r2, [r3, #8]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	430a      	orrs	r2, r1
 800f4c8:	619a      	str	r2, [r3, #24]
 800f4ca:	e060      	b.n	800f58e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b04      	cmp	r3, #4
 800f4d0:	d11c      	bne.n	800f50c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800f4e2:	f000 fe70 	bl	80101c6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	699a      	ldr	r2, [r3, #24]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f4f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	6999      	ldr	r1, [r3, #24]
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	021a      	lsls	r2, r3, #8
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	430a      	orrs	r2, r1
 800f508:	619a      	str	r2, [r3, #24]
 800f50a:	e040      	b.n	800f58e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b08      	cmp	r3, #8
 800f510:	d11b      	bne.n	800f54a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800f522:	f000 febd 	bl	80102a0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	69da      	ldr	r2, [r3, #28]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f022 020c 	bic.w	r2, r2, #12
 800f534:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	69d9      	ldr	r1, [r3, #28]
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	689a      	ldr	r2, [r3, #8]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	430a      	orrs	r2, r1
 800f546:	61da      	str	r2, [r3, #28]
 800f548:	e021      	b.n	800f58e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2b0c      	cmp	r3, #12
 800f54e:	d11c      	bne.n	800f58a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800f560:	f000 feda 	bl	8010318 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	69da      	ldr	r2, [r3, #28]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f572:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	69d9      	ldr	r1, [r3, #28]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	689b      	ldr	r3, [r3, #8]
 800f57e:	021a      	lsls	r2, r3, #8
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	430a      	orrs	r2, r1
 800f586:	61da      	str	r2, [r3, #28]
 800f588:	e001      	b.n	800f58e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2200      	movs	r2, #0
 800f592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f596:	7dfb      	ldrb	r3, [r7, #23]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3718      	adds	r7, #24
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d101      	bne.n	800f5be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f5ba:	2302      	movs	r3, #2
 800f5bc:	e0ff      	b.n	800f7be <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b14      	cmp	r3, #20
 800f5ca:	f200 80f0 	bhi.w	800f7ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f5ce:	a201      	add	r2, pc, #4	; (adr r2, 800f5d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d4:	0800f629 	.word	0x0800f629
 800f5d8:	0800f7af 	.word	0x0800f7af
 800f5dc:	0800f7af 	.word	0x0800f7af
 800f5e0:	0800f7af 	.word	0x0800f7af
 800f5e4:	0800f669 	.word	0x0800f669
 800f5e8:	0800f7af 	.word	0x0800f7af
 800f5ec:	0800f7af 	.word	0x0800f7af
 800f5f0:	0800f7af 	.word	0x0800f7af
 800f5f4:	0800f6ab 	.word	0x0800f6ab
 800f5f8:	0800f7af 	.word	0x0800f7af
 800f5fc:	0800f7af 	.word	0x0800f7af
 800f600:	0800f7af 	.word	0x0800f7af
 800f604:	0800f6eb 	.word	0x0800f6eb
 800f608:	0800f7af 	.word	0x0800f7af
 800f60c:	0800f7af 	.word	0x0800f7af
 800f610:	0800f7af 	.word	0x0800f7af
 800f614:	0800f72d 	.word	0x0800f72d
 800f618:	0800f7af 	.word	0x0800f7af
 800f61c:	0800f7af 	.word	0x0800f7af
 800f620:	0800f7af 	.word	0x0800f7af
 800f624:	0800f76d 	.word	0x0800f76d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68b9      	ldr	r1, [r7, #8]
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fa56 	bl	800fae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	699a      	ldr	r2, [r3, #24]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f042 0208 	orr.w	r2, r2, #8
 800f642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	699a      	ldr	r2, [r3, #24]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f022 0204 	bic.w	r2, r2, #4
 800f652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	6999      	ldr	r1, [r3, #24]
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	691a      	ldr	r2, [r3, #16]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	430a      	orrs	r2, r1
 800f664:	619a      	str	r2, [r3, #24]
      break;
 800f666:	e0a5      	b.n	800f7b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	68b9      	ldr	r1, [r7, #8]
 800f66e:	4618      	mov	r0, r3
 800f670:	f000 fac6 	bl	800fc00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	699a      	ldr	r2, [r3, #24]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	699a      	ldr	r2, [r3, #24]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	6999      	ldr	r1, [r3, #24]
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	691b      	ldr	r3, [r3, #16]
 800f69e:	021a      	lsls	r2, r3, #8
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	430a      	orrs	r2, r1
 800f6a6:	619a      	str	r2, [r3, #24]
      break;
 800f6a8:	e084      	b.n	800f7b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68b9      	ldr	r1, [r7, #8]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 fb2f 	bl	800fd14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	69da      	ldr	r2, [r3, #28]
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f042 0208 	orr.w	r2, r2, #8
 800f6c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	69da      	ldr	r2, [r3, #28]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f022 0204 	bic.w	r2, r2, #4
 800f6d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	69d9      	ldr	r1, [r3, #28]
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	691a      	ldr	r2, [r3, #16]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	430a      	orrs	r2, r1
 800f6e6:	61da      	str	r2, [r3, #28]
      break;
 800f6e8:	e064      	b.n	800f7b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	68b9      	ldr	r1, [r7, #8]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 fb97 	bl	800fe24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	69da      	ldr	r2, [r3, #28]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	69da      	ldr	r2, [r3, #28]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	69d9      	ldr	r1, [r3, #28]
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	021a      	lsls	r2, r3, #8
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	430a      	orrs	r2, r1
 800f728:	61da      	str	r2, [r3, #28]
      break;
 800f72a:	e043      	b.n	800f7b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	68b9      	ldr	r1, [r7, #8]
 800f732:	4618      	mov	r0, r3
 800f734:	f000 fbe0 	bl	800fef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f042 0208 	orr.w	r2, r2, #8
 800f746:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f022 0204 	bic.w	r2, r2, #4
 800f756:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	691a      	ldr	r2, [r3, #16]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	430a      	orrs	r2, r1
 800f768:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f76a:	e023      	b.n	800f7b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	68b9      	ldr	r1, [r7, #8]
 800f772:	4618      	mov	r0, r3
 800f774:	f000 fc24 	bl	800ffc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	691b      	ldr	r3, [r3, #16]
 800f7a2:	021a      	lsls	r2, r3, #8
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	430a      	orrs	r2, r1
 800f7aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f7ac:	e002      	b.n	800f7b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	75fb      	strb	r3, [r7, #23]
      break;
 800f7b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3718      	adds	r7, #24
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop

0800f7c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d101      	bne.n	800f7e4 <HAL_TIM_ConfigClockSource+0x1c>
 800f7e0:	2302      	movs	r3, #2
 800f7e2:	e0b6      	b.n	800f952 <HAL_TIM_ConfigClockSource+0x18a>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2202      	movs	r2, #2
 800f7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800f802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f80e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	68ba      	ldr	r2, [r7, #8]
 800f816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f820:	d03e      	beq.n	800f8a0 <HAL_TIM_ConfigClockSource+0xd8>
 800f822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f826:	f200 8087 	bhi.w	800f938 <HAL_TIM_ConfigClockSource+0x170>
 800f82a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f82e:	f000 8086 	beq.w	800f93e <HAL_TIM_ConfigClockSource+0x176>
 800f832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f836:	d87f      	bhi.n	800f938 <HAL_TIM_ConfigClockSource+0x170>
 800f838:	2b70      	cmp	r3, #112	; 0x70
 800f83a:	d01a      	beq.n	800f872 <HAL_TIM_ConfigClockSource+0xaa>
 800f83c:	2b70      	cmp	r3, #112	; 0x70
 800f83e:	d87b      	bhi.n	800f938 <HAL_TIM_ConfigClockSource+0x170>
 800f840:	2b60      	cmp	r3, #96	; 0x60
 800f842:	d050      	beq.n	800f8e6 <HAL_TIM_ConfigClockSource+0x11e>
 800f844:	2b60      	cmp	r3, #96	; 0x60
 800f846:	d877      	bhi.n	800f938 <HAL_TIM_ConfigClockSource+0x170>
 800f848:	2b50      	cmp	r3, #80	; 0x50
 800f84a:	d03c      	beq.n	800f8c6 <HAL_TIM_ConfigClockSource+0xfe>
 800f84c:	2b50      	cmp	r3, #80	; 0x50
 800f84e:	d873      	bhi.n	800f938 <HAL_TIM_ConfigClockSource+0x170>
 800f850:	2b40      	cmp	r3, #64	; 0x40
 800f852:	d058      	beq.n	800f906 <HAL_TIM_ConfigClockSource+0x13e>
 800f854:	2b40      	cmp	r3, #64	; 0x40
 800f856:	d86f      	bhi.n	800f938 <HAL_TIM_ConfigClockSource+0x170>
 800f858:	2b30      	cmp	r3, #48	; 0x30
 800f85a:	d064      	beq.n	800f926 <HAL_TIM_ConfigClockSource+0x15e>
 800f85c:	2b30      	cmp	r3, #48	; 0x30
 800f85e:	d86b      	bhi.n	800f938 <HAL_TIM_ConfigClockSource+0x170>
 800f860:	2b20      	cmp	r3, #32
 800f862:	d060      	beq.n	800f926 <HAL_TIM_ConfigClockSource+0x15e>
 800f864:	2b20      	cmp	r3, #32
 800f866:	d867      	bhi.n	800f938 <HAL_TIM_ConfigClockSource+0x170>
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d05c      	beq.n	800f926 <HAL_TIM_ConfigClockSource+0x15e>
 800f86c:	2b10      	cmp	r3, #16
 800f86e:	d05a      	beq.n	800f926 <HAL_TIM_ConfigClockSource+0x15e>
 800f870:	e062      	b.n	800f938 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f882:	f000 fda3 	bl	80103cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	68ba      	ldr	r2, [r7, #8]
 800f89c:	609a      	str	r2, [r3, #8]
      break;
 800f89e:	e04f      	b.n	800f940 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f8b0:	f000 fd8c 	bl	80103cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	689a      	ldr	r2, [r3, #8]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f8c2:	609a      	str	r2, [r3, #8]
      break;
 800f8c4:	e03c      	b.n	800f940 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	f000 fc48 	bl	8010168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2150      	movs	r1, #80	; 0x50
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f000 fd57 	bl	8010392 <TIM_ITRx_SetConfig>
      break;
 800f8e4:	e02c      	b.n	800f940 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f000 fca4 	bl	8010240 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2160      	movs	r1, #96	; 0x60
 800f8fe:	4618      	mov	r0, r3
 800f900:	f000 fd47 	bl	8010392 <TIM_ITRx_SetConfig>
      break;
 800f904:	e01c      	b.n	800f940 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f912:	461a      	mov	r2, r3
 800f914:	f000 fc28 	bl	8010168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2140      	movs	r1, #64	; 0x40
 800f91e:	4618      	mov	r0, r3
 800f920:	f000 fd37 	bl	8010392 <TIM_ITRx_SetConfig>
      break;
 800f924:	e00c      	b.n	800f940 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4619      	mov	r1, r3
 800f930:	4610      	mov	r0, r2
 800f932:	f000 fd2e 	bl	8010392 <TIM_ITRx_SetConfig>
      break;
 800f936:	e003      	b.n	800f940 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f938:	2301      	movs	r3, #1
 800f93a:	73fb      	strb	r3, [r7, #15]
      break;
 800f93c:	e000      	b.n	800f940 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f93e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2201      	movs	r2, #1
 800f944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f950:	7bfb      	ldrb	r3, [r7, #15]
}
 800f952:	4618      	mov	r0, r3
 800f954:	3710      	adds	r7, #16
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f95a:	b480      	push	{r7}
 800f95c:	b083      	sub	sp, #12
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f962:	bf00      	nop
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f976:	bf00      	nop
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f982:	b480      	push	{r7}
 800f984:	b083      	sub	sp, #12
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f98a:	bf00      	nop
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f996:	b480      	push	{r7}
 800f998:	b083      	sub	sp, #12
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f99e:	bf00      	nop
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
	...

0800f9ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a40      	ldr	r2, [pc, #256]	; (800fac0 <TIM_Base_SetConfig+0x114>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d013      	beq.n	800f9ec <TIM_Base_SetConfig+0x40>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9ca:	d00f      	beq.n	800f9ec <TIM_Base_SetConfig+0x40>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a3d      	ldr	r2, [pc, #244]	; (800fac4 <TIM_Base_SetConfig+0x118>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d00b      	beq.n	800f9ec <TIM_Base_SetConfig+0x40>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a3c      	ldr	r2, [pc, #240]	; (800fac8 <TIM_Base_SetConfig+0x11c>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d007      	beq.n	800f9ec <TIM_Base_SetConfig+0x40>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a3b      	ldr	r2, [pc, #236]	; (800facc <TIM_Base_SetConfig+0x120>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d003      	beq.n	800f9ec <TIM_Base_SetConfig+0x40>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4a3a      	ldr	r2, [pc, #232]	; (800fad0 <TIM_Base_SetConfig+0x124>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d108      	bne.n	800f9fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4a2f      	ldr	r2, [pc, #188]	; (800fac0 <TIM_Base_SetConfig+0x114>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d01f      	beq.n	800fa46 <TIM_Base_SetConfig+0x9a>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa0c:	d01b      	beq.n	800fa46 <TIM_Base_SetConfig+0x9a>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a2c      	ldr	r2, [pc, #176]	; (800fac4 <TIM_Base_SetConfig+0x118>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d017      	beq.n	800fa46 <TIM_Base_SetConfig+0x9a>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4a2b      	ldr	r2, [pc, #172]	; (800fac8 <TIM_Base_SetConfig+0x11c>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d013      	beq.n	800fa46 <TIM_Base_SetConfig+0x9a>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4a2a      	ldr	r2, [pc, #168]	; (800facc <TIM_Base_SetConfig+0x120>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d00f      	beq.n	800fa46 <TIM_Base_SetConfig+0x9a>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4a29      	ldr	r2, [pc, #164]	; (800fad0 <TIM_Base_SetConfig+0x124>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d00b      	beq.n	800fa46 <TIM_Base_SetConfig+0x9a>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a28      	ldr	r2, [pc, #160]	; (800fad4 <TIM_Base_SetConfig+0x128>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d007      	beq.n	800fa46 <TIM_Base_SetConfig+0x9a>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	4a27      	ldr	r2, [pc, #156]	; (800fad8 <TIM_Base_SetConfig+0x12c>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d003      	beq.n	800fa46 <TIM_Base_SetConfig+0x9a>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4a26      	ldr	r2, [pc, #152]	; (800fadc <TIM_Base_SetConfig+0x130>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d108      	bne.n	800fa58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	4313      	orrs	r3, r2
 800fa56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	695b      	ldr	r3, [r3, #20]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	68fa      	ldr	r2, [r7, #12]
 800fa6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	689a      	ldr	r2, [r3, #8]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4a10      	ldr	r2, [pc, #64]	; (800fac0 <TIM_Base_SetConfig+0x114>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d00f      	beq.n	800faa4 <TIM_Base_SetConfig+0xf8>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a12      	ldr	r2, [pc, #72]	; (800fad0 <TIM_Base_SetConfig+0x124>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d00b      	beq.n	800faa4 <TIM_Base_SetConfig+0xf8>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4a11      	ldr	r2, [pc, #68]	; (800fad4 <TIM_Base_SetConfig+0x128>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d007      	beq.n	800faa4 <TIM_Base_SetConfig+0xf8>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4a10      	ldr	r2, [pc, #64]	; (800fad8 <TIM_Base_SetConfig+0x12c>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d003      	beq.n	800faa4 <TIM_Base_SetConfig+0xf8>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4a0f      	ldr	r2, [pc, #60]	; (800fadc <TIM_Base_SetConfig+0x130>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d103      	bne.n	800faac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	691a      	ldr	r2, [r3, #16]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2201      	movs	r2, #1
 800fab0:	615a      	str	r2, [r3, #20]
}
 800fab2:	bf00      	nop
 800fab4:	3714      	adds	r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop
 800fac0:	40012c00 	.word	0x40012c00
 800fac4:	40000400 	.word	0x40000400
 800fac8:	40000800 	.word	0x40000800
 800facc:	40000c00 	.word	0x40000c00
 800fad0:	40013400 	.word	0x40013400
 800fad4:	40014000 	.word	0x40014000
 800fad8:	40014400 	.word	0x40014400
 800fadc:	40014800 	.word	0x40014800

0800fae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a1b      	ldr	r3, [r3, #32]
 800faee:	f023 0201 	bic.w	r2, r3, #1
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6a1b      	ldr	r3, [r3, #32]
 800fafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f023 0303 	bic.w	r3, r3, #3
 800fb1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	4313      	orrs	r3, r2
 800fb24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	f023 0302 	bic.w	r3, r3, #2
 800fb2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	689b      	ldr	r3, [r3, #8]
 800fb32:	697a      	ldr	r2, [r7, #20]
 800fb34:	4313      	orrs	r3, r2
 800fb36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a2c      	ldr	r2, [pc, #176]	; (800fbec <TIM_OC1_SetConfig+0x10c>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d00f      	beq.n	800fb60 <TIM_OC1_SetConfig+0x80>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a2b      	ldr	r2, [pc, #172]	; (800fbf0 <TIM_OC1_SetConfig+0x110>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d00b      	beq.n	800fb60 <TIM_OC1_SetConfig+0x80>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a2a      	ldr	r2, [pc, #168]	; (800fbf4 <TIM_OC1_SetConfig+0x114>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d007      	beq.n	800fb60 <TIM_OC1_SetConfig+0x80>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a29      	ldr	r2, [pc, #164]	; (800fbf8 <TIM_OC1_SetConfig+0x118>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d003      	beq.n	800fb60 <TIM_OC1_SetConfig+0x80>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a28      	ldr	r2, [pc, #160]	; (800fbfc <TIM_OC1_SetConfig+0x11c>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d10c      	bne.n	800fb7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	f023 0308 	bic.w	r3, r3, #8
 800fb66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	697a      	ldr	r2, [r7, #20]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f023 0304 	bic.w	r3, r3, #4
 800fb78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4a1b      	ldr	r2, [pc, #108]	; (800fbec <TIM_OC1_SetConfig+0x10c>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d00f      	beq.n	800fba2 <TIM_OC1_SetConfig+0xc2>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	4a1a      	ldr	r2, [pc, #104]	; (800fbf0 <TIM_OC1_SetConfig+0x110>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d00b      	beq.n	800fba2 <TIM_OC1_SetConfig+0xc2>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4a19      	ldr	r2, [pc, #100]	; (800fbf4 <TIM_OC1_SetConfig+0x114>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d007      	beq.n	800fba2 <TIM_OC1_SetConfig+0xc2>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4a18      	ldr	r2, [pc, #96]	; (800fbf8 <TIM_OC1_SetConfig+0x118>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d003      	beq.n	800fba2 <TIM_OC1_SetConfig+0xc2>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4a17      	ldr	r2, [pc, #92]	; (800fbfc <TIM_OC1_SetConfig+0x11c>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d111      	bne.n	800fbc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fbb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	695b      	ldr	r3, [r3, #20]
 800fbb6:	693a      	ldr	r2, [r7, #16]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	699b      	ldr	r3, [r3, #24]
 800fbc0:	693a      	ldr	r2, [r7, #16]
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	685a      	ldr	r2, [r3, #4]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	697a      	ldr	r2, [r7, #20]
 800fbde:	621a      	str	r2, [r3, #32]
}
 800fbe0:	bf00      	nop
 800fbe2:	371c      	adds	r7, #28
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	40012c00 	.word	0x40012c00
 800fbf0:	40013400 	.word	0x40013400
 800fbf4:	40014000 	.word	0x40014000
 800fbf8:	40014400 	.word	0x40014400
 800fbfc:	40014800 	.word	0x40014800

0800fc00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b087      	sub	sp, #28
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6a1b      	ldr	r3, [r3, #32]
 800fc0e:	f023 0210 	bic.w	r2, r3, #16
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a1b      	ldr	r3, [r3, #32]
 800fc1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	699b      	ldr	r3, [r3, #24]
 800fc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fc2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	021b      	lsls	r3, r3, #8
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	4313      	orrs	r3, r2
 800fc46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	f023 0320 	bic.w	r3, r3, #32
 800fc4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	689b      	ldr	r3, [r3, #8]
 800fc54:	011b      	lsls	r3, r3, #4
 800fc56:	697a      	ldr	r2, [r7, #20]
 800fc58:	4313      	orrs	r3, r2
 800fc5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	4a28      	ldr	r2, [pc, #160]	; (800fd00 <TIM_OC2_SetConfig+0x100>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d003      	beq.n	800fc6c <TIM_OC2_SetConfig+0x6c>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	4a27      	ldr	r2, [pc, #156]	; (800fd04 <TIM_OC2_SetConfig+0x104>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d10d      	bne.n	800fc88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	011b      	lsls	r3, r3, #4
 800fc7a:	697a      	ldr	r2, [r7, #20]
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4a1d      	ldr	r2, [pc, #116]	; (800fd00 <TIM_OC2_SetConfig+0x100>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d00f      	beq.n	800fcb0 <TIM_OC2_SetConfig+0xb0>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	4a1c      	ldr	r2, [pc, #112]	; (800fd04 <TIM_OC2_SetConfig+0x104>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d00b      	beq.n	800fcb0 <TIM_OC2_SetConfig+0xb0>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4a1b      	ldr	r2, [pc, #108]	; (800fd08 <TIM_OC2_SetConfig+0x108>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d007      	beq.n	800fcb0 <TIM_OC2_SetConfig+0xb0>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4a1a      	ldr	r2, [pc, #104]	; (800fd0c <TIM_OC2_SetConfig+0x10c>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d003      	beq.n	800fcb0 <TIM_OC2_SetConfig+0xb0>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4a19      	ldr	r2, [pc, #100]	; (800fd10 <TIM_OC2_SetConfig+0x110>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d113      	bne.n	800fcd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fcb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fcbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	693a      	ldr	r2, [r7, #16]
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	699b      	ldr	r3, [r3, #24]
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	693a      	ldr	r2, [r7, #16]
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	693a      	ldr	r2, [r7, #16]
 800fcdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	621a      	str	r2, [r3, #32]
}
 800fcf2:	bf00      	nop
 800fcf4:	371c      	adds	r7, #28
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	40012c00 	.word	0x40012c00
 800fd04:	40013400 	.word	0x40013400
 800fd08:	40014000 	.word	0x40014000
 800fd0c:	40014400 	.word	0x40014400
 800fd10:	40014800 	.word	0x40014800

0800fd14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b087      	sub	sp, #28
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6a1b      	ldr	r3, [r3, #32]
 800fd22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6a1b      	ldr	r3, [r3, #32]
 800fd2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f023 0303 	bic.w	r3, r3, #3
 800fd4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	68fa      	ldr	r2, [r7, #12]
 800fd56:	4313      	orrs	r3, r2
 800fd58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	021b      	lsls	r3, r3, #8
 800fd68:	697a      	ldr	r2, [r7, #20]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4a27      	ldr	r2, [pc, #156]	; (800fe10 <TIM_OC3_SetConfig+0xfc>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d003      	beq.n	800fd7e <TIM_OC3_SetConfig+0x6a>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4a26      	ldr	r2, [pc, #152]	; (800fe14 <TIM_OC3_SetConfig+0x100>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d10d      	bne.n	800fd9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	021b      	lsls	r3, r3, #8
 800fd8c:	697a      	ldr	r2, [r7, #20]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4a1c      	ldr	r2, [pc, #112]	; (800fe10 <TIM_OC3_SetConfig+0xfc>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d00f      	beq.n	800fdc2 <TIM_OC3_SetConfig+0xae>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4a1b      	ldr	r2, [pc, #108]	; (800fe14 <TIM_OC3_SetConfig+0x100>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d00b      	beq.n	800fdc2 <TIM_OC3_SetConfig+0xae>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	4a1a      	ldr	r2, [pc, #104]	; (800fe18 <TIM_OC3_SetConfig+0x104>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d007      	beq.n	800fdc2 <TIM_OC3_SetConfig+0xae>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	4a19      	ldr	r2, [pc, #100]	; (800fe1c <TIM_OC3_SetConfig+0x108>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d003      	beq.n	800fdc2 <TIM_OC3_SetConfig+0xae>
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	4a18      	ldr	r2, [pc, #96]	; (800fe20 <TIM_OC3_SetConfig+0x10c>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d113      	bne.n	800fdea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fdc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fdd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	695b      	ldr	r3, [r3, #20]
 800fdd6:	011b      	lsls	r3, r3, #4
 800fdd8:	693a      	ldr	r2, [r7, #16]
 800fdda:	4313      	orrs	r3, r2
 800fddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	699b      	ldr	r3, [r3, #24]
 800fde2:	011b      	lsls	r3, r3, #4
 800fde4:	693a      	ldr	r2, [r7, #16]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	693a      	ldr	r2, [r7, #16]
 800fdee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	685a      	ldr	r2, [r3, #4]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	697a      	ldr	r2, [r7, #20]
 800fe02:	621a      	str	r2, [r3, #32]
}
 800fe04:	bf00      	nop
 800fe06:	371c      	adds	r7, #28
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr
 800fe10:	40012c00 	.word	0x40012c00
 800fe14:	40013400 	.word	0x40013400
 800fe18:	40014000 	.word	0x40014000
 800fe1c:	40014400 	.word	0x40014400
 800fe20:	40014800 	.word	0x40014800

0800fe24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b087      	sub	sp, #28
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6a1b      	ldr	r3, [r3, #32]
 800fe32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6a1b      	ldr	r3, [r3, #32]
 800fe3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	69db      	ldr	r3, [r3, #28]
 800fe4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fe52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	021b      	lsls	r3, r3, #8
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	031b      	lsls	r3, r3, #12
 800fe7a:	693a      	ldr	r2, [r7, #16]
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4a18      	ldr	r2, [pc, #96]	; (800fee4 <TIM_OC4_SetConfig+0xc0>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d00f      	beq.n	800fea8 <TIM_OC4_SetConfig+0x84>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4a17      	ldr	r2, [pc, #92]	; (800fee8 <TIM_OC4_SetConfig+0xc4>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d00b      	beq.n	800fea8 <TIM_OC4_SetConfig+0x84>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a16      	ldr	r2, [pc, #88]	; (800feec <TIM_OC4_SetConfig+0xc8>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d007      	beq.n	800fea8 <TIM_OC4_SetConfig+0x84>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4a15      	ldr	r2, [pc, #84]	; (800fef0 <TIM_OC4_SetConfig+0xcc>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d003      	beq.n	800fea8 <TIM_OC4_SetConfig+0x84>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4a14      	ldr	r2, [pc, #80]	; (800fef4 <TIM_OC4_SetConfig+0xd0>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d109      	bne.n	800febc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800feae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	695b      	ldr	r3, [r3, #20]
 800feb4:	019b      	lsls	r3, r3, #6
 800feb6:	697a      	ldr	r2, [r7, #20]
 800feb8:	4313      	orrs	r3, r2
 800feba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	697a      	ldr	r2, [r7, #20]
 800fec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	685a      	ldr	r2, [r3, #4]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	693a      	ldr	r2, [r7, #16]
 800fed4:	621a      	str	r2, [r3, #32]
}
 800fed6:	bf00      	nop
 800fed8:	371c      	adds	r7, #28
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	40012c00 	.word	0x40012c00
 800fee8:	40013400 	.word	0x40013400
 800feec:	40014000 	.word	0x40014000
 800fef0:	40014400 	.word	0x40014400
 800fef4:	40014800 	.word	0x40014800

0800fef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b087      	sub	sp, #28
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a1b      	ldr	r3, [r3, #32]
 800ff06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	4313      	orrs	r3, r2
 800ff34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ff3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	041b      	lsls	r3, r3, #16
 800ff44:	693a      	ldr	r2, [r7, #16]
 800ff46:	4313      	orrs	r3, r2
 800ff48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4a17      	ldr	r2, [pc, #92]	; (800ffac <TIM_OC5_SetConfig+0xb4>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d00f      	beq.n	800ff72 <TIM_OC5_SetConfig+0x7a>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4a16      	ldr	r2, [pc, #88]	; (800ffb0 <TIM_OC5_SetConfig+0xb8>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d00b      	beq.n	800ff72 <TIM_OC5_SetConfig+0x7a>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4a15      	ldr	r2, [pc, #84]	; (800ffb4 <TIM_OC5_SetConfig+0xbc>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d007      	beq.n	800ff72 <TIM_OC5_SetConfig+0x7a>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4a14      	ldr	r2, [pc, #80]	; (800ffb8 <TIM_OC5_SetConfig+0xc0>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d003      	beq.n	800ff72 <TIM_OC5_SetConfig+0x7a>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4a13      	ldr	r2, [pc, #76]	; (800ffbc <TIM_OC5_SetConfig+0xc4>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d109      	bne.n	800ff86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	695b      	ldr	r3, [r3, #20]
 800ff7e:	021b      	lsls	r3, r3, #8
 800ff80:	697a      	ldr	r2, [r7, #20]
 800ff82:	4313      	orrs	r3, r2
 800ff84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	697a      	ldr	r2, [r7, #20]
 800ff8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	68fa      	ldr	r2, [r7, #12]
 800ff90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	685a      	ldr	r2, [r3, #4]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	693a      	ldr	r2, [r7, #16]
 800ff9e:	621a      	str	r2, [r3, #32]
}
 800ffa0:	bf00      	nop
 800ffa2:	371c      	adds	r7, #28
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr
 800ffac:	40012c00 	.word	0x40012c00
 800ffb0:	40013400 	.word	0x40013400
 800ffb4:	40014000 	.word	0x40014000
 800ffb8:	40014400 	.word	0x40014400
 800ffbc:	40014800 	.word	0x40014800

0800ffc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b087      	sub	sp, #28
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6a1b      	ldr	r3, [r3, #32]
 800ffce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6a1b      	ldr	r3, [r3, #32]
 800ffda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ffee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	021b      	lsls	r3, r3, #8
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	4313      	orrs	r3, r2
 800fffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	051b      	lsls	r3, r3, #20
 801000e:	693a      	ldr	r2, [r7, #16]
 8010010:	4313      	orrs	r3, r2
 8010012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4a18      	ldr	r2, [pc, #96]	; (8010078 <TIM_OC6_SetConfig+0xb8>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d00f      	beq.n	801003c <TIM_OC6_SetConfig+0x7c>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4a17      	ldr	r2, [pc, #92]	; (801007c <TIM_OC6_SetConfig+0xbc>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d00b      	beq.n	801003c <TIM_OC6_SetConfig+0x7c>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4a16      	ldr	r2, [pc, #88]	; (8010080 <TIM_OC6_SetConfig+0xc0>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d007      	beq.n	801003c <TIM_OC6_SetConfig+0x7c>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	4a15      	ldr	r2, [pc, #84]	; (8010084 <TIM_OC6_SetConfig+0xc4>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d003      	beq.n	801003c <TIM_OC6_SetConfig+0x7c>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4a14      	ldr	r2, [pc, #80]	; (8010088 <TIM_OC6_SetConfig+0xc8>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d109      	bne.n	8010050 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010042:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	695b      	ldr	r3, [r3, #20]
 8010048:	029b      	lsls	r3, r3, #10
 801004a:	697a      	ldr	r2, [r7, #20]
 801004c:	4313      	orrs	r3, r2
 801004e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	697a      	ldr	r2, [r7, #20]
 8010054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	685a      	ldr	r2, [r3, #4]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	693a      	ldr	r2, [r7, #16]
 8010068:	621a      	str	r2, [r3, #32]
}
 801006a:	bf00      	nop
 801006c:	371c      	adds	r7, #28
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	40012c00 	.word	0x40012c00
 801007c:	40013400 	.word	0x40013400
 8010080:	40014000 	.word	0x40014000
 8010084:	40014400 	.word	0x40014400
 8010088:	40014800 	.word	0x40014800

0801008c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801008c:	b480      	push	{r7}
 801008e:	b087      	sub	sp, #28
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	607a      	str	r2, [r7, #4]
 8010098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6a1b      	ldr	r3, [r3, #32]
 801009e:	f023 0201 	bic.w	r2, r3, #1
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	699b      	ldr	r3, [r3, #24]
 80100aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	6a1b      	ldr	r3, [r3, #32]
 80100b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	4a26      	ldr	r2, [pc, #152]	; (8010150 <TIM_TI1_SetConfig+0xc4>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d017      	beq.n	80100ea <TIM_TI1_SetConfig+0x5e>
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100c0:	d013      	beq.n	80100ea <TIM_TI1_SetConfig+0x5e>
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	4a23      	ldr	r2, [pc, #140]	; (8010154 <TIM_TI1_SetConfig+0xc8>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d00f      	beq.n	80100ea <TIM_TI1_SetConfig+0x5e>
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	4a22      	ldr	r2, [pc, #136]	; (8010158 <TIM_TI1_SetConfig+0xcc>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d00b      	beq.n	80100ea <TIM_TI1_SetConfig+0x5e>
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	4a21      	ldr	r2, [pc, #132]	; (801015c <TIM_TI1_SetConfig+0xd0>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d007      	beq.n	80100ea <TIM_TI1_SetConfig+0x5e>
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	4a20      	ldr	r2, [pc, #128]	; (8010160 <TIM_TI1_SetConfig+0xd4>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d003      	beq.n	80100ea <TIM_TI1_SetConfig+0x5e>
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	4a1f      	ldr	r2, [pc, #124]	; (8010164 <TIM_TI1_SetConfig+0xd8>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d101      	bne.n	80100ee <TIM_TI1_SetConfig+0x62>
 80100ea:	2301      	movs	r3, #1
 80100ec:	e000      	b.n	80100f0 <TIM_TI1_SetConfig+0x64>
 80100ee:	2300      	movs	r3, #0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d008      	beq.n	8010106 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	f023 0303 	bic.w	r3, r3, #3
 80100fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80100fc:	697a      	ldr	r2, [r7, #20]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4313      	orrs	r3, r2
 8010102:	617b      	str	r3, [r7, #20]
 8010104:	e003      	b.n	801010e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	f043 0301 	orr.w	r3, r3, #1
 801010c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	011b      	lsls	r3, r3, #4
 801011a:	b2db      	uxtb	r3, r3
 801011c:	697a      	ldr	r2, [r7, #20]
 801011e:	4313      	orrs	r3, r2
 8010120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	f023 030a 	bic.w	r3, r3, #10
 8010128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	f003 030a 	and.w	r3, r3, #10
 8010130:	693a      	ldr	r2, [r7, #16]
 8010132:	4313      	orrs	r3, r2
 8010134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	697a      	ldr	r2, [r7, #20]
 801013a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	621a      	str	r2, [r3, #32]
}
 8010142:	bf00      	nop
 8010144:	371c      	adds	r7, #28
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	40012c00 	.word	0x40012c00
 8010154:	40000400 	.word	0x40000400
 8010158:	40000800 	.word	0x40000800
 801015c:	40000c00 	.word	0x40000c00
 8010160:	40013400 	.word	0x40013400
 8010164:	40014000 	.word	0x40014000

08010168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010168:	b480      	push	{r7}
 801016a:	b087      	sub	sp, #28
 801016c:	af00      	add	r7, sp, #0
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6a1b      	ldr	r3, [r3, #32]
 8010178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	f023 0201 	bic.w	r2, r3, #1
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	699b      	ldr	r3, [r3, #24]
 801018a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	011b      	lsls	r3, r3, #4
 8010198:	693a      	ldr	r2, [r7, #16]
 801019a:	4313      	orrs	r3, r2
 801019c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	f023 030a 	bic.w	r3, r3, #10
 80101a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80101a6:	697a      	ldr	r2, [r7, #20]
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	4313      	orrs	r3, r2
 80101ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	693a      	ldr	r2, [r7, #16]
 80101b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	697a      	ldr	r2, [r7, #20]
 80101b8:	621a      	str	r2, [r3, #32]
}
 80101ba:	bf00      	nop
 80101bc:	371c      	adds	r7, #28
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr

080101c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80101c6:	b480      	push	{r7}
 80101c8:	b087      	sub	sp, #28
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	60f8      	str	r0, [r7, #12]
 80101ce:	60b9      	str	r1, [r7, #8]
 80101d0:	607a      	str	r2, [r7, #4]
 80101d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6a1b      	ldr	r3, [r3, #32]
 80101d8:	f023 0210 	bic.w	r2, r3, #16
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	699b      	ldr	r3, [r3, #24]
 80101e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6a1b      	ldr	r3, [r3, #32]
 80101ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	021b      	lsls	r3, r3, #8
 80101f8:	697a      	ldr	r2, [r7, #20]
 80101fa:	4313      	orrs	r3, r2
 80101fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	031b      	lsls	r3, r3, #12
 801020a:	b29b      	uxth	r3, r3
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	4313      	orrs	r3, r2
 8010210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010218:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	011b      	lsls	r3, r3, #4
 801021e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010222:	693a      	ldr	r2, [r7, #16]
 8010224:	4313      	orrs	r3, r2
 8010226:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	697a      	ldr	r2, [r7, #20]
 801022c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	693a      	ldr	r2, [r7, #16]
 8010232:	621a      	str	r2, [r3, #32]
}
 8010234:	bf00      	nop
 8010236:	371c      	adds	r7, #28
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr

08010240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010240:	b480      	push	{r7}
 8010242:	b087      	sub	sp, #28
 8010244:	af00      	add	r7, sp, #0
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6a1b      	ldr	r3, [r3, #32]
 8010250:	f023 0210 	bic.w	r2, r3, #16
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	699b      	ldr	r3, [r3, #24]
 801025c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6a1b      	ldr	r3, [r3, #32]
 8010262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801026a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	031b      	lsls	r3, r3, #12
 8010270:	697a      	ldr	r2, [r7, #20]
 8010272:	4313      	orrs	r3, r2
 8010274:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801027c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	011b      	lsls	r3, r3, #4
 8010282:	693a      	ldr	r2, [r7, #16]
 8010284:	4313      	orrs	r3, r2
 8010286:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	697a      	ldr	r2, [r7, #20]
 801028c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	693a      	ldr	r2, [r7, #16]
 8010292:	621a      	str	r2, [r3, #32]
}
 8010294:	bf00      	nop
 8010296:	371c      	adds	r7, #28
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b087      	sub	sp, #28
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	6a1b      	ldr	r3, [r3, #32]
 80102b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	69db      	ldr	r3, [r3, #28]
 80102be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	6a1b      	ldr	r3, [r3, #32]
 80102c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	f023 0303 	bic.w	r3, r3, #3
 80102cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80102ce:	697a      	ldr	r2, [r7, #20]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4313      	orrs	r3, r2
 80102d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80102dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	011b      	lsls	r3, r3, #4
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	697a      	ldr	r2, [r7, #20]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80102f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	021b      	lsls	r3, r3, #8
 80102f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80102fa:	693a      	ldr	r2, [r7, #16]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	697a      	ldr	r2, [r7, #20]
 8010304:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	693a      	ldr	r2, [r7, #16]
 801030a:	621a      	str	r2, [r3, #32]
}
 801030c:	bf00      	nop
 801030e:	371c      	adds	r7, #28
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr

08010318 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010318:	b480      	push	{r7}
 801031a:	b087      	sub	sp, #28
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
 8010324:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	69db      	ldr	r3, [r3, #28]
 8010336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	6a1b      	ldr	r3, [r3, #32]
 801033c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010344:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	021b      	lsls	r3, r3, #8
 801034a:	697a      	ldr	r2, [r7, #20]
 801034c:	4313      	orrs	r3, r2
 801034e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010356:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	031b      	lsls	r3, r3, #12
 801035c:	b29b      	uxth	r3, r3
 801035e:	697a      	ldr	r2, [r7, #20]
 8010360:	4313      	orrs	r3, r2
 8010362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801036a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	031b      	lsls	r3, r3, #12
 8010370:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8010374:	693a      	ldr	r2, [r7, #16]
 8010376:	4313      	orrs	r3, r2
 8010378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	697a      	ldr	r2, [r7, #20]
 801037e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	693a      	ldr	r2, [r7, #16]
 8010384:	621a      	str	r2, [r3, #32]
}
 8010386:	bf00      	nop
 8010388:	371c      	adds	r7, #28
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr

08010392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010392:	b480      	push	{r7}
 8010394:	b085      	sub	sp, #20
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
 801039a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80103a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80103ae:	683a      	ldr	r2, [r7, #0]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	4313      	orrs	r3, r2
 80103b4:	f043 0307 	orr.w	r3, r3, #7
 80103b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	609a      	str	r2, [r3, #8]
}
 80103c0:	bf00      	nop
 80103c2:	3714      	adds	r7, #20
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b087      	sub	sp, #28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
 80103d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	689b      	ldr	r3, [r3, #8]
 80103de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80103e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	021a      	lsls	r2, r3, #8
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	431a      	orrs	r2, r3
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	697a      	ldr	r2, [r7, #20]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	697a      	ldr	r2, [r7, #20]
 80103fe:	609a      	str	r2, [r3, #8]
}
 8010400:	bf00      	nop
 8010402:	371c      	adds	r7, #28
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801040c:	b480      	push	{r7}
 801040e:	b087      	sub	sp, #28
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	f003 031f 	and.w	r3, r3, #31
 801041e:	2201      	movs	r2, #1
 8010420:	fa02 f303 	lsl.w	r3, r2, r3
 8010424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	6a1a      	ldr	r2, [r3, #32]
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	43db      	mvns	r3, r3
 801042e:	401a      	ands	r2, r3
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6a1a      	ldr	r2, [r3, #32]
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	f003 031f 	and.w	r3, r3, #31
 801043e:	6879      	ldr	r1, [r7, #4]
 8010440:	fa01 f303 	lsl.w	r3, r1, r3
 8010444:	431a      	orrs	r2, r3
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	621a      	str	r2, [r3, #32]
}
 801044a:	bf00      	nop
 801044c:	371c      	adds	r7, #28
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr
	...

08010458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010458:	b480      	push	{r7}
 801045a:	b085      	sub	sp, #20
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010468:	2b01      	cmp	r3, #1
 801046a:	d101      	bne.n	8010470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801046c:	2302      	movs	r3, #2
 801046e:	e068      	b.n	8010542 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2202      	movs	r2, #2
 801047c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4a2e      	ldr	r2, [pc, #184]	; (8010550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d004      	beq.n	80104a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a2d      	ldr	r2, [pc, #180]	; (8010554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d108      	bne.n	80104b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80104aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	68fa      	ldr	r2, [r7, #12]
 80104b2:	4313      	orrs	r3, r2
 80104b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	4a1e      	ldr	r2, [pc, #120]	; (8010550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d01d      	beq.n	8010516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104e2:	d018      	beq.n	8010516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4a1b      	ldr	r2, [pc, #108]	; (8010558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d013      	beq.n	8010516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	4a1a      	ldr	r2, [pc, #104]	; (801055c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d00e      	beq.n	8010516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4a18      	ldr	r2, [pc, #96]	; (8010560 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d009      	beq.n	8010516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4a13      	ldr	r2, [pc, #76]	; (8010554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d004      	beq.n	8010516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a14      	ldr	r2, [pc, #80]	; (8010564 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d10c      	bne.n	8010530 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801051c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	68ba      	ldr	r2, [r7, #8]
 8010524:	4313      	orrs	r3, r2
 8010526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2201      	movs	r2, #1
 8010534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010540:	2300      	movs	r3, #0
}
 8010542:	4618      	mov	r0, r3
 8010544:	3714      	adds	r7, #20
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	40012c00 	.word	0x40012c00
 8010554:	40013400 	.word	0x40013400
 8010558:	40000400 	.word	0x40000400
 801055c:	40000800 	.word	0x40000800
 8010560:	40000c00 	.word	0x40000c00
 8010564:	40014000 	.word	0x40014000

08010568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010568:	b480      	push	{r7}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010572:	2300      	movs	r3, #0
 8010574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801057c:	2b01      	cmp	r3, #1
 801057e:	d101      	bne.n	8010584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010580:	2302      	movs	r3, #2
 8010582:	e087      	b.n	8010694 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	4313      	orrs	r3, r2
 8010598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	689b      	ldr	r3, [r3, #8]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4313      	orrs	r3, r2
 80105c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	691b      	ldr	r3, [r3, #16]
 80105ce:	4313      	orrs	r3, r2
 80105d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	695b      	ldr	r3, [r3, #20]
 80105dc:	4313      	orrs	r3, r2
 80105de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ea:	4313      	orrs	r3, r2
 80105ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	699b      	ldr	r3, [r3, #24]
 80105f8:	041b      	lsls	r3, r3, #16
 80105fa:	4313      	orrs	r3, r2
 80105fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4a27      	ldr	r2, [pc, #156]	; (80106a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d004      	beq.n	8010612 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a25      	ldr	r2, [pc, #148]	; (80106a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d106      	bne.n	8010620 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	69db      	ldr	r3, [r3, #28]
 801061c:	4313      	orrs	r3, r2
 801061e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a1e      	ldr	r2, [pc, #120]	; (80106a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d004      	beq.n	8010634 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a1d      	ldr	r2, [pc, #116]	; (80106a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d126      	bne.n	8010682 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801063e:	051b      	lsls	r3, r3, #20
 8010640:	4313      	orrs	r3, r2
 8010642:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	6a1b      	ldr	r3, [r3, #32]
 801064e:	4313      	orrs	r3, r2
 8010650:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801065c:	4313      	orrs	r3, r2
 801065e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a0e      	ldr	r2, [pc, #56]	; (80106a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d004      	beq.n	8010674 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a0d      	ldr	r2, [pc, #52]	; (80106a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d106      	bne.n	8010682 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801067e:	4313      	orrs	r3, r2
 8010680:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	68fa      	ldr	r2, [r7, #12]
 8010688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2200      	movs	r2, #0
 801068e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010692:	2300      	movs	r3, #0
}
 8010694:	4618      	mov	r0, r3
 8010696:	3714      	adds	r7, #20
 8010698:	46bd      	mov	sp, r7
 801069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069e:	4770      	bx	lr
 80106a0:	40012c00 	.word	0x40012c00
 80106a4:	40013400 	.word	0x40013400

080106a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106b0:	bf00      	nop
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80106c4:	bf00      	nop
 80106c6:	370c      	adds	r7, #12
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80106d8:	bf00      	nop
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d101      	bne.n	80106f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	e042      	b.n	801077c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d106      	bne.n	801070e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2200      	movs	r2, #0
 8010704:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7f8 f93f 	bl	800898c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2224      	movs	r2, #36	; 0x24
 8010712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f022 0201 	bic.w	r2, r2, #1
 8010724:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f000 fbbc 	bl	8010ea4 <UART_SetConfig>
 801072c:	4603      	mov	r3, r0
 801072e:	2b01      	cmp	r3, #1
 8010730:	d101      	bne.n	8010736 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010732:	2301      	movs	r3, #1
 8010734:	e022      	b.n	801077c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801073a:	2b00      	cmp	r3, #0
 801073c:	d002      	beq.n	8010744 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 feb0 	bl	80114a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	685a      	ldr	r2, [r3, #4]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	689a      	ldr	r2, [r3, #8]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f042 0201 	orr.w	r2, r2, #1
 8010772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 ff37 	bl	80115e8 <UART_CheckIdleState>
 801077a:	4603      	mov	r3, r0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b08a      	sub	sp, #40	; 0x28
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	4613      	mov	r3, r2
 8010790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010798:	2b20      	cmp	r3, #32
 801079a:	d137      	bne.n	801080c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d002      	beq.n	80107a8 <HAL_UART_Receive_IT+0x24>
 80107a2:	88fb      	ldrh	r3, [r7, #6]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d101      	bne.n	80107ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80107a8:	2301      	movs	r3, #1
 80107aa:	e030      	b.n	801080e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2200      	movs	r2, #0
 80107b0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4a18      	ldr	r2, [pc, #96]	; (8010818 <HAL_UART_Receive_IT+0x94>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d01f      	beq.n	80107fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d018      	beq.n	80107fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	e853 3f00 	ldrex	r3, [r3]
 80107d6:	613b      	str	r3, [r7, #16]
   return(result);
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80107de:	627b      	str	r3, [r7, #36]	; 0x24
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	461a      	mov	r2, r3
 80107e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e8:	623b      	str	r3, [r7, #32]
 80107ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ec:	69f9      	ldr	r1, [r7, #28]
 80107ee:	6a3a      	ldr	r2, [r7, #32]
 80107f0:	e841 2300 	strex	r3, r2, [r1]
 80107f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1e6      	bne.n	80107ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80107fc:	88fb      	ldrh	r3, [r7, #6]
 80107fe:	461a      	mov	r2, r3
 8010800:	68b9      	ldr	r1, [r7, #8]
 8010802:	68f8      	ldr	r0, [r7, #12]
 8010804:	f001 f802 	bl	801180c <UART_Start_Receive_IT>
 8010808:	4603      	mov	r3, r0
 801080a:	e000      	b.n	801080e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801080c:	2302      	movs	r3, #2
  }
}
 801080e:	4618      	mov	r0, r3
 8010810:	3728      	adds	r7, #40	; 0x28
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	40008000 	.word	0x40008000

0801081c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b0ba      	sub	sp, #232	; 0xe8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	69db      	ldr	r3, [r3, #28]
 801082a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010842:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010846:	f640 030f 	movw	r3, #2063	; 0x80f
 801084a:	4013      	ands	r3, r2
 801084c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010854:	2b00      	cmp	r3, #0
 8010856:	d11b      	bne.n	8010890 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801085c:	f003 0320 	and.w	r3, r3, #32
 8010860:	2b00      	cmp	r3, #0
 8010862:	d015      	beq.n	8010890 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010868:	f003 0320 	and.w	r3, r3, #32
 801086c:	2b00      	cmp	r3, #0
 801086e:	d105      	bne.n	801087c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010878:	2b00      	cmp	r3, #0
 801087a:	d009      	beq.n	8010890 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010880:	2b00      	cmp	r3, #0
 8010882:	f000 82e3 	beq.w	8010e4c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	4798      	blx	r3
      }
      return;
 801088e:	e2dd      	b.n	8010e4c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010894:	2b00      	cmp	r3, #0
 8010896:	f000 8123 	beq.w	8010ae0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801089a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801089e:	4b8d      	ldr	r3, [pc, #564]	; (8010ad4 <HAL_UART_IRQHandler+0x2b8>)
 80108a0:	4013      	ands	r3, r2
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d106      	bne.n	80108b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80108a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80108aa:	4b8b      	ldr	r3, [pc, #556]	; (8010ad8 <HAL_UART_IRQHandler+0x2bc>)
 80108ac:	4013      	ands	r3, r2
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f000 8116 	beq.w	8010ae0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80108b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108b8:	f003 0301 	and.w	r3, r3, #1
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d011      	beq.n	80108e4 <HAL_UART_IRQHandler+0xc8>
 80108c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00b      	beq.n	80108e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2201      	movs	r2, #1
 80108d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108da:	f043 0201 	orr.w	r2, r3, #1
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108e8:	f003 0302 	and.w	r3, r3, #2
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d011      	beq.n	8010914 <HAL_UART_IRQHandler+0xf8>
 80108f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108f4:	f003 0301 	and.w	r3, r3, #1
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00b      	beq.n	8010914 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2202      	movs	r2, #2
 8010902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801090a:	f043 0204 	orr.w	r2, r3, #4
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010918:	f003 0304 	and.w	r3, r3, #4
 801091c:	2b00      	cmp	r3, #0
 801091e:	d011      	beq.n	8010944 <HAL_UART_IRQHandler+0x128>
 8010920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010924:	f003 0301 	and.w	r3, r3, #1
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00b      	beq.n	8010944 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2204      	movs	r2, #4
 8010932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801093a:	f043 0202 	orr.w	r2, r3, #2
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010948:	f003 0308 	and.w	r3, r3, #8
 801094c:	2b00      	cmp	r3, #0
 801094e:	d017      	beq.n	8010980 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010954:	f003 0320 	and.w	r3, r3, #32
 8010958:	2b00      	cmp	r3, #0
 801095a:	d105      	bne.n	8010968 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801095c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010960:	4b5c      	ldr	r3, [pc, #368]	; (8010ad4 <HAL_UART_IRQHandler+0x2b8>)
 8010962:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00b      	beq.n	8010980 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2208      	movs	r2, #8
 801096e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010976:	f043 0208 	orr.w	r2, r3, #8
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010988:	2b00      	cmp	r3, #0
 801098a:	d012      	beq.n	80109b2 <HAL_UART_IRQHandler+0x196>
 801098c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010994:	2b00      	cmp	r3, #0
 8010996:	d00c      	beq.n	80109b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80109a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109a8:	f043 0220 	orr.w	r2, r3, #32
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	f000 8249 	beq.w	8010e50 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80109be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109c2:	f003 0320 	and.w	r3, r3, #32
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d013      	beq.n	80109f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80109ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109ce:	f003 0320 	and.w	r3, r3, #32
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d105      	bne.n	80109e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80109d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d007      	beq.n	80109f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d003      	beq.n	80109f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a06:	2b40      	cmp	r3, #64	; 0x40
 8010a08:	d005      	beq.n	8010a16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010a0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d054      	beq.n	8010ac0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f001 f81a 	bl	8011a50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a26:	2b40      	cmp	r3, #64	; 0x40
 8010a28:	d146      	bne.n	8010ab8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	3308      	adds	r3, #8
 8010a30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a38:	e853 3f00 	ldrex	r3, [r3]
 8010a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	3308      	adds	r3, #8
 8010a52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010a56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010a62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010a66:	e841 2300 	strex	r3, r2, [r1]
 8010a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d1d9      	bne.n	8010a2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d017      	beq.n	8010ab0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a86:	4a15      	ldr	r2, [pc, #84]	; (8010adc <HAL_UART_IRQHandler+0x2c0>)
 8010a88:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7fa fbf6 	bl	800b282 <HAL_DMA_Abort_IT>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d019      	beq.n	8010ad0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010aaa:	4610      	mov	r0, r2
 8010aac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010aae:	e00f      	b.n	8010ad0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 f9e1 	bl	8010e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ab6:	e00b      	b.n	8010ad0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 f9dd 	bl	8010e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010abe:	e007      	b.n	8010ad0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f000 f9d9 	bl	8010e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010ace:	e1bf      	b.n	8010e50 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ad0:	bf00      	nop
    return;
 8010ad2:	e1bd      	b.n	8010e50 <HAL_UART_IRQHandler+0x634>
 8010ad4:	10000001 	.word	0x10000001
 8010ad8:	04000120 	.word	0x04000120
 8010adc:	08011b1d 	.word	0x08011b1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	f040 8153 	bne.w	8010d90 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aee:	f003 0310 	and.w	r3, r3, #16
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f000 814c 	beq.w	8010d90 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010afc:	f003 0310 	and.w	r3, r3, #16
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f000 8145 	beq.w	8010d90 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2210      	movs	r2, #16
 8010b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b18:	2b40      	cmp	r3, #64	; 0x40
 8010b1a:	f040 80bb 	bne.w	8010c94 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	f000 818f 	beq.w	8010e54 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b40:	429a      	cmp	r2, r3
 8010b42:	f080 8187 	bcs.w	8010e54 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f003 0320 	and.w	r3, r3, #32
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f040 8087 	bne.w	8010c72 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b70:	e853 3f00 	ldrex	r3, [r3]
 8010b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010b9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b9e:	e841 2300 	strex	r3, r2, [r1]
 8010ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d1da      	bne.n	8010b64 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	3308      	adds	r3, #8
 8010bb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bb8:	e853 3f00 	ldrex	r3, [r3]
 8010bbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010bc0:	f023 0301 	bic.w	r3, r3, #1
 8010bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	3308      	adds	r3, #8
 8010bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010bd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010bde:	e841 2300 	strex	r3, r2, [r1]
 8010be2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1e1      	bne.n	8010bae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	3308      	adds	r3, #8
 8010bf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bf4:	e853 3f00 	ldrex	r3, [r3]
 8010bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	3308      	adds	r3, #8
 8010c0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010c0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010c10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010c14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010c16:	e841 2300 	strex	r3, r2, [r1]
 8010c1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d1e3      	bne.n	8010bea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2220      	movs	r2, #32
 8010c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c38:	e853 3f00 	ldrex	r3, [r3]
 8010c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c40:	f023 0310 	bic.w	r3, r3, #16
 8010c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c5a:	e841 2300 	strex	r3, r2, [r1]
 8010c5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1e4      	bne.n	8010c30 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fa faac 	bl	800b1ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2202      	movs	r2, #2
 8010c76:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f000 f8fd 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c92:	e0df      	b.n	8010e54 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	1ad3      	subs	r3, r2, r3
 8010ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	f000 80d1 	beq.w	8010e58 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8010cb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 80cc 	beq.w	8010e58 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc8:	e853 3f00 	ldrex	r3, [r3]
 8010ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8010ce4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cea:	e841 2300 	strex	r3, r2, [r1]
 8010cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1e4      	bne.n	8010cc0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	3308      	adds	r3, #8
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d00:	e853 3f00 	ldrex	r3, [r3]
 8010d04:	623b      	str	r3, [r7, #32]
   return(result);
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010d0c:	f023 0301 	bic.w	r3, r3, #1
 8010d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	3308      	adds	r3, #8
 8010d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8010d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d26:	e841 2300 	strex	r3, r2, [r1]
 8010d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d1e1      	bne.n	8010cf6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2220      	movs	r2, #32
 8010d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	e853 3f00 	ldrex	r3, [r3]
 8010d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f023 0310 	bic.w	r3, r3, #16
 8010d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	461a      	mov	r2, r3
 8010d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d68:	61fb      	str	r3, [r7, #28]
 8010d6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d6c:	69b9      	ldr	r1, [r7, #24]
 8010d6e:	69fa      	ldr	r2, [r7, #28]
 8010d70:	e841 2300 	strex	r3, r2, [r1]
 8010d74:	617b      	str	r3, [r7, #20]
   return(result);
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d1e4      	bne.n	8010d46 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2202      	movs	r2, #2
 8010d80:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d86:	4619      	mov	r1, r3
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f87f 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d8e:	e063      	b.n	8010e58 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d00e      	beq.n	8010dba <HAL_UART_IRQHandler+0x59e>
 8010d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d008      	beq.n	8010dba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f001 fc10 	bl	80125d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010db8:	e051      	b.n	8010e5e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d014      	beq.n	8010df0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d105      	bne.n	8010dde <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d008      	beq.n	8010df0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d03a      	beq.n	8010e5c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	4798      	blx	r3
    }
    return;
 8010dee:	e035      	b.n	8010e5c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d009      	beq.n	8010e10 <HAL_UART_IRQHandler+0x5f4>
 8010dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d003      	beq.n	8010e10 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 fe9d 	bl	8011b48 <UART_EndTransmit_IT>
    return;
 8010e0e:	e026      	b.n	8010e5e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d009      	beq.n	8010e30 <HAL_UART_IRQHandler+0x614>
 8010e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d003      	beq.n	8010e30 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f001 fbe9 	bl	8012600 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e2e:	e016      	b.n	8010e5e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d010      	beq.n	8010e5e <HAL_UART_IRQHandler+0x642>
 8010e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	da0c      	bge.n	8010e5e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f001 fbd1 	bl	80125ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e4a:	e008      	b.n	8010e5e <HAL_UART_IRQHandler+0x642>
      return;
 8010e4c:	bf00      	nop
 8010e4e:	e006      	b.n	8010e5e <HAL_UART_IRQHandler+0x642>
    return;
 8010e50:	bf00      	nop
 8010e52:	e004      	b.n	8010e5e <HAL_UART_IRQHandler+0x642>
      return;
 8010e54:	bf00      	nop
 8010e56:	e002      	b.n	8010e5e <HAL_UART_IRQHandler+0x642>
      return;
 8010e58:	bf00      	nop
 8010e5a:	e000      	b.n	8010e5e <HAL_UART_IRQHandler+0x642>
    return;
 8010e5c:	bf00      	nop
  }
}
 8010e5e:	37e8      	adds	r7, #232	; 0xe8
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010e6c:	bf00      	nop
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	460b      	mov	r3, r1
 8010e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010e98:	bf00      	nop
 8010e9a:	370c      	adds	r7, #12
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ea8:	b08c      	sub	sp, #48	; 0x30
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	689a      	ldr	r2, [r3, #8]
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	691b      	ldr	r3, [r3, #16]
 8010ebc:	431a      	orrs	r2, r3
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	431a      	orrs	r2, r3
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	69db      	ldr	r3, [r3, #28]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	4baa      	ldr	r3, [pc, #680]	; (801117c <UART_SetConfig+0x2d8>)
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	697a      	ldr	r2, [r7, #20]
 8010ed8:	6812      	ldr	r2, [r2, #0]
 8010eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010edc:	430b      	orrs	r3, r1
 8010ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	68da      	ldr	r2, [r3, #12]
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	430a      	orrs	r2, r1
 8010ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	699b      	ldr	r3, [r3, #24]
 8010efa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a9f      	ldr	r2, [pc, #636]	; (8011180 <UART_SetConfig+0x2dc>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d004      	beq.n	8010f10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	6a1b      	ldr	r3, [r3, #32]
 8010f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	689b      	ldr	r3, [r3, #8]
 8010f16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8010f1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	6812      	ldr	r2, [r2, #0]
 8010f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f24:	430b      	orrs	r3, r1
 8010f26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2e:	f023 010f 	bic.w	r1, r3, #15
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	430a      	orrs	r2, r1
 8010f3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4a90      	ldr	r2, [pc, #576]	; (8011184 <UART_SetConfig+0x2e0>)
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d125      	bne.n	8010f94 <UART_SetConfig+0xf0>
 8010f48:	4b8f      	ldr	r3, [pc, #572]	; (8011188 <UART_SetConfig+0x2e4>)
 8010f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f4e:	f003 0303 	and.w	r3, r3, #3
 8010f52:	2b03      	cmp	r3, #3
 8010f54:	d81a      	bhi.n	8010f8c <UART_SetConfig+0xe8>
 8010f56:	a201      	add	r2, pc, #4	; (adr r2, 8010f5c <UART_SetConfig+0xb8>)
 8010f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f5c:	08010f6d 	.word	0x08010f6d
 8010f60:	08010f7d 	.word	0x08010f7d
 8010f64:	08010f75 	.word	0x08010f75
 8010f68:	08010f85 	.word	0x08010f85
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f72:	e116      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8010f74:	2302      	movs	r3, #2
 8010f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f7a:	e112      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8010f7c:	2304      	movs	r3, #4
 8010f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f82:	e10e      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8010f84:	2308      	movs	r3, #8
 8010f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f8a:	e10a      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8010f8c:	2310      	movs	r3, #16
 8010f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010f92:	e106      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4a7c      	ldr	r2, [pc, #496]	; (801118c <UART_SetConfig+0x2e8>)
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d138      	bne.n	8011010 <UART_SetConfig+0x16c>
 8010f9e:	4b7a      	ldr	r3, [pc, #488]	; (8011188 <UART_SetConfig+0x2e4>)
 8010fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fa4:	f003 030c 	and.w	r3, r3, #12
 8010fa8:	2b0c      	cmp	r3, #12
 8010faa:	d82d      	bhi.n	8011008 <UART_SetConfig+0x164>
 8010fac:	a201      	add	r2, pc, #4	; (adr r2, 8010fb4 <UART_SetConfig+0x110>)
 8010fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb2:	bf00      	nop
 8010fb4:	08010fe9 	.word	0x08010fe9
 8010fb8:	08011009 	.word	0x08011009
 8010fbc:	08011009 	.word	0x08011009
 8010fc0:	08011009 	.word	0x08011009
 8010fc4:	08010ff9 	.word	0x08010ff9
 8010fc8:	08011009 	.word	0x08011009
 8010fcc:	08011009 	.word	0x08011009
 8010fd0:	08011009 	.word	0x08011009
 8010fd4:	08010ff1 	.word	0x08010ff1
 8010fd8:	08011009 	.word	0x08011009
 8010fdc:	08011009 	.word	0x08011009
 8010fe0:	08011009 	.word	0x08011009
 8010fe4:	08011001 	.word	0x08011001
 8010fe8:	2300      	movs	r3, #0
 8010fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010fee:	e0d8      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8010ff0:	2302      	movs	r3, #2
 8010ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ff6:	e0d4      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8010ff8:	2304      	movs	r3, #4
 8010ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ffe:	e0d0      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011000:	2308      	movs	r3, #8
 8011002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011006:	e0cc      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011008:	2310      	movs	r3, #16
 801100a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801100e:	e0c8      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4a5e      	ldr	r2, [pc, #376]	; (8011190 <UART_SetConfig+0x2ec>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d125      	bne.n	8011066 <UART_SetConfig+0x1c2>
 801101a:	4b5b      	ldr	r3, [pc, #364]	; (8011188 <UART_SetConfig+0x2e4>)
 801101c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011024:	2b30      	cmp	r3, #48	; 0x30
 8011026:	d016      	beq.n	8011056 <UART_SetConfig+0x1b2>
 8011028:	2b30      	cmp	r3, #48	; 0x30
 801102a:	d818      	bhi.n	801105e <UART_SetConfig+0x1ba>
 801102c:	2b20      	cmp	r3, #32
 801102e:	d00a      	beq.n	8011046 <UART_SetConfig+0x1a2>
 8011030:	2b20      	cmp	r3, #32
 8011032:	d814      	bhi.n	801105e <UART_SetConfig+0x1ba>
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <UART_SetConfig+0x19a>
 8011038:	2b10      	cmp	r3, #16
 801103a:	d008      	beq.n	801104e <UART_SetConfig+0x1aa>
 801103c:	e00f      	b.n	801105e <UART_SetConfig+0x1ba>
 801103e:	2300      	movs	r3, #0
 8011040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011044:	e0ad      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011046:	2302      	movs	r3, #2
 8011048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801104c:	e0a9      	b.n	80111a2 <UART_SetConfig+0x2fe>
 801104e:	2304      	movs	r3, #4
 8011050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011054:	e0a5      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011056:	2308      	movs	r3, #8
 8011058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801105c:	e0a1      	b.n	80111a2 <UART_SetConfig+0x2fe>
 801105e:	2310      	movs	r3, #16
 8011060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011064:	e09d      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	4a4a      	ldr	r2, [pc, #296]	; (8011194 <UART_SetConfig+0x2f0>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d125      	bne.n	80110bc <UART_SetConfig+0x218>
 8011070:	4b45      	ldr	r3, [pc, #276]	; (8011188 <UART_SetConfig+0x2e4>)
 8011072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011076:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801107a:	2bc0      	cmp	r3, #192	; 0xc0
 801107c:	d016      	beq.n	80110ac <UART_SetConfig+0x208>
 801107e:	2bc0      	cmp	r3, #192	; 0xc0
 8011080:	d818      	bhi.n	80110b4 <UART_SetConfig+0x210>
 8011082:	2b80      	cmp	r3, #128	; 0x80
 8011084:	d00a      	beq.n	801109c <UART_SetConfig+0x1f8>
 8011086:	2b80      	cmp	r3, #128	; 0x80
 8011088:	d814      	bhi.n	80110b4 <UART_SetConfig+0x210>
 801108a:	2b00      	cmp	r3, #0
 801108c:	d002      	beq.n	8011094 <UART_SetConfig+0x1f0>
 801108e:	2b40      	cmp	r3, #64	; 0x40
 8011090:	d008      	beq.n	80110a4 <UART_SetConfig+0x200>
 8011092:	e00f      	b.n	80110b4 <UART_SetConfig+0x210>
 8011094:	2300      	movs	r3, #0
 8011096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801109a:	e082      	b.n	80111a2 <UART_SetConfig+0x2fe>
 801109c:	2302      	movs	r3, #2
 801109e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80110a2:	e07e      	b.n	80111a2 <UART_SetConfig+0x2fe>
 80110a4:	2304      	movs	r3, #4
 80110a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80110aa:	e07a      	b.n	80111a2 <UART_SetConfig+0x2fe>
 80110ac:	2308      	movs	r3, #8
 80110ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80110b2:	e076      	b.n	80111a2 <UART_SetConfig+0x2fe>
 80110b4:	2310      	movs	r3, #16
 80110b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80110ba:	e072      	b.n	80111a2 <UART_SetConfig+0x2fe>
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a35      	ldr	r2, [pc, #212]	; (8011198 <UART_SetConfig+0x2f4>)
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d12a      	bne.n	801111c <UART_SetConfig+0x278>
 80110c6:	4b30      	ldr	r3, [pc, #192]	; (8011188 <UART_SetConfig+0x2e4>)
 80110c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80110d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110d4:	d01a      	beq.n	801110c <UART_SetConfig+0x268>
 80110d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110da:	d81b      	bhi.n	8011114 <UART_SetConfig+0x270>
 80110dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110e0:	d00c      	beq.n	80110fc <UART_SetConfig+0x258>
 80110e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110e6:	d815      	bhi.n	8011114 <UART_SetConfig+0x270>
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d003      	beq.n	80110f4 <UART_SetConfig+0x250>
 80110ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110f0:	d008      	beq.n	8011104 <UART_SetConfig+0x260>
 80110f2:	e00f      	b.n	8011114 <UART_SetConfig+0x270>
 80110f4:	2300      	movs	r3, #0
 80110f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80110fa:	e052      	b.n	80111a2 <UART_SetConfig+0x2fe>
 80110fc:	2302      	movs	r3, #2
 80110fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011102:	e04e      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011104:	2304      	movs	r3, #4
 8011106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801110a:	e04a      	b.n	80111a2 <UART_SetConfig+0x2fe>
 801110c:	2308      	movs	r3, #8
 801110e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011112:	e046      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011114:	2310      	movs	r3, #16
 8011116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801111a:	e042      	b.n	80111a2 <UART_SetConfig+0x2fe>
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a17      	ldr	r2, [pc, #92]	; (8011180 <UART_SetConfig+0x2dc>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d13a      	bne.n	801119c <UART_SetConfig+0x2f8>
 8011126:	4b18      	ldr	r3, [pc, #96]	; (8011188 <UART_SetConfig+0x2e4>)
 8011128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801112c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011134:	d01a      	beq.n	801116c <UART_SetConfig+0x2c8>
 8011136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801113a:	d81b      	bhi.n	8011174 <UART_SetConfig+0x2d0>
 801113c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011140:	d00c      	beq.n	801115c <UART_SetConfig+0x2b8>
 8011142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011146:	d815      	bhi.n	8011174 <UART_SetConfig+0x2d0>
 8011148:	2b00      	cmp	r3, #0
 801114a:	d003      	beq.n	8011154 <UART_SetConfig+0x2b0>
 801114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011150:	d008      	beq.n	8011164 <UART_SetConfig+0x2c0>
 8011152:	e00f      	b.n	8011174 <UART_SetConfig+0x2d0>
 8011154:	2300      	movs	r3, #0
 8011156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801115a:	e022      	b.n	80111a2 <UART_SetConfig+0x2fe>
 801115c:	2302      	movs	r3, #2
 801115e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011162:	e01e      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011164:	2304      	movs	r3, #4
 8011166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801116a:	e01a      	b.n	80111a2 <UART_SetConfig+0x2fe>
 801116c:	2308      	movs	r3, #8
 801116e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011172:	e016      	b.n	80111a2 <UART_SetConfig+0x2fe>
 8011174:	2310      	movs	r3, #16
 8011176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801117a:	e012      	b.n	80111a2 <UART_SetConfig+0x2fe>
 801117c:	cfff69f3 	.word	0xcfff69f3
 8011180:	40008000 	.word	0x40008000
 8011184:	40013800 	.word	0x40013800
 8011188:	40021000 	.word	0x40021000
 801118c:	40004400 	.word	0x40004400
 8011190:	40004800 	.word	0x40004800
 8011194:	40004c00 	.word	0x40004c00
 8011198:	40005000 	.word	0x40005000
 801119c:	2310      	movs	r3, #16
 801119e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4ab0      	ldr	r2, [pc, #704]	; (8011468 <UART_SetConfig+0x5c4>)
 80111a8:	4293      	cmp	r3, r2
 80111aa:	f040 809b 	bne.w	80112e4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80111ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80111b2:	2b08      	cmp	r3, #8
 80111b4:	d827      	bhi.n	8011206 <UART_SetConfig+0x362>
 80111b6:	a201      	add	r2, pc, #4	; (adr r2, 80111bc <UART_SetConfig+0x318>)
 80111b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111bc:	080111e1 	.word	0x080111e1
 80111c0:	080111e9 	.word	0x080111e9
 80111c4:	080111f1 	.word	0x080111f1
 80111c8:	08011207 	.word	0x08011207
 80111cc:	080111f7 	.word	0x080111f7
 80111d0:	08011207 	.word	0x08011207
 80111d4:	08011207 	.word	0x08011207
 80111d8:	08011207 	.word	0x08011207
 80111dc:	080111ff 	.word	0x080111ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80111e0:	f7fb fdf8 	bl	800cdd4 <HAL_RCC_GetPCLK1Freq>
 80111e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80111e6:	e014      	b.n	8011212 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111e8:	f7fb fe08 	bl	800cdfc <HAL_RCC_GetPCLK2Freq>
 80111ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80111ee:	e010      	b.n	8011212 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80111f0:	4b9e      	ldr	r3, [pc, #632]	; (801146c <UART_SetConfig+0x5c8>)
 80111f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80111f4:	e00d      	b.n	8011212 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80111f6:	f7fb fd3b 	bl	800cc70 <HAL_RCC_GetSysClockFreq>
 80111fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80111fc:	e009      	b.n	8011212 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011202:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011204:	e005      	b.n	8011212 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8011206:	2300      	movs	r3, #0
 8011208:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801120a:	2301      	movs	r3, #1
 801120c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011214:	2b00      	cmp	r3, #0
 8011216:	f000 8130 	beq.w	801147a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801121e:	4a94      	ldr	r2, [pc, #592]	; (8011470 <UART_SetConfig+0x5cc>)
 8011220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011224:	461a      	mov	r2, r3
 8011226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011228:	fbb3 f3f2 	udiv	r3, r3, r2
 801122c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	685a      	ldr	r2, [r3, #4]
 8011232:	4613      	mov	r3, r2
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	4413      	add	r3, r2
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	429a      	cmp	r2, r3
 801123c:	d305      	bcc.n	801124a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011244:	69ba      	ldr	r2, [r7, #24]
 8011246:	429a      	cmp	r2, r3
 8011248:	d903      	bls.n	8011252 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 801124a:	2301      	movs	r3, #1
 801124c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011250:	e113      	b.n	801147a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011254:	2200      	movs	r2, #0
 8011256:	60bb      	str	r3, [r7, #8]
 8011258:	60fa      	str	r2, [r7, #12]
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801125e:	4a84      	ldr	r2, [pc, #528]	; (8011470 <UART_SetConfig+0x5cc>)
 8011260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011264:	b29b      	uxth	r3, r3
 8011266:	2200      	movs	r2, #0
 8011268:	603b      	str	r3, [r7, #0]
 801126a:	607a      	str	r2, [r7, #4]
 801126c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011270:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011274:	f7ef fcb2 	bl	8000bdc <__aeabi_uldivmod>
 8011278:	4602      	mov	r2, r0
 801127a:	460b      	mov	r3, r1
 801127c:	4610      	mov	r0, r2
 801127e:	4619      	mov	r1, r3
 8011280:	f04f 0200 	mov.w	r2, #0
 8011284:	f04f 0300 	mov.w	r3, #0
 8011288:	020b      	lsls	r3, r1, #8
 801128a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801128e:	0202      	lsls	r2, r0, #8
 8011290:	6979      	ldr	r1, [r7, #20]
 8011292:	6849      	ldr	r1, [r1, #4]
 8011294:	0849      	lsrs	r1, r1, #1
 8011296:	2000      	movs	r0, #0
 8011298:	460c      	mov	r4, r1
 801129a:	4605      	mov	r5, r0
 801129c:	eb12 0804 	adds.w	r8, r2, r4
 80112a0:	eb43 0905 	adc.w	r9, r3, r5
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	2200      	movs	r2, #0
 80112aa:	469a      	mov	sl, r3
 80112ac:	4693      	mov	fp, r2
 80112ae:	4652      	mov	r2, sl
 80112b0:	465b      	mov	r3, fp
 80112b2:	4640      	mov	r0, r8
 80112b4:	4649      	mov	r1, r9
 80112b6:	f7ef fc91 	bl	8000bdc <__aeabi_uldivmod>
 80112ba:	4602      	mov	r2, r0
 80112bc:	460b      	mov	r3, r1
 80112be:	4613      	mov	r3, r2
 80112c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80112c2:	6a3b      	ldr	r3, [r7, #32]
 80112c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80112c8:	d308      	bcc.n	80112dc <UART_SetConfig+0x438>
 80112ca:	6a3b      	ldr	r3, [r7, #32]
 80112cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112d0:	d204      	bcs.n	80112dc <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	6a3a      	ldr	r2, [r7, #32]
 80112d8:	60da      	str	r2, [r3, #12]
 80112da:	e0ce      	b.n	801147a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80112dc:	2301      	movs	r3, #1
 80112de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80112e2:	e0ca      	b.n	801147a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	69db      	ldr	r3, [r3, #28]
 80112e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80112ec:	d166      	bne.n	80113bc <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80112ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80112f2:	2b08      	cmp	r3, #8
 80112f4:	d827      	bhi.n	8011346 <UART_SetConfig+0x4a2>
 80112f6:	a201      	add	r2, pc, #4	; (adr r2, 80112fc <UART_SetConfig+0x458>)
 80112f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112fc:	08011321 	.word	0x08011321
 8011300:	08011329 	.word	0x08011329
 8011304:	08011331 	.word	0x08011331
 8011308:	08011347 	.word	0x08011347
 801130c:	08011337 	.word	0x08011337
 8011310:	08011347 	.word	0x08011347
 8011314:	08011347 	.word	0x08011347
 8011318:	08011347 	.word	0x08011347
 801131c:	0801133f 	.word	0x0801133f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011320:	f7fb fd58 	bl	800cdd4 <HAL_RCC_GetPCLK1Freq>
 8011324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011326:	e014      	b.n	8011352 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011328:	f7fb fd68 	bl	800cdfc <HAL_RCC_GetPCLK2Freq>
 801132c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801132e:	e010      	b.n	8011352 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011330:	4b4e      	ldr	r3, [pc, #312]	; (801146c <UART_SetConfig+0x5c8>)
 8011332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011334:	e00d      	b.n	8011352 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011336:	f7fb fc9b 	bl	800cc70 <HAL_RCC_GetSysClockFreq>
 801133a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801133c:	e009      	b.n	8011352 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801133e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011342:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011344:	e005      	b.n	8011352 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8011346:	2300      	movs	r3, #0
 8011348:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801134a:	2301      	movs	r3, #1
 801134c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011354:	2b00      	cmp	r3, #0
 8011356:	f000 8090 	beq.w	801147a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801135e:	4a44      	ldr	r2, [pc, #272]	; (8011470 <UART_SetConfig+0x5cc>)
 8011360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011364:	461a      	mov	r2, r3
 8011366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011368:	fbb3 f3f2 	udiv	r3, r3, r2
 801136c:	005a      	lsls	r2, r3, #1
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	085b      	lsrs	r3, r3, #1
 8011374:	441a      	add	r2, r3
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	fbb2 f3f3 	udiv	r3, r2, r3
 801137e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011380:	6a3b      	ldr	r3, [r7, #32]
 8011382:	2b0f      	cmp	r3, #15
 8011384:	d916      	bls.n	80113b4 <UART_SetConfig+0x510>
 8011386:	6a3b      	ldr	r3, [r7, #32]
 8011388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801138c:	d212      	bcs.n	80113b4 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801138e:	6a3b      	ldr	r3, [r7, #32]
 8011390:	b29b      	uxth	r3, r3
 8011392:	f023 030f 	bic.w	r3, r3, #15
 8011396:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011398:	6a3b      	ldr	r3, [r7, #32]
 801139a:	085b      	lsrs	r3, r3, #1
 801139c:	b29b      	uxth	r3, r3
 801139e:	f003 0307 	and.w	r3, r3, #7
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	8bfb      	ldrh	r3, [r7, #30]
 80113a6:	4313      	orrs	r3, r2
 80113a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	8bfa      	ldrh	r2, [r7, #30]
 80113b0:	60da      	str	r2, [r3, #12]
 80113b2:	e062      	b.n	801147a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80113b4:	2301      	movs	r3, #1
 80113b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80113ba:	e05e      	b.n	801147a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80113bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80113c0:	2b08      	cmp	r3, #8
 80113c2:	d828      	bhi.n	8011416 <UART_SetConfig+0x572>
 80113c4:	a201      	add	r2, pc, #4	; (adr r2, 80113cc <UART_SetConfig+0x528>)
 80113c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ca:	bf00      	nop
 80113cc:	080113f1 	.word	0x080113f1
 80113d0:	080113f9 	.word	0x080113f9
 80113d4:	08011401 	.word	0x08011401
 80113d8:	08011417 	.word	0x08011417
 80113dc:	08011407 	.word	0x08011407
 80113e0:	08011417 	.word	0x08011417
 80113e4:	08011417 	.word	0x08011417
 80113e8:	08011417 	.word	0x08011417
 80113ec:	0801140f 	.word	0x0801140f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80113f0:	f7fb fcf0 	bl	800cdd4 <HAL_RCC_GetPCLK1Freq>
 80113f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80113f6:	e014      	b.n	8011422 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80113f8:	f7fb fd00 	bl	800cdfc <HAL_RCC_GetPCLK2Freq>
 80113fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80113fe:	e010      	b.n	8011422 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011400:	4b1a      	ldr	r3, [pc, #104]	; (801146c <UART_SetConfig+0x5c8>)
 8011402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011404:	e00d      	b.n	8011422 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011406:	f7fb fc33 	bl	800cc70 <HAL_RCC_GetSysClockFreq>
 801140a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801140c:	e009      	b.n	8011422 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801140e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011414:	e005      	b.n	8011422 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8011416:	2300      	movs	r3, #0
 8011418:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801141a:	2301      	movs	r3, #1
 801141c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011420:	bf00      	nop
    }

    if (pclk != 0U)
 8011422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011424:	2b00      	cmp	r3, #0
 8011426:	d028      	beq.n	801147a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801142c:	4a10      	ldr	r2, [pc, #64]	; (8011470 <UART_SetConfig+0x5cc>)
 801142e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011432:	461a      	mov	r2, r3
 8011434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011436:	fbb3 f2f2 	udiv	r2, r3, r2
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	085b      	lsrs	r3, r3, #1
 8011440:	441a      	add	r2, r3
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	fbb2 f3f3 	udiv	r3, r2, r3
 801144a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801144c:	6a3b      	ldr	r3, [r7, #32]
 801144e:	2b0f      	cmp	r3, #15
 8011450:	d910      	bls.n	8011474 <UART_SetConfig+0x5d0>
 8011452:	6a3b      	ldr	r3, [r7, #32]
 8011454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011458:	d20c      	bcs.n	8011474 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801145a:	6a3b      	ldr	r3, [r7, #32]
 801145c:	b29a      	uxth	r2, r3
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	60da      	str	r2, [r3, #12]
 8011464:	e009      	b.n	801147a <UART_SetConfig+0x5d6>
 8011466:	bf00      	nop
 8011468:	40008000 	.word	0x40008000
 801146c:	00f42400 	.word	0x00f42400
 8011470:	0801672c 	.word	0x0801672c
      }
      else
      {
        ret = HAL_ERROR;
 8011474:	2301      	movs	r3, #1
 8011476:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	2201      	movs	r2, #1
 801147e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	2201      	movs	r2, #1
 8011486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	2200      	movs	r2, #0
 801148e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	2200      	movs	r2, #0
 8011494:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011496:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801149a:	4618      	mov	r0, r3
 801149c:	3730      	adds	r7, #48	; 0x30
 801149e:	46bd      	mov	sp, r7
 80114a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080114a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114b0:	f003 0301 	and.w	r3, r3, #1
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00a      	beq.n	80114ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	430a      	orrs	r2, r1
 80114cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d2:	f003 0302 	and.w	r3, r3, #2
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00a      	beq.n	80114f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	430a      	orrs	r2, r1
 80114ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f4:	f003 0304 	and.w	r3, r3, #4
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00a      	beq.n	8011512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	430a      	orrs	r2, r1
 8011510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011516:	f003 0308 	and.w	r3, r3, #8
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00a      	beq.n	8011534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	430a      	orrs	r2, r1
 8011532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011538:	f003 0310 	and.w	r3, r3, #16
 801153c:	2b00      	cmp	r3, #0
 801153e:	d00a      	beq.n	8011556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	430a      	orrs	r2, r1
 8011554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801155a:	f003 0320 	and.w	r3, r3, #32
 801155e:	2b00      	cmp	r3, #0
 8011560:	d00a      	beq.n	8011578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	430a      	orrs	r2, r1
 8011576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801157c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011580:	2b00      	cmp	r3, #0
 8011582:	d01a      	beq.n	80115ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	430a      	orrs	r2, r1
 8011598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801159e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115a2:	d10a      	bne.n	80115ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	430a      	orrs	r2, r1
 80115b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00a      	beq.n	80115dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	430a      	orrs	r2, r1
 80115da:	605a      	str	r2, [r3, #4]
  }
}
 80115dc:	bf00      	nop
 80115de:	370c      	adds	r7, #12
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr

080115e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b098      	sub	sp, #96	; 0x60
 80115ec:	af02      	add	r7, sp, #8
 80115ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115f8:	f7f7 ff96 	bl	8009528 <HAL_GetTick>
 80115fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f003 0308 	and.w	r3, r3, #8
 8011608:	2b08      	cmp	r3, #8
 801160a:	d12f      	bne.n	801166c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801160c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011614:	2200      	movs	r2, #0
 8011616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f000 f88e 	bl	801173c <UART_WaitOnFlagUntilTimeout>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d022      	beq.n	801166c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	e853 3f00 	ldrex	r3, [r3]
 8011632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801163a:	653b      	str	r3, [r7, #80]	; 0x50
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	461a      	mov	r2, r3
 8011642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011644:	647b      	str	r3, [r7, #68]	; 0x44
 8011646:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801164a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801164c:	e841 2300 	strex	r3, r2, [r1]
 8011650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011654:	2b00      	cmp	r3, #0
 8011656:	d1e6      	bne.n	8011626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2220      	movs	r2, #32
 801165c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2200      	movs	r2, #0
 8011664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011668:	2303      	movs	r3, #3
 801166a:	e063      	b.n	8011734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	f003 0304 	and.w	r3, r3, #4
 8011676:	2b04      	cmp	r3, #4
 8011678:	d149      	bne.n	801170e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801167a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011682:	2200      	movs	r2, #0
 8011684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 f857 	bl	801173c <UART_WaitOnFlagUntilTimeout>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d03c      	beq.n	801170e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169c:	e853 3f00 	ldrex	r3, [r3]
 80116a0:	623b      	str	r3, [r7, #32]
   return(result);
 80116a2:	6a3b      	ldr	r3, [r7, #32]
 80116a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80116a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	461a      	mov	r2, r3
 80116b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116b2:	633b      	str	r3, [r7, #48]	; 0x30
 80116b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116ba:	e841 2300 	strex	r3, r2, [r1]
 80116be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80116c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1e6      	bne.n	8011694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	3308      	adds	r3, #8
 80116cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	e853 3f00 	ldrex	r3, [r3]
 80116d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	f023 0301 	bic.w	r3, r3, #1
 80116dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	3308      	adds	r3, #8
 80116e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116e6:	61fa      	str	r2, [r7, #28]
 80116e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ea:	69b9      	ldr	r1, [r7, #24]
 80116ec:	69fa      	ldr	r2, [r7, #28]
 80116ee:	e841 2300 	strex	r3, r2, [r1]
 80116f2:	617b      	str	r3, [r7, #20]
   return(result);
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1e5      	bne.n	80116c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2220      	movs	r2, #32
 80116fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801170a:	2303      	movs	r3, #3
 801170c:	e012      	b.n	8011734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2220      	movs	r2, #32
 8011712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2220      	movs	r2, #32
 801171a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011732:	2300      	movs	r3, #0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3758      	adds	r7, #88	; 0x58
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	603b      	str	r3, [r7, #0]
 8011748:	4613      	mov	r3, r2
 801174a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801174c:	e049      	b.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011754:	d045      	beq.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011756:	f7f7 fee7 	bl	8009528 <HAL_GetTick>
 801175a:	4602      	mov	r2, r0
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	69ba      	ldr	r2, [r7, #24]
 8011762:	429a      	cmp	r2, r3
 8011764:	d302      	bcc.n	801176c <UART_WaitOnFlagUntilTimeout+0x30>
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d101      	bne.n	8011770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801176c:	2303      	movs	r3, #3
 801176e:	e048      	b.n	8011802 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f003 0304 	and.w	r3, r3, #4
 801177a:	2b00      	cmp	r3, #0
 801177c:	d031      	beq.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	69db      	ldr	r3, [r3, #28]
 8011784:	f003 0308 	and.w	r3, r3, #8
 8011788:	2b08      	cmp	r3, #8
 801178a:	d110      	bne.n	80117ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2208      	movs	r2, #8
 8011792:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011794:	68f8      	ldr	r0, [r7, #12]
 8011796:	f000 f95b 	bl	8011a50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2208      	movs	r2, #8
 801179e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2200      	movs	r2, #0
 80117a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80117aa:	2301      	movs	r3, #1
 80117ac:	e029      	b.n	8011802 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	69db      	ldr	r3, [r3, #28]
 80117b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117bc:	d111      	bne.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80117c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f000 f941 	bl	8011a50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2220      	movs	r2, #32
 80117d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2200      	movs	r2, #0
 80117da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80117de:	2303      	movs	r3, #3
 80117e0:	e00f      	b.n	8011802 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	69da      	ldr	r2, [r3, #28]
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	4013      	ands	r3, r2
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	bf0c      	ite	eq
 80117f2:	2301      	moveq	r3, #1
 80117f4:	2300      	movne	r3, #0
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	461a      	mov	r2, r3
 80117fa:	79fb      	ldrb	r3, [r7, #7]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d0a6      	beq.n	801174e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011800:	2300      	movs	r3, #0
}
 8011802:	4618      	mov	r0, r3
 8011804:	3710      	adds	r7, #16
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
	...

0801180c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801180c:	b480      	push	{r7}
 801180e:	b0a3      	sub	sp, #140	; 0x8c
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	4613      	mov	r3, r2
 8011818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	68ba      	ldr	r2, [r7, #8]
 801181e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	88fa      	ldrh	r2, [r7, #6]
 8011824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	88fa      	ldrh	r2, [r7, #6]
 801182c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801183e:	d10e      	bne.n	801185e <UART_Start_Receive_IT+0x52>
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	691b      	ldr	r3, [r3, #16]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d105      	bne.n	8011854 <UART_Start_Receive_IT+0x48>
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801184e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011852:	e02d      	b.n	80118b0 <UART_Start_Receive_IT+0xa4>
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	22ff      	movs	r2, #255	; 0xff
 8011858:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801185c:	e028      	b.n	80118b0 <UART_Start_Receive_IT+0xa4>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	689b      	ldr	r3, [r3, #8]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d10d      	bne.n	8011882 <UART_Start_Receive_IT+0x76>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	691b      	ldr	r3, [r3, #16]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d104      	bne.n	8011878 <UART_Start_Receive_IT+0x6c>
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	22ff      	movs	r2, #255	; 0xff
 8011872:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011876:	e01b      	b.n	80118b0 <UART_Start_Receive_IT+0xa4>
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	227f      	movs	r2, #127	; 0x7f
 801187c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011880:	e016      	b.n	80118b0 <UART_Start_Receive_IT+0xa4>
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	689b      	ldr	r3, [r3, #8]
 8011886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801188a:	d10d      	bne.n	80118a8 <UART_Start_Receive_IT+0x9c>
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	691b      	ldr	r3, [r3, #16]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d104      	bne.n	801189e <UART_Start_Receive_IT+0x92>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	227f      	movs	r2, #127	; 0x7f
 8011898:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801189c:	e008      	b.n	80118b0 <UART_Start_Receive_IT+0xa4>
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	223f      	movs	r2, #63	; 0x3f
 80118a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80118a6:	e003      	b.n	80118b0 <UART_Start_Receive_IT+0xa4>
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2200      	movs	r2, #0
 80118b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2222      	movs	r2, #34	; 0x22
 80118bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	3308      	adds	r3, #8
 80118c6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80118ca:	e853 3f00 	ldrex	r3, [r3]
 80118ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80118d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118d2:	f043 0301 	orr.w	r3, r3, #1
 80118d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	3308      	adds	r3, #8
 80118e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80118e4:	673a      	str	r2, [r7, #112]	; 0x70
 80118e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80118ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80118ec:	e841 2300 	strex	r3, r2, [r1]
 80118f0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80118f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1e3      	bne.n	80118c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80118fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011900:	d14f      	bne.n	80119a2 <UART_Start_Receive_IT+0x196>
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011908:	88fa      	ldrh	r2, [r7, #6]
 801190a:	429a      	cmp	r2, r3
 801190c:	d349      	bcc.n	80119a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011916:	d107      	bne.n	8011928 <UART_Start_Receive_IT+0x11c>
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	691b      	ldr	r3, [r3, #16]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d103      	bne.n	8011928 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	4a47      	ldr	r2, [pc, #284]	; (8011a40 <UART_Start_Receive_IT+0x234>)
 8011924:	675a      	str	r2, [r3, #116]	; 0x74
 8011926:	e002      	b.n	801192e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	4a46      	ldr	r2, [pc, #280]	; (8011a44 <UART_Start_Receive_IT+0x238>)
 801192c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	691b      	ldr	r3, [r3, #16]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d01a      	beq.n	801196c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801193c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801193e:	e853 3f00 	ldrex	r3, [r3]
 8011942:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801194a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	461a      	mov	r2, r3
 8011954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011958:	65fb      	str	r3, [r7, #92]	; 0x5c
 801195a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801195c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801195e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011960:	e841 2300 	strex	r3, r2, [r1]
 8011964:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011968:	2b00      	cmp	r3, #0
 801196a:	d1e4      	bne.n	8011936 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	3308      	adds	r3, #8
 8011972:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011976:	e853 3f00 	ldrex	r3, [r3]
 801197a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011982:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	3308      	adds	r3, #8
 801198a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801198c:	64ba      	str	r2, [r7, #72]	; 0x48
 801198e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011990:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011994:	e841 2300 	strex	r3, r2, [r1]
 8011998:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801199a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801199c:	2b00      	cmp	r3, #0
 801199e:	d1e5      	bne.n	801196c <UART_Start_Receive_IT+0x160>
 80119a0:	e046      	b.n	8011a30 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	689b      	ldr	r3, [r3, #8]
 80119a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119aa:	d107      	bne.n	80119bc <UART_Start_Receive_IT+0x1b0>
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	691b      	ldr	r3, [r3, #16]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d103      	bne.n	80119bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	4a24      	ldr	r2, [pc, #144]	; (8011a48 <UART_Start_Receive_IT+0x23c>)
 80119b8:	675a      	str	r2, [r3, #116]	; 0x74
 80119ba:	e002      	b.n	80119c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	4a23      	ldr	r2, [pc, #140]	; (8011a4c <UART_Start_Receive_IT+0x240>)
 80119c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d019      	beq.n	80119fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d2:	e853 3f00 	ldrex	r3, [r3]
 80119d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80119d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80119de:	677b      	str	r3, [r7, #116]	; 0x74
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	461a      	mov	r2, r3
 80119e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80119e8:	637b      	str	r3, [r7, #52]	; 0x34
 80119ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80119ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119f0:	e841 2300 	strex	r3, r2, [r1]
 80119f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80119f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1e6      	bne.n	80119ca <UART_Start_Receive_IT+0x1be>
 80119fc:	e018      	b.n	8011a30 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	e853 3f00 	ldrex	r3, [r3]
 8011a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	f043 0320 	orr.w	r3, r3, #32
 8011a12:	67bb      	str	r3, [r7, #120]	; 0x78
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	461a      	mov	r2, r3
 8011a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a1c:	623b      	str	r3, [r7, #32]
 8011a1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a20:	69f9      	ldr	r1, [r7, #28]
 8011a22:	6a3a      	ldr	r2, [r7, #32]
 8011a24:	e841 2300 	strex	r3, r2, [r1]
 8011a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d1e6      	bne.n	80119fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011a30:	2300      	movs	r3, #0
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	378c      	adds	r7, #140	; 0x8c
 8011a36:	46bd      	mov	sp, r7
 8011a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop
 8011a40:	08012271 	.word	0x08012271
 8011a44:	08011f11 	.word	0x08011f11
 8011a48:	08011d59 	.word	0x08011d59
 8011a4c:	08011ba1 	.word	0x08011ba1

08011a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a50:	b480      	push	{r7}
 8011a52:	b095      	sub	sp, #84	; 0x54
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a60:	e853 3f00 	ldrex	r3, [r3]
 8011a64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	461a      	mov	r2, r3
 8011a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a76:	643b      	str	r3, [r7, #64]	; 0x40
 8011a78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a7e:	e841 2300 	strex	r3, r2, [r1]
 8011a82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d1e6      	bne.n	8011a58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	3308      	adds	r3, #8
 8011a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a92:	6a3b      	ldr	r3, [r7, #32]
 8011a94:	e853 3f00 	ldrex	r3, [r3]
 8011a98:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011aa0:	f023 0301 	bic.w	r3, r3, #1
 8011aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	3308      	adds	r3, #8
 8011aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ab6:	e841 2300 	strex	r3, r2, [r1]
 8011aba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d1e3      	bne.n	8011a8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ac6:	2b01      	cmp	r3, #1
 8011ac8:	d118      	bne.n	8011afc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	e853 3f00 	ldrex	r3, [r3]
 8011ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	f023 0310 	bic.w	r3, r3, #16
 8011ade:	647b      	str	r3, [r7, #68]	; 0x44
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ae8:	61bb      	str	r3, [r7, #24]
 8011aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aec:	6979      	ldr	r1, [r7, #20]
 8011aee:	69ba      	ldr	r2, [r7, #24]
 8011af0:	e841 2300 	strex	r3, r2, [r1]
 8011af4:	613b      	str	r3, [r7, #16]
   return(result);
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1e6      	bne.n	8011aca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2220      	movs	r2, #32
 8011b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2200      	movs	r2, #0
 8011b08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b10:	bf00      	nop
 8011b12:	3754      	adds	r7, #84	; 0x54
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr

08011b1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2200      	movs	r2, #0
 8011b36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b3a:	68f8      	ldr	r0, [r7, #12]
 8011b3c:	f7ff f99c 	bl	8010e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b40:	bf00      	nop
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b088      	sub	sp, #32
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	e853 3f00 	ldrex	r3, [r3]
 8011b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b64:	61fb      	str	r3, [r7, #28]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	61bb      	str	r3, [r7, #24]
 8011b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b72:	6979      	ldr	r1, [r7, #20]
 8011b74:	69ba      	ldr	r2, [r7, #24]
 8011b76:	e841 2300 	strex	r3, r2, [r1]
 8011b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d1e6      	bne.n	8011b50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2220      	movs	r2, #32
 8011b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7ff f967 	bl	8010e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b96:	bf00      	nop
 8011b98:	3720      	adds	r7, #32
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
	...

08011ba0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b09c      	sub	sp, #112	; 0x70
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bb8:	2b22      	cmp	r3, #34	; 0x22
 8011bba:	f040 80be 	bne.w	8011d3a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011bc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011bcc:	b2d9      	uxtb	r1, r3
 8011bce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011bd2:	b2da      	uxtb	r2, r3
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bd8:	400a      	ands	r2, r1
 8011bda:	b2d2      	uxtb	r2, r2
 8011bdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011be2:	1c5a      	adds	r2, r3, #1
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	b29a      	uxth	r2, r3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f040 80a1 	bne.w	8011d4a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c10:	e853 3f00 	ldrex	r3, [r3]
 8011c14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	461a      	mov	r2, r3
 8011c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c26:	65bb      	str	r3, [r7, #88]	; 0x58
 8011c28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c2e:	e841 2300 	strex	r3, r2, [r1]
 8011c32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d1e6      	bne.n	8011c08 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	3308      	adds	r3, #8
 8011c40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c44:	e853 3f00 	ldrex	r3, [r3]
 8011c48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c4c:	f023 0301 	bic.w	r3, r3, #1
 8011c50:	667b      	str	r3, [r7, #100]	; 0x64
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	3308      	adds	r3, #8
 8011c58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c5a:	647a      	str	r2, [r7, #68]	; 0x44
 8011c5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c62:	e841 2300 	strex	r3, r2, [r1]
 8011c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1e5      	bne.n	8011c3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2220      	movs	r2, #32
 8011c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4a33      	ldr	r2, [pc, #204]	; (8011d54 <UART_RxISR_8BIT+0x1b4>)
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	d01f      	beq.n	8011ccc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d018      	beq.n	8011ccc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca2:	e853 3f00 	ldrex	r3, [r3]
 8011ca6:	623b      	str	r3, [r7, #32]
   return(result);
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011cae:	663b      	str	r3, [r7, #96]	; 0x60
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8011cba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cc0:	e841 2300 	strex	r3, r2, [r1]
 8011cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d1e6      	bne.n	8011c9a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d12e      	bne.n	8011d32 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	e853 3f00 	ldrex	r3, [r3]
 8011ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f023 0310 	bic.w	r3, r3, #16
 8011cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cf8:	61fb      	str	r3, [r7, #28]
 8011cfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cfc:	69b9      	ldr	r1, [r7, #24]
 8011cfe:	69fa      	ldr	r2, [r7, #28]
 8011d00:	e841 2300 	strex	r3, r2, [r1]
 8011d04:	617b      	str	r3, [r7, #20]
   return(result);
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d1e6      	bne.n	8011cda <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	69db      	ldr	r3, [r3, #28]
 8011d12:	f003 0310 	and.w	r3, r3, #16
 8011d16:	2b10      	cmp	r3, #16
 8011d18:	d103      	bne.n	8011d22 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	2210      	movs	r2, #16
 8011d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011d28:	4619      	mov	r1, r3
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f7ff f8ae 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d30:	e00b      	b.n	8011d4a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f7ef fbc2 	bl	80014bc <HAL_UART_RxCpltCallback>
}
 8011d38:	e007      	b.n	8011d4a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	699a      	ldr	r2, [r3, #24]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f042 0208 	orr.w	r2, r2, #8
 8011d48:	619a      	str	r2, [r3, #24]
}
 8011d4a:	bf00      	nop
 8011d4c:	3770      	adds	r7, #112	; 0x70
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	40008000 	.word	0x40008000

08011d58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b09c      	sub	sp, #112	; 0x70
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d70:	2b22      	cmp	r3, #34	; 0x22
 8011d72:	f040 80be 	bne.w	8011ef2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d84:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011d86:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011d8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011d8e:	4013      	ands	r3, r2
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d9a:	1c9a      	adds	r2, r3, #2
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	3b01      	subs	r3, #1
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	f040 80a1 	bne.w	8011f02 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011dc8:	e853 3f00 	ldrex	r3, [r3]
 8011dcc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dde:	657b      	str	r3, [r7, #84]	; 0x54
 8011de0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011de6:	e841 2300 	strex	r3, r2, [r1]
 8011dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d1e6      	bne.n	8011dc0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	3308      	adds	r3, #8
 8011df8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dfc:	e853 3f00 	ldrex	r3, [r3]
 8011e00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e04:	f023 0301 	bic.w	r3, r3, #1
 8011e08:	663b      	str	r3, [r7, #96]	; 0x60
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	3308      	adds	r3, #8
 8011e10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011e12:	643a      	str	r2, [r7, #64]	; 0x40
 8011e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e1a:	e841 2300 	strex	r3, r2, [r1]
 8011e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d1e5      	bne.n	8011df2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2220      	movs	r2, #32
 8011e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2200      	movs	r2, #0
 8011e32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2200      	movs	r2, #0
 8011e38:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4a33      	ldr	r2, [pc, #204]	; (8011f0c <UART_RxISR_16BIT+0x1b4>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d01f      	beq.n	8011e84 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d018      	beq.n	8011e84 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e58:	6a3b      	ldr	r3, [r7, #32]
 8011e5a:	e853 3f00 	ldrex	r3, [r3]
 8011e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e60:	69fb      	ldr	r3, [r7, #28]
 8011e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e78:	e841 2300 	strex	r3, r2, [r1]
 8011e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d1e6      	bne.n	8011e52 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	d12e      	bne.n	8011eea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	e853 3f00 	ldrex	r3, [r3]
 8011e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	f023 0310 	bic.w	r3, r3, #16
 8011ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	461a      	mov	r2, r3
 8011eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011eb0:	61bb      	str	r3, [r7, #24]
 8011eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb4:	6979      	ldr	r1, [r7, #20]
 8011eb6:	69ba      	ldr	r2, [r7, #24]
 8011eb8:	e841 2300 	strex	r3, r2, [r1]
 8011ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d1e6      	bne.n	8011e92 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	69db      	ldr	r3, [r3, #28]
 8011eca:	f003 0310 	and.w	r3, r3, #16
 8011ece:	2b10      	cmp	r3, #16
 8011ed0:	d103      	bne.n	8011eda <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2210      	movs	r2, #16
 8011ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7fe ffd2 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011ee8:	e00b      	b.n	8011f02 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f7ef fae6 	bl	80014bc <HAL_UART_RxCpltCallback>
}
 8011ef0:	e007      	b.n	8011f02 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	699a      	ldr	r2, [r3, #24]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	f042 0208 	orr.w	r2, r2, #8
 8011f00:	619a      	str	r2, [r3, #24]
}
 8011f02:	bf00      	nop
 8011f04:	3770      	adds	r7, #112	; 0x70
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	40008000 	.word	0x40008000

08011f10 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b0ac      	sub	sp, #176	; 0xb0
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	69db      	ldr	r3, [r3, #28]
 8011f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f46:	2b22      	cmp	r3, #34	; 0x22
 8011f48:	f040 8182 	bne.w	8012250 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011f52:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011f56:	e125      	b.n	80121a4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f5e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011f62:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011f66:	b2d9      	uxtb	r1, r3
 8011f68:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011f6c:	b2da      	uxtb	r2, r3
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f72:	400a      	ands	r2, r1
 8011f74:	b2d2      	uxtb	r2, r2
 8011f76:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f7c:	1c5a      	adds	r2, r3, #1
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	3b01      	subs	r3, #1
 8011f8c:	b29a      	uxth	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	69db      	ldr	r3, [r3, #28]
 8011f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fa2:	f003 0307 	and.w	r3, r3, #7
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d053      	beq.n	8012052 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fae:	f003 0301 	and.w	r3, r3, #1
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d011      	beq.n	8011fda <UART_RxISR_8BIT_FIFOEN+0xca>
 8011fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00b      	beq.n	8011fda <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fd0:	f043 0201 	orr.w	r2, r3, #1
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fde:	f003 0302 	and.w	r3, r3, #2
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d011      	beq.n	801200a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011fea:	f003 0301 	and.w	r3, r3, #1
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00b      	beq.n	801200a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2202      	movs	r2, #2
 8011ff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012000:	f043 0204 	orr.w	r2, r3, #4
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801200a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801200e:	f003 0304 	and.w	r3, r3, #4
 8012012:	2b00      	cmp	r3, #0
 8012014:	d011      	beq.n	801203a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801201a:	f003 0301 	and.w	r3, r3, #1
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00b      	beq.n	801203a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2204      	movs	r2, #4
 8012028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012030:	f043 0202 	orr.w	r2, r3, #2
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012040:	2b00      	cmp	r3, #0
 8012042:	d006      	beq.n	8012052 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7fe ff17 	bl	8010e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2200      	movs	r2, #0
 801204e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012058:	b29b      	uxth	r3, r3
 801205a:	2b00      	cmp	r3, #0
 801205c:	f040 80a2 	bne.w	80121a4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012068:	e853 3f00 	ldrex	r3, [r3]
 801206c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801206e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	461a      	mov	r2, r3
 801207e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012082:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012084:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012086:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012088:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801208a:	e841 2300 	strex	r3, r2, [r1]
 801208e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012092:	2b00      	cmp	r3, #0
 8012094:	d1e4      	bne.n	8012060 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	3308      	adds	r3, #8
 801209c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801209e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120a0:	e853 3f00 	ldrex	r3, [r3]
 80120a4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80120a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80120ac:	f023 0301 	bic.w	r3, r3, #1
 80120b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3308      	adds	r3, #8
 80120ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80120be:	66ba      	str	r2, [r7, #104]	; 0x68
 80120c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80120c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80120c6:	e841 2300 	strex	r3, r2, [r1]
 80120ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80120cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1e1      	bne.n	8012096 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2220      	movs	r2, #32
 80120d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2200      	movs	r2, #0
 80120e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	4a5f      	ldr	r2, [pc, #380]	; (8012268 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80120ec:	4293      	cmp	r3, r2
 80120ee:	d021      	beq.n	8012134 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d01a      	beq.n	8012134 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012106:	e853 3f00 	ldrex	r3, [r3]
 801210a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801210e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	461a      	mov	r2, r3
 801211c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012120:	657b      	str	r3, [r7, #84]	; 0x54
 8012122:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012124:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012126:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012128:	e841 2300 	strex	r3, r2, [r1]
 801212c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801212e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1e4      	bne.n	80120fe <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012138:	2b01      	cmp	r3, #1
 801213a:	d130      	bne.n	801219e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2200      	movs	r2, #0
 8012140:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801214a:	e853 3f00 	ldrex	r3, [r3]
 801214e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012152:	f023 0310 	bic.w	r3, r3, #16
 8012156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	461a      	mov	r2, r3
 8012160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012164:	643b      	str	r3, [r7, #64]	; 0x40
 8012166:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012168:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801216a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801216c:	e841 2300 	strex	r3, r2, [r1]
 8012170:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1e4      	bne.n	8012142 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	69db      	ldr	r3, [r3, #28]
 801217e:	f003 0310 	and.w	r3, r3, #16
 8012182:	2b10      	cmp	r3, #16
 8012184:	d103      	bne.n	801218e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	2210      	movs	r2, #16
 801218c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012194:	4619      	mov	r1, r3
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f7fe fe78 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
 801219c:	e002      	b.n	80121a4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7ef f98c 	bl	80014bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d006      	beq.n	80121ba <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80121ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80121b0:	f003 0320 	and.w	r3, r3, #32
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	f47f aecf 	bne.w	8011f58 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80121c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d049      	beq.n	8012260 <UART_RxISR_8BIT_FIFOEN+0x350>
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121d2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d242      	bcs.n	8012260 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	3308      	adds	r3, #8
 80121e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e2:	6a3b      	ldr	r3, [r7, #32]
 80121e4:	e853 3f00 	ldrex	r3, [r3]
 80121e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80121f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3308      	adds	r3, #8
 80121fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80121fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012206:	e841 2300 	strex	r3, r2, [r1]
 801220a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	2b00      	cmp	r3, #0
 8012210:	d1e3      	bne.n	80121da <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4a15      	ldr	r2, [pc, #84]	; (801226c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012216:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	e853 3f00 	ldrex	r3, [r3]
 8012224:	60bb      	str	r3, [r7, #8]
   return(result);
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	f043 0320 	orr.w	r3, r3, #32
 801222c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	461a      	mov	r2, r3
 8012236:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801223a:	61bb      	str	r3, [r7, #24]
 801223c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801223e:	6979      	ldr	r1, [r7, #20]
 8012240:	69ba      	ldr	r2, [r7, #24]
 8012242:	e841 2300 	strex	r3, r2, [r1]
 8012246:	613b      	str	r3, [r7, #16]
   return(result);
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d1e4      	bne.n	8012218 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801224e:	e007      	b.n	8012260 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	699a      	ldr	r2, [r3, #24]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f042 0208 	orr.w	r2, r2, #8
 801225e:	619a      	str	r2, [r3, #24]
}
 8012260:	bf00      	nop
 8012262:	37b0      	adds	r7, #176	; 0xb0
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	40008000 	.word	0x40008000
 801226c:	08011ba1 	.word	0x08011ba1

08012270 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b0ae      	sub	sp, #184	; 0xb8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801227e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	69db      	ldr	r3, [r3, #28]
 8012288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122a6:	2b22      	cmp	r3, #34	; 0x22
 80122a8:	f040 8186 	bne.w	80125b8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80122b2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80122b6:	e129      	b.n	801250c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122be:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80122ca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80122ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80122d2:	4013      	ands	r3, r2
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80122da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122e0:	1c9a      	adds	r2, r3, #2
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	3b01      	subs	r3, #1
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	69db      	ldr	r3, [r3, #28]
 80122fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012306:	f003 0307 	and.w	r3, r3, #7
 801230a:	2b00      	cmp	r3, #0
 801230c:	d053      	beq.n	80123b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801230e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012312:	f003 0301 	and.w	r3, r3, #1
 8012316:	2b00      	cmp	r3, #0
 8012318:	d011      	beq.n	801233e <UART_RxISR_16BIT_FIFOEN+0xce>
 801231a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00b      	beq.n	801233e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	2201      	movs	r2, #1
 801232c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012334:	f043 0201 	orr.w	r2, r3, #1
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801233e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012342:	f003 0302 	and.w	r3, r3, #2
 8012346:	2b00      	cmp	r3, #0
 8012348:	d011      	beq.n	801236e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801234a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801234e:	f003 0301 	and.w	r3, r3, #1
 8012352:	2b00      	cmp	r3, #0
 8012354:	d00b      	beq.n	801236e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	2202      	movs	r2, #2
 801235c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012364:	f043 0204 	orr.w	r2, r3, #4
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801236e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012372:	f003 0304 	and.w	r3, r3, #4
 8012376:	2b00      	cmp	r3, #0
 8012378:	d011      	beq.n	801239e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801237a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801237e:	f003 0301 	and.w	r3, r3, #1
 8012382:	2b00      	cmp	r3, #0
 8012384:	d00b      	beq.n	801239e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	2204      	movs	r2, #4
 801238c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012394:	f043 0202 	orr.w	r2, r3, #2
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d006      	beq.n	80123b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f7fe fd65 	bl	8010e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2200      	movs	r2, #0
 80123b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80123bc:	b29b      	uxth	r3, r3
 80123be:	2b00      	cmp	r3, #0
 80123c0:	f040 80a4 	bne.w	801250c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123cc:	e853 3f00 	ldrex	r3, [r3]
 80123d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80123d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80123d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	461a      	mov	r2, r3
 80123e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80123e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80123ea:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80123ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80123f2:	e841 2300 	strex	r3, r2, [r1]
 80123f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80123f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d1e2      	bne.n	80123c4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	3308      	adds	r3, #8
 8012404:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012408:	e853 3f00 	ldrex	r3, [r3]
 801240c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801240e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012414:	f023 0301 	bic.w	r3, r3, #1
 8012418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	3308      	adds	r3, #8
 8012422:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801242a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801242c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801242e:	e841 2300 	strex	r3, r2, [r1]
 8012432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1e1      	bne.n	80123fe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2220      	movs	r2, #32
 801243e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2200      	movs	r2, #0
 8012446:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	4a5f      	ldr	r2, [pc, #380]	; (80125d0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012454:	4293      	cmp	r3, r2
 8012456:	d021      	beq.n	801249c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012462:	2b00      	cmp	r3, #0
 8012464:	d01a      	beq.n	801249c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801246c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801246e:	e853 3f00 	ldrex	r3, [r3]
 8012472:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801247a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	461a      	mov	r2, r3
 8012484:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012488:	65bb      	str	r3, [r7, #88]	; 0x58
 801248a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801248c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801248e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012490:	e841 2300 	strex	r3, r2, [r1]
 8012494:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012498:	2b00      	cmp	r3, #0
 801249a:	d1e4      	bne.n	8012466 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124a0:	2b01      	cmp	r3, #1
 80124a2:	d130      	bne.n	8012506 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b2:	e853 3f00 	ldrex	r3, [r3]
 80124b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80124b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ba:	f023 0310 	bic.w	r3, r3, #16
 80124be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	461a      	mov	r2, r3
 80124c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80124cc:	647b      	str	r3, [r7, #68]	; 0x44
 80124ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80124d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124d4:	e841 2300 	strex	r3, r2, [r1]
 80124d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80124da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d1e4      	bne.n	80124aa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	69db      	ldr	r3, [r3, #28]
 80124e6:	f003 0310 	and.w	r3, r3, #16
 80124ea:	2b10      	cmp	r3, #16
 80124ec:	d103      	bne.n	80124f6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2210      	movs	r2, #16
 80124f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80124fc:	4619      	mov	r1, r3
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f7fe fcc4 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
 8012504:	e002      	b.n	801250c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7ee ffd8 	bl	80014bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801250c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012510:	2b00      	cmp	r3, #0
 8012512:	d006      	beq.n	8012522 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8012514:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012518:	f003 0320 	and.w	r3, r3, #32
 801251c:	2b00      	cmp	r3, #0
 801251e:	f47f aecb 	bne.w	80122b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012528:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801252c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012530:	2b00      	cmp	r3, #0
 8012532:	d049      	beq.n	80125c8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801253a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801253e:	429a      	cmp	r2, r3
 8012540:	d242      	bcs.n	80125c8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	3308      	adds	r3, #8
 8012548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254c:	e853 3f00 	ldrex	r3, [r3]
 8012550:	623b      	str	r3, [r7, #32]
   return(result);
 8012552:	6a3b      	ldr	r3, [r7, #32]
 8012554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	3308      	adds	r3, #8
 8012562:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012566:	633a      	str	r2, [r7, #48]	; 0x30
 8012568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801256a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801256c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801256e:	e841 2300 	strex	r3, r2, [r1]
 8012572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012576:	2b00      	cmp	r3, #0
 8012578:	d1e3      	bne.n	8012542 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	4a15      	ldr	r2, [pc, #84]	; (80125d4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801257e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	e853 3f00 	ldrex	r3, [r3]
 801258c:	60fb      	str	r3, [r7, #12]
   return(result);
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	f043 0320 	orr.w	r3, r3, #32
 8012594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	461a      	mov	r2, r3
 801259e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80125a2:	61fb      	str	r3, [r7, #28]
 80125a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125a6:	69b9      	ldr	r1, [r7, #24]
 80125a8:	69fa      	ldr	r2, [r7, #28]
 80125aa:	e841 2300 	strex	r3, r2, [r1]
 80125ae:	617b      	str	r3, [r7, #20]
   return(result);
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d1e4      	bne.n	8012580 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80125b6:	e007      	b.n	80125c8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	699a      	ldr	r2, [r3, #24]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f042 0208 	orr.w	r2, r2, #8
 80125c6:	619a      	str	r2, [r3, #24]
}
 80125c8:	bf00      	nop
 80125ca:	37b8      	adds	r7, #184	; 0xb8
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	40008000 	.word	0x40008000
 80125d4:	08011d59 	.word	0x08011d59

080125d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80125d8:	b480      	push	{r7}
 80125da:	b083      	sub	sp, #12
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80125e0:	bf00      	nop
 80125e2:	370c      	adds	r7, #12
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr

080125ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b083      	sub	sp, #12
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80125f4:	bf00      	nop
 80125f6:	370c      	adds	r7, #12
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr

08012600 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012608:	bf00      	nop
 801260a:	370c      	adds	r7, #12
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr

08012614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012622:	2b01      	cmp	r3, #1
 8012624:	d101      	bne.n	801262a <HAL_UARTEx_DisableFifoMode+0x16>
 8012626:	2302      	movs	r3, #2
 8012628:	e027      	b.n	801267a <HAL_UARTEx_DisableFifoMode+0x66>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2201      	movs	r2, #1
 801262e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2224      	movs	r2, #36	; 0x24
 8012636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	f022 0201 	bic.w	r2, r2, #1
 8012650:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2200      	movs	r2, #0
 801265e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2220      	movs	r2, #32
 801266c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2200      	movs	r2, #0
 8012674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012678:	2300      	movs	r3, #0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3714      	adds	r7, #20
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr

08012686 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012686:	b580      	push	{r7, lr}
 8012688:	b084      	sub	sp, #16
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
 801268e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012696:	2b01      	cmp	r3, #1
 8012698:	d101      	bne.n	801269e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801269a:	2302      	movs	r3, #2
 801269c:	e02d      	b.n	80126fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2201      	movs	r2, #1
 80126a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2224      	movs	r2, #36	; 0x24
 80126aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f022 0201 	bic.w	r2, r2, #1
 80126c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	689b      	ldr	r3, [r3, #8]
 80126cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	683a      	ldr	r2, [r7, #0]
 80126d6:	430a      	orrs	r2, r1
 80126d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 f850 	bl	8012780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2220      	movs	r2, #32
 80126ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2200      	movs	r2, #0
 80126f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012702:	b580      	push	{r7, lr}
 8012704:	b084      	sub	sp, #16
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
 801270a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012712:	2b01      	cmp	r3, #1
 8012714:	d101      	bne.n	801271a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012716:	2302      	movs	r3, #2
 8012718:	e02d      	b.n	8012776 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2201      	movs	r2, #1
 801271e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2224      	movs	r2, #36	; 0x24
 8012726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f022 0201 	bic.w	r2, r2, #1
 8012740:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	689b      	ldr	r3, [r3, #8]
 8012748:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	683a      	ldr	r2, [r7, #0]
 8012752:	430a      	orrs	r2, r1
 8012754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f000 f812 	bl	8012780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	68fa      	ldr	r2, [r7, #12]
 8012762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2220      	movs	r2, #32
 8012768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2200      	movs	r2, #0
 8012770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012774:	2300      	movs	r3, #0
}
 8012776:	4618      	mov	r0, r3
 8012778:	3710      	adds	r7, #16
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
	...

08012780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012780:	b480      	push	{r7}
 8012782:	b085      	sub	sp, #20
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801278c:	2b00      	cmp	r3, #0
 801278e:	d108      	bne.n	80127a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2201      	movs	r2, #1
 8012794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2201      	movs	r2, #1
 801279c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80127a0:	e031      	b.n	8012806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80127a2:	2308      	movs	r3, #8
 80127a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80127a6:	2308      	movs	r3, #8
 80127a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	689b      	ldr	r3, [r3, #8]
 80127b0:	0e5b      	lsrs	r3, r3, #25
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	f003 0307 	and.w	r3, r3, #7
 80127b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	0f5b      	lsrs	r3, r3, #29
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	f003 0307 	and.w	r3, r3, #7
 80127c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127ca:	7bbb      	ldrb	r3, [r7, #14]
 80127cc:	7b3a      	ldrb	r2, [r7, #12]
 80127ce:	4911      	ldr	r1, [pc, #68]	; (8012814 <UARTEx_SetNbDataToProcess+0x94>)
 80127d0:	5c8a      	ldrb	r2, [r1, r2]
 80127d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80127d6:	7b3a      	ldrb	r2, [r7, #12]
 80127d8:	490f      	ldr	r1, [pc, #60]	; (8012818 <UARTEx_SetNbDataToProcess+0x98>)
 80127da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127e8:	7bfb      	ldrb	r3, [r7, #15]
 80127ea:	7b7a      	ldrb	r2, [r7, #13]
 80127ec:	4909      	ldr	r1, [pc, #36]	; (8012814 <UARTEx_SetNbDataToProcess+0x94>)
 80127ee:	5c8a      	ldrb	r2, [r1, r2]
 80127f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80127f4:	7b7a      	ldrb	r2, [r7, #13]
 80127f6:	4908      	ldr	r1, [pc, #32]	; (8012818 <UARTEx_SetNbDataToProcess+0x98>)
 80127f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80127fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80127fe:	b29a      	uxth	r2, r3
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012806:	bf00      	nop
 8012808:	3714      	adds	r7, #20
 801280a:	46bd      	mov	sp, r7
 801280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012810:	4770      	bx	lr
 8012812:	bf00      	nop
 8012814:	08016744 	.word	0x08016744
 8012818:	0801674c 	.word	0x0801674c

0801281c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801281c:	b480      	push	{r7}
 801281e:	b08b      	sub	sp, #44	; 0x2c
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	fa93 f3a3 	rbit	r3, r3
 8012836:	613b      	str	r3, [r7, #16]
  return result;
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d101      	bne.n	8012846 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8012842:	2320      	movs	r3, #32
 8012844:	e003      	b.n	801284e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	fab3 f383 	clz	r3, r3
 801284c:	b2db      	uxtb	r3, r3
 801284e:	005b      	lsls	r3, r3, #1
 8012850:	2103      	movs	r1, #3
 8012852:	fa01 f303 	lsl.w	r3, r1, r3
 8012856:	43db      	mvns	r3, r3
 8012858:	401a      	ands	r2, r3
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801285e:	6a3b      	ldr	r3, [r7, #32]
 8012860:	fa93 f3a3 	rbit	r3, r3
 8012864:	61fb      	str	r3, [r7, #28]
  return result;
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286c:	2b00      	cmp	r3, #0
 801286e:	d101      	bne.n	8012874 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8012870:	2320      	movs	r3, #32
 8012872:	e003      	b.n	801287c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8012874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012876:	fab3 f383 	clz	r3, r3
 801287a:	b2db      	uxtb	r3, r3
 801287c:	005b      	lsls	r3, r3, #1
 801287e:	6879      	ldr	r1, [r7, #4]
 8012880:	fa01 f303 	lsl.w	r3, r1, r3
 8012884:	431a      	orrs	r2, r3
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	601a      	str	r2, [r3, #0]
}
 801288a:	bf00      	nop
 801288c:	372c      	adds	r7, #44	; 0x2c
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr

08012896 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8012896:	b480      	push	{r7}
 8012898:	b085      	sub	sp, #20
 801289a:	af00      	add	r7, sp, #0
 801289c:	60f8      	str	r0, [r7, #12]
 801289e:	60b9      	str	r1, [r7, #8]
 80128a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	685a      	ldr	r2, [r3, #4]
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	43db      	mvns	r3, r3
 80128aa:	401a      	ands	r2, r3
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	6879      	ldr	r1, [r7, #4]
 80128b0:	fb01 f303 	mul.w	r3, r1, r3
 80128b4:	431a      	orrs	r2, r3
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	605a      	str	r2, [r3, #4]
}
 80128ba:	bf00      	nop
 80128bc:	3714      	adds	r7, #20
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr

080128c6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80128c6:	b480      	push	{r7}
 80128c8:	b08b      	sub	sp, #44	; 0x2c
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	60f8      	str	r0, [r7, #12]
 80128ce:	60b9      	str	r1, [r7, #8]
 80128d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	689a      	ldr	r2, [r3, #8]
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	fa93 f3a3 	rbit	r3, r3
 80128e0:	613b      	str	r3, [r7, #16]
  return result;
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80128e6:	69bb      	ldr	r3, [r7, #24]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d101      	bne.n	80128f0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80128ec:	2320      	movs	r3, #32
 80128ee:	e003      	b.n	80128f8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	fab3 f383 	clz	r3, r3
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	005b      	lsls	r3, r3, #1
 80128fa:	2103      	movs	r1, #3
 80128fc:	fa01 f303 	lsl.w	r3, r1, r3
 8012900:	43db      	mvns	r3, r3
 8012902:	401a      	ands	r2, r3
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012908:	6a3b      	ldr	r3, [r7, #32]
 801290a:	fa93 f3a3 	rbit	r3, r3
 801290e:	61fb      	str	r3, [r7, #28]
  return result;
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012916:	2b00      	cmp	r3, #0
 8012918:	d101      	bne.n	801291e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801291a:	2320      	movs	r3, #32
 801291c:	e003      	b.n	8012926 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012920:	fab3 f383 	clz	r3, r3
 8012924:	b2db      	uxtb	r3, r3
 8012926:	005b      	lsls	r3, r3, #1
 8012928:	6879      	ldr	r1, [r7, #4]
 801292a:	fa01 f303 	lsl.w	r3, r1, r3
 801292e:	431a      	orrs	r2, r3
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8012934:	bf00      	nop
 8012936:	372c      	adds	r7, #44	; 0x2c
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8012940:	b480      	push	{r7}
 8012942:	b08b      	sub	sp, #44	; 0x2c
 8012944:	af00      	add	r7, sp, #0
 8012946:	60f8      	str	r0, [r7, #12]
 8012948:	60b9      	str	r1, [r7, #8]
 801294a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	68da      	ldr	r2, [r3, #12]
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	fa93 f3a3 	rbit	r3, r3
 801295a:	613b      	str	r3, [r7, #16]
  return result;
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d101      	bne.n	801296a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8012966:	2320      	movs	r3, #32
 8012968:	e003      	b.n	8012972 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	fab3 f383 	clz	r3, r3
 8012970:	b2db      	uxtb	r3, r3
 8012972:	005b      	lsls	r3, r3, #1
 8012974:	2103      	movs	r1, #3
 8012976:	fa01 f303 	lsl.w	r3, r1, r3
 801297a:	43db      	mvns	r3, r3
 801297c:	401a      	ands	r2, r3
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012982:	6a3b      	ldr	r3, [r7, #32]
 8012984:	fa93 f3a3 	rbit	r3, r3
 8012988:	61fb      	str	r3, [r7, #28]
  return result;
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012990:	2b00      	cmp	r3, #0
 8012992:	d101      	bne.n	8012998 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8012994:	2320      	movs	r3, #32
 8012996:	e003      	b.n	80129a0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8012998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299a:	fab3 f383 	clz	r3, r3
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	6879      	ldr	r1, [r7, #4]
 80129a4:	fa01 f303 	lsl.w	r3, r1, r3
 80129a8:	431a      	orrs	r2, r3
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	60da      	str	r2, [r3, #12]
}
 80129ae:	bf00      	nop
 80129b0:	372c      	adds	r7, #44	; 0x2c
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr

080129ba <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80129ba:	b480      	push	{r7}
 80129bc:	b08b      	sub	sp, #44	; 0x2c
 80129be:	af00      	add	r7, sp, #0
 80129c0:	60f8      	str	r0, [r7, #12]
 80129c2:	60b9      	str	r1, [r7, #8]
 80129c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	6a1a      	ldr	r2, [r3, #32]
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	fa93 f3a3 	rbit	r3, r3
 80129d4:	613b      	str	r3, [r7, #16]
  return result;
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80129da:	69bb      	ldr	r3, [r7, #24]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d101      	bne.n	80129e4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80129e0:	2320      	movs	r3, #32
 80129e2:	e003      	b.n	80129ec <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	fab3 f383 	clz	r3, r3
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	009b      	lsls	r3, r3, #2
 80129ee:	210f      	movs	r1, #15
 80129f0:	fa01 f303 	lsl.w	r3, r1, r3
 80129f4:	43db      	mvns	r3, r3
 80129f6:	401a      	ands	r2, r3
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80129fc:	6a3b      	ldr	r3, [r7, #32]
 80129fe:	fa93 f3a3 	rbit	r3, r3
 8012a02:	61fb      	str	r3, [r7, #28]
  return result;
 8012a04:	69fb      	ldr	r3, [r7, #28]
 8012a06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d101      	bne.n	8012a12 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8012a0e:	2320      	movs	r3, #32
 8012a10:	e003      	b.n	8012a1a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8012a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a14:	fab3 f383 	clz	r3, r3
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	6879      	ldr	r1, [r7, #4]
 8012a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8012a22:	431a      	orrs	r2, r3
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8012a28:	bf00      	nop
 8012a2a:	372c      	adds	r7, #44	; 0x2c
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr

08012a34 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b08b      	sub	sp, #44	; 0x2c
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	60f8      	str	r0, [r7, #12]
 8012a3c:	60b9      	str	r1, [r7, #8]
 8012a3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	0a1b      	lsrs	r3, r3, #8
 8012a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	fa93 f3a3 	rbit	r3, r3
 8012a50:	613b      	str	r3, [r7, #16]
  return result;
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d101      	bne.n	8012a60 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8012a5c:	2320      	movs	r3, #32
 8012a5e:	e003      	b.n	8012a68 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	fab3 f383 	clz	r3, r3
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	210f      	movs	r1, #15
 8012a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8012a70:	43db      	mvns	r3, r3
 8012a72:	401a      	ands	r2, r3
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	0a1b      	lsrs	r3, r3, #8
 8012a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a7a:	6a3b      	ldr	r3, [r7, #32]
 8012a7c:	fa93 f3a3 	rbit	r3, r3
 8012a80:	61fb      	str	r3, [r7, #28]
  return result;
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d101      	bne.n	8012a90 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8012a8c:	2320      	movs	r3, #32
 8012a8e:	e003      	b.n	8012a98 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8012a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a92:	fab3 f383 	clz	r3, r3
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	6879      	ldr	r1, [r7, #4]
 8012a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8012aa0:	431a      	orrs	r2, r3
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8012aa6:	bf00      	nop
 8012aa8:	372c      	adds	r7, #44	; 0x2c
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr

08012ab2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8012ab2:	b580      	push	{r7, lr}
 8012ab4:	b088      	sub	sp, #32
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
 8012aba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	fa93 f3a3 	rbit	r3, r3
 8012ac8:	60fb      	str	r3, [r7, #12]
  return result;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d101      	bne.n	8012ad8 <LL_GPIO_Init+0x26>
    return 32U;
 8012ad4:	2320      	movs	r3, #32
 8012ad6:	e003      	b.n	8012ae0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	fab3 f383 	clz	r3, r3
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8012ae2:	e047      	b.n	8012b74 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	681a      	ldr	r2, [r3, #0]
 8012ae8:	2101      	movs	r1, #1
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	fa01 f303 	lsl.w	r3, r1, r3
 8012af0:	4013      	ands	r3, r2
 8012af2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8012af4:	69bb      	ldr	r3, [r7, #24]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d039      	beq.n	8012b6e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d003      	beq.n	8012b0a <LL_GPIO_Init+0x58>
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	2b02      	cmp	r3, #2
 8012b08:	d10d      	bne.n	8012b26 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	689b      	ldr	r3, [r3, #8]
 8012b0e:	461a      	mov	r2, r3
 8012b10:	69b9      	ldr	r1, [r7, #24]
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f7ff fed7 	bl	80128c6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	69b9      	ldr	r1, [r7, #24]
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ff feb8 	bl	8012896 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	691b      	ldr	r3, [r3, #16]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	69b9      	ldr	r1, [r7, #24]
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7ff ff06 	bl	8012940 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	2b02      	cmp	r3, #2
 8012b3a:	d111      	bne.n	8012b60 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8012b3c:	69bb      	ldr	r3, [r7, #24]
 8012b3e:	2bff      	cmp	r3, #255	; 0xff
 8012b40:	d807      	bhi.n	8012b52 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	695b      	ldr	r3, [r3, #20]
 8012b46:	461a      	mov	r2, r3
 8012b48:	69b9      	ldr	r1, [r7, #24]
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f7ff ff35 	bl	80129ba <LL_GPIO_SetAFPin_0_7>
 8012b50:	e006      	b.n	8012b60 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	695b      	ldr	r3, [r3, #20]
 8012b56:	461a      	mov	r2, r3
 8012b58:	69b9      	ldr	r1, [r7, #24]
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f7ff ff6a 	bl	8012a34 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	461a      	mov	r2, r3
 8012b66:	69b9      	ldr	r1, [r7, #24]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff fe57 	bl	801281c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	3301      	adds	r3, #1
 8012b72:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d1b0      	bne.n	8012ae4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3720      	adds	r7, #32
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b085      	sub	sp, #20
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012b94:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012b98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	43db      	mvns	r3, r3
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	4013      	ands	r3, r2
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012bb4:	2300      	movs	r3, #0
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3714      	adds	r7, #20
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr

08012bc2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	b480      	push	{r7}
 8012bc6:	b083      	sub	sp, #12
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	f107 0014 	add.w	r0, r7, #20
 8012bd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2200      	movs	r2, #0
 8012be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2200      	movs	r2, #0
 8012be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012bf4:	2300      	movs	r3, #0
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	370c      	adds	r7, #12
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c00:	b004      	add	sp, #16
 8012c02:	4770      	bx	lr

08012c04 <__NVIC_SetPriority>:
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	6039      	str	r1, [r7, #0]
 8012c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	db0a      	blt.n	8012c2e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	b2da      	uxtb	r2, r3
 8012c1c:	490c      	ldr	r1, [pc, #48]	; (8012c50 <__NVIC_SetPriority+0x4c>)
 8012c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c22:	0152      	lsls	r2, r2, #5
 8012c24:	b2d2      	uxtb	r2, r2
 8012c26:	440b      	add	r3, r1
 8012c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012c2c:	e00a      	b.n	8012c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	b2da      	uxtb	r2, r3
 8012c32:	4908      	ldr	r1, [pc, #32]	; (8012c54 <__NVIC_SetPriority+0x50>)
 8012c34:	79fb      	ldrb	r3, [r7, #7]
 8012c36:	f003 030f 	and.w	r3, r3, #15
 8012c3a:	3b04      	subs	r3, #4
 8012c3c:	0152      	lsls	r2, r2, #5
 8012c3e:	b2d2      	uxtb	r2, r2
 8012c40:	440b      	add	r3, r1
 8012c42:	761a      	strb	r2, [r3, #24]
}
 8012c44:	bf00      	nop
 8012c46:	370c      	adds	r7, #12
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr
 8012c50:	e000e100 	.word	0xe000e100
 8012c54:	e000ed00 	.word	0xe000ed00

08012c58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012c5c:	4b05      	ldr	r3, [pc, #20]	; (8012c74 <SysTick_Handler+0x1c>)
 8012c5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012c60:	f001 fcbc 	bl	80145dc <xTaskGetSchedulerState>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b01      	cmp	r3, #1
 8012c68:	d001      	beq.n	8012c6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012c6a:	f002 f911 	bl	8014e90 <xPortSysTickHandler>
  }
}
 8012c6e:	bf00      	nop
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	e000e010 	.word	0xe000e010

08012c78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012c7c:	2100      	movs	r1, #0
 8012c7e:	f06f 0004 	mvn.w	r0, #4
 8012c82:	f7ff ffbf 	bl	8012c04 <__NVIC_SetPriority>
#endif
}
 8012c86:	bf00      	nop
 8012c88:	bd80      	pop	{r7, pc}
	...

08012c8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c92:	f3ef 8305 	mrs	r3, IPSR
 8012c96:	603b      	str	r3, [r7, #0]
  return(result);
 8012c98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d003      	beq.n	8012ca6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012c9e:	f06f 0305 	mvn.w	r3, #5
 8012ca2:	607b      	str	r3, [r7, #4]
 8012ca4:	e00c      	b.n	8012cc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012ca6:	4b0a      	ldr	r3, [pc, #40]	; (8012cd0 <osKernelInitialize+0x44>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d105      	bne.n	8012cba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012cae:	4b08      	ldr	r3, [pc, #32]	; (8012cd0 <osKernelInitialize+0x44>)
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	607b      	str	r3, [r7, #4]
 8012cb8:	e002      	b.n	8012cc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012cba:	f04f 33ff 	mov.w	r3, #4294967295
 8012cbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012cc0:	687b      	ldr	r3, [r7, #4]
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	370c      	adds	r7, #12
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop
 8012cd0:	20000a68 	.word	0x20000a68

08012cd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cda:	f3ef 8305 	mrs	r3, IPSR
 8012cde:	603b      	str	r3, [r7, #0]
  return(result);
 8012ce0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d003      	beq.n	8012cee <osKernelStart+0x1a>
    stat = osErrorISR;
 8012ce6:	f06f 0305 	mvn.w	r3, #5
 8012cea:	607b      	str	r3, [r7, #4]
 8012cec:	e010      	b.n	8012d10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012cee:	4b0b      	ldr	r3, [pc, #44]	; (8012d1c <osKernelStart+0x48>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	2b01      	cmp	r3, #1
 8012cf4:	d109      	bne.n	8012d0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012cf6:	f7ff ffbf 	bl	8012c78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012cfa:	4b08      	ldr	r3, [pc, #32]	; (8012d1c <osKernelStart+0x48>)
 8012cfc:	2202      	movs	r2, #2
 8012cfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012d00:	f001 f88e 	bl	8013e20 <vTaskStartScheduler>
      stat = osOK;
 8012d04:	2300      	movs	r3, #0
 8012d06:	607b      	str	r3, [r7, #4]
 8012d08:	e002      	b.n	8012d10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012d10:	687b      	ldr	r3, [r7, #4]
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3708      	adds	r7, #8
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	20000a68 	.word	0x20000a68

08012d20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b08e      	sub	sp, #56	; 0x38
 8012d24:	af04      	add	r7, sp, #16
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	60b9      	str	r1, [r7, #8]
 8012d2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d30:	f3ef 8305 	mrs	r3, IPSR
 8012d34:	617b      	str	r3, [r7, #20]
  return(result);
 8012d36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d17e      	bne.n	8012e3a <osThreadNew+0x11a>
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d07b      	beq.n	8012e3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012d42:	2380      	movs	r3, #128	; 0x80
 8012d44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012d46:	2318      	movs	r3, #24
 8012d48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d045      	beq.n	8012de6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d002      	beq.n	8012d68 <osThreadNew+0x48>
        name = attr->name;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	699b      	ldr	r3, [r3, #24]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d002      	beq.n	8012d76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	699b      	ldr	r3, [r3, #24]
 8012d74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d008      	beq.n	8012d8e <osThreadNew+0x6e>
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	2b38      	cmp	r3, #56	; 0x38
 8012d80:	d805      	bhi.n	8012d8e <osThreadNew+0x6e>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	f003 0301 	and.w	r3, r3, #1
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d001      	beq.n	8012d92 <osThreadNew+0x72>
        return (NULL);
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e054      	b.n	8012e3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	695b      	ldr	r3, [r3, #20]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d003      	beq.n	8012da2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	695b      	ldr	r3, [r3, #20]
 8012d9e:	089b      	lsrs	r3, r3, #2
 8012da0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d00e      	beq.n	8012dc8 <osThreadNew+0xa8>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	2b5b      	cmp	r3, #91	; 0x5b
 8012db0:	d90a      	bls.n	8012dc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d006      	beq.n	8012dc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	695b      	ldr	r3, [r3, #20]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d002      	beq.n	8012dc8 <osThreadNew+0xa8>
        mem = 1;
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	61bb      	str	r3, [r7, #24]
 8012dc6:	e010      	b.n	8012dea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	689b      	ldr	r3, [r3, #8]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d10c      	bne.n	8012dea <osThreadNew+0xca>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d108      	bne.n	8012dea <osThreadNew+0xca>
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	691b      	ldr	r3, [r3, #16]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d104      	bne.n	8012dea <osThreadNew+0xca>
          mem = 0;
 8012de0:	2300      	movs	r3, #0
 8012de2:	61bb      	str	r3, [r7, #24]
 8012de4:	e001      	b.n	8012dea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012de6:	2300      	movs	r3, #0
 8012de8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012dea:	69bb      	ldr	r3, [r7, #24]
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d110      	bne.n	8012e12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012df4:	687a      	ldr	r2, [r7, #4]
 8012df6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012df8:	9202      	str	r2, [sp, #8]
 8012dfa:	9301      	str	r3, [sp, #4]
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	9300      	str	r3, [sp, #0]
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	6a3a      	ldr	r2, [r7, #32]
 8012e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e06:	68f8      	ldr	r0, [r7, #12]
 8012e08:	f000 fd30 	bl	801386c <xTaskCreateStatic>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	613b      	str	r3, [r7, #16]
 8012e10:	e013      	b.n	8012e3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d110      	bne.n	8012e3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012e18:	6a3b      	ldr	r3, [r7, #32]
 8012e1a:	b29a      	uxth	r2, r3
 8012e1c:	f107 0310 	add.w	r3, r7, #16
 8012e20:	9301      	str	r3, [sp, #4]
 8012e22:	69fb      	ldr	r3, [r7, #28]
 8012e24:	9300      	str	r3, [sp, #0]
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e2a:	68f8      	ldr	r0, [r7, #12]
 8012e2c:	f000 fd63 	bl	80138f6 <xTaskCreate>
 8012e30:	4603      	mov	r3, r0
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	d001      	beq.n	8012e3a <osThreadNew+0x11a>
            hTask = NULL;
 8012e36:	2300      	movs	r3, #0
 8012e38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012e3a:	693b      	ldr	r3, [r7, #16]
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3728      	adds	r7, #40	; 0x28
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}

08012e44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012e44:	b480      	push	{r7}
 8012e46:	b085      	sub	sp, #20
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	60f8      	str	r0, [r7, #12]
 8012e4c:	60b9      	str	r1, [r7, #8]
 8012e4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	4a07      	ldr	r2, [pc, #28]	; (8012e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8012e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	4a06      	ldr	r2, [pc, #24]	; (8012e74 <vApplicationGetIdleTaskMemory+0x30>)
 8012e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2280      	movs	r2, #128	; 0x80
 8012e60:	601a      	str	r2, [r3, #0]
}
 8012e62:	bf00      	nop
 8012e64:	3714      	adds	r7, #20
 8012e66:	46bd      	mov	sp, r7
 8012e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6c:	4770      	bx	lr
 8012e6e:	bf00      	nop
 8012e70:	20000a6c 	.word	0x20000a6c
 8012e74:	20000ac8 	.word	0x20000ac8

08012e78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012e78:	b480      	push	{r7}
 8012e7a:	b085      	sub	sp, #20
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	60f8      	str	r0, [r7, #12]
 8012e80:	60b9      	str	r1, [r7, #8]
 8012e82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	4a07      	ldr	r2, [pc, #28]	; (8012ea4 <vApplicationGetTimerTaskMemory+0x2c>)
 8012e88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	4a06      	ldr	r2, [pc, #24]	; (8012ea8 <vApplicationGetTimerTaskMemory+0x30>)
 8012e8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012e96:	601a      	str	r2, [r3, #0]
}
 8012e98:	bf00      	nop
 8012e9a:	3714      	adds	r7, #20
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea2:	4770      	bx	lr
 8012ea4:	20000cc8 	.word	0x20000cc8
 8012ea8:	20000d24 	.word	0x20000d24

08012eac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f103 0208 	add.w	r2, r3, #8
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ec4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f103 0208 	add.w	r2, r3, #8
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f103 0208 	add.w	r2, r3, #8
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2200      	movs	r2, #0
 8012ede:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ee0:	bf00      	nop
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012eec:	b480      	push	{r7}
 8012eee:	b083      	sub	sp, #12
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012efa:	bf00      	nop
 8012efc:	370c      	adds	r7, #12
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr

08012f06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f06:	b480      	push	{r7}
 8012f08:	b085      	sub	sp, #20
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	6078      	str	r0, [r7, #4]
 8012f0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	68fa      	ldr	r2, [r7, #12]
 8012f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	689a      	ldr	r2, [r3, #8]
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	689b      	ldr	r3, [r3, #8]
 8012f28:	683a      	ldr	r2, [r7, #0]
 8012f2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	1c5a      	adds	r2, r3, #1
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	601a      	str	r2, [r3, #0]
}
 8012f42:	bf00      	nop
 8012f44:	3714      	adds	r7, #20
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr

08012f4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f4e:	b480      	push	{r7}
 8012f50:	b085      	sub	sp, #20
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	6078      	str	r0, [r7, #4]
 8012f56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f64:	d103      	bne.n	8012f6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	691b      	ldr	r3, [r3, #16]
 8012f6a:	60fb      	str	r3, [r7, #12]
 8012f6c:	e00c      	b.n	8012f88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	3308      	adds	r3, #8
 8012f72:	60fb      	str	r3, [r7, #12]
 8012f74:	e002      	b.n	8012f7c <vListInsert+0x2e>
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	60fb      	str	r3, [r7, #12]
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	68ba      	ldr	r2, [r7, #8]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d2f6      	bcs.n	8012f76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	685a      	ldr	r2, [r3, #4]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	683a      	ldr	r2, [r7, #0]
 8012f96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	68fa      	ldr	r2, [r7, #12]
 8012f9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	683a      	ldr	r2, [r7, #0]
 8012fa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	1c5a      	adds	r2, r3, #1
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	601a      	str	r2, [r3, #0]
}
 8012fb4:	bf00      	nop
 8012fb6:	3714      	adds	r7, #20
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbe:	4770      	bx	lr

08012fc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012fc0:	b480      	push	{r7}
 8012fc2:	b085      	sub	sp, #20
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	691b      	ldr	r3, [r3, #16]
 8012fcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	6892      	ldr	r2, [r2, #8]
 8012fd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	6852      	ldr	r2, [r2, #4]
 8012fe0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	687a      	ldr	r2, [r7, #4]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d103      	bne.n	8012ff4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	689a      	ldr	r2, [r3, #8]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	1e5a      	subs	r2, r3, #1
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3714      	adds	r7, #20
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d102      	bne.n	801302e <xQueueGenericReset+0x1a>
 8013028:	f002 f83e 	bl	80150a8 <ulSetInterruptMask>
 801302c:	e7fe      	b.n	801302c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 801302e:	f001 ff03 	bl	8014e38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801303a:	68f9      	ldr	r1, [r7, #12]
 801303c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801303e:	fb01 f303 	mul.w	r3, r1, r3
 8013042:	441a      	add	r2, r3
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2200      	movs	r2, #0
 801304c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801305e:	3b01      	subs	r3, #1
 8013060:	68f9      	ldr	r1, [r7, #12]
 8013062:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013064:	fb01 f303 	mul.w	r3, r1, r3
 8013068:	441a      	add	r2, r3
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	22ff      	movs	r2, #255	; 0xff
 8013072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	22ff      	movs	r2, #255	; 0xff
 801307a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d10e      	bne.n	80130a2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	691b      	ldr	r3, [r3, #16]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d014      	beq.n	80130b6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	3310      	adds	r3, #16
 8013090:	4618      	mov	r0, r3
 8013092:	f001 f90d 	bl	80142b0 <xTaskRemoveFromEventList>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d00c      	beq.n	80130b6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801309c:	f001 feba 	bl	8014e14 <vPortYield>
 80130a0:	e009      	b.n	80130b6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	3310      	adds	r3, #16
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7ff ff00 	bl	8012eac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	3324      	adds	r3, #36	; 0x24
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7ff fefb 	bl	8012eac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80130b6:	f001 fed1 	bl	8014e5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80130ba:	2301      	movs	r3, #1
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3710      	adds	r7, #16
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b088      	sub	sp, #32
 80130c8:	af02      	add	r7, sp, #8
 80130ca:	60f8      	str	r0, [r7, #12]
 80130cc:	60b9      	str	r1, [r7, #8]
 80130ce:	607a      	str	r2, [r7, #4]
 80130d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d102      	bne.n	80130de <xQueueGenericCreateStatic+0x1a>
 80130d8:	f001 ffe6 	bl	80150a8 <ulSetInterruptMask>
 80130dc:	e7fe      	b.n	80130dc <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d102      	bne.n	80130ea <xQueueGenericCreateStatic+0x26>
 80130e4:	f001 ffe0 	bl	80150a8 <ulSetInterruptMask>
 80130e8:	e7fe      	b.n	80130e8 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d002      	beq.n	80130f6 <xQueueGenericCreateStatic+0x32>
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d001      	beq.n	80130fa <xQueueGenericCreateStatic+0x36>
 80130f6:	2301      	movs	r3, #1
 80130f8:	e000      	b.n	80130fc <xQueueGenericCreateStatic+0x38>
 80130fa:	2300      	movs	r3, #0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d102      	bne.n	8013106 <xQueueGenericCreateStatic+0x42>
 8013100:	f001 ffd2 	bl	80150a8 <ulSetInterruptMask>
 8013104:	e7fe      	b.n	8013104 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d102      	bne.n	8013112 <xQueueGenericCreateStatic+0x4e>
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d101      	bne.n	8013116 <xQueueGenericCreateStatic+0x52>
 8013112:	2301      	movs	r3, #1
 8013114:	e000      	b.n	8013118 <xQueueGenericCreateStatic+0x54>
 8013116:	2300      	movs	r3, #0
 8013118:	2b00      	cmp	r3, #0
 801311a:	d102      	bne.n	8013122 <xQueueGenericCreateStatic+0x5e>
 801311c:	f001 ffc4 	bl	80150a8 <ulSetInterruptMask>
 8013120:	e7fe      	b.n	8013120 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013122:	2350      	movs	r3, #80	; 0x50
 8013124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	2b50      	cmp	r3, #80	; 0x50
 801312a:	d002      	beq.n	8013132 <xQueueGenericCreateStatic+0x6e>
 801312c:	f001 ffbc 	bl	80150a8 <ulSetInterruptMask>
 8013130:	e7fe      	b.n	8013130 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013132:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00d      	beq.n	801315a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	2201      	movs	r2, #1
 8013142:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013146:	f897 2020 	ldrb.w	r2, [r7, #32]
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	9300      	str	r3, [sp, #0]
 801314e:	4613      	mov	r3, r2
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	68b9      	ldr	r1, [r7, #8]
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f000 f805 	bl	8013164 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801315a:	697b      	ldr	r3, [r7, #20]
	}
 801315c:	4618      	mov	r0, r3
 801315e:	3718      	adds	r7, #24
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
 8013170:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d103      	bne.n	8013180 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	69ba      	ldr	r2, [r7, #24]
 801317c:	601a      	str	r2, [r3, #0]
 801317e:	e002      	b.n	8013186 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013180:	69bb      	ldr	r3, [r7, #24]
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	68ba      	ldr	r2, [r7, #8]
 8013190:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013192:	2101      	movs	r1, #1
 8013194:	69b8      	ldr	r0, [r7, #24]
 8013196:	f7ff ff3d 	bl	8013014 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	78fa      	ldrb	r2, [r7, #3]
 801319e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80131a2:	bf00      	nop
 80131a4:	3710      	adds	r7, #16
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}

080131aa <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80131aa:	b580      	push	{r7, lr}
 80131ac:	b08a      	sub	sp, #40	; 0x28
 80131ae:	af00      	add	r7, sp, #0
 80131b0:	60f8      	str	r0, [r7, #12]
 80131b2:	60b9      	str	r1, [r7, #8]
 80131b4:	607a      	str	r2, [r7, #4]
 80131b6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80131b8:	2300      	movs	r3, #0
 80131ba:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80131c0:	6a3b      	ldr	r3, [r7, #32]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d102      	bne.n	80131cc <xQueueGenericSend+0x22>
 80131c6:	f001 ff6f 	bl	80150a8 <ulSetInterruptMask>
 80131ca:	e7fe      	b.n	80131ca <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d103      	bne.n	80131da <xQueueGenericSend+0x30>
 80131d2:	6a3b      	ldr	r3, [r7, #32]
 80131d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d101      	bne.n	80131de <xQueueGenericSend+0x34>
 80131da:	2301      	movs	r3, #1
 80131dc:	e000      	b.n	80131e0 <xQueueGenericSend+0x36>
 80131de:	2300      	movs	r3, #0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d102      	bne.n	80131ea <xQueueGenericSend+0x40>
 80131e4:	f001 ff60 	bl	80150a8 <ulSetInterruptMask>
 80131e8:	e7fe      	b.n	80131e8 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	2b02      	cmp	r3, #2
 80131ee:	d103      	bne.n	80131f8 <xQueueGenericSend+0x4e>
 80131f0:	6a3b      	ldr	r3, [r7, #32]
 80131f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	d101      	bne.n	80131fc <xQueueGenericSend+0x52>
 80131f8:	2301      	movs	r3, #1
 80131fa:	e000      	b.n	80131fe <xQueueGenericSend+0x54>
 80131fc:	2300      	movs	r3, #0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d102      	bne.n	8013208 <xQueueGenericSend+0x5e>
 8013202:	f001 ff51 	bl	80150a8 <ulSetInterruptMask>
 8013206:	e7fe      	b.n	8013206 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013208:	f001 f9e8 	bl	80145dc <xTaskGetSchedulerState>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d102      	bne.n	8013218 <xQueueGenericSend+0x6e>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d101      	bne.n	801321c <xQueueGenericSend+0x72>
 8013218:	2301      	movs	r3, #1
 801321a:	e000      	b.n	801321e <xQueueGenericSend+0x74>
 801321c:	2300      	movs	r3, #0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d102      	bne.n	8013228 <xQueueGenericSend+0x7e>
 8013222:	f001 ff41 	bl	80150a8 <ulSetInterruptMask>
 8013226:	e7fe      	b.n	8013226 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013228:	f001 fe06 	bl	8014e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801322c:	6a3b      	ldr	r3, [r7, #32]
 801322e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013230:	6a3b      	ldr	r3, [r7, #32]
 8013232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013234:	429a      	cmp	r2, r3
 8013236:	d302      	bcc.n	801323e <xQueueGenericSend+0x94>
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	2b02      	cmp	r3, #2
 801323c:	d11d      	bne.n	801327a <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801323e:	683a      	ldr	r2, [r7, #0]
 8013240:	68b9      	ldr	r1, [r7, #8]
 8013242:	6a38      	ldr	r0, [r7, #32]
 8013244:	f000 f9a4 	bl	8013590 <prvCopyDataToQueue>
 8013248:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801324a:	6a3b      	ldr	r3, [r7, #32]
 801324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801324e:	2b00      	cmp	r3, #0
 8013250:	d00a      	beq.n	8013268 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013252:	6a3b      	ldr	r3, [r7, #32]
 8013254:	3324      	adds	r3, #36	; 0x24
 8013256:	4618      	mov	r0, r3
 8013258:	f001 f82a 	bl	80142b0 <xTaskRemoveFromEventList>
 801325c:	4603      	mov	r3, r0
 801325e:	2b00      	cmp	r3, #0
 8013260:	d007      	beq.n	8013272 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013262:	f001 fdd7 	bl	8014e14 <vPortYield>
 8013266:	e004      	b.n	8013272 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d001      	beq.n	8013272 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801326e:	f001 fdd1 	bl	8014e14 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013272:	f001 fdf3 	bl	8014e5c <vPortExitCritical>
				return pdPASS;
 8013276:	2301      	movs	r3, #1
 8013278:	e05c      	b.n	8013334 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d103      	bne.n	8013288 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013280:	f001 fdec 	bl	8014e5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013284:	2300      	movs	r3, #0
 8013286:	e055      	b.n	8013334 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328a:	2b00      	cmp	r3, #0
 801328c:	d106      	bne.n	801329c <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801328e:	f107 0314 	add.w	r3, r7, #20
 8013292:	4618      	mov	r0, r3
 8013294:	f001 f868 	bl	8014368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013298:	2301      	movs	r3, #1
 801329a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801329c:	f001 fdde 	bl	8014e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80132a0:	f000 fe14 	bl	8013ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80132a4:	f001 fdc8 	bl	8014e38 <vPortEnterCritical>
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80132ae:	b25b      	sxtb	r3, r3
 80132b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132b4:	d103      	bne.n	80132be <xQueueGenericSend+0x114>
 80132b6:	6a3b      	ldr	r3, [r7, #32]
 80132b8:	2200      	movs	r2, #0
 80132ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80132be:	6a3b      	ldr	r3, [r7, #32]
 80132c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132c4:	b25b      	sxtb	r3, r3
 80132c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ca:	d103      	bne.n	80132d4 <xQueueGenericSend+0x12a>
 80132cc:	6a3b      	ldr	r3, [r7, #32]
 80132ce:	2200      	movs	r2, #0
 80132d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80132d4:	f001 fdc2 	bl	8014e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132d8:	1d3a      	adds	r2, r7, #4
 80132da:	f107 0314 	add.w	r3, r7, #20
 80132de:	4611      	mov	r1, r2
 80132e0:	4618      	mov	r0, r3
 80132e2:	f001 f857 	bl	8014394 <xTaskCheckForTimeOut>
 80132e6:	4603      	mov	r3, r0
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d11d      	bne.n	8013328 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80132ec:	6a38      	ldr	r0, [r7, #32]
 80132ee:	f000 fa47 	bl	8013780 <prvIsQueueFull>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d011      	beq.n	801331c <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80132f8:	6a3b      	ldr	r3, [r7, #32]
 80132fa:	3310      	adds	r3, #16
 80132fc:	687a      	ldr	r2, [r7, #4]
 80132fe:	4611      	mov	r1, r2
 8013300:	4618      	mov	r0, r3
 8013302:	f000 ff95 	bl	8014230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013306:	6a38      	ldr	r0, [r7, #32]
 8013308:	f000 f9d2 	bl	80136b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801330c:	f000 fdec 	bl	8013ee8 <xTaskResumeAll>
 8013310:	4603      	mov	r3, r0
 8013312:	2b00      	cmp	r3, #0
 8013314:	d188      	bne.n	8013228 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8013316:	f001 fd7d 	bl	8014e14 <vPortYield>
 801331a:	e785      	b.n	8013228 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801331c:	6a38      	ldr	r0, [r7, #32]
 801331e:	f000 f9c7 	bl	80136b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013322:	f000 fde1 	bl	8013ee8 <xTaskResumeAll>
 8013326:	e77f      	b.n	8013228 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013328:	6a38      	ldr	r0, [r7, #32]
 801332a:	f000 f9c1 	bl	80136b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801332e:	f000 fddb 	bl	8013ee8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013332:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013334:	4618      	mov	r0, r3
 8013336:	3728      	adds	r7, #40	; 0x28
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b08a      	sub	sp, #40	; 0x28
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
 8013348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801334e:	6a3b      	ldr	r3, [r7, #32]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d102      	bne.n	801335a <xQueueGenericSendFromISR+0x1e>
 8013354:	f001 fea8 	bl	80150a8 <ulSetInterruptMask>
 8013358:	e7fe      	b.n	8013358 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d103      	bne.n	8013368 <xQueueGenericSendFromISR+0x2c>
 8013360:	6a3b      	ldr	r3, [r7, #32]
 8013362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013364:	2b00      	cmp	r3, #0
 8013366:	d101      	bne.n	801336c <xQueueGenericSendFromISR+0x30>
 8013368:	2301      	movs	r3, #1
 801336a:	e000      	b.n	801336e <xQueueGenericSendFromISR+0x32>
 801336c:	2300      	movs	r3, #0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d102      	bne.n	8013378 <xQueueGenericSendFromISR+0x3c>
 8013372:	f001 fe99 	bl	80150a8 <ulSetInterruptMask>
 8013376:	e7fe      	b.n	8013376 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	2b02      	cmp	r3, #2
 801337c:	d103      	bne.n	8013386 <xQueueGenericSendFromISR+0x4a>
 801337e:	6a3b      	ldr	r3, [r7, #32]
 8013380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013382:	2b01      	cmp	r3, #1
 8013384:	d101      	bne.n	801338a <xQueueGenericSendFromISR+0x4e>
 8013386:	2301      	movs	r3, #1
 8013388:	e000      	b.n	801338c <xQueueGenericSendFromISR+0x50>
 801338a:	2300      	movs	r3, #0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d102      	bne.n	8013396 <xQueueGenericSendFromISR+0x5a>
 8013390:	f001 fe8a 	bl	80150a8 <ulSetInterruptMask>
 8013394:	e7fe      	b.n	8013394 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013396:	f001 fe87 	bl	80150a8 <ulSetInterruptMask>
 801339a:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801339c:	6a3b      	ldr	r3, [r7, #32]
 801339e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133a0:	6a3b      	ldr	r3, [r7, #32]
 80133a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d302      	bcc.n	80133ae <xQueueGenericSendFromISR+0x72>
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	2b02      	cmp	r3, #2
 80133ac:	d12d      	bne.n	801340a <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80133ae:	6a3b      	ldr	r3, [r7, #32]
 80133b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133b4:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133ba:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133bc:	683a      	ldr	r2, [r7, #0]
 80133be:	68b9      	ldr	r1, [r7, #8]
 80133c0:	6a38      	ldr	r0, [r7, #32]
 80133c2:	f000 f8e5 	bl	8013590 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80133c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80133ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ce:	d112      	bne.n	80133f6 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133d0:	6a3b      	ldr	r3, [r7, #32]
 80133d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d015      	beq.n	8013404 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133d8:	6a3b      	ldr	r3, [r7, #32]
 80133da:	3324      	adds	r3, #36	; 0x24
 80133dc:	4618      	mov	r0, r3
 80133de:	f000 ff67 	bl	80142b0 <xTaskRemoveFromEventList>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d00d      	beq.n	8013404 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d00a      	beq.n	8013404 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2201      	movs	r2, #1
 80133f2:	601a      	str	r2, [r3, #0]
 80133f4:	e006      	b.n	8013404 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80133f6:	7efb      	ldrb	r3, [r7, #27]
 80133f8:	3301      	adds	r3, #1
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	b25a      	sxtb	r2, r3
 80133fe:	6a3b      	ldr	r3, [r7, #32]
 8013400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013404:	2301      	movs	r3, #1
 8013406:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8013408:	e001      	b.n	801340e <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801340a:	2300      	movs	r3, #0
 801340c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801340e:	69f8      	ldr	r0, [r7, #28]
 8013410:	f001 fe57 	bl	80150c2 <vClearInterruptMask>

	return xReturn;
 8013414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013416:	4618      	mov	r0, r3
 8013418:	3728      	adds	r7, #40	; 0x28
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801341e:	b580      	push	{r7, lr}
 8013420:	b08a      	sub	sp, #40	; 0x28
 8013422:	af00      	add	r7, sp, #0
 8013424:	60f8      	str	r0, [r7, #12]
 8013426:	60b9      	str	r1, [r7, #8]
 8013428:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801342a:	2300      	movs	r3, #0
 801342c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013432:	6a3b      	ldr	r3, [r7, #32]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d102      	bne.n	801343e <xQueueReceive+0x20>
 8013438:	f001 fe36 	bl	80150a8 <ulSetInterruptMask>
 801343c:	e7fe      	b.n	801343c <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d103      	bne.n	801344c <xQueueReceive+0x2e>
 8013444:	6a3b      	ldr	r3, [r7, #32]
 8013446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013448:	2b00      	cmp	r3, #0
 801344a:	d101      	bne.n	8013450 <xQueueReceive+0x32>
 801344c:	2301      	movs	r3, #1
 801344e:	e000      	b.n	8013452 <xQueueReceive+0x34>
 8013450:	2300      	movs	r3, #0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d102      	bne.n	801345c <xQueueReceive+0x3e>
 8013456:	f001 fe27 	bl	80150a8 <ulSetInterruptMask>
 801345a:	e7fe      	b.n	801345a <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801345c:	f001 f8be 	bl	80145dc <xTaskGetSchedulerState>
 8013460:	4603      	mov	r3, r0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d102      	bne.n	801346c <xQueueReceive+0x4e>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d101      	bne.n	8013470 <xQueueReceive+0x52>
 801346c:	2301      	movs	r3, #1
 801346e:	e000      	b.n	8013472 <xQueueReceive+0x54>
 8013470:	2300      	movs	r3, #0
 8013472:	2b00      	cmp	r3, #0
 8013474:	d102      	bne.n	801347c <xQueueReceive+0x5e>
 8013476:	f001 fe17 	bl	80150a8 <ulSetInterruptMask>
 801347a:	e7fe      	b.n	801347a <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801347c:	f001 fcdc 	bl	8014e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013480:	6a3b      	ldr	r3, [r7, #32]
 8013482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013484:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013486:	69fb      	ldr	r3, [r7, #28]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d019      	beq.n	80134c0 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801348c:	68b9      	ldr	r1, [r7, #8]
 801348e:	6a38      	ldr	r0, [r7, #32]
 8013490:	f000 f8e8 	bl	8013664 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013494:	69fb      	ldr	r3, [r7, #28]
 8013496:	1e5a      	subs	r2, r3, #1
 8013498:	6a3b      	ldr	r3, [r7, #32]
 801349a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801349c:	6a3b      	ldr	r3, [r7, #32]
 801349e:	691b      	ldr	r3, [r3, #16]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d009      	beq.n	80134b8 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134a4:	6a3b      	ldr	r3, [r7, #32]
 80134a6:	3310      	adds	r3, #16
 80134a8:	4618      	mov	r0, r3
 80134aa:	f000 ff01 	bl	80142b0 <xTaskRemoveFromEventList>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d001      	beq.n	80134b8 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80134b4:	f001 fcae 	bl	8014e14 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80134b8:	f001 fcd0 	bl	8014e5c <vPortExitCritical>
				return pdPASS;
 80134bc:	2301      	movs	r3, #1
 80134be:	e063      	b.n	8013588 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d103      	bne.n	80134ce <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80134c6:	f001 fcc9 	bl	8014e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80134ca:	2300      	movs	r3, #0
 80134cc:	e05c      	b.n	8013588 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80134ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d106      	bne.n	80134e2 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80134d4:	f107 0314 	add.w	r3, r7, #20
 80134d8:	4618      	mov	r0, r3
 80134da:	f000 ff45 	bl	8014368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80134de:	2301      	movs	r3, #1
 80134e0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80134e2:	f001 fcbb 	bl	8014e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80134e6:	f000 fcf1 	bl	8013ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80134ea:	f001 fca5 	bl	8014e38 <vPortEnterCritical>
 80134ee:	6a3b      	ldr	r3, [r7, #32]
 80134f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80134f4:	b25b      	sxtb	r3, r3
 80134f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134fa:	d103      	bne.n	8013504 <xQueueReceive+0xe6>
 80134fc:	6a3b      	ldr	r3, [r7, #32]
 80134fe:	2200      	movs	r2, #0
 8013500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013504:	6a3b      	ldr	r3, [r7, #32]
 8013506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801350a:	b25b      	sxtb	r3, r3
 801350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013510:	d103      	bne.n	801351a <xQueueReceive+0xfc>
 8013512:	6a3b      	ldr	r3, [r7, #32]
 8013514:	2200      	movs	r2, #0
 8013516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801351a:	f001 fc9f 	bl	8014e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801351e:	1d3a      	adds	r2, r7, #4
 8013520:	f107 0314 	add.w	r3, r7, #20
 8013524:	4611      	mov	r1, r2
 8013526:	4618      	mov	r0, r3
 8013528:	f000 ff34 	bl	8014394 <xTaskCheckForTimeOut>
 801352c:	4603      	mov	r3, r0
 801352e:	2b00      	cmp	r3, #0
 8013530:	d11d      	bne.n	801356e <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013532:	6a38      	ldr	r0, [r7, #32]
 8013534:	f000 f90e 	bl	8013754 <prvIsQueueEmpty>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d011      	beq.n	8013562 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801353e:	6a3b      	ldr	r3, [r7, #32]
 8013540:	3324      	adds	r3, #36	; 0x24
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	4611      	mov	r1, r2
 8013546:	4618      	mov	r0, r3
 8013548:	f000 fe72 	bl	8014230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801354c:	6a38      	ldr	r0, [r7, #32]
 801354e:	f000 f8af 	bl	80136b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013552:	f000 fcc9 	bl	8013ee8 <xTaskResumeAll>
 8013556:	4603      	mov	r3, r0
 8013558:	2b00      	cmp	r3, #0
 801355a:	d18f      	bne.n	801347c <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 801355c:	f001 fc5a 	bl	8014e14 <vPortYield>
 8013560:	e78c      	b.n	801347c <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013562:	6a38      	ldr	r0, [r7, #32]
 8013564:	f000 f8a4 	bl	80136b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013568:	f000 fcbe 	bl	8013ee8 <xTaskResumeAll>
 801356c:	e786      	b.n	801347c <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801356e:	6a38      	ldr	r0, [r7, #32]
 8013570:	f000 f89e 	bl	80136b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013574:	f000 fcb8 	bl	8013ee8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013578:	6a38      	ldr	r0, [r7, #32]
 801357a:	f000 f8eb 	bl	8013754 <prvIsQueueEmpty>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	f43f af7b 	beq.w	801347c <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013586:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013588:	4618      	mov	r0, r3
 801358a:	3728      	adds	r7, #40	; 0x28
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801359c:	2300      	movs	r3, #0
 801359e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d10d      	bne.n	80135ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d14d      	bne.n	8013652 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f001 f82c 	bl	8014618 <xTaskPriorityDisinherit>
 80135c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2200      	movs	r2, #0
 80135c6:	609a      	str	r2, [r3, #8]
 80135c8:	e043      	b.n	8013652 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d119      	bne.n	8013604 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	6858      	ldr	r0, [r3, #4]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d8:	461a      	mov	r2, r3
 80135da:	68b9      	ldr	r1, [r7, #8]
 80135dc:	f002 fa7e 	bl	8015adc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	685a      	ldr	r2, [r3, #4]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135e8:	441a      	add	r2, r3
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	685a      	ldr	r2, [r3, #4]
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	689b      	ldr	r3, [r3, #8]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d32b      	bcc.n	8013652 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	681a      	ldr	r2, [r3, #0]
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	605a      	str	r2, [r3, #4]
 8013602:	e026      	b.n	8013652 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	68d8      	ldr	r0, [r3, #12]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801360c:	461a      	mov	r2, r3
 801360e:	68b9      	ldr	r1, [r7, #8]
 8013610:	f002 fa64 	bl	8015adc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	68da      	ldr	r2, [r3, #12]
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801361c:	425b      	negs	r3, r3
 801361e:	441a      	add	r2, r3
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	68da      	ldr	r2, [r3, #12]
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	429a      	cmp	r2, r3
 801362e:	d207      	bcs.n	8013640 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	689a      	ldr	r2, [r3, #8]
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013638:	425b      	negs	r3, r3
 801363a:	441a      	add	r2, r3
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	2b02      	cmp	r3, #2
 8013644:	d105      	bne.n	8013652 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d002      	beq.n	8013652 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	3b01      	subs	r3, #1
 8013650:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	1c5a      	adds	r2, r3, #1
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801365a:	697b      	ldr	r3, [r7, #20]
}
 801365c:	4618      	mov	r0, r3
 801365e:	3718      	adds	r7, #24
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}

08013664 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013672:	2b00      	cmp	r3, #0
 8013674:	d018      	beq.n	80136a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	68da      	ldr	r2, [r3, #12]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801367e:	441a      	add	r2, r3
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	68da      	ldr	r2, [r3, #12]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	689b      	ldr	r3, [r3, #8]
 801368c:	429a      	cmp	r2, r3
 801368e:	d303      	bcc.n	8013698 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681a      	ldr	r2, [r3, #0]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	68d9      	ldr	r1, [r3, #12]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a0:	461a      	mov	r2, r3
 80136a2:	6838      	ldr	r0, [r7, #0]
 80136a4:	f002 fa1a 	bl	8015adc <memcpy>
	}
}
 80136a8:	bf00      	nop
 80136aa:	3708      	adds	r7, #8
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}

080136b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80136b8:	f001 fbbe 	bl	8014e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80136c4:	e011      	b.n	80136ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d012      	beq.n	80136f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	3324      	adds	r3, #36	; 0x24
 80136d2:	4618      	mov	r0, r3
 80136d4:	f000 fdec 	bl	80142b0 <xTaskRemoveFromEventList>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d001      	beq.n	80136e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80136de:	f000 feab 	bl	8014438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80136e2:	7bfb      	ldrb	r3, [r7, #15]
 80136e4:	3b01      	subs	r3, #1
 80136e6:	b2db      	uxtb	r3, r3
 80136e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80136ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	dce9      	bgt.n	80136c6 <prvUnlockQueue+0x16>
 80136f2:	e000      	b.n	80136f6 <prvUnlockQueue+0x46>
					break;
 80136f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	22ff      	movs	r2, #255	; 0xff
 80136fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80136fe:	f001 fbad 	bl	8014e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013702:	f001 fb99 	bl	8014e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801370c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801370e:	e011      	b.n	8013734 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	691b      	ldr	r3, [r3, #16]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d012      	beq.n	801373e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	3310      	adds	r3, #16
 801371c:	4618      	mov	r0, r3
 801371e:	f000 fdc7 	bl	80142b0 <xTaskRemoveFromEventList>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d001      	beq.n	801372c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013728:	f000 fe86 	bl	8014438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801372c:	7bbb      	ldrb	r3, [r7, #14]
 801372e:	3b01      	subs	r3, #1
 8013730:	b2db      	uxtb	r3, r3
 8013732:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013738:	2b00      	cmp	r3, #0
 801373a:	dce9      	bgt.n	8013710 <prvUnlockQueue+0x60>
 801373c:	e000      	b.n	8013740 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801373e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	22ff      	movs	r2, #255	; 0xff
 8013744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013748:	f001 fb88 	bl	8014e5c <vPortExitCritical>
}
 801374c:	bf00      	nop
 801374e:	3710      	adds	r7, #16
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801375c:	f001 fb6c 	bl	8014e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013768:	2301      	movs	r3, #1
 801376a:	60fb      	str	r3, [r7, #12]
 801376c:	e001      	b.n	8013772 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801376e:	2300      	movs	r3, #0
 8013770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013772:	f001 fb73 	bl	8014e5c <vPortExitCritical>

	return xReturn;
 8013776:	68fb      	ldr	r3, [r7, #12]
}
 8013778:	4618      	mov	r0, r3
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013788:	f001 fb56 	bl	8014e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013794:	429a      	cmp	r2, r3
 8013796:	d102      	bne.n	801379e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013798:	2301      	movs	r3, #1
 801379a:	60fb      	str	r3, [r7, #12]
 801379c:	e001      	b.n	80137a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801379e:	2300      	movs	r3, #0
 80137a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80137a2:	f001 fb5b 	bl	8014e5c <vPortExitCritical>

	return xReturn;
 80137a6:	68fb      	ldr	r3, [r7, #12]
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3710      	adds	r7, #16
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80137b0:	b480      	push	{r7}
 80137b2:	b085      	sub	sp, #20
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80137ba:	2300      	movs	r3, #0
 80137bc:	60fb      	str	r3, [r7, #12]
 80137be:	e014      	b.n	80137ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80137c0:	4a0f      	ldr	r2, [pc, #60]	; (8013800 <vQueueAddToRegistry+0x50>)
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d10b      	bne.n	80137e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80137cc:	490c      	ldr	r1, [pc, #48]	; (8013800 <vQueueAddToRegistry+0x50>)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80137d6:	4a0a      	ldr	r2, [pc, #40]	; (8013800 <vQueueAddToRegistry+0x50>)
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	00db      	lsls	r3, r3, #3
 80137dc:	4413      	add	r3, r2
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80137e2:	e006      	b.n	80137f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	3301      	adds	r3, #1
 80137e8:	60fb      	str	r3, [r7, #12]
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2b07      	cmp	r3, #7
 80137ee:	d9e7      	bls.n	80137c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80137f0:	bf00      	nop
 80137f2:	bf00      	nop
 80137f4:	3714      	adds	r7, #20
 80137f6:	46bd      	mov	sp, r7
 80137f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop
 8013800:	20001124 	.word	0x20001124

08013804 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013804:	b580      	push	{r7, lr}
 8013806:	b086      	sub	sp, #24
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013814:	f001 fb10 	bl	8014e38 <vPortEnterCritical>
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801381e:	b25b      	sxtb	r3, r3
 8013820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013824:	d103      	bne.n	801382e <vQueueWaitForMessageRestricted+0x2a>
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	2200      	movs	r2, #0
 801382a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013834:	b25b      	sxtb	r3, r3
 8013836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801383a:	d103      	bne.n	8013844 <vQueueWaitForMessageRestricted+0x40>
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	2200      	movs	r2, #0
 8013840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013844:	f001 fb0a 	bl	8014e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801384c:	2b00      	cmp	r3, #0
 801384e:	d106      	bne.n	801385e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	3324      	adds	r3, #36	; 0x24
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	68b9      	ldr	r1, [r7, #8]
 8013858:	4618      	mov	r0, r3
 801385a:	f000 fd05 	bl	8014268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801385e:	6978      	ldr	r0, [r7, #20]
 8013860:	f7ff ff26 	bl	80136b0 <prvUnlockQueue>
	}
 8013864:	bf00      	nop
 8013866:	3718      	adds	r7, #24
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801386c:	b580      	push	{r7, lr}
 801386e:	b08c      	sub	sp, #48	; 0x30
 8013870:	af04      	add	r7, sp, #16
 8013872:	60f8      	str	r0, [r7, #12]
 8013874:	60b9      	str	r1, [r7, #8]
 8013876:	607a      	str	r2, [r7, #4]
 8013878:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801387c:	2b00      	cmp	r3, #0
 801387e:	d102      	bne.n	8013886 <xTaskCreateStatic+0x1a>
 8013880:	f001 fc12 	bl	80150a8 <ulSetInterruptMask>
 8013884:	e7fe      	b.n	8013884 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8013886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013888:	2b00      	cmp	r3, #0
 801388a:	d102      	bne.n	8013892 <xTaskCreateStatic+0x26>
 801388c:	f001 fc0c 	bl	80150a8 <ulSetInterruptMask>
 8013890:	e7fe      	b.n	8013890 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013892:	235c      	movs	r3, #92	; 0x5c
 8013894:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	2b5c      	cmp	r3, #92	; 0x5c
 801389a:	d002      	beq.n	80138a2 <xTaskCreateStatic+0x36>
 801389c:	f001 fc04 	bl	80150a8 <ulSetInterruptMask>
 80138a0:	e7fe      	b.n	80138a0 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80138a2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80138a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d01e      	beq.n	80138e8 <xTaskCreateStatic+0x7c>
 80138aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d01b      	beq.n	80138e8 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80138b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	2202      	movs	r2, #2
 80138be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80138c2:	2300      	movs	r3, #0
 80138c4:	9303      	str	r3, [sp, #12]
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	9302      	str	r3, [sp, #8]
 80138ca:	f107 0318 	add.w	r3, r7, #24
 80138ce:	9301      	str	r3, [sp, #4]
 80138d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	68b9      	ldr	r1, [r7, #8]
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f000 f850 	bl	8013980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138e0:	69f8      	ldr	r0, [r7, #28]
 80138e2:	f000 f8d7 	bl	8013a94 <prvAddNewTaskToReadyList>
 80138e6:	e001      	b.n	80138ec <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 80138e8:	2300      	movs	r3, #0
 80138ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80138ec:	69bb      	ldr	r3, [r7, #24]
	}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3720      	adds	r7, #32
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b08c      	sub	sp, #48	; 0x30
 80138fa:	af04      	add	r7, sp, #16
 80138fc:	60f8      	str	r0, [r7, #12]
 80138fe:	60b9      	str	r1, [r7, #8]
 8013900:	603b      	str	r3, [r7, #0]
 8013902:	4613      	mov	r3, r2
 8013904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013906:	88fb      	ldrh	r3, [r7, #6]
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	4618      	mov	r0, r3
 801390c:	f001 fc2c 	bl	8015168 <pvPortMalloc>
 8013910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d00e      	beq.n	8013936 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013918:	205c      	movs	r0, #92	; 0x5c
 801391a:	f001 fc25 	bl	8015168 <pvPortMalloc>
 801391e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d003      	beq.n	801392e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013926:	69fb      	ldr	r3, [r7, #28]
 8013928:	697a      	ldr	r2, [r7, #20]
 801392a:	631a      	str	r2, [r3, #48]	; 0x30
 801392c:	e005      	b.n	801393a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801392e:	6978      	ldr	r0, [r7, #20]
 8013930:	f001 fcce 	bl	80152d0 <vPortFree>
 8013934:	e001      	b.n	801393a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013936:	2300      	movs	r3, #0
 8013938:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801393a:	69fb      	ldr	r3, [r7, #28]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d017      	beq.n	8013970 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	2200      	movs	r2, #0
 8013944:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013948:	88fa      	ldrh	r2, [r7, #6]
 801394a:	2300      	movs	r3, #0
 801394c:	9303      	str	r3, [sp, #12]
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	9302      	str	r3, [sp, #8]
 8013952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013954:	9301      	str	r3, [sp, #4]
 8013956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013958:	9300      	str	r3, [sp, #0]
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	68b9      	ldr	r1, [r7, #8]
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f000 f80e 	bl	8013980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013964:	69f8      	ldr	r0, [r7, #28]
 8013966:	f000 f895 	bl	8013a94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801396a:	2301      	movs	r3, #1
 801396c:	61bb      	str	r3, [r7, #24]
 801396e:	e002      	b.n	8013976 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013970:	f04f 33ff 	mov.w	r3, #4294967295
 8013974:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013976:	69bb      	ldr	r3, [r7, #24]
	}
 8013978:	4618      	mov	r0, r3
 801397a:	3720      	adds	r7, #32
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b086      	sub	sp, #24
 8013984:	af00      	add	r7, sp, #0
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	607a      	str	r2, [r7, #4]
 801398c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013990:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	009b      	lsls	r3, r3, #2
 8013996:	461a      	mov	r2, r3
 8013998:	21a5      	movs	r1, #165	; 0xa5
 801399a:	f002 f817 	bl	80159cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80139a8:	3b01      	subs	r3, #1
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	4413      	add	r3, r2
 80139ae:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	f023 0307 	bic.w	r3, r3, #7
 80139b6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	f003 0307 	and.w	r3, r3, #7
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d002      	beq.n	80139c8 <prvInitialiseNewTask+0x48>
 80139c2:	f001 fb71 	bl	80150a8 <ulSetInterruptMask>
 80139c6:	e7fe      	b.n	80139c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d01f      	beq.n	8013a0e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139ce:	2300      	movs	r3, #0
 80139d0:	617b      	str	r3, [r7, #20]
 80139d2:	e012      	b.n	80139fa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80139d4:	68ba      	ldr	r2, [r7, #8]
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	4413      	add	r3, r2
 80139da:	7819      	ldrb	r1, [r3, #0]
 80139dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	4413      	add	r3, r2
 80139e2:	3334      	adds	r3, #52	; 0x34
 80139e4:	460a      	mov	r2, r1
 80139e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80139e8:	68ba      	ldr	r2, [r7, #8]
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	4413      	add	r3, r2
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d006      	beq.n	8013a02 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	3301      	adds	r3, #1
 80139f8:	617b      	str	r3, [r7, #20]
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	2b0f      	cmp	r3, #15
 80139fe:	d9e9      	bls.n	80139d4 <prvInitialiseNewTask+0x54>
 8013a00:	e000      	b.n	8013a04 <prvInitialiseNewTask+0x84>
			{
				break;
 8013a02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a06:	2200      	movs	r2, #0
 8013a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013a0c:	e003      	b.n	8013a16 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a10:	2200      	movs	r2, #0
 8013a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013a16:	6a3b      	ldr	r3, [r7, #32]
 8013a18:	2b37      	cmp	r3, #55	; 0x37
 8013a1a:	d901      	bls.n	8013a20 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013a1c:	2337      	movs	r3, #55	; 0x37
 8013a1e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a22:	6a3a      	ldr	r2, [r7, #32]
 8013a24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a28:	6a3a      	ldr	r2, [r7, #32]
 8013a2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2e:	2200      	movs	r2, #0
 8013a30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a34:	3304      	adds	r3, #4
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7ff fa58 	bl	8012eec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3e:	3318      	adds	r3, #24
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7ff fa53 	bl	8012eec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a4c:	6a3b      	ldr	r3, [r7, #32]
 8013a4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5e:	2200      	movs	r2, #0
 8013a60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a64:	2200      	movs	r2, #0
 8013a66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8013a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	68fa      	ldr	r2, [r7, #12]
 8013a72:	6938      	ldr	r0, [r7, #16]
 8013a74:	f001 fa3c 	bl	8014ef0 <pxPortInitialiseStack>
 8013a78:	4602      	mov	r2, r0
 8013a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d002      	beq.n	8013a8a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a8a:	bf00      	nop
 8013a8c:	3718      	adds	r7, #24
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
	...

08013a94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b082      	sub	sp, #8
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a9c:	f001 f9cc 	bl	8014e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013aa0:	4b2a      	ldr	r3, [pc, #168]	; (8013b4c <prvAddNewTaskToReadyList+0xb8>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	4a29      	ldr	r2, [pc, #164]	; (8013b4c <prvAddNewTaskToReadyList+0xb8>)
 8013aa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013aaa:	4b29      	ldr	r3, [pc, #164]	; (8013b50 <prvAddNewTaskToReadyList+0xbc>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d109      	bne.n	8013ac6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013ab2:	4a27      	ldr	r2, [pc, #156]	; (8013b50 <prvAddNewTaskToReadyList+0xbc>)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013ab8:	4b24      	ldr	r3, [pc, #144]	; (8013b4c <prvAddNewTaskToReadyList+0xb8>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d110      	bne.n	8013ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013ac0:	f000 fcd6 	bl	8014470 <prvInitialiseTaskLists>
 8013ac4:	e00d      	b.n	8013ae2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013ac6:	4b23      	ldr	r3, [pc, #140]	; (8013b54 <prvAddNewTaskToReadyList+0xc0>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d109      	bne.n	8013ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013ace:	4b20      	ldr	r3, [pc, #128]	; (8013b50 <prvAddNewTaskToReadyList+0xbc>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d802      	bhi.n	8013ae2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013adc:	4a1c      	ldr	r2, [pc, #112]	; (8013b50 <prvAddNewTaskToReadyList+0xbc>)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013ae2:	4b1d      	ldr	r3, [pc, #116]	; (8013b58 <prvAddNewTaskToReadyList+0xc4>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	4a1b      	ldr	r2, [pc, #108]	; (8013b58 <prvAddNewTaskToReadyList+0xc4>)
 8013aea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013aec:	4b1a      	ldr	r3, [pc, #104]	; (8013b58 <prvAddNewTaskToReadyList+0xc4>)
 8013aee:	681a      	ldr	r2, [r3, #0]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013af8:	4b18      	ldr	r3, [pc, #96]	; (8013b5c <prvAddNewTaskToReadyList+0xc8>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d903      	bls.n	8013b08 <prvAddNewTaskToReadyList+0x74>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b04:	4a15      	ldr	r2, [pc, #84]	; (8013b5c <prvAddNewTaskToReadyList+0xc8>)
 8013b06:	6013      	str	r3, [r2, #0]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b0c:	4613      	mov	r3, r2
 8013b0e:	009b      	lsls	r3, r3, #2
 8013b10:	4413      	add	r3, r2
 8013b12:	009b      	lsls	r3, r3, #2
 8013b14:	4a12      	ldr	r2, [pc, #72]	; (8013b60 <prvAddNewTaskToReadyList+0xcc>)
 8013b16:	441a      	add	r2, r3
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	3304      	adds	r3, #4
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	4610      	mov	r0, r2
 8013b20:	f7ff f9f1 	bl	8012f06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013b24:	f001 f99a 	bl	8014e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013b28:	4b0a      	ldr	r3, [pc, #40]	; (8013b54 <prvAddNewTaskToReadyList+0xc0>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d008      	beq.n	8013b42 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013b30:	4b07      	ldr	r3, [pc, #28]	; (8013b50 <prvAddNewTaskToReadyList+0xbc>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d201      	bcs.n	8013b42 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b3e:	f001 f969 	bl	8014e14 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b42:	bf00      	nop
 8013b44:	3708      	adds	r7, #8
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}
 8013b4a:	bf00      	nop
 8013b4c:	20001638 	.word	0x20001638
 8013b50:	20001164 	.word	0x20001164
 8013b54:	20001644 	.word	0x20001644
 8013b58:	20001654 	.word	0x20001654
 8013b5c:	20001640 	.word	0x20001640
 8013b60:	20001168 	.word	0x20001168

08013b64 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b086      	sub	sp, #24
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d102      	bne.n	8013b7e <vTaskDelayUntil+0x1a>
 8013b78:	f001 fa96 	bl	80150a8 <ulSetInterruptMask>
 8013b7c:	e7fe      	b.n	8013b7c <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d102      	bne.n	8013b8a <vTaskDelayUntil+0x26>
 8013b84:	f001 fa90 	bl	80150a8 <ulSetInterruptMask>
 8013b88:	e7fe      	b.n	8013b88 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 8013b8a:	4b23      	ldr	r3, [pc, #140]	; (8013c18 <vTaskDelayUntil+0xb4>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d002      	beq.n	8013b98 <vTaskDelayUntil+0x34>
 8013b92:	f001 fa89 	bl	80150a8 <ulSetInterruptMask>
 8013b96:	e7fe      	b.n	8013b96 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 8013b98:	f000 f998 	bl	8013ecc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013b9c:	4b1f      	ldr	r3, [pc, #124]	; (8013c1c <vTaskDelayUntil+0xb8>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	683a      	ldr	r2, [r7, #0]
 8013ba8:	4413      	add	r3, r2
 8013baa:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	693a      	ldr	r2, [r7, #16]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d20b      	bcs.n	8013bce <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	68fa      	ldr	r2, [r7, #12]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d211      	bcs.n	8013be4 <vTaskDelayUntil+0x80>
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d90d      	bls.n	8013be4 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8013bc8:	2301      	movs	r3, #1
 8013bca:	617b      	str	r3, [r7, #20]
 8013bcc:	e00a      	b.n	8013be4 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	68fa      	ldr	r2, [r7, #12]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d303      	bcc.n	8013be0 <vTaskDelayUntil+0x7c>
 8013bd8:	68fa      	ldr	r2, [r7, #12]
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d901      	bls.n	8013be4 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8013be0:	2301      	movs	r3, #1
 8013be2:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	68fa      	ldr	r2, [r7, #12]
 8013be8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d006      	beq.n	8013bfe <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	1ad3      	subs	r3, r2, r3
 8013bf6:	2100      	movs	r1, #0
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f000 fd6b 	bl	80146d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013bfe:	f000 f973 	bl	8013ee8 <xTaskResumeAll>
 8013c02:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d101      	bne.n	8013c0e <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 8013c0a:	f001 f903 	bl	8014e14 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c0e:	bf00      	nop
 8013c10:	3718      	adds	r7, #24
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	20001660 	.word	0x20001660
 8013c1c:	2000163c 	.word	0x2000163c

08013c20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d00f      	beq.n	8013c52 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013c32:	4b0c      	ldr	r3, [pc, #48]	; (8013c64 <vTaskDelay+0x44>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d002      	beq.n	8013c40 <vTaskDelay+0x20>
 8013c3a:	f001 fa35 	bl	80150a8 <ulSetInterruptMask>
 8013c3e:	e7fe      	b.n	8013c3e <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8013c40:	f000 f944 	bl	8013ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013c44:	2100      	movs	r1, #0
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f000 fd44 	bl	80146d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013c4c:	f000 f94c 	bl	8013ee8 <xTaskResumeAll>
 8013c50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d101      	bne.n	8013c5c <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8013c58:	f001 f8dc 	bl	8014e14 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c5c:	bf00      	nop
 8013c5e:	3710      	adds	r7, #16
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}
 8013c64:	20001660 	.word	0x20001660

08013c68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b084      	sub	sp, #16
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013c70:	f001 f8e2 	bl	8014e38 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d102      	bne.n	8013c80 <vTaskSuspend+0x18>
 8013c7a:	4b29      	ldr	r3, [pc, #164]	; (8013d20 <vTaskSuspend+0xb8>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	e000      	b.n	8013c82 <vTaskSuspend+0x1a>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	3304      	adds	r3, #4
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7ff f999 	bl	8012fc0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d004      	beq.n	8013ca0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	3318      	adds	r3, #24
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7ff f990 	bl	8012fc0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	3304      	adds	r3, #4
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	481f      	ldr	r0, [pc, #124]	; (8013d24 <vTaskSuspend+0xbc>)
 8013ca8:	f7ff f92d 	bl	8012f06 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013cb2:	b2db      	uxtb	r3, r3
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d103      	bne.n	8013cc0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8013cc0:	f001 f8cc 	bl	8014e5c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013cc4:	4b18      	ldr	r3, [pc, #96]	; (8013d28 <vTaskSuspend+0xc0>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d005      	beq.n	8013cd8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013ccc:	f001 f8b4 	bl	8014e38 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8013cd0:	f000 fc64 	bl	801459c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013cd4:	f001 f8c2 	bl	8014e5c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013cd8:	4b11      	ldr	r3, [pc, #68]	; (8013d20 <vTaskSuspend+0xb8>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	68fa      	ldr	r2, [r7, #12]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d119      	bne.n	8013d16 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8013ce2:	4b11      	ldr	r3, [pc, #68]	; (8013d28 <vTaskSuspend+0xc0>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d009      	beq.n	8013cfe <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013cea:	4b10      	ldr	r3, [pc, #64]	; (8013d2c <vTaskSuspend+0xc4>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d002      	beq.n	8013cf8 <vTaskSuspend+0x90>
 8013cf2:	f001 f9d9 	bl	80150a8 <ulSetInterruptMask>
 8013cf6:	e7fe      	b.n	8013cf6 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8013cf8:	f001 f88c 	bl	8014e14 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013cfc:	e00b      	b.n	8013d16 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013cfe:	4b09      	ldr	r3, [pc, #36]	; (8013d24 <vTaskSuspend+0xbc>)
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	4b0b      	ldr	r3, [pc, #44]	; (8013d30 <vTaskSuspend+0xc8>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d103      	bne.n	8013d12 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8013d0a:	4b05      	ldr	r3, [pc, #20]	; (8013d20 <vTaskSuspend+0xb8>)
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	601a      	str	r2, [r3, #0]
	}
 8013d10:	e001      	b.n	8013d16 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8013d12:	f000 fa39 	bl	8014188 <vTaskSwitchContext>
	}
 8013d16:	bf00      	nop
 8013d18:	3710      	adds	r7, #16
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	20001164 	.word	0x20001164
 8013d24:	20001624 	.word	0x20001624
 8013d28:	20001644 	.word	0x20001644
 8013d2c:	20001660 	.word	0x20001660
 8013d30:	20001638 	.word	0x20001638

08013d34 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d102      	bne.n	8013d50 <prvTaskIsTaskSuspended+0x1c>
 8013d4a:	f001 f9ad 	bl	80150a8 <ulSetInterruptMask>
 8013d4e:	e7fe      	b.n	8013d4e <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	695b      	ldr	r3, [r3, #20]
 8013d54:	4a09      	ldr	r2, [pc, #36]	; (8013d7c <prvTaskIsTaskSuspended+0x48>)
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d10a      	bne.n	8013d70 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d5e:	4a08      	ldr	r2, [pc, #32]	; (8013d80 <prvTaskIsTaskSuspended+0x4c>)
 8013d60:	4293      	cmp	r3, r2
 8013d62:	d005      	beq.n	8013d70 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d101      	bne.n	8013d70 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013d70:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013d72:	4618      	mov	r0, r3
 8013d74:	3710      	adds	r7, #16
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	20001624 	.word	0x20001624
 8013d80:	200015f8 	.word	0x200015f8

08013d84 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b084      	sub	sp, #16
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d102      	bne.n	8013d9c <vTaskResume+0x18>
 8013d96:	f001 f987 	bl	80150a8 <ulSetInterruptMask>
 8013d9a:	e7fe      	b.n	8013d9a <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8013d9c:	4b1d      	ldr	r3, [pc, #116]	; (8013e14 <vTaskResume+0x90>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d032      	beq.n	8013e0c <vTaskResume+0x88>
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d02f      	beq.n	8013e0c <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8013dac:	f001 f844 	bl	8014e38 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	f7ff ffbf 	bl	8013d34 <prvTaskIsTaskSuspended>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d025      	beq.n	8013e08 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	3304      	adds	r3, #4
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7ff f8fd 	bl	8012fc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dca:	4b13      	ldr	r3, [pc, #76]	; (8013e18 <vTaskResume+0x94>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d903      	bls.n	8013dda <vTaskResume+0x56>
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dd6:	4a10      	ldr	r2, [pc, #64]	; (8013e18 <vTaskResume+0x94>)
 8013dd8:	6013      	str	r3, [r2, #0]
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dde:	4613      	mov	r3, r2
 8013de0:	009b      	lsls	r3, r3, #2
 8013de2:	4413      	add	r3, r2
 8013de4:	009b      	lsls	r3, r3, #2
 8013de6:	4a0d      	ldr	r2, [pc, #52]	; (8013e1c <vTaskResume+0x98>)
 8013de8:	441a      	add	r2, r3
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	3304      	adds	r3, #4
 8013dee:	4619      	mov	r1, r3
 8013df0:	4610      	mov	r0, r2
 8013df2:	f7ff f888 	bl	8012f06 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dfa:	4b06      	ldr	r3, [pc, #24]	; (8013e14 <vTaskResume+0x90>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d301      	bcc.n	8013e08 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8013e04:	f001 f806 	bl	8014e14 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8013e08:	f001 f828 	bl	8014e5c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013e0c:	bf00      	nop
 8013e0e:	3710      	adds	r7, #16
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}
 8013e14:	20001164 	.word	0x20001164
 8013e18:	20001640 	.word	0x20001640
 8013e1c:	20001168 	.word	0x20001168

08013e20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b088      	sub	sp, #32
 8013e24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013e26:	2300      	movs	r3, #0
 8013e28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013e2e:	463a      	mov	r2, r7
 8013e30:	1d39      	adds	r1, r7, #4
 8013e32:	f107 0308 	add.w	r3, r7, #8
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7ff f804 	bl	8012e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013e3c:	6839      	ldr	r1, [r7, #0]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	68ba      	ldr	r2, [r7, #8]
 8013e42:	9202      	str	r2, [sp, #8]
 8013e44:	9301      	str	r3, [sp, #4]
 8013e46:	2300      	movs	r3, #0
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	460a      	mov	r2, r1
 8013e4e:	4919      	ldr	r1, [pc, #100]	; (8013eb4 <vTaskStartScheduler+0x94>)
 8013e50:	4819      	ldr	r0, [pc, #100]	; (8013eb8 <vTaskStartScheduler+0x98>)
 8013e52:	f7ff fd0b 	bl	801386c <xTaskCreateStatic>
 8013e56:	4603      	mov	r3, r0
 8013e58:	4a18      	ldr	r2, [pc, #96]	; (8013ebc <vTaskStartScheduler+0x9c>)
 8013e5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013e5c:	4b17      	ldr	r3, [pc, #92]	; (8013ebc <vTaskStartScheduler+0x9c>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d002      	beq.n	8013e6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013e64:	2301      	movs	r3, #1
 8013e66:	60fb      	str	r3, [r7, #12]
 8013e68:	e001      	b.n	8013e6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d102      	bne.n	8013e7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013e74:	f000 fc82 	bl	801477c <xTimerCreateTimerTask>
 8013e78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d10e      	bne.n	8013e9e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8013e80:	f001 f912 	bl	80150a8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e84:	4b0e      	ldr	r3, [pc, #56]	; (8013ec0 <vTaskStartScheduler+0xa0>)
 8013e86:	f04f 32ff 	mov.w	r2, #4294967295
 8013e8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e8c:	4b0d      	ldr	r3, [pc, #52]	; (8013ec4 <vTaskStartScheduler+0xa4>)
 8013e8e:	2201      	movs	r2, #1
 8013e90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e92:	4b0d      	ldr	r3, [pc, #52]	; (8013ec8 <vTaskStartScheduler+0xa8>)
 8013e94:	2200      	movs	r2, #0
 8013e96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e98:	f001 f8b4 	bl	8015004 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e9c:	e006      	b.n	8013eac <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ea4:	d102      	bne.n	8013eac <vTaskStartScheduler+0x8c>
 8013ea6:	f001 f8ff 	bl	80150a8 <ulSetInterruptMask>
 8013eaa:	e7fe      	b.n	8013eaa <vTaskStartScheduler+0x8a>
}
 8013eac:	bf00      	nop
 8013eae:	3710      	adds	r7, #16
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	08016644 	.word	0x08016644
 8013eb8:	08014451 	.word	0x08014451
 8013ebc:	2000165c 	.word	0x2000165c
 8013ec0:	20001658 	.word	0x20001658
 8013ec4:	20001644 	.word	0x20001644
 8013ec8:	2000163c 	.word	0x2000163c

08013ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013ecc:	b480      	push	{r7}
 8013ece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013ed0:	4b04      	ldr	r3, [pc, #16]	; (8013ee4 <vTaskSuspendAll+0x18>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	4a03      	ldr	r2, [pc, #12]	; (8013ee4 <vTaskSuspendAll+0x18>)
 8013ed8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013eda:	bf00      	nop
 8013edc:	46bd      	mov	sp, r7
 8013ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee2:	4770      	bx	lr
 8013ee4:	20001660 	.word	0x20001660

08013ee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ef6:	4b3b      	ldr	r3, [pc, #236]	; (8013fe4 <xTaskResumeAll+0xfc>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d102      	bne.n	8013f04 <xTaskResumeAll+0x1c>
 8013efe:	f001 f8d3 	bl	80150a8 <ulSetInterruptMask>
 8013f02:	e7fe      	b.n	8013f02 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013f04:	f000 ff98 	bl	8014e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013f08:	4b36      	ldr	r3, [pc, #216]	; (8013fe4 <xTaskResumeAll+0xfc>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	3b01      	subs	r3, #1
 8013f0e:	4a35      	ldr	r2, [pc, #212]	; (8013fe4 <xTaskResumeAll+0xfc>)
 8013f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f12:	4b34      	ldr	r3, [pc, #208]	; (8013fe4 <xTaskResumeAll+0xfc>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d15c      	bne.n	8013fd4 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013f1a:	4b33      	ldr	r3, [pc, #204]	; (8013fe8 <xTaskResumeAll+0x100>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d058      	beq.n	8013fd4 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f22:	e02f      	b.n	8013f84 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f24:	4b31      	ldr	r3, [pc, #196]	; (8013fec <xTaskResumeAll+0x104>)
 8013f26:	68db      	ldr	r3, [r3, #12]
 8013f28:	68db      	ldr	r3, [r3, #12]
 8013f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	3318      	adds	r3, #24
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7ff f845 	bl	8012fc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	3304      	adds	r3, #4
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7ff f840 	bl	8012fc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f44:	4b2a      	ldr	r3, [pc, #168]	; (8013ff0 <xTaskResumeAll+0x108>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d903      	bls.n	8013f54 <xTaskResumeAll+0x6c>
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f50:	4a27      	ldr	r2, [pc, #156]	; (8013ff0 <xTaskResumeAll+0x108>)
 8013f52:	6013      	str	r3, [r2, #0]
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f58:	4613      	mov	r3, r2
 8013f5a:	009b      	lsls	r3, r3, #2
 8013f5c:	4413      	add	r3, r2
 8013f5e:	009b      	lsls	r3, r3, #2
 8013f60:	4a24      	ldr	r2, [pc, #144]	; (8013ff4 <xTaskResumeAll+0x10c>)
 8013f62:	441a      	add	r2, r3
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	3304      	adds	r3, #4
 8013f68:	4619      	mov	r1, r3
 8013f6a:	4610      	mov	r0, r2
 8013f6c:	f7fe ffcb 	bl	8012f06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f74:	4b20      	ldr	r3, [pc, #128]	; (8013ff8 <xTaskResumeAll+0x110>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d302      	bcc.n	8013f84 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8013f7e:	4b1f      	ldr	r3, [pc, #124]	; (8013ffc <xTaskResumeAll+0x114>)
 8013f80:	2201      	movs	r2, #1
 8013f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f84:	4b19      	ldr	r3, [pc, #100]	; (8013fec <xTaskResumeAll+0x104>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d1cb      	bne.n	8013f24 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d001      	beq.n	8013f96 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f92:	f000 fb03 	bl	801459c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013f96:	4b1a      	ldr	r3, [pc, #104]	; (8014000 <xTaskResumeAll+0x118>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d010      	beq.n	8013fc4 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013fa2:	f000 f83f 	bl	8014024 <xTaskIncrementTick>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d002      	beq.n	8013fb2 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8013fac:	4b13      	ldr	r3, [pc, #76]	; (8013ffc <xTaskResumeAll+0x114>)
 8013fae:	2201      	movs	r2, #1
 8013fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d1f1      	bne.n	8013fa2 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8013fbe:	4b10      	ldr	r3, [pc, #64]	; (8014000 <xTaskResumeAll+0x118>)
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013fc4:	4b0d      	ldr	r3, [pc, #52]	; (8013ffc <xTaskResumeAll+0x114>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d003      	beq.n	8013fd4 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013fd0:	f000 ff20 	bl	8014e14 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fd4:	f000 ff42 	bl	8014e5c <vPortExitCritical>

	return xAlreadyYielded;
 8013fd8:	68bb      	ldr	r3, [r7, #8]
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3710      	adds	r7, #16
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	20001660 	.word	0x20001660
 8013fe8:	20001638 	.word	0x20001638
 8013fec:	200015f8 	.word	0x200015f8
 8013ff0:	20001640 	.word	0x20001640
 8013ff4:	20001168 	.word	0x20001168
 8013ff8:	20001164 	.word	0x20001164
 8013ffc:	2000164c 	.word	0x2000164c
 8014000:	20001648 	.word	0x20001648

08014004 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801400a:	4b05      	ldr	r3, [pc, #20]	; (8014020 <xTaskGetTickCount+0x1c>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014010:	687b      	ldr	r3, [r7, #4]
}
 8014012:	4618      	mov	r0, r3
 8014014:	370c      	adds	r7, #12
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	2000163c 	.word	0x2000163c

08014024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b086      	sub	sp, #24
 8014028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801402a:	2300      	movs	r3, #0
 801402c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801402e:	4b4b      	ldr	r3, [pc, #300]	; (801415c <xTaskIncrementTick+0x138>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	f040 8087 	bne.w	8014146 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014038:	4b49      	ldr	r3, [pc, #292]	; (8014160 <xTaskIncrementTick+0x13c>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	3301      	adds	r3, #1
 801403e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014040:	4a47      	ldr	r2, [pc, #284]	; (8014160 <xTaskIncrementTick+0x13c>)
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d118      	bne.n	801407e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 801404c:	4b45      	ldr	r3, [pc, #276]	; (8014164 <xTaskIncrementTick+0x140>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d002      	beq.n	801405c <xTaskIncrementTick+0x38>
 8014056:	f001 f827 	bl	80150a8 <ulSetInterruptMask>
 801405a:	e7fe      	b.n	801405a <xTaskIncrementTick+0x36>
 801405c:	4b41      	ldr	r3, [pc, #260]	; (8014164 <xTaskIncrementTick+0x140>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	60fb      	str	r3, [r7, #12]
 8014062:	4b41      	ldr	r3, [pc, #260]	; (8014168 <xTaskIncrementTick+0x144>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	4a3f      	ldr	r2, [pc, #252]	; (8014164 <xTaskIncrementTick+0x140>)
 8014068:	6013      	str	r3, [r2, #0]
 801406a:	4a3f      	ldr	r2, [pc, #252]	; (8014168 <xTaskIncrementTick+0x144>)
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	6013      	str	r3, [r2, #0]
 8014070:	4b3e      	ldr	r3, [pc, #248]	; (801416c <xTaskIncrementTick+0x148>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	3301      	adds	r3, #1
 8014076:	4a3d      	ldr	r2, [pc, #244]	; (801416c <xTaskIncrementTick+0x148>)
 8014078:	6013      	str	r3, [r2, #0]
 801407a:	f000 fa8f 	bl	801459c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801407e:	4b3c      	ldr	r3, [pc, #240]	; (8014170 <xTaskIncrementTick+0x14c>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	693a      	ldr	r2, [r7, #16]
 8014084:	429a      	cmp	r2, r3
 8014086:	d349      	bcc.n	801411c <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014088:	4b36      	ldr	r3, [pc, #216]	; (8014164 <xTaskIncrementTick+0x140>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d104      	bne.n	801409c <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014092:	4b37      	ldr	r3, [pc, #220]	; (8014170 <xTaskIncrementTick+0x14c>)
 8014094:	f04f 32ff 	mov.w	r2, #4294967295
 8014098:	601a      	str	r2, [r3, #0]
					break;
 801409a:	e03f      	b.n	801411c <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801409c:	4b31      	ldr	r3, [pc, #196]	; (8014164 <xTaskIncrementTick+0x140>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	68db      	ldr	r3, [r3, #12]
 80140a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80140ac:	693a      	ldr	r2, [r7, #16]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d203      	bcs.n	80140bc <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140b4:	4a2e      	ldr	r2, [pc, #184]	; (8014170 <xTaskIncrementTick+0x14c>)
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140ba:	e02f      	b.n	801411c <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	3304      	adds	r3, #4
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fe ff7d 	bl	8012fc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d004      	beq.n	80140d8 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	3318      	adds	r3, #24
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fe ff74 	bl	8012fc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140dc:	4b25      	ldr	r3, [pc, #148]	; (8014174 <xTaskIncrementTick+0x150>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d903      	bls.n	80140ec <xTaskIncrementTick+0xc8>
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e8:	4a22      	ldr	r2, [pc, #136]	; (8014174 <xTaskIncrementTick+0x150>)
 80140ea:	6013      	str	r3, [r2, #0]
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140f0:	4613      	mov	r3, r2
 80140f2:	009b      	lsls	r3, r3, #2
 80140f4:	4413      	add	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4a1f      	ldr	r2, [pc, #124]	; (8014178 <xTaskIncrementTick+0x154>)
 80140fa:	441a      	add	r2, r3
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	3304      	adds	r3, #4
 8014100:	4619      	mov	r1, r3
 8014102:	4610      	mov	r0, r2
 8014104:	f7fe feff 	bl	8012f06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801410c:	4b1b      	ldr	r3, [pc, #108]	; (801417c <xTaskIncrementTick+0x158>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014112:	429a      	cmp	r2, r3
 8014114:	d3b8      	bcc.n	8014088 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8014116:	2301      	movs	r3, #1
 8014118:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801411a:	e7b5      	b.n	8014088 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801411c:	4b17      	ldr	r3, [pc, #92]	; (801417c <xTaskIncrementTick+0x158>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014122:	4915      	ldr	r1, [pc, #84]	; (8014178 <xTaskIncrementTick+0x154>)
 8014124:	4613      	mov	r3, r2
 8014126:	009b      	lsls	r3, r3, #2
 8014128:	4413      	add	r3, r2
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	440b      	add	r3, r1
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2b01      	cmp	r3, #1
 8014132:	d901      	bls.n	8014138 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8014134:	2301      	movs	r3, #1
 8014136:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014138:	4b11      	ldr	r3, [pc, #68]	; (8014180 <xTaskIncrementTick+0x15c>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d007      	beq.n	8014150 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8014140:	2301      	movs	r3, #1
 8014142:	617b      	str	r3, [r7, #20]
 8014144:	e004      	b.n	8014150 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014146:	4b0f      	ldr	r3, [pc, #60]	; (8014184 <xTaskIncrementTick+0x160>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	3301      	adds	r3, #1
 801414c:	4a0d      	ldr	r2, [pc, #52]	; (8014184 <xTaskIncrementTick+0x160>)
 801414e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014150:	697b      	ldr	r3, [r7, #20]
}
 8014152:	4618      	mov	r0, r3
 8014154:	3718      	adds	r7, #24
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
 801415a:	bf00      	nop
 801415c:	20001660 	.word	0x20001660
 8014160:	2000163c 	.word	0x2000163c
 8014164:	200015f0 	.word	0x200015f0
 8014168:	200015f4 	.word	0x200015f4
 801416c:	20001650 	.word	0x20001650
 8014170:	20001658 	.word	0x20001658
 8014174:	20001640 	.word	0x20001640
 8014178:	20001168 	.word	0x20001168
 801417c:	20001164 	.word	0x20001164
 8014180:	2000164c 	.word	0x2000164c
 8014184:	20001648 	.word	0x20001648

08014188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801418e:	4b23      	ldr	r3, [pc, #140]	; (801421c <vTaskSwitchContext+0x94>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d003      	beq.n	801419e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014196:	4b22      	ldr	r3, [pc, #136]	; (8014220 <vTaskSwitchContext+0x98>)
 8014198:	2201      	movs	r2, #1
 801419a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801419c:	e039      	b.n	8014212 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 801419e:	4b20      	ldr	r3, [pc, #128]	; (8014220 <vTaskSwitchContext+0x98>)
 80141a0:	2200      	movs	r2, #0
 80141a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141a4:	4b1f      	ldr	r3, [pc, #124]	; (8014224 <vTaskSwitchContext+0x9c>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	607b      	str	r3, [r7, #4]
 80141aa:	e008      	b.n	80141be <vTaskSwitchContext+0x36>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d102      	bne.n	80141b8 <vTaskSwitchContext+0x30>
 80141b2:	f000 ff79 	bl	80150a8 <ulSetInterruptMask>
 80141b6:	e7fe      	b.n	80141b6 <vTaskSwitchContext+0x2e>
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	3b01      	subs	r3, #1
 80141bc:	607b      	str	r3, [r7, #4]
 80141be:	491a      	ldr	r1, [pc, #104]	; (8014228 <vTaskSwitchContext+0xa0>)
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	4613      	mov	r3, r2
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	4413      	add	r3, r2
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	440b      	add	r3, r1
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d0ec      	beq.n	80141ac <vTaskSwitchContext+0x24>
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	4613      	mov	r3, r2
 80141d6:	009b      	lsls	r3, r3, #2
 80141d8:	4413      	add	r3, r2
 80141da:	009b      	lsls	r3, r3, #2
 80141dc:	4a12      	ldr	r2, [pc, #72]	; (8014228 <vTaskSwitchContext+0xa0>)
 80141de:	4413      	add	r3, r2
 80141e0:	603b      	str	r3, [r7, #0]
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	685b      	ldr	r3, [r3, #4]
 80141e6:	685a      	ldr	r2, [r3, #4]
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	605a      	str	r2, [r3, #4]
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	685a      	ldr	r2, [r3, #4]
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	3308      	adds	r3, #8
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d104      	bne.n	8014202 <vTaskSwitchContext+0x7a>
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	685a      	ldr	r2, [r3, #4]
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	605a      	str	r2, [r3, #4]
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	4a08      	ldr	r2, [pc, #32]	; (801422c <vTaskSwitchContext+0xa4>)
 801420a:	6013      	str	r3, [r2, #0]
 801420c:	4a05      	ldr	r2, [pc, #20]	; (8014224 <vTaskSwitchContext+0x9c>)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6013      	str	r3, [r2, #0]
}
 8014212:	bf00      	nop
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	20001660 	.word	0x20001660
 8014220:	2000164c 	.word	0x2000164c
 8014224:	20001640 	.word	0x20001640
 8014228:	20001168 	.word	0x20001168
 801422c:	20001164 	.word	0x20001164

08014230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b082      	sub	sp, #8
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d102      	bne.n	8014246 <vTaskPlaceOnEventList+0x16>
 8014240:	f000 ff32 	bl	80150a8 <ulSetInterruptMask>
 8014244:	e7fe      	b.n	8014244 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014246:	4b07      	ldr	r3, [pc, #28]	; (8014264 <vTaskPlaceOnEventList+0x34>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	3318      	adds	r3, #24
 801424c:	4619      	mov	r1, r3
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f7fe fe7d 	bl	8012f4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014254:	2101      	movs	r1, #1
 8014256:	6838      	ldr	r0, [r7, #0]
 8014258:	f000 fa3c 	bl	80146d4 <prvAddCurrentTaskToDelayedList>
}
 801425c:	bf00      	nop
 801425e:	3708      	adds	r7, #8
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}
 8014264:	20001164 	.word	0x20001164

08014268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014268:	b580      	push	{r7, lr}
 801426a:	b084      	sub	sp, #16
 801426c:	af00      	add	r7, sp, #0
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	60b9      	str	r1, [r7, #8]
 8014272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d102      	bne.n	8014280 <vTaskPlaceOnEventListRestricted+0x18>
 801427a:	f000 ff15 	bl	80150a8 <ulSetInterruptMask>
 801427e:	e7fe      	b.n	801427e <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014280:	4b0a      	ldr	r3, [pc, #40]	; (80142ac <vTaskPlaceOnEventListRestricted+0x44>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	3318      	adds	r3, #24
 8014286:	4619      	mov	r1, r3
 8014288:	68f8      	ldr	r0, [r7, #12]
 801428a:	f7fe fe3c 	bl	8012f06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d002      	beq.n	801429a <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8014294:	f04f 33ff 	mov.w	r3, #4294967295
 8014298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801429a:	6879      	ldr	r1, [r7, #4]
 801429c:	68b8      	ldr	r0, [r7, #8]
 801429e:	f000 fa19 	bl	80146d4 <prvAddCurrentTaskToDelayedList>
	}
 80142a2:	bf00      	nop
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	20001164 	.word	0x20001164

080142b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d102      	bne.n	80142cc <xTaskRemoveFromEventList+0x1c>
 80142c6:	f000 feef 	bl	80150a8 <ulSetInterruptMask>
 80142ca:	e7fe      	b.n	80142ca <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	3318      	adds	r3, #24
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7fe fe75 	bl	8012fc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142d6:	4b1e      	ldr	r3, [pc, #120]	; (8014350 <xTaskRemoveFromEventList+0xa0>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d11d      	bne.n	801431a <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	3304      	adds	r3, #4
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7fe fe6c 	bl	8012fc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142ec:	4b19      	ldr	r3, [pc, #100]	; (8014354 <xTaskRemoveFromEventList+0xa4>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d903      	bls.n	80142fc <xTaskRemoveFromEventList+0x4c>
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f8:	4a16      	ldr	r2, [pc, #88]	; (8014354 <xTaskRemoveFromEventList+0xa4>)
 80142fa:	6013      	str	r3, [r2, #0]
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014300:	4613      	mov	r3, r2
 8014302:	009b      	lsls	r3, r3, #2
 8014304:	4413      	add	r3, r2
 8014306:	009b      	lsls	r3, r3, #2
 8014308:	4a13      	ldr	r2, [pc, #76]	; (8014358 <xTaskRemoveFromEventList+0xa8>)
 801430a:	441a      	add	r2, r3
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	3304      	adds	r3, #4
 8014310:	4619      	mov	r1, r3
 8014312:	4610      	mov	r0, r2
 8014314:	f7fe fdf7 	bl	8012f06 <vListInsertEnd>
 8014318:	e005      	b.n	8014326 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	3318      	adds	r3, #24
 801431e:	4619      	mov	r1, r3
 8014320:	480e      	ldr	r0, [pc, #56]	; (801435c <xTaskRemoveFromEventList+0xac>)
 8014322:	f7fe fdf0 	bl	8012f06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801432a:	4b0d      	ldr	r3, [pc, #52]	; (8014360 <xTaskRemoveFromEventList+0xb0>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014330:	429a      	cmp	r2, r3
 8014332:	d905      	bls.n	8014340 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014334:	2301      	movs	r3, #1
 8014336:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014338:	4b0a      	ldr	r3, [pc, #40]	; (8014364 <xTaskRemoveFromEventList+0xb4>)
 801433a:	2201      	movs	r2, #1
 801433c:	601a      	str	r2, [r3, #0]
 801433e:	e001      	b.n	8014344 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8014340:	2300      	movs	r3, #0
 8014342:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8014344:	68fb      	ldr	r3, [r7, #12]
}
 8014346:	4618      	mov	r0, r3
 8014348:	3710      	adds	r7, #16
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	20001660 	.word	0x20001660
 8014354:	20001640 	.word	0x20001640
 8014358:	20001168 	.word	0x20001168
 801435c:	200015f8 	.word	0x200015f8
 8014360:	20001164 	.word	0x20001164
 8014364:	2000164c 	.word	0x2000164c

08014368 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014368:	b480      	push	{r7}
 801436a:	b083      	sub	sp, #12
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014370:	4b06      	ldr	r3, [pc, #24]	; (801438c <vTaskInternalSetTimeOutState+0x24>)
 8014372:	681a      	ldr	r2, [r3, #0]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014378:	4b05      	ldr	r3, [pc, #20]	; (8014390 <vTaskInternalSetTimeOutState+0x28>)
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	605a      	str	r2, [r3, #4]
}
 8014380:	bf00      	nop
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	20001650 	.word	0x20001650
 8014390:	2000163c 	.word	0x2000163c

08014394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b086      	sub	sp, #24
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d102      	bne.n	80143aa <xTaskCheckForTimeOut+0x16>
 80143a4:	f000 fe80 	bl	80150a8 <ulSetInterruptMask>
 80143a8:	e7fe      	b.n	80143a8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d102      	bne.n	80143b6 <xTaskCheckForTimeOut+0x22>
 80143b0:	f000 fe7a 	bl	80150a8 <ulSetInterruptMask>
 80143b4:	e7fe      	b.n	80143b4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80143b6:	f000 fd3f 	bl	8014e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80143ba:	4b1d      	ldr	r3, [pc, #116]	; (8014430 <xTaskCheckForTimeOut+0x9c>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	693a      	ldr	r2, [r7, #16]
 80143c6:	1ad3      	subs	r3, r2, r3
 80143c8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d2:	d102      	bne.n	80143da <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80143d4:	2300      	movs	r3, #0
 80143d6:	617b      	str	r3, [r7, #20]
 80143d8:	e023      	b.n	8014422 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	4b15      	ldr	r3, [pc, #84]	; (8014434 <xTaskCheckForTimeOut+0xa0>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d007      	beq.n	80143f6 <xTaskCheckForTimeOut+0x62>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	693a      	ldr	r2, [r7, #16]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d302      	bcc.n	80143f6 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80143f0:	2301      	movs	r3, #1
 80143f2:	617b      	str	r3, [r7, #20]
 80143f4:	e015      	b.n	8014422 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	68fa      	ldr	r2, [r7, #12]
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d20b      	bcs.n	8014418 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	681a      	ldr	r2, [r3, #0]
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	1ad2      	subs	r2, r2, r3
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7ff ffab 	bl	8014368 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014412:	2300      	movs	r3, #0
 8014414:	617b      	str	r3, [r7, #20]
 8014416:	e004      	b.n	8014422 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	2200      	movs	r2, #0
 801441c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801441e:	2301      	movs	r3, #1
 8014420:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8014422:	f000 fd1b 	bl	8014e5c <vPortExitCritical>

	return xReturn;
 8014426:	697b      	ldr	r3, [r7, #20]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3718      	adds	r7, #24
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	2000163c 	.word	0x2000163c
 8014434:	20001650 	.word	0x20001650

08014438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014438:	b480      	push	{r7}
 801443a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801443c:	4b03      	ldr	r3, [pc, #12]	; (801444c <vTaskMissedYield+0x14>)
 801443e:	2201      	movs	r2, #1
 8014440:	601a      	str	r2, [r3, #0]
}
 8014442:	bf00      	nop
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	2000164c 	.word	0x2000164c

08014450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014458:	f000 f84a 	bl	80144f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801445c:	4b03      	ldr	r3, [pc, #12]	; (801446c <prvIdleTask+0x1c>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b01      	cmp	r3, #1
 8014462:	d9f9      	bls.n	8014458 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014464:	f000 fcd6 	bl	8014e14 <vPortYield>
		prvCheckTasksWaitingTermination();
 8014468:	e7f6      	b.n	8014458 <prvIdleTask+0x8>
 801446a:	bf00      	nop
 801446c:	20001168 	.word	0x20001168

08014470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014476:	2300      	movs	r3, #0
 8014478:	607b      	str	r3, [r7, #4]
 801447a:	e00c      	b.n	8014496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801447c:	687a      	ldr	r2, [r7, #4]
 801447e:	4613      	mov	r3, r2
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	4413      	add	r3, r2
 8014484:	009b      	lsls	r3, r3, #2
 8014486:	4a12      	ldr	r2, [pc, #72]	; (80144d0 <prvInitialiseTaskLists+0x60>)
 8014488:	4413      	add	r3, r2
 801448a:	4618      	mov	r0, r3
 801448c:	f7fe fd0e 	bl	8012eac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	3301      	adds	r3, #1
 8014494:	607b      	str	r3, [r7, #4]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2b37      	cmp	r3, #55	; 0x37
 801449a:	d9ef      	bls.n	801447c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801449c:	480d      	ldr	r0, [pc, #52]	; (80144d4 <prvInitialiseTaskLists+0x64>)
 801449e:	f7fe fd05 	bl	8012eac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80144a2:	480d      	ldr	r0, [pc, #52]	; (80144d8 <prvInitialiseTaskLists+0x68>)
 80144a4:	f7fe fd02 	bl	8012eac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80144a8:	480c      	ldr	r0, [pc, #48]	; (80144dc <prvInitialiseTaskLists+0x6c>)
 80144aa:	f7fe fcff 	bl	8012eac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80144ae:	480c      	ldr	r0, [pc, #48]	; (80144e0 <prvInitialiseTaskLists+0x70>)
 80144b0:	f7fe fcfc 	bl	8012eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80144b4:	480b      	ldr	r0, [pc, #44]	; (80144e4 <prvInitialiseTaskLists+0x74>)
 80144b6:	f7fe fcf9 	bl	8012eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80144ba:	4b0b      	ldr	r3, [pc, #44]	; (80144e8 <prvInitialiseTaskLists+0x78>)
 80144bc:	4a05      	ldr	r2, [pc, #20]	; (80144d4 <prvInitialiseTaskLists+0x64>)
 80144be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80144c0:	4b0a      	ldr	r3, [pc, #40]	; (80144ec <prvInitialiseTaskLists+0x7c>)
 80144c2:	4a05      	ldr	r2, [pc, #20]	; (80144d8 <prvInitialiseTaskLists+0x68>)
 80144c4:	601a      	str	r2, [r3, #0]
}
 80144c6:	bf00      	nop
 80144c8:	3708      	adds	r7, #8
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}
 80144ce:	bf00      	nop
 80144d0:	20001168 	.word	0x20001168
 80144d4:	200015c8 	.word	0x200015c8
 80144d8:	200015dc 	.word	0x200015dc
 80144dc:	200015f8 	.word	0x200015f8
 80144e0:	2000160c 	.word	0x2000160c
 80144e4:	20001624 	.word	0x20001624
 80144e8:	200015f0 	.word	0x200015f0
 80144ec:	200015f4 	.word	0x200015f4

080144f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80144f6:	e019      	b.n	801452c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80144f8:	f000 fc9e 	bl	8014e38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144fc:	4b10      	ldr	r3, [pc, #64]	; (8014540 <prvCheckTasksWaitingTermination+0x50>)
 80144fe:	68db      	ldr	r3, [r3, #12]
 8014500:	68db      	ldr	r3, [r3, #12]
 8014502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	3304      	adds	r3, #4
 8014508:	4618      	mov	r0, r3
 801450a:	f7fe fd59 	bl	8012fc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801450e:	4b0d      	ldr	r3, [pc, #52]	; (8014544 <prvCheckTasksWaitingTermination+0x54>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	3b01      	subs	r3, #1
 8014514:	4a0b      	ldr	r2, [pc, #44]	; (8014544 <prvCheckTasksWaitingTermination+0x54>)
 8014516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014518:	4b0b      	ldr	r3, [pc, #44]	; (8014548 <prvCheckTasksWaitingTermination+0x58>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	3b01      	subs	r3, #1
 801451e:	4a0a      	ldr	r2, [pc, #40]	; (8014548 <prvCheckTasksWaitingTermination+0x58>)
 8014520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014522:	f000 fc9b 	bl	8014e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f000 f810 	bl	801454c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801452c:	4b06      	ldr	r3, [pc, #24]	; (8014548 <prvCheckTasksWaitingTermination+0x58>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d1e1      	bne.n	80144f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014534:	bf00      	nop
 8014536:	bf00      	nop
 8014538:	3708      	adds	r7, #8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	2000160c 	.word	0x2000160c
 8014544:	20001638 	.word	0x20001638
 8014548:	20001620 	.word	0x20001620

0801454c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801455a:	2b00      	cmp	r3, #0
 801455c:	d108      	bne.n	8014570 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014562:	4618      	mov	r0, r3
 8014564:	f000 feb4 	bl	80152d0 <vPortFree>
				vPortFree( pxTCB );
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f000 feb1 	bl	80152d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801456e:	e010      	b.n	8014592 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014576:	2b01      	cmp	r3, #1
 8014578:	d103      	bne.n	8014582 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fea8 	bl	80152d0 <vPortFree>
	}
 8014580:	e007      	b.n	8014592 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014588:	2b02      	cmp	r3, #2
 801458a:	d002      	beq.n	8014592 <prvDeleteTCB+0x46>
 801458c:	f000 fd8c 	bl	80150a8 <ulSetInterruptMask>
 8014590:	e7fe      	b.n	8014590 <prvDeleteTCB+0x44>
	}
 8014592:	bf00      	nop
 8014594:	3708      	adds	r7, #8
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}
	...

0801459c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801459c:	b480      	push	{r7}
 801459e:	b083      	sub	sp, #12
 80145a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145a2:	4b0c      	ldr	r3, [pc, #48]	; (80145d4 <prvResetNextTaskUnblockTime+0x38>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d104      	bne.n	80145b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80145ac:	4b0a      	ldr	r3, [pc, #40]	; (80145d8 <prvResetNextTaskUnblockTime+0x3c>)
 80145ae:	f04f 32ff 	mov.w	r2, #4294967295
 80145b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80145b4:	e008      	b.n	80145c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145b6:	4b07      	ldr	r3, [pc, #28]	; (80145d4 <prvResetNextTaskUnblockTime+0x38>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	685b      	ldr	r3, [r3, #4]
 80145c4:	4a04      	ldr	r2, [pc, #16]	; (80145d8 <prvResetNextTaskUnblockTime+0x3c>)
 80145c6:	6013      	str	r3, [r2, #0]
}
 80145c8:	bf00      	nop
 80145ca:	370c      	adds	r7, #12
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	200015f0 	.word	0x200015f0
 80145d8:	20001658 	.word	0x20001658

080145dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80145dc:	b480      	push	{r7}
 80145de:	b083      	sub	sp, #12
 80145e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80145e2:	4b0b      	ldr	r3, [pc, #44]	; (8014610 <xTaskGetSchedulerState+0x34>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d102      	bne.n	80145f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80145ea:	2301      	movs	r3, #1
 80145ec:	607b      	str	r3, [r7, #4]
 80145ee:	e008      	b.n	8014602 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145f0:	4b08      	ldr	r3, [pc, #32]	; (8014614 <xTaskGetSchedulerState+0x38>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d102      	bne.n	80145fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80145f8:	2302      	movs	r3, #2
 80145fa:	607b      	str	r3, [r7, #4]
 80145fc:	e001      	b.n	8014602 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80145fe:	2300      	movs	r3, #0
 8014600:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014602:	687b      	ldr	r3, [r7, #4]
	}
 8014604:	4618      	mov	r0, r3
 8014606:	370c      	adds	r7, #12
 8014608:	46bd      	mov	sp, r7
 801460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460e:	4770      	bx	lr
 8014610:	20001644 	.word	0x20001644
 8014614:	20001660 	.word	0x20001660

08014618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014624:	2300      	movs	r3, #0
 8014626:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d046      	beq.n	80146bc <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801462e:	4b26      	ldr	r3, [pc, #152]	; (80146c8 <xTaskPriorityDisinherit+0xb0>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	68ba      	ldr	r2, [r7, #8]
 8014634:	429a      	cmp	r2, r3
 8014636:	d002      	beq.n	801463e <xTaskPriorityDisinherit+0x26>
 8014638:	f000 fd36 	bl	80150a8 <ulSetInterruptMask>
 801463c:	e7fe      	b.n	801463c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014642:	2b00      	cmp	r3, #0
 8014644:	d102      	bne.n	801464c <xTaskPriorityDisinherit+0x34>
 8014646:	f000 fd2f 	bl	80150a8 <ulSetInterruptMask>
 801464a:	e7fe      	b.n	801464a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014650:	1e5a      	subs	r2, r3, #1
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801465e:	429a      	cmp	r2, r3
 8014660:	d02c      	beq.n	80146bc <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014666:	2b00      	cmp	r3, #0
 8014668:	d128      	bne.n	80146bc <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	3304      	adds	r3, #4
 801466e:	4618      	mov	r0, r3
 8014670:	f7fe fca6 	bl	8012fc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014680:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801468c:	4b0f      	ldr	r3, [pc, #60]	; (80146cc <xTaskPriorityDisinherit+0xb4>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	429a      	cmp	r2, r3
 8014692:	d903      	bls.n	801469c <xTaskPriorityDisinherit+0x84>
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014698:	4a0c      	ldr	r2, [pc, #48]	; (80146cc <xTaskPriorityDisinherit+0xb4>)
 801469a:	6013      	str	r3, [r2, #0]
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a0:	4613      	mov	r3, r2
 80146a2:	009b      	lsls	r3, r3, #2
 80146a4:	4413      	add	r3, r2
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	4a09      	ldr	r2, [pc, #36]	; (80146d0 <xTaskPriorityDisinherit+0xb8>)
 80146aa:	441a      	add	r2, r3
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	3304      	adds	r3, #4
 80146b0:	4619      	mov	r1, r3
 80146b2:	4610      	mov	r0, r2
 80146b4:	f7fe fc27 	bl	8012f06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80146b8:	2301      	movs	r3, #1
 80146ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80146bc:	68fb      	ldr	r3, [r7, #12]
	}
 80146be:	4618      	mov	r0, r3
 80146c0:	3710      	adds	r7, #16
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	20001164 	.word	0x20001164
 80146cc:	20001640 	.word	0x20001640
 80146d0:	20001168 	.word	0x20001168

080146d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b084      	sub	sp, #16
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80146de:	4b21      	ldr	r3, [pc, #132]	; (8014764 <prvAddCurrentTaskToDelayedList+0x90>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146e4:	4b20      	ldr	r3, [pc, #128]	; (8014768 <prvAddCurrentTaskToDelayedList+0x94>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	3304      	adds	r3, #4
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fe fc68 	bl	8012fc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146f6:	d10a      	bne.n	801470e <prvAddCurrentTaskToDelayedList+0x3a>
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d007      	beq.n	801470e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146fe:	4b1a      	ldr	r3, [pc, #104]	; (8014768 <prvAddCurrentTaskToDelayedList+0x94>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	3304      	adds	r3, #4
 8014704:	4619      	mov	r1, r3
 8014706:	4819      	ldr	r0, [pc, #100]	; (801476c <prvAddCurrentTaskToDelayedList+0x98>)
 8014708:	f7fe fbfd 	bl	8012f06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801470c:	e026      	b.n	801475c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801470e:	68fa      	ldr	r2, [r7, #12]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	4413      	add	r3, r2
 8014714:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014716:	4b14      	ldr	r3, [pc, #80]	; (8014768 <prvAddCurrentTaskToDelayedList+0x94>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	68ba      	ldr	r2, [r7, #8]
 801471c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801471e:	68ba      	ldr	r2, [r7, #8]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	429a      	cmp	r2, r3
 8014724:	d209      	bcs.n	801473a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014726:	4b12      	ldr	r3, [pc, #72]	; (8014770 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014728:	681a      	ldr	r2, [r3, #0]
 801472a:	4b0f      	ldr	r3, [pc, #60]	; (8014768 <prvAddCurrentTaskToDelayedList+0x94>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	3304      	adds	r3, #4
 8014730:	4619      	mov	r1, r3
 8014732:	4610      	mov	r0, r2
 8014734:	f7fe fc0b 	bl	8012f4e <vListInsert>
}
 8014738:	e010      	b.n	801475c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801473a:	4b0e      	ldr	r3, [pc, #56]	; (8014774 <prvAddCurrentTaskToDelayedList+0xa0>)
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	4b0a      	ldr	r3, [pc, #40]	; (8014768 <prvAddCurrentTaskToDelayedList+0x94>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	3304      	adds	r3, #4
 8014744:	4619      	mov	r1, r3
 8014746:	4610      	mov	r0, r2
 8014748:	f7fe fc01 	bl	8012f4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801474c:	4b0a      	ldr	r3, [pc, #40]	; (8014778 <prvAddCurrentTaskToDelayedList+0xa4>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	68ba      	ldr	r2, [r7, #8]
 8014752:	429a      	cmp	r2, r3
 8014754:	d202      	bcs.n	801475c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014756:	4a08      	ldr	r2, [pc, #32]	; (8014778 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	6013      	str	r3, [r2, #0]
}
 801475c:	bf00      	nop
 801475e:	3710      	adds	r7, #16
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	2000163c 	.word	0x2000163c
 8014768:	20001164 	.word	0x20001164
 801476c:	20001624 	.word	0x20001624
 8014770:	200015f4 	.word	0x200015f4
 8014774:	200015f0 	.word	0x200015f0
 8014778:	20001658 	.word	0x20001658

0801477c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b088      	sub	sp, #32
 8014780:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014782:	2300      	movs	r3, #0
 8014784:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014786:	f000 fac7 	bl	8014d18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801478a:	4b18      	ldr	r3, [pc, #96]	; (80147ec <xTimerCreateTimerTask+0x70>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d020      	beq.n	80147d4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014792:	2300      	movs	r3, #0
 8014794:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014796:	2300      	movs	r3, #0
 8014798:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801479a:	463a      	mov	r2, r7
 801479c:	1d39      	adds	r1, r7, #4
 801479e:	f107 0308 	add.w	r3, r7, #8
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7fe fb68 	bl	8012e78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80147a8:	6839      	ldr	r1, [r7, #0]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	68ba      	ldr	r2, [r7, #8]
 80147ae:	9202      	str	r2, [sp, #8]
 80147b0:	9301      	str	r3, [sp, #4]
 80147b2:	2302      	movs	r3, #2
 80147b4:	9300      	str	r3, [sp, #0]
 80147b6:	2300      	movs	r3, #0
 80147b8:	460a      	mov	r2, r1
 80147ba:	490d      	ldr	r1, [pc, #52]	; (80147f0 <xTimerCreateTimerTask+0x74>)
 80147bc:	480d      	ldr	r0, [pc, #52]	; (80147f4 <xTimerCreateTimerTask+0x78>)
 80147be:	f7ff f855 	bl	801386c <xTaskCreateStatic>
 80147c2:	4603      	mov	r3, r0
 80147c4:	4a0c      	ldr	r2, [pc, #48]	; (80147f8 <xTimerCreateTimerTask+0x7c>)
 80147c6:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80147c8:	4b0b      	ldr	r3, [pc, #44]	; (80147f8 <xTimerCreateTimerTask+0x7c>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d001      	beq.n	80147d4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80147d0:	2301      	movs	r3, #1
 80147d2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d102      	bne.n	80147e0 <xTimerCreateTimerTask+0x64>
 80147da:	f000 fc65 	bl	80150a8 <ulSetInterruptMask>
 80147de:	e7fe      	b.n	80147de <xTimerCreateTimerTask+0x62>
	return xReturn;
 80147e0:	68fb      	ldr	r3, [r7, #12]
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3710      	adds	r7, #16
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	20001694 	.word	0x20001694
 80147f0:	0801664c 	.word	0x0801664c
 80147f4:	08014911 	.word	0x08014911
 80147f8:	20001698 	.word	0x20001698

080147fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b08a      	sub	sp, #40	; 0x28
 8014800:	af00      	add	r7, sp, #0
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
 8014808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801480a:	2300      	movs	r3, #0
 801480c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d102      	bne.n	801481a <xTimerGenericCommand+0x1e>
 8014814:	f000 fc48 	bl	80150a8 <ulSetInterruptMask>
 8014818:	e7fe      	b.n	8014818 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801481a:	4b1a      	ldr	r3, [pc, #104]	; (8014884 <xTimerGenericCommand+0x88>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d02a      	beq.n	8014878 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	2b05      	cmp	r3, #5
 8014832:	dc18      	bgt.n	8014866 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014834:	f7ff fed2 	bl	80145dc <xTaskGetSchedulerState>
 8014838:	4603      	mov	r3, r0
 801483a:	2b02      	cmp	r3, #2
 801483c:	d109      	bne.n	8014852 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801483e:	4b11      	ldr	r3, [pc, #68]	; (8014884 <xTimerGenericCommand+0x88>)
 8014840:	6818      	ldr	r0, [r3, #0]
 8014842:	f107 0114 	add.w	r1, r7, #20
 8014846:	2300      	movs	r3, #0
 8014848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801484a:	f7fe fcae 	bl	80131aa <xQueueGenericSend>
 801484e:	6278      	str	r0, [r7, #36]	; 0x24
 8014850:	e012      	b.n	8014878 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014852:	4b0c      	ldr	r3, [pc, #48]	; (8014884 <xTimerGenericCommand+0x88>)
 8014854:	6818      	ldr	r0, [r3, #0]
 8014856:	f107 0114 	add.w	r1, r7, #20
 801485a:	2300      	movs	r3, #0
 801485c:	2200      	movs	r2, #0
 801485e:	f7fe fca4 	bl	80131aa <xQueueGenericSend>
 8014862:	6278      	str	r0, [r7, #36]	; 0x24
 8014864:	e008      	b.n	8014878 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014866:	4b07      	ldr	r3, [pc, #28]	; (8014884 <xTimerGenericCommand+0x88>)
 8014868:	6818      	ldr	r0, [r3, #0]
 801486a:	f107 0114 	add.w	r1, r7, #20
 801486e:	2300      	movs	r3, #0
 8014870:	683a      	ldr	r2, [r7, #0]
 8014872:	f7fe fd63 	bl	801333c <xQueueGenericSendFromISR>
 8014876:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801487a:	4618      	mov	r0, r3
 801487c:	3728      	adds	r7, #40	; 0x28
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	20001694 	.word	0x20001694

08014888 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af02      	add	r7, sp, #8
 801488e:	6078      	str	r0, [r7, #4]
 8014890:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014892:	4b1e      	ldr	r3, [pc, #120]	; (801490c <prvProcessExpiredTimer+0x84>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	68db      	ldr	r3, [r3, #12]
 801489a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3304      	adds	r3, #4
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7fe fb8d 	bl	8012fc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148ac:	f003 0304 	and.w	r3, r3, #4
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d01a      	beq.n	80148ea <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	699a      	ldr	r2, [r3, #24]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	18d1      	adds	r1, r2, r3
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	683a      	ldr	r2, [r7, #0]
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f000 f8c1 	bl	8014a48 <prvInsertTimerInActiveList>
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d017      	beq.n	80148fc <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80148cc:	2300      	movs	r3, #0
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	2300      	movs	r3, #0
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	2100      	movs	r1, #0
 80148d6:	68f8      	ldr	r0, [r7, #12]
 80148d8:	f7ff ff90 	bl	80147fc <xTimerGenericCommand>
 80148dc:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d10b      	bne.n	80148fc <prvProcessExpiredTimer+0x74>
 80148e4:	f000 fbe0 	bl	80150a8 <ulSetInterruptMask>
 80148e8:	e7fe      	b.n	80148e8 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148f0:	f023 0301 	bic.w	r3, r3, #1
 80148f4:	b2da      	uxtb	r2, r3
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	6a1b      	ldr	r3, [r3, #32]
 8014900:	68f8      	ldr	r0, [r7, #12]
 8014902:	4798      	blx	r3
}
 8014904:	bf00      	nop
 8014906:	3710      	adds	r7, #16
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}
 801490c:	2000168c 	.word	0x2000168c

08014910 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b084      	sub	sp, #16
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014918:	f107 0308 	add.w	r3, r7, #8
 801491c:	4618      	mov	r0, r3
 801491e:	f000 f84f 	bl	80149c0 <prvGetNextExpireTime>
 8014922:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	4619      	mov	r1, r3
 8014928:	68f8      	ldr	r0, [r7, #12]
 801492a:	f000 f803 	bl	8014934 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801492e:	f000 f8cd 	bl	8014acc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014932:	e7f1      	b.n	8014918 <prvTimerTask+0x8>

08014934 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801493e:	f7ff fac5 	bl	8013ecc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014942:	f107 0308 	add.w	r3, r7, #8
 8014946:	4618      	mov	r0, r3
 8014948:	f000 f85e 	bl	8014a08 <prvSampleTimeNow>
 801494c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d12a      	bne.n	80149aa <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10a      	bne.n	8014970 <prvProcessTimerOrBlockTask+0x3c>
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	429a      	cmp	r2, r3
 8014960:	d806      	bhi.n	8014970 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014962:	f7ff fac1 	bl	8013ee8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014966:	68f9      	ldr	r1, [r7, #12]
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7ff ff8d 	bl	8014888 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801496e:	e01e      	b.n	80149ae <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d008      	beq.n	8014988 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014976:	4b10      	ldr	r3, [pc, #64]	; (80149b8 <prvProcessTimerOrBlockTask+0x84>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d101      	bne.n	8014984 <prvProcessTimerOrBlockTask+0x50>
 8014980:	2301      	movs	r3, #1
 8014982:	e000      	b.n	8014986 <prvProcessTimerOrBlockTask+0x52>
 8014984:	2300      	movs	r3, #0
 8014986:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014988:	4b0c      	ldr	r3, [pc, #48]	; (80149bc <prvProcessTimerOrBlockTask+0x88>)
 801498a:	6818      	ldr	r0, [r3, #0]
 801498c:	687a      	ldr	r2, [r7, #4]
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	1ad3      	subs	r3, r2, r3
 8014992:	683a      	ldr	r2, [r7, #0]
 8014994:	4619      	mov	r1, r3
 8014996:	f7fe ff35 	bl	8013804 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801499a:	f7ff faa5 	bl	8013ee8 <xTaskResumeAll>
 801499e:	4603      	mov	r3, r0
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d104      	bne.n	80149ae <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80149a4:	f000 fa36 	bl	8014e14 <vPortYield>
}
 80149a8:	e001      	b.n	80149ae <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80149aa:	f7ff fa9d 	bl	8013ee8 <xTaskResumeAll>
}
 80149ae:	bf00      	nop
 80149b0:	3710      	adds	r7, #16
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	20001690 	.word	0x20001690
 80149bc:	20001694 	.word	0x20001694

080149c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80149c0:	b480      	push	{r7}
 80149c2:	b085      	sub	sp, #20
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80149c8:	4b0e      	ldr	r3, [pc, #56]	; (8014a04 <prvGetNextExpireTime+0x44>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d101      	bne.n	80149d6 <prvGetNextExpireTime+0x16>
 80149d2:	2201      	movs	r2, #1
 80149d4:	e000      	b.n	80149d8 <prvGetNextExpireTime+0x18>
 80149d6:	2200      	movs	r2, #0
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d105      	bne.n	80149f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80149e4:	4b07      	ldr	r3, [pc, #28]	; (8014a04 <prvGetNextExpireTime+0x44>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68db      	ldr	r3, [r3, #12]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	60fb      	str	r3, [r7, #12]
 80149ee:	e001      	b.n	80149f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80149f0:	2300      	movs	r3, #0
 80149f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80149f4:	68fb      	ldr	r3, [r7, #12]
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	3714      	adds	r7, #20
 80149fa:	46bd      	mov	sp, r7
 80149fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a00:	4770      	bx	lr
 8014a02:	bf00      	nop
 8014a04:	2000168c 	.word	0x2000168c

08014a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014a10:	f7ff faf8 	bl	8014004 <xTaskGetTickCount>
 8014a14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014a16:	4b0b      	ldr	r3, [pc, #44]	; (8014a44 <prvSampleTimeNow+0x3c>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	68fa      	ldr	r2, [r7, #12]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d205      	bcs.n	8014a2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014a20:	f000 f91e 	bl	8014c60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2201      	movs	r2, #1
 8014a28:	601a      	str	r2, [r3, #0]
 8014a2a:	e002      	b.n	8014a32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2200      	movs	r2, #0
 8014a30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014a32:	4a04      	ldr	r2, [pc, #16]	; (8014a44 <prvSampleTimeNow+0x3c>)
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014a38:	68fb      	ldr	r3, [r7, #12]
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3710      	adds	r7, #16
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	2000169c 	.word	0x2000169c

08014a48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b086      	sub	sp, #24
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	607a      	str	r2, [r7, #4]
 8014a54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014a56:	2300      	movs	r3, #0
 8014a58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	68ba      	ldr	r2, [r7, #8]
 8014a5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	68fa      	ldr	r2, [r7, #12]
 8014a64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014a66:	68ba      	ldr	r2, [r7, #8]
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d812      	bhi.n	8014a94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a6e:	687a      	ldr	r2, [r7, #4]
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	1ad2      	subs	r2, r2, r3
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	699b      	ldr	r3, [r3, #24]
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d302      	bcc.n	8014a82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	617b      	str	r3, [r7, #20]
 8014a80:	e01b      	b.n	8014aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014a82:	4b10      	ldr	r3, [pc, #64]	; (8014ac4 <prvInsertTimerInActiveList+0x7c>)
 8014a84:	681a      	ldr	r2, [r3, #0]
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	3304      	adds	r3, #4
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	4610      	mov	r0, r2
 8014a8e:	f7fe fa5e 	bl	8012f4e <vListInsert>
 8014a92:	e012      	b.n	8014aba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014a94:	687a      	ldr	r2, [r7, #4]
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d206      	bcs.n	8014aaa <prvInsertTimerInActiveList+0x62>
 8014a9c:	68ba      	ldr	r2, [r7, #8]
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d302      	bcc.n	8014aaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	617b      	str	r3, [r7, #20]
 8014aa8:	e007      	b.n	8014aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014aaa:	4b07      	ldr	r3, [pc, #28]	; (8014ac8 <prvInsertTimerInActiveList+0x80>)
 8014aac:	681a      	ldr	r2, [r3, #0]
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	3304      	adds	r3, #4
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	4610      	mov	r0, r2
 8014ab6:	f7fe fa4a 	bl	8012f4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014aba:	697b      	ldr	r3, [r7, #20]
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3718      	adds	r7, #24
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	20001690 	.word	0x20001690
 8014ac8:	2000168c 	.word	0x2000168c

08014acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b08c      	sub	sp, #48	; 0x30
 8014ad0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014ad2:	e0b2      	b.n	8014c3a <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	da11      	bge.n	8014afe <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014ada:	f107 0308 	add.w	r3, r7, #8
 8014ade:	3304      	adds	r3, #4
 8014ae0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d102      	bne.n	8014aee <prvProcessReceivedCommands+0x22>
 8014ae8:	f000 fade 	bl	80150a8 <ulSetInterruptMask>
 8014aec:	e7fe      	b.n	8014aec <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014af4:	6850      	ldr	r0, [r2, #4]
 8014af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014af8:	6892      	ldr	r2, [r2, #8]
 8014afa:	4611      	mov	r1, r2
 8014afc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	f2c0 809a 	blt.w	8014c3a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014b06:	693b      	ldr	r3, [r7, #16]
 8014b08:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014b0a:	6a3b      	ldr	r3, [r7, #32]
 8014b0c:	695b      	ldr	r3, [r3, #20]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d004      	beq.n	8014b1c <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014b12:	6a3b      	ldr	r3, [r7, #32]
 8014b14:	3304      	adds	r3, #4
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7fe fa52 	bl	8012fc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014b1c:	1d3b      	adds	r3, r7, #4
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7ff ff72 	bl	8014a08 <prvSampleTimeNow>
 8014b24:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	2b09      	cmp	r3, #9
 8014b2a:	f200 8085 	bhi.w	8014c38 <prvProcessReceivedCommands+0x16c>
 8014b2e:	a201      	add	r2, pc, #4	; (adr r2, 8014b34 <prvProcessReceivedCommands+0x68>)
 8014b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b34:	08014b5d 	.word	0x08014b5d
 8014b38:	08014b5d 	.word	0x08014b5d
 8014b3c:	08014b5d 	.word	0x08014b5d
 8014b40:	08014bc1 	.word	0x08014bc1
 8014b44:	08014bd5 	.word	0x08014bd5
 8014b48:	08014c0f 	.word	0x08014c0f
 8014b4c:	08014b5d 	.word	0x08014b5d
 8014b50:	08014b5d 	.word	0x08014b5d
 8014b54:	08014bc1 	.word	0x08014bc1
 8014b58:	08014bd5 	.word	0x08014bd5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014b5c:	6a3b      	ldr	r3, [r7, #32]
 8014b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b62:	f043 0301 	orr.w	r3, r3, #1
 8014b66:	b2da      	uxtb	r2, r3
 8014b68:	6a3b      	ldr	r3, [r7, #32]
 8014b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014b6e:	68fa      	ldr	r2, [r7, #12]
 8014b70:	6a3b      	ldr	r3, [r7, #32]
 8014b72:	699b      	ldr	r3, [r3, #24]
 8014b74:	18d1      	adds	r1, r2, r3
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	69fa      	ldr	r2, [r7, #28]
 8014b7a:	6a38      	ldr	r0, [r7, #32]
 8014b7c:	f7ff ff64 	bl	8014a48 <prvInsertTimerInActiveList>
 8014b80:	4603      	mov	r3, r0
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d059      	beq.n	8014c3a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b86:	6a3b      	ldr	r3, [r7, #32]
 8014b88:	6a1b      	ldr	r3, [r3, #32]
 8014b8a:	6a38      	ldr	r0, [r7, #32]
 8014b8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014b8e:	6a3b      	ldr	r3, [r7, #32]
 8014b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b94:	f003 0304 	and.w	r3, r3, #4
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d04e      	beq.n	8014c3a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	6a3b      	ldr	r3, [r7, #32]
 8014ba0:	699b      	ldr	r3, [r3, #24]
 8014ba2:	441a      	add	r2, r3
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	9300      	str	r3, [sp, #0]
 8014ba8:	2300      	movs	r3, #0
 8014baa:	2100      	movs	r1, #0
 8014bac:	6a38      	ldr	r0, [r7, #32]
 8014bae:	f7ff fe25 	bl	80147fc <xTimerGenericCommand>
 8014bb2:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d13f      	bne.n	8014c3a <prvProcessReceivedCommands+0x16e>
 8014bba:	f000 fa75 	bl	80150a8 <ulSetInterruptMask>
 8014bbe:	e7fe      	b.n	8014bbe <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014bc0:	6a3b      	ldr	r3, [r7, #32]
 8014bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bc6:	f023 0301 	bic.w	r3, r3, #1
 8014bca:	b2da      	uxtb	r2, r3
 8014bcc:	6a3b      	ldr	r3, [r7, #32]
 8014bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014bd2:	e032      	b.n	8014c3a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014bd4:	6a3b      	ldr	r3, [r7, #32]
 8014bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bda:	f043 0301 	orr.w	r3, r3, #1
 8014bde:	b2da      	uxtb	r2, r3
 8014be0:	6a3b      	ldr	r3, [r7, #32]
 8014be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014be6:	68fa      	ldr	r2, [r7, #12]
 8014be8:	6a3b      	ldr	r3, [r7, #32]
 8014bea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014bec:	6a3b      	ldr	r3, [r7, #32]
 8014bee:	699b      	ldr	r3, [r3, #24]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d102      	bne.n	8014bfa <prvProcessReceivedCommands+0x12e>
 8014bf4:	f000 fa58 	bl	80150a8 <ulSetInterruptMask>
 8014bf8:	e7fe      	b.n	8014bf8 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014bfa:	6a3b      	ldr	r3, [r7, #32]
 8014bfc:	699a      	ldr	r2, [r3, #24]
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	18d1      	adds	r1, r2, r3
 8014c02:	69fb      	ldr	r3, [r7, #28]
 8014c04:	69fa      	ldr	r2, [r7, #28]
 8014c06:	6a38      	ldr	r0, [r7, #32]
 8014c08:	f7ff ff1e 	bl	8014a48 <prvInsertTimerInActiveList>
					break;
 8014c0c:	e015      	b.n	8014c3a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014c0e:	6a3b      	ldr	r3, [r7, #32]
 8014c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c14:	f003 0302 	and.w	r3, r3, #2
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d103      	bne.n	8014c24 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8014c1c:	6a38      	ldr	r0, [r7, #32]
 8014c1e:	f000 fb57 	bl	80152d0 <vPortFree>
 8014c22:	e00a      	b.n	8014c3a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014c24:	6a3b      	ldr	r3, [r7, #32]
 8014c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c2a:	f023 0301 	bic.w	r3, r3, #1
 8014c2e:	b2da      	uxtb	r2, r3
 8014c30:	6a3b      	ldr	r3, [r7, #32]
 8014c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014c36:	e000      	b.n	8014c3a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8014c38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014c3a:	4b08      	ldr	r3, [pc, #32]	; (8014c5c <prvProcessReceivedCommands+0x190>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	f107 0108 	add.w	r1, r7, #8
 8014c42:	2200      	movs	r2, #0
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7fe fbea 	bl	801341e <xQueueReceive>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f47f af41 	bne.w	8014ad4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8014c52:	bf00      	nop
 8014c54:	bf00      	nop
 8014c56:	3728      	adds	r7, #40	; 0x28
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}
 8014c5c:	20001694 	.word	0x20001694

08014c60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b088      	sub	sp, #32
 8014c64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014c66:	e040      	b.n	8014cea <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014c68:	4b29      	ldr	r3, [pc, #164]	; (8014d10 <prvSwitchTimerLists+0xb0>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c72:	4b27      	ldr	r3, [pc, #156]	; (8014d10 <prvSwitchTimerLists+0xb0>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	68db      	ldr	r3, [r3, #12]
 8014c78:	68db      	ldr	r3, [r3, #12]
 8014c7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	3304      	adds	r3, #4
 8014c80:	4618      	mov	r0, r3
 8014c82:	f7fe f99d 	bl	8012fc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	6a1b      	ldr	r3, [r3, #32]
 8014c8a:	68f8      	ldr	r0, [r7, #12]
 8014c8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c94:	f003 0304 	and.w	r3, r3, #4
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d026      	beq.n	8014cea <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	699b      	ldr	r3, [r3, #24]
 8014ca0:	693a      	ldr	r2, [r7, #16]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014ca6:	68ba      	ldr	r2, [r7, #8]
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d90e      	bls.n	8014ccc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	68fa      	ldr	r2, [r7, #12]
 8014cb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014cba:	4b15      	ldr	r3, [pc, #84]	; (8014d10 <prvSwitchTimerLists+0xb0>)
 8014cbc:	681a      	ldr	r2, [r3, #0]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	3304      	adds	r3, #4
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	4610      	mov	r0, r2
 8014cc6:	f7fe f942 	bl	8012f4e <vListInsert>
 8014cca:	e00e      	b.n	8014cea <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014ccc:	2300      	movs	r3, #0
 8014cce:	9300      	str	r3, [sp, #0]
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	693a      	ldr	r2, [r7, #16]
 8014cd4:	2100      	movs	r1, #0
 8014cd6:	68f8      	ldr	r0, [r7, #12]
 8014cd8:	f7ff fd90 	bl	80147fc <xTimerGenericCommand>
 8014cdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d102      	bne.n	8014cea <prvSwitchTimerLists+0x8a>
 8014ce4:	f000 f9e0 	bl	80150a8 <ulSetInterruptMask>
 8014ce8:	e7fe      	b.n	8014ce8 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014cea:	4b09      	ldr	r3, [pc, #36]	; (8014d10 <prvSwitchTimerLists+0xb0>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d1b9      	bne.n	8014c68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014cf4:	4b06      	ldr	r3, [pc, #24]	; (8014d10 <prvSwitchTimerLists+0xb0>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014cfa:	4b06      	ldr	r3, [pc, #24]	; (8014d14 <prvSwitchTimerLists+0xb4>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	4a04      	ldr	r2, [pc, #16]	; (8014d10 <prvSwitchTimerLists+0xb0>)
 8014d00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014d02:	4a04      	ldr	r2, [pc, #16]	; (8014d14 <prvSwitchTimerLists+0xb4>)
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	6013      	str	r3, [r2, #0]
}
 8014d08:	bf00      	nop
 8014d0a:	3718      	adds	r7, #24
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}
 8014d10:	2000168c 	.word	0x2000168c
 8014d14:	20001690 	.word	0x20001690

08014d18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014d1e:	f000 f88b 	bl	8014e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014d22:	4b15      	ldr	r3, [pc, #84]	; (8014d78 <prvCheckForValidListAndQueue+0x60>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d120      	bne.n	8014d6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014d2a:	4814      	ldr	r0, [pc, #80]	; (8014d7c <prvCheckForValidListAndQueue+0x64>)
 8014d2c:	f7fe f8be 	bl	8012eac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014d30:	4813      	ldr	r0, [pc, #76]	; (8014d80 <prvCheckForValidListAndQueue+0x68>)
 8014d32:	f7fe f8bb 	bl	8012eac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014d36:	4b13      	ldr	r3, [pc, #76]	; (8014d84 <prvCheckForValidListAndQueue+0x6c>)
 8014d38:	4a10      	ldr	r2, [pc, #64]	; (8014d7c <prvCheckForValidListAndQueue+0x64>)
 8014d3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014d3c:	4b12      	ldr	r3, [pc, #72]	; (8014d88 <prvCheckForValidListAndQueue+0x70>)
 8014d3e:	4a10      	ldr	r2, [pc, #64]	; (8014d80 <prvCheckForValidListAndQueue+0x68>)
 8014d40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014d42:	2300      	movs	r3, #0
 8014d44:	9300      	str	r3, [sp, #0]
 8014d46:	4b11      	ldr	r3, [pc, #68]	; (8014d8c <prvCheckForValidListAndQueue+0x74>)
 8014d48:	4a11      	ldr	r2, [pc, #68]	; (8014d90 <prvCheckForValidListAndQueue+0x78>)
 8014d4a:	2110      	movs	r1, #16
 8014d4c:	200a      	movs	r0, #10
 8014d4e:	f7fe f9b9 	bl	80130c4 <xQueueGenericCreateStatic>
 8014d52:	4603      	mov	r3, r0
 8014d54:	4a08      	ldr	r2, [pc, #32]	; (8014d78 <prvCheckForValidListAndQueue+0x60>)
 8014d56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014d58:	4b07      	ldr	r3, [pc, #28]	; (8014d78 <prvCheckForValidListAndQueue+0x60>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d005      	beq.n	8014d6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014d60:	4b05      	ldr	r3, [pc, #20]	; (8014d78 <prvCheckForValidListAndQueue+0x60>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	490b      	ldr	r1, [pc, #44]	; (8014d94 <prvCheckForValidListAndQueue+0x7c>)
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7fe fd22 	bl	80137b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d6c:	f000 f876 	bl	8014e5c <vPortExitCritical>
}
 8014d70:	bf00      	nop
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	20001694 	.word	0x20001694
 8014d7c:	20001664 	.word	0x20001664
 8014d80:	20001678 	.word	0x20001678
 8014d84:	2000168c 	.word	0x2000168c
 8014d88:	20001690 	.word	0x20001690
 8014d8c:	20001740 	.word	0x20001740
 8014d90:	200016a0 	.word	0x200016a0
 8014d94:	08016654 	.word	0x08016654

08014d98 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8014d98:	b480      	push	{r7}
 8014d9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014d9c:	4b0b      	ldr	r3, [pc, #44]	; (8014dcc <vPortSetupTimerInterrupt+0x34>)
 8014d9e:	2200      	movs	r2, #0
 8014da0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014da2:	4b0b      	ldr	r3, [pc, #44]	; (8014dd0 <vPortSetupTimerInterrupt+0x38>)
 8014da4:	2200      	movs	r2, #0
 8014da6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014da8:	4b0a      	ldr	r3, [pc, #40]	; (8014dd4 <vPortSetupTimerInterrupt+0x3c>)
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	4a0a      	ldr	r2, [pc, #40]	; (8014dd8 <vPortSetupTimerInterrupt+0x40>)
 8014dae:	fba2 2303 	umull	r2, r3, r2, r3
 8014db2:	099b      	lsrs	r3, r3, #6
 8014db4:	4a09      	ldr	r2, [pc, #36]	; (8014ddc <vPortSetupTimerInterrupt+0x44>)
 8014db6:	3b01      	subs	r3, #1
 8014db8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8014dba:	4b04      	ldr	r3, [pc, #16]	; (8014dcc <vPortSetupTimerInterrupt+0x34>)
 8014dbc:	2207      	movs	r2, #7
 8014dbe:	601a      	str	r2, [r3, #0]
}
 8014dc0:	bf00      	nop
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	e000e010 	.word	0xe000e010
 8014dd0:	e000e018 	.word	0xe000e018
 8014dd4:	20000048 	.word	0x20000048
 8014dd8:	10624dd3 	.word	0x10624dd3
 8014ddc:	e000e014 	.word	0xe000e014

08014de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8014de6:	2300      	movs	r3, #0
 8014de8:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8014dea:	4b09      	ldr	r3, [pc, #36]	; (8014e10 <prvTaskExitError+0x30>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df2:	d002      	beq.n	8014dfa <prvTaskExitError+0x1a>
 8014df4:	f000 f958 	bl	80150a8 <ulSetInterruptMask>
 8014df8:	e7fe      	b.n	8014df8 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8014dfa:	f000 f955 	bl	80150a8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8014dfe:	bf00      	nop
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d0fc      	beq.n	8014e00 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8014e06:	bf00      	nop
 8014e08:	bf00      	nop
 8014e0a:	3708      	adds	r7, #8
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	20000054 	.word	0x20000054

08014e14 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8014e14:	b480      	push	{r7}
 8014e16:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e18:	4b06      	ldr	r3, [pc, #24]	; (8014e34 <vPortYield+0x20>)
 8014e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e1e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8014e20:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8014e24:	f3bf 8f6f 	isb	sy
}
 8014e28:	bf00      	nop
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e30:	4770      	bx	lr
 8014e32:	bf00      	nop
 8014e34:	e000ed04 	.word	0xe000ed04

08014e38 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8014e3c:	f000 f934 	bl	80150a8 <ulSetInterruptMask>
	ulCriticalNesting++;
 8014e40:	4b05      	ldr	r3, [pc, #20]	; (8014e58 <vPortEnterCritical+0x20>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	3301      	adds	r3, #1
 8014e46:	4a04      	ldr	r2, [pc, #16]	; (8014e58 <vPortEnterCritical+0x20>)
 8014e48:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8014e4a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8014e4e:	f3bf 8f6f 	isb	sy
}
 8014e52:	bf00      	nop
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	20000054 	.word	0x20000054

08014e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8014e60:	4b0a      	ldr	r3, [pc, #40]	; (8014e8c <vPortExitCritical+0x30>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d102      	bne.n	8014e6e <vPortExitCritical+0x12>
 8014e68:	f000 f91e 	bl	80150a8 <ulSetInterruptMask>
 8014e6c:	e7fe      	b.n	8014e6c <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8014e6e:	4b07      	ldr	r3, [pc, #28]	; (8014e8c <vPortExitCritical+0x30>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	3b01      	subs	r3, #1
 8014e74:	4a05      	ldr	r2, [pc, #20]	; (8014e8c <vPortExitCritical+0x30>)
 8014e76:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8014e78:	4b04      	ldr	r3, [pc, #16]	; (8014e8c <vPortExitCritical+0x30>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d102      	bne.n	8014e86 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8014e80:	2000      	movs	r0, #0
 8014e82:	f000 f91e 	bl	80150c2 <vClearInterruptMask>
	}
}
 8014e86:	bf00      	nop
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	20000054 	.word	0x20000054

08014e90 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8014e96:	f000 f907 	bl	80150a8 <ulSetInterruptMask>
 8014e9a:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e9c:	f7ff f8c2 	bl	8014024 <xTaskIncrementTick>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d003      	beq.n	8014eae <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014ea6:	4b05      	ldr	r3, [pc, #20]	; (8014ebc <xPortSysTickHandler+0x2c>)
 8014ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eac:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f000 f907 	bl	80150c2 <vClearInterruptMask>
}
 8014eb4:	bf00      	nop
 8014eb6:	3708      	adds	r7, #8
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd80      	pop	{r7, pc}
 8014ebc:	e000ed04 	.word	0xe000ed04

08014ec0 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b084      	sub	sp, #16
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	699b      	ldr	r3, [r3, #24]
 8014ecc:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	3b02      	subs	r3, #2
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8014ed6:	7afb      	ldrb	r3, [r7, #11]
 8014ed8:	2b02      	cmp	r3, #2
 8014eda:	d102      	bne.n	8014ee2 <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8014edc:	f000 f8b8 	bl	8015050 <vRestoreContextOfFirstTask>
		}
		break;
 8014ee0:	e002      	b.n	8014ee8 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8014ee2:	f000 f8e1 	bl	80150a8 <ulSetInterruptMask>
 8014ee6:	e7fe      	b.n	8014ee6 <vPortSVCHandler_C+0x26>
		}
	}
}
 8014ee8:	bf00      	nop
 8014eea:	3710      	adds	r7, #16
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}

08014ef0 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b085      	sub	sp, #20
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60f8      	str	r0, [r7, #12]
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	607a      	str	r2, [r7, #4]
 8014efc:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	3b04      	subs	r3, #4
 8014f02:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014f0a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	3b04      	subs	r3, #4
 8014f10:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	3b04      	subs	r3, #4
 8014f1c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014f1e:	4a38      	ldr	r2, [pc, #224]	; (8015000 <pxPortInitialiseStack+0x110>)
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	3b04      	subs	r3, #4
 8014f28:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8014f30:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	3b04      	subs	r3, #4
 8014f36:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8014f3e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	3b04      	subs	r3, #4
 8014f44:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8014f4c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	3b04      	subs	r3, #4
 8014f52:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8014f5a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	3b04      	subs	r3, #4
 8014f60:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8014f62:	683a      	ldr	r2, [r7, #0]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	3b04      	subs	r3, #4
 8014f6c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8014f74:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	3b04      	subs	r3, #4
 8014f7a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8014f82:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	3b04      	subs	r3, #4
 8014f88:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8014f90:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	3b04      	subs	r3, #4
 8014f96:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8014f9e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	3b04      	subs	r3, #4
 8014fa4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8014fac:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	3b04      	subs	r3, #4
 8014fb2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8014fba:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	3b04      	subs	r3, #4
 8014fc0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8014fc8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	3b04      	subs	r3, #4
 8014fce:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8014fd6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	3b04      	subs	r3, #4
 8014fdc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8014fe4:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	3b04      	subs	r3, #4
 8014fea:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8014fec:	68ba      	ldr	r2, [r7, #8]
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8014ff2:	68fb      	ldr	r3, [r7, #12]
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3714      	adds	r7, #20
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffe:	4770      	bx	lr
 8015000:	08014de1 	.word	0x08014de1

08015004 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8015004:	b580      	push	{r7, lr}
 8015006:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015008:	4b0c      	ldr	r3, [pc, #48]	; (801503c <xPortStartScheduler+0x38>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	4a0b      	ldr	r2, [pc, #44]	; (801503c <xPortStartScheduler+0x38>)
 801500e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015012:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015014:	4b09      	ldr	r3, [pc, #36]	; (801503c <xPortStartScheduler+0x38>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	4a08      	ldr	r2, [pc, #32]	; (801503c <xPortStartScheduler+0x38>)
 801501a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801501e:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8015020:	f7ff feba 	bl	8014d98 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8015024:	4b06      	ldr	r3, [pc, #24]	; (8015040 <xPortStartScheduler+0x3c>)
 8015026:	2200      	movs	r2, #0
 8015028:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 801502a:	f000 f829 	bl	8015080 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801502e:	f7ff f8ab 	bl	8014188 <vTaskSwitchContext>
	prvTaskExitError();
 8015032:	f7ff fed5 	bl	8014de0 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8015036:	2300      	movs	r3, #0
}
 8015038:	4618      	mov	r0, r3
 801503a:	bd80      	pop	{r7, pc}
 801503c:	e000ed20 	.word	0xe000ed20
 8015040:	20000054 	.word	0x20000054
	...

08015050 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015050:	4a07      	ldr	r2, [pc, #28]	; (8015070 <pxCurrentTCBConst2>)
 8015052:	6811      	ldr	r1, [r2, #0]
 8015054:	6808      	ldr	r0, [r1, #0]
 8015056:	c806      	ldmia	r0!, {r1, r2}
 8015058:	f381 880b 	msr	PSPLIM, r1
 801505c:	2102      	movs	r1, #2
 801505e:	f381 8814 	msr	CONTROL, r1
 8015062:	3020      	adds	r0, #32
 8015064:	f380 8809 	msr	PSP, r0
 8015068:	f3bf 8f6f 	isb	sy
 801506c:	4710      	bx	r2
 801506e:	bf00      	nop

08015070 <pxCurrentTCBConst2>:
 8015070:	20001164 	.word	0x20001164
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8015074:	bf00      	nop
 8015076:	bf00      	nop
	...

08015080 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015080:	4807      	ldr	r0, [pc, #28]	; (80150a0 <xVTORConst>)
 8015082:	6800      	ldr	r0, [r0, #0]
 8015084:	6800      	ldr	r0, [r0, #0]
 8015086:	f380 8808 	msr	MSP, r0
 801508a:	b662      	cpsie	i
 801508c:	b661      	cpsie	f
 801508e:	f3bf 8f4f 	dsb	sy
 8015092:	f3bf 8f6f 	isb	sy
 8015096:	df02      	svc	2
 8015098:	bf00      	nop
 801509a:	bf00      	nop
 801509c:	f3af 8000 	nop.w

080150a0 <xVTORConst>:
 80150a0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 80150a4:	bf00      	nop
 80150a6:	bf00      	nop

080150a8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80150a8:	f3ef 8011 	mrs	r0, BASEPRI
 80150ac:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 80150b0:	f381 8811 	msr	BASEPRI, r1
 80150b4:	f3bf 8f4f 	dsb	sy
 80150b8:	f3bf 8f6f 	isb	sy
 80150bc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80150be:	bf00      	nop
 80150c0:	4618      	mov	r0, r3

080150c2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80150c2:	f380 8811 	msr	BASEPRI, r0
 80150c6:	f3bf 8f4f 	dsb	sy
 80150ca:	f3bf 8f6f 	isb	sy
 80150ce:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 80150d0:	bf00      	nop
	...

080150e0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80150e0:	f3ef 8009 	mrs	r0, PSP
 80150e4:	f3ef 820b 	mrs	r2, PSPLIM
 80150e8:	4673      	mov	r3, lr
 80150ea:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80150ee:	4a10      	ldr	r2, [pc, #64]	; (8015130 <pxCurrentTCBConst>)
 80150f0:	6811      	ldr	r1, [r2, #0]
 80150f2:	6008      	str	r0, [r1, #0]
 80150f4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 80150f8:	f380 8811 	msr	BASEPRI, r0
 80150fc:	f3bf 8f4f 	dsb	sy
 8015100:	f3bf 8f6f 	isb	sy
 8015104:	f7ff f840 	bl	8014188 <vTaskSwitchContext>
 8015108:	f04f 0000 	mov.w	r0, #0
 801510c:	f380 8811 	msr	BASEPRI, r0
 8015110:	4a07      	ldr	r2, [pc, #28]	; (8015130 <pxCurrentTCBConst>)
 8015112:	6811      	ldr	r1, [r2, #0]
 8015114:	6808      	ldr	r0, [r1, #0]
 8015116:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801511a:	f382 880b 	msr	PSPLIM, r2
 801511e:	f380 8809 	msr	PSP, r0
 8015122:	4718      	bx	r3
 8015124:	f3af 8000 	nop.w
 8015128:	f3af 8000 	nop.w
 801512c:	f3af 8000 	nop.w

08015130 <pxCurrentTCBConst>:
 8015130:	20001164 	.word	0x20001164
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8015134:	bf00      	nop
 8015136:	bf00      	nop
	...

08015140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015140:	f01e 0f04 	tst.w	lr, #4
 8015144:	bf0c      	ite	eq
 8015146:	f3ef 8008 	mrseq	r0, MSP
 801514a:	f3ef 8009 	mrsne	r0, PSP
 801514e:	4904      	ldr	r1, [pc, #16]	; (8015160 <svchandler_address_const>)
 8015150:	4708      	bx	r1
 8015152:	bf00      	nop
 8015154:	f3af 8000 	nop.w
 8015158:	f3af 8000 	nop.w
 801515c:	f3af 8000 	nop.w

08015160 <svchandler_address_const>:
 8015160:	08014ec1 	.word	0x08014ec1
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8015164:	bf00      	nop
 8015166:	bf00      	nop

08015168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b086      	sub	sp, #24
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015170:	2300      	movs	r3, #0
 8015172:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8015174:	f7fe feaa 	bl	8013ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015178:	4b4f      	ldr	r3, [pc, #316]	; (80152b8 <pvPortMalloc+0x150>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d101      	bne.n	8015184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015180:	f000 f8f8 	bl	8015374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015184:	4b4d      	ldr	r3, [pc, #308]	; (80152bc <pvPortMalloc+0x154>)
 8015186:	681a      	ldr	r2, [r3, #0]
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	4013      	ands	r3, r2
 801518c:	2b00      	cmp	r3, #0
 801518e:	f040 8083 	bne.w	8015298 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d015      	beq.n	80151c4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8015198:	2208      	movs	r2, #8
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	4413      	add	r3, r2
 801519e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f003 0307 	and.w	r3, r3, #7
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d00c      	beq.n	80151c4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f023 0307 	bic.w	r3, r3, #7
 80151b0:	3308      	adds	r3, #8
 80151b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f003 0307 	and.w	r3, r3, #7
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d002      	beq.n	80151c4 <pvPortMalloc+0x5c>
 80151be:	f7ff ff73 	bl	80150a8 <ulSetInterruptMask>
 80151c2:	e7fe      	b.n	80151c2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d066      	beq.n	8015298 <pvPortMalloc+0x130>
 80151ca:	4b3d      	ldr	r3, [pc, #244]	; (80152c0 <pvPortMalloc+0x158>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	687a      	ldr	r2, [r7, #4]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d861      	bhi.n	8015298 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80151d4:	4b3b      	ldr	r3, [pc, #236]	; (80152c4 <pvPortMalloc+0x15c>)
 80151d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80151d8:	4b3a      	ldr	r3, [pc, #232]	; (80152c4 <pvPortMalloc+0x15c>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151de:	e004      	b.n	80151ea <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80151e4:	697b      	ldr	r3, [r7, #20]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	687a      	ldr	r2, [r7, #4]
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d903      	bls.n	80151fc <pvPortMalloc+0x94>
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d1f1      	bne.n	80151e0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80151fc:	4b2e      	ldr	r3, [pc, #184]	; (80152b8 <pvPortMalloc+0x150>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	697a      	ldr	r2, [r7, #20]
 8015202:	429a      	cmp	r2, r3
 8015204:	d048      	beq.n	8015298 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2208      	movs	r2, #8
 801520c:	4413      	add	r3, r2
 801520e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	681a      	ldr	r2, [r3, #0]
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	685a      	ldr	r2, [r3, #4]
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	1ad2      	subs	r2, r2, r3
 8015220:	2308      	movs	r3, #8
 8015222:	005b      	lsls	r3, r3, #1
 8015224:	429a      	cmp	r2, r3
 8015226:	d917      	bls.n	8015258 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015228:	697a      	ldr	r2, [r7, #20]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	4413      	add	r3, r2
 801522e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	f003 0307 	and.w	r3, r3, #7
 8015236:	2b00      	cmp	r3, #0
 8015238:	d002      	beq.n	8015240 <pvPortMalloc+0xd8>
 801523a:	f7ff ff35 	bl	80150a8 <ulSetInterruptMask>
 801523e:	e7fe      	b.n	801523e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	685a      	ldr	r2, [r3, #4]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	1ad2      	subs	r2, r2, r3
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015252:	68b8      	ldr	r0, [r7, #8]
 8015254:	f000 f8f0 	bl	8015438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015258:	4b19      	ldr	r3, [pc, #100]	; (80152c0 <pvPortMalloc+0x158>)
 801525a:	681a      	ldr	r2, [r3, #0]
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	1ad3      	subs	r3, r2, r3
 8015262:	4a17      	ldr	r2, [pc, #92]	; (80152c0 <pvPortMalloc+0x158>)
 8015264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015266:	4b16      	ldr	r3, [pc, #88]	; (80152c0 <pvPortMalloc+0x158>)
 8015268:	681a      	ldr	r2, [r3, #0]
 801526a:	4b17      	ldr	r3, [pc, #92]	; (80152c8 <pvPortMalloc+0x160>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	429a      	cmp	r2, r3
 8015270:	d203      	bcs.n	801527a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015272:	4b13      	ldr	r3, [pc, #76]	; (80152c0 <pvPortMalloc+0x158>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	4a14      	ldr	r2, [pc, #80]	; (80152c8 <pvPortMalloc+0x160>)
 8015278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	685a      	ldr	r2, [r3, #4]
 801527e:	4b0f      	ldr	r3, [pc, #60]	; (80152bc <pvPortMalloc+0x154>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	431a      	orrs	r2, r3
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015288:	697b      	ldr	r3, [r7, #20]
 801528a:	2200      	movs	r2, #0
 801528c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801528e:	4b0f      	ldr	r3, [pc, #60]	; (80152cc <pvPortMalloc+0x164>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	3301      	adds	r3, #1
 8015294:	4a0d      	ldr	r2, [pc, #52]	; (80152cc <pvPortMalloc+0x164>)
 8015296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015298:	f7fe fe26 	bl	8013ee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	f003 0307 	and.w	r3, r3, #7
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d002      	beq.n	80152ac <pvPortMalloc+0x144>
 80152a6:	f7ff feff 	bl	80150a8 <ulSetInterruptMask>
 80152aa:	e7fe      	b.n	80152aa <pvPortMalloc+0x142>
	return pvReturn;
 80152ac:	68fb      	ldr	r3, [r7, #12]
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3718      	adds	r7, #24
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	20003798 	.word	0x20003798
 80152bc:	200037ac 	.word	0x200037ac
 80152c0:	2000379c 	.word	0x2000379c
 80152c4:	20003790 	.word	0x20003790
 80152c8:	200037a0 	.word	0x200037a0
 80152cc:	200037a4 	.word	0x200037a4

080152d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d03d      	beq.n	801535e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80152e2:	2308      	movs	r3, #8
 80152e4:	425b      	negs	r3, r3
 80152e6:	68fa      	ldr	r2, [r7, #12]
 80152e8:	4413      	add	r3, r2
 80152ea:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	685a      	ldr	r2, [r3, #4]
 80152f4:	4b1c      	ldr	r3, [pc, #112]	; (8015368 <vPortFree+0x98>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	4013      	ands	r3, r2
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d102      	bne.n	8015304 <vPortFree+0x34>
 80152fe:	f7ff fed3 	bl	80150a8 <ulSetInterruptMask>
 8015302:	e7fe      	b.n	8015302 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d002      	beq.n	8015312 <vPortFree+0x42>
 801530c:	f7ff fecc 	bl	80150a8 <ulSetInterruptMask>
 8015310:	e7fe      	b.n	8015310 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	685a      	ldr	r2, [r3, #4]
 8015316:	4b14      	ldr	r3, [pc, #80]	; (8015368 <vPortFree+0x98>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	4013      	ands	r3, r2
 801531c:	2b00      	cmp	r3, #0
 801531e:	d01e      	beq.n	801535e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d11a      	bne.n	801535e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	4b0e      	ldr	r3, [pc, #56]	; (8015368 <vPortFree+0x98>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	43db      	mvns	r3, r3
 8015332:	401a      	ands	r2, r3
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015338:	f7fe fdc8 	bl	8013ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	685a      	ldr	r2, [r3, #4]
 8015340:	4b0a      	ldr	r3, [pc, #40]	; (801536c <vPortFree+0x9c>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	4413      	add	r3, r2
 8015346:	4a09      	ldr	r2, [pc, #36]	; (801536c <vPortFree+0x9c>)
 8015348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801534a:	68b8      	ldr	r0, [r7, #8]
 801534c:	f000 f874 	bl	8015438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015350:	4b07      	ldr	r3, [pc, #28]	; (8015370 <vPortFree+0xa0>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	3301      	adds	r3, #1
 8015356:	4a06      	ldr	r2, [pc, #24]	; (8015370 <vPortFree+0xa0>)
 8015358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801535a:	f7fe fdc5 	bl	8013ee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801535e:	bf00      	nop
 8015360:	3710      	adds	r7, #16
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	200037ac 	.word	0x200037ac
 801536c:	2000379c 	.word	0x2000379c
 8015370:	200037a8 	.word	0x200037a8

08015374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015374:	b480      	push	{r7}
 8015376:	b085      	sub	sp, #20
 8015378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801537a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801537e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015380:	4b27      	ldr	r3, [pc, #156]	; (8015420 <prvHeapInit+0xac>)
 8015382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f003 0307 	and.w	r3, r3, #7
 801538a:	2b00      	cmp	r3, #0
 801538c:	d00c      	beq.n	80153a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	3307      	adds	r3, #7
 8015392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f023 0307 	bic.w	r3, r3, #7
 801539a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801539c:	68ba      	ldr	r2, [r7, #8]
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	1ad3      	subs	r3, r2, r3
 80153a2:	4a1f      	ldr	r2, [pc, #124]	; (8015420 <prvHeapInit+0xac>)
 80153a4:	4413      	add	r3, r2
 80153a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80153ac:	4a1d      	ldr	r2, [pc, #116]	; (8015424 <prvHeapInit+0xb0>)
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80153b2:	4b1c      	ldr	r3, [pc, #112]	; (8015424 <prvHeapInit+0xb0>)
 80153b4:	2200      	movs	r2, #0
 80153b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	68ba      	ldr	r2, [r7, #8]
 80153bc:	4413      	add	r3, r2
 80153be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80153c0:	2208      	movs	r2, #8
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	1a9b      	subs	r3, r3, r2
 80153c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f023 0307 	bic.w	r3, r3, #7
 80153ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	4a15      	ldr	r2, [pc, #84]	; (8015428 <prvHeapInit+0xb4>)
 80153d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80153d6:	4b14      	ldr	r3, [pc, #80]	; (8015428 <prvHeapInit+0xb4>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	2200      	movs	r2, #0
 80153dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80153de:	4b12      	ldr	r3, [pc, #72]	; (8015428 <prvHeapInit+0xb4>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	2200      	movs	r2, #0
 80153e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	68fa      	ldr	r2, [r7, #12]
 80153ee:	1ad2      	subs	r2, r2, r3
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80153f4:	4b0c      	ldr	r3, [pc, #48]	; (8015428 <prvHeapInit+0xb4>)
 80153f6:	681a      	ldr	r2, [r3, #0]
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	4a0a      	ldr	r2, [pc, #40]	; (801542c <prvHeapInit+0xb8>)
 8015402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	4a09      	ldr	r2, [pc, #36]	; (8015430 <prvHeapInit+0xbc>)
 801540a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801540c:	4b09      	ldr	r3, [pc, #36]	; (8015434 <prvHeapInit+0xc0>)
 801540e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015412:	601a      	str	r2, [r3, #0]
}
 8015414:	bf00      	nop
 8015416:	3714      	adds	r7, #20
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr
 8015420:	20001790 	.word	0x20001790
 8015424:	20003790 	.word	0x20003790
 8015428:	20003798 	.word	0x20003798
 801542c:	200037a0 	.word	0x200037a0
 8015430:	2000379c 	.word	0x2000379c
 8015434:	200037ac 	.word	0x200037ac

08015438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015438:	b480      	push	{r7}
 801543a:	b085      	sub	sp, #20
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015440:	4b28      	ldr	r3, [pc, #160]	; (80154e4 <prvInsertBlockIntoFreeList+0xac>)
 8015442:	60fb      	str	r3, [r7, #12]
 8015444:	e002      	b.n	801544c <prvInsertBlockIntoFreeList+0x14>
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	60fb      	str	r3, [r7, #12]
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	687a      	ldr	r2, [r7, #4]
 8015452:	429a      	cmp	r2, r3
 8015454:	d8f7      	bhi.n	8015446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	68ba      	ldr	r2, [r7, #8]
 8015460:	4413      	add	r3, r2
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	429a      	cmp	r2, r3
 8015466:	d108      	bne.n	801547a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	685a      	ldr	r2, [r3, #4]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	441a      	add	r2, r3
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	68ba      	ldr	r2, [r7, #8]
 8015484:	441a      	add	r2, r3
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	429a      	cmp	r2, r3
 801548c:	d118      	bne.n	80154c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	681a      	ldr	r2, [r3, #0]
 8015492:	4b15      	ldr	r3, [pc, #84]	; (80154e8 <prvInsertBlockIntoFreeList+0xb0>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	429a      	cmp	r2, r3
 8015498:	d00d      	beq.n	80154b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	685a      	ldr	r2, [r3, #4]
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	685b      	ldr	r3, [r3, #4]
 80154a4:	441a      	add	r2, r3
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	681a      	ldr	r2, [r3, #0]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	601a      	str	r2, [r3, #0]
 80154b4:	e008      	b.n	80154c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80154b6:	4b0c      	ldr	r3, [pc, #48]	; (80154e8 <prvInsertBlockIntoFreeList+0xb0>)
 80154b8:	681a      	ldr	r2, [r3, #0]
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	601a      	str	r2, [r3, #0]
 80154be:	e003      	b.n	80154c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	681a      	ldr	r2, [r3, #0]
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d002      	beq.n	80154d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	687a      	ldr	r2, [r7, #4]
 80154d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80154d6:	bf00      	nop
 80154d8:	3714      	adds	r7, #20
 80154da:	46bd      	mov	sp, r7
 80154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e0:	4770      	bx	lr
 80154e2:	bf00      	nop
 80154e4:	20003790 	.word	0x20003790
 80154e8:	20003798 	.word	0x20003798

080154ec <_ZdlPv>:
 80154ec:	f000 b972 	b.w	80157d4 <free>

080154f0 <_ZdlPvj>:
 80154f0:	f7ff bffc 	b.w	80154ec <_ZdlPv>

080154f4 <_Znwj>:
 80154f4:	2801      	cmp	r0, #1
 80154f6:	bf38      	it	cc
 80154f8:	2001      	movcc	r0, #1
 80154fa:	b510      	push	{r4, lr}
 80154fc:	4604      	mov	r4, r0
 80154fe:	4620      	mov	r0, r4
 8015500:	f000 f960 	bl	80157c4 <malloc>
 8015504:	b100      	cbz	r0, 8015508 <_Znwj+0x14>
 8015506:	bd10      	pop	{r4, pc}
 8015508:	f000 f812 	bl	8015530 <_ZSt15get_new_handlerv>
 801550c:	b908      	cbnz	r0, 8015512 <_Znwj+0x1e>
 801550e:	f000 f951 	bl	80157b4 <abort>
 8015512:	4780      	blx	r0
 8015514:	e7f3      	b.n	80154fe <_Znwj+0xa>

08015516 <_ZNSaIcEC1Ev>:
 8015516:	4770      	bx	lr

08015518 <_ZNSaIcEC1ERKS_>:
 8015518:	4770      	bx	lr

0801551a <_ZNSaIcED1Ev>:
 801551a:	4770      	bx	lr

0801551c <_ZSt17__throw_bad_allocv>:
 801551c:	b508      	push	{r3, lr}
 801551e:	f000 f949 	bl	80157b4 <abort>

08015522 <_ZSt28__throw_bad_array_new_lengthv>:
 8015522:	b508      	push	{r3, lr}
 8015524:	f000 f946 	bl	80157b4 <abort>

08015528 <_ZSt20__throw_length_errorPKc>:
 8015528:	b508      	push	{r3, lr}
 801552a:	f000 f943 	bl	80157b4 <abort>
	...

08015530 <_ZSt15get_new_handlerv>:
 8015530:	4b01      	ldr	r3, [pc, #4]	; (8015538 <_ZSt15get_new_handlerv+0x8>)
 8015532:	e8d3 0faf 	lda	r0, [r3]
 8015536:	4770      	bx	lr
 8015538:	200037b0 	.word	0x200037b0

0801553c <fmod>:
 801553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801553e:	ec57 6b10 	vmov	r6, r7, d0
 8015542:	ec55 4b11 	vmov	r4, r5, d1
 8015546:	ed2d 8b02 	vpush	{d8}
 801554a:	f000 f825 	bl	8015598 <__ieee754_fmod>
 801554e:	4622      	mov	r2, r4
 8015550:	462b      	mov	r3, r5
 8015552:	4630      	mov	r0, r6
 8015554:	4639      	mov	r1, r7
 8015556:	eeb0 8a40 	vmov.f32	s16, s0
 801555a:	eef0 8a60 	vmov.f32	s17, s1
 801555e:	f7eb fad7 	bl	8000b10 <__aeabi_dcmpun>
 8015562:	b990      	cbnz	r0, 801558a <fmod+0x4e>
 8015564:	2200      	movs	r2, #0
 8015566:	2300      	movs	r3, #0
 8015568:	4620      	mov	r0, r4
 801556a:	4629      	mov	r1, r5
 801556c:	f7eb fa9e 	bl	8000aac <__aeabi_dcmpeq>
 8015570:	b158      	cbz	r0, 801558a <fmod+0x4e>
 8015572:	f000 fa87 	bl	8015a84 <__errno>
 8015576:	2321      	movs	r3, #33	; 0x21
 8015578:	2200      	movs	r2, #0
 801557a:	6003      	str	r3, [r0, #0]
 801557c:	2300      	movs	r3, #0
 801557e:	4610      	mov	r0, r2
 8015580:	4619      	mov	r1, r3
 8015582:	f7eb f955 	bl	8000830 <__aeabi_ddiv>
 8015586:	ec41 0b18 	vmov	d8, r0, r1
 801558a:	eeb0 0a48 	vmov.f32	s0, s16
 801558e:	eef0 0a68 	vmov.f32	s1, s17
 8015592:	ecbd 8b02 	vpop	{d8}
 8015596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015598 <__ieee754_fmod>:
 8015598:	ec53 2b11 	vmov	r2, r3, d1
 801559c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80155a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155a4:	ea5c 0402 	orrs.w	r4, ip, r2
 80155a8:	461e      	mov	r6, r3
 80155aa:	ee11 7a10 	vmov	r7, s2
 80155ae:	ee11 ea10 	vmov	lr, s2
 80155b2:	ec51 0b10 	vmov	r0, r1, d0
 80155b6:	d00c      	beq.n	80155d2 <__ieee754_fmod+0x3a>
 80155b8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80155bc:	4c77      	ldr	r4, [pc, #476]	; (801579c <__ieee754_fmod+0x204>)
 80155be:	4689      	mov	r9, r1
 80155c0:	45a0      	cmp	r8, r4
 80155c2:	dc06      	bgt.n	80155d2 <__ieee754_fmod+0x3a>
 80155c4:	4254      	negs	r4, r2
 80155c6:	4d76      	ldr	r5, [pc, #472]	; (80157a0 <__ieee754_fmod+0x208>)
 80155c8:	4314      	orrs	r4, r2
 80155ca:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80155ce:	42ac      	cmp	r4, r5
 80155d0:	d909      	bls.n	80155e6 <__ieee754_fmod+0x4e>
 80155d2:	f7eb f803 	bl	80005dc <__aeabi_dmul>
 80155d6:	4602      	mov	r2, r0
 80155d8:	460b      	mov	r3, r1
 80155da:	f7eb f929 	bl	8000830 <__aeabi_ddiv>
 80155de:	ec41 0b10 	vmov	d0, r0, r1
 80155e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155e6:	45e0      	cmp	r8, ip
 80155e8:	ee10 aa10 	vmov	sl, s0
 80155ec:	ee10 4a10 	vmov	r4, s0
 80155f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80155f4:	dc09      	bgt.n	801560a <__ieee754_fmod+0x72>
 80155f6:	dbf2      	blt.n	80155de <__ieee754_fmod+0x46>
 80155f8:	4290      	cmp	r0, r2
 80155fa:	d3f0      	bcc.n	80155de <__ieee754_fmod+0x46>
 80155fc:	d105      	bne.n	801560a <__ieee754_fmod+0x72>
 80155fe:	4b69      	ldr	r3, [pc, #420]	; (80157a4 <__ieee754_fmod+0x20c>)
 8015600:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8015604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015608:	e7e9      	b.n	80155de <__ieee754_fmod+0x46>
 801560a:	4a65      	ldr	r2, [pc, #404]	; (80157a0 <__ieee754_fmod+0x208>)
 801560c:	ea19 0f02 	tst.w	r9, r2
 8015610:	d148      	bne.n	80156a4 <__ieee754_fmod+0x10c>
 8015612:	f1b8 0f00 	cmp.w	r8, #0
 8015616:	d13d      	bne.n	8015694 <__ieee754_fmod+0xfc>
 8015618:	4653      	mov	r3, sl
 801561a:	4963      	ldr	r1, [pc, #396]	; (80157a8 <__ieee754_fmod+0x210>)
 801561c:	2b00      	cmp	r3, #0
 801561e:	dc36      	bgt.n	801568e <__ieee754_fmod+0xf6>
 8015620:	4216      	tst	r6, r2
 8015622:	d14f      	bne.n	80156c4 <__ieee754_fmod+0x12c>
 8015624:	f1bc 0f00 	cmp.w	ip, #0
 8015628:	d144      	bne.n	80156b4 <__ieee754_fmod+0x11c>
 801562a:	463b      	mov	r3, r7
 801562c:	4a5e      	ldr	r2, [pc, #376]	; (80157a8 <__ieee754_fmod+0x210>)
 801562e:	2b00      	cmp	r3, #0
 8015630:	dc3d      	bgt.n	80156ae <__ieee754_fmod+0x116>
 8015632:	485e      	ldr	r0, [pc, #376]	; (80157ac <__ieee754_fmod+0x214>)
 8015634:	4281      	cmp	r1, r0
 8015636:	db4a      	blt.n	80156ce <__ieee754_fmod+0x136>
 8015638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801563c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015640:	485a      	ldr	r0, [pc, #360]	; (80157ac <__ieee754_fmod+0x214>)
 8015642:	4282      	cmp	r2, r0
 8015644:	db57      	blt.n	80156f6 <__ieee754_fmod+0x15e>
 8015646:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801564a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801564e:	1a89      	subs	r1, r1, r2
 8015650:	1b98      	subs	r0, r3, r6
 8015652:	eba4 070e 	sub.w	r7, r4, lr
 8015656:	2900      	cmp	r1, #0
 8015658:	d162      	bne.n	8015720 <__ieee754_fmod+0x188>
 801565a:	4574      	cmp	r4, lr
 801565c:	bf38      	it	cc
 801565e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8015662:	2800      	cmp	r0, #0
 8015664:	bfa4      	itt	ge
 8015666:	463c      	movge	r4, r7
 8015668:	4603      	movge	r3, r0
 801566a:	ea53 0104 	orrs.w	r1, r3, r4
 801566e:	d0c6      	beq.n	80155fe <__ieee754_fmod+0x66>
 8015670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015674:	db69      	blt.n	801574a <__ieee754_fmod+0x1b2>
 8015676:	494d      	ldr	r1, [pc, #308]	; (80157ac <__ieee754_fmod+0x214>)
 8015678:	428a      	cmp	r2, r1
 801567a:	db6c      	blt.n	8015756 <__ieee754_fmod+0x1be>
 801567c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015680:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8015684:	4620      	mov	r0, r4
 8015686:	432b      	orrs	r3, r5
 8015688:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801568c:	e7a7      	b.n	80155de <__ieee754_fmod+0x46>
 801568e:	3901      	subs	r1, #1
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	e7c3      	b.n	801561c <__ieee754_fmod+0x84>
 8015694:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015698:	4944      	ldr	r1, [pc, #272]	; (80157ac <__ieee754_fmod+0x214>)
 801569a:	2b00      	cmp	r3, #0
 801569c:	ddc0      	ble.n	8015620 <__ieee754_fmod+0x88>
 801569e:	3901      	subs	r1, #1
 80156a0:	005b      	lsls	r3, r3, #1
 80156a2:	e7fa      	b.n	801569a <__ieee754_fmod+0x102>
 80156a4:	ea4f 5128 	mov.w	r1, r8, asr #20
 80156a8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80156ac:	e7b8      	b.n	8015620 <__ieee754_fmod+0x88>
 80156ae:	3a01      	subs	r2, #1
 80156b0:	005b      	lsls	r3, r3, #1
 80156b2:	e7bc      	b.n	801562e <__ieee754_fmod+0x96>
 80156b4:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80156b8:	4a3c      	ldr	r2, [pc, #240]	; (80157ac <__ieee754_fmod+0x214>)
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	ddb9      	ble.n	8015632 <__ieee754_fmod+0x9a>
 80156be:	3a01      	subs	r2, #1
 80156c0:	005b      	lsls	r3, r3, #1
 80156c2:	e7fa      	b.n	80156ba <__ieee754_fmod+0x122>
 80156c4:	ea4f 522c 	mov.w	r2, ip, asr #20
 80156c8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80156cc:	e7b1      	b.n	8015632 <__ieee754_fmod+0x9a>
 80156ce:	1a40      	subs	r0, r0, r1
 80156d0:	281f      	cmp	r0, #31
 80156d2:	dc0a      	bgt.n	80156ea <__ieee754_fmod+0x152>
 80156d4:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80156d8:	fa08 f800 	lsl.w	r8, r8, r0
 80156dc:	fa0a f400 	lsl.w	r4, sl, r0
 80156e0:	fa2a f303 	lsr.w	r3, sl, r3
 80156e4:	ea43 0308 	orr.w	r3, r3, r8
 80156e8:	e7aa      	b.n	8015640 <__ieee754_fmod+0xa8>
 80156ea:	4b31      	ldr	r3, [pc, #196]	; (80157b0 <__ieee754_fmod+0x218>)
 80156ec:	2400      	movs	r4, #0
 80156ee:	1a5b      	subs	r3, r3, r1
 80156f0:	fa0a f303 	lsl.w	r3, sl, r3
 80156f4:	e7a4      	b.n	8015640 <__ieee754_fmod+0xa8>
 80156f6:	1a80      	subs	r0, r0, r2
 80156f8:	281f      	cmp	r0, #31
 80156fa:	dc0a      	bgt.n	8015712 <__ieee754_fmod+0x17a>
 80156fc:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8015700:	fa0c fc00 	lsl.w	ip, ip, r0
 8015704:	fa07 fe00 	lsl.w	lr, r7, r0
 8015708:	fa27 f606 	lsr.w	r6, r7, r6
 801570c:	ea46 060c 	orr.w	r6, r6, ip
 8015710:	e79d      	b.n	801564e <__ieee754_fmod+0xb6>
 8015712:	4e27      	ldr	r6, [pc, #156]	; (80157b0 <__ieee754_fmod+0x218>)
 8015714:	f04f 0e00 	mov.w	lr, #0
 8015718:	1ab6      	subs	r6, r6, r2
 801571a:	fa07 f606 	lsl.w	r6, r7, r6
 801571e:	e796      	b.n	801564e <__ieee754_fmod+0xb6>
 8015720:	4574      	cmp	r4, lr
 8015722:	bf38      	it	cc
 8015724:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8015728:	2800      	cmp	r0, #0
 801572a:	da05      	bge.n	8015738 <__ieee754_fmod+0x1a0>
 801572c:	0fe0      	lsrs	r0, r4, #31
 801572e:	0064      	lsls	r4, r4, #1
 8015730:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015734:	3901      	subs	r1, #1
 8015736:	e78b      	b.n	8015650 <__ieee754_fmod+0xb8>
 8015738:	ea50 0307 	orrs.w	r3, r0, r7
 801573c:	f43f af5f 	beq.w	80155fe <__ieee754_fmod+0x66>
 8015740:	0ffb      	lsrs	r3, r7, #31
 8015742:	007c      	lsls	r4, r7, #1
 8015744:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015748:	e7f4      	b.n	8015734 <__ieee754_fmod+0x19c>
 801574a:	0fe1      	lsrs	r1, r4, #31
 801574c:	3a01      	subs	r2, #1
 801574e:	0064      	lsls	r4, r4, #1
 8015750:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015754:	e78c      	b.n	8015670 <__ieee754_fmod+0xd8>
 8015756:	1a89      	subs	r1, r1, r2
 8015758:	2914      	cmp	r1, #20
 801575a:	dc0a      	bgt.n	8015772 <__ieee754_fmod+0x1da>
 801575c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015760:	40cc      	lsrs	r4, r1
 8015762:	fa03 f202 	lsl.w	r2, r3, r2
 8015766:	410b      	asrs	r3, r1
 8015768:	4322      	orrs	r2, r4
 801576a:	ea43 0105 	orr.w	r1, r3, r5
 801576e:	4610      	mov	r0, r2
 8015770:	e735      	b.n	80155de <__ieee754_fmod+0x46>
 8015772:	291f      	cmp	r1, #31
 8015774:	dc07      	bgt.n	8015786 <__ieee754_fmod+0x1ee>
 8015776:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801577a:	40cc      	lsrs	r4, r1
 801577c:	fa03 f202 	lsl.w	r2, r3, r2
 8015780:	4322      	orrs	r2, r4
 8015782:	462b      	mov	r3, r5
 8015784:	e7f1      	b.n	801576a <__ieee754_fmod+0x1d2>
 8015786:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801578a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801578e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8015792:	32e2      	adds	r2, #226	; 0xe2
 8015794:	fa43 f202 	asr.w	r2, r3, r2
 8015798:	e7f3      	b.n	8015782 <__ieee754_fmod+0x1ea>
 801579a:	bf00      	nop
 801579c:	7fefffff 	.word	0x7fefffff
 80157a0:	7ff00000 	.word	0x7ff00000
 80157a4:	08016758 	.word	0x08016758
 80157a8:	fffffbed 	.word	0xfffffbed
 80157ac:	fffffc02 	.word	0xfffffc02
 80157b0:	fffffbe2 	.word	0xfffffbe2

080157b4 <abort>:
 80157b4:	2006      	movs	r0, #6
 80157b6:	b508      	push	{r3, lr}
 80157b8:	f000 f938 	bl	8015a2c <raise>
 80157bc:	2001      	movs	r0, #1
 80157be:	f7f3 fd5b 	bl	8009278 <_exit>
	...

080157c4 <malloc>:
 80157c4:	4b02      	ldr	r3, [pc, #8]	; (80157d0 <malloc+0xc>)
 80157c6:	4601      	mov	r1, r0
 80157c8:	6818      	ldr	r0, [r3, #0]
 80157ca:	f000 b82b 	b.w	8015824 <_malloc_r>
 80157ce:	bf00      	nop
 80157d0:	200000a4 	.word	0x200000a4

080157d4 <free>:
 80157d4:	4b02      	ldr	r3, [pc, #8]	; (80157e0 <free+0xc>)
 80157d6:	4601      	mov	r1, r0
 80157d8:	6818      	ldr	r0, [r3, #0]
 80157da:	f000 b98d 	b.w	8015af8 <_free_r>
 80157de:	bf00      	nop
 80157e0:	200000a4 	.word	0x200000a4

080157e4 <sbrk_aligned>:
 80157e4:	b570      	push	{r4, r5, r6, lr}
 80157e6:	4e0e      	ldr	r6, [pc, #56]	; (8015820 <sbrk_aligned+0x3c>)
 80157e8:	460c      	mov	r4, r1
 80157ea:	4605      	mov	r5, r0
 80157ec:	6831      	ldr	r1, [r6, #0]
 80157ee:	b911      	cbnz	r1, 80157f6 <sbrk_aligned+0x12>
 80157f0:	f000 f938 	bl	8015a64 <_sbrk_r>
 80157f4:	6030      	str	r0, [r6, #0]
 80157f6:	4621      	mov	r1, r4
 80157f8:	4628      	mov	r0, r5
 80157fa:	f000 f933 	bl	8015a64 <_sbrk_r>
 80157fe:	1c43      	adds	r3, r0, #1
 8015800:	d00a      	beq.n	8015818 <sbrk_aligned+0x34>
 8015802:	1cc4      	adds	r4, r0, #3
 8015804:	f024 0403 	bic.w	r4, r4, #3
 8015808:	42a0      	cmp	r0, r4
 801580a:	d007      	beq.n	801581c <sbrk_aligned+0x38>
 801580c:	1a21      	subs	r1, r4, r0
 801580e:	4628      	mov	r0, r5
 8015810:	f000 f928 	bl	8015a64 <_sbrk_r>
 8015814:	3001      	adds	r0, #1
 8015816:	d101      	bne.n	801581c <sbrk_aligned+0x38>
 8015818:	f04f 34ff 	mov.w	r4, #4294967295
 801581c:	4620      	mov	r0, r4
 801581e:	bd70      	pop	{r4, r5, r6, pc}
 8015820:	200037b8 	.word	0x200037b8

08015824 <_malloc_r>:
 8015824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015828:	1ccd      	adds	r5, r1, #3
 801582a:	4607      	mov	r7, r0
 801582c:	f025 0503 	bic.w	r5, r5, #3
 8015830:	3508      	adds	r5, #8
 8015832:	2d0c      	cmp	r5, #12
 8015834:	bf38      	it	cc
 8015836:	250c      	movcc	r5, #12
 8015838:	2d00      	cmp	r5, #0
 801583a:	db01      	blt.n	8015840 <_malloc_r+0x1c>
 801583c:	42a9      	cmp	r1, r5
 801583e:	d905      	bls.n	801584c <_malloc_r+0x28>
 8015840:	230c      	movs	r3, #12
 8015842:	2600      	movs	r6, #0
 8015844:	603b      	str	r3, [r7, #0]
 8015846:	4630      	mov	r0, r6
 8015848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801584c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015920 <_malloc_r+0xfc>
 8015850:	f000 f868 	bl	8015924 <__malloc_lock>
 8015854:	f8d8 3000 	ldr.w	r3, [r8]
 8015858:	461c      	mov	r4, r3
 801585a:	bb5c      	cbnz	r4, 80158b4 <_malloc_r+0x90>
 801585c:	4629      	mov	r1, r5
 801585e:	4638      	mov	r0, r7
 8015860:	f7ff ffc0 	bl	80157e4 <sbrk_aligned>
 8015864:	1c43      	adds	r3, r0, #1
 8015866:	4604      	mov	r4, r0
 8015868:	d155      	bne.n	8015916 <_malloc_r+0xf2>
 801586a:	f8d8 4000 	ldr.w	r4, [r8]
 801586e:	4626      	mov	r6, r4
 8015870:	2e00      	cmp	r6, #0
 8015872:	d145      	bne.n	8015900 <_malloc_r+0xdc>
 8015874:	2c00      	cmp	r4, #0
 8015876:	d048      	beq.n	801590a <_malloc_r+0xe6>
 8015878:	6823      	ldr	r3, [r4, #0]
 801587a:	4631      	mov	r1, r6
 801587c:	4638      	mov	r0, r7
 801587e:	eb04 0903 	add.w	r9, r4, r3
 8015882:	f000 f8ef 	bl	8015a64 <_sbrk_r>
 8015886:	4581      	cmp	r9, r0
 8015888:	d13f      	bne.n	801590a <_malloc_r+0xe6>
 801588a:	6821      	ldr	r1, [r4, #0]
 801588c:	4638      	mov	r0, r7
 801588e:	1a6d      	subs	r5, r5, r1
 8015890:	4629      	mov	r1, r5
 8015892:	f7ff ffa7 	bl	80157e4 <sbrk_aligned>
 8015896:	3001      	adds	r0, #1
 8015898:	d037      	beq.n	801590a <_malloc_r+0xe6>
 801589a:	6823      	ldr	r3, [r4, #0]
 801589c:	442b      	add	r3, r5
 801589e:	6023      	str	r3, [r4, #0]
 80158a0:	f8d8 3000 	ldr.w	r3, [r8]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d038      	beq.n	801591a <_malloc_r+0xf6>
 80158a8:	685a      	ldr	r2, [r3, #4]
 80158aa:	42a2      	cmp	r2, r4
 80158ac:	d12b      	bne.n	8015906 <_malloc_r+0xe2>
 80158ae:	2200      	movs	r2, #0
 80158b0:	605a      	str	r2, [r3, #4]
 80158b2:	e00f      	b.n	80158d4 <_malloc_r+0xb0>
 80158b4:	6822      	ldr	r2, [r4, #0]
 80158b6:	1b52      	subs	r2, r2, r5
 80158b8:	d41f      	bmi.n	80158fa <_malloc_r+0xd6>
 80158ba:	2a0b      	cmp	r2, #11
 80158bc:	d917      	bls.n	80158ee <_malloc_r+0xca>
 80158be:	1961      	adds	r1, r4, r5
 80158c0:	42a3      	cmp	r3, r4
 80158c2:	6025      	str	r5, [r4, #0]
 80158c4:	bf18      	it	ne
 80158c6:	6059      	strne	r1, [r3, #4]
 80158c8:	6863      	ldr	r3, [r4, #4]
 80158ca:	bf08      	it	eq
 80158cc:	f8c8 1000 	streq.w	r1, [r8]
 80158d0:	5162      	str	r2, [r4, r5]
 80158d2:	604b      	str	r3, [r1, #4]
 80158d4:	f104 060b 	add.w	r6, r4, #11
 80158d8:	4638      	mov	r0, r7
 80158da:	f000 f829 	bl	8015930 <__malloc_unlock>
 80158de:	1d23      	adds	r3, r4, #4
 80158e0:	f026 0607 	bic.w	r6, r6, #7
 80158e4:	1af2      	subs	r2, r6, r3
 80158e6:	d0ae      	beq.n	8015846 <_malloc_r+0x22>
 80158e8:	1b9b      	subs	r3, r3, r6
 80158ea:	50a3      	str	r3, [r4, r2]
 80158ec:	e7ab      	b.n	8015846 <_malloc_r+0x22>
 80158ee:	42a3      	cmp	r3, r4
 80158f0:	6862      	ldr	r2, [r4, #4]
 80158f2:	d1dd      	bne.n	80158b0 <_malloc_r+0x8c>
 80158f4:	f8c8 2000 	str.w	r2, [r8]
 80158f8:	e7ec      	b.n	80158d4 <_malloc_r+0xb0>
 80158fa:	4623      	mov	r3, r4
 80158fc:	6864      	ldr	r4, [r4, #4]
 80158fe:	e7ac      	b.n	801585a <_malloc_r+0x36>
 8015900:	4634      	mov	r4, r6
 8015902:	6876      	ldr	r6, [r6, #4]
 8015904:	e7b4      	b.n	8015870 <_malloc_r+0x4c>
 8015906:	4613      	mov	r3, r2
 8015908:	e7cc      	b.n	80158a4 <_malloc_r+0x80>
 801590a:	230c      	movs	r3, #12
 801590c:	4638      	mov	r0, r7
 801590e:	603b      	str	r3, [r7, #0]
 8015910:	f000 f80e 	bl	8015930 <__malloc_unlock>
 8015914:	e797      	b.n	8015846 <_malloc_r+0x22>
 8015916:	6025      	str	r5, [r4, #0]
 8015918:	e7dc      	b.n	80158d4 <_malloc_r+0xb0>
 801591a:	605b      	str	r3, [r3, #4]
 801591c:	deff      	udf	#255	; 0xff
 801591e:	bf00      	nop
 8015920:	200037b4 	.word	0x200037b4

08015924 <__malloc_lock>:
 8015924:	4801      	ldr	r0, [pc, #4]	; (801592c <__malloc_lock+0x8>)
 8015926:	f000 b8d7 	b.w	8015ad8 <__retarget_lock_acquire_recursive>
 801592a:	bf00      	nop
 801592c:	200038f8 	.word	0x200038f8

08015930 <__malloc_unlock>:
 8015930:	4801      	ldr	r0, [pc, #4]	; (8015938 <__malloc_unlock+0x8>)
 8015932:	f000 b8d2 	b.w	8015ada <__retarget_lock_release_recursive>
 8015936:	bf00      	nop
 8015938:	200038f8 	.word	0x200038f8

0801593c <siscanf>:
 801593c:	b40e      	push	{r1, r2, r3}
 801593e:	b510      	push	{r4, lr}
 8015940:	b09f      	sub	sp, #124	; 0x7c
 8015942:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015946:	ac21      	add	r4, sp, #132	; 0x84
 8015948:	f8ad 101c 	strh.w	r1, [sp, #28]
 801594c:	9004      	str	r0, [sp, #16]
 801594e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015952:	9008      	str	r0, [sp, #32]
 8015954:	9201      	str	r2, [sp, #4]
 8015956:	f7ea fc7d 	bl	8000254 <strlen>
 801595a:	4b0c      	ldr	r3, [pc, #48]	; (801598c <siscanf+0x50>)
 801595c:	a904      	add	r1, sp, #16
 801595e:	9005      	str	r0, [sp, #20]
 8015960:	930d      	str	r3, [sp, #52]	; 0x34
 8015962:	2300      	movs	r3, #0
 8015964:	9009      	str	r0, [sp, #36]	; 0x24
 8015966:	9311      	str	r3, [sp, #68]	; 0x44
 8015968:	9316      	str	r3, [sp, #88]	; 0x58
 801596a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801596e:	4808      	ldr	r0, [pc, #32]	; (8015990 <siscanf+0x54>)
 8015970:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015974:	4623      	mov	r3, r4
 8015976:	9a01      	ldr	r2, [sp, #4]
 8015978:	6800      	ldr	r0, [r0, #0]
 801597a:	9403      	str	r4, [sp, #12]
 801597c:	f000 f962 	bl	8015c44 <__ssvfiscanf_r>
 8015980:	b01f      	add	sp, #124	; 0x7c
 8015982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015986:	b003      	add	sp, #12
 8015988:	4770      	bx	lr
 801598a:	bf00      	nop
 801598c:	08015995 	.word	0x08015995
 8015990:	200000a4 	.word	0x200000a4

08015994 <__seofread>:
 8015994:	2000      	movs	r0, #0
 8015996:	4770      	bx	lr

08015998 <memmove>:
 8015998:	4288      	cmp	r0, r1
 801599a:	b510      	push	{r4, lr}
 801599c:	eb01 0402 	add.w	r4, r1, r2
 80159a0:	d902      	bls.n	80159a8 <memmove+0x10>
 80159a2:	4284      	cmp	r4, r0
 80159a4:	4623      	mov	r3, r4
 80159a6:	d807      	bhi.n	80159b8 <memmove+0x20>
 80159a8:	1e43      	subs	r3, r0, #1
 80159aa:	42a1      	cmp	r1, r4
 80159ac:	d008      	beq.n	80159c0 <memmove+0x28>
 80159ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80159b6:	e7f8      	b.n	80159aa <memmove+0x12>
 80159b8:	4402      	add	r2, r0
 80159ba:	4601      	mov	r1, r0
 80159bc:	428a      	cmp	r2, r1
 80159be:	d100      	bne.n	80159c2 <memmove+0x2a>
 80159c0:	bd10      	pop	{r4, pc}
 80159c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80159c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80159ca:	e7f7      	b.n	80159bc <memmove+0x24>

080159cc <memset>:
 80159cc:	4402      	add	r2, r0
 80159ce:	4603      	mov	r3, r0
 80159d0:	4293      	cmp	r3, r2
 80159d2:	d100      	bne.n	80159d6 <memset+0xa>
 80159d4:	4770      	bx	lr
 80159d6:	f803 1b01 	strb.w	r1, [r3], #1
 80159da:	e7f9      	b.n	80159d0 <memset+0x4>

080159dc <_raise_r>:
 80159dc:	291f      	cmp	r1, #31
 80159de:	b538      	push	{r3, r4, r5, lr}
 80159e0:	4604      	mov	r4, r0
 80159e2:	460d      	mov	r5, r1
 80159e4:	d904      	bls.n	80159f0 <_raise_r+0x14>
 80159e6:	2316      	movs	r3, #22
 80159e8:	6003      	str	r3, [r0, #0]
 80159ea:	f04f 30ff 	mov.w	r0, #4294967295
 80159ee:	bd38      	pop	{r3, r4, r5, pc}
 80159f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80159f2:	b112      	cbz	r2, 80159fa <_raise_r+0x1e>
 80159f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159f8:	b94b      	cbnz	r3, 8015a0e <_raise_r+0x32>
 80159fa:	4620      	mov	r0, r4
 80159fc:	f000 f830 	bl	8015a60 <_getpid_r>
 8015a00:	462a      	mov	r2, r5
 8015a02:	4601      	mov	r1, r0
 8015a04:	4620      	mov	r0, r4
 8015a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a0a:	f000 b817 	b.w	8015a3c <_kill_r>
 8015a0e:	2b01      	cmp	r3, #1
 8015a10:	d00a      	beq.n	8015a28 <_raise_r+0x4c>
 8015a12:	1c59      	adds	r1, r3, #1
 8015a14:	d103      	bne.n	8015a1e <_raise_r+0x42>
 8015a16:	2316      	movs	r3, #22
 8015a18:	6003      	str	r3, [r0, #0]
 8015a1a:	2001      	movs	r0, #1
 8015a1c:	e7e7      	b.n	80159ee <_raise_r+0x12>
 8015a1e:	2400      	movs	r4, #0
 8015a20:	4628      	mov	r0, r5
 8015a22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015a26:	4798      	blx	r3
 8015a28:	2000      	movs	r0, #0
 8015a2a:	e7e0      	b.n	80159ee <_raise_r+0x12>

08015a2c <raise>:
 8015a2c:	4b02      	ldr	r3, [pc, #8]	; (8015a38 <raise+0xc>)
 8015a2e:	4601      	mov	r1, r0
 8015a30:	6818      	ldr	r0, [r3, #0]
 8015a32:	f7ff bfd3 	b.w	80159dc <_raise_r>
 8015a36:	bf00      	nop
 8015a38:	200000a4 	.word	0x200000a4

08015a3c <_kill_r>:
 8015a3c:	b538      	push	{r3, r4, r5, lr}
 8015a3e:	2300      	movs	r3, #0
 8015a40:	4d06      	ldr	r5, [pc, #24]	; (8015a5c <_kill_r+0x20>)
 8015a42:	4604      	mov	r4, r0
 8015a44:	4608      	mov	r0, r1
 8015a46:	4611      	mov	r1, r2
 8015a48:	602b      	str	r3, [r5, #0]
 8015a4a:	f7f3 fc05 	bl	8009258 <_kill>
 8015a4e:	1c43      	adds	r3, r0, #1
 8015a50:	d102      	bne.n	8015a58 <_kill_r+0x1c>
 8015a52:	682b      	ldr	r3, [r5, #0]
 8015a54:	b103      	cbz	r3, 8015a58 <_kill_r+0x1c>
 8015a56:	6023      	str	r3, [r4, #0]
 8015a58:	bd38      	pop	{r3, r4, r5, pc}
 8015a5a:	bf00      	nop
 8015a5c:	200038f4 	.word	0x200038f4

08015a60 <_getpid_r>:
 8015a60:	f7f3 bbf2 	b.w	8009248 <_getpid>

08015a64 <_sbrk_r>:
 8015a64:	b538      	push	{r3, r4, r5, lr}
 8015a66:	2300      	movs	r3, #0
 8015a68:	4d05      	ldr	r5, [pc, #20]	; (8015a80 <_sbrk_r+0x1c>)
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	4608      	mov	r0, r1
 8015a6e:	602b      	str	r3, [r5, #0]
 8015a70:	f7f3 fc0c 	bl	800928c <_sbrk>
 8015a74:	1c43      	adds	r3, r0, #1
 8015a76:	d102      	bne.n	8015a7e <_sbrk_r+0x1a>
 8015a78:	682b      	ldr	r3, [r5, #0]
 8015a7a:	b103      	cbz	r3, 8015a7e <_sbrk_r+0x1a>
 8015a7c:	6023      	str	r3, [r4, #0]
 8015a7e:	bd38      	pop	{r3, r4, r5, pc}
 8015a80:	200038f4 	.word	0x200038f4

08015a84 <__errno>:
 8015a84:	4b01      	ldr	r3, [pc, #4]	; (8015a8c <__errno+0x8>)
 8015a86:	6818      	ldr	r0, [r3, #0]
 8015a88:	4770      	bx	lr
 8015a8a:	bf00      	nop
 8015a8c:	200000a4 	.word	0x200000a4

08015a90 <__libc_init_array>:
 8015a90:	b570      	push	{r4, r5, r6, lr}
 8015a92:	4d0d      	ldr	r5, [pc, #52]	; (8015ac8 <__libc_init_array+0x38>)
 8015a94:	2600      	movs	r6, #0
 8015a96:	4c0d      	ldr	r4, [pc, #52]	; (8015acc <__libc_init_array+0x3c>)
 8015a98:	1b64      	subs	r4, r4, r5
 8015a9a:	10a4      	asrs	r4, r4, #2
 8015a9c:	42a6      	cmp	r6, r4
 8015a9e:	d109      	bne.n	8015ab4 <__libc_init_array+0x24>
 8015aa0:	4d0b      	ldr	r5, [pc, #44]	; (8015ad0 <__libc_init_array+0x40>)
 8015aa2:	2600      	movs	r6, #0
 8015aa4:	4c0b      	ldr	r4, [pc, #44]	; (8015ad4 <__libc_init_array+0x44>)
 8015aa6:	f000 fd3f 	bl	8016528 <_init>
 8015aaa:	1b64      	subs	r4, r4, r5
 8015aac:	10a4      	asrs	r4, r4, #2
 8015aae:	42a6      	cmp	r6, r4
 8015ab0:	d105      	bne.n	8015abe <__libc_init_array+0x2e>
 8015ab2:	bd70      	pop	{r4, r5, r6, pc}
 8015ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ab8:	3601      	adds	r6, #1
 8015aba:	4798      	blx	r3
 8015abc:	e7ee      	b.n	8015a9c <__libc_init_array+0xc>
 8015abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ac2:	3601      	adds	r6, #1
 8015ac4:	4798      	blx	r3
 8015ac6:	e7f2      	b.n	8015aae <__libc_init_array+0x1e>
 8015ac8:	08016890 	.word	0x08016890
 8015acc:	08016890 	.word	0x08016890
 8015ad0:	08016890 	.word	0x08016890
 8015ad4:	08016894 	.word	0x08016894

08015ad8 <__retarget_lock_acquire_recursive>:
 8015ad8:	4770      	bx	lr

08015ada <__retarget_lock_release_recursive>:
 8015ada:	4770      	bx	lr

08015adc <memcpy>:
 8015adc:	440a      	add	r2, r1
 8015ade:	1e43      	subs	r3, r0, #1
 8015ae0:	4291      	cmp	r1, r2
 8015ae2:	d100      	bne.n	8015ae6 <memcpy+0xa>
 8015ae4:	4770      	bx	lr
 8015ae6:	b510      	push	{r4, lr}
 8015ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015aec:	4291      	cmp	r1, r2
 8015aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015af2:	d1f9      	bne.n	8015ae8 <memcpy+0xc>
 8015af4:	bd10      	pop	{r4, pc}
	...

08015af8 <_free_r>:
 8015af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015afa:	2900      	cmp	r1, #0
 8015afc:	d043      	beq.n	8015b86 <_free_r+0x8e>
 8015afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b02:	1f0c      	subs	r4, r1, #4
 8015b04:	9001      	str	r0, [sp, #4]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	bfb8      	it	lt
 8015b0a:	18e4      	addlt	r4, r4, r3
 8015b0c:	f7ff ff0a 	bl	8015924 <__malloc_lock>
 8015b10:	4a1e      	ldr	r2, [pc, #120]	; (8015b8c <_free_r+0x94>)
 8015b12:	9801      	ldr	r0, [sp, #4]
 8015b14:	6813      	ldr	r3, [r2, #0]
 8015b16:	b933      	cbnz	r3, 8015b26 <_free_r+0x2e>
 8015b18:	6063      	str	r3, [r4, #4]
 8015b1a:	6014      	str	r4, [r2, #0]
 8015b1c:	b003      	add	sp, #12
 8015b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b22:	f7ff bf05 	b.w	8015930 <__malloc_unlock>
 8015b26:	42a3      	cmp	r3, r4
 8015b28:	d908      	bls.n	8015b3c <_free_r+0x44>
 8015b2a:	6825      	ldr	r5, [r4, #0]
 8015b2c:	1961      	adds	r1, r4, r5
 8015b2e:	428b      	cmp	r3, r1
 8015b30:	bf01      	itttt	eq
 8015b32:	6819      	ldreq	r1, [r3, #0]
 8015b34:	685b      	ldreq	r3, [r3, #4]
 8015b36:	1949      	addeq	r1, r1, r5
 8015b38:	6021      	streq	r1, [r4, #0]
 8015b3a:	e7ed      	b.n	8015b18 <_free_r+0x20>
 8015b3c:	461a      	mov	r2, r3
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	b10b      	cbz	r3, 8015b46 <_free_r+0x4e>
 8015b42:	42a3      	cmp	r3, r4
 8015b44:	d9fa      	bls.n	8015b3c <_free_r+0x44>
 8015b46:	6811      	ldr	r1, [r2, #0]
 8015b48:	1855      	adds	r5, r2, r1
 8015b4a:	42a5      	cmp	r5, r4
 8015b4c:	d10b      	bne.n	8015b66 <_free_r+0x6e>
 8015b4e:	6824      	ldr	r4, [r4, #0]
 8015b50:	4421      	add	r1, r4
 8015b52:	1854      	adds	r4, r2, r1
 8015b54:	6011      	str	r1, [r2, #0]
 8015b56:	42a3      	cmp	r3, r4
 8015b58:	d1e0      	bne.n	8015b1c <_free_r+0x24>
 8015b5a:	681c      	ldr	r4, [r3, #0]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	440c      	add	r4, r1
 8015b60:	6053      	str	r3, [r2, #4]
 8015b62:	6014      	str	r4, [r2, #0]
 8015b64:	e7da      	b.n	8015b1c <_free_r+0x24>
 8015b66:	d902      	bls.n	8015b6e <_free_r+0x76>
 8015b68:	230c      	movs	r3, #12
 8015b6a:	6003      	str	r3, [r0, #0]
 8015b6c:	e7d6      	b.n	8015b1c <_free_r+0x24>
 8015b6e:	6825      	ldr	r5, [r4, #0]
 8015b70:	1961      	adds	r1, r4, r5
 8015b72:	428b      	cmp	r3, r1
 8015b74:	bf02      	ittt	eq
 8015b76:	6819      	ldreq	r1, [r3, #0]
 8015b78:	685b      	ldreq	r3, [r3, #4]
 8015b7a:	1949      	addeq	r1, r1, r5
 8015b7c:	6063      	str	r3, [r4, #4]
 8015b7e:	bf08      	it	eq
 8015b80:	6021      	streq	r1, [r4, #0]
 8015b82:	6054      	str	r4, [r2, #4]
 8015b84:	e7ca      	b.n	8015b1c <_free_r+0x24>
 8015b86:	b003      	add	sp, #12
 8015b88:	bd30      	pop	{r4, r5, pc}
 8015b8a:	bf00      	nop
 8015b8c:	200037b4 	.word	0x200037b4

08015b90 <_sungetc_r>:
 8015b90:	b538      	push	{r3, r4, r5, lr}
 8015b92:	1c4b      	adds	r3, r1, #1
 8015b94:	4614      	mov	r4, r2
 8015b96:	d103      	bne.n	8015ba0 <_sungetc_r+0x10>
 8015b98:	f04f 35ff 	mov.w	r5, #4294967295
 8015b9c:	4628      	mov	r0, r5
 8015b9e:	bd38      	pop	{r3, r4, r5, pc}
 8015ba0:	8993      	ldrh	r3, [r2, #12]
 8015ba2:	b2cd      	uxtb	r5, r1
 8015ba4:	f023 0320 	bic.w	r3, r3, #32
 8015ba8:	8193      	strh	r3, [r2, #12]
 8015baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015bac:	6852      	ldr	r2, [r2, #4]
 8015bae:	b18b      	cbz	r3, 8015bd4 <_sungetc_r+0x44>
 8015bb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015bb2:	4293      	cmp	r3, r2
 8015bb4:	dd08      	ble.n	8015bc8 <_sungetc_r+0x38>
 8015bb6:	6823      	ldr	r3, [r4, #0]
 8015bb8:	1e5a      	subs	r2, r3, #1
 8015bba:	6022      	str	r2, [r4, #0]
 8015bbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015bc0:	6863      	ldr	r3, [r4, #4]
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	6063      	str	r3, [r4, #4]
 8015bc6:	e7e9      	b.n	8015b9c <_sungetc_r+0xc>
 8015bc8:	4621      	mov	r1, r4
 8015bca:	f000 fb38 	bl	801623e <__submore>
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d0f1      	beq.n	8015bb6 <_sungetc_r+0x26>
 8015bd2:	e7e1      	b.n	8015b98 <_sungetc_r+0x8>
 8015bd4:	6921      	ldr	r1, [r4, #16]
 8015bd6:	6823      	ldr	r3, [r4, #0]
 8015bd8:	b151      	cbz	r1, 8015bf0 <_sungetc_r+0x60>
 8015bda:	4299      	cmp	r1, r3
 8015bdc:	d208      	bcs.n	8015bf0 <_sungetc_r+0x60>
 8015bde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015be2:	42a9      	cmp	r1, r5
 8015be4:	d104      	bne.n	8015bf0 <_sungetc_r+0x60>
 8015be6:	3b01      	subs	r3, #1
 8015be8:	3201      	adds	r2, #1
 8015bea:	6023      	str	r3, [r4, #0]
 8015bec:	6062      	str	r2, [r4, #4]
 8015bee:	e7d5      	b.n	8015b9c <_sungetc_r+0xc>
 8015bf0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015bf8:	6363      	str	r3, [r4, #52]	; 0x34
 8015bfa:	2303      	movs	r3, #3
 8015bfc:	63a3      	str	r3, [r4, #56]	; 0x38
 8015bfe:	4623      	mov	r3, r4
 8015c00:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015c04:	6023      	str	r3, [r4, #0]
 8015c06:	2301      	movs	r3, #1
 8015c08:	e7dc      	b.n	8015bc4 <_sungetc_r+0x34>

08015c0a <__ssrefill_r>:
 8015c0a:	b510      	push	{r4, lr}
 8015c0c:	460c      	mov	r4, r1
 8015c0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015c10:	b169      	cbz	r1, 8015c2e <__ssrefill_r+0x24>
 8015c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c16:	4299      	cmp	r1, r3
 8015c18:	d001      	beq.n	8015c1e <__ssrefill_r+0x14>
 8015c1a:	f7ff ff6d 	bl	8015af8 <_free_r>
 8015c1e:	2000      	movs	r0, #0
 8015c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c22:	6360      	str	r0, [r4, #52]	; 0x34
 8015c24:	6063      	str	r3, [r4, #4]
 8015c26:	b113      	cbz	r3, 8015c2e <__ssrefill_r+0x24>
 8015c28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015c2a:	6023      	str	r3, [r4, #0]
 8015c2c:	bd10      	pop	{r4, pc}
 8015c2e:	6923      	ldr	r3, [r4, #16]
 8015c30:	f04f 30ff 	mov.w	r0, #4294967295
 8015c34:	6023      	str	r3, [r4, #0]
 8015c36:	2300      	movs	r3, #0
 8015c38:	6063      	str	r3, [r4, #4]
 8015c3a:	89a3      	ldrh	r3, [r4, #12]
 8015c3c:	f043 0320 	orr.w	r3, r3, #32
 8015c40:	81a3      	strh	r3, [r4, #12]
 8015c42:	e7f3      	b.n	8015c2c <__ssrefill_r+0x22>

08015c44 <__ssvfiscanf_r>:
 8015c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c48:	460c      	mov	r4, r1
 8015c4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8015c4e:	2100      	movs	r1, #0
 8015c50:	4606      	mov	r6, r0
 8015c52:	f10d 0804 	add.w	r8, sp, #4
 8015c56:	4fa6      	ldr	r7, [pc, #664]	; (8015ef0 <__ssvfiscanf_r+0x2ac>)
 8015c58:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8015efc <__ssvfiscanf_r+0x2b8>
 8015c5c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015c60:	9300      	str	r3, [sp, #0]
 8015c62:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015c66:	49a3      	ldr	r1, [pc, #652]	; (8015ef4 <__ssvfiscanf_r+0x2b0>)
 8015c68:	91a0      	str	r1, [sp, #640]	; 0x280
 8015c6a:	49a3      	ldr	r1, [pc, #652]	; (8015ef8 <__ssvfiscanf_r+0x2b4>)
 8015c6c:	91a1      	str	r1, [sp, #644]	; 0x284
 8015c6e:	7813      	ldrb	r3, [r2, #0]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f000 815a 	beq.w	8015f2a <__ssvfiscanf_r+0x2e6>
 8015c76:	5cf9      	ldrb	r1, [r7, r3]
 8015c78:	1c55      	adds	r5, r2, #1
 8015c7a:	f011 0108 	ands.w	r1, r1, #8
 8015c7e:	d019      	beq.n	8015cb4 <__ssvfiscanf_r+0x70>
 8015c80:	6863      	ldr	r3, [r4, #4]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	dd0f      	ble.n	8015ca6 <__ssvfiscanf_r+0x62>
 8015c86:	6823      	ldr	r3, [r4, #0]
 8015c88:	781a      	ldrb	r2, [r3, #0]
 8015c8a:	5cba      	ldrb	r2, [r7, r2]
 8015c8c:	0712      	lsls	r2, r2, #28
 8015c8e:	d401      	bmi.n	8015c94 <__ssvfiscanf_r+0x50>
 8015c90:	462a      	mov	r2, r5
 8015c92:	e7ec      	b.n	8015c6e <__ssvfiscanf_r+0x2a>
 8015c94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015c96:	3301      	adds	r3, #1
 8015c98:	3201      	adds	r2, #1
 8015c9a:	6023      	str	r3, [r4, #0]
 8015c9c:	9245      	str	r2, [sp, #276]	; 0x114
 8015c9e:	6862      	ldr	r2, [r4, #4]
 8015ca0:	3a01      	subs	r2, #1
 8015ca2:	6062      	str	r2, [r4, #4]
 8015ca4:	e7ec      	b.n	8015c80 <__ssvfiscanf_r+0x3c>
 8015ca6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015ca8:	4621      	mov	r1, r4
 8015caa:	4630      	mov	r0, r6
 8015cac:	4798      	blx	r3
 8015cae:	2800      	cmp	r0, #0
 8015cb0:	d0e9      	beq.n	8015c86 <__ssvfiscanf_r+0x42>
 8015cb2:	e7ed      	b.n	8015c90 <__ssvfiscanf_r+0x4c>
 8015cb4:	2b25      	cmp	r3, #37	; 0x25
 8015cb6:	d012      	beq.n	8015cde <__ssvfiscanf_r+0x9a>
 8015cb8:	469a      	mov	sl, r3
 8015cba:	6863      	ldr	r3, [r4, #4]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	f340 8092 	ble.w	8015de6 <__ssvfiscanf_r+0x1a2>
 8015cc2:	6822      	ldr	r2, [r4, #0]
 8015cc4:	7813      	ldrb	r3, [r2, #0]
 8015cc6:	4553      	cmp	r3, sl
 8015cc8:	f040 812f 	bne.w	8015f2a <__ssvfiscanf_r+0x2e6>
 8015ccc:	6863      	ldr	r3, [r4, #4]
 8015cce:	3201      	adds	r2, #1
 8015cd0:	3b01      	subs	r3, #1
 8015cd2:	6022      	str	r2, [r4, #0]
 8015cd4:	6063      	str	r3, [r4, #4]
 8015cd6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015cd8:	3301      	adds	r3, #1
 8015cda:	9345      	str	r3, [sp, #276]	; 0x114
 8015cdc:	e7d8      	b.n	8015c90 <__ssvfiscanf_r+0x4c>
 8015cde:	9141      	str	r1, [sp, #260]	; 0x104
 8015ce0:	9143      	str	r1, [sp, #268]	; 0x10c
 8015ce2:	7853      	ldrb	r3, [r2, #1]
 8015ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8015ce6:	bf04      	itt	eq
 8015ce8:	2310      	moveq	r3, #16
 8015cea:	1c95      	addeq	r5, r2, #2
 8015cec:	f04f 020a 	mov.w	r2, #10
 8015cf0:	bf08      	it	eq
 8015cf2:	9341      	streq	r3, [sp, #260]	; 0x104
 8015cf4:	46aa      	mov	sl, r5
 8015cf6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8015cfa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015cfe:	2b09      	cmp	r3, #9
 8015d00:	d91c      	bls.n	8015d3c <__ssvfiscanf_r+0xf8>
 8015d02:	2203      	movs	r2, #3
 8015d04:	487d      	ldr	r0, [pc, #500]	; (8015efc <__ssvfiscanf_r+0x2b8>)
 8015d06:	f000 fad1 	bl	80162ac <memchr>
 8015d0a:	b138      	cbz	r0, 8015d1c <__ssvfiscanf_r+0xd8>
 8015d0c:	eba0 0009 	sub.w	r0, r0, r9
 8015d10:	2301      	movs	r3, #1
 8015d12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015d14:	4655      	mov	r5, sl
 8015d16:	4083      	lsls	r3, r0
 8015d18:	4313      	orrs	r3, r2
 8015d1a:	9341      	str	r3, [sp, #260]	; 0x104
 8015d1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015d20:	2b78      	cmp	r3, #120	; 0x78
 8015d22:	d806      	bhi.n	8015d32 <__ssvfiscanf_r+0xee>
 8015d24:	2b57      	cmp	r3, #87	; 0x57
 8015d26:	d810      	bhi.n	8015d4a <__ssvfiscanf_r+0x106>
 8015d28:	2b25      	cmp	r3, #37	; 0x25
 8015d2a:	d0c5      	beq.n	8015cb8 <__ssvfiscanf_r+0x74>
 8015d2c:	d856      	bhi.n	8015ddc <__ssvfiscanf_r+0x198>
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d064      	beq.n	8015dfc <__ssvfiscanf_r+0x1b8>
 8015d32:	2303      	movs	r3, #3
 8015d34:	9347      	str	r3, [sp, #284]	; 0x11c
 8015d36:	230a      	movs	r3, #10
 8015d38:	9342      	str	r3, [sp, #264]	; 0x108
 8015d3a:	e075      	b.n	8015e28 <__ssvfiscanf_r+0x1e4>
 8015d3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015d3e:	4655      	mov	r5, sl
 8015d40:	fb02 1103 	mla	r1, r2, r3, r1
 8015d44:	3930      	subs	r1, #48	; 0x30
 8015d46:	9143      	str	r1, [sp, #268]	; 0x10c
 8015d48:	e7d4      	b.n	8015cf4 <__ssvfiscanf_r+0xb0>
 8015d4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015d4e:	2a20      	cmp	r2, #32
 8015d50:	d8ef      	bhi.n	8015d32 <__ssvfiscanf_r+0xee>
 8015d52:	a101      	add	r1, pc, #4	; (adr r1, 8015d58 <__ssvfiscanf_r+0x114>)
 8015d54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015d58:	08015e0b 	.word	0x08015e0b
 8015d5c:	08015d33 	.word	0x08015d33
 8015d60:	08015d33 	.word	0x08015d33
 8015d64:	08015e69 	.word	0x08015e69
 8015d68:	08015d33 	.word	0x08015d33
 8015d6c:	08015d33 	.word	0x08015d33
 8015d70:	08015d33 	.word	0x08015d33
 8015d74:	08015d33 	.word	0x08015d33
 8015d78:	08015d33 	.word	0x08015d33
 8015d7c:	08015d33 	.word	0x08015d33
 8015d80:	08015d33 	.word	0x08015d33
 8015d84:	08015e7f 	.word	0x08015e7f
 8015d88:	08015e65 	.word	0x08015e65
 8015d8c:	08015de3 	.word	0x08015de3
 8015d90:	08015de3 	.word	0x08015de3
 8015d94:	08015de3 	.word	0x08015de3
 8015d98:	08015d33 	.word	0x08015d33
 8015d9c:	08015e21 	.word	0x08015e21
 8015da0:	08015d33 	.word	0x08015d33
 8015da4:	08015d33 	.word	0x08015d33
 8015da8:	08015d33 	.word	0x08015d33
 8015dac:	08015d33 	.word	0x08015d33
 8015db0:	08015e8f 	.word	0x08015e8f
 8015db4:	08015e5d 	.word	0x08015e5d
 8015db8:	08015e03 	.word	0x08015e03
 8015dbc:	08015d33 	.word	0x08015d33
 8015dc0:	08015d33 	.word	0x08015d33
 8015dc4:	08015e8b 	.word	0x08015e8b
 8015dc8:	08015d33 	.word	0x08015d33
 8015dcc:	08015e65 	.word	0x08015e65
 8015dd0:	08015d33 	.word	0x08015d33
 8015dd4:	08015d33 	.word	0x08015d33
 8015dd8:	08015e0b 	.word	0x08015e0b
 8015ddc:	3b45      	subs	r3, #69	; 0x45
 8015dde:	2b02      	cmp	r3, #2
 8015de0:	d8a7      	bhi.n	8015d32 <__ssvfiscanf_r+0xee>
 8015de2:	2305      	movs	r3, #5
 8015de4:	e01f      	b.n	8015e26 <__ssvfiscanf_r+0x1e2>
 8015de6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015de8:	4621      	mov	r1, r4
 8015dea:	4630      	mov	r0, r6
 8015dec:	4798      	blx	r3
 8015dee:	2800      	cmp	r0, #0
 8015df0:	f43f af67 	beq.w	8015cc2 <__ssvfiscanf_r+0x7e>
 8015df4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015df6:	2800      	cmp	r0, #0
 8015df8:	f040 808d 	bne.w	8015f16 <__ssvfiscanf_r+0x2d2>
 8015dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8015e00:	e08f      	b.n	8015f22 <__ssvfiscanf_r+0x2de>
 8015e02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015e04:	f042 0220 	orr.w	r2, r2, #32
 8015e08:	9241      	str	r2, [sp, #260]	; 0x104
 8015e0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015e10:	9241      	str	r2, [sp, #260]	; 0x104
 8015e12:	2210      	movs	r2, #16
 8015e14:	2b6f      	cmp	r3, #111	; 0x6f
 8015e16:	9242      	str	r2, [sp, #264]	; 0x108
 8015e18:	bf34      	ite	cc
 8015e1a:	2303      	movcc	r3, #3
 8015e1c:	2304      	movcs	r3, #4
 8015e1e:	e002      	b.n	8015e26 <__ssvfiscanf_r+0x1e2>
 8015e20:	2300      	movs	r3, #0
 8015e22:	9342      	str	r3, [sp, #264]	; 0x108
 8015e24:	2303      	movs	r3, #3
 8015e26:	9347      	str	r3, [sp, #284]	; 0x11c
 8015e28:	6863      	ldr	r3, [r4, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	dd3e      	ble.n	8015eac <__ssvfiscanf_r+0x268>
 8015e2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015e30:	0659      	lsls	r1, r3, #25
 8015e32:	d404      	bmi.n	8015e3e <__ssvfiscanf_r+0x1fa>
 8015e34:	6823      	ldr	r3, [r4, #0]
 8015e36:	781a      	ldrb	r2, [r3, #0]
 8015e38:	5cba      	ldrb	r2, [r7, r2]
 8015e3a:	0712      	lsls	r2, r2, #28
 8015e3c:	d43d      	bmi.n	8015eba <__ssvfiscanf_r+0x276>
 8015e3e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015e40:	2b02      	cmp	r3, #2
 8015e42:	dc4c      	bgt.n	8015ede <__ssvfiscanf_r+0x29a>
 8015e44:	466b      	mov	r3, sp
 8015e46:	4622      	mov	r2, r4
 8015e48:	a941      	add	r1, sp, #260	; 0x104
 8015e4a:	4630      	mov	r0, r6
 8015e4c:	f000 f872 	bl	8015f34 <_scanf_chars>
 8015e50:	2801      	cmp	r0, #1
 8015e52:	d06a      	beq.n	8015f2a <__ssvfiscanf_r+0x2e6>
 8015e54:	2802      	cmp	r0, #2
 8015e56:	f47f af1b 	bne.w	8015c90 <__ssvfiscanf_r+0x4c>
 8015e5a:	e7cb      	b.n	8015df4 <__ssvfiscanf_r+0x1b0>
 8015e5c:	2308      	movs	r3, #8
 8015e5e:	9342      	str	r3, [sp, #264]	; 0x108
 8015e60:	2304      	movs	r3, #4
 8015e62:	e7e0      	b.n	8015e26 <__ssvfiscanf_r+0x1e2>
 8015e64:	220a      	movs	r2, #10
 8015e66:	e7d5      	b.n	8015e14 <__ssvfiscanf_r+0x1d0>
 8015e68:	4629      	mov	r1, r5
 8015e6a:	4640      	mov	r0, r8
 8015e6c:	f000 f9ae 	bl	80161cc <__sccl>
 8015e70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015e72:	4605      	mov	r5, r0
 8015e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e78:	9341      	str	r3, [sp, #260]	; 0x104
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	e7d3      	b.n	8015e26 <__ssvfiscanf_r+0x1e2>
 8015e7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e84:	9341      	str	r3, [sp, #260]	; 0x104
 8015e86:	2300      	movs	r3, #0
 8015e88:	e7cd      	b.n	8015e26 <__ssvfiscanf_r+0x1e2>
 8015e8a:	2302      	movs	r3, #2
 8015e8c:	e7cb      	b.n	8015e26 <__ssvfiscanf_r+0x1e2>
 8015e8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015e90:	06c3      	lsls	r3, r0, #27
 8015e92:	f53f aefd 	bmi.w	8015c90 <__ssvfiscanf_r+0x4c>
 8015e96:	9b00      	ldr	r3, [sp, #0]
 8015e98:	07c0      	lsls	r0, r0, #31
 8015e9a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015e9c:	f103 0104 	add.w	r1, r3, #4
 8015ea0:	9100      	str	r1, [sp, #0]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	bf4c      	ite	mi
 8015ea6:	801a      	strhmi	r2, [r3, #0]
 8015ea8:	601a      	strpl	r2, [r3, #0]
 8015eaa:	e6f1      	b.n	8015c90 <__ssvfiscanf_r+0x4c>
 8015eac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015eae:	4621      	mov	r1, r4
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	4798      	blx	r3
 8015eb4:	2800      	cmp	r0, #0
 8015eb6:	d0ba      	beq.n	8015e2e <__ssvfiscanf_r+0x1ea>
 8015eb8:	e79c      	b.n	8015df4 <__ssvfiscanf_r+0x1b0>
 8015eba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015ebc:	3201      	adds	r2, #1
 8015ebe:	9245      	str	r2, [sp, #276]	; 0x114
 8015ec0:	6862      	ldr	r2, [r4, #4]
 8015ec2:	3a01      	subs	r2, #1
 8015ec4:	2a00      	cmp	r2, #0
 8015ec6:	6062      	str	r2, [r4, #4]
 8015ec8:	dd02      	ble.n	8015ed0 <__ssvfiscanf_r+0x28c>
 8015eca:	3301      	adds	r3, #1
 8015ecc:	6023      	str	r3, [r4, #0]
 8015ece:	e7b1      	b.n	8015e34 <__ssvfiscanf_r+0x1f0>
 8015ed0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015ed2:	4621      	mov	r1, r4
 8015ed4:	4630      	mov	r0, r6
 8015ed6:	4798      	blx	r3
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	d0ab      	beq.n	8015e34 <__ssvfiscanf_r+0x1f0>
 8015edc:	e78a      	b.n	8015df4 <__ssvfiscanf_r+0x1b0>
 8015ede:	2b04      	cmp	r3, #4
 8015ee0:	dc0e      	bgt.n	8015f00 <__ssvfiscanf_r+0x2bc>
 8015ee2:	466b      	mov	r3, sp
 8015ee4:	4622      	mov	r2, r4
 8015ee6:	a941      	add	r1, sp, #260	; 0x104
 8015ee8:	4630      	mov	r0, r6
 8015eea:	f000 f87d 	bl	8015fe8 <_scanf_i>
 8015eee:	e7af      	b.n	8015e50 <__ssvfiscanf_r+0x20c>
 8015ef0:	08016788 	.word	0x08016788
 8015ef4:	08015b91 	.word	0x08015b91
 8015ef8:	08015c0b 	.word	0x08015c0b
 8015efc:	08016768 	.word	0x08016768
 8015f00:	4b0b      	ldr	r3, [pc, #44]	; (8015f30 <__ssvfiscanf_r+0x2ec>)
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	f43f aec4 	beq.w	8015c90 <__ssvfiscanf_r+0x4c>
 8015f08:	466b      	mov	r3, sp
 8015f0a:	4622      	mov	r2, r4
 8015f0c:	a941      	add	r1, sp, #260	; 0x104
 8015f0e:	4630      	mov	r0, r6
 8015f10:	f3af 8000 	nop.w
 8015f14:	e79c      	b.n	8015e50 <__ssvfiscanf_r+0x20c>
 8015f16:	89a3      	ldrh	r3, [r4, #12]
 8015f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015f1c:	bf18      	it	ne
 8015f1e:	f04f 30ff 	movne.w	r0, #4294967295
 8015f22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8015f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015f2c:	e7f9      	b.n	8015f22 <__ssvfiscanf_r+0x2de>
 8015f2e:	bf00      	nop
 8015f30:	00000000 	.word	0x00000000

08015f34 <_scanf_chars>:
 8015f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f38:	4615      	mov	r5, r2
 8015f3a:	688a      	ldr	r2, [r1, #8]
 8015f3c:	4680      	mov	r8, r0
 8015f3e:	460c      	mov	r4, r1
 8015f40:	b932      	cbnz	r2, 8015f50 <_scanf_chars+0x1c>
 8015f42:	698a      	ldr	r2, [r1, #24]
 8015f44:	2a00      	cmp	r2, #0
 8015f46:	bf0c      	ite	eq
 8015f48:	2201      	moveq	r2, #1
 8015f4a:	f04f 32ff 	movne.w	r2, #4294967295
 8015f4e:	608a      	str	r2, [r1, #8]
 8015f50:	6822      	ldr	r2, [r4, #0]
 8015f52:	2700      	movs	r7, #0
 8015f54:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8015fe4 <_scanf_chars+0xb0>
 8015f58:	06d1      	lsls	r1, r2, #27
 8015f5a:	bf5f      	itttt	pl
 8015f5c:	681a      	ldrpl	r2, [r3, #0]
 8015f5e:	1d11      	addpl	r1, r2, #4
 8015f60:	6019      	strpl	r1, [r3, #0]
 8015f62:	6816      	ldrpl	r6, [r2, #0]
 8015f64:	69a0      	ldr	r0, [r4, #24]
 8015f66:	b188      	cbz	r0, 8015f8c <_scanf_chars+0x58>
 8015f68:	2801      	cmp	r0, #1
 8015f6a:	d107      	bne.n	8015f7c <_scanf_chars+0x48>
 8015f6c:	682a      	ldr	r2, [r5, #0]
 8015f6e:	7811      	ldrb	r1, [r2, #0]
 8015f70:	6962      	ldr	r2, [r4, #20]
 8015f72:	5c52      	ldrb	r2, [r2, r1]
 8015f74:	b952      	cbnz	r2, 8015f8c <_scanf_chars+0x58>
 8015f76:	2f00      	cmp	r7, #0
 8015f78:	d031      	beq.n	8015fde <_scanf_chars+0xaa>
 8015f7a:	e022      	b.n	8015fc2 <_scanf_chars+0x8e>
 8015f7c:	2802      	cmp	r0, #2
 8015f7e:	d120      	bne.n	8015fc2 <_scanf_chars+0x8e>
 8015f80:	682b      	ldr	r3, [r5, #0]
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015f88:	071b      	lsls	r3, r3, #28
 8015f8a:	d41a      	bmi.n	8015fc2 <_scanf_chars+0x8e>
 8015f8c:	6823      	ldr	r3, [r4, #0]
 8015f8e:	3701      	adds	r7, #1
 8015f90:	06da      	lsls	r2, r3, #27
 8015f92:	bf5e      	ittt	pl
 8015f94:	682b      	ldrpl	r3, [r5, #0]
 8015f96:	781b      	ldrbpl	r3, [r3, #0]
 8015f98:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015f9c:	682a      	ldr	r2, [r5, #0]
 8015f9e:	686b      	ldr	r3, [r5, #4]
 8015fa0:	3201      	adds	r2, #1
 8015fa2:	3b01      	subs	r3, #1
 8015fa4:	602a      	str	r2, [r5, #0]
 8015fa6:	68a2      	ldr	r2, [r4, #8]
 8015fa8:	606b      	str	r3, [r5, #4]
 8015faa:	3a01      	subs	r2, #1
 8015fac:	60a2      	str	r2, [r4, #8]
 8015fae:	b142      	cbz	r2, 8015fc2 <_scanf_chars+0x8e>
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	dcd7      	bgt.n	8015f64 <_scanf_chars+0x30>
 8015fb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015fb8:	4629      	mov	r1, r5
 8015fba:	4640      	mov	r0, r8
 8015fbc:	4798      	blx	r3
 8015fbe:	2800      	cmp	r0, #0
 8015fc0:	d0d0      	beq.n	8015f64 <_scanf_chars+0x30>
 8015fc2:	6823      	ldr	r3, [r4, #0]
 8015fc4:	f013 0310 	ands.w	r3, r3, #16
 8015fc8:	d105      	bne.n	8015fd6 <_scanf_chars+0xa2>
 8015fca:	68e2      	ldr	r2, [r4, #12]
 8015fcc:	3201      	adds	r2, #1
 8015fce:	60e2      	str	r2, [r4, #12]
 8015fd0:	69a2      	ldr	r2, [r4, #24]
 8015fd2:	b102      	cbz	r2, 8015fd6 <_scanf_chars+0xa2>
 8015fd4:	7033      	strb	r3, [r6, #0]
 8015fd6:	6923      	ldr	r3, [r4, #16]
 8015fd8:	2000      	movs	r0, #0
 8015fda:	443b      	add	r3, r7
 8015fdc:	6123      	str	r3, [r4, #16]
 8015fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fe2:	bf00      	nop
 8015fe4:	08016788 	.word	0x08016788

08015fe8 <_scanf_i>:
 8015fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fec:	4698      	mov	r8, r3
 8015fee:	b087      	sub	sp, #28
 8015ff0:	4b72      	ldr	r3, [pc, #456]	; (80161bc <_scanf_i+0x1d4>)
 8015ff2:	460c      	mov	r4, r1
 8015ff4:	4682      	mov	sl, r0
 8015ff6:	4616      	mov	r6, r2
 8015ff8:	4627      	mov	r7, r4
 8015ffa:	f04f 0b00 	mov.w	fp, #0
 8015ffe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016002:	ab03      	add	r3, sp, #12
 8016004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016008:	4b6d      	ldr	r3, [pc, #436]	; (80161c0 <_scanf_i+0x1d8>)
 801600a:	69a1      	ldr	r1, [r4, #24]
 801600c:	4a6d      	ldr	r2, [pc, #436]	; (80161c4 <_scanf_i+0x1dc>)
 801600e:	2903      	cmp	r1, #3
 8016010:	bf18      	it	ne
 8016012:	461a      	movne	r2, r3
 8016014:	68a3      	ldr	r3, [r4, #8]
 8016016:	9201      	str	r2, [sp, #4]
 8016018:	1e5a      	subs	r2, r3, #1
 801601a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801601e:	bf89      	itett	hi
 8016020:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016024:	f04f 0900 	movls.w	r9, #0
 8016028:	eb03 0905 	addhi.w	r9, r3, r5
 801602c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016030:	bf88      	it	hi
 8016032:	60a3      	strhi	r3, [r4, #8]
 8016034:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016038:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801603c:	463d      	mov	r5, r7
 801603e:	6023      	str	r3, [r4, #0]
 8016040:	6831      	ldr	r1, [r6, #0]
 8016042:	ab03      	add	r3, sp, #12
 8016044:	2202      	movs	r2, #2
 8016046:	7809      	ldrb	r1, [r1, #0]
 8016048:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801604c:	f000 f92e 	bl	80162ac <memchr>
 8016050:	b328      	cbz	r0, 801609e <_scanf_i+0xb6>
 8016052:	f1bb 0f01 	cmp.w	fp, #1
 8016056:	d159      	bne.n	801610c <_scanf_i+0x124>
 8016058:	6862      	ldr	r2, [r4, #4]
 801605a:	b92a      	cbnz	r2, 8016068 <_scanf_i+0x80>
 801605c:	6822      	ldr	r2, [r4, #0]
 801605e:	2308      	movs	r3, #8
 8016060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016064:	6063      	str	r3, [r4, #4]
 8016066:	6022      	str	r2, [r4, #0]
 8016068:	6822      	ldr	r2, [r4, #0]
 801606a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801606e:	6022      	str	r2, [r4, #0]
 8016070:	68a2      	ldr	r2, [r4, #8]
 8016072:	1e51      	subs	r1, r2, #1
 8016074:	60a1      	str	r1, [r4, #8]
 8016076:	b192      	cbz	r2, 801609e <_scanf_i+0xb6>
 8016078:	6832      	ldr	r2, [r6, #0]
 801607a:	1c51      	adds	r1, r2, #1
 801607c:	6031      	str	r1, [r6, #0]
 801607e:	7812      	ldrb	r2, [r2, #0]
 8016080:	f805 2b01 	strb.w	r2, [r5], #1
 8016084:	6872      	ldr	r2, [r6, #4]
 8016086:	3a01      	subs	r2, #1
 8016088:	2a00      	cmp	r2, #0
 801608a:	6072      	str	r2, [r6, #4]
 801608c:	dc07      	bgt.n	801609e <_scanf_i+0xb6>
 801608e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016092:	4631      	mov	r1, r6
 8016094:	4650      	mov	r0, sl
 8016096:	4790      	blx	r2
 8016098:	2800      	cmp	r0, #0
 801609a:	f040 8085 	bne.w	80161a8 <_scanf_i+0x1c0>
 801609e:	f10b 0b01 	add.w	fp, fp, #1
 80160a2:	f1bb 0f03 	cmp.w	fp, #3
 80160a6:	d1cb      	bne.n	8016040 <_scanf_i+0x58>
 80160a8:	6863      	ldr	r3, [r4, #4]
 80160aa:	b90b      	cbnz	r3, 80160b0 <_scanf_i+0xc8>
 80160ac:	230a      	movs	r3, #10
 80160ae:	6063      	str	r3, [r4, #4]
 80160b0:	6863      	ldr	r3, [r4, #4]
 80160b2:	f04f 0b00 	mov.w	fp, #0
 80160b6:	4944      	ldr	r1, [pc, #272]	; (80161c8 <_scanf_i+0x1e0>)
 80160b8:	6960      	ldr	r0, [r4, #20]
 80160ba:	1ac9      	subs	r1, r1, r3
 80160bc:	f000 f886 	bl	80161cc <__sccl>
 80160c0:	68a3      	ldr	r3, [r4, #8]
 80160c2:	6822      	ldr	r2, [r4, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d03d      	beq.n	8016144 <_scanf_i+0x15c>
 80160c8:	6831      	ldr	r1, [r6, #0]
 80160ca:	6960      	ldr	r0, [r4, #20]
 80160cc:	f891 c000 	ldrb.w	ip, [r1]
 80160d0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80160d4:	2800      	cmp	r0, #0
 80160d6:	d035      	beq.n	8016144 <_scanf_i+0x15c>
 80160d8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80160dc:	d124      	bne.n	8016128 <_scanf_i+0x140>
 80160de:	0510      	lsls	r0, r2, #20
 80160e0:	d522      	bpl.n	8016128 <_scanf_i+0x140>
 80160e2:	f10b 0b01 	add.w	fp, fp, #1
 80160e6:	f1b9 0f00 	cmp.w	r9, #0
 80160ea:	d003      	beq.n	80160f4 <_scanf_i+0x10c>
 80160ec:	3301      	adds	r3, #1
 80160ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80160f2:	60a3      	str	r3, [r4, #8]
 80160f4:	6873      	ldr	r3, [r6, #4]
 80160f6:	3b01      	subs	r3, #1
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	6073      	str	r3, [r6, #4]
 80160fc:	dd1b      	ble.n	8016136 <_scanf_i+0x14e>
 80160fe:	6833      	ldr	r3, [r6, #0]
 8016100:	3301      	adds	r3, #1
 8016102:	6033      	str	r3, [r6, #0]
 8016104:	68a3      	ldr	r3, [r4, #8]
 8016106:	3b01      	subs	r3, #1
 8016108:	60a3      	str	r3, [r4, #8]
 801610a:	e7d9      	b.n	80160c0 <_scanf_i+0xd8>
 801610c:	f1bb 0f02 	cmp.w	fp, #2
 8016110:	d1ae      	bne.n	8016070 <_scanf_i+0x88>
 8016112:	6822      	ldr	r2, [r4, #0]
 8016114:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016118:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801611c:	d1bf      	bne.n	801609e <_scanf_i+0xb6>
 801611e:	2310      	movs	r3, #16
 8016120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016124:	6063      	str	r3, [r4, #4]
 8016126:	e7a2      	b.n	801606e <_scanf_i+0x86>
 8016128:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801612c:	6022      	str	r2, [r4, #0]
 801612e:	780b      	ldrb	r3, [r1, #0]
 8016130:	f805 3b01 	strb.w	r3, [r5], #1
 8016134:	e7de      	b.n	80160f4 <_scanf_i+0x10c>
 8016136:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801613a:	4631      	mov	r1, r6
 801613c:	4650      	mov	r0, sl
 801613e:	4798      	blx	r3
 8016140:	2800      	cmp	r0, #0
 8016142:	d0df      	beq.n	8016104 <_scanf_i+0x11c>
 8016144:	6823      	ldr	r3, [r4, #0]
 8016146:	05d9      	lsls	r1, r3, #23
 8016148:	d50d      	bpl.n	8016166 <_scanf_i+0x17e>
 801614a:	42bd      	cmp	r5, r7
 801614c:	d909      	bls.n	8016162 <_scanf_i+0x17a>
 801614e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016152:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801615a:	4632      	mov	r2, r6
 801615c:	464d      	mov	r5, r9
 801615e:	4650      	mov	r0, sl
 8016160:	4798      	blx	r3
 8016162:	42bd      	cmp	r5, r7
 8016164:	d028      	beq.n	80161b8 <_scanf_i+0x1d0>
 8016166:	6822      	ldr	r2, [r4, #0]
 8016168:	f012 0210 	ands.w	r2, r2, #16
 801616c:	d113      	bne.n	8016196 <_scanf_i+0x1ae>
 801616e:	702a      	strb	r2, [r5, #0]
 8016170:	4639      	mov	r1, r7
 8016172:	6863      	ldr	r3, [r4, #4]
 8016174:	4650      	mov	r0, sl
 8016176:	9e01      	ldr	r6, [sp, #4]
 8016178:	47b0      	blx	r6
 801617a:	f8d8 3000 	ldr.w	r3, [r8]
 801617e:	6821      	ldr	r1, [r4, #0]
 8016180:	1d1a      	adds	r2, r3, #4
 8016182:	f011 0f20 	tst.w	r1, #32
 8016186:	f8c8 2000 	str.w	r2, [r8]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	d00f      	beq.n	80161ae <_scanf_i+0x1c6>
 801618e:	6018      	str	r0, [r3, #0]
 8016190:	68e3      	ldr	r3, [r4, #12]
 8016192:	3301      	adds	r3, #1
 8016194:	60e3      	str	r3, [r4, #12]
 8016196:	1bed      	subs	r5, r5, r7
 8016198:	6923      	ldr	r3, [r4, #16]
 801619a:	2000      	movs	r0, #0
 801619c:	445d      	add	r5, fp
 801619e:	442b      	add	r3, r5
 80161a0:	6123      	str	r3, [r4, #16]
 80161a2:	b007      	add	sp, #28
 80161a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a8:	f04f 0b00 	mov.w	fp, #0
 80161ac:	e7ca      	b.n	8016144 <_scanf_i+0x15c>
 80161ae:	07ca      	lsls	r2, r1, #31
 80161b0:	bf4c      	ite	mi
 80161b2:	8018      	strhmi	r0, [r3, #0]
 80161b4:	6018      	strpl	r0, [r3, #0]
 80161b6:	e7eb      	b.n	8016190 <_scanf_i+0x1a8>
 80161b8:	2001      	movs	r0, #1
 80161ba:	e7f2      	b.n	80161a2 <_scanf_i+0x1ba>
 80161bc:	0801665c 	.word	0x0801665c
 80161c0:	08016515 	.word	0x08016515
 80161c4:	0801642d 	.word	0x0801642d
 80161c8:	0801677c 	.word	0x0801677c

080161cc <__sccl>:
 80161cc:	b570      	push	{r4, r5, r6, lr}
 80161ce:	780b      	ldrb	r3, [r1, #0]
 80161d0:	4604      	mov	r4, r0
 80161d2:	3801      	subs	r0, #1
 80161d4:	2b5e      	cmp	r3, #94	; 0x5e
 80161d6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80161da:	bf13      	iteet	ne
 80161dc:	1c4a      	addne	r2, r1, #1
 80161de:	1c8a      	addeq	r2, r1, #2
 80161e0:	784b      	ldrbeq	r3, [r1, #1]
 80161e2:	2100      	movne	r1, #0
 80161e4:	bf08      	it	eq
 80161e6:	2101      	moveq	r1, #1
 80161e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80161ec:	42a8      	cmp	r0, r5
 80161ee:	d1fb      	bne.n	80161e8 <__sccl+0x1c>
 80161f0:	b90b      	cbnz	r3, 80161f6 <__sccl+0x2a>
 80161f2:	1e50      	subs	r0, r2, #1
 80161f4:	bd70      	pop	{r4, r5, r6, pc}
 80161f6:	f081 0101 	eor.w	r1, r1, #1
 80161fa:	4610      	mov	r0, r2
 80161fc:	54e1      	strb	r1, [r4, r3]
 80161fe:	4602      	mov	r2, r0
 8016200:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016204:	2d2d      	cmp	r5, #45	; 0x2d
 8016206:	d005      	beq.n	8016214 <__sccl+0x48>
 8016208:	2d5d      	cmp	r5, #93	; 0x5d
 801620a:	d016      	beq.n	801623a <__sccl+0x6e>
 801620c:	2d00      	cmp	r5, #0
 801620e:	d0f1      	beq.n	80161f4 <__sccl+0x28>
 8016210:	462b      	mov	r3, r5
 8016212:	e7f2      	b.n	80161fa <__sccl+0x2e>
 8016214:	7846      	ldrb	r6, [r0, #1]
 8016216:	2e5d      	cmp	r6, #93	; 0x5d
 8016218:	d0fa      	beq.n	8016210 <__sccl+0x44>
 801621a:	42b3      	cmp	r3, r6
 801621c:	dcf8      	bgt.n	8016210 <__sccl+0x44>
 801621e:	3002      	adds	r0, #2
 8016220:	461a      	mov	r2, r3
 8016222:	3201      	adds	r2, #1
 8016224:	4296      	cmp	r6, r2
 8016226:	54a1      	strb	r1, [r4, r2]
 8016228:	dcfb      	bgt.n	8016222 <__sccl+0x56>
 801622a:	1af2      	subs	r2, r6, r3
 801622c:	1c5d      	adds	r5, r3, #1
 801622e:	3a01      	subs	r2, #1
 8016230:	42b3      	cmp	r3, r6
 8016232:	bfa8      	it	ge
 8016234:	2200      	movge	r2, #0
 8016236:	18ab      	adds	r3, r5, r2
 8016238:	e7e1      	b.n	80161fe <__sccl+0x32>
 801623a:	4610      	mov	r0, r2
 801623c:	e7da      	b.n	80161f4 <__sccl+0x28>

0801623e <__submore>:
 801623e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016242:	460c      	mov	r4, r1
 8016244:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801624a:	4299      	cmp	r1, r3
 801624c:	d11a      	bne.n	8016284 <__submore+0x46>
 801624e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016252:	f7ff fae7 	bl	8015824 <_malloc_r>
 8016256:	b918      	cbnz	r0, 8016260 <__submore+0x22>
 8016258:	f04f 30ff 	mov.w	r0, #4294967295
 801625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016264:	6360      	str	r0, [r4, #52]	; 0x34
 8016266:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801626a:	63a3      	str	r3, [r4, #56]	; 0x38
 801626c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016270:	7083      	strb	r3, [r0, #2]
 8016272:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016276:	7043      	strb	r3, [r0, #1]
 8016278:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801627c:	7003      	strb	r3, [r0, #0]
 801627e:	6020      	str	r0, [r4, #0]
 8016280:	2000      	movs	r0, #0
 8016282:	e7eb      	b.n	801625c <__submore+0x1e>
 8016284:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016286:	0077      	lsls	r7, r6, #1
 8016288:	463a      	mov	r2, r7
 801628a:	f000 f81d 	bl	80162c8 <_realloc_r>
 801628e:	4605      	mov	r5, r0
 8016290:	2800      	cmp	r0, #0
 8016292:	d0e1      	beq.n	8016258 <__submore+0x1a>
 8016294:	eb00 0806 	add.w	r8, r0, r6
 8016298:	4601      	mov	r1, r0
 801629a:	4632      	mov	r2, r6
 801629c:	4640      	mov	r0, r8
 801629e:	f7ff fc1d 	bl	8015adc <memcpy>
 80162a2:	f8c4 8000 	str.w	r8, [r4]
 80162a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80162aa:	e7e9      	b.n	8016280 <__submore+0x42>

080162ac <memchr>:
 80162ac:	b2c9      	uxtb	r1, r1
 80162ae:	4402      	add	r2, r0
 80162b0:	b510      	push	{r4, lr}
 80162b2:	4290      	cmp	r0, r2
 80162b4:	4603      	mov	r3, r0
 80162b6:	d101      	bne.n	80162bc <memchr+0x10>
 80162b8:	2300      	movs	r3, #0
 80162ba:	e003      	b.n	80162c4 <memchr+0x18>
 80162bc:	781c      	ldrb	r4, [r3, #0]
 80162be:	3001      	adds	r0, #1
 80162c0:	428c      	cmp	r4, r1
 80162c2:	d1f6      	bne.n	80162b2 <memchr+0x6>
 80162c4:	4618      	mov	r0, r3
 80162c6:	bd10      	pop	{r4, pc}

080162c8 <_realloc_r>:
 80162c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162cc:	4680      	mov	r8, r0
 80162ce:	4614      	mov	r4, r2
 80162d0:	460e      	mov	r6, r1
 80162d2:	b921      	cbnz	r1, 80162de <_realloc_r+0x16>
 80162d4:	4611      	mov	r1, r2
 80162d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162da:	f7ff baa3 	b.w	8015824 <_malloc_r>
 80162de:	b92a      	cbnz	r2, 80162ec <_realloc_r+0x24>
 80162e0:	4625      	mov	r5, r4
 80162e2:	f7ff fc09 	bl	8015af8 <_free_r>
 80162e6:	4628      	mov	r0, r5
 80162e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ec:	f000 f914 	bl	8016518 <_malloc_usable_size_r>
 80162f0:	4284      	cmp	r4, r0
 80162f2:	4607      	mov	r7, r0
 80162f4:	d802      	bhi.n	80162fc <_realloc_r+0x34>
 80162f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80162fa:	d812      	bhi.n	8016322 <_realloc_r+0x5a>
 80162fc:	4621      	mov	r1, r4
 80162fe:	4640      	mov	r0, r8
 8016300:	f7ff fa90 	bl	8015824 <_malloc_r>
 8016304:	4605      	mov	r5, r0
 8016306:	2800      	cmp	r0, #0
 8016308:	d0ed      	beq.n	80162e6 <_realloc_r+0x1e>
 801630a:	42bc      	cmp	r4, r7
 801630c:	4622      	mov	r2, r4
 801630e:	4631      	mov	r1, r6
 8016310:	bf28      	it	cs
 8016312:	463a      	movcs	r2, r7
 8016314:	f7ff fbe2 	bl	8015adc <memcpy>
 8016318:	4631      	mov	r1, r6
 801631a:	4640      	mov	r0, r8
 801631c:	f7ff fbec 	bl	8015af8 <_free_r>
 8016320:	e7e1      	b.n	80162e6 <_realloc_r+0x1e>
 8016322:	4635      	mov	r5, r6
 8016324:	e7df      	b.n	80162e6 <_realloc_r+0x1e>
	...

08016328 <_strtol_l.constprop.0>:
 8016328:	2b01      	cmp	r3, #1
 801632a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801632e:	d001      	beq.n	8016334 <_strtol_l.constprop.0+0xc>
 8016330:	2b24      	cmp	r3, #36	; 0x24
 8016332:	d906      	bls.n	8016342 <_strtol_l.constprop.0+0x1a>
 8016334:	f7ff fba6 	bl	8015a84 <__errno>
 8016338:	2316      	movs	r3, #22
 801633a:	6003      	str	r3, [r0, #0]
 801633c:	2000      	movs	r0, #0
 801633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016342:	460d      	mov	r5, r1
 8016344:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8016428 <_strtol_l.constprop.0+0x100>
 8016348:	462e      	mov	r6, r5
 801634a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801634e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016352:	f017 0708 	ands.w	r7, r7, #8
 8016356:	d1f7      	bne.n	8016348 <_strtol_l.constprop.0+0x20>
 8016358:	2c2d      	cmp	r4, #45	; 0x2d
 801635a:	d132      	bne.n	80163c2 <_strtol_l.constprop.0+0x9a>
 801635c:	782c      	ldrb	r4, [r5, #0]
 801635e:	2701      	movs	r7, #1
 8016360:	1cb5      	adds	r5, r6, #2
 8016362:	2b00      	cmp	r3, #0
 8016364:	d05b      	beq.n	801641e <_strtol_l.constprop.0+0xf6>
 8016366:	2b10      	cmp	r3, #16
 8016368:	d109      	bne.n	801637e <_strtol_l.constprop.0+0x56>
 801636a:	2c30      	cmp	r4, #48	; 0x30
 801636c:	d107      	bne.n	801637e <_strtol_l.constprop.0+0x56>
 801636e:	782c      	ldrb	r4, [r5, #0]
 8016370:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016374:	2c58      	cmp	r4, #88	; 0x58
 8016376:	d14d      	bne.n	8016414 <_strtol_l.constprop.0+0xec>
 8016378:	786c      	ldrb	r4, [r5, #1]
 801637a:	2310      	movs	r3, #16
 801637c:	3502      	adds	r5, #2
 801637e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016382:	f04f 0e00 	mov.w	lr, #0
 8016386:	f108 38ff 	add.w	r8, r8, #4294967295
 801638a:	4676      	mov	r6, lr
 801638c:	fbb8 f9f3 	udiv	r9, r8, r3
 8016390:	fb03 8a19 	mls	sl, r3, r9, r8
 8016394:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016398:	f1bc 0f09 	cmp.w	ip, #9
 801639c:	d816      	bhi.n	80163cc <_strtol_l.constprop.0+0xa4>
 801639e:	4664      	mov	r4, ip
 80163a0:	42a3      	cmp	r3, r4
 80163a2:	dd24      	ble.n	80163ee <_strtol_l.constprop.0+0xc6>
 80163a4:	f1be 3fff 	cmp.w	lr, #4294967295
 80163a8:	d008      	beq.n	80163bc <_strtol_l.constprop.0+0x94>
 80163aa:	45b1      	cmp	r9, r6
 80163ac:	d31c      	bcc.n	80163e8 <_strtol_l.constprop.0+0xc0>
 80163ae:	d101      	bne.n	80163b4 <_strtol_l.constprop.0+0x8c>
 80163b0:	45a2      	cmp	sl, r4
 80163b2:	db19      	blt.n	80163e8 <_strtol_l.constprop.0+0xc0>
 80163b4:	fb06 4603 	mla	r6, r6, r3, r4
 80163b8:	f04f 0e01 	mov.w	lr, #1
 80163bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163c0:	e7e8      	b.n	8016394 <_strtol_l.constprop.0+0x6c>
 80163c2:	2c2b      	cmp	r4, #43	; 0x2b
 80163c4:	bf04      	itt	eq
 80163c6:	782c      	ldrbeq	r4, [r5, #0]
 80163c8:	1cb5      	addeq	r5, r6, #2
 80163ca:	e7ca      	b.n	8016362 <_strtol_l.constprop.0+0x3a>
 80163cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80163d0:	f1bc 0f19 	cmp.w	ip, #25
 80163d4:	d801      	bhi.n	80163da <_strtol_l.constprop.0+0xb2>
 80163d6:	3c37      	subs	r4, #55	; 0x37
 80163d8:	e7e2      	b.n	80163a0 <_strtol_l.constprop.0+0x78>
 80163da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80163de:	f1bc 0f19 	cmp.w	ip, #25
 80163e2:	d804      	bhi.n	80163ee <_strtol_l.constprop.0+0xc6>
 80163e4:	3c57      	subs	r4, #87	; 0x57
 80163e6:	e7db      	b.n	80163a0 <_strtol_l.constprop.0+0x78>
 80163e8:	f04f 3eff 	mov.w	lr, #4294967295
 80163ec:	e7e6      	b.n	80163bc <_strtol_l.constprop.0+0x94>
 80163ee:	f1be 3fff 	cmp.w	lr, #4294967295
 80163f2:	d105      	bne.n	8016400 <_strtol_l.constprop.0+0xd8>
 80163f4:	2322      	movs	r3, #34	; 0x22
 80163f6:	4646      	mov	r6, r8
 80163f8:	6003      	str	r3, [r0, #0]
 80163fa:	b942      	cbnz	r2, 801640e <_strtol_l.constprop.0+0xe6>
 80163fc:	4630      	mov	r0, r6
 80163fe:	e79e      	b.n	801633e <_strtol_l.constprop.0+0x16>
 8016400:	b107      	cbz	r7, 8016404 <_strtol_l.constprop.0+0xdc>
 8016402:	4276      	negs	r6, r6
 8016404:	2a00      	cmp	r2, #0
 8016406:	d0f9      	beq.n	80163fc <_strtol_l.constprop.0+0xd4>
 8016408:	f1be 0f00 	cmp.w	lr, #0
 801640c:	d000      	beq.n	8016410 <_strtol_l.constprop.0+0xe8>
 801640e:	1e69      	subs	r1, r5, #1
 8016410:	6011      	str	r1, [r2, #0]
 8016412:	e7f3      	b.n	80163fc <_strtol_l.constprop.0+0xd4>
 8016414:	2430      	movs	r4, #48	; 0x30
 8016416:	2b00      	cmp	r3, #0
 8016418:	d1b1      	bne.n	801637e <_strtol_l.constprop.0+0x56>
 801641a:	2308      	movs	r3, #8
 801641c:	e7af      	b.n	801637e <_strtol_l.constprop.0+0x56>
 801641e:	2c30      	cmp	r4, #48	; 0x30
 8016420:	d0a5      	beq.n	801636e <_strtol_l.constprop.0+0x46>
 8016422:	230a      	movs	r3, #10
 8016424:	e7ab      	b.n	801637e <_strtol_l.constprop.0+0x56>
 8016426:	bf00      	nop
 8016428:	08016788 	.word	0x08016788

0801642c <_strtol_r>:
 801642c:	f7ff bf7c 	b.w	8016328 <_strtol_l.constprop.0>

08016430 <_strtoul_l.constprop.0>:
 8016430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016434:	4686      	mov	lr, r0
 8016436:	460d      	mov	r5, r1
 8016438:	4f35      	ldr	r7, [pc, #212]	; (8016510 <_strtoul_l.constprop.0+0xe0>)
 801643a:	4628      	mov	r0, r5
 801643c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016440:	5d3e      	ldrb	r6, [r7, r4]
 8016442:	f016 0608 	ands.w	r6, r6, #8
 8016446:	d1f8      	bne.n	801643a <_strtoul_l.constprop.0+0xa>
 8016448:	2c2d      	cmp	r4, #45	; 0x2d
 801644a:	d130      	bne.n	80164ae <_strtoul_l.constprop.0+0x7e>
 801644c:	782c      	ldrb	r4, [r5, #0]
 801644e:	2601      	movs	r6, #1
 8016450:	1c85      	adds	r5, r0, #2
 8016452:	2b00      	cmp	r3, #0
 8016454:	d057      	beq.n	8016506 <_strtoul_l.constprop.0+0xd6>
 8016456:	2b10      	cmp	r3, #16
 8016458:	d109      	bne.n	801646e <_strtoul_l.constprop.0+0x3e>
 801645a:	2c30      	cmp	r4, #48	; 0x30
 801645c:	d107      	bne.n	801646e <_strtoul_l.constprop.0+0x3e>
 801645e:	7828      	ldrb	r0, [r5, #0]
 8016460:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016464:	2858      	cmp	r0, #88	; 0x58
 8016466:	d149      	bne.n	80164fc <_strtoul_l.constprop.0+0xcc>
 8016468:	786c      	ldrb	r4, [r5, #1]
 801646a:	2310      	movs	r3, #16
 801646c:	3502      	adds	r5, #2
 801646e:	f04f 38ff 	mov.w	r8, #4294967295
 8016472:	2700      	movs	r7, #0
 8016474:	fbb8 f8f3 	udiv	r8, r8, r3
 8016478:	fb03 f908 	mul.w	r9, r3, r8
 801647c:	4638      	mov	r0, r7
 801647e:	ea6f 0909 	mvn.w	r9, r9
 8016482:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016486:	f1bc 0f09 	cmp.w	ip, #9
 801648a:	d815      	bhi.n	80164b8 <_strtoul_l.constprop.0+0x88>
 801648c:	4664      	mov	r4, ip
 801648e:	42a3      	cmp	r3, r4
 8016490:	dd23      	ble.n	80164da <_strtoul_l.constprop.0+0xaa>
 8016492:	f1b7 3fff 	cmp.w	r7, #4294967295
 8016496:	d007      	beq.n	80164a8 <_strtoul_l.constprop.0+0x78>
 8016498:	4580      	cmp	r8, r0
 801649a:	d31b      	bcc.n	80164d4 <_strtoul_l.constprop.0+0xa4>
 801649c:	d101      	bne.n	80164a2 <_strtoul_l.constprop.0+0x72>
 801649e:	45a1      	cmp	r9, r4
 80164a0:	db18      	blt.n	80164d4 <_strtoul_l.constprop.0+0xa4>
 80164a2:	fb00 4003 	mla	r0, r0, r3, r4
 80164a6:	2701      	movs	r7, #1
 80164a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164ac:	e7e9      	b.n	8016482 <_strtoul_l.constprop.0+0x52>
 80164ae:	2c2b      	cmp	r4, #43	; 0x2b
 80164b0:	bf04      	itt	eq
 80164b2:	782c      	ldrbeq	r4, [r5, #0]
 80164b4:	1c85      	addeq	r5, r0, #2
 80164b6:	e7cc      	b.n	8016452 <_strtoul_l.constprop.0+0x22>
 80164b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80164bc:	f1bc 0f19 	cmp.w	ip, #25
 80164c0:	d801      	bhi.n	80164c6 <_strtoul_l.constprop.0+0x96>
 80164c2:	3c37      	subs	r4, #55	; 0x37
 80164c4:	e7e3      	b.n	801648e <_strtoul_l.constprop.0+0x5e>
 80164c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80164ca:	f1bc 0f19 	cmp.w	ip, #25
 80164ce:	d804      	bhi.n	80164da <_strtoul_l.constprop.0+0xaa>
 80164d0:	3c57      	subs	r4, #87	; 0x57
 80164d2:	e7dc      	b.n	801648e <_strtoul_l.constprop.0+0x5e>
 80164d4:	f04f 37ff 	mov.w	r7, #4294967295
 80164d8:	e7e6      	b.n	80164a8 <_strtoul_l.constprop.0+0x78>
 80164da:	1c7b      	adds	r3, r7, #1
 80164dc:	d106      	bne.n	80164ec <_strtoul_l.constprop.0+0xbc>
 80164de:	2322      	movs	r3, #34	; 0x22
 80164e0:	4638      	mov	r0, r7
 80164e2:	f8ce 3000 	str.w	r3, [lr]
 80164e6:	b932      	cbnz	r2, 80164f6 <_strtoul_l.constprop.0+0xc6>
 80164e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164ec:	b106      	cbz	r6, 80164f0 <_strtoul_l.constprop.0+0xc0>
 80164ee:	4240      	negs	r0, r0
 80164f0:	2a00      	cmp	r2, #0
 80164f2:	d0f9      	beq.n	80164e8 <_strtoul_l.constprop.0+0xb8>
 80164f4:	b107      	cbz	r7, 80164f8 <_strtoul_l.constprop.0+0xc8>
 80164f6:	1e69      	subs	r1, r5, #1
 80164f8:	6011      	str	r1, [r2, #0]
 80164fa:	e7f5      	b.n	80164e8 <_strtoul_l.constprop.0+0xb8>
 80164fc:	2430      	movs	r4, #48	; 0x30
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d1b5      	bne.n	801646e <_strtoul_l.constprop.0+0x3e>
 8016502:	2308      	movs	r3, #8
 8016504:	e7b3      	b.n	801646e <_strtoul_l.constprop.0+0x3e>
 8016506:	2c30      	cmp	r4, #48	; 0x30
 8016508:	d0a9      	beq.n	801645e <_strtoul_l.constprop.0+0x2e>
 801650a:	230a      	movs	r3, #10
 801650c:	e7af      	b.n	801646e <_strtoul_l.constprop.0+0x3e>
 801650e:	bf00      	nop
 8016510:	08016788 	.word	0x08016788

08016514 <_strtoul_r>:
 8016514:	f7ff bf8c 	b.w	8016430 <_strtoul_l.constprop.0>

08016518 <_malloc_usable_size_r>:
 8016518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801651c:	1f18      	subs	r0, r3, #4
 801651e:	2b00      	cmp	r3, #0
 8016520:	bfbc      	itt	lt
 8016522:	580b      	ldrlt	r3, [r1, r0]
 8016524:	18c0      	addlt	r0, r0, r3
 8016526:	4770      	bx	lr

08016528 <_init>:
 8016528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801652a:	bf00      	nop
 801652c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801652e:	bc08      	pop	{r3}
 8016530:	469e      	mov	lr, r3
 8016532:	4770      	bx	lr

08016534 <_fini>:
 8016534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016536:	bf00      	nop
 8016538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801653a:	bc08      	pop	{r3}
 801653c:	469e      	mov	lr, r3
 801653e:	4770      	bx	lr
