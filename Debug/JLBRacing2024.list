
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025514  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08025718  08025718  00035718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080261f4  080261f4  0004010c  2**0
                  CONTENTS
  4 .ARM          00000008  080261f4  080261f4  000361f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080261fc  080261fc  0004010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080261fc  080261fc  000361fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0802620c  0802620c  0003620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0802621c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d58  20000110  08026328  00040110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005e68  08026328  00045e68  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0004010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040142  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005bedc  00000000  00000000  00040185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000088ad  00000000  00000000  0009c061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000041f0  00000000  00000000  000a4910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003316  00000000  00000000  000a8b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003995c  00000000  00000000  000abe16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000457ee  00000000  00000000  000e5772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016a6cb  00000000  00000000  0012af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00013b44  00000000  00000000  0029562c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  002a9170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000110 	.word	0x20000110
 800021c:	00000000 	.word	0x00000000
 8000220:	080256fc 	.word	0x080256fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000114 	.word	0x20000114
 800023c:	080256fc 	.word	0x080256fc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 bacc 	b.w	800121c <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f950 	bl	8000f30 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__mulsc3>:
 8000c9c:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000ca0:	ee60 5aa1 	vmul.f32	s11, s1, s3
 8000ca4:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000ca8:	ee61 4a20 	vmul.f32	s9, s2, s1
 8000cac:	ee76 7ae5 	vsub.f32	s15, s13, s11
 8000cb0:	ee35 7a24 	vadd.f32	s14, s10, s9
 8000cb4:	eef4 7a67 	vcmp.f32	s15, s15
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	eeb4 7a47 	vcmp.f32	s14, s14
 8000cc0:	bf6c      	ite	vs
 8000cc2:	2301      	movvs	r3, #1
 8000cc4:	2300      	movvc	r3, #0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	bf78      	it	vc
 8000cd0:	2300      	movvc	r3, #0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80c8 	beq.w	8000e68 <__mulsc3+0x1cc>
 8000cd8:	eeb0 6ac0 	vabs.f32	s12, s0
 8000cdc:	ed9f 4a90 	vldr	s8, [pc, #576]	; 8000f20 <__mulsc3+0x284>
 8000ce0:	eef0 3ae0 	vabs.f32	s7, s1
 8000ce4:	eeb4 6a44 	vcmp.f32	s12, s8
 8000ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cec:	bfcc      	ite	gt
 8000cee:	2201      	movgt	r2, #1
 8000cf0:	2200      	movle	r2, #0
 8000cf2:	f340 80be 	ble.w	8000e72 <__mulsc3+0x1d6>
 8000cf6:	ee06 2a10 	vmov	s12, r2
 8000cfa:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8000f20 <__mulsc3+0x284>
 8000cfe:	ee10 2a10 	vmov	r2, s0
 8000d02:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000d06:	eef4 3a44 	vcmp.f32	s7, s8
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d10:	bfb8      	it	lt
 8000d12:	eeb1 6a46 	vneglt.f32	s12, s12
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d1e:	eeb0 0a46 	vmov.f32	s0, s12
 8000d22:	bfcc      	ite	gt
 8000d24:	2201      	movgt	r2, #1
 8000d26:	2200      	movle	r2, #0
 8000d28:	ee06 2a10 	vmov	s12, r2
 8000d2c:	ee10 2a90 	vmov	r2, s1
 8000d30:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d3a:	bfb8      	it	lt
 8000d3c:	eeb1 6a46 	vneglt.f32	s12, s12
 8000d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d44:	eef0 0a46 	vmov.f32	s1, s12
 8000d48:	f180 80b7 	bvs.w	8000eba <__mulsc3+0x21e>
 8000d4c:	eef4 1a61 	vcmp.f32	s3, s3
 8000d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d54:	f180 80bb 	bvs.w	8000ece <__mulsc3+0x232>
 8000d58:	eeb0 6ac1 	vabs.f32	s12, s2
 8000d5c:	ed9f 4a70 	vldr	s8, [pc, #448]	; 8000f20 <__mulsc3+0x284>
 8000d60:	eeb4 6a44 	vcmp.f32	s12, s8
 8000d64:	eeb0 6ae1 	vabs.f32	s12, s3
 8000d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6c:	bfcc      	ite	gt
 8000d6e:	2201      	movgt	r2, #1
 8000d70:	2200      	movle	r2, #0
 8000d72:	dc3c      	bgt.n	8000dee <__mulsc3+0x152>
 8000d74:	eeb4 6a44 	vcmp.f32	s12, s8
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	dc37      	bgt.n	8000dee <__mulsc3+0x152>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d164      	bne.n	8000e4c <__mulsc3+0x1b0>
 8000d82:	eef0 6ae6 	vabs.f32	s13, s13
 8000d86:	eef4 6a44 	vcmp.f32	s13, s8
 8000d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8e:	dc0d      	bgt.n	8000dac <__mulsc3+0x110>
 8000d90:	eef0 5ae5 	vabs.f32	s11, s11
 8000d94:	eef4 5a44 	vcmp.f32	s11, s8
 8000d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9c:	dc06      	bgt.n	8000dac <__mulsc3+0x110>
 8000d9e:	eeb0 5ac5 	vabs.f32	s10, s10
 8000da2:	eeb4 5a44 	vcmp.f32	s10, s8
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	dd6a      	ble.n	8000e82 <__mulsc3+0x1e6>
 8000dac:	eeb4 0a40 	vcmp.f32	s0, s0
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db4:	f180 80a9 	bvs.w	8000f0a <__mulsc3+0x26e>
 8000db8:	eef4 0a60 	vcmp.f32	s1, s1
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	f180 8099 	bvs.w	8000ef6 <__mulsc3+0x25a>
 8000dc4:	eeb4 1a41 	vcmp.f32	s2, s2
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	f180 8089 	bvs.w	8000ee2 <__mulsc3+0x246>
 8000dd0:	eef4 1a61 	vcmp.f32	s3, s3
 8000dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd8:	d738      	bvc.n	8000e4c <__mulsc3+0x1b0>
 8000dda:	ee11 3a90 	vmov	r3, s3
 8000dde:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000f24 <__mulsc3+0x288>
 8000de2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8000f28 <__mulsc3+0x28c>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	fe67 1a27 	vselge.f32	s3, s14, s15
 8000dec:	e02e      	b.n	8000e4c <__mulsc3+0x1b0>
 8000dee:	ee07 2a90 	vmov	s15, r2
 8000df2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000f20 <__mulsc3+0x284>
 8000df6:	ee11 3a10 	vmov	r3, s2
 8000dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfe:	eeb4 6a47 	vcmp.f32	s12, s14
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	eef0 7ae7 	vabs.f32	s15, s15
 8000e08:	bfb8      	it	lt
 8000e0a:	eef1 7a67 	vneglt.f32	s15, s15
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	eeb4 0a40 	vcmp.f32	s0, s0
 8000e16:	eeb0 1a67 	vmov.f32	s2, s15
 8000e1a:	bfcc      	ite	gt
 8000e1c:	2301      	movgt	r3, #1
 8000e1e:	2300      	movle	r3, #0
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	ee11 3a90 	vmov	r3, s3
 8000e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8000e32:	bfb8      	it	lt
 8000e34:	eef1 7a67 	vneglt.f32	s15, s15
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	eef0 1a67 	vmov.f32	s3, s15
 8000e40:	d631      	bvs.n	8000ea6 <__mulsc3+0x20a>
 8000e42:	eef4 0a60 	vcmp.f32	s1, s1
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	d622      	bvs.n	8000e92 <__mulsc3+0x1f6>
 8000e4c:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000e50:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000f2c <__mulsc3+0x290>
 8000e54:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000e58:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000e5c:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e64:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000e68:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6c:	eef0 0a47 	vmov.f32	s1, s14
 8000e70:	4770      	bx	lr
 8000e72:	eef4 3a44 	vcmp.f32	s7, s8
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	f73f af3c 	bgt.w	8000cf6 <__mulsc3+0x5a>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e76a      	b.n	8000d58 <__mulsc3+0xbc>
 8000e82:	eef0 4ae4 	vabs.f32	s9, s9
 8000e86:	eef4 4a44 	vcmp.f32	s9, s8
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	ddeb      	ble.n	8000e68 <__mulsc3+0x1cc>
 8000e90:	e78c      	b.n	8000dac <__mulsc3+0x110>
 8000e92:	ee10 3a90 	vmov	r3, s1
 8000e96:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000f24 <__mulsc3+0x288>
 8000e9a:	eddf 7a23 	vldr	s15, [pc, #140]	; 8000f28 <__mulsc3+0x28c>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	fe67 0a27 	vselge.f32	s1, s14, s15
 8000ea4:	e7d2      	b.n	8000e4c <__mulsc3+0x1b0>
 8000ea6:	ee10 3a10 	vmov	r3, s0
 8000eaa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000f24 <__mulsc3+0x288>
 8000eae:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8000f28 <__mulsc3+0x28c>
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000eb8:	e7c3      	b.n	8000e42 <__mulsc3+0x1a6>
 8000eba:	ee11 2a10 	vmov	r2, s2
 8000ebe:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8000f24 <__mulsc3+0x288>
 8000ec2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8000f28 <__mulsc3+0x28c>
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	fe24 1a06 	vselge.f32	s2, s8, s12
 8000ecc:	e73e      	b.n	8000d4c <__mulsc3+0xb0>
 8000ece:	ee11 2a90 	vmov	r2, s3
 8000ed2:	ed9f 4a14 	vldr	s8, [pc, #80]	; 8000f24 <__mulsc3+0x288>
 8000ed6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8000f28 <__mulsc3+0x28c>
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	fe64 1a06 	vselge.f32	s3, s8, s12
 8000ee0:	e73a      	b.n	8000d58 <__mulsc3+0xbc>
 8000ee2:	ee11 3a10 	vmov	r3, s2
 8000ee6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f24 <__mulsc3+0x288>
 8000eea:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000f28 <__mulsc3+0x28c>
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	fe27 1a27 	vselge.f32	s2, s14, s15
 8000ef4:	e76c      	b.n	8000dd0 <__mulsc3+0x134>
 8000ef6:	ee10 3a90 	vmov	r3, s1
 8000efa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f24 <__mulsc3+0x288>
 8000efe:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000f28 <__mulsc3+0x28c>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	fe67 0a27 	vselge.f32	s1, s14, s15
 8000f08:	e75c      	b.n	8000dc4 <__mulsc3+0x128>
 8000f0a:	ee10 3a10 	vmov	r3, s0
 8000f0e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f24 <__mulsc3+0x288>
 8000f12:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000f28 <__mulsc3+0x28c>
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000f1c:	e74c      	b.n	8000db8 <__mulsc3+0x11c>
 8000f1e:	bf00      	nop
 8000f20:	7f7fffff 	.word	0x7f7fffff
 8000f24:	00000000 	.word	0x00000000
 8000f28:	80000000 	.word	0x80000000
 8000f2c:	7f800000 	.word	0x7f800000

08000f30 <__udivmoddi4>:
 8000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000f36:	460d      	mov	r5, r1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	460f      	mov	r7, r1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d146      	bne.n	8000fce <__udivmoddi4+0x9e>
 8000f40:	428a      	cmp	r2, r1
 8000f42:	4694      	mov	ip, r2
 8000f44:	d95e      	bls.n	8001004 <__udivmoddi4+0xd4>
 8000f46:	fab2 f382 	clz	r3, r2
 8000f4a:	b143      	cbz	r3, 8000f5e <__udivmoddi4+0x2e>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0220 	rsb	r2, r3, #32
 8000f54:	409f      	lsls	r7, r3
 8000f56:	409c      	lsls	r4, r3
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	4317      	orrs	r7, r2
 8000f5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f62:	fa1f f58c 	uxth.w	r5, ip
 8000f66:	0c22      	lsrs	r2, r4, #16
 8000f68:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f70:	fb01 f005 	mul.w	r0, r1, r5
 8000f74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f78:	4290      	cmp	r0, r2
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x5e>
 8000f7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f84:	d202      	bcs.n	8000f8c <__udivmoddi4+0x5c>
 8000f86:	4290      	cmp	r0, r2
 8000f88:	f200 8134 	bhi.w	80011f4 <__udivmoddi4+0x2c4>
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	1a12      	subs	r2, r2, r0
 8000f90:	b2a4      	uxth	r4, r4
 8000f92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f9a:	fb00 f505 	mul.w	r5, r0, r5
 8000f9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fa2:	42a5      	cmp	r5, r4
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x88>
 8000fa6:	eb1c 0404 	adds.w	r4, ip, r4
 8000faa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x86>
 8000fb0:	42a5      	cmp	r5, r4
 8000fb2:	f200 8119 	bhi.w	80011e8 <__udivmoddi4+0x2b8>
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fbc:	1b64      	subs	r4, r4, r5
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	b11e      	cbz	r6, 8000fca <__udivmoddi4+0x9a>
 8000fc2:	40dc      	lsrs	r4, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0xb4>
 8000fd2:	2e00      	cmp	r6, #0
 8000fd4:	f000 80fc 	beq.w	80011d0 <__udivmoddi4+0x2a0>
 8000fd8:	2100      	movs	r1, #0
 8000fda:	e9c6 0500 	strd	r0, r5, [r6]
 8000fde:	4608      	mov	r0, r1
 8000fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fe4:	fab3 f183 	clz	r1, r3
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d14c      	bne.n	8001086 <__udivmoddi4+0x156>
 8000fec:	42ab      	cmp	r3, r5
 8000fee:	f0c0 80f2 	bcc.w	80011d6 <__udivmoddi4+0x2a6>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	f240 80ef 	bls.w	80011d6 <__udivmoddi4+0x2a6>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	2e00      	cmp	r6, #0
 8000ffc:	d0e5      	beq.n	8000fca <__udivmoddi4+0x9a>
 8000ffe:	e9c6 4700 	strd	r4, r7, [r6]
 8001002:	e7e2      	b.n	8000fca <__udivmoddi4+0x9a>
 8001004:	b902      	cbnz	r2, 8001008 <__udivmoddi4+0xd8>
 8001006:	deff      	udf	#255	; 0xff
 8001008:	fab2 f382 	clz	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 809f 	bne.w	8001150 <__udivmoddi4+0x220>
 8001012:	1a8a      	subs	r2, r1, r2
 8001014:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001018:	fa1f f78c 	uxth.w	r7, ip
 800101c:	2101      	movs	r1, #1
 800101e:	fbb2 f5fe 	udiv	r5, r2, lr
 8001022:	fb0e 2015 	mls	r0, lr, r5, r2
 8001026:	0c22      	lsrs	r2, r4, #16
 8001028:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800102c:	fb07 f005 	mul.w	r0, r7, r5
 8001030:	4290      	cmp	r0, r2
 8001032:	d90f      	bls.n	8001054 <__udivmoddi4+0x124>
 8001034:	eb1c 0202 	adds.w	r2, ip, r2
 8001038:	f105 38ff 	add.w	r8, r5, #4294967295
 800103c:	bf2c      	ite	cs
 800103e:	f04f 0901 	movcs.w	r9, #1
 8001042:	f04f 0900 	movcc.w	r9, #0
 8001046:	4290      	cmp	r0, r2
 8001048:	d903      	bls.n	8001052 <__udivmoddi4+0x122>
 800104a:	f1b9 0f00 	cmp.w	r9, #0
 800104e:	f000 80ce 	beq.w	80011ee <__udivmoddi4+0x2be>
 8001052:	4645      	mov	r5, r8
 8001054:	1a12      	subs	r2, r2, r0
 8001056:	b2a4      	uxth	r4, r4
 8001058:	fbb2 f0fe 	udiv	r0, r2, lr
 800105c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001060:	fb00 f707 	mul.w	r7, r0, r7
 8001064:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001068:	42a7      	cmp	r7, r4
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x14e>
 800106c:	eb1c 0404 	adds.w	r4, ip, r4
 8001070:	f100 32ff 	add.w	r2, r0, #4294967295
 8001074:	d202      	bcs.n	800107c <__udivmoddi4+0x14c>
 8001076:	42a7      	cmp	r7, r4
 8001078:	f200 80b3 	bhi.w	80011e2 <__udivmoddi4+0x2b2>
 800107c:	4610      	mov	r0, r2
 800107e:	1be4      	subs	r4, r4, r7
 8001080:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001084:	e79c      	b.n	8000fc0 <__udivmoddi4+0x90>
 8001086:	f1c1 0420 	rsb	r4, r1, #32
 800108a:	408b      	lsls	r3, r1
 800108c:	fa05 fc01 	lsl.w	ip, r5, r1
 8001090:	fa22 f704 	lsr.w	r7, r2, r4
 8001094:	40e5      	lsrs	r5, r4
 8001096:	408a      	lsls	r2, r1
 8001098:	431f      	orrs	r7, r3
 800109a:	fa20 f304 	lsr.w	r3, r0, r4
 800109e:	4088      	lsls	r0, r1
 80010a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80010a4:	ea43 030c 	orr.w	r3, r3, ip
 80010a8:	fa1f fc87 	uxth.w	ip, r7
 80010ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010b0:	fbb5 fef8 	udiv	lr, r5, r8
 80010b4:	fb08 551e 	mls	r5, r8, lr, r5
 80010b8:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80010bc:	fb0e f90c 	mul.w	r9, lr, ip
 80010c0:	45a9      	cmp	r9, r5
 80010c2:	d90e      	bls.n	80010e2 <__udivmoddi4+0x1b2>
 80010c4:	197d      	adds	r5, r7, r5
 80010c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010ca:	bf2c      	ite	cs
 80010cc:	f04f 0b01 	movcs.w	fp, #1
 80010d0:	f04f 0b00 	movcc.w	fp, #0
 80010d4:	45a9      	cmp	r9, r5
 80010d6:	d903      	bls.n	80010e0 <__udivmoddi4+0x1b0>
 80010d8:	f1bb 0f00 	cmp.w	fp, #0
 80010dc:	f000 808d 	beq.w	80011fa <__udivmoddi4+0x2ca>
 80010e0:	46d6      	mov	lr, sl
 80010e2:	eba5 0509 	sub.w	r5, r5, r9
 80010e6:	fa1f f983 	uxth.w	r9, r3
 80010ea:	fbb5 f3f8 	udiv	r3, r5, r8
 80010ee:	fb08 5513 	mls	r5, r8, r3, r5
 80010f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80010f6:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80010fa:	45ac      	cmp	ip, r5
 80010fc:	d906      	bls.n	800110c <__udivmoddi4+0x1dc>
 80010fe:	197d      	adds	r5, r7, r5
 8001100:	f103 38ff 	add.w	r8, r3, #4294967295
 8001104:	d201      	bcs.n	800110a <__udivmoddi4+0x1da>
 8001106:	45ac      	cmp	ip, r5
 8001108:	d87e      	bhi.n	8001208 <__udivmoddi4+0x2d8>
 800110a:	4643      	mov	r3, r8
 800110c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001110:	eba5 050c 	sub.w	r5, r5, ip
 8001114:	fba3 9802 	umull	r9, r8, r3, r2
 8001118:	4545      	cmp	r5, r8
 800111a:	46ce      	mov	lr, r9
 800111c:	46c4      	mov	ip, r8
 800111e:	d302      	bcc.n	8001126 <__udivmoddi4+0x1f6>
 8001120:	d106      	bne.n	8001130 <__udivmoddi4+0x200>
 8001122:	4548      	cmp	r0, r9
 8001124:	d204      	bcs.n	8001130 <__udivmoddi4+0x200>
 8001126:	3b01      	subs	r3, #1
 8001128:	ebb9 0e02 	subs.w	lr, r9, r2
 800112c:	eb68 0c07 	sbc.w	ip, r8, r7
 8001130:	2e00      	cmp	r6, #0
 8001132:	d06f      	beq.n	8001214 <__udivmoddi4+0x2e4>
 8001134:	ebb0 020e 	subs.w	r2, r0, lr
 8001138:	eb65 050c 	sbc.w	r5, r5, ip
 800113c:	40ca      	lsrs	r2, r1
 800113e:	fa05 f404 	lsl.w	r4, r5, r4
 8001142:	40cd      	lsrs	r5, r1
 8001144:	4618      	mov	r0, r3
 8001146:	4314      	orrs	r4, r2
 8001148:	2100      	movs	r1, #0
 800114a:	e9c6 4500 	strd	r4, r5, [r6]
 800114e:	e73c      	b.n	8000fca <__udivmoddi4+0x9a>
 8001150:	fa02 fc03 	lsl.w	ip, r2, r3
 8001154:	f1c3 0220 	rsb	r2, r3, #32
 8001158:	4099      	lsls	r1, r3
 800115a:	409c      	lsls	r4, r3
 800115c:	40d5      	lsrs	r5, r2
 800115e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001162:	fa20 f202 	lsr.w	r2, r0, r2
 8001166:	fa1f f78c 	uxth.w	r7, ip
 800116a:	fbb5 f0fe 	udiv	r0, r5, lr
 800116e:	430a      	orrs	r2, r1
 8001170:	fb0e 5510 	mls	r5, lr, r0, r5
 8001174:	0c11      	lsrs	r1, r2, #16
 8001176:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800117a:	fb00 f507 	mul.w	r5, r0, r7
 800117e:	428d      	cmp	r5, r1
 8001180:	d90e      	bls.n	80011a0 <__udivmoddi4+0x270>
 8001182:	eb1c 0101 	adds.w	r1, ip, r1
 8001186:	f100 38ff 	add.w	r8, r0, #4294967295
 800118a:	bf2c      	ite	cs
 800118c:	f04f 0901 	movcs.w	r9, #1
 8001190:	f04f 0900 	movcc.w	r9, #0
 8001194:	428d      	cmp	r5, r1
 8001196:	d902      	bls.n	800119e <__udivmoddi4+0x26e>
 8001198:	f1b9 0f00 	cmp.w	r9, #0
 800119c:	d031      	beq.n	8001202 <__udivmoddi4+0x2d2>
 800119e:	4640      	mov	r0, r8
 80011a0:	1b49      	subs	r1, r1, r5
 80011a2:	b292      	uxth	r2, r2
 80011a4:	fbb1 f5fe 	udiv	r5, r1, lr
 80011a8:	fb0e 1115 	mls	r1, lr, r5, r1
 80011ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011b0:	fb05 f107 	mul.w	r1, r5, r7
 80011b4:	4291      	cmp	r1, r2
 80011b6:	d907      	bls.n	80011c8 <__udivmoddi4+0x298>
 80011b8:	eb1c 0202 	adds.w	r2, ip, r2
 80011bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80011c0:	d201      	bcs.n	80011c6 <__udivmoddi4+0x296>
 80011c2:	4291      	cmp	r1, r2
 80011c4:	d823      	bhi.n	800120e <__udivmoddi4+0x2de>
 80011c6:	4645      	mov	r5, r8
 80011c8:	1a52      	subs	r2, r2, r1
 80011ca:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011ce:	e726      	b.n	800101e <__udivmoddi4+0xee>
 80011d0:	4631      	mov	r1, r6
 80011d2:	4630      	mov	r0, r6
 80011d4:	e6f9      	b.n	8000fca <__udivmoddi4+0x9a>
 80011d6:	1a84      	subs	r4, r0, r2
 80011d8:	eb65 0203 	sbc.w	r2, r5, r3
 80011dc:	2001      	movs	r0, #1
 80011de:	4617      	mov	r7, r2
 80011e0:	e70b      	b.n	8000ffa <__udivmoddi4+0xca>
 80011e2:	4464      	add	r4, ip
 80011e4:	3802      	subs	r0, #2
 80011e6:	e74a      	b.n	800107e <__udivmoddi4+0x14e>
 80011e8:	4464      	add	r4, ip
 80011ea:	3802      	subs	r0, #2
 80011ec:	e6e4      	b.n	8000fb8 <__udivmoddi4+0x88>
 80011ee:	3d02      	subs	r5, #2
 80011f0:	4462      	add	r2, ip
 80011f2:	e72f      	b.n	8001054 <__udivmoddi4+0x124>
 80011f4:	3902      	subs	r1, #2
 80011f6:	4462      	add	r2, ip
 80011f8:	e6c9      	b.n	8000f8e <__udivmoddi4+0x5e>
 80011fa:	f1ae 0e02 	sub.w	lr, lr, #2
 80011fe:	443d      	add	r5, r7
 8001200:	e76f      	b.n	80010e2 <__udivmoddi4+0x1b2>
 8001202:	3802      	subs	r0, #2
 8001204:	4461      	add	r1, ip
 8001206:	e7cb      	b.n	80011a0 <__udivmoddi4+0x270>
 8001208:	3b02      	subs	r3, #2
 800120a:	443d      	add	r5, r7
 800120c:	e77e      	b.n	800110c <__udivmoddi4+0x1dc>
 800120e:	3d02      	subs	r5, #2
 8001210:	4462      	add	r2, ip
 8001212:	e7d9      	b.n	80011c8 <__udivmoddi4+0x298>
 8001214:	4618      	mov	r0, r3
 8001216:	4631      	mov	r1, r6
 8001218:	e6d7      	b.n	8000fca <__udivmoddi4+0x9a>
 800121a:	bf00      	nop

0800121c <__aeabi_idiv0>:
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <Pack_measurements_1_jlb>:
}

#else

uint32_t Pack_measurements_1_jlb(measurements_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	e007      	b.n	8001244 <Pack_measurements_1_jlb+0x24>
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	75fa      	strb	r2, [r7, #23]
 800123a:	461a      	mov	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b07      	cmp	r3, #7
 8001248:	d9f4      	bls.n	8001234 <Pack_measurements_1_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	b2d9      	uxtb	r1, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	785b      	ldrb	r3, [r3, #1]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	b2db      	uxtb	r3, r3
 8001266:	430b      	orrs	r3, r1
 8001268:	b2d9      	uxtb	r1, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001276:	b2db      	uxtb	r3, r3
 8001278:	430b      	orrs	r3, r1
 800127a:	b2d9      	uxtb	r1, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	b2db      	uxtb	r3, r3
 8001284:	430b      	orrs	r3, r1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	7819      	ldrb	r1, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	795b      	ldrb	r3, [r3, #5]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	799b      	ldrb	r3, [r3, #6]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	79db      	ldrb	r3, [r3, #7]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3301      	adds	r3, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3302      	adds	r3, #2
 80012de:	7819      	ldrb	r1, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7a1b      	ldrb	r3, [r3, #8]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	7a5b      	ldrb	r3, [r3, #9]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	7a9b      	ldrb	r3, [r3, #10]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b2da      	uxtb	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	7adb      	ldrb	r3, [r3, #11]
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3302      	adds	r3, #2
 800131e:	430a      	orrs	r2, r1
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3303      	adds	r3, #3
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	7b5b      	ldrb	r3, [r3, #13]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b2da      	uxtb	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	7b9b      	ldrb	r3, [r3, #14]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b2da      	uxtb	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	7bdb      	ldrb	r3, [r3, #15]
 800135c:	019b      	lsls	r3, r3, #6
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b2da      	uxtb	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3303      	adds	r3, #3
 8001368:	430a      	orrs	r2, r1
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3304      	adds	r3, #4
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7c1b      	ldrb	r3, [r3, #16]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	b2da      	uxtb	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	7c5b      	ldrb	r3, [r3, #17]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	7c9b      	ldrb	r3, [r3, #18]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	7cdb      	ldrb	r3, [r3, #19]
 80013a6:	019b      	lsls	r3, r3, #6
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3304      	adds	r3, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3305      	adds	r3, #5
 80013bc:	7819      	ldrb	r1, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7d1b      	ldrb	r3, [r3, #20]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	7d5b      	ldrb	r3, [r3, #21]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	7d9b      	ldrb	r3, [r3, #22]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	7ddb      	ldrb	r3, [r3, #23]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3305      	adds	r3, #5
 80013fc:	430a      	orrs	r2, r1
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3306      	adds	r3, #6
 8001406:	7819      	ldrb	r1, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	7e1b      	ldrb	r3, [r3, #24]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	b2da      	uxtb	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	7e5b      	ldrb	r3, [r3, #25]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	7e9b      	ldrb	r3, [r3, #26]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b2da      	uxtb	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	7edb      	ldrb	r3, [r3, #27]
 800143a:	019b      	lsls	r3, r3, #6
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3306      	adds	r3, #6
 8001446:	430a      	orrs	r2, r1
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3307      	adds	r3, #7
 8001450:	7819      	ldrb	r1, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	7f1b      	ldrb	r3, [r3, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	b2da      	uxtb	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	7f5b      	ldrb	r3, [r3, #29]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b2da      	uxtb	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	7f9b      	ldrb	r3, [r3, #30]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b2da      	uxtb	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	7fdb      	ldrb	r3, [r3, #31]
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3307      	adds	r3, #7
 8001490:	430a      	orrs	r2, r1
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_1_DLC;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2208      	movs	r2, #8
 800149a:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_1_IDE;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  return measurements_1_CANID;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <Pack_measurements_2_jlb>:
}

#else

uint32_t Pack_measurements_2_jlb(measurements_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]
 80014c2:	e007      	b.n	80014d4 <Pack_measurements_2_jlb+0x24>
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	75fa      	strb	r2, [r7, #23]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b07      	cmp	r3, #7
 80014d8:	d9f4      	bls.n	80014c4 <Pack_measurements_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	b2d9      	uxtb	r1, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	430b      	orrs	r3, r1
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	789b      	ldrb	r3, [r3, #2]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001506:	b2db      	uxtb	r3, r3
 8001508:	430b      	orrs	r3, r1
 800150a:	b2d9      	uxtb	r1, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	b2db      	uxtb	r3, r3
 8001514:	430b      	orrs	r3, r1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3301      	adds	r3, #1
 8001524:	7819      	ldrb	r1, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	795b      	ldrb	r3, [r3, #5]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	799b      	ldrb	r3, [r3, #6]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b2da      	uxtb	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	79db      	ldrb	r3, [r3, #7]
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3302      	adds	r3, #2
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	7a1b      	ldrb	r3, [r3, #8]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	b2da      	uxtb	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	7a5b      	ldrb	r3, [r3, #9]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	7a9b      	ldrb	r3, [r3, #10]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b2da      	uxtb	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	7adb      	ldrb	r3, [r3, #11]
 80015a2:	019b      	lsls	r3, r3, #6
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3302      	adds	r3, #2
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3303      	adds	r3, #3
 80015b8:	7819      	ldrb	r1, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	7b1b      	ldrb	r3, [r3, #12]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	7b9b      	ldrb	r3, [r3, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	7bdb      	ldrb	r3, [r3, #15]
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3303      	adds	r3, #3
 80015f8:	430a      	orrs	r2, r1
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3304      	adds	r3, #4
 8001602:	7819      	ldrb	r1, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	7c1b      	ldrb	r3, [r3, #16]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	7c5b      	ldrb	r3, [r3, #17]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	7c9b      	ldrb	r3, [r3, #18]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b2da      	uxtb	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	7cdb      	ldrb	r3, [r3, #19]
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3304      	adds	r3, #4
 8001642:	430a      	orrs	r2, r1
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3305      	adds	r3, #5
 800164c:	7819      	ldrb	r1, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	7d1b      	ldrb	r3, [r3, #20]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	7d5b      	ldrb	r3, [r3, #21]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b2da      	uxtb	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	7d9b      	ldrb	r3, [r3, #22]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7ddb      	ldrb	r3, [r3, #23]
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b2da      	uxtb	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3305      	adds	r3, #5
 800168c:	430a      	orrs	r2, r1
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3306      	adds	r3, #6
 8001696:	7819      	ldrb	r1, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	7e1b      	ldrb	r3, [r3, #24]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	7e5b      	ldrb	r3, [r3, #25]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	7e9b      	ldrb	r3, [r3, #26]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	7edb      	ldrb	r3, [r3, #27]
 80016ca:	019b      	lsls	r3, r3, #6
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3306      	adds	r3, #6
 80016d6:	430a      	orrs	r2, r1
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3307      	adds	r3, #7
 80016e0:	7819      	ldrb	r1, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	7f1b      	ldrb	r3, [r3, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	7f5b      	ldrb	r3, [r3, #29]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	7f9b      	ldrb	r3, [r3, #30]
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b2da      	uxtb	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	7fdb      	ldrb	r3, [r3, #31]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3307      	adds	r3, #7
 8001720:	430a      	orrs	r2, r1
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_2_DLC;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2208      	movs	r2, #8
 800172a:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_2_IDE;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
  return measurements_2_CANID;
 8001732:	2302      	movs	r3, #2
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <Pack_measurements_3_jlb>:
}

#else

uint32_t Pack_measurements_3_jlb(measurements_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800174e:	2300      	movs	r3, #0
 8001750:	75fb      	strb	r3, [r7, #23]
 8001752:	e007      	b.n	8001764 <Pack_measurements_3_jlb+0x24>
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	75fa      	strb	r2, [r7, #23]
 800175a:	461a      	mov	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b07      	cmp	r3, #7
 8001768:	d9f4      	bls.n	8001754 <Pack_measurements_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_x_ro = (uint16_t) JLB_angular_velocity_x_ro_toS(_m->angular_velocity_x_phys);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001770:	a34f      	add	r3, pc, #316	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe fd7b 	bl	8000270 <__adddf3>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	a34d      	add	r3, pc, #308	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7ff f852 	bl	8000830 <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f9fa 	bl	8000b8c <__aeabi_d2uiz>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	801a      	strh	r2, [r3, #0]
  _m->angular_velocity_y_ro = (uint16_t) JLB_angular_velocity_y_ro_toS(_m->angular_velocity_y_phys);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017a6:	a342      	add	r3, pc, #264	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fd60 	bl	8000270 <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a33f      	add	r3, pc, #252	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7ff f837 	bl	8000830 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9df 	bl	8000b8c <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	821a      	strh	r2, [r3, #16]
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017dc:	a334      	add	r3, pc, #208	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fd45 	bl	8000270 <__adddf3>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	a332      	add	r3, pc, #200	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f81c 	bl	8000830 <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9c4 	bl	8000b8c <__aeabi_d2uiz>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_x_ro & (0xFFU)) );
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_x_ro >> 8U) & (0xFFU)) );
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3301      	adds	r3, #1
 8001822:	7819      	ldrb	r1, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	b29b      	uxth	r3, r3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->angular_velocity_y_ro & (0xFFU)) );
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3302      	adds	r3, #2
 800183c:	7819      	ldrb	r1, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8a1b      	ldrh	r3, [r3, #16]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3302      	adds	r3, #2
 8001848:	430a      	orrs	r2, r1
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->angular_velocity_y_ro >> 8U) & (0xFFU)) );
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3303      	adds	r3, #3
 8001852:	7819      	ldrb	r1, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8a1b      	ldrh	r3, [r3, #16]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2da      	uxtb	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3303      	adds	r3, #3
 8001862:	430a      	orrs	r2, r1
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	3304      	adds	r3, #4
 800186c:	7819      	ldrb	r1, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8c1b      	ldrh	r3, [r3, #32]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3304      	adds	r3, #4
 8001878:	430a      	orrs	r2, r1
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3305      	adds	r3, #5
 8001882:	7819      	ldrb	r1, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8c1b      	ldrh	r3, [r3, #32]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	b29b      	uxth	r3, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3305      	adds	r3, #5
 8001892:	430a      	orrs	r2, r1
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_3_DLC;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2208      	movs	r2, #8
 800189c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_3_IDE;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
  return measurements_3_CANID;
 80018a4:	2303      	movs	r3, #3
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	b4395810 	.word	0xb4395810
 80018b4:	401a36c8 	.word	0x401a36c8
 80018b8:	eb1c432d 	.word	0xeb1c432d
 80018bc:	3f2a36e2 	.word	0x3f2a36e2

080018c0 <Pack_measurements_4_jlb>:
}

#else

uint32_t Pack_measurements_4_jlb(measurements_4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_4_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e007      	b.n	80018e4 <Pack_measurements_4_jlb+0x24>
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	75fa      	strb	r2, [r7, #23]
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4413      	add	r3, r2
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d9f4      	bls.n	80018d4 <Pack_measurements_4_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->linear_acceleration_x_ro = (uint16_t) JLB_linear_acceleration_x_ro_toS(_m->linear_acceleration_x_phys);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018f0:	a34f      	add	r3, pc, #316	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fcbb 	bl	8000270 <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	a34d      	add	r3, pc, #308	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe ff92 	bl	8000830 <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f93a 	bl	8000b8c <__aeabi_d2uiz>
 8001918:	4603      	mov	r3, r0
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	801a      	strh	r2, [r3, #0]
  _m->linear_acceleration_y_ro = (uint16_t) JLB_linear_acceleration_y_ro_toS(_m->linear_acceleration_y_phys);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001926:	a342      	add	r3, pc, #264	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fca0 	bl	8000270 <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	a33f      	add	r3, pc, #252	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe ff77 	bl	8000830 <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f91f 	bl	8000b8c <__aeabi_d2uiz>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	821a      	strh	r2, [r3, #16]
  _m->linear_acceleration_z_ro = (uint16_t) JLB_linear_acceleration_z_ro_toS(_m->linear_acceleration_z_phys);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800195c:	a334      	add	r3, pc, #208	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fc85 	bl	8000270 <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	a332      	add	r3, pc, #200	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe ff5c 	bl	8000830 <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f904 	bl	8000b8c <__aeabi_d2uiz>
 8001984:	4603      	mov	r3, r0
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->linear_acceleration_x_ro & (0xFFU)) );
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->linear_acceleration_x_ro >> 8U) & (0xFFU)) );
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3301      	adds	r3, #1
 80019a2:	7819      	ldrb	r1, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_acceleration_y_ro & (0xFFU)) );
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	3302      	adds	r3, #2
 80019bc:	7819      	ldrb	r1, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8a1b      	ldrh	r3, [r3, #16]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3302      	adds	r3, #2
 80019c8:	430a      	orrs	r2, r1
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_acceleration_y_ro >> 8U) & (0xFFU)) );
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3303      	adds	r3, #3
 80019d2:	7819      	ldrb	r1, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8a1b      	ldrh	r3, [r3, #16]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3303      	adds	r3, #3
 80019e2:	430a      	orrs	r2, r1
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->linear_acceleration_z_ro & (0xFFU)) );
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3304      	adds	r3, #4
 80019ec:	7819      	ldrb	r1, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8c1b      	ldrh	r3, [r3, #32]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3304      	adds	r3, #4
 80019f8:	430a      	orrs	r2, r1
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->linear_acceleration_z_ro >> 8U) & (0xFFU)) );
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3305      	adds	r3, #5
 8001a02:	7819      	ldrb	r1, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8c1b      	ldrh	r3, [r3, #32]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3305      	adds	r3, #5
 8001a12:	430a      	orrs	r2, r1
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_4_DLC;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_4_IDE;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  return measurements_4_CANID;
 8001a24:	2304      	movs	r3, #4
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	70a3d70a 	.word	0x70a3d70a
 8001a34:	4030623d 	.word	0x4030623d
 8001a38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a3c:	3f40624d 	.word	0x3f40624d

08001a40 <Pack_measurements_5_jlb>:
}

#else

uint32_t Pack_measurements_5_jlb(measurements_5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_5_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
 8001a52:	e007      	b.n	8001a64 <Pack_measurements_5_jlb+0x24>
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	75fa      	strb	r2, [r7, #23]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d9f4      	bls.n	8001a54 <Pack_measurements_5_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->wheel_rpm_ro = (uint16_t) JLB_wheel_rpm_ro_toS(_m->wheel_rpm_phys);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a70:	a35b      	add	r3, pc, #364	; (adr r3, 8001be0 <Pack_measurements_5_jlb+0x1a0>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fbfb 	bl	8000270 <__adddf3>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	a359      	add	r3, pc, #356	; (adr r3, 8001be8 <Pack_measurements_5_jlb+0x1a8>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fed2 	bl	8000830 <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f87a 	bl	8000b8c <__aeabi_d2uiz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	801a      	strh	r2, [r3, #0]
  _m->object_range_ro = (uint16_t) JLB_object_range_ro_toS(_m->object_range_phys);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001aa6:	a352      	add	r3, pc, #328	; (adr r3, 8001bf0 <Pack_measurements_5_jlb+0x1b0>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fec0 	bl	8000830 <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f868 	bl	8000b8c <__aeabi_d2uiz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	821a      	strh	r2, [r3, #16]
  _m->motor_current_ro = (uint16_t) JLB_motor_current_ro_toS(_m->motor_current_phys);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001aca:	a34b      	add	r3, pc, #300	; (adr r3, 8001bf8 <Pack_measurements_5_jlb+0x1b8>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe feae 	bl	8000830 <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f856 	bl	8000b8c <__aeabi_d2uiz>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	841a      	strh	r2, [r3, #32]
  _m->duty_cycle_ro = (uint16_t) JLB_duty_cycle_ro_toS(_m->duty_cycle_phys);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001aee:	a344      	add	r3, pc, #272	; (adr r3, 8001c00 <Pack_measurements_5_jlb+0x1c0>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fe9c 	bl	8000830 <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f844 	bl	8000b8c <__aeabi_d2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->wheel_rpm_ro & (0xFFU)) );
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->wheel_rpm_ro >> 8U) & (0xFFU)) );
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3301      	adds	r3, #1
 8001b22:	7819      	ldrb	r1, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3301      	adds	r3, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->object_range_ro & (0xFFU)) );
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	7819      	ldrb	r1, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8a1b      	ldrh	r3, [r3, #16]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3302      	adds	r3, #2
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->object_range_ro >> 8U) & (0xFFU)) );
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3303      	adds	r3, #3
 8001b52:	7819      	ldrb	r1, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8a1b      	ldrh	r3, [r3, #16]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3303      	adds	r3, #3
 8001b62:	430a      	orrs	r2, r1
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->motor_current_ro & (0xFFU)) );
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	7819      	ldrb	r1, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8c1b      	ldrh	r3, [r3, #32]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3304      	adds	r3, #4
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->motor_current_ro >> 8U) & (0xFFU)) );
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3305      	adds	r3, #5
 8001b82:	7819      	ldrb	r1, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8c1b      	ldrh	r3, [r3, #32]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3305      	adds	r3, #5
 8001b92:	430a      	orrs	r2, r1
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->duty_cycle_ro & (0xFFU)) );
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3306      	adds	r3, #6
 8001b9c:	7819      	ldrb	r1, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->duty_cycle_ro >> 8U) & (0xFFU)) );
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3307      	adds	r3, #7
 8001bb2:	7819      	ldrb	r1, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_5_DLC;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_5_IDE;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
  return measurements_5_CANID;
 8001bd4:	2305      	movs	r3, #5
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	00000000 	.word	0x00000000
 8001be4:	40a99980 	.word	0x40a99980
 8001be8:	9999999a 	.word	0x9999999a
 8001bec:	3fb99999 	.word	0x3fb99999
 8001bf0:	eb1c432d 	.word	0xeb1c432d
 8001bf4:	3f1a36e2 	.word	0x3f1a36e2
 8001bf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bfc:	3f50624d 	.word	0x3f50624d
 8001c00:	d7c6fbd2 	.word	0xd7c6fbd2
 8001c04:	3ef2599e 	.word	0x3ef2599e

08001c08 <Pack_odometry_1_jlb>:
}

#else

uint32_t Pack_odometry_1_jlb(odometry_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
 8001c1a:	e007      	b.n	8001c2c <Pack_odometry_1_jlb+0x24>
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	75fa      	strb	r2, [r7, #23]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4413      	add	r3, r2
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	d9f4      	bls.n	8001c1c <Pack_odometry_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->orientation_ro = (uint16_t) JLB_orientation_ro_toS(_m->orientation_phys);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c38:	a34f      	add	r3, pc, #316	; (adr r3, 8001d78 <Pack_odometry_1_jlb+0x170>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fb17 	bl	8000270 <__adddf3>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	a34d      	add	r3, pc, #308	; (adr r3, 8001d80 <Pack_odometry_1_jlb+0x178>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fdee 	bl	8000830 <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff96 	bl	8000b8c <__aeabi_d2uiz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	801a      	strh	r2, [r3, #0]
  _m->position_x_ro = (uint16_t) JLB_position_x_ro_toS(_m->position_x_phys);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c6e:	a346      	add	r3, pc, #280	; (adr r3, 8001d88 <Pack_odometry_1_jlb+0x180>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fafc 	bl	8000270 <__adddf3>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	a343      	add	r3, pc, #268	; (adr r3, 8001d90 <Pack_odometry_1_jlb+0x188>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fdd3 	bl	8000830 <__aeabi_ddiv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ff7b 	bl	8000b8c <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	821a      	strh	r2, [r3, #16]
  _m->position_y_ro = (uint16_t) JLB_position_y_ro_toS(_m->position_y_phys);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ca4:	a338      	add	r3, pc, #224	; (adr r3, 8001d88 <Pack_odometry_1_jlb+0x180>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fae1 	bl	8000270 <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	a336      	add	r3, pc, #216	; (adr r3, 8001d90 <Pack_odometry_1_jlb+0x188>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fdb8 	bl	8000830 <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff60 	bl	8000b8c <__aeabi_d2uiz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->orientation_ro & (0xFFU)) );
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->orientation_ro >> 8U) & (0xFFU)) );
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	7819      	ldrb	r1, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->position_x_ro & (0xFFU)) );
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3302      	adds	r3, #2
 8001d04:	7819      	ldrb	r1, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8a1b      	ldrh	r3, [r3, #16]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	3302      	adds	r3, #2
 8001d10:	430a      	orrs	r2, r1
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->position_x_ro >> 8U) & (0xFFU)) );
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	7819      	ldrb	r1, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8a1b      	ldrh	r3, [r3, #16]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3303      	adds	r3, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->position_y_ro & (0xFFU)) );
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3304      	adds	r3, #4
 8001d34:	7819      	ldrb	r1, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8c1b      	ldrh	r3, [r3, #32]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	430a      	orrs	r2, r1
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->position_y_ro >> 8U) & (0xFFU)) );
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3305      	adds	r3, #5
 8001d4a:	7819      	ldrb	r1, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8c1b      	ldrh	r3, [r3, #32]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3305      	adds	r3, #5
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_1_DLC;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2208      	movs	r2, #8
 8001d64:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_1_IDE;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  return odometry_1_CANID;
 8001d6c:	2311      	movs	r3, #17
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	b4395810 	.word	0xb4395810
 8001d7c:	401a36c8 	.word	0x401a36c8
 8001d80:	eb1c432d 	.word	0xeb1c432d
 8001d84:	3f2a36e2 	.word	0x3f2a36e2
 8001d88:	70a3d70a 	.word	0x70a3d70a
 8001d8c:	4030623d 	.word	0x4030623d
 8001d90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d94:	3f40624d 	.word	0x3f40624d

08001d98 <Pack_odometry_2_jlb>:
}

#else

uint32_t Pack_odometry_2_jlb(odometry_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
 8001daa:	e007      	b.n	8001dbc <Pack_odometry_2_jlb+0x24>
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	75fa      	strb	r2, [r7, #23]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4413      	add	r3, r2
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b07      	cmp	r3, #7
 8001dc0:	d9f4      	bls.n	8001dac <Pack_odometry_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dc8:	a335      	add	r3, pc, #212	; (adr r3, 8001ea0 <Pack_odometry_2_jlb+0x108>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fa4f 	bl	8000270 <__adddf3>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	a333      	add	r3, pc, #204	; (adr r3, 8001ea8 <Pack_odometry_2_jlb+0x110>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fd26 	bl	8000830 <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fece 	bl	8000b8c <__aeabi_d2uiz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	801a      	strh	r2, [r3, #0]
  _m->linear_velocity_x_ro = (uint16_t) JLB_linear_velocity_x_ro_toS(_m->linear_velocity_x_phys);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001dfe:	a32c      	add	r3, pc, #176	; (adr r3, 8001eb0 <Pack_odometry_2_jlb+0x118>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fa34 	bl	8000270 <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	a329      	add	r3, pc, #164	; (adr r3, 8001eb8 <Pack_odometry_2_jlb+0x120>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fd0b 	bl	8000830 <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe feb3 	bl	8000b8c <__aeabi_d2uiz>
 8001e26:	4603      	mov	r3, r0
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3301      	adds	r3, #1
 8001e44:	7819      	ldrb	r1, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3301      	adds	r3, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_velocity_x_ro & (0xFFU)) );
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	7819      	ldrb	r1, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8a1b      	ldrh	r3, [r3, #16]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3302      	adds	r3, #2
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_velocity_x_ro >> 8U) & (0xFFU)) );
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3303      	adds	r3, #3
 8001e74:	7819      	ldrb	r1, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8a1b      	ldrh	r3, [r3, #16]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3303      	adds	r3, #3
 8001e84:	430a      	orrs	r2, r1
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_2_DLC;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_2_IDE;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  return odometry_2_CANID;
 8001e96:	2312      	movs	r3, #18
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	b4395810 	.word	0xb4395810
 8001ea4:	401a36c8 	.word	0x401a36c8
 8001ea8:	eb1c432d 	.word	0xeb1c432d
 8001eac:	3f2a36e2 	.word	0x3f2a36e2
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	4030623d 	.word	0x4030623d
 8001eb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ebc:	3f40624d 	.word	0x3f40624d

08001ec0 <Pack_logic_1_jlb>:
}

#else

uint32_t Pack_logic_1_jlb(logic_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
 8001ed2:	e007      	b.n	8001ee4 <Pack_logic_1_jlb+0x24>
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	75fa      	strb	r2, [r7, #23]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4413      	add	r3, r2
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	d9f4      	bls.n	8001ed4 <Pack_logic_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->target_angle_ro = (uint16_t) JLB_target_angle_ro_toS(_m->target_angle_phys);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ef0:	a369      	add	r3, pc, #420	; (adr r3, 8002098 <Pack_logic_1_jlb+0x1d8>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe f9bb 	bl	8000270 <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	a367      	add	r3, pc, #412	; (adr r3, 80020a0 <Pack_logic_1_jlb+0x1e0>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fc92 	bl	8000830 <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fe3a 	bl	8000b8c <__aeabi_d2uiz>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	801a      	strh	r2, [r3, #0]
  _m->target_speed_ro = (uint16_t) JLB_target_speed_ro_toS(_m->target_speed_phys);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f26:	a360      	add	r3, pc, #384	; (adr r3, 80020a8 <Pack_logic_1_jlb+0x1e8>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe f9a0 	bl	8000270 <__adddf3>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	a35d      	add	r3, pc, #372	; (adr r3, 80020b0 <Pack_logic_1_jlb+0x1f0>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fc77 	bl	8000830 <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fe1f 	bl	8000b8c <__aeabi_d2uiz>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	821a      	strh	r2, [r3, #16]
  _m->cross_track_error_ro = (uint16_t) JLB_cross_track_error_ro_toS(_m->cross_track_error_phys);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f5c:	a34e      	add	r3, pc, #312	; (adr r3, 8002098 <Pack_logic_1_jlb+0x1d8>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe f985 	bl	8000270 <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	a34c      	add	r3, pc, #304	; (adr r3, 80020a0 <Pack_logic_1_jlb+0x1e0>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fc5c 	bl	8000830 <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe04 	bl	8000b8c <__aeabi_d2uiz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	841a      	strh	r2, [r3, #32]
  _m->heading_error_ro = (uint16_t) JLB_heading_error_ro_toS(_m->heading_error_phys);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001f92:	a349      	add	r3, pc, #292	; (adr r3, 80020b8 <Pack_logic_1_jlb+0x1f8>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe f96a 	bl	8000270 <__adddf3>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	a346      	add	r3, pc, #280	; (adr r3, 80020c0 <Pack_logic_1_jlb+0x200>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fc41 	bl	8000830 <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fde9 	bl	8000b8c <__aeabi_d2uiz>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->target_angle_ro & (0xFFU)) );
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->target_angle_ro >> 8U) & (0xFFU)) );
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	7819      	ldrb	r1, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->target_speed_ro & (0xFFU)) );
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	7819      	ldrb	r1, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8a1b      	ldrh	r3, [r3, #16]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	430a      	orrs	r2, r1
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->target_speed_ro >> 8U) & (0xFFU)) );
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3303      	adds	r3, #3
 8002008:	7819      	ldrb	r1, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8a1b      	ldrh	r3, [r3, #16]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3303      	adds	r3, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->cross_track_error_ro & (0xFFU)) );
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3304      	adds	r3, #4
 8002022:	7819      	ldrb	r1, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8c1b      	ldrh	r3, [r3, #32]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3304      	adds	r3, #4
 800202e:	430a      	orrs	r2, r1
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->cross_track_error_ro >> 8U) & (0xFFU)) );
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3305      	adds	r3, #5
 8002038:	7819      	ldrb	r1, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8c1b      	ldrh	r3, [r3, #32]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	b29b      	uxth	r3, r3
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3305      	adds	r3, #5
 8002048:	430a      	orrs	r2, r1
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->heading_error_ro & (0xFFU)) );
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3306      	adds	r3, #6
 8002052:	7819      	ldrb	r1, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3306      	adds	r3, #6
 800205e:	430a      	orrs	r2, r1
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->heading_error_ro >> 8U) & (0xFFU)) );
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3307      	adds	r3, #7
 8002068:	7819      	ldrb	r1, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	b29b      	uxth	r3, r3
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3307      	adds	r3, #7
 8002078:	430a      	orrs	r2, r1
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_1_DLC;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2208      	movs	r2, #8
 8002082:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_1_IDE;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
  return logic_1_CANID;
 800208a:	2321      	movs	r3, #33	; 0x21
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	f3af 8000 	nop.w
 8002098:	b4395810 	.word	0xb4395810
 800209c:	400a36c8 	.word	0x400a36c8
 80020a0:	eb1c432d 	.word	0xeb1c432d
 80020a4:	3f1a36e2 	.word	0x3f1a36e2
 80020a8:	70a3d70a 	.word	0x70a3d70a
 80020ac:	4030623d 	.word	0x4030623d
 80020b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020b4:	3f40624d 	.word	0x3f40624d
 80020b8:	b4395810 	.word	0xb4395810
 80020bc:	3ffa36c8 	.word	0x3ffa36c8
 80020c0:	eb1c432d 	.word	0xeb1c432d
 80020c4:	3f0a36e2 	.word	0x3f0a36e2

080020c8 <Pack_logic_2_jlb>:
}

#else

uint32_t Pack_logic_2_jlb(logic_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
 80020da:	e007      	b.n	80020ec <Pack_logic_2_jlb+0x24>
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	75fa      	strb	r2, [r7, #23]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d9f4      	bls.n	80020dc <Pack_logic_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->distance_traveled_ro = (uint16_t) JLB_distance_traveled_ro_toS(_m->distance_traveled_phys);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020f8:	a335      	add	r3, pc, #212	; (adr r3, 80021d0 <Pack_logic_2_jlb+0x108>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fb97 	bl	8000830 <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fd3f 	bl	8000b8c <__aeabi_d2uiz>
 800210e:	4603      	mov	r3, r0
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	80da      	strh	r2, [r3, #6]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->direction & (0xFFU)) );
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->mission & (0xFFU)) );
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	7819      	ldrb	r1, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	785a      	ldrb	r2, [r3, #1]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	430a      	orrs	r2, r1
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->fast_state & (0xFFU)) );
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3302      	adds	r3, #2
 800213e:	7819      	ldrb	r1, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	789a      	ldrb	r2, [r3, #2]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3302      	adds	r3, #2
 8002148:	430a      	orrs	r2, r1
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->labyrinth_state & (0xFFU)) );
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3303      	adds	r3, #3
 8002152:	7819      	ldrb	r1, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	78da      	ldrb	r2, [r3, #3]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3303      	adds	r3, #3
 800215c:	430a      	orrs	r2, r1
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->next_node & (0xFFU)) );
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3304      	adds	r3, #4
 8002166:	7819      	ldrb	r1, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	791a      	ldrb	r2, [r3, #4]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3304      	adds	r3, #4
 8002170:	430a      	orrs	r2, r1
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->previous_node & (0xFFU)) );
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3305      	adds	r3, #5
 800217a:	7819      	ldrb	r1, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	795a      	ldrb	r2, [r3, #5]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3305      	adds	r3, #5
 8002184:	430a      	orrs	r2, r1
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->distance_traveled_ro & (0xFFU)) );
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3306      	adds	r3, #6
 800218e:	7819      	ldrb	r1, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	88db      	ldrh	r3, [r3, #6]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3306      	adds	r3, #6
 800219a:	430a      	orrs	r2, r1
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->distance_traveled_ro >> 8U) & (0xFFU)) );
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3307      	adds	r3, #7
 80021a4:	7819      	ldrb	r1, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	88db      	ldrh	r3, [r3, #6]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3307      	adds	r3, #7
 80021b4:	430a      	orrs	r2, r1
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_2_DLC;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2208      	movs	r2, #8
 80021be:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_2_IDE;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
  return logic_2_CANID;
 80021c6:	2322      	movs	r3, #34	; 0x22
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	47ae147b 	.word	0x47ae147b
 80021d4:	3f847ae1 	.word	0x3f847ae1

080021d8 <Pack_logic_3_jlb>:
}

#else

uint32_t Pack_logic_3_jlb(logic_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80021e6:	2300      	movs	r3, #0
 80021e8:	75fb      	strb	r3, [r7, #23]
 80021ea:	e007      	b.n	80021fc <Pack_logic_3_jlb+0x24>
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	75fa      	strb	r2, [r7, #23]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4413      	add	r3, r2
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b07      	cmp	r3, #7
 8002200:	d9f4      	bls.n	80021ec <Pack_logic_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->ang_error_norm_ro = (uint8_t) JLB_ang_error_norm_ro_toS(_m->ang_error_norm_phys);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002208:	a35d      	add	r3, pc, #372	; (adr r3, 8002380 <Pack_logic_3_jlb+0x1a8>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe fb0f 	bl	8000830 <__aeabi_ddiv>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f7fe fcb7 	bl	8000b8c <__aeabi_d2uiz>
 800221e:	4603      	mov	r3, r0
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	701a      	strb	r2, [r3, #0]
  _m->dist_error_norm_ro = (uint8_t) JLB_dist_error_norm_ro_toS(_m->dist_error_norm_phys);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800222c:	a354      	add	r3, pc, #336	; (adr r3, 8002380 <Pack_logic_3_jlb+0x1a8>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fafd 	bl	8000830 <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fca5 	bl	8000b8c <__aeabi_d2uiz>
 8002242:	4603      	mov	r3, r0
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	741a      	strb	r2, [r3, #16]
  _m->line_position_front_ro = (uint16_t) JLB_line_position_front_ro_toS(_m->line_position_front_phys);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002250:	a34d      	add	r3, pc, #308	; (adr r3, 8002388 <Pack_logic_3_jlb+0x1b0>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f80b 	bl	8000270 <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	a34b      	add	r3, pc, #300	; (adr r3, 8002390 <Pack_logic_3_jlb+0x1b8>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe fae2 	bl	8000830 <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc8a 	bl	8000b8c <__aeabi_d2uiz>
 8002278:	4603      	mov	r3, r0
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	841a      	strh	r2, [r3, #32]
  _m->line_position_rear_ro = (uint16_t) JLB_line_position_rear_ro_toS(_m->line_position_rear_phys);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002286:	a340      	add	r3, pc, #256	; (adr r3, 8002388 <Pack_logic_3_jlb+0x1b0>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fd fff0 	bl	8000270 <__adddf3>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	a33d      	add	r3, pc, #244	; (adr r3, 8002390 <Pack_logic_3_jlb+0x1b8>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	f7fe fac7 	bl	8000830 <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7fe fc6f 	bl	8000b8c <__aeabi_d2uiz>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->ang_error_norm_ro & (0xFFU)) );
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->dist_error_norm_ro & (0xFFU)) );
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	7819      	ldrb	r1, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	7c1a      	ldrb	r2, [r3, #16]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	3301      	adds	r3, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_position_front_ro & (0xFFU)) );
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3302      	adds	r3, #2
 80022de:	7819      	ldrb	r1, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8c1b      	ldrh	r3, [r3, #32]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3302      	adds	r3, #2
 80022ea:	430a      	orrs	r2, r1
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->line_position_front_ro >> 8U) & (0xFFU)) );
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3303      	adds	r3, #3
 80022f4:	7819      	ldrb	r1, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8c1b      	ldrh	r3, [r3, #32]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	3303      	adds	r3, #3
 8002304:	430a      	orrs	r2, r1
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_position_rear_ro & (0xFFU)) );
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3304      	adds	r3, #4
 800230e:	7819      	ldrb	r1, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3304      	adds	r3, #4
 800231a:	430a      	orrs	r2, r1
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->line_position_rear_ro >> 8U) & (0xFFU)) );
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3305      	adds	r3, #5
 8002324:	7819      	ldrb	r1, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	b29b      	uxth	r3, r3
 800232e:	b2da      	uxtb	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	3305      	adds	r3, #5
 8002334:	430a      	orrs	r2, r1
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->at_cross_section & (0x01U)) | ((_m->under_gate & (0x01U)) << 1U) );
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3306      	adds	r3, #6
 800233e:	7819      	ldrb	r1, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	3306      	adds	r3, #6
 8002364:	430a      	orrs	r2, r1
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_3_DLC;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_3_IDE;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
  return logic_3_CANID;
 8002376:	2323      	movs	r3, #35	; 0x23
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	d2f1a9fc 	.word	0xd2f1a9fc
 8002384:	3f70624d 	.word	0x3f70624d
 8002388:	70a3d70a 	.word	0x70a3d70a
 800238c:	4030623d 	.word	0x4030623d
 8002390:	d2f1a9fc 	.word	0xd2f1a9fc
 8002394:	3f40624d 	.word	0x3f40624d

08002398 <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023a8:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023b2:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023bc:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023c6:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023d0:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023da:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023e4:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023ee:	81da      	strh	r2, [r3, #14]

	//vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	2000012c 	.word	0x2000012c
 8002400:	2000014c 	.word	0x2000014c

08002404 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 800240c:	895b      	ldrh	r3, [r3, #10]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002416:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800241a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002426:	4b8d      	ldr	r3, [pc, #564]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002428:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 800242c:	4b88      	ldr	r3, [pc, #544]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 800242e:	89db      	ldrh	r3, [r3, #14]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002438:	eddf 6a86 	vldr	s13, [pc, #536]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800243c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002440:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	4b84      	ldr	r3, [pc, #528]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800244a:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 800244e:	4b80      	ldr	r3, [pc, #512]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 8002450:	891b      	ldrh	r3, [r3, #8]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245a:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800245e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002462:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246a:	4b7c      	ldr	r3, [pc, #496]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800246c:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8002470:	4b77      	ldr	r3, [pc, #476]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 8002472:	88db      	ldrh	r3, [r3, #6]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800247c:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 8002480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002484:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	4b73      	ldr	r3, [pc, #460]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800248e:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 8002492:	2300      	movs	r3, #0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	e0a1      	b.n	80025dc <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4a70      	ldr	r2, [pc, #448]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4a6d      	ldr	r2, [pc, #436]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80024a8:	3304      	adds	r3, #4
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 80024b4:	2300      	movs	r3, #0
 80024b6:	71bb      	strb	r3, [r7, #6]
 80024b8:	e03a      	b.n	8002530 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	f1c3 0305 	rsb	r3, r3, #5
 80024c0:	4618      	mov	r0, r3
 80024c2:	ed97 0a00 	vldr	s0, [r7]
 80024c6:	f000 f8d1 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024ca:	ec55 4b10 	vmov	r4, r5, d0
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	4a63      	ldr	r2, [pc, #396]	; (8002660 <_Z18DistanceSensorTaskv+0x25c>)
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f827 	bl	800052c <__aeabi_f2d>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fe f879 	bl	80005dc <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	4a59      	ldr	r2, [pc, #356]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80024f6:	3304      	adds	r3, #4
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f814 	bl	800052c <__aeabi_f2d>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	f7fd feb0 	bl	8000270 <__adddf3>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	79fc      	ldrb	r4, [r7, #7]
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fb57 	bl	8000bcc <__aeabi_d2f>
 800251e:	4602      	mov	r2, r0
 8002520:	494e      	ldr	r1, [pc, #312]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002522:	1d23      	adds	r3, r4, #4
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	3301      	adds	r3, #1
 800252e:	71bb      	strb	r3, [r7, #6]
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d9c1      	bls.n	80024ba <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800253a:	3306      	adds	r3, #6
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4a44      	ldr	r2, [pc, #272]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800254a:	3302      	adds	r3, #2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 8002554:	2300      	movs	r3, #0
 8002556:	71bb      	strb	r3, [r7, #6]
 8002558:	e03a      	b.n	80025d0 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	f1c3 0305 	rsb	r3, r3, #5
 8002560:	4618      	mov	r0, r3
 8002562:	ed97 0a00 	vldr	s0, [r7]
 8002566:	f000 f881 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800256a:	ec55 4b10 	vmov	r4, r5, d0
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	4a3c      	ldr	r2, [pc, #240]	; (8002664 <_Z18DistanceSensorTaskv+0x260>)
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffd7 	bl	800052c <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fe f829 	bl	80005dc <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4a31      	ldr	r2, [pc, #196]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002596:	3306      	adds	r3, #6
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffc4 	bl	800052c <__aeabi_f2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fd fe60 	bl	8000270 <__adddf3>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	79fc      	ldrb	r4, [r7, #7]
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fb07 	bl	8000bcc <__aeabi_d2f>
 80025be:	4602      	mov	r2, r0
 80025c0:	4926      	ldr	r1, [pc, #152]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025c2:	1da3      	adds	r3, r4, #6
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	3301      	adds	r3, #1
 80025ce:	71bb      	strb	r3, [r7, #6]
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d9c1      	bls.n	800255a <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	3301      	adds	r3, #1
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f43f af5a 	beq.w	8002498 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80025ea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80025ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	da09      	bge.n	800260c <_Z18DistanceSensorTaskv+0x208>
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80025fe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	db04      	blt.n	8002616 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a12      	ldr	r2, [pc, #72]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e003      	b.n	800261e <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800261c:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002620:	edd3 7a08 	vldr	s15, [r3, #32]
 8002624:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800262e:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002634:	ed93 7a08 	vldr	s14, [r3, #32]
 8002638:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002668 <_Z18DistanceSensorTaskv+0x264>
 800263c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002642:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	bf00      	nop
 8002650:	2000014c 	.word	0x2000014c
 8002654:	45800000 	.word	0x45800000
 8002658:	40533333 	.word	0x40533333
 800265c:	2000015c 	.word	0x2000015c
 8002660:	20000018 	.word	0x20000018
 8002664:	20000000 	.word	0x20000000
 8002668:	42c80000 	.word	0x42c80000

0800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	ed87 0a01 	vstr	s0, [r7, #4]
 8002676:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fd ff57 	bl	800052c <__aeabi_f2d>
 800267e:	4604      	mov	r4, r0
 8002680:	460d      	mov	r5, r1
 8002682:	6838      	ldr	r0, [r7, #0]
 8002684:	f7fd ff40 	bl	8000508 <__aeabi_i2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	ec43 2b11 	vmov	d1, r2, r3
 8002690:	ec45 4b10 	vmov	d0, r4, r5
 8002694:	f01e fbd8 	bl	8020e48 <pow>
 8002698:	eeb0 7a40 	vmov.f32	s14, s0
 800269c:	eef0 7a60 	vmov.f32	s15, s1
    }
 80026a0:	eeb0 0a47 	vmov.f32	s0, s14
 80026a4:	eef0 0a67 	vmov.f32	s1, s15
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080026b0 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e05c      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d103      	bne.n	80026ea <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e053      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d927      	bls.n	8002744 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b10      	cmp	r3, #16
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	b29a      	uxth	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	b29b      	uxth	r3, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	b29b      	uxth	r3, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	b21a      	sxth	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e031      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	b21a      	sxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	e026      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	b29b      	uxth	r3, r3
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	b29b      	uxth	r3, r3
 800276a:	b21a      	sxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e00f      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b29b      	uxth	r3, r3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	b21a      	sxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	2000018c 	.word	0x2000018c

080027a8 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80027c0:	f01d f87e 	bl	801f8c0 <xTaskGetTickCount>
 80027c4:	4603      	mov	r3, r0
 80027c6:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 80027c8:	491e      	ldr	r1, [pc, #120]	; (8002844 <_Z12Encoder_TaskPv+0x9c>)
 80027ca:	481f      	ldr	r0, [pc, #124]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027cc:	f7ff ff70 	bl	80026b0 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	75f9      	strb	r1, [r7, #23]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	3318      	adds	r3, #24
 80027e0:	443b      	add	r3, r7
 80027e2:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d101      	bne.n	80027f0 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 80027f8:	2300      	movs	r3, #0
 80027fa:	75bb      	strb	r3, [r7, #22]
 80027fc:	e018      	b.n	8002830 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 8002800:	ed93 7a02 	vldr	s14, [r3, #8]
 8002804:	7dbb      	ldrb	r3, [r7, #22]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	3318      	adds	r3, #24
 800280a:	443b      	add	r3, r7
 800280c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002818:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800281c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 8002826:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800282a:	7dbb      	ldrb	r3, [r7, #22]
 800282c:	3301      	adds	r3, #1
 800282e:	75bb      	strb	r3, [r7, #22]
 8002830:	7dbb      	ldrb	r3, [r7, #22]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d9e3      	bls.n	80027fe <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f01c fecb 	bl	801f5d8 <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 8002842:	e7c1      	b.n	80027c8 <_Z12Encoder_TaskPv+0x20>
 8002844:	20000b54 	.word	0x20000b54
 8002848:	20000180 	.word	0x20000180

0800284c <_Z12CalculateRPMv>:
	}
}

float CalculateRPM()
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <_Z12CalculateRPMv+0x90>)
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	1c59      	adds	r1, r3, #1
 8002862:	b2c8      	uxtb	r0, r1
 8002864:	491e      	ldr	r1, [pc, #120]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 8002866:	7008      	strb	r0, [r1, #0]
 8002868:	491e      	ldr	r1, [pc, #120]	; (80028e4 <_Z12CalculateRPMv+0x98>)
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	601a      	str	r2, [r3, #0]

	if(index == 5)
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d102      	bne.n	800287e <_Z12CalculateRPMv+0x32>
	{
		index = 0;
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
	}

	averaged_rpm = 0.0f;
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	603b      	str	r3, [r7, #0]
	for(i = 0 ; i < 5; ++i)
 8002884:	2300      	movs	r3, #0
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	e012      	b.n	80028b0 <_Z12CalculateRPMv+0x64>
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <_Z12CalculateRPMv+0x98>)
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800289a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289e:	ed97 7a00 	vldr	s14, [r7]
 80028a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a6:	edc7 7a00 	vstr	s15, [r7]
	for(i = 0 ; i < 5; ++i)
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	3301      	adds	r3, #1
 80028ae:	71fb      	strb	r3, [r7, #7]
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d9e9      	bls.n	800288a <_Z12CalculateRPMv+0x3e>
	}

	averaged_rpm *= -1.36f;
 80028b6:	edd7 7a00 	vldr	s15, [r7]
 80028ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80028e8 <_Z12CalculateRPMv+0x9c>
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c2:	edc7 7a00 	vstr	s15, [r7]

	return averaged_rpm;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	ee07 3a90 	vmov	s15, r3
}
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000180 	.word	0x20000180
 80028e0:	2000018d 	.word	0x2000018d
 80028e4:	20000190 	.word	0x20000190
 80028e8:	bfae147b 	.word	0xbfae147b

080028ec <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu;

uint8_t readByteFromIMU(uint8_t address)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80028fa:	1dfa      	adds	r2, r7, #7
 80028fc:	2364      	movs	r3, #100	; 0x64
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2301      	movs	r3, #1
 8002902:	21d6      	movs	r1, #214	; 0xd6
 8002904:	4808      	ldr	r0, [pc, #32]	; (8002928 <_Z15readByteFromIMUh+0x3c>)
 8002906:	f013 ff51 	bl	80167ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 800290a:	f107 020f 	add.w	r2, r7, #15
 800290e:	2364      	movs	r3, #100	; 0x64
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2301      	movs	r3, #1
 8002914:	21d7      	movs	r1, #215	; 0xd7
 8002916:	4804      	ldr	r0, [pc, #16]	; (8002928 <_Z15readByteFromIMUh+0x3c>)
 8002918:	f014 f83c 	bl	8016994 <HAL_I2C_Master_Receive>
	return ret;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200007a4 	.word	0x200007a4

0800292c <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <_Z8IMU_Taskv+0x1c4>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d13f      	bne.n	80029ba <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 800293a:	2300      	movs	r3, #0
 800293c:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 800293e:	230f      	movs	r3, #15
 8002940:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 8002942:	f107 0209 	add.w	r2, r7, #9
 8002946:	2364      	movs	r3, #100	; 0x64
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	21d6      	movs	r1, #214	; 0xd6
 800294e:	4869      	ldr	r0, [pc, #420]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002950:	f013 ff2c 	bl	80167ac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 8002954:	f107 020a 	add.w	r2, r7, #10
 8002958:	2364      	movs	r3, #100	; 0x64
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	21d7      	movs	r1, #215	; 0xd7
 8002960:	4864      	ldr	r0, [pc, #400]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002962:	f014 f817 	bl	8016994 <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 8002966:	7abb      	ldrb	r3, [r7, #10]
 8002968:	2b6a      	cmp	r3, #106	; 0x6a
 800296a:	f040 80bd 	bne.w	8002ae8 <_Z8IMU_Taskv+0x1bc>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 800296e:	f246 0310 	movw	r3, #24592	; 0x6010
 8002972:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 8002974:	2311      	movs	r3, #17
 8002976:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8002978:	1d3a      	adds	r2, r7, #4
 800297a:	2364      	movs	r3, #100	; 0x64
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2302      	movs	r3, #2
 8002980:	21d6      	movs	r1, #214	; 0xd6
 8002982:	485c      	ldr	r0, [pc, #368]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002984:	f013 ff12 	bl	80167ac <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 8002988:	2012      	movs	r0, #18
 800298a:	f7ff ffaf 	bl	80028ec <_Z15readByteFromIMUh>
 800298e:	4603      	mov	r3, r0
 8002990:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 800299a:	2312      	movs	r3, #18
 800299c:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80029a2:	1d3a      	adds	r2, r7, #4
 80029a4:	2364      	movs	r3, #100	; 0x64
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2302      	movs	r3, #2
 80029aa:	21d6      	movs	r1, #214	; 0xd6
 80029ac:	4851      	ldr	r0, [pc, #324]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029ae:	f013 fefd 	bl	80167ac <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 80029b2:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <_Z8IMU_Taskv+0x1c4>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e097      	b.n	8002aea <_Z8IMU_Taskv+0x1be>
	}
	else
	{
		uint8_t status = 0u;
 80029ba:	2300      	movs	r3, #0
 80029bc:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 80029be:	231e      	movs	r3, #30
 80029c0:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 80029c2:	1cba      	adds	r2, r7, #2
 80029c4:	2364      	movs	r3, #100	; 0x64
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2301      	movs	r3, #1
 80029ca:	21d6      	movs	r1, #214	; 0xd6
 80029cc:	4849      	ldr	r0, [pc, #292]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029ce:	f013 feed 	bl	80167ac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 80029d2:	1cfa      	adds	r2, r7, #3
 80029d4:	2364      	movs	r3, #100	; 0x64
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	21d7      	movs	r1, #215	; 0xd7
 80029dc:	4845      	ldr	r0, [pc, #276]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029de:	f013 ffd9 	bl	8016994 <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d053      	beq.n	8002a94 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 80029ec:	2028      	movs	r0, #40	; 0x28
 80029ee:	f7ff ff7d 	bl	80028ec <_Z15readByteFromIMUh>
 80029f2:	4603      	mov	r3, r0
 80029f4:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 80029f6:	2029      	movs	r0, #41	; 0x29
 80029f8:	f7ff ff78 	bl	80028ec <_Z15readByteFromIMUh>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a00:	7bbb      	ldrb	r3, [r7, #14]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a16:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a20:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 8002a24:	202a      	movs	r0, #42	; 0x2a
 8002a26:	f7ff ff61 	bl	80028ec <_Z15readByteFromIMUh>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 8002a2e:	202a      	movs	r0, #42	; 0x2a
 8002a30:	f7ff ff5c 	bl	80028ec <_Z15readByteFromIMUh>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a58:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 8002a5c:	202c      	movs	r0, #44	; 0x2c
 8002a5e:	f7ff ff45 	bl	80028ec <_Z15readByteFromIMUh>
 8002a62:	4603      	mov	r3, r0
 8002a64:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 8002a66:	202c      	movs	r0, #44	; 0x2c
 8002a68:	f7ff ff40 	bl	80028ec <_Z15readByteFromIMUh>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a86:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a90:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d025      	beq.n	8002aea <_Z8IMU_Taskv+0x1be>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 8002a9e:	2026      	movs	r0, #38	; 0x26
 8002aa0:	f7ff ff24 	bl	80028ec <_Z15readByteFromIMUh>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 8002aa8:	2027      	movs	r0, #39	; 0x27
 8002aaa:	f7ff ff1f 	bl	80028ec <_Z15readByteFromIMUh>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 8002ab2:	7b3b      	ldrb	r3, [r7, #12]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	7b7b      	ldrb	r3, [r7, #13]
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	4313      	orrs	r3, r2
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002b00 <_Z8IMU_Taskv+0x1d4>
 8002acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ad0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002b04 <_Z8IMU_Taskv+0x1d8>
 8002ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b08 <_Z8IMU_Taskv+0x1dc>
 8002adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002ae2:	edc3 7a03 	vstr	s15, [r3, #12]
 8002ae6:	e000      	b.n	8002aea <_Z8IMU_Taskv+0x1be>
			return;
 8002ae8:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200001a4 	.word	0x200001a4
 8002af4:	200007a4 	.word	0x200007a4
 8002af8:	3d79db23 	.word	0x3d79db23
 8002afc:	200001a8 	.word	0x200001a8
 8002b00:	407423e2 	.word	0x407423e2
 8002b04:	447a0000 	.word	0x447a0000
 8002b08:	3c8ef998 	.word	0x3c8ef998

08002b0c <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fc8b 	bl	8003458 <_ZNSaIfED1Ev>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fc6e 	bl	8003438 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ffeb 	bl	8002b4c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 8002b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b92:	2211      	movs	r2, #17
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]
 8002ba0:	e00a      	b.n	8002bb8 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x38>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8002ba2:	f107 0116 	add.w	r1, r7, #22
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	2201      	movs	r2, #1
 8002bac:	4821      	ldr	r0, [pc, #132]	; (8002c34 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb4>)
 8002bae:	f016 fbd2 	bl	8019356 <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d9f1      	bls.n	8002ba2 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x22>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f013 fd2d 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f013 fd23 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	4619      	mov	r1, r3
 8002bee:	f013 fd1b 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4619      	mov	r1, r3
 8002c02:	f013 fd11 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4619      	mov	r1, r3
 8002c12:	f013 fd09 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	3302      	adds	r3, #2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	4619      	mov	r1, r3
 8002c26:	f013 fcff 	bl	8016628 <HAL_GPIO_WritePin>

}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000a40 	.word	0x20000a40

08002c38 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4619      	mov	r1, r3
 8002c52:	f013 fce9 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4619      	mov	r1, r3
 8002c66:	f013 fcdf 	bl	8016628 <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
 8002c6e:	e011      	b.n	8002c94 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5c>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 8002c7e:	f107 0116 	add.w	r1, r7, #22
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	2201      	movs	r2, #1
 8002c88:	482d      	ldr	r0, [pc, #180]	; (8002d40 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8002c8a:	f016 fb64 	bl	8019356 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	3301      	adds	r3, #1
 8002c92:	75fb      	strb	r3, [r7, #23]
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d9ea      	bls.n	8002c70 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f013 fcbf 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f013 fcb7 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f013 fcaf 	bl	8016628 <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
 8002cce:	e011      	b.n	8002cf4 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 8002cde:	f107 0115 	add.w	r1, r7, #21
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4815      	ldr	r0, [pc, #84]	; (8002d40 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8002cea:	f016 fb34 	bl	8019356 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d9ea      	bls.n	8002cd0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x98>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3302      	adds	r3, #2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f013 fc8d 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3304      	adds	r3, #4
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3302      	adds	r3, #2
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f013 fc83 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4619      	mov	r1, r3
 8002d32:	f013 fc79 	bl	8016628 <HAL_GPIO_WritePin>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000a40 	.word	0x20000a40

08002d44 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f013 fc65 	bl	8016628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	3302      	adds	r3, #2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f013 fc5b 	bl	8016628 <HAL_GPIO_WritePin>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t adc_ic_index, uint8_t *res)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t tmp[2] = {0, 0};
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4413      	add	r3, r2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	4619      	mov	r1, r3
 8002da8:	f013 fc3e 	bl	8016628 <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
 8002db0:	e019      	b.n	8002de6 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x6a>
	{
		tmp[0] = i << 3u;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002dba:	f107 0114 	add.w	r1, r7, #20
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4812      	ldr	r0, [pc, #72]	; (8002e10 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002dc6:	f016 fac6 	bl	8019356 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	461a      	mov	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	1899      	adds	r1, r3, r2
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	2202      	movs	r2, #2
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002ddc:	f016 fc29 	bl	8019632 <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	3301      	adds	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	d9e2      	bls.n	8002db2 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x36>
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4619      	mov	r1, r3
 8002e04:	f013 fc10 	bl	8016628 <HAL_GPIO_WritePin>

}
 8002e08:	bf00      	nop
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200009dc 	.word	0x200009dc

08002e14 <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b096      	sub	sp, #88	; 0x58
 8002e18:	af02      	add	r7, sp, #8


#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002e20:	e0c1      	b.n	8002fa6 <_Z14LineSensorTaskv+0x192>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 8002e22:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002e2a:	4a93      	ldr	r2, [pc, #588]	; (8003078 <_Z14LineSensorTaskv+0x264>)
 8002e2c:	4991      	ldr	r1, [pc, #580]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002e2e:	4893      	ldr	r0, [pc, #588]	; (800307c <_Z14LineSensorTaskv+0x268>)
 8002e30:	f7ff fea6 	bl	8002b80 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8002e34:	4b92      	ldr	r3, [pc, #584]	; (8003080 <_Z14LineSensorTaskv+0x26c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8002e3c:	bf00      	nop
 8002e3e:	4b90      	ldr	r3, [pc, #576]	; (8003080 <_Z14LineSensorTaskv+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b95      	cmp	r3, #149	; 0x95
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f3      	bne.n	8002e3e <_Z14LineSensorTaskv+0x2a>

		for(j = 0; j < 4; ++j)
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002e5c:	e094      	b.n	8002f88 <_Z14LineSensorTaskv+0x174>
		{
			uint8_t adc_front_values[16];
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
 8002e5e:	f107 0318 	add.w	r3, r7, #24
 8002e62:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002e66:	4987      	ldr	r1, [pc, #540]	; (8003084 <_Z14LineSensorTaskv+0x270>)
 8002e68:	4887      	ldr	r0, [pc, #540]	; (8003088 <_Z14LineSensorTaskv+0x274>)
 8002e6a:	f7ff ff87 	bl	8002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);
 8002e6e:	f107 0308 	add.w	r3, r7, #8
 8002e72:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002e76:	4985      	ldr	r1, [pc, #532]	; (800308c <_Z14LineSensorTaskv+0x278>)
 8002e78:	4885      	ldr	r0, [pc, #532]	; (8003090 <_Z14LineSensorTaskv+0x27c>)
 8002e7a:	f7ff ff7f 	bl	8002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 8002e7e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	3350      	adds	r3, #80	; 0x50
 8002e86:	443b      	add	r3, r7
 8002e88:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	b299      	uxth	r1, r3
 8002e92:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	3301      	adds	r3, #1
 8002e9a:	3350      	adds	r3, #80	; 0x50
 8002e9c:	443b      	add	r3, r7
 8002e9e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ea8:	00d8      	lsls	r0, r3, #3
 8002eaa:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002eae:	4403      	add	r3, r0
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	b291      	uxth	r1, r2
 8002eb4:	4a77      	ldr	r2, [pc, #476]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 8002eba:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	3350      	adds	r3, #80	; 0x50
 8002ec4:	443b      	add	r3, r7
 8002ec6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	b299      	uxth	r1, r3
 8002ed0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	3301      	adds	r3, #1
 8002eda:	3350      	adds	r3, #80	; 0x50
 8002edc:	443b      	add	r3, r7
 8002ede:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ee8:	00d8      	lsls	r0, r3, #3
 8002eea:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002eee:	4403      	add	r3, r0
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	b291      	uxth	r1, r2
 8002ef6:	4a67      	ldr	r2, [pc, #412]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 8002efc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	3350      	adds	r3, #80	; 0x50
 8002f04:	443b      	add	r3, r7
 8002f06:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	b299      	uxth	r1, r3
 8002f10:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	3301      	adds	r3, #1
 8002f18:	3350      	adds	r3, #80	; 0x50
 8002f1a:	443b      	add	r3, r7
 8002f1c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f26:	00d8      	lsls	r0, r3, #3
 8002f28:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f2c:	4403      	add	r3, r0
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	b291      	uxth	r1, r2
 8002f32:	4a58      	ldr	r2, [pc, #352]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002f34:	3320      	adds	r3, #32
 8002f36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 8002f3a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f3e:	3304      	adds	r3, #4
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	3350      	adds	r3, #80	; 0x50
 8002f44:	443b      	add	r3, r7
 8002f46:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	b299      	uxth	r1, r3
 8002f50:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f54:	3304      	adds	r3, #4
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	3301      	adds	r3, #1
 8002f5a:	3350      	adds	r3, #80	; 0x50
 8002f5c:	443b      	add	r3, r7
 8002f5e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f68:	00d8      	lsls	r0, r3, #3
 8002f6a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f6e:	4403      	add	r3, r0
 8002f70:	3304      	adds	r3, #4
 8002f72:	430a      	orrs	r2, r1
 8002f74:	b291      	uxth	r1, r2
 8002f76:	4a47      	ldr	r2, [pc, #284]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002f78:	3320      	adds	r3, #32
 8002f7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 8002f7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f82:	3301      	adds	r3, #1
 8002f84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	f67f af66 	bls.w	8002e5e <_Z14LineSensorTaskv+0x4a>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 8002f92:	4938      	ldr	r1, [pc, #224]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002f94:	4838      	ldr	r0, [pc, #224]	; (8003078 <_Z14LineSensorTaskv+0x264>)
 8002f96:	f7ff fed5 	bl	8002d44 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 8002f9a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002fa6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	f77f af39 	ble.w	8002e22 <_Z14LineSensorTaskv+0xe>
	}

	float denominator_f = 0.0f;
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
	float denominator_r = 0.0f;
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t led_front = 0u;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t led_rear = 0u;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t front_max_index = 0u;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t rear_max_index = 0u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	for(i = 1; i < 31; ++i)
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002fd6:	e035      	b.n	8003044 <_Z14LineSensorTaskv+0x230>
	{
		if(ls_data.adc_values_f[i] > ls_data.adc_values_f[front_max_index])
 8002fd8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002fdc:	4a2d      	ldr	r2, [pc, #180]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002fde:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002fe2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002fe6:	492b      	ldr	r1, [pc, #172]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002fe8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d903      	bls.n	8002ff8 <_Z14LineSensorTaskv+0x1e4>
		{
			front_max_index = i;
 8002ff0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ff4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
 8002ff8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002ffe:	3320      	adds	r3, #32
 8003000:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003004:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003008:	4922      	ldr	r1, [pc, #136]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800300a:	3320      	adds	r3, #32
 800300c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003010:	429a      	cmp	r2, r3
 8003012:	d903      	bls.n	800301c <_Z14LineSensorTaskv+0x208>
		{
			rear_max_index = i;
 8003014:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003018:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		}
		ls_data.front_detection[i] = true;
 800301c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003022:	4413      	add	r3, r2
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		ls_data.rear_detection[i] = true;
 800302a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800302e:	4a19      	ldr	r2, [pc, #100]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003030:	4413      	add	r3, r2
 8003032:	2201      	movs	r2, #1
 8003034:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8003038:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800303c:	3301      	adds	r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003044:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003048:	2b1e      	cmp	r3, #30
 800304a:	ddc5      	ble.n	8002fd8 <_Z14LineSensorTaskv+0x1c4>
	}

	ls_data.front_detection[0] = true;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	ls_data.front_detection[31] = true;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003056:	2201      	movs	r2, #1
 8003058:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ls_data.rear_detection[0] = true;
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800305e:	2201      	movs	r2, #1
 8003060:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ls_data.rear_detection[31] = true;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003066:	2201      	movs	r2, #1
 8003068:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	for(i = 1; i < 31; ++i)
 800306c:	2301      	movs	r3, #1
 800306e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003072:	e090      	b.n	8003196 <_Z14LineSensorTaskv+0x382>
 8003074:	20000068 	.word	0x20000068
 8003078:	2000006c 	.word	0x2000006c
 800307c:	20000060 	.word	0x20000060
 8003080:	20000bec 	.word	0x20000bec
 8003084:	20000040 	.word	0x20000040
 8003088:	20000030 	.word	0x20000030
 800308c:	20000058 	.word	0x20000058
 8003090:	20000048 	.word	0x20000048
 8003094:	200001c0 	.word	0x200001c0
	{
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8003098:	4bb7      	ldr	r3, [pc, #732]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 800309a:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 800309e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030aa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80030ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030b2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80030b6:	4ab0      	ldr	r2, [pc, #704]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80030b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	4baa      	ldr	r3, [pc, #680]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80030ce:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 80030d2:	4ba9      	ldr	r3, [pc, #676]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80030d4:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 80030d8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80030e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030ec:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80030f0:	4aa1      	ldr	r2, [pc, #644]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80030f2:	3320      	adds	r3, #32
 80030f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	4b9b      	ldr	r3, [pc, #620]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 800310a:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		denominator_f += (float)(ls_data.adc_values_f[i]);
 800310e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003112:	4a99      	ldr	r2, [pc, #612]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003120:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003128:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		denominator_r += (float)(ls_data.adc_values_r[i]);
 800312c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003130:	4a91      	ldr	r2, [pc, #580]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003132:	3320      	adds	r3, #32
 8003134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003140:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if(ls_data.adc_values_f[i] > 2000)
 800314c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003150:	4a89      	ldr	r2, [pc, #548]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003156:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800315a:	d906      	bls.n	800316a <_Z14LineSensorTaskv+0x356>
		{
			ls_data.front_detection[i] = false;
 800315c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003160:	4a85      	ldr	r2, [pc, #532]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003162:	4413      	add	r3, r2
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		}

		if(ls_data.adc_values_r[i] > 2000)
 800316a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800316e:	4a82      	ldr	r2, [pc, #520]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003170:	3320      	adds	r3, #32
 8003172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003176:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800317a:	d906      	bls.n	800318a <_Z14LineSensorTaskv+0x376>
		{
			ls_data.rear_detection[i] = false;
 800317c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003180:	4a7d      	ldr	r2, [pc, #500]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003182:	4413      	add	r3, r2
 8003184:	2200      	movs	r2, #0
 8003186:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 800318a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800318e:	3301      	adds	r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003196:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800319a:	2b1e      	cmp	r3, #30
 800319c:	f77f af7c 	ble.w	8003098 <_Z14LineSensorTaskv+0x284>
		}
	}

	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 80031a0:	2302      	movs	r3, #2
 80031a2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80031a6:	e037      	b.n	8003218 <_Z14LineSensorTaskv+0x404>
	{
		if((ls_data.front_detection[i - 1] == true) && (ls_data.front_detection[i + 1] == true))
 80031a8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031ac:	3b01      	subs	r3, #1
 80031ae:	4a72      	ldr	r2, [pc, #456]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031b0:	4413      	add	r3, r2
 80031b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10f      	bne.n	80031da <_Z14LineSensorTaskv+0x3c6>
 80031ba:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031be:	3301      	adds	r3, #1
 80031c0:	4a6d      	ldr	r2, [pc, #436]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031c2:	4413      	add	r3, r2
 80031c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <_Z14LineSensorTaskv+0x3c6>
		{
			ls_data.front_detection[i] = true;
 80031cc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031d0:	4a69      	ldr	r2, [pc, #420]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031d2:	4413      	add	r3, r2
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		if((ls_data.rear_detection[i - 1] == true) && (ls_data.rear_detection[i + 1] == true))
 80031da:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031de:	3b01      	subs	r3, #1
 80031e0:	4a65      	ldr	r2, [pc, #404]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031e2:	4413      	add	r3, r2
 80031e4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10f      	bne.n	800320c <_Z14LineSensorTaskv+0x3f8>
 80031ec:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a61      	ldr	r2, [pc, #388]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031f4:	4413      	add	r3, r2
 80031f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d106      	bne.n	800320c <_Z14LineSensorTaskv+0x3f8>
		{
			ls_data.rear_detection[i] = true;
 80031fe:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003202:	4a5d      	ldr	r2, [pc, #372]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003204:	4413      	add	r3, r2
 8003206:	2201      	movs	r2, #1
 8003208:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 800320c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003210:	3301      	adds	r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003218:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800321c:	2b1d      	cmp	r3, #29
 800321e:	ddc3      	ble.n	80031a8 <_Z14LineSensorTaskv+0x394>
		}
	}

	for(i = 1; i < 31; ++i)
 8003220:	2301      	movs	r3, #1
 8003222:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003226:	e027      	b.n	8003278 <_Z14LineSensorTaskv+0x464>
	{
		if(ls_data.front_detection[i] == false)
 8003228:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800322c:	4a52      	ldr	r2, [pc, #328]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 800322e:	4413      	add	r3, r2
 8003230:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <_Z14LineSensorTaskv+0x436>
		{
			led_front |= 0x80000000 >> (i);
 8003238:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800323c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003246:	4313      	orrs	r3, r2
 8003248:	643b      	str	r3, [r7, #64]	; 0x40
		}
		if(ls_data.rear_detection[i] == false)
 800324a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800324e:	4a4a      	ldr	r2, [pc, #296]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003250:	4413      	add	r3, r2
 8003252:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d108      	bne.n	800326c <_Z14LineSensorTaskv+0x458>
		{
			led_rear |= 0x80000000 >> (i);
 800325a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800325e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003268:	4313      	orrs	r3, r2
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i = 1; i < 31; ++i)
 800326c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003270:	3301      	adds	r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003278:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800327c:	2b1e      	cmp	r3, #30
 800327e:	ddd3      	ble.n	8003228 <_Z14LineSensorTaskv+0x414>
		}
	}
	uint8_t cluster_start_front = SENSOR_COUNT + 1;
 8003280:	2321      	movs	r3, #33	; 0x21
 8003282:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t cluster_end_front = SENSOR_COUNT + 1;
 8003286:	2321      	movs	r3, #33	; 0x21
 8003288:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t cluster_start_rear = SENSOR_COUNT + 1;
 800328c:	2321      	movs	r3, #33	; 0x21
 800328e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t cluster_end_rear = SENSOR_COUNT + 1;
 8003292:	2321      	movs	r3, #33	; 0x21
 8003294:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t current_idx;
	ls_data.front.clear();
 8003298:	4838      	ldr	r0, [pc, #224]	; (800337c <_Z14LineSensorTaskv+0x568>)
 800329a:	f000 f91c 	bl	80034d6 <_ZNSt6vectorIfSaIfEE5clearEv>
	ls_data.rear.clear();
 800329e:	4838      	ldr	r0, [pc, #224]	; (8003380 <_Z14LineSensorTaskv+0x56c>)
 80032a0:	f000 f919 	bl	80034d6 <_ZNSt6vectorIfSaIfEE5clearEv>
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80032aa:	e0a8      	b.n	80033fe <_Z14LineSensorTaskv+0x5ea>
	{
		if (!ls_data.front_detection[current_idx])
 80032ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032b0:	4a31      	ldr	r2, [pc, #196]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80032b2:	4413      	add	r3, r2
 80032b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <_Z14LineSensorTaskv+0x4c8>
		{
			if (cluster_start_front == SENSOR_COUNT + 1)
 80032c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80032c6:	2b21      	cmp	r3, #33	; 0x21
 80032c8:	d103      	bne.n	80032d2 <_Z14LineSensorTaskv+0x4be>
			{
				cluster_start_front = current_idx;
 80032ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			}
			cluster_end_front = current_idx;
 80032d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032d6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80032da:	e035      	b.n	8003348 <_Z14LineSensorTaskv+0x534>
		}
		else
		{
			if (cluster_start_front != SENSOR_COUNT + 1)
 80032dc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80032e0:	2b21      	cmp	r3, #33	; 0x21
 80032e2:	d031      	beq.n	8003348 <_Z14LineSensorTaskv+0x534>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_front + 1 + cluster_end_front + 1) / 2.0f;
 80032e4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80032ee:	4413      	add	r3, r2
 80032f0:	3301      	adds	r3, #1
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80032fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003302:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				// calculate the position of the line relative to the center of the sensor
				float line_position = cluster_center - 16.5f;
 8003306:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800330a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003384 <_Z14LineSensorTaskv+0x570>
 800330e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003312:	edc7 7a01 	vstr	s15, [r7, #4]
				line_position = -1.0f * line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 8003316:	edd7 7a01 	vldr	s15, [r7, #4]
 800331a:	eef1 7a67 	vneg.f32	s15, s15
 800331e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003388 <_Z14LineSensorTaskv+0x574>
 8003322:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003326:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 800332a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800332e:	edc7 7a01 	vstr	s15, [r7, #4]
					denominator += ls_data.adc_values_f[i];
				}
				line_position = -1.0f * (((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1));
				*/
				// add the line position to the vector
				ls_data.front.push_back(line_position);
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4811      	ldr	r0, [pc, #68]	; (800337c <_Z14LineSensorTaskv+0x568>)
 8003338:	f000 f8db 	bl	80034f2 <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_front = SENSOR_COUNT + 1;
 800333c:	2321      	movs	r3, #33	; 0x21
 800333e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				cluster_end_front = SENSOR_COUNT + 1;
 8003342:	2321      	movs	r3, #33	; 0x21
 8003344:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			}
		}

		if (!ls_data.rear_detection[current_idx])
 8003348:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 800334e:	4413      	add	r3, r2
 8003350:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <_Z14LineSensorTaskv+0x578>
		{
			if (cluster_start_rear == SENSOR_COUNT + 1)
 800335e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003362:	2b21      	cmp	r3, #33	; 0x21
 8003364:	d103      	bne.n	800336e <_Z14LineSensorTaskv+0x55a>
			{
				cluster_start_rear = current_idx;
 8003366:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800336a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
			cluster_end_rear = current_idx;
 800336e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003372:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003376:	e03d      	b.n	80033f4 <_Z14LineSensorTaskv+0x5e0>
 8003378:	200001c0 	.word	0x200001c0
 800337c:	20000288 	.word	0x20000288
 8003380:	20000294 	.word	0x20000294
 8003384:	41840000 	.word	0x41840000
 8003388:	3e4ccccd 	.word	0x3e4ccccd
		}
		else
		{
			if (cluster_start_rear != SENSOR_COUNT + 1)
 800338c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003390:	2b21      	cmp	r3, #33	; 0x21
 8003392:	d02f      	beq.n	80033f4 <_Z14LineSensorTaskv+0x5e0>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_rear + 1 + cluster_end_rear + 1) / 2.0f;
 8003394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800339e:	4413      	add	r3, r2
 80033a0:	3301      	adds	r3, #1
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				// calculate the position of the line relative to the center of the sensor
				float line_position = cluster_center - 16.5f;
 80033b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80033ba:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8003384 <_Z14LineSensorTaskv+0x570>
 80033be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033c2:	edc7 7a00 	vstr	s15, [r7]
				line_position = line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 80033c6:	edd7 7a00 	vldr	s15, [r7]
 80033ca:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8003388 <_Z14LineSensorTaskv+0x574>
 80033ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033d2:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 80033d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033da:	edc7 7a00 	vstr	s15, [r7]
					line_position += ls_data.adc_values_r[i] * i;
					denominator += ls_data.adc_values_r[i];
				}
				line_position = ((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				*/
				ls_data.rear.push_back(line_position);
 80033de:	463b      	mov	r3, r7
 80033e0:	4619      	mov	r1, r3
 80033e2:	4810      	ldr	r0, [pc, #64]	; (8003424 <_Z14LineSensorTaskv+0x610>)
 80033e4:	f000 f885 	bl	80034f2 <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_rear = SENSOR_COUNT + 1;
 80033e8:	2321      	movs	r3, #33	; 0x21
 80033ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cluster_end_rear = SENSOR_COUNT + 1;
 80033ee:	2321      	movs	r3, #33	; 0x21
 80033f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 80033f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80033f8:	3301      	adds	r3, #1
 80033fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80033fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003402:	2b1f      	cmp	r3, #31
 8003404:	f67f af52 	bls.w	80032ac <_Z14LineSensorTaskv+0x498>
			}
		}
	}


	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8003408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <_Z14LineSensorTaskv+0x614>)
 8003412:	4a06      	ldr	r2, [pc, #24]	; (800342c <_Z14LineSensorTaskv+0x618>)
 8003414:	4906      	ldr	r1, [pc, #24]	; (8003430 <_Z14LineSensorTaskv+0x61c>)
 8003416:	4807      	ldr	r0, [pc, #28]	; (8003434 <_Z14LineSensorTaskv+0x620>)
 8003418:	f7ff fc0e 	bl	8002c38 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>
	//ls_data.position_front = -1.0f * ls_data.position_front * 2.5f / 100.0f / denominator_f;
	//ls_data.position_rear = ls_data.position_rear * 2.5f / 100.0f / denominator_r;


#endif
}
 800341c:	bf00      	nop
 800341e:	3750      	adds	r7, #80	; 0x50
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000294 	.word	0x20000294
 8003428:	20000088 	.word	0x20000088
 800342c:	20000080 	.word	0x20000080
 8003430:	2000007c 	.word	0x2000007c
 8003434:	20000074 	.word	0x20000074

08003438 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f87b 	bl	800353c <_ZNSaIfEC1Ev>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f883 	bl	8003554 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003486:	461a      	mov	r2, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f877 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fb4f 	bl	8002b34 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80034a0:	b5b0      	push	{r4, r5, r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681c      	ldr	r4, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f875 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80034b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034ba:	461a      	mov	r2, r3
 80034bc:	4629      	mov	r1, r5
 80034be:	4620      	mov	r0, r4
 80034c0:	f000 f87a 	bl	80035b8 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ffd1 	bl	800346e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bdb0      	pop	{r4, r5, r7, pc}

080034d6 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f875 	bl	80035d4 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d00c      	beq.n	8003522 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	f000 f895 	bl	8003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	1d1a      	adds	r2, r3, #4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	605a      	str	r2, [r3, #4]
      }
 8003520:	e008      	b.n	8003534 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f89e 	bl	8003664 <_ZNSt6vectorIfSaIfEE3endEv>
 8003528:	4603      	mov	r3, r0
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8aa 	bl	8003688 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f91b 	bl	8003780 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
	{ }
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	if (__p)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f8fe 	bl	8003796 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f904 	bl	80037d4 <_ZSt8_DestroyIPfEvT_S1_>
    }
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	109b      	asrs	r3, r3, #2
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00e      	beq.n	800360e <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ffd3 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80035fc:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80035fe:	461a      	mov	r2, r3
 8003600:	4621      	mov	r1, r4
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f7ff ffd8 	bl	80035b8 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}

08003616 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8003616:	b590      	push	{r4, r7, lr}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f000 f8ed 	bl	8003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003626:	4603      	mov	r3, r0
 8003628:	681c      	ldr	r4, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	2004      	movs	r0, #4
 8003630:	f7ff fa74 	bl	8002b1c <_ZnwjPv>
 8003634:	4603      	mov	r3, r0
 8003636:	601c      	str	r4, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}

08003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8d7 	bl	8003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003652:	4603      	mov	r3, r0
 8003654:	4619      	mov	r1, r3
 8003656:	68b8      	ldr	r0, [r7, #8]
 8003658:	f7ff ffdd 	bl	8003616 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f8cd 	bl	8003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003688:	b5b0      	push	{r4, r5, r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003694:	4a39      	ldr	r2, [pc, #228]	; (800377c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 8003696:	2101      	movs	r1, #1
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f8cc 	bl	8003836 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800369e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f909 	bl	80038c4 <_ZNSt6vectorIfSaIfEE5beginEv>
 80036b2:	4603      	mov	r3, r0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	f107 0214 	add.w	r2, r7, #20
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f90f 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80036c6:	4603      	mov	r3, r0
 80036c8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f91d 	bl	800390e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80036d4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80036da:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	18d5      	adds	r5, r2, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f88b 	bl	8003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	4629      	mov	r1, r5
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff ffa5 	bl	8003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f92d 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003704:	4603      	mov	r3, r0
 8003706:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff49 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003710:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	4621      	mov	r1, r4
 8003716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003718:	f000 f90d 	bl	8003936 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 800371c:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	3304      	adds	r3, #4
 8003722:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003724:	f107 0308 	add.w	r3, r7, #8
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f918 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800372e:	4603      	mov	r3, r0
 8003730:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff34 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800373a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003740:	4620      	mov	r0, r4
 8003742:	f000 f8f8 	bl	8003936 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8003746:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003748:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003754:	461a      	mov	r2, r3
 8003756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003758:	f7ff ff10 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	441a      	add	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]
    }
 8003774:	bf00      	nop
 8003776:	3730      	adds	r7, #48	; 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bdb0      	pop	{r4, r5, r7, pc}
 800377c:	08025720 	.word	0x08025720

08003780 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003796:	b580      	push	{r7, lr}
 8003798:	b088      	sub	sp, #32
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80037ae:	f7ff f9ad 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	  {
	    ::operator delete(__p);
 80037b8:	69b8      	ldr	r0, [r7, #24]
 80037ba:	f01d faef 	bl	8020d9c <_ZdlPv>
	    return;
 80037be:	e005      	b.n	80037cc <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	69f8      	ldr	r0, [r7, #28]
 80037c6:	f000 f96a 	bl	8003a9e <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80037de:	f7ff f995 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80037e8:	6839      	ldr	r1, [r7, #0]
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8c2 	bl	8003974 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 80037f0:	e003      	b.n	80037fa <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8d6 	bl	80039a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003836:	b590      	push	{r4, r7, lr}
 8003838:	b087      	sub	sp, #28
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f8ba 	bl	80039bc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003848:	4604      	mov	r4, r0
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f8c7 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003850:	4603      	mov	r3, r0
 8003852:	1ae2      	subs	r2, r4, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	bf34      	ite	cc
 800385a:	2301      	movcc	r3, #1
 800385c:	2300      	movcs	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f01d fab7 	bl	8020dd8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f8b7 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003870:	4604      	mov	r4, r0
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f8b3 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003878:	4603      	mov	r3, r0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	f107 0208 	add.w	r2, r7, #8
 8003880:	f107 0310 	add.w	r3, r7, #16
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f8b9 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 800388c:	4603      	mov	r3, r0
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4423      	add	r3, r4
 8003892:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f8a2 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800389a:	4602      	mov	r2, r0
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4293      	cmp	r3, r2
 80038a0:	d306      	bcc.n	80038b0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f88a 	bl	80039bc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80038a8:	4602      	mov	r2, r0
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d904      	bls.n	80038ba <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f883 	bl	80039bc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80038b6:	4603      	mov	r3, r0
 80038b8:	e000      	b.n	80038bc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 80038ba:	697b      	ldr	r3, [r7, #20]
      }
 80038bc:	4618      	mov	r0, r3
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}

080038c4 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff9e 	bl	8003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f835 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	681c      	ldr	r4, [r3, #0]
 80038f8:	6838      	ldr	r0, [r7, #0]
 80038fa:	f000 f830 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80038fe:	4603      	mov	r3, r0
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	1ae3      	subs	r3, r4, r3
 8003904:	109b      	asrs	r3, r3, #2
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bd90      	pop	{r4, r7, pc}

0800390e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f87f 	bl	8003a26 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003928:	4603      	mov	r3, r0
 800392a:	e000      	b.n	800392e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800392c:	2300      	movs	r3, #0
      }
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b087      	sub	sp, #28
 800393a:	af02      	add	r7, sp, #8
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003944:	f88d 4000 	strb.w	r4, [sp]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f889 	bl	8003a66 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8003954:	4603      	mov	r3, r0
      }
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bd90      	pop	{r4, r7, pc}

0800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800397e:	e009      	b.n	8003994 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f89b 	bl	8003abc <_ZSt11__addressofIfEPT_RS0_>
 8003986:	4603      	mov	r3, r0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 f8a2 	bl	8003ad2 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d1f1      	bne.n	8003980 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f8b4 	bl	8003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f896 	bl	8003b00 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	109b      	asrs	r3, r3, #2
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d201      	bcs.n	8003a18 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	e000      	b.n	8003a1a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003a18:	687b      	ldr	r3, [r7, #4]
    }
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8003a38:	f7ff f868 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f01d f9ac 	bl	8020da4 <_Znwj>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	e006      	b.n	8003a5e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f8b5 	bl	8003bc4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	bf00      	nop
      { return __a.allocate(__n); }
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f865 	bl	8003b4a <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8003a80:	4603      	mov	r3, r0
      }
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
    }
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	68b8      	ldr	r0, [r7, #8]
 8003ab2:	f01d f975 	bl	8020da0 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ffd5 	bl	8003a8a <_ZSt10destroy_atIfEvPT_>
    }
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8003af0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003b08:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003b0c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffea 	bl	8003ae8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003b14:	4603      	mov	r3, r0
 8003b16:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003b18:	f107 0208 	add.w	r2, r7, #8
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f82e 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	681b      	ldr	r3, [r3, #0]
      }
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003b4a:	b5b0      	push	{r4, r5, r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f85d 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 8003b5e:	4604      	mov	r4, r0
 8003b60:	68b8      	ldr	r0, [r7, #8]
 8003b62:	f000 f859 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 8003b66:	4605      	mov	r5, r0
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f855 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4629      	mov	r1, r5
 8003b74:	4620      	mov	r0, r4
 8003b76:	f000 f85a 	bl	8003c2e <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8003b7a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bdb0      	pop	{r4, r5, r7, pc}

08003b84 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d201      	bcs.n	8003b9e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	e000      	b.n	8003ba0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003b9e:	687b      	ldr	r3, [r7, #4]
    }
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003bb4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff ffeb 	bl	8003bac <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	bf8c      	ite	hi
 8003bde:	2301      	movhi	r3, #1
 8003be0:	2300      	movls	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d301      	bcc.n	8003bfe <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003bfa:	f01d f8ea 	bl	8020dd2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003bfe:	f01d f8e5 	bl	8020dcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f01d f8cc 	bl	8020da4 <_Znwj>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	bf00      	nop
      }
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_ZSt12__niter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	109b      	asrs	r3, r3, #2
 8003c44:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	dd06      	ble.n	8003c5a <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f020 fa76 	bl	8024146 <memmove>
      return __result + __count;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
    }
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <_ZN16LineSensorData_sD1Ev>:
	float position_front;
	float position_rear;

	std::vector<float> front;
	std::vector<float> rear;
}LineSensorData_s;
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	33d4      	adds	r3, #212	; 0xd4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fc12 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	33c8      	adds	r3, #200	; 0xc8
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fc0d 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_Z41__static_initialization_and_destruction_0ii>:
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d116      	bne.n	8003cce <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d111      	bne.n	8003cce <_Z41__static_initialization_and_destruction_0ii+0x3e>
LineSensorData_s ls_data = {0u};
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cac:	33c8      	adds	r3, #200	; 0xc8
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003cb8:	f7fe ff55 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cbe:	33d4      	adds	r3, #212	; 0xd4
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	480a      	ldr	r0, [pc, #40]	; (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003cca:	f7fe ff4c 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d102      	bne.n	8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8003cde:	4803      	ldr	r0, [pc, #12]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003ce0:	f7ff ffc3 	bl	8003c6a <_ZN16LineSensorData_sD1Ev>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	200001c0 	.word	0x200001c0
 8003cf0:	20000288 	.word	0x20000288
 8003cf4:	20000294 	.word	0x20000294

08003cf8 <_GLOBAL__sub_I_ls_data>:
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d00:	2001      	movs	r0, #1
 8003d02:	f7ff ffc5 	bl	8003c90 <_Z41__static_initialization_and_destruction_0ii>
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_GLOBAL__sub_D_ls_data>:
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7ff ffbd 	bl	8003c90 <_Z41__static_initialization_and_destruction_0ii>
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d26:	eef0 7ae7 	vabs.f32	s15, s15
 8003d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d42:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d4a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d52:	bf6c      	ite	vs
 8003d54:	2301      	movvs	r3, #1
 8003d56:	2300      	movvc	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_ZN3PIDC1Efffffffff>:
#include <algorithm>

class PID
{
public:
    PID(float kp, float ki, float kd, float tau, float T, float minOutput, float maxOutput, float deadband, float derivativeFilterAlpha)
 8003d70:	b480      	push	{r7}
 8003d72:	b08b      	sub	sp, #44	; 0x2c
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24
 8003d78:	ed87 0a08 	vstr	s0, [r7, #32]
 8003d7c:	edc7 0a07 	vstr	s1, [r7, #28]
 8003d80:	ed87 1a06 	vstr	s2, [r7, #24]
 8003d84:	edc7 1a05 	vstr	s3, [r7, #20]
 8003d88:	ed87 2a04 	vstr	s4, [r7, #16]
 8003d8c:	edc7 2a03 	vstr	s5, [r7, #12]
 8003d90:	ed87 3a02 	vstr	s6, [r7, #8]
 8003d94:	edc7 3a01 	vstr	s7, [r7, #4]
 8003d98:	ed87 4a00 	vstr	s8, [r7]
        : kp_(kp), ki_(ki), kd_(kd), tau_(tau), T_(T), minOutput_(minOutput), maxOutput_(maxOutput), deadband_(deadband), derivativeFilterAlpha_(derivativeFilterAlpha)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	611a      	str	r2, [r3, #16]
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	615a      	str	r2, [r3, #20]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	619a      	str	r2, [r3, #24]
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	61da      	str	r2, [r3, #28]
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	621a      	str	r2, [r3, #32]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	4618      	mov	r0, r3
 8003dee:	372c      	adds	r7, #44	; 0x2c
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <_ZN3PIDD1Ev>:

    ~PID() {}
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <_ZN3PID6updateEfff>:
    	kp_                    = kp;
		ki_                    = ki;
		kd_                    = kd;
    }

    float update(float setpoint, float processVariable, float dt)
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e20:	ed87 1a00 	vstr	s2, [r7]
    {
        // Small value to avoid division by zero
        const float epsilon = std::numeric_limits<float>::epsilon();
 8003e24:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30

        // Check if the time step is very close to zero, return zero output to avoid numerical issues
        if (std::abs(dt) < epsilon) { return 0.0f; }
 8003e2a:	ed97 0a00 	vldr	s0, [r7]
 8003e2e:	f7ff ff73 	bl	8003d18 <_ZSt3absf>
 8003e32:	eef0 7a40 	vmov.f32	s15, s0
 8003e36:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80040c8 <_ZN3PID6updateEfff+0x2b8>
 8003e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	bf4c      	ite	mi
 8003e44:	2301      	movmi	r3, #1
 8003e46:	2300      	movpl	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <_ZN3PID6updateEfff+0x44>
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e132      	b.n	80040ba <_ZN3PID6updateEfff+0x2aa>

        // Calculate the current error between the setpoint and the process variable
        float error = setpoint - processVariable;
 8003e54:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e58:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        // Check if a zero-crossing has occurred (change in sign of error)
        bool zeroCrossed = (prevError_ * error) < 0.0f;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003e6a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7a:	bf4c      	ite	mi
 8003e7c:	2301      	movmi	r3, #1
 8003e7e:	2300      	movpl	r3, #0
 8003e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        // Update the integral term if no zero-crossing has occurred
        if (!zeroCrossed)
 8003e84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e88:	f083 0301 	eor.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d062      	beq.n	8003f58 <_ZN3PID6updateEfff+0x148>
        {
            // Calculate the integral term without considering saturation
            float unsaturatedIntegral = integral_;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34

            // Integrate positive error if within bounds
            if (error > 0.0f && unsaturatedIntegral < maxOutput_) { unsaturatedIntegral += (error * dt); }
 8003e98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea4:	dd16      	ble.n	8003ed4 <_ZN3PID6updateEfff+0xc4>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003eac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb8:	d50c      	bpl.n	8003ed4 <_ZN3PID6updateEfff+0xc4>
 8003eba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003ebe:	edd7 7a00 	vldr	s15, [r7]
 8003ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ece:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003ed2:	e01c      	b.n	8003f0e <_ZN3PID6updateEfff+0xfe>
            // Integrate negative error if within bounds
            else if (error < 0.0f && unsaturatedIntegral > minOutput_) { unsaturatedIntegral += (error * dt); }
 8003ed4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	d515      	bpl.n	8003f0e <_ZN3PID6updateEfff+0xfe>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ee8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef4:	dd0b      	ble.n	8003f0e <_ZN3PID6updateEfff+0xfe>
 8003ef6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003efa:	edd7 7a00 	vldr	s15, [r7]
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

            // Handle NaN case: Reset unsaturated integral term to zero
            if (std::isnan(unsaturatedIntegral)) { unsaturatedIntegral = 0.0f; }
 8003f0e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003f12:	f7ff ff11 	bl	8003d38 <_ZSt5isnanf>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <_ZN3PID6updateEfff+0x112>
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34

            // Calculate the adjustment needed due to saturation
            float deltaIntegral = unsaturatedIntegral - integral_;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003f28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f30:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            // Back-calculation: Adjust the integral term based on the impact of saturation
            integral_ += (error * dt) - deltaIntegral;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003f3a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003f3e:	edd7 7a00 	vldr	s15, [r7]
 8003f42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        {
            // Zero-crossing deadband: Do not update the integral term
        }

        // Anti-windup: Limit the integral term to the specified range
        integral_ = std::clamp(integral_, minOutput_, maxOutput_);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f103 0114 	add.w	r1, r3, #20
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3318      	adds	r3, #24
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f000 f9b5 	bl	80042d8 <_ZSt5clampIfERKT_S2_S2_S2_>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	629a      	str	r2, [r3, #40]	; 0x28

        // Deadband: Scale the integral term based on the proximity to the deadband
        float deadbandFactor = 1.0f - std::min(1.0f, std::abs(error) / (deadband_ + epsilon));
 8003f76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003f80:	f7ff feca 	bl	8003d18 <_ZSt3absf>
 8003f84:	eef0 6a40 	vmov.f32	s13, s0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f8e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80040c8 <_ZN3PID6updateEfff+0x2b8>
 8003f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9a:	edc7 7a07 	vstr	s15, [r7, #28]
 8003f9e:	f107 021c 	add.w	r2, r7, #28
 8003fa2:	f107 0318 	add.w	r3, r7, #24
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f9bc 	bl	8004326 <_ZSt3minIfERKT_S2_S2_>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fbc:	edc7 7a08 	vstr	s15, [r7, #32]
        integral_ *= deadbandFactor;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003fc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

        // Calculate the derivative term with low-pass filtering
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	edd3 6a08 	vldr	s13, [r3, #32]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003ff8:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8003ffc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004000:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004004:	edd7 6a00 	vldr	s13, [r7]
 8004008:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800400c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

        // Calculate the PID controller output using proportional, integral, and derivative terms
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	ed93 7a00 	vldr	s14, [r3]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	edd3 7a04 	vldr	s15, [r3, #16]
 8004028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040c8 <_ZN3PID6updateEfff+0x2b8>
 8004030:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004034:	ed97 6a00 	vldr	s12, [r7]
 8004038:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800403c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004048:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800404c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	edd3 6a01 	vldr	s13, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	edd3 7a04 	vldr	s15, [r3, #16]
 800405c:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80040c8 <_ZN3PID6updateEfff+0x2b8>
 8004060:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004064:	edd7 5a00 	vldr	s11, [r7]
 8004068:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800406c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800407a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	edd3 6a02 	vldr	s13, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800408a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004092:	edc7 7a05 	vstr	s15, [r7, #20]

        // Output clamping: Limit the output within the specified range
        output = std::clamp(output, minOutput_, maxOutput_);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f103 0114 	add.w	r1, r3, #20
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f103 0218 	add.w	r2, r3, #24
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f916 	bl	80042d8 <_ZSt5clampIfERKT_S2_S2_S2_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	617b      	str	r3, [r7, #20]

        // Update the previous error for the next iteration
        prevError_ = error;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

        // Return the calculated PID controller output
        return output;
 80040b8:	697b      	ldr	r3, [r7, #20]
    }
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eeb0 0a67 	vmov.f32	s0, s15
 80040c2:	3738      	adds	r7, #56	; 0x38
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	34000000 	.word	0x34000000

080040cc <_Z16MotorControlTaskv>:
float pi_integral_error = 0.0f;

PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};

void MotorControlTask()
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 80040d0:	4b71      	ldr	r3, [pc, #452]	; (8004298 <_Z16MotorControlTaskv+0x1cc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80040d8:	d90a      	bls.n	80040f0 <_Z16MotorControlTaskv+0x24>
 80040da:	4b6f      	ldr	r3, [pc, #444]	; (8004298 <_Z16MotorControlTaskv+0x1cc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80040e2:	d205      	bcs.n	80040f0 <_Z16MotorControlTaskv+0x24>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 80040e4:	2201      	movs	r2, #1
 80040e6:	2108      	movs	r1, #8
 80040e8:	486c      	ldr	r0, [pc, #432]	; (800429c <_Z16MotorControlTaskv+0x1d0>)
 80040ea:	f012 fa9d 	bl	8016628 <HAL_GPIO_WritePin>
 80040ee:	e00c      	b.n	800410a <_Z16MotorControlTaskv+0x3e>
	}
	else
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 80040f0:	2200      	movs	r2, #0
 80040f2:	2108      	movs	r1, #8
 80040f4:	4869      	ldr	r0, [pc, #420]	; (800429c <_Z16MotorControlTaskv+0x1d0>)
 80040f6:	f012 fa97 	bl	8016628 <HAL_GPIO_WritePin>
		motorcontrol.target_velocity = 0.0f;
 80040fa:	4b69      	ldr	r3, [pc, #420]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
		pi_integral_error = 0.0f;
 8004102:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <_Z16MotorControlTaskv+0x1d8>)
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
	}
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 800410a:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <_Z16MotorControlTaskv+0x1dc>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004116:	eddf 6a65 	vldr	s13, [pc, #404]	; 80042ac <_Z16MotorControlTaskv+0x1e0>
 800411a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800411e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80042b0 <_Z16MotorControlTaskv+0x1e4>
 8004122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004126:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800412a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800412e:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 8004130:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8004134:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <_Z16MotorControlTaskv+0x1dc>)
 8004136:	885b      	ldrh	r3, [r3, #2]
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004140:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80042ac <_Z16MotorControlTaskv+0x1e0>
 8004144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004148:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80042b0 <_Z16MotorControlTaskv+0x1e4>
 800414c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004150:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80042b4 <_Z16MotorControlTaskv+0x1e8>
 8004154:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004158:	eddf 6a57 	vldr	s13, [pc, #348]	; 80042b8 <_Z16MotorControlTaskv+0x1ec>
 800415c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 8004162:	edc3 7a01 	vstr	s15, [r3, #4]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
	pi_integral_error += pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
	motorcontrol.duty_cycle = pi_integral_error + pi_proportional_error;
	*/

	motorcontrol.duty_cycle = motorcontrol_pid.update(motorcontrol.target_velocity, motorcontrol.actual_velocity, 0.005f);
 8004166:	4b4e      	ldr	r3, [pc, #312]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 8004168:	edd3 7a03 	vldr	s15, [r3, #12]
 800416c:	4b4c      	ldr	r3, [pc, #304]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 800416e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004172:	ed9f 1a52 	vldr	s2, [pc, #328]	; 80042bc <_Z16MotorControlTaskv+0x1f0>
 8004176:	eef0 0a47 	vmov.f32	s1, s14
 800417a:	eeb0 0a67 	vmov.f32	s0, s15
 800417e:	4850      	ldr	r0, [pc, #320]	; (80042c0 <_Z16MotorControlTaskv+0x1f4>)
 8004180:	f7ff fe46 	bl	8003e10 <_ZN3PID6updateEfff>
 8004184:	eef0 7a40 	vmov.f32	s15, s0
 8004188:	4b45      	ldr	r3, [pc, #276]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 800418a:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle += 0.5f;
 800418e:	4b44      	ldr	r3, [pc, #272]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 8004190:	edd3 7a04 	vldr	s15, [r3, #16]
 8004194:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800419c:	4b40      	ldr	r3, [pc, #256]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 800419e:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80041a8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80042c4 <_Z16MotorControlTaskv+0x1f8>
 80041ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	dd01      	ble.n	80041ba <_Z16MotorControlTaskv+0xee>
 80041b6:	4b44      	ldr	r3, [pc, #272]	; (80042c8 <_Z16MotorControlTaskv+0x1fc>)
 80041b8:	e001      	b.n	80041be <_Z16MotorControlTaskv+0xf2>
 80041ba:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	4a38      	ldr	r2, [pc, #224]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041c0:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.5f) ? 0.05f : motorcontrol.duty_cycle;
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80041c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d4:	d501      	bpl.n	80041da <_Z16MotorControlTaskv+0x10e>
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <_Z16MotorControlTaskv+0x200>)
 80041d8:	e001      	b.n	80041de <_Z16MotorControlTaskv+0x112>
 80041da:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4a30      	ldr	r2, [pc, #192]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041e0:	6113      	str	r3, [r2, #16]


	if((motorcontrol.target_velocity == 0.0f) && (motorcontrol.actual_velocity < 1.0f) && (motorcontrol.actual_velocity >= -1.0f))
 80041e2:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80041e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f0:	d117      	bne.n	8004222 <_Z16MotorControlTaskv+0x156>
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80041f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	d50d      	bpl.n	8004222 <_Z16MotorControlTaskv+0x156>
 8004206:	4b26      	ldr	r3, [pc, #152]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 8004208:	edd3 7a02 	vldr	s15, [r3, #8]
 800420c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004218:	db03      	blt.n	8004222 <_Z16MotorControlTaskv+0x156>
	{
		motorcontrol.duty_cycle = 0.5f;
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 800421c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004220:	611a      	str	r2, [r3, #16]
	}

	if(motorcontrol.target_velocity >= motorcontrol.actual_velocity && motorcontrol.duty_cycle < 0.5f)
 8004222:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 8004224:	ed93 7a03 	vldr	s14, [r3, #12]
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 800422a:	edd3 7a02 	vldr	s15, [r3, #8]
 800422e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	db0d      	blt.n	8004254 <_Z16MotorControlTaskv+0x188>
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 800423a:	edd3 7a04 	vldr	s15, [r3, #16]
 800423e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424a:	d503      	bpl.n	8004254 <_Z16MotorControlTaskv+0x188>
	{
		motorcontrol.duty_cycle = 0.5f;
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 800424e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004252:	611a      	str	r2, [r3, #16]

	}

	//float duty_cycle = 0.6f;
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 8004256:	edd3 7a04 	vldr	s15, [r3, #16]
 800425a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80042d0 <_Z16MotorControlTaskv+0x204>
 800425e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <_Z16MotorControlTaskv+0x208>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426a:	ee17 2a90 	vmov	r2, s15
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 8004272:	edd3 7a04 	vldr	s15, [r3, #16]
 8004276:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80042d0 <_Z16MotorControlTaskv+0x204>
 800427a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800427e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80042d0 <_Z16MotorControlTaskv+0x204>
 8004282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <_Z16MotorControlTaskv+0x208>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428e:	ee17 2a90 	vmov	r2, s15
 8004292:	635a      	str	r2, [r3, #52]	; 0x34

}
 8004294:	bf00      	nop
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000300 	.word	0x20000300
 800429c:	42021400 	.word	0x42021400
 80042a0:	200002a0 	.word	0x200002a0
 80042a4:	200002b4 	.word	0x200002b4
 80042a8:	2000014c 	.word	0x2000014c
 80042ac:	45800000 	.word	0x45800000
 80042b0:	40533333 	.word	0x40533333
 80042b4:	3fd47ae1 	.word	0x3fd47ae1
 80042b8:	3c0ce704 	.word	0x3c0ce704
 80042bc:	3ba3d70a 	.word	0x3ba3d70a
 80042c0:	200002b8 	.word	0x200002b8
 80042c4:	3f733333 	.word	0x3f733333
 80042c8:	3f733333 	.word	0x3f733333
 80042cc:	3d4ccccd 	.word	0x3d4ccccd
 80042d0:	44e54000 	.word	0x44e54000
 80042d4:	20000ba0 	.word	0x20000ba0

080042d8 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	ed93 7a00 	vldr	s14, [r3]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f8:	d501      	bpl.n	80042fe <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	e00d      	b.n	800431a <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	ed93 7a00 	vldr	s14, [r3]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	edd3 7a00 	vldr	s15, [r3]
 800430a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004312:	d501      	bpl.n	8004318 <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	e000      	b.n	800431a <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8004318:	68fb      	ldr	r3, [r7, #12]
    }
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	ed93 7a00 	vldr	s14, [r3]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	edd3 7a00 	vldr	s15, [r3]
 800433c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004344:	d501      	bpl.n	800434a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	e000      	b.n	800434c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800434a:	687b      	ldr	r3, [r7, #4]
    }
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <_Z41__static_initialization_and_destruction_0ii>:
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d119      	bne.n	800439c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800436e:	4293      	cmp	r3, r2
 8004370:	d114      	bne.n	800439c <_Z41__static_initialization_and_destruction_0ii+0x44>
PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};
 8004372:	ed9f 4a12 	vldr	s8, [pc, #72]	; 80043bc <_Z41__static_initialization_and_destruction_0ii+0x64>
 8004376:	eddf 3a11 	vldr	s7, [pc, #68]	; 80043bc <_Z41__static_initialization_and_destruction_0ii+0x64>
 800437a:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800437e:	eefe 2a00 	vmov.f32	s5, #224	; 0xbf000000 -0.5
 8004382:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 80043c0 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8004386:	eddf 1a0f 	vldr	s3, [pc, #60]	; 80043c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 800438a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80043bc <_Z41__static_initialization_and_destruction_0ii+0x64>
 800438e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80043c8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8004392:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80043cc <_Z41__static_initialization_and_destruction_0ii+0x74>
 8004396:	480e      	ldr	r0, [pc, #56]	; (80043d0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004398:	f7ff fcea 	bl	8003d70 <_ZN3PIDC1Efffffffff>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d107      	bne.n	80043b2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d102      	bne.n	80043b2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80043ac:	4808      	ldr	r0, [pc, #32]	; (80043d0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80043ae:	f7ff fd23 	bl	8003df8 <_ZN3PIDD1Ev>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	00000000 	.word	0x00000000
 80043c0:	3ba3d70a 	.word	0x3ba3d70a
 80043c4:	3d4ccccd 	.word	0x3d4ccccd
 80043c8:	3fb5c28f 	.word	0x3fb5c28f
 80043cc:	3e2d0e56 	.word	0x3e2d0e56
 80043d0:	200002b8 	.word	0x200002b8

080043d4 <_GLOBAL__sub_I_motorcontrol>:
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043dc:	2001      	movs	r0, #1
 80043de:	f7ff ffbb 	bl	8004358 <_Z41__static_initialization_and_destruction_0ii>
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_GLOBAL__sub_D_motorcontrol>:
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043ec:	2000      	movs	r0, #0
 80043ee:	f7ff ffb3 	bl	8004358 <_Z41__static_initialization_and_destruction_0ii>
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 80043f8:	220c      	movs	r2, #12
 80043fa:	4903      	ldr	r1, [pc, #12]	; (8004408 <_Z10Radio_Initv+0x14>)
 80043fc:	4803      	ldr	r0, [pc, #12]	; (800440c <_Z10Radio_Initv+0x18>)
 80043fe:	f017 fefb 	bl	801c1f8 <HAL_UART_Receive_IT>

}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200002e8 	.word	0x200002e8
 800440c:	2000088c 	.word	0x2000088c

08004410 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af02      	add	r7, sp, #8
 8004416:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e009      	b.n	8004432 <HAL_UART_RxCpltCallback+0x22>
    {
    	if(radio_rxBuffer[i] == '\r')
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <HAL_UART_RxCpltCallback+0x94>)
 8004422:	5cd3      	ldrb	r3, [r2, r3]
 8004424:	2b0d      	cmp	r3, #13
 8004426:	d101      	bne.n	800442c <HAL_UART_RxCpltCallback+0x1c>
    	{
    		length = i;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	3301      	adds	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b0b      	cmp	r3, #11
 8004436:	d9f2      	bls.n	800441e <HAL_UART_RxCpltCallback+0xe>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 8004438:	7bbb      	ldrb	r3, [r7, #14]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d103      	bne.n	8004446 <HAL_UART_RxCpltCallback+0x36>
    {
    	countdown_value = radio_rxBuffer[0];
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_UART_RxCpltCallback+0x94>)
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_UART_RxCpltCallback+0x98>)
 8004444:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 8004446:	7bbb      	ldrb	r3, [r7, #14]
 8004448:	2b06      	cmp	r3, #6
 800444a:	d115      	bne.n	8004478 <HAL_UART_RxCpltCallback+0x68>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 800444c:	4915      	ldr	r1, [pc, #84]	; (80044a4 <HAL_UART_RxCpltCallback+0x94>)
 800444e:	4817      	ldr	r0, [pc, #92]	; (80044ac <HAL_UART_RxCpltCallback+0x9c>)
 8004450:	f7fb fef6 	bl	8000240 <strcmp>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_UART_RxCpltCallback+0x52>
    	{
    		flood_active = true;
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <HAL_UART_RxCpltCallback+0xa0>)
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e010      	b.n	8004484 <HAL_UART_RxCpltCallback+0x74>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_UART_RxCpltCallback+0xa4>)
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <HAL_UART_RxCpltCallback+0xa8>)
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <HAL_UART_RxCpltCallback+0xac>)
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_UART_RxCpltCallback+0xb0>)
 800446e:	4915      	ldr	r1, [pc, #84]	; (80044c4 <HAL_UART_RxCpltCallback+0xb4>)
 8004470:	480c      	ldr	r0, [pc, #48]	; (80044a4 <HAL_UART_RxCpltCallback+0x94>)
 8004472:	f01f fdf7 	bl	8024064 <siscanf>
 8004476:	e005      	b.n	8004484 <HAL_UART_RxCpltCallback+0x74>
    	}
    }

    else
    {
    	flood_counter++;
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_UART_RxCpltCallback+0xb8>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	b2da      	uxtb	r2, r3
 8004480:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <HAL_UART_RxCpltCallback+0xb8>)
 8004482:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_UART_RxCpltCallback+0xb8>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b0a      	cmp	r3, #10
 800448a:	d902      	bls.n	8004492 <HAL_UART_RxCpltCallback+0x82>
    {
    	flood_active = false;
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_UART_RxCpltCallback+0xa0>)
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8004492:	220c      	movs	r2, #12
 8004494:	4903      	ldr	r1, [pc, #12]	; (80044a4 <HAL_UART_RxCpltCallback+0x94>)
 8004496:	480d      	ldr	r0, [pc, #52]	; (80044cc <HAL_UART_RxCpltCallback+0xbc>)
 8004498:	f017 feae 	bl	801c1f8 <HAL_UART_Receive_IT>

}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	200002e8 	.word	0x200002e8
 80044a8:	2000008c 	.word	0x2000008c
 80044ac:	0802573c 	.word	0x0802573c
 80044b0:	200002f4 	.word	0x200002f4
 80044b4:	200002fc 	.word	0x200002fc
 80044b8:	200002f8 	.word	0x200002f8
 80044bc:	200002f7 	.word	0x200002f7
 80044c0:	200002f6 	.word	0x200002f6
 80044c4:	08025744 	.word	0x08025744
 80044c8:	200002f5 	.word	0x200002f5
 80044cc:	2000088c 	.word	0x2000088c

080044d0 <_Z16SetSteeringAnglef>:
uint8_t Is_First_Captured = 0;


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	ed87 0a01 	vstr	s0, [r7, #4]
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <_Z16SetSteeringAnglef+0x64>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80044e2:	d91c      	bls.n	800451e <_Z16SetSteeringAnglef+0x4e>
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <_Z16SetSteeringAnglef+0x64>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80044ec:	d217      	bcs.n	800451e <_Z16SetSteeringAnglef+0x4e>
	{
		uint16_t compare = SERVO_NULL + (angle/ 21.5f * SERVO_RANGE);
 80044ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80044f2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004538 <_Z16SetSteeringAnglef+0x68>
 80044f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800453c <_Z16SetSteeringAnglef+0x6c>
 80044fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004502:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004540 <_Z16SetSteeringAnglef+0x70>
 8004506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800450a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450e:	ee17 3a90 	vmov	r3, s15
 8004512:	81fb      	strh	r3, [r7, #14]
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);	}
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <_Z16SetSteeringAnglef+0x74>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	89fa      	ldrh	r2, [r7, #14]
 800451a:	635a      	str	r2, [r3, #52]	; 0x34
 800451c:	e004      	b.n	8004528 <_Z16SetSteeringAnglef+0x58>
	else
	{
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <_Z16SetSteeringAnglef+0x74>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	20000300 	.word	0x20000300
 8004538:	41ac0000 	.word	0x41ac0000
 800453c:	43c80000 	.word	0x43c80000
 8004540:	44960000 	.word	0x44960000
 8004544:	20000c38 	.word	0x20000c38

08004548 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	// RISING
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	7f1b      	ldrb	r3, [r3, #28]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d104      	bne.n	8004562 <HAL_TIM_IC_CaptureCallback+0x1a>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2200      	movs	r2, #0
 800455e:	625a      	str	r2, [r3, #36]	; 0x24
		float refClock = TIMCLOCK/(PRESCALAR);
		float mFactor = 1000000/refClock;

		usWidth_throttle = falling_value*mFactor;
	}
}
 8004560:	e024      	b.n	80045ac <HAL_TIM_IC_CaptureCallback+0x64>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	7f1b      	ldrb	r3, [r3, #28]
 8004566:	2b08      	cmp	r3, #8
 8004568:	d120      	bne.n	80045ac <HAL_TIM_IC_CaptureCallback+0x64>
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 800456a:	210c      	movs	r1, #12
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f016 fe67 	bl	801b240 <HAL_TIM_ReadCapturedValue>
 8004572:	4603      	mov	r3, r0
 8004574:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8004576:	6013      	str	r3, [r2, #0]
		float refClock = TIMCLOCK/(PRESCALAR);
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800457a:	60fb      	str	r3, [r7, #12]
		float mFactor = 1000000/refClock;
 800457c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80045bc <HAL_TIM_IC_CaptureCallback+0x74>
 8004580:	ed97 7a03 	vldr	s14, [r7, #12]
 8004584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004588:	edc7 7a02 	vstr	s15, [r7, #8]
		usWidth_throttle = falling_value*mFactor;
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004598:	edd7 7a02 	vldr	s15, [r7, #8]
 800459c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a4:	ee17 2a90 	vmov	r2, s15
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_TIM_IC_CaptureCallback+0x78>)
 80045aa:	601a      	str	r2, [r3, #0]
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000304 	.word	0x20000304
 80045b8:	49742400 	.word	0x49742400
 80045bc:	49742400 	.word	0x49742400
 80045c0:	20000300 	.word	0x20000300

080045c4 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	7138      	strb	r0, [r7, #4]
 80045e4:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 80045e6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	09db      	lsrs	r3, r3, #7
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
 8004600:	bf00      	nop
 8004602:	4618      	mov	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	7138      	strb	r0, [r7, #4]
 8004614:	bf00      	nop
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	f1c3 031f 	rsb	r3, r3, #31
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	ed87 0a01 	vstr	s0, [r7, #4]
 800464a:	edc7 0a00 	vstr	s1, [r7]
 800464e:	edd7 0a00 	vldr	s1, [r7]
 8004652:	ed97 0a01 	vldr	s0, [r7, #4]
 8004656:	f01c fcc7 	bl	8020fe8 <atan2f>
 800465a:	eef0 7a40 	vmov.f32	s15, s0
 800465e:	eeb0 0a67 	vmov.f32	s0, s15
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004672:	ed97 0a01 	vldr	s0, [r7, #4]
 8004676:	f01c fcb9 	bl	8020fec <cosf>
 800467a:	eef0 7a40 	vmov.f32	s15, s0
 800467e:	eeb0 0a67 	vmov.f32	s0, s15
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004692:	edd7 7a01 	vldr	s15, [r7, #4]
 8004696:	eef0 7ae7 	vabs.f32	s15, s15
 800469a:	eeb0 0a67 	vmov.f32	s0, s15
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80046b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80046b6:	f01c fcdd 	bl	8021074 <sinf>
 80046ba:	eef0 7a40 	vmov.f32	s15, s0
 80046be:	eeb0 0a67 	vmov.f32	s0, s15
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZNSt7complexIfEC1Eff>:
      typedef float value_type;
      typedef __complex__ float _ComplexT;

      _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }

      _GLIBCXX_CONSTEXPR complex(float __r = 0.0f, float __i = 0.0f)
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80046d4:	edc7 0a01 	vstr	s1, [r7, #4]
#if __cplusplus >= 201103L
      : _M_value{ __r, __i } { }
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6019      	str	r1, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <_ZNKSt7complexIfE4realB5cxx11Ev>:
#if __cplusplus >= 201103L
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // DR 387. std::complex over-encapsulated.
      __attribute ((__abi_tag__ ("cxx11")))
      constexpr float
      real() const { return __real__ _M_value; }
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eeb0 0a67 	vmov.f32	s0, s15
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <_ZNSt7complexIfEmLEf>:
	_M_value -= __f;
	return *this;
      }

      _GLIBCXX20_CONSTEXPR complex&
      operator*=(float __f)
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	ed87 0a00 	vstr	s0, [r7]
      {
	_M_value *= __f;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	ee07 2a10 	vmov	s14, r2
 8004724:	edd7 7a00 	vldr	s15, [r7]
 8004728:	ee27 7a87 	vmul.f32	s14, s15, s14
 800472c:	ee06 3a90 	vmov	s13, r3
 8004730:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004734:	ee17 1a10 	vmov	r1, s14
 8004738:	ee17 2a90 	vmov	r2, s15
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6019      	str	r1, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
	return *this;
 8004742:	687b      	ldr	r3, [r7, #4]
      }
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_ZNKSt7complexIfE5__repEv>:
	  const _ComplexT __t = __z.__rep();
	  _M_value /= __t;
	  return *this;
	}

      _GLIBCXX_CONSTEXPR _ComplexT __rep() const { return _M_value; }
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	ee07 2a10 	vmov	s14, r2
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eeb0 0a47 	vmov.f32	s0, s14
 800476a:	eef0 0a67 	vmov.f32	s1, s15
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        std::vector<float> line_positions_rear;

        Direction direction      = Direction::STRAIGHT;
        Direction prev_direction = Direction::STRAIGHT;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2210      	movs	r2, #16
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2210      	movs	r2, #16
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	615a      	str	r2, [r3, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	619a      	str	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	61da      	str	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	621a      	str	r2, [r3, #32]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	629a      	str	r2, [r3, #40]	; 0x28
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a28      	ldr	r2, [pc, #160]	; (8004884 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x10c>)
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3374      	adds	r3, #116	; 0x74
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe f9bc 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3380      	adds	r3, #128	; 0x80
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe f9b7 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	339c      	adds	r3, #156	; 0x9c
 8004820:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8004888 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x110>
 8004824:	eddf 3a19 	vldr	s7, [pc, #100]	; 800488c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x114>
 8004828:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800482c:	eddf 2a18 	vldr	s5, [pc, #96]	; 8004890 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x118>
 8004830:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8004894 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x11c>
 8004834:	eddf 1a15 	vldr	s3, [pc, #84]	; 800488c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x114>
 8004838:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8004890 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x118>
 800483c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8004898 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x120>
 8004840:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800489c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x124>
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fa93 	bl	8003d70 <_ZN3PIDC1Efffffffff>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	33cc      	adds	r3, #204	; 0xcc
 800484e:	ed9f 4a10 	vldr	s8, [pc, #64]	; 8004890 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x118>
 8004852:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004856:	ed9f 3a12 	vldr	s6, [pc, #72]	; 80048a0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x128>
 800485a:	eddf 2a12 	vldr	s5, [pc, #72]	; 80048a4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x12c>
 800485e:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8004894 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x11c>
 8004862:	eddf 1a0a 	vldr	s3, [pc, #40]	; 800488c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x114>
 8004866:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8004890 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x118>
 800486a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800489c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x124>
 800486e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80048a8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x130>
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fa7c 	bl	8003d70 <_ZN3PIDC1Efffffffff>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	42c80000 	.word	0x42c80000
 8004888:	3dcccccd 	.word	0x3dcccccd
 800488c:	3d4ccccd 	.word	0x3d4ccccd
 8004890:	00000000 	.word	0x00000000
 8004894:	3ba3d70a 	.word	0x3ba3d70a
 8004898:	3f30a3d7 	.word	0x3f30a3d7
 800489c:	40866666 	.word	0x40866666
 80048a0:	41ac0000 	.word	0x41ac0000
 80048a4:	c1ac0000 	.word	0xc1ac0000
 80048a8:	40dccccd 	.word	0x40dccccd

080048ac <_ZN3jlb10ControllerD1Ev>:

        ~Controller() {}
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	33cc      	adds	r3, #204	; 0xcc
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fa9d 	bl	8003df8 <_ZN3PIDD1Ev>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	339c      	adds	r3, #156	; 0x9c
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fa98 	bl	8003df8 <_ZN3PIDD1Ev>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3380      	adds	r3, #128	; 0x80
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe fde7 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3374      	adds	r3, #116	; 0x74
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fde2 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 80048e8:	b590      	push	{r4, r7, lr}
 80048ea:	ed2d 8b02 	vpush	{d8}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            std::sort(line_positions.begin(), line_positions.end());
 80048fa:	68b8      	ldr	r0, [r7, #8]
 80048fc:	f7fe ffe2 	bl	80038c4 <_ZNSt6vectorIfSaIfEE5beginEv>
 8004900:	4604      	mov	r4, r0
 8004902:	68b8      	ldr	r0, [r7, #8]
 8004904:	f7fe feae 	bl	8003664 <_ZNSt6vectorIfSaIfEE3endEv>
 8004908:	4603      	mov	r3, r0
 800490a:	4619      	mov	r1, r3
 800490c:	4620      	mov	r0, r4
 800490e:	f007 fb3b 	bl	800bf88 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1) { return line_positions[0]; }
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f7ff f863 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
 8004928:	2100      	movs	r1, #0
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f007 fb3c 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004930:	4603      	mov	r3, r0
 8004932:	edd3 7a00 	vldr	s15, [r3]
 8004936:	e114      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            else if (line_positions.size() == 2)
 8004938:	68b8      	ldr	r0, [r7, #8]
 800493a:	f7ff f850 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800493e:	4603      	mov	r3, r0
 8004940:	2b02      	cmp	r3, #2
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8096 	beq.w	8004a7c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x194>
            {
                switch (direction)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004956:	2b02      	cmp	r3, #2
 8004958:	d00f      	beq.n	800497a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x92>
 800495a:	2b02      	cmp	r3, #2
 800495c:	f300 808b 	bgt.w	8004a76 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x82>
 8004964:	2b01      	cmp	r3, #1
 8004966:	d07e      	beq.n	8004a66 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x17e>
 8004968:	e085      	b.n	8004a76 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 800496a:	2100      	movs	r1, #0
 800496c:	68b8      	ldr	r0, [r7, #8]
 800496e:	f007 fb1b 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004972:	4603      	mov	r3, r0
 8004974:	edd3 7a00 	vldr	s15, [r3]
 8004978:	e0f3      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        if (direction == prev_direction)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	429a      	cmp	r2, r3
 8004988:	d136      	bne.n	80049f8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
                        {
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 800498a:	2100      	movs	r1, #0
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f007 fb0b 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004992:	4603      	mov	r3, r0
 8004994:	ed93 7a00 	vldr	s14, [r3]
 8004998:	edd7 7a01 	vldr	s15, [r7, #4]
 800499c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049a0:	eeb0 0a67 	vmov.f32	s0, s15
 80049a4:	f7ff fe70 	bl	8004688 <_ZSt4fabsf>
 80049a8:	eeb0 8a40 	vmov.f32	s16, s0
 80049ac:	2101      	movs	r1, #1
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f007 fafa 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 80049b4:	4603      	mov	r3, r0
 80049b6:	ed93 7a00 	vldr	s14, [r3]
 80049ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80049be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049c2:	eeb0 0a67 	vmov.f32	s0, s15
 80049c6:	f7ff fe5f 	bl	8004688 <_ZSt4fabsf>
 80049ca:	eef0 7a40 	vmov.f32	s15, s0
 80049ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80049d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d6:	d507      	bpl.n	80049e8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x100>
 80049d8:	2100      	movs	r1, #0
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	f007 fae4 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 80049e0:	4603      	mov	r3, r0
 80049e2:	edd3 7a00 	vldr	s15, [r3]
 80049e6:	e0bc      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 80049e8:	2101      	movs	r1, #1
 80049ea:	68b8      	ldr	r0, [r7, #8]
 80049ec:	f007 fadc 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 80049f0:	4603      	mov	r3, r0
 80049f2:	edd3 7a00 	vldr	s15, [r3]
 80049f6:	e0b4      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                        }
                        else { return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1]; }
 80049f8:	2100      	movs	r1, #0
 80049fa:	68b8      	ldr	r0, [r7, #8]
 80049fc:	f007 fad4 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004a00:	4603      	mov	r3, r0
 8004a02:	ed93 7a00 	vldr	s14, [r3]
 8004a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a12:	f7ff fe39 	bl	8004688 <_ZSt4fabsf>
 8004a16:	eeb0 8a40 	vmov.f32	s16, s0
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f007 fac3 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004a22:	4603      	mov	r3, r0
 8004a24:	ed93 7a00 	vldr	s14, [r3]
 8004a28:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a30:	eeb0 0a67 	vmov.f32	s0, s15
 8004a34:	f7ff fe28 	bl	8004688 <_ZSt4fabsf>
 8004a38:	eef0 7a40 	vmov.f32	s15, s0
 8004a3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a44:	dd07      	ble.n	8004a56 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16e>
 8004a46:	2100      	movs	r1, #0
 8004a48:	68b8      	ldr	r0, [r7, #8]
 8004a4a:	f007 faad 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	edd3 7a00 	vldr	s15, [r3]
 8004a54:	e085      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8004a56:	2101      	movs	r1, #1
 8004a58:	68b8      	ldr	r0, [r7, #8]
 8004a5a:	f007 faa5 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	edd3 7a00 	vldr	s15, [r3]
 8004a64:	e07d      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[1];
 8004a66:	2101      	movs	r1, #1
 8004a68:	68b8      	ldr	r0, [r7, #8]
 8004a6a:	f007 fa9d 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	edd3 7a00 	vldr	s15, [r3]
 8004a74:	e075      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004a76:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8004b70 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004a7a:	e072      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 3)
 8004a7c:	68b8      	ldr	r0, [r7, #8]
 8004a7e:	f7fe ffae 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d026      	beq.n	8004ae0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f8>
            {
                switch (direction)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d00e      	beq.n	8004aba <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d2>
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	dc1c      	bgt.n	8004ada <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c2>
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d010      	beq.n	8004aca <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e2>
 8004aa8:	e017      	b.n	8004ada <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8004aaa:	2100      	movs	r1, #0
 8004aac:	68b8      	ldr	r0, [r7, #8]
 8004aae:	f007 fa7b 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	edd3 7a00 	vldr	s15, [r3]
 8004ab8:	e053      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1];
 8004aba:	2101      	movs	r1, #1
 8004abc:	68b8      	ldr	r0, [r7, #8]
 8004abe:	f007 fa73 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	edd3 7a00 	vldr	s15, [r3]
 8004ac8:	e04b      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[2];
 8004aca:	2102      	movs	r1, #2
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f007 fa6b 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	edd3 7a00 	vldr	s15, [r3]
 8004ad8:	e043      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004ada:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004b70 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004ade:	e040      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 4)
 8004ae0:	68b8      	ldr	r0, [r7, #8]
 8004ae2:	f7fe ff7c 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d033      	beq.n	8004b5e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x276>
            {
                switch (direction)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d00e      	beq.n	8004b1e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x236>
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	dc29      	bgt.n	8004b58 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x226>
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d01d      	beq.n	8004b48 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x260>
 8004b0c:	e024      	b.n	8004b58 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8004b0e:	2100      	movs	r1, #0
 8004b10:	68b8      	ldr	r0, [r7, #8]
 8004b12:	f007 fa49 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004b16:	4603      	mov	r3, r0
 8004b18:	edd3 7a00 	vldr	s15, [r3]
 8004b1c:	e021      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1] + line_positions[2] / 2.0f;
 8004b1e:	2101      	movs	r1, #1
 8004b20:	68b8      	ldr	r0, [r7, #8]
 8004b22:	f007 fa41 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004b26:	4603      	mov	r3, r0
 8004b28:	ed93 8a00 	vldr	s16, [r3]
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f007 fa3a 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004b34:	4603      	mov	r3, r0
 8004b36:	ed93 7a00 	vldr	s14, [r3]
 8004b3a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b42:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004b46:	e00c      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[3];
 8004b48:	2103      	movs	r1, #3
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	f007 fa2c 	bl	800bfa8 <_ZNSt6vectorIfSaIfEEixEj>
 8004b50:	4603      	mov	r3, r0
 8004b52:	edd3 7a00 	vldr	s15, [r3]
 8004b56:	e004      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004b58:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004b70 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004b5c:	e001      	b.n	8004b62 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else
            {
                // this should never happen

                return 0.0f;
 8004b5e:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004b70 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
            }
        }
 8004b62:	eeb0 0a67 	vmov.f32	s0, s15
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	ecbd 8b02 	vpop	{d8}
 8004b6e:	bd90      	pop	{r4, r7, pc}
	...

08004b78 <_ZN3jlb10Controller18get_control_paramsEv>:

        ControlParams get_control_params()
 8004b78:	b5b0      	push	{r4, r5, r7, lr}
 8004b7a:	b09e      	sub	sp, #120	; 0x78
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
        {
            float               d5  = OFFSET + SLOPE * current_velocity;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004b86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b8e:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8004d90 <_ZN3jlb10Controller18get_control_paramsEv+0x218>
 8004b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b96:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            float               t5  = d5 / current_velocity;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004ba0:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8004ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            float               T   = t5 / 3.0f * DAMPING;
 8004bac:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8004bb0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bb8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004d94 <_ZN3jlb10Controller18get_control_paramsEv+0x21c>
 8004bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bc0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            float               wp  = (1.0f / T) * sqrt(1.0f - DAMPING * DAMPING);
 8004bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004bcc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004bd0:	ee16 0a90 	vmov	r0, s13
 8004bd4:	f7fb fcaa 	bl	800052c <__aeabi_f2d>
 8004bd8:	a36b      	add	r3, pc, #428	; (adr r3, 8004d88 <_ZN3jlb10Controller18get_control_paramsEv+0x210>)
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f7fb fcfd 	bl	80005dc <__aeabi_dmul>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4610      	mov	r0, r2
 8004be8:	4619      	mov	r1, r3
 8004bea:	f7fb ffef 	bl	8000bcc <__aeabi_d2f>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	66bb      	str	r3, [r7, #104]	; 0x68
            float               phi = acosf(DAMPING);
 8004bf2:	4b69      	ldr	r3, [pc, #420]	; (8004d98 <_ZN3jlb10Controller18get_control_paramsEv+0x220>)
 8004bf4:	667b      	str	r3, [r7, #100]	; 0x64
            float               x   = wp / tan(phi);
 8004bf6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004bf8:	f7fb fc98 	bl	800052c <__aeabi_f2d>
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	460d      	mov	r5, r1
 8004c00:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004c02:	f7fb fc93 	bl	800052c <__aeabi_f2d>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	ec43 2b10 	vmov	d0, r2, r3
 8004c0e:	f01c f9b7 	bl	8020f80 <tan>
 8004c12:	ec53 2b10 	vmov	r2, r3, d0
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb fe09 	bl	8000830 <__aeabi_ddiv>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	f7fb ffd1 	bl	8000bcc <__aeabi_d2f>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	663b      	str	r3, [r7, #96]	; 0x60
            std::complex<float> s1  = std::complex<float>(x, wp);
 8004c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c32:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8004c36:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fd44 	bl	80046c8 <_ZNSt7complexIfEC1Eff>
            std::complex<float> s2  = std::complex<float>(x, -wp);
 8004c40:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004c44:	eef1 7a67 	vneg.f32	s15, s15
 8004c48:	f107 0320 	add.w	r3, r7, #32
 8004c4c:	eef0 0a67 	vmov.f32	s1, s15
 8004c50:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fd37 	bl	80046c8 <_ZNSt7complexIfEC1Eff>

            std::complex<float> kP     = -SENSOR_BASE / (current_velocity * current_velocity) * s1 * s2;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c6a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8004c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c72:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8004c76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f007 f9a1 	bl	800bfc8 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004c86:	eeb0 7a40 	vmov.f32	s14, s0
 8004c8a:	eef0 7a60 	vmov.f32	s15, s1
 8004c8e:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8004c92:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004c96:	f107 0220 	add.w	r2, r7, #32
 8004c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f007 f9e3 	bl	800c06c <_ZStmlIfESt7complexIT_ERKS2_S4_>
 8004ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8004caa:	eef0 7a60 	vmov.f32	s15, s1
 8004cae:	ed87 7a06 	vstr	s14, [r7, #24]
 8004cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            std::complex<float> kDelta = -SENSOR_BASE / current_velocity * ((s1 + s2) - current_velocity * kP);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004cbc:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8004cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8004cc8:	f107 0220 	add.w	r2, r7, #32
 8004ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f007 fa0c 	bl	800c0f0 <_ZStplIfESt7complexIT_ERKS2_S4_>
 8004cd8:	eeb0 7a40 	vmov.f32	s14, s0
 8004cdc:	eef0 7a60 	vmov.f32	s15, s1
 8004ce0:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8004ce4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3398      	adds	r3, #152	; 0x98
 8004cec:	f107 0218 	add.w	r2, r7, #24
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f007 f968 	bl	800bfc8 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004cf8:	eeb0 7a40 	vmov.f32	s14, s0
 8004cfc:	eef0 7a60 	vmov.f32	s15, s1
 8004d00:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8004d04:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8004d08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f007 fa2e 	bl	800c174 <_ZStmiIfESt7complexIT_ERKS2_S4_>
 8004d18:	eeb0 7a40 	vmov.f32	s14, s0
 8004d1c:	eef0 7a60 	vmov.f32	s15, s1
 8004d20:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8004d24:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8004d28:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004d2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f007 f948 	bl	800bfc8 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004d38:	eeb0 7a40 	vmov.f32	s14, s0
 8004d3c:	eef0 7a60 	vmov.f32	s15, s1
 8004d40:	ed87 7a04 	vstr	s14, [r7, #16]
 8004d44:	edc7 7a05 	vstr	s15, [r7, #20]

            return {kP.real(), kDelta.real()};
 8004d48:	f107 0318 	add.w	r3, r7, #24
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fccf 	bl	80046f0 <_ZNKSt7complexIfE4realB5cxx11Ev>
 8004d52:	eef0 7a40 	vmov.f32	s15, s0
 8004d56:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004d5a:	f107 0310 	add.w	r3, r7, #16
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fcc6 	bl	80046f0 <_ZNKSt7complexIfE4realB5cxx11Ev>
 8004d64:	eef0 7a40 	vmov.f32	s15, s0
 8004d68:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8004d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d70:	ee07 2a10 	vmov	s14, r2
 8004d74:	ee07 3a90 	vmov	s15, r3
        }
 8004d78:	eeb0 0a47 	vmov.f32	s0, s14
 8004d7c:	eef0 0a67 	vmov.f32	s1, s15
 8004d80:	3778      	adds	r7, #120	; 0x78
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bdb0      	pop	{r4, r5, r7, pc}
 8004d86:	bf00      	nop
 8004d88:	00b412ca 	.word	0x00b412ca
 8004d8c:	3fdbe59f 	.word	0x3fdbe59f
 8004d90:	3ecccccd 	.word	0x3ecccccd
 8004d94:	3f666666 	.word	0x3f666666
 8004d98:	3ee6ecfe 	.word	0x3ee6ecfe

08004d9c <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>:

        void lateral_control([[maybe_unused]] const float dt)
        {
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>:

            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <_ZN3jlb10Controller15lateral_controlEf>:
        void lateral_control([[maybe_unused]] const float dt)
 8004dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd2:	b08d      	sub	sp, #52	; 0x34
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	ed87 0a00 	vstr	s0, [r7]
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3334      	adds	r3, #52	; 0x34
 8004de0:	4618      	mov	r0, r3
 8004de2:	f007 f9e4 	bl	800c1ae <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004de6:	4604      	mov	r4, r0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3334      	adds	r3, #52	; 0x34
 8004dec:	4618      	mov	r0, r3
 8004dee:	f007 f9e9 	bl	800c1c4 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4632      	mov	r2, r6
 8004df6:	4619      	mov	r1, r3
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f007 f9ef 	bl	800c1dc <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 80f8 	bne.w	8004ff6 <_ZN3jlb10Controller15lateral_controlEf+0x226>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3354      	adds	r3, #84	; 0x54
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f007 f9cf 	bl	800c1ae <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004e10:	4604      	mov	r4, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3354      	adds	r3, #84	; 0x54
 8004e16:	4618      	mov	r0, r3
 8004e18:	f007 f9d4 	bl	800c1c4 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	462a      	mov	r2, r5
 8004e20:	4619      	mov	r1, r3
 8004e22:	4620      	mov	r0, r4
 8004e24:	f007 f9f0 	bl	800c208 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 80e5 	bne.w	8004ffa <_ZN3jlb10Controller15lateral_controlEf+0x22a>

            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3374      	adds	r3, #116	; 0x74
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe fdd2 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d017      	beq.n	8004e70 <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3380      	adds	r3, #128	; 0x80
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe fdca 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00f      	beq.n	8004e70 <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3374      	adds	r3, #116	; 0x74
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe fdc2 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d807      	bhi.n	8004e70 <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3380      	adds	r3, #128	; 0x80
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe fdba 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d901      	bls.n	8004e74 <_ZN3jlb10Controller15lateral_controlEf+0xa4>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <_ZN3jlb10Controller15lateral_controlEf+0xa6>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 80c1 	bne.w	8004ffe <_ZN3jlb10Controller15lateral_controlEf+0x22e>

            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8004e82:	f107 0310 	add.w	r3, r7, #16
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f007 f9d3 	bl	800c234 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e94:	f107 0310 	add.w	r3, r7, #16
 8004e98:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fd22 	bl	80048e8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8004ea4:	eef0 7a40 	vmov.f32	s15, s0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	edc3 7a02 	vstr	s15, [r3, #8]
 8004eae:	f107 0310 	add.w	r3, r7, #16
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe faf4 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004ebe:	f107 031c 	add.w	r3, r7, #28
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f007 f9b5 	bl	800c234 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ed0:	f107 031c 	add.w	r3, r7, #28
 8004ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fd04 	bl	80048e8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8004ee0:	eef0 7a40 	vmov.f32	s15, s0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	edc3 7a03 	vstr	s15, [r3, #12]
 8004eea:	f107 031c 	add.w	r3, r7, #28
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe fad6 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	611a      	str	r2, [r3, #16]
            prev_line_position_rear  = line_position_rear;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	615a      	str	r2, [r3, #20]

            float sensor_rate   = SENSOR_WIDTH / SENSOR_COUNT;
 8004f04:	4b40      	ldr	r3, [pc, #256]	; (8005008 <_ZN3jlb10Controller15lateral_controlEf+0x238>)
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
            float sensor_center = SENSOR_COUNT / 2.0f;
 8004f08:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f14:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f28:	ee17 2a90 	vmov	r2, s15
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	601a      	str	r2, [r3, #0]
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	edd3 6a03 	vldr	s13, [r3, #12]
 8004f36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4a:	ee17 2a90 	vmov	r2, s15
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

            cross_track_error = line_position_front;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	621a      	str	r2, [r3, #32]
            heading_error     = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f6a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8004f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f72:	f7ff fb65 	bl	8004640 <_ZSt5atan2ff>
 8004f76:	eef0 7a40 	vmov.f32	s15, s0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            // lateral_pid.update_params(lat::kP/current_velocity, lat::kI/current_velocity, lat::kD/current_velocity);
            // target_angle = -lateral_pid.update(0, cross_track_error, dt);

            auto [kP, kDelta] = get_control_params();
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fdf9 	bl	8004b78 <_ZN3jlb10Controller18get_control_paramsEv>
 8004f86:	eeb0 7a40 	vmov.f32	s14, s0
 8004f8a:	eef0 7a60 	vmov.f32	s15, s1
 8004f8e:	ed87 7a02 	vstr	s14, [r7, #8]
 8004f92:	edc7 7a03 	vstr	s15, [r7, #12]
 8004f96:	edd7 7a02 	vldr	s15, [r7, #8]
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 8004f9a:	eeb1 7a67 	vneg.f32	s14, s15
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	edd3 7a08 	vldr	s15, [r3, #32]
 8004fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
            auto [kP, kDelta] = get_control_params();
 8004fae:	edd7 7a03 	vldr	s15, [r7, #12]
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 8004fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	edc3 7a06 	vstr	s15, [r3, #24]

            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fc6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800500c <_ZN3jlb10Controller15lateral_controlEf+0x23c>
 8004fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd2:	dd02      	ble.n	8004fda <_ZN3jlb10Controller15lateral_controlEf+0x20a>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <_ZN3jlb10Controller15lateral_controlEf+0x240>)
 8004fd8:	619a      	str	r2, [r3, #24]
            if (target_angle < -deg2rad(MAX_WHEEL_ANGLE)) target_angle = -deg2rad(MAX_WHEEL_ANGLE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fe0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005014 <_ZN3jlb10Controller15lateral_controlEf+0x244>
 8004fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fec:	d508      	bpl.n	8005000 <_ZN3jlb10Controller15lateral_controlEf+0x230>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a09      	ldr	r2, [pc, #36]	; (8005018 <_ZN3jlb10Controller15lateral_controlEf+0x248>)
 8004ff2:	619a      	str	r2, [r3, #24]
 8004ff4:	e004      	b.n	8005000 <_ZN3jlb10Controller15lateral_controlEf+0x230>
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 8004ff6:	bf00      	nop
 8004ff8:	e002      	b.n	8005000 <_ZN3jlb10Controller15lateral_controlEf+0x230>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <_ZN3jlb10Controller15lateral_controlEf+0x230>
            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8004ffe:	bf00      	nop
        }
 8005000:	3734      	adds	r7, #52	; 0x34
 8005002:	46bd      	mov	sp, r7
 8005004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005006:	bf00      	nop
 8005008:	3bcccccd 	.word	0x3bcccccd
 800500c:	3ec02037 	.word	0x3ec02037
 8005010:	3ec02037 	.word	0x3ec02037
 8005014:	bec02037 	.word	0xbec02037
 8005018:	bec02037 	.word	0xbec02037

0800501c <_ZN3jlb10Controller20longitudinal_controlEf>:

        void longitudinal_control([[maybe_unused]] const float dt)
 800501c:	b5b0      	push	{r4, r5, r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	ed87 0a00 	vstr	s0, [r7]

            float x      = std::max(dist_error_norm, ang_error_norm);
            target_speed = std::min(reference_speed, reference_speed * (1.0f - (0.1666667f * x) - (0.8333333f * x * x)));
            */

            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	edd3 6a07 	vldr	s13, [r3, #28]
 8005034:	edd7 7a00 	vldr	s15, [r7]
 8005038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005044:	dd0a      	ble.n	800505c <_ZN3jlb10Controller20longitudinal_controlEf+0x40>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	ed93 7a07 	vldr	s14, [r3, #28]
 800504c:	edd7 7a00 	vldr	s15, [r7]
 8005050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	edc3 7a07 	vstr	s15, [r3, #28]
 800505a:	e01e      	b.n	800509a <_ZN3jlb10Controller20longitudinal_controlEf+0x7e>
            else if (reference_speed < target_speed - MAX_DECELERATION * dt) { target_speed -= MAX_DECELERATION * dt; }
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	edd3 6a07 	vldr	s13, [r3, #28]
 8005068:	edd7 7a00 	vldr	s15, [r7]
 800506c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005078:	d50a      	bpl.n	8005090 <_ZN3jlb10Controller20longitudinal_controlEf+0x74>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005080:	edd7 7a00 	vldr	s15, [r7]
 8005084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	edc3 7a07 	vstr	s15, [r3, #28]
 800508e:	e004      	b.n	800509a <_ZN3jlb10Controller20longitudinal_controlEf+0x7e>
            else { target_speed = reference_speed; }
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	61da      	str	r2, [r3, #28]

            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	edd3 7a07 	vldr	s15, [r3, #28]
 80050a0:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80050a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ac:	d503      	bpl.n	80050b6 <_ZN3jlb10Controller20longitudinal_controlEf+0x9a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80050b4:	61da      	str	r2, [r3, #28]

            float object_rate = object_pid.update(obj::FOLLOW_DISTANCE, object_range, dt);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80050c2:	ed97 1a00 	vldr	s2, [r7]
 80050c6:	eef0 0a67 	vmov.f32	s1, s15
 80050ca:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8005124 <_ZN3jlb10Controller20longitudinal_controlEf+0x108>
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fe fe9e 	bl	8003e10 <_ZN3PID6updateEfff>
 80050d4:	ed87 0a03 	vstr	s0, [r7, #12]
            target_speed *= std::pow((1 - object_rate), 2);
 80050d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80050e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050e4:	2002      	movs	r0, #2
 80050e6:	eeb0 0a67 	vmov.f32	s0, s15
 80050ea:	f7fd fabf 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80050ee:	ec55 4b10 	vmov	r4, r5, d0
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb fa18 	bl	800052c <__aeabi_f2d>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f7fb fa6a 	bl	80005dc <__aeabi_dmul>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	f7fb fd5c 	bl	8000bcc <__aeabi_d2f>
 8005114:	4602      	mov	r2, r0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	61da      	str	r2, [r3, #28]
        }
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bdb0      	pop	{r4, r5, r7, pc}
 8005122:	bf00      	nop
 8005124:	3e99999a 	.word	0x3e99999a

08005128 <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
        {
#ifndef SIMULATION
            // TODO: add timestamp
            float dt = 0.005f;
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <_ZN3jlb10Controller6updateEv+0x48>)
 8005132:	61fb      	str	r3, [r7, #28]
            auto                   control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                 = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_                   = control_timestamp_;
#endif

            lateral_control(dt);
 8005134:	ed97 0a07 	vldr	s0, [r7, #28]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff fe49 	bl	8004dd0 <_ZN3jlb10Controller15lateral_controlEf>
            longitudinal_control(dt);
 800513e:	ed97 0a07 	vldr	s0, [r7, #28]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff ff6a 	bl	800501c <_ZN3jlb10Controller20longitudinal_controlEf>

            return {target_angle, target_speed};
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	ee07 2a10 	vmov	s14, r2
 800515c:	ee07 3a90 	vmov	s15, r3
        }
 8005160:	eeb0 0a47 	vmov.f32	s0, s14
 8005164:	eef0 0a67 	vmov.f32	s1, s15
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	3ba3d70a 	.word	0x3ba3d70a

08005174 <_ZN3jlb10Controller16set_object_rangeEf>:

        void set_object_range(const float object_range_) { object_range = object_range_; }
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	ed87 0a00 	vstr	s0, [r7]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e00c      	b.n	80051be <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x2c>
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	7819      	ldrb	r1, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4413      	add	r3, r2
 80051b2:	3334      	adds	r3, #52	; 0x34
 80051b4:	460a      	mov	r2, r1
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	3301      	adds	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b1f      	cmp	r3, #31
 80051c2:	d9ef      	bls.n	80051a4 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x12>
            line_positions_front = line_positions_front_;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3374      	adds	r3, #116	; 0x74
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f007 f8a3 	bl	800c316 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 80051d0:	bf00      	nop
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_rear[i] = detection_rear_[i];
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e00c      	b.n	8005204 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x2c>
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	7819      	ldrb	r1, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	4413      	add	r3, r2
 80051f8:	3354      	adds	r3, #84	; 0x54
 80051fa:	460a      	mov	r2, r1
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	3301      	adds	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b1f      	cmp	r3, #31
 8005208:	d9ef      	bls.n	80051ea <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x12>
            line_positions_rear = line_positions_rear_;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3380      	adds	r3, #128	; 0x80
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4618      	mov	r0, r3
 8005212:	f007 f880 	bl	800c316 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8005216:	bf00      	nop
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_) { current_velocity = current_velocity_; }
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	ed87 0a00 	vstr	s0, [r7]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
        {
            prev_direction = direction;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            direction      = direction_;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <_ZN3jlb10Controller19set_reference_speedEf>:

        void set_reference_speed(const float reference_speed_) { reference_speed = reference_speed_; }
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	ed87 0a00 	vstr	s0, [r7]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f007 f948 	bl	800c526 <_ZNSaIN3jlb4EdgeEED1Ev>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f007 f92b 	bl	800c506 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ffeb 	bl	80052a0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <_ZN3jlb4NodeC1Ecff>:
        char              name;
        float             x;
        float             y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	460b      	mov	r3, r1
 80052de:	ed87 0a01 	vstr	s0, [r7, #4]
 80052e2:	edc7 0a00 	vstr	s1, [r7]
 80052e6:	72fb      	strb	r3, [r7, #11]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	7afa      	ldrb	r2, [r7, #11]
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	609a      	str	r2, [r3, #8]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	330c      	adds	r3, #12
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff ffdb 	bl	80052ba <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	330c      	adds	r3, #12
 800531a:	4618      	mov	r0, r3
 800531c:	f007 f92c 	bl	800c578 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3308      	adds	r3, #8
 8005336:	4618      	mov	r0, r3
 8005338:	f007 f976 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8005346:	b590      	push	{r4, r7, lr}
 8005348:	b08d      	sub	sp, #52	; 0x34
 800534a:	af00      	add	r7, sp, #0
 800534c:	6178      	str	r0, [r7, #20]
 800534e:	60fa      	str	r2, [r7, #12]
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	ed87 0a01 	vstr	s0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	74fb      	strb	r3, [r7, #19]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f103 040c 	add.w	r4, r3, #12
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	763b      	strb	r3, [r7, #24]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	f107 0318 	add.w	r3, r7, #24
 800536c:	3308      	adds	r3, #8
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	4618      	mov	r0, r3
 8005372:	f007 f91c 	bl	800c5ae <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537a:	f107 0318 	add.w	r3, r7, #24
 800537e:	4619      	mov	r1, r3
 8005380:	4620      	mov	r0, r4
 8005382:	f007 f96c 	bl	800c65e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 8005386:	f107 0318 	add.w	r3, r7, #24
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff ffcd 	bl	800532a <_ZN3jlb4EdgeD1Ev>
 8005390:	bf00      	nop
 8005392:	3734      	adds	r7, #52	; 0x34
 8005394:	46bd      	mov	sp, r7
 8005396:	bd90      	pop	{r4, r7, pc}

08005398 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f007 f97d 	bl	800c6a0 <_ZNSaIN3jlb4NodeEED1Ev>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f007 f960 	bl	800c680 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ffeb 	bl	80053b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	0000      	movs	r0, r0
	...

080053e8 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053f4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80053f8:	6018      	str	r0, [r3, #0]
        {
 80053fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ffe0 	bl	80053ca <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 800540a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800540e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005412:	681c      	ldr	r4, [r3, #0]
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	eddf 0af3 	vldr	s1, [pc, #972]	; 80057e8 <_ZN3jlb5GraphC1Ev+0x400>
 800541c:	ed9f 0af3 	vldr	s0, [pc, #972]	; 80057ec <_ZN3jlb5GraphC1Ev+0x404>
 8005420:	2141      	movs	r1, #65	; 0x41
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff ff56 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005428:	f107 0308 	add.w	r3, r7, #8
 800542c:	4619      	mov	r1, r3
 800542e:	4620      	mov	r0, r4
 8005430:	f007 f97b 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005434:	f107 0308 	add.w	r3, r7, #8
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff ff68 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 800543e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005442:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005446:	681c      	ldr	r4, [r3, #0]
 8005448:	f107 0320 	add.w	r3, r7, #32
 800544c:	eddf 0aeb 	vldr	s1, [pc, #940]	; 80057fc <_ZN3jlb5GraphC1Ev+0x414>
 8005450:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 80057ec <_ZN3jlb5GraphC1Ev+0x404>
 8005454:	2142      	movs	r1, #66	; 0x42
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff3c 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 800545c:	f107 0320 	add.w	r3, r7, #32
 8005460:	4619      	mov	r1, r3
 8005462:	4620      	mov	r0, r4
 8005464:	f007 f961 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005468:	f107 0320 	add.w	r3, r7, #32
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff ff4e 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8005472:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005476:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800547a:	681c      	ldr	r4, [r3, #0]
 800547c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005480:	eddf 0adb 	vldr	s1, [pc, #876]	; 80057f0 <_ZN3jlb5GraphC1Ev+0x408>
 8005484:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8005488:	2143      	movs	r1, #67	; 0x43
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff22 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005490:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005494:	4619      	mov	r1, r3
 8005496:	4620      	mov	r0, r4
 8005498:	f007 f947 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800549c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff ff34 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 80054a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054aa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80054ae:	681c      	ldr	r4, [r3, #0]
 80054b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054b4:	eddf 0acf 	vldr	s1, [pc, #828]	; 80057f4 <_ZN3jlb5GraphC1Ev+0x40c>
 80054b8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80054bc:	2144      	movs	r1, #68	; 0x44
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff ff08 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 80054c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054c8:	4619      	mov	r1, r3
 80054ca:	4620      	mov	r0, r4
 80054cc:	f007 f92d 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80054d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff ff1a 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 80054da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80054e2:	681c      	ldr	r4, [r3, #0]
 80054e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054e8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80054ec:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80054f0:	2145      	movs	r1, #69	; 0x45
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff feee 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 80054f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054fc:	4619      	mov	r1, r3
 80054fe:	4620      	mov	r0, r4
 8005500:	f007 f913 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005504:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff ff00 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 800550e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005512:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005516:	681c      	ldr	r4, [r3, #0]
 8005518:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800551c:	eddf 0ab2 	vldr	s1, [pc, #712]	; 80057e8 <_ZN3jlb5GraphC1Ev+0x400>
 8005520:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 80057fc <_ZN3jlb5GraphC1Ev+0x414>
 8005524:	2146      	movs	r1, #70	; 0x46
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fed4 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 800552c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005530:	4619      	mov	r1, r3
 8005532:	4620      	mov	r0, r4
 8005534:	f007 f8f9 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005538:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fee6 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 8005542:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005546:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800554a:	681c      	ldr	r4, [r3, #0]
 800554c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005550:	eddf 0aaa 	vldr	s1, [pc, #680]	; 80057fc <_ZN3jlb5GraphC1Ev+0x414>
 8005554:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 80057fc <_ZN3jlb5GraphC1Ev+0x414>
 8005558:	2147      	movs	r1, #71	; 0x47
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff feba 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005560:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005564:	4619      	mov	r1, r3
 8005566:	4620      	mov	r0, r4
 8005568:	f007 f8df 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800556c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fecc 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8005576:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800557a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800557e:	681c      	ldr	r4, [r3, #0]
 8005580:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005584:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80057f0 <_ZN3jlb5GraphC1Ev+0x408>
 8005588:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80057f4 <_ZN3jlb5GraphC1Ev+0x40c>
 800558c:	2148      	movs	r1, #72	; 0x48
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fea0 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005594:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005598:	4619      	mov	r1, r3
 800559a:	4620      	mov	r0, r4
 800559c:	f007 f8c5 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80055a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff feb2 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 80055aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055b2:	681c      	ldr	r4, [r3, #0]
 80055b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80055b8:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80057f4 <_ZN3jlb5GraphC1Ev+0x40c>
 80055bc:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80057f4 <_ZN3jlb5GraphC1Ev+0x40c>
 80055c0:	2149      	movs	r1, #73	; 0x49
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fe86 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 80055c8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80055cc:	4619      	mov	r1, r3
 80055ce:	4620      	mov	r0, r4
 80055d0:	f007 f8ab 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80055d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fe98 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 80055de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055e6:	681c      	ldr	r4, [r3, #0]
 80055e8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80055ec:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80055f0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80057f4 <_ZN3jlb5GraphC1Ev+0x40c>
 80055f4:	214a      	movs	r1, #74	; 0x4a
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fe6c 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 80055fc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005600:	4619      	mov	r1, r3
 8005602:	4620      	mov	r0, r4
 8005604:	f007 f891 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005608:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff fe7e 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 8005612:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005616:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800561a:	681c      	ldr	r4, [r3, #0]
 800561c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005620:	eddf 0a71 	vldr	s1, [pc, #452]	; 80057e8 <_ZN3jlb5GraphC1Ev+0x400>
 8005624:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80057e8 <_ZN3jlb5GraphC1Ev+0x400>
 8005628:	214b      	movs	r1, #75	; 0x4b
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fe52 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005630:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005634:	4619      	mov	r1, r3
 8005636:	4620      	mov	r0, r4
 8005638:	f007 f877 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800563c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fe64 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 8005646:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800564a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005654:	eddf 0a69 	vldr	s1, [pc, #420]	; 80057fc <_ZN3jlb5GraphC1Ev+0x414>
 8005658:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80057e8 <_ZN3jlb5GraphC1Ev+0x400>
 800565c:	214c      	movs	r1, #76	; 0x4c
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fe38 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005664:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005668:	4619      	mov	r1, r3
 800566a:	4620      	mov	r0, r4
 800566c:	f007 f85d 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005670:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fe4a 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 800567a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800567e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005682:	681c      	ldr	r4, [r3, #0]
 8005684:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005688:	eddf 0a59 	vldr	s1, [pc, #356]	; 80057f0 <_ZN3jlb5GraphC1Ev+0x408>
 800568c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80057f0 <_ZN3jlb5GraphC1Ev+0x408>
 8005690:	214d      	movs	r1, #77	; 0x4d
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fe1e 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005698:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800569c:	4619      	mov	r1, r3
 800569e:	4620      	mov	r0, r4
 80056a0:	f007 f843 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80056a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fe30 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 80056ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056b2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056b6:	681c      	ldr	r4, [r3, #0]
 80056b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80056bc:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80057f4 <_ZN3jlb5GraphC1Ev+0x40c>
 80056c0:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80057f0 <_ZN3jlb5GraphC1Ev+0x408>
 80056c4:	214e      	movs	r1, #78	; 0x4e
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fe04 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 80056cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80056d0:	4619      	mov	r1, r3
 80056d2:	4620      	mov	r0, r4
 80056d4:	f007 f829 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80056d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fe16 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 80056e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056ea:	681c      	ldr	r4, [r3, #0]
 80056ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80056f0:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80056f4:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80057f0 <_ZN3jlb5GraphC1Ev+0x408>
 80056f8:	214f      	movs	r1, #79	; 0x4f
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fdea 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005700:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005704:	4619      	mov	r1, r3
 8005706:	4620      	mov	r0, r4
 8005708:	f007 f80f 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800570c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fdfc 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 8005716:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800571a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800571e:	681c      	ldr	r4, [r3, #0]
 8005720:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005724:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8005728:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800572c:	2150      	movs	r1, #80	; 0x50
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fdd0 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005734:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005738:	4619      	mov	r1, r3
 800573a:	4620      	mov	r0, r4
 800573c:	f006 fff5 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005740:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fde2 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 800574a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800574e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005752:	681c      	ldr	r4, [r3, #0]
 8005754:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005758:	eddf 0a25 	vldr	s1, [pc, #148]	; 80057f0 <_ZN3jlb5GraphC1Ev+0x408>
 800575c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005760:	2151      	movs	r1, #81	; 0x51
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fdb6 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005768:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800576c:	4619      	mov	r1, r3
 800576e:	4620      	mov	r0, r4
 8005770:	f006 ffdb 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005774:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fdc8 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 800577e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005782:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005786:	681c      	ldr	r4, [r3, #0]
 8005788:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800578c:	eddf 0a16 	vldr	s1, [pc, #88]	; 80057e8 <_ZN3jlb5GraphC1Ev+0x400>
 8005790:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005794:	2152      	movs	r1, #82	; 0x52
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fd9c 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 800579c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80057a0:	4619      	mov	r1, r3
 80057a2:	4620      	mov	r0, r4
 80057a4:	f006 ffc1 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80057a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fdae 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 80057b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057ba:	681c      	ldr	r4, [r3, #0]
 80057bc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80057c0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80057f4 <_ZN3jlb5GraphC1Ev+0x40c>
 80057c4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80057c8:	2153      	movs	r1, #83	; 0x53
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fd82 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 80057d0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80057d4:	4619      	mov	r1, r3
 80057d6:	4620      	mov	r0, r4
 80057d8:	f006 ffa7 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80057dc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fd94 	bl	800530e <_ZN3jlb4NodeD1Ev>
 80057e6:	e011      	b.n	800580c <_ZN3jlb5GraphC1Ev+0x424>
 80057e8:	40866667 	.word	0x40866667
 80057ec:	40d33334 	.word	0x40d33334
 80057f0:	40666667 	.word	0x40666667
 80057f4:	4099999a 	.word	0x4099999a
 80057f8:	40d33334 	.word	0x40d33334
 80057fc:	40accccd 	.word	0x40accccd
 8005800:	4019999a 	.word	0x4019999a
 8005804:	40866667 	.word	0x40866667
 8005808:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 800580c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005810:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800581a:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80057fc <_ZN3jlb5GraphC1Ev+0x414>
 800581e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005822:	2154      	movs	r1, #84	; 0x54
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fd55 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 800582a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800582e:	4619      	mov	r1, r3
 8005830:	4620      	mov	r0, r4
 8005832:	f006 ff7a 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005836:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fd67 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8005840:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005844:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005848:	681c      	ldr	r4, [r3, #0]
 800584a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800584e:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 80057f8 <_ZN3jlb5GraphC1Ev+0x410>
 8005852:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005856:	2155      	movs	r1, #85	; 0x55
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fd3b 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 800585e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005862:	4619      	mov	r1, r3
 8005864:	4620      	mov	r0, r4
 8005866:	f006 ff60 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800586a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fd4d 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8005874:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005878:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800587c:	681c      	ldr	r4, [r3, #0]
 800587e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005882:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 8005804 <_ZN3jlb5GraphC1Ev+0x41c>
 8005886:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8005800 <_ZN3jlb5GraphC1Ev+0x418>
 800588a:	2156      	movs	r1, #86	; 0x56
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fd21 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 8005892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005896:	4619      	mov	r1, r3
 8005898:	4620      	mov	r0, r4
 800589a:	f006 ff46 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fd33 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 80058a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058ac:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058b0:	681c      	ldr	r4, [r3, #0]
 80058b2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058b6:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 80057fc <_ZN3jlb5GraphC1Ev+0x414>
 80058ba:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8005800 <_ZN3jlb5GraphC1Ev+0x418>
 80058be:	2157      	movs	r1, #87	; 0x57
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fd07 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 80058c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058ca:	4619      	mov	r1, r3
 80058cc:	4620      	mov	r0, r4
 80058ce:	f006 ff2c 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80058d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fd19 	bl	800530e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 80058dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058e4:	681c      	ldr	r4, [r3, #0]
 80058e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80058ea:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 8005804 <_ZN3jlb5GraphC1Ev+0x41c>
 80058ee:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 8005808 <_ZN3jlb5GraphC1Ev+0x420>
 80058f2:	2158      	movs	r1, #88	; 0x58
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fced 	bl	80052d4 <_ZN3jlb4NodeC1Ecff>
 80058fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80058fe:	4619      	mov	r1, r3
 8005900:	4620      	mov	r0, r4
 8005902:	f006 ff12 	bl	800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005906:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fcff 	bl	800530e <_ZN3jlb4NodeD1Ev>

            const auto UNIT           = SQUARE_LENGTH;
 8005910:	4be9      	ldr	r3, [pc, #932]	; (8005cb8 <_ZN3jlb5GraphC1Ev+0x8d0>)
 8005912:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 8005916:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8005918:	a3e5      	add	r3, pc, #916	; (adr r3, 8005cb0 <_ZN3jlb5GraphC1Ev+0x8c8>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 8005922:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 8005926:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800592a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800592e:	2141      	movs	r1, #65	; 0x41
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	f002 ff8c 	bl	800884e <_ZN3jlb5GraphixEc>
 8005936:	4604      	mov	r4, r0
 8005938:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800593c:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8005940:	4ade      	ldr	r2, [pc, #888]	; (8005cbc <_ZN3jlb5GraphC1Ev+0x8d4>)
 8005942:	8812      	ldrh	r2, [r2, #0]
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800594a:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 800594e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005958:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 800595c:	2202      	movs	r2, #2
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005964:	4618      	mov	r0, r3
 8005966:	f01b fa2e 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800596a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800596e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005972:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8005976:	f507 7012 	add.w	r0, r7, #584	; 0x248
 800597a:	ca06      	ldmia	r2, {r1, r2}
 800597c:	f006 fee6 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005980:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005984:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8005cc8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005988:	2200      	movs	r2, #0
 800598a:	2143      	movs	r1, #67	; 0x43
 800598c:	4620      	mov	r0, r4
 800598e:	f7ff fcda 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005992:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005996:	4618      	mov	r0, r3
 8005998:	f006 fe46 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800599c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059a0:	4618      	mov	r0, r3
 80059a2:	f01b fa12 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 80059a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059aa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059ae:	2141      	movs	r1, #65	; 0x41
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	f002 ff4c 	bl	800884e <_ZN3jlb5GraphixEc>
 80059b6:	4604      	mov	r4, r0
 80059b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059bc:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 80059c0:	2243      	movs	r2, #67	; 0x43
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059c8:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80059cc:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059d6:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80059da:	2201      	movs	r2, #1
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80059e2:	4618      	mov	r0, r3
 80059e4:	f01b f9ef 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80059e8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80059ec:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80059f0:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 80059f4:	f507 7019 	add.w	r0, r7, #612	; 0x264
 80059f8:	ca06      	ldmia	r2, {r1, r2}
 80059fa:	f006 fea7 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80059fe:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005a02:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8005cc0 <_ZN3jlb5GraphC1Ev+0x8d8>
 8005a06:	2202      	movs	r2, #2
 8005a08:	2142      	movs	r1, #66	; 0x42
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f7ff fc9b 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005a10:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005a14:	4618      	mov	r0, r3
 8005a16:	f006 fe07 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005a1a:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f01b f9d3 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 8005a24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a28:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a2c:	2141      	movs	r1, #65	; 0x41
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	f002 ff0d 	bl	800884e <_ZN3jlb5GraphixEc>
 8005a34:	4604      	mov	r4, r0
 8005a36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a3a:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8005a3e:	2243      	movs	r2, #67	; 0x43
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a46:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005a4a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a54:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005a58:	2201      	movs	r2, #1
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005a60:	4618      	mov	r0, r3
 8005a62:	f01b f9b0 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005a66:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005a6a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a6e:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8005a72:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8005a76:	ca06      	ldmia	r2, {r1, r2}
 8005a78:	f006 fe68 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005a7c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005a80:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8005cc8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005a84:	2201      	movs	r2, #1
 8005a86:	2144      	movs	r1, #68	; 0x44
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f7ff fc5c 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005a8e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005a92:	4618      	mov	r0, r3
 8005a94:	f006 fdc8 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005a98:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f01b f994 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8005aa2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005aa6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005aaa:	2142      	movs	r1, #66	; 0x42
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	f002 fece 	bl	800884e <_ZN3jlb5GraphixEc>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ab8:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8005abc:	2245      	movs	r2, #69	; 0x45
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ac4:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005ac8:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ad2:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f01b f971 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005ae4:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005ae8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005aec:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8005af0:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 8005af4:	ca06      	ldmia	r2, {r1, r2}
 8005af6:	f006 fe29 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005afa:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005afe:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8005cc0 <_ZN3jlb5GraphC1Ev+0x8d8>
 8005b02:	2202      	movs	r2, #2
 8005b04:	2141      	movs	r1, #65	; 0x41
 8005b06:	4620      	mov	r0, r4
 8005b08:	f7ff fc1d 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b0c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005b10:	4618      	mov	r0, r3
 8005b12:	f006 fd89 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b16:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f01b f955 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8005b20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b24:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b28:	2142      	movs	r1, #66	; 0x42
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	f002 fe8f 	bl	800884e <_ZN3jlb5GraphixEc>
 8005b30:	4604      	mov	r4, r0
 8005b32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b36:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8005b3a:	4a62      	ldr	r2, [pc, #392]	; (8005cc4 <_ZN3jlb5GraphC1Ev+0x8dc>)
 8005b3c:	8812      	ldrh	r2, [r2, #0]
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b44:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005b48:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b52:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005b56:	2202      	movs	r2, #2
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f01b f931 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005b64:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005b68:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b6c:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8005b70:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8005b74:	ca06      	ldmia	r2, {r1, r2}
 8005b76:	f006 fde9 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b7a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005b7e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8005cc8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005b82:	2201      	movs	r2, #1
 8005b84:	2145      	movs	r1, #69	; 0x45
 8005b86:	4620      	mov	r0, r4
 8005b88:	f7ff fbdd 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b8c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005b90:	4618      	mov	r0, r3
 8005b92:	f006 fd49 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b96:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f01b f915 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8005ba0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ba4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ba8:	2142      	movs	r1, #66	; 0x42
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	f002 fe4f 	bl	800884e <_ZN3jlb5GraphixEc>
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bb6:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8005bba:	2245      	movs	r2, #69	; 0x45
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bc2:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8005bc6:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bd0:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f01b f8f2 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005be2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005be6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005bea:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8005bee:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 8005bf2:	ca06      	ldmia	r2, {r1, r2}
 8005bf4:	f006 fdaa 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005bf8:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005bfc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005cc8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005c00:	2200      	movs	r2, #0
 8005c02:	2144      	movs	r1, #68	; 0x44
 8005c04:	4620      	mov	r0, r4
 8005c06:	f7ff fb9e 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c0a:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f006 fd0a 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c14:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f01b f8d6 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 8005c1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c22:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c26:	2143      	movs	r1, #67	; 0x43
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	f002 fe10 	bl	800884e <_ZN3jlb5GraphixEc>
 8005c2e:	4604      	mov	r4, r0
 8005c30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c34:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8005c38:	2246      	movs	r2, #70	; 0x46
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c40:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8005c44:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c4e:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8005c52:	2201      	movs	r2, #1
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f01b f8b3 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005c60:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005c64:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c68:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 8005c6c:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005c70:	ca06      	ldmia	r2, {r1, r2}
 8005c72:	f006 fd6b 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c76:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005c7a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005cc8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005c7e:	2201      	movs	r2, #1
 8005c80:	2141      	movs	r1, #65	; 0x41
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7ff fb5f 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c88:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f006 fccb 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c92:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005c96:	4618      	mov	r0, r3
 8005c98:	f01b f897 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 8005c9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ca0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ca4:	2143      	movs	r1, #67	; 0x43
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	f002 fdd1 	bl	800884e <_ZN3jlb5GraphixEc>
 8005cac:	e00e      	b.n	8005ccc <_ZN3jlb5GraphC1Ev+0x8e4>
 8005cae:	bf00      	nop
 8005cb0:	460698c7 	.word	0x460698c7
 8005cb4:	3fee28c7 	.word	0x3fee28c7
 8005cb8:	3f19999a 	.word	0x3f19999a
 8005cbc:	08025758 	.word	0x08025758
 8005cc0:	3f99999a 	.word	0x3f99999a
 8005cc4:	0802575c 	.word	0x0802575c
 8005cc8:	3f71463a 	.word	0x3f71463a
 8005ccc:	4604      	mov	r4, r0
 8005cce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cd2:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8005cd6:	2241      	movs	r2, #65	; 0x41
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cde:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8005ce2:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cec:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	605a      	str	r2, [r3, #4]
 8005cf4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f01b f864 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005cfe:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005d02:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d06:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8005d0a:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8005d0e:	ca06      	ldmia	r2, {r1, r2}
 8005d10:	f006 fd1c 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d14:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005d18:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8005cc8 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2146      	movs	r1, #70	; 0x46
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7ff fb10 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d26:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f006 fc7c 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d30:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005d34:	4618      	mov	r0, r3
 8005d36:	f01b f848 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005d3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d3e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d42:	2144      	movs	r1, #68	; 0x44
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	f002 fd82 	bl	800884e <_ZN3jlb5GraphixEc>
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d50:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8005d54:	4ae5      	ldr	r2, [pc, #916]	; (80060ec <_ZN3jlb5GraphC1Ev+0xd04>)
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	4611      	mov	r1, r2
 8005d5a:	8019      	strh	r1, [r3, #0]
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	0c12      	lsrs	r2, r2, #16
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d66:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005d6a:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d74:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005d78:	2203      	movs	r2, #3
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005d80:	4618      	mov	r0, r3
 8005d82:	f01b f820 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005d86:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005d8a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d8e:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8005d92:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8005d96:	ca06      	ldmia	r2, {r1, r2}
 8005d98:	f006 fcd8 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d9c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005da0:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 80060fc <_ZN3jlb5GraphC1Ev+0xd14>
 8005da4:	2200      	movs	r2, #0
 8005da6:	2141      	movs	r1, #65	; 0x41
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7ff facc 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005dae:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005db2:	4618      	mov	r0, r3
 8005db4:	f006 fc38 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005db8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f01b f804 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005dc2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dc6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005dca:	2144      	movs	r1, #68	; 0x44
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f002 fd3e 	bl	800884e <_ZN3jlb5GraphixEc>
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dd8:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8005ddc:	4ac3      	ldr	r2, [pc, #780]	; (80060ec <_ZN3jlb5GraphC1Ev+0xd04>)
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	4611      	mov	r1, r2
 8005de2:	8019      	strh	r1, [r3, #0]
 8005de4:	3302      	adds	r3, #2
 8005de6:	0c12      	lsrs	r2, r2, #16
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dee:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8005df2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dfc:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8005e00:	2203      	movs	r2, #3
 8005e02:	605a      	str	r2, [r3, #4]
 8005e04:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f01a ffdc 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005e0e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8005e12:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e16:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 8005e1a:	f507 7051 	add.w	r0, r7, #836	; 0x344
 8005e1e:	ca06      	ldmia	r2, {r1, r2}
 8005e20:	f006 fc94 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e24:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8005e28:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80060fc <_ZN3jlb5GraphC1Ev+0xd14>
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	2142      	movs	r1, #66	; 0x42
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7ff fa88 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e36:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f006 fbf4 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e40:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8005e44:	4618      	mov	r0, r3
 8005e46:	f01a ffc0 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 8005e4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e4e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e52:	2144      	movs	r1, #68	; 0x44
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f002 fcfa 	bl	800884e <_ZN3jlb5GraphixEc>
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e60:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8005e64:	4aa2      	ldr	r2, [pc, #648]	; (80060f0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8005e66:	8812      	ldrh	r2, [r2, #0]
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e6e:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8005e72:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e7c:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8005e80:	2202      	movs	r2, #2
 8005e82:	605a      	str	r2, [r3, #4]
 8005e84:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f01a ff9c 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005e8e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005e92:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e96:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 8005e9a:	f507 7058 	add.w	r0, r7, #864	; 0x360
 8005e9e:	ca06      	ldmia	r2, {r1, r2}
 8005ea0:	f006 fc54 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005ea4:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8005ea8:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80060fc <_ZN3jlb5GraphC1Ev+0xd14>
 8005eac:	2200      	movs	r2, #0
 8005eae:	2147      	movs	r1, #71	; 0x47
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f7ff fa48 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005eb6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f006 fbb4 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005ec0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f01a ff80 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 8005eca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ece:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ed2:	2144      	movs	r1, #68	; 0x44
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f002 fcba 	bl	800884e <_ZN3jlb5GraphixEc>
 8005eda:	4604      	mov	r4, r0
 8005edc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ee0:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 8005ee4:	4a82      	ldr	r2, [pc, #520]	; (80060f0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8005ee6:	8812      	ldrh	r2, [r2, #0]
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005eee:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8005ef2:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005efc:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8005f00:	2202      	movs	r2, #2
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f01a ff5c 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005f0e:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8005f12:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f16:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 8005f1a:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8005f1e:	ca06      	ldmia	r2, {r1, r2}
 8005f20:	f006 fc14 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f24:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8005f28:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80060f4 <_ZN3jlb5GraphC1Ev+0xd0c>
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	2149      	movs	r1, #73	; 0x49
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff fa08 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f36:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f006 fb74 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f40:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8005f44:	4618      	mov	r0, r3
 8005f46:	f01a ff40 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 8005f4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f4e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f52:	2144      	movs	r1, #68	; 0x44
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	f002 fc7a 	bl	800884e <_ZN3jlb5GraphixEc>
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f60:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8005f64:	4a62      	ldr	r2, [pc, #392]	; (80060f0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8005f66:	8812      	ldrh	r2, [r2, #0]
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f6e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8005f72:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f7c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8005f80:	2202      	movs	r2, #2
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f01a ff1c 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8005f8e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005f92:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f96:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8005f9a:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8005f9e:	ca06      	ldmia	r2, {r1, r2}
 8005fa0:	f006 fbd4 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005fa4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8005fa8:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80060fc <_ZN3jlb5GraphC1Ev+0xd14>
 8005fac:	2201      	movs	r2, #1
 8005fae:	2146      	movs	r1, #70	; 0x46
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff f9c8 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005fb6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f006 fb34 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8005fc0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f01a ff00 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 8005fca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005fd2:	2145      	movs	r1, #69	; 0x45
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	f002 fc3a 	bl	800884e <_ZN3jlb5GraphixEc>
 8005fda:	4604      	mov	r4, r0
 8005fdc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fe0:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8005fe4:	4a44      	ldr	r2, [pc, #272]	; (80060f8 <_ZN3jlb5GraphC1Ev+0xd10>)
 8005fe6:	8812      	ldrh	r2, [r2, #0]
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fee:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8005ff2:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ffc:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8006000:	2202      	movs	r2, #2
 8006002:	605a      	str	r2, [r3, #4]
 8006004:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8006008:	4618      	mov	r0, r3
 800600a:	f01a fedc 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800600e:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8006012:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006016:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 800601a:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 800601e:	ca06      	ldmia	r2, {r1, r2}
 8006020:	f006 fb94 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006024:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8006028:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80060fc <_ZN3jlb5GraphC1Ev+0xd14>
 800602c:	2200      	movs	r2, #0
 800602e:	2142      	movs	r1, #66	; 0x42
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff f988 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006036:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800603a:	4618      	mov	r0, r3
 800603c:	f006 faf4 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006040:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8006044:	4618      	mov	r0, r3
 8006046:	f01a fec0 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 800604a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800604e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006052:	2145      	movs	r1, #69	; 0x45
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f002 fbfa 	bl	800884e <_ZN3jlb5GraphixEc>
 800605a:	4604      	mov	r4, r0
 800605c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006060:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8006064:	2242      	movs	r2, #66	; 0x42
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800606c:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8006070:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800607a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800607e:	2201      	movs	r2, #1
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8006086:	4618      	mov	r0, r3
 8006088:	f01a fe9d 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800608c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8006090:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006094:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8006098:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 800609c:	ca06      	ldmia	r2, {r1, r2}
 800609e:	f006 fb55 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80060a2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80060a6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80060f4 <_ZN3jlb5GraphC1Ev+0xd0c>
 80060aa:	2202      	movs	r2, #2
 80060ac:	214a      	movs	r1, #74	; 0x4a
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7ff f949 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80060b4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f006 fab5 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80060be:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f01a fe81 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 80060c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80060d0:	2145      	movs	r1, #69	; 0x45
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	f002 fbbb 	bl	800884e <_ZN3jlb5GraphixEc>
 80060d8:	4604      	mov	r4, r0
 80060da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060de:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80060e2:	2242      	movs	r2, #66	; 0x42
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060ea:	e009      	b.n	8006100 <_ZN3jlb5GraphC1Ev+0xd18>
 80060ec:	08025760 	.word	0x08025760
 80060f0:	08025764 	.word	0x08025764
 80060f4:	3f99999a 	.word	0x3f99999a
 80060f8:	08025768 	.word	0x08025768
 80060fc:	3f71463a 	.word	0x3f71463a
 8006100:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8006104:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800610e:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8006112:	2201      	movs	r2, #1
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800611a:	4618      	mov	r0, r3
 800611c:	f01a fe53 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006120:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8006124:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006128:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 800612c:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8006130:	ca06      	ldmia	r2, {r1, r2}
 8006132:	f006 fb0b 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006136:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800613a:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80060fc <_ZN3jlb5GraphC1Ev+0xd14>
 800613e:	2201      	movs	r2, #1
 8006140:	2147      	movs	r1, #71	; 0x47
 8006142:	4620      	mov	r0, r4
 8006144:	f7ff f8ff 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006148:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800614c:	4618      	mov	r0, r3
 800614e:	f006 fa6b 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006152:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8006156:	4618      	mov	r0, r3
 8006158:	f01a fe37 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 800615c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006160:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006164:	2146      	movs	r1, #70	; 0x46
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	f002 fb71 	bl	800884e <_ZN3jlb5GraphixEc>
 800616c:	4604      	mov	r4, r0
 800616e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006172:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8006176:	4ae4      	ldr	r2, [pc, #912]	; (8006508 <_ZN3jlb5GraphC1Ev+0x1120>)
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	4611      	mov	r1, r2
 800617c:	8019      	strh	r1, [r3, #0]
 800617e:	3302      	adds	r3, #2
 8006180:	0c12      	lsrs	r2, r2, #16
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006188:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800618c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006196:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800619a:	2203      	movs	r2, #3
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80061a2:	4618      	mov	r0, r3
 80061a4:	f01a fe0f 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80061a8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80061ac:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80061b0:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 80061b4:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 80061b8:	ca06      	ldmia	r2, {r1, r2}
 80061ba:	f006 fac7 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80061be:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80061c2:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800650c <_ZN3jlb5GraphC1Ev+0x1124>
 80061c6:	2201      	movs	r2, #1
 80061c8:	2143      	movs	r1, #67	; 0x43
 80061ca:	4620      	mov	r0, r4
 80061cc:	f7ff f8bb 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80061d0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80061d4:	4618      	mov	r0, r3
 80061d6:	f006 fa27 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80061da:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80061de:	4618      	mov	r0, r3
 80061e0:	f01a fdf3 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 80061e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061e8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80061ec:	2146      	movs	r1, #70	; 0x46
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	f002 fb2d 	bl	800884e <_ZN3jlb5GraphixEc>
 80061f4:	4604      	mov	r4, r0
 80061f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061fa:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80061fe:	4ac4      	ldr	r2, [pc, #784]	; (8006510 <_ZN3jlb5GraphC1Ev+0x1128>)
 8006200:	8812      	ldrh	r2, [r2, #0]
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006208:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800620c:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006216:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800621a:	2202      	movs	r2, #2
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8006222:	4618      	mov	r0, r3
 8006224:	f01a fdcf 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006228:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800622c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006230:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8006234:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8006238:	ca06      	ldmia	r2, {r1, r2}
 800623a:	f006 fa87 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800623e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8006242:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800650c <_ZN3jlb5GraphC1Ev+0x1124>
 8006246:	2200      	movs	r2, #0
 8006248:	2144      	movs	r1, #68	; 0x44
 800624a:	4620      	mov	r0, r4
 800624c:	f7ff f87b 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006250:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8006254:	4618      	mov	r0, r3
 8006256:	f006 f9e7 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800625a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800625e:	4618      	mov	r0, r3
 8006260:	f01a fdb3 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8006264:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006268:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800626c:	2146      	movs	r1, #70	; 0x46
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	f002 faed 	bl	800884e <_ZN3jlb5GraphixEc>
 8006274:	4604      	mov	r4, r0
 8006276:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800627a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800627e:	4aa4      	ldr	r2, [pc, #656]	; (8006510 <_ZN3jlb5GraphC1Ev+0x1128>)
 8006280:	8812      	ldrh	r2, [r2, #0]
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006288:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800628c:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006296:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800629a:	2202      	movs	r2, #2
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80062a2:	4618      	mov	r0, r3
 80062a4:	f01a fd8f 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80062a8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80062ac:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80062b0:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 80062b4:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 80062b8:	ca06      	ldmia	r2, {r1, r2}
 80062ba:	f006 fa47 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80062be:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80062c2:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8006514 <_ZN3jlb5GraphC1Ev+0x112c>
 80062c6:	2202      	movs	r2, #2
 80062c8:	2147      	movs	r1, #71	; 0x47
 80062ca:	4620      	mov	r0, r4
 80062cc:	f7ff f83b 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80062d0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80062d4:	4618      	mov	r0, r3
 80062d6:	f006 f9a7 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80062da:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80062de:	4618      	mov	r0, r3
 80062e0:	f01a fd73 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 80062e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062e8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80062ec:	2146      	movs	r1, #70	; 0x46
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	f002 faad 	bl	800884e <_ZN3jlb5GraphixEc>
 80062f4:	4604      	mov	r4, r0
 80062f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062fa:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80062fe:	4a84      	ldr	r2, [pc, #528]	; (8006510 <_ZN3jlb5GraphC1Ev+0x1128>)
 8006300:	8812      	ldrh	r2, [r2, #0]
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006308:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800630c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006316:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800631a:	2202      	movs	r2, #2
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006322:	4618      	mov	r0, r3
 8006324:	f01a fd4f 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006328:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800632c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006330:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006334:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8006338:	ca06      	ldmia	r2, {r1, r2}
 800633a:	f006 fa07 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800633e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8006342:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800650c <_ZN3jlb5GraphC1Ev+0x1124>
 8006346:	2201      	movs	r2, #1
 8006348:	2149      	movs	r1, #73	; 0x49
 800634a:	4620      	mov	r0, r4
 800634c:	f7fe fffb 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006350:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8006354:	4618      	mov	r0, r3
 8006356:	f006 f967 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800635a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800635e:	4618      	mov	r0, r3
 8006360:	f01a fd33 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8006364:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006368:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800636c:	2146      	movs	r1, #70	; 0x46
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	f002 fa6d 	bl	800884e <_ZN3jlb5GraphixEc>
 8006374:	4604      	mov	r4, r0
 8006376:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800637a:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800637e:	4a62      	ldr	r2, [pc, #392]	; (8006508 <_ZN3jlb5GraphC1Ev+0x1120>)
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	4611      	mov	r1, r2
 8006384:	8019      	strh	r1, [r3, #0]
 8006386:	3302      	adds	r3, #2
 8006388:	0c12      	lsrs	r2, r2, #16
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006390:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8006394:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800639e:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 80063a2:	2203      	movs	r2, #3
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80063aa:	4618      	mov	r0, r3
 80063ac:	f01a fd0b 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80063b0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80063b4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80063b8:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 80063bc:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 80063c0:	ca06      	ldmia	r2, {r1, r2}
 80063c2:	f006 f9c3 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80063c6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80063ca:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800650c <_ZN3jlb5GraphC1Ev+0x1124>
 80063ce:	2200      	movs	r2, #0
 80063d0:	2148      	movs	r1, #72	; 0x48
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7fe ffb7 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80063d8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80063dc:	4618      	mov	r0, r3
 80063de:	f006 f923 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80063e2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80063e6:	4618      	mov	r0, r3
 80063e8:	f01a fcef 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 80063ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063f0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80063f4:	2147      	movs	r1, #71	; 0x47
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	f002 fa29 	bl	800884e <_ZN3jlb5GraphixEc>
 80063fc:	4604      	mov	r4, r0
 80063fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006402:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8006406:	4a44      	ldr	r2, [pc, #272]	; (8006518 <_ZN3jlb5GraphC1Ev+0x1130>)
 8006408:	8812      	ldrh	r2, [r2, #0]
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006410:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8006414:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800641e:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8006422:	2202      	movs	r2, #2
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800642a:	4618      	mov	r0, r3
 800642c:	f01a fccb 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006430:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8006434:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006438:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 800643c:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8006440:	ca06      	ldmia	r2, {r1, r2}
 8006442:	f006 f983 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006446:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800644a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006514 <_ZN3jlb5GraphC1Ev+0x112c>
 800644e:	2202      	movs	r2, #2
 8006450:	2146      	movs	r1, #70	; 0x46
 8006452:	4620      	mov	r0, r4
 8006454:	f7fe ff77 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006458:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800645c:	4618      	mov	r0, r3
 800645e:	f006 f8e3 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006462:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8006466:	4618      	mov	r0, r3
 8006468:	f01a fcaf 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 800646c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006470:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006474:	2147      	movs	r1, #71	; 0x47
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	f002 f9e9 	bl	800884e <_ZN3jlb5GraphixEc>
 800647c:	4604      	mov	r4, r0
 800647e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006482:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8006486:	4a24      	ldr	r2, [pc, #144]	; (8006518 <_ZN3jlb5GraphC1Ev+0x1130>)
 8006488:	8812      	ldrh	r2, [r2, #0]
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006490:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8006494:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800649e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 80064a2:	2202      	movs	r2, #2
 80064a4:	605a      	str	r2, [r3, #4]
 80064a6:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80064aa:	4618      	mov	r0, r3
 80064ac:	f01a fc8b 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80064b0:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80064b4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80064b8:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 80064bc:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 80064c0:	ca06      	ldmia	r2, {r1, r2}
 80064c2:	f006 f943 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064c6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80064ca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800650c <_ZN3jlb5GraphC1Ev+0x1124>
 80064ce:	2201      	movs	r2, #1
 80064d0:	2144      	movs	r1, #68	; 0x44
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7fe ff37 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80064d8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80064dc:	4618      	mov	r0, r3
 80064de:	f006 f8a3 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80064e2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80064e6:	4618      	mov	r0, r3
 80064e8:	f01a fc6f 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 80064ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064f0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80064f4:	2147      	movs	r1, #71	; 0x47
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	f002 f9a9 	bl	800884e <_ZN3jlb5GraphixEc>
 80064fc:	4604      	mov	r4, r0
 80064fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006502:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8006506:	e009      	b.n	800651c <_ZN3jlb5GraphC1Ev+0x1134>
 8006508:	0802576c 	.word	0x0802576c
 800650c:	3f71463a 	.word	0x3f71463a
 8006510:	08025770 	.word	0x08025770
 8006514:	3f99999a 	.word	0x3f99999a
 8006518:	08025774 	.word	0x08025774
 800651c:	4ae6      	ldr	r2, [pc, #920]	; (80068b8 <_ZN3jlb5GraphC1Ev+0x14d0>)
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	4611      	mov	r1, r2
 8006522:	8019      	strh	r1, [r3, #0]
 8006524:	3302      	adds	r3, #2
 8006526:	0c12      	lsrs	r2, r2, #16
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800652e:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8006532:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800653c:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8006540:	2203      	movs	r2, #3
 8006542:	605a      	str	r2, [r3, #4]
 8006544:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8006548:	4618      	mov	r0, r3
 800654a:	f01a fc3c 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800654e:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8006552:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006556:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 800655a:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 800655e:	ca06      	ldmia	r2, {r1, r2}
 8006560:	f006 f8f4 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006564:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8006568:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 80068bc <_ZN3jlb5GraphC1Ev+0x14d4>
 800656c:	2200      	movs	r2, #0
 800656e:	2145      	movs	r1, #69	; 0x45
 8006570:	4620      	mov	r0, r4
 8006572:	f7fe fee8 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006576:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800657a:	4618      	mov	r0, r3
 800657c:	f006 f854 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006580:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8006584:	4618      	mov	r0, r3
 8006586:	f01a fc20 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 800658a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800658e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006592:	2147      	movs	r1, #71	; 0x47
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	f002 f95a 	bl	800884e <_ZN3jlb5GraphixEc>
 800659a:	4604      	mov	r4, r0
 800659c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065a0:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80065a4:	4ac4      	ldr	r2, [pc, #784]	; (80068b8 <_ZN3jlb5GraphC1Ev+0x14d0>)
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	4611      	mov	r1, r2
 80065aa:	8019      	strh	r1, [r3, #0]
 80065ac:	3302      	adds	r3, #2
 80065ae:	0c12      	lsrs	r2, r2, #16
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065b6:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80065ba:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065c4:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80065c8:	2203      	movs	r2, #3
 80065ca:	605a      	str	r2, [r3, #4]
 80065cc:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80065d0:	4618      	mov	r0, r3
 80065d2:	f01a fbf8 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80065d6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80065da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80065de:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 80065e2:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 80065e6:	ca06      	ldmia	r2, {r1, r2}
 80065e8:	f006 f8b0 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065ec:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80065f0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80068bc <_ZN3jlb5GraphC1Ev+0x14d4>
 80065f4:	2201      	movs	r2, #1
 80065f6:	214a      	movs	r1, #74	; 0x4a
 80065f8:	4620      	mov	r0, r4
 80065fa:	f7fe fea4 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80065fe:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8006602:	4618      	mov	r0, r3
 8006604:	f006 f810 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006608:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800660c:	4618      	mov	r0, r3
 800660e:	f01a fbdc 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 8006612:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006616:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800661a:	2147      	movs	r1, #71	; 0x47
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	f002 f916 	bl	800884e <_ZN3jlb5GraphixEc>
 8006622:	4604      	mov	r4, r0
 8006624:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006628:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 800662c:	4aa4      	ldr	r2, [pc, #656]	; (80068c0 <_ZN3jlb5GraphC1Ev+0x14d8>)
 800662e:	8812      	ldrh	r2, [r2, #0]
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006636:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 800663a:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006644:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8006648:	2202      	movs	r2, #2
 800664a:	605a      	str	r2, [r3, #4]
 800664c:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8006650:	4618      	mov	r0, r3
 8006652:	f01a fbb8 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006656:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800665a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800665e:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 8006662:	f207 5004 	addw	r0, r7, #1284	; 0x504
 8006666:	ca06      	ldmia	r2, {r1, r2}
 8006668:	f006 f870 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800666c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8006670:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80068bc <_ZN3jlb5GraphC1Ev+0x14d4>
 8006674:	2200      	movs	r2, #0
 8006676:	2149      	movs	r1, #73	; 0x49
 8006678:	4620      	mov	r0, r4
 800667a:	f7fe fe64 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800667e:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8006682:	4618      	mov	r0, r3
 8006684:	f005 ffd0 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006688:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800668c:	4618      	mov	r0, r3
 800668e:	f01a fb9c 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 8006692:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006696:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800669a:	2148      	movs	r1, #72	; 0x48
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	f002 f8d6 	bl	800884e <_ZN3jlb5GraphixEc>
 80066a2:	4604      	mov	r4, r0
 80066a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066a8:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 80066ac:	4a85      	ldr	r2, [pc, #532]	; (80068c4 <_ZN3jlb5GraphC1Ev+0x14dc>)
 80066ae:	8812      	ldrh	r2, [r2, #0]
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066b6:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80066ba:	f207 5234 	addw	r2, r7, #1332	; 0x534
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066c4:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80066c8:	2202      	movs	r2, #2
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80066d0:	4618      	mov	r0, r3
 80066d2:	f01a fb78 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80066d6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80066da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80066de:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 80066e2:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80066e6:	ca06      	ldmia	r2, {r1, r2}
 80066e8:	f006 f830 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80066ec:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80066f0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80068bc <_ZN3jlb5GraphC1Ev+0x14d4>
 80066f4:	2201      	movs	r2, #1
 80066f6:	2146      	movs	r1, #70	; 0x46
 80066f8:	4620      	mov	r0, r4
 80066fa:	f7fe fe24 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80066fe:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006702:	4618      	mov	r0, r3
 8006704:	f005 ff90 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006708:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800670c:	4618      	mov	r0, r3
 800670e:	f01a fb5c 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 8006712:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006716:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800671a:	2148      	movs	r1, #72	; 0x48
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	f002 f896 	bl	800884e <_ZN3jlb5GraphixEc>
 8006722:	4604      	mov	r4, r0
 8006724:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006728:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800672c:	2246      	movs	r2, #70	; 0x46
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006734:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8006738:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006742:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8006746:	2201      	movs	r2, #1
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800674e:	4618      	mov	r0, r3
 8006750:	f01a fb39 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006754:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8006758:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800675c:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8006760:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 8006764:	ca06      	ldmia	r2, {r1, r2}
 8006766:	f005 fff1 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800676a:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 800676e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80068bc <_ZN3jlb5GraphC1Ev+0x14d4>
 8006772:	2200      	movs	r2, #0
 8006774:	214b      	movs	r1, #75	; 0x4b
 8006776:	4620      	mov	r0, r4
 8006778:	f7fe fde5 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800677c:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8006780:	4618      	mov	r0, r3
 8006782:	f005 ff51 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006786:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800678a:	4618      	mov	r0, r3
 800678c:	f01a fb1d 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8006790:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006794:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006798:	2148      	movs	r1, #72	; 0x48
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	f002 f857 	bl	800884e <_ZN3jlb5GraphixEc>
 80067a0:	4604      	mov	r4, r0
 80067a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067a6:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 80067aa:	2246      	movs	r2, #70	; 0x46
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067b2:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80067b6:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067c0:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80067c4:	2201      	movs	r2, #1
 80067c6:	605a      	str	r2, [r3, #4]
 80067c8:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80067cc:	4618      	mov	r0, r3
 80067ce:	f01a fafa 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80067d2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80067d6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80067da:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 80067de:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 80067e2:	ca06      	ldmia	r2, {r1, r2}
 80067e4:	f005 ffb2 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80067e8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80067ec:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80068cc <_ZN3jlb5GraphC1Ev+0x14e4>
 80067f0:	2202      	movs	r2, #2
 80067f2:	214d      	movs	r1, #77	; 0x4d
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7fe fda6 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80067fa:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80067fe:	4618      	mov	r0, r3
 8006800:	f005 ff12 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006804:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8006808:	4618      	mov	r0, r3
 800680a:	f01a fade 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 800680e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006812:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006816:	2149      	movs	r1, #73	; 0x49
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	f002 f818 	bl	800884e <_ZN3jlb5GraphixEc>
 800681e:	4604      	mov	r4, r0
 8006820:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006824:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8006828:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <_ZN3jlb5GraphC1Ev+0x14e0>)
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	4611      	mov	r1, r2
 800682e:	8019      	strh	r1, [r3, #0]
 8006830:	3302      	adds	r3, #2
 8006832:	0c12      	lsrs	r2, r2, #16
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800683a:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800683e:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006848:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800684c:	2203      	movs	r2, #3
 800684e:	605a      	str	r2, [r3, #4]
 8006850:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006854:	4618      	mov	r0, r3
 8006856:	f01a fab6 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800685a:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 800685e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006862:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8006866:	f207 5074 	addw	r0, r7, #1396	; 0x574
 800686a:	ca06      	ldmia	r2, {r1, r2}
 800686c:	f005 ff6e 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006870:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8006874:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80068bc <_ZN3jlb5GraphC1Ev+0x14d4>
 8006878:	2200      	movs	r2, #0
 800687a:	2146      	movs	r1, #70	; 0x46
 800687c:	4620      	mov	r0, r4
 800687e:	f7fe fd62 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006882:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8006886:	4618      	mov	r0, r3
 8006888:	f005 fece 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800688c:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006890:	4618      	mov	r0, r3
 8006892:	f01a fa9a 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8006896:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800689a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800689e:	2149      	movs	r1, #73	; 0x49
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	f001 ffd4 	bl	800884e <_ZN3jlb5GraphixEc>
 80068a6:	4604      	mov	r4, r0
 80068a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ac:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 80068b0:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <_ZN3jlb5GraphC1Ev+0x14e0>)
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	4611      	mov	r1, r2
 80068b6:	e00b      	b.n	80068d0 <_ZN3jlb5GraphC1Ev+0x14e8>
 80068b8:	08025778 	.word	0x08025778
 80068bc:	3f71463a 	.word	0x3f71463a
 80068c0:	08025774 	.word	0x08025774
 80068c4:	0802577c 	.word	0x0802577c
 80068c8:	08025780 	.word	0x08025780
 80068cc:	3f99999a 	.word	0x3f99999a
 80068d0:	8019      	strh	r1, [r3, #0]
 80068d2:	3302      	adds	r3, #2
 80068d4:	0c12      	lsrs	r2, r2, #16
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068dc:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 80068e0:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ea:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 80068ee:	2203      	movs	r2, #3
 80068f0:	605a      	str	r2, [r3, #4]
 80068f2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80068f6:	4618      	mov	r0, r3
 80068f8:	f01a fa65 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80068fc:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006900:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006904:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8006908:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 800690c:	ca06      	ldmia	r2, {r1, r2}
 800690e:	f005 ff1d 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006912:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8006916:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 80068cc <_ZN3jlb5GraphC1Ev+0x14e4>
 800691a:	2202      	movs	r2, #2
 800691c:	2144      	movs	r1, #68	; 0x44
 800691e:	4620      	mov	r0, r4
 8006920:	f7fe fd11 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006924:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8006928:	4618      	mov	r0, r3
 800692a:	f005 fe7d 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800692e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006932:	4618      	mov	r0, r3
 8006934:	f01a fa49 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8006938:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800693c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006940:	2149      	movs	r1, #73	; 0x49
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	f001 ff83 	bl	800884e <_ZN3jlb5GraphixEc>
 8006948:	4604      	mov	r4, r0
 800694a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800694e:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8006952:	4ae7      	ldr	r2, [pc, #924]	; (8006cf0 <_ZN3jlb5GraphC1Ev+0x1908>)
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	4611      	mov	r1, r2
 8006958:	8019      	strh	r1, [r3, #0]
 800695a:	3302      	adds	r3, #2
 800695c:	0c12      	lsrs	r2, r2, #16
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006964:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006968:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006972:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006976:	2203      	movs	r2, #3
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 800697e:	4618      	mov	r0, r3
 8006980:	f01a fa21 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006984:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006988:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800698c:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8006990:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 8006994:	ca06      	ldmia	r2, {r1, r2}
 8006996:	f005 fed9 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800699a:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 800699e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8006cf4 <_ZN3jlb5GraphC1Ev+0x190c>
 80069a2:	2201      	movs	r2, #1
 80069a4:	2147      	movs	r1, #71	; 0x47
 80069a6:	4620      	mov	r0, r4
 80069a8:	f7fe fccd 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069ac:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 80069b0:	4618      	mov	r0, r3
 80069b2:	f005 fe39 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80069b6:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 80069ba:	4618      	mov	r0, r3
 80069bc:	f01a fa05 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 80069c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069c4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80069c8:	2149      	movs	r1, #73	; 0x49
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	f001 ff3f 	bl	800884e <_ZN3jlb5GraphixEc>
 80069d0:	4604      	mov	r4, r0
 80069d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069d6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80069da:	4ac7      	ldr	r2, [pc, #796]	; (8006cf8 <_ZN3jlb5GraphC1Ev+0x1910>)
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	4611      	mov	r1, r2
 80069e0:	8019      	strh	r1, [r3, #0]
 80069e2:	3302      	adds	r3, #2
 80069e4:	0c12      	lsrs	r2, r2, #16
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069ec:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 80069f0:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069fa:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 80069fe:	2203      	movs	r2, #3
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f01a f9dd 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006a0c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006a10:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a14:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8006a18:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8006a1c:	ca06      	ldmia	r2, {r1, r2}
 8006a1e:	f005 fe95 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a22:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8006a26:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8006cf4 <_ZN3jlb5GraphC1Ev+0x190c>
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	214c      	movs	r1, #76	; 0x4c
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7fe fc89 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a34:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f005 fdf5 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006a3e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f01a f9c1 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8006a48:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a4c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a50:	2149      	movs	r1, #73	; 0x49
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	f001 fefb 	bl	800884e <_ZN3jlb5GraphixEc>
 8006a58:	4604      	mov	r4, r0
 8006a5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a5e:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8006a62:	4aa5      	ldr	r2, [pc, #660]	; (8006cf8 <_ZN3jlb5GraphC1Ev+0x1910>)
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	4611      	mov	r1, r2
 8006a68:	8019      	strh	r1, [r3, #0]
 8006a6a:	3302      	adds	r3, #2
 8006a6c:	0c12      	lsrs	r2, r2, #16
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a74:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006a78:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a82:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006a86:	2203      	movs	r2, #3
 8006a88:	605a      	str	r2, [r3, #4]
 8006a8a:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f01a f999 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006a94:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006a98:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a9c:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8006aa0:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8006aa4:	ca06      	ldmia	r2, {r1, r2}
 8006aa6:	f005 fe51 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006aaa:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006aae:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8006cfc <_ZN3jlb5GraphC1Ev+0x1914>
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	214e      	movs	r1, #78	; 0x4e
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7fe fc45 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006abc:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f005 fdb1 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ac6:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006aca:	4618      	mov	r0, r3
 8006acc:	f01a f97d 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006ad0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ad4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ad8:	2149      	movs	r1, #73	; 0x49
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	f001 feb7 	bl	800884e <_ZN3jlb5GraphixEc>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ae6:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8006aea:	4a83      	ldr	r2, [pc, #524]	; (8006cf8 <_ZN3jlb5GraphC1Ev+0x1910>)
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	4611      	mov	r1, r2
 8006af0:	8019      	strh	r1, [r3, #0]
 8006af2:	3302      	adds	r3, #2
 8006af4:	0c12      	lsrs	r2, r2, #16
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006afc:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006b00:	f207 6214 	addw	r2, r7, #1556	; 0x614
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b0a:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006b0e:	2203      	movs	r2, #3
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006b16:	4618      	mov	r0, r3
 8006b18:	f01a f955 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006b1c:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006b20:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b24:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8006b28:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8006b2c:	ca06      	ldmia	r2, {r1, r2}
 8006b2e:	f005 fe0d 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b32:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006b36:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8006cf4 <_ZN3jlb5GraphC1Ev+0x190c>
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	214b      	movs	r1, #75	; 0x4b
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f7fe fc01 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b44:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f005 fd6d 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b4e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006b52:	4618      	mov	r0, r3
 8006b54:	f01a f939 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8006b58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b5c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b60:	214a      	movs	r1, #74	; 0x4a
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	f001 fe73 	bl	800884e <_ZN3jlb5GraphixEc>
 8006b68:	4604      	mov	r4, r0
 8006b6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b6e:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8006b72:	224c      	movs	r2, #76	; 0x4c
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b7a:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8006b7e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b88:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	605a      	str	r2, [r3, #4]
 8006b90:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006b94:	4618      	mov	r0, r3
 8006b96:	f01a f916 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006b9a:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006b9e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ba2:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8006ba6:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8006baa:	ca06      	ldmia	r2, {r1, r2}
 8006bac:	f005 fdce 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006bb0:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8006bb4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8006cf4 <_ZN3jlb5GraphC1Ev+0x190c>
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2147      	movs	r1, #71	; 0x47
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f7fe fbc2 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006bc2:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f005 fd2e 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006bcc:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f01a f8fa 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8006bd6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bda:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006bde:	214a      	movs	r1, #74	; 0x4a
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	f001 fe34 	bl	800884e <_ZN3jlb5GraphixEc>
 8006be6:	4604      	mov	r4, r0
 8006be8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bec:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8006bf0:	224c      	movs	r2, #76	; 0x4c
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bf8:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006bfc:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c06:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006c12:	4618      	mov	r0, r3
 8006c14:	f01a f8d7 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006c18:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006c1c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c20:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 8006c24:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8006c28:	ca06      	ldmia	r2, {r1, r2}
 8006c2a:	f005 fd8f 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c2e:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8006c32:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006cfc <_ZN3jlb5GraphC1Ev+0x1914>
 8006c36:	2202      	movs	r2, #2
 8006c38:	2145      	movs	r1, #69	; 0x45
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7fe fb83 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c40:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8006c44:	4618      	mov	r0, r3
 8006c46:	f005 fcef 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006c4a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f01a f8bb 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 8006c54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c58:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c5c:	214a      	movs	r1, #74	; 0x4a
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	f001 fdf5 	bl	800884e <_ZN3jlb5GraphixEc>
 8006c64:	4604      	mov	r4, r0
 8006c66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c6a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8006c6e:	4a24      	ldr	r2, [pc, #144]	; (8006d00 <_ZN3jlb5GraphC1Ev+0x1918>)
 8006c70:	8812      	ldrh	r2, [r2, #0]
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c78:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8006c7c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c86:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006c92:	4618      	mov	r0, r3
 8006c94:	f01a f897 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006c98:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006c9c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ca0:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8006ca4:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8006ca8:	ca06      	ldmia	r2, {r1, r2}
 8006caa:	f005 fd4f 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006cae:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8006cb2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006cf4 <_ZN3jlb5GraphC1Ev+0x190c>
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	214c      	movs	r1, #76	; 0x4c
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7fe fb43 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006cc0:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f005 fcaf 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006cca:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f01a f87b 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8006cd4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cd8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006cdc:	214b      	movs	r1, #75	; 0x4b
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	f001 fdb5 	bl	800884e <_ZN3jlb5GraphixEc>
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cea:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8006cee:	e009      	b.n	8006d04 <_ZN3jlb5GraphC1Ev+0x191c>
 8006cf0:	08025780 	.word	0x08025780
 8006cf4:	3f71463a 	.word	0x3f71463a
 8006cf8:	08025784 	.word	0x08025784
 8006cfc:	3f99999a 	.word	0x3f99999a
 8006d00:	08025788 	.word	0x08025788
 8006d04:	4ae4      	ldr	r2, [pc, #912]	; (8007098 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	4611      	mov	r1, r2
 8006d0a:	8019      	strh	r1, [r3, #0]
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	0c12      	lsrs	r2, r2, #16
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d16:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006d1a:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d24:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006d28:	2203      	movs	r2, #3
 8006d2a:	605a      	str	r2, [r3, #4]
 8006d2c:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006d30:	4618      	mov	r0, r3
 8006d32:	f01a f848 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006d36:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006d3a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d3e:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 8006d42:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8006d46:	ca06      	ldmia	r2, {r1, r2}
 8006d48:	f005 fd00 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d4c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006d50:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800709c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006d54:	2201      	movs	r2, #1
 8006d56:	2148      	movs	r1, #72	; 0x48
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f7fe faf4 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006d5e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006d62:	4618      	mov	r0, r3
 8006d64:	f005 fc60 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006d68:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f01a f82c 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8006d72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d76:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d7a:	214b      	movs	r1, #75	; 0x4b
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f001 fd66 	bl	800884e <_ZN3jlb5GraphixEc>
 8006d82:	4604      	mov	r4, r0
 8006d84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d88:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8006d8c:	4ac4      	ldr	r2, [pc, #784]	; (80070a0 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8006d8e:	8812      	ldrh	r2, [r2, #0]
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d96:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8006d9a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006da4:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8006da8:	2202      	movs	r2, #2
 8006daa:	605a      	str	r2, [r3, #4]
 8006dac:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f01a f808 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006db6:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006dba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006dbe:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 8006dc2:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 8006dc6:	ca06      	ldmia	r2, {r1, r2}
 8006dc8:	f005 fcc0 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006dcc:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8006dd0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800709c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2149      	movs	r1, #73	; 0x49
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7fe fab4 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006dde:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8006de2:	4618      	mov	r0, r3
 8006de4:	f005 fc20 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006de8:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f019 ffec 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 8006df2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006df6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006dfa:	214b      	movs	r1, #75	; 0x4b
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	f001 fd26 	bl	800884e <_ZN3jlb5GraphixEc>
 8006e02:	4604      	mov	r4, r0
 8006e04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e08:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8006e0c:	4aa4      	ldr	r2, [pc, #656]	; (80070a0 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8006e0e:	8812      	ldrh	r2, [r2, #0]
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e16:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8006e1a:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e24:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8006e28:	2202      	movs	r2, #2
 8006e2a:	605a      	str	r2, [r3, #4]
 8006e2c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f019 ffc8 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006e36:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006e3a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e3e:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 8006e42:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 8006e46:	ca06      	ldmia	r2, {r1, r2}
 8006e48:	f005 fc80 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e4c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8006e50:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80070a4 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8006e54:	2202      	movs	r2, #2
 8006e56:	214c      	movs	r1, #76	; 0x4c
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f7fe fa74 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006e5e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8006e62:	4618      	mov	r0, r3
 8006e64:	f005 fbe0 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e68:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f019 ffac 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 8006e72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e76:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e7a:	214b      	movs	r1, #75	; 0x4b
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	f001 fce6 	bl	800884e <_ZN3jlb5GraphixEc>
 8006e82:	4604      	mov	r4, r0
 8006e84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e88:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8006e8c:	4a84      	ldr	r2, [pc, #528]	; (80070a0 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8006e8e:	8812      	ldrh	r2, [r2, #0]
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e96:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8006e9a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ea4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	605a      	str	r2, [r3, #4]
 8006eac:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f019 ff88 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006eb6:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8006eba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ebe:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 8006ec2:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 8006ec6:	ca06      	ldmia	r2, {r1, r2}
 8006ec8:	f005 fc40 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ecc:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8006ed0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800709c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	214e      	movs	r1, #78	; 0x4e
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f7fe fa34 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006ede:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f005 fba0 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ee8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8006eec:	4618      	mov	r0, r3
 8006eee:	f019 ff6c 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8006ef2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ef6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006efa:	214b      	movs	r1, #75	; 0x4b
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	f001 fca6 	bl	800884e <_ZN3jlb5GraphixEc>
 8006f02:	4604      	mov	r4, r0
 8006f04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f08:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8006f0c:	4a62      	ldr	r2, [pc, #392]	; (8007098 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	4611      	mov	r1, r2
 8006f12:	8019      	strh	r1, [r3, #0]
 8006f14:	3302      	adds	r3, #2
 8006f16:	0c12      	lsrs	r2, r2, #16
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f1e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8006f22:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f2c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8006f30:	2203      	movs	r2, #3
 8006f32:	605a      	str	r2, [r3, #4]
 8006f34:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f019 ff44 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006f3e:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006f42:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f46:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8006f4a:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 8006f4e:	ca06      	ldmia	r2, {r1, r2}
 8006f50:	f005 fbfc 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006f54:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006f58:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800709c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	214d      	movs	r1, #77	; 0x4d
 8006f60:	4620      	mov	r0, r4
 8006f62:	f7fe f9f0 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f66:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f005 fb5c 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f70:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006f74:	4618      	mov	r0, r3
 8006f76:	f019 ff28 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 8006f7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f7e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f82:	214c      	movs	r1, #76	; 0x4c
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	f001 fc62 	bl	800884e <_ZN3jlb5GraphixEc>
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f90:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006f94:	4a44      	ldr	r2, [pc, #272]	; (80070a8 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8006f96:	8812      	ldrh	r2, [r2, #0]
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f9e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8006fa2:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fac:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	605a      	str	r2, [r3, #4]
 8006fb4:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f019 ff04 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8006fbe:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006fc2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006fc6:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 8006fca:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 8006fce:	ca06      	ldmia	r2, {r1, r2}
 8006fd0:	f005 fbbc 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006fd4:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8006fd8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80070a4 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8006fdc:	2202      	movs	r2, #2
 8006fde:	214b      	movs	r1, #75	; 0x4b
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f7fe f9b0 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006fe6:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8006fea:	4618      	mov	r0, r3
 8006fec:	f005 fb1c 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ff0:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f019 fee8 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 8006ffa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ffe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007002:	214c      	movs	r1, #76	; 0x4c
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	f001 fc22 	bl	800884e <_ZN3jlb5GraphixEc>
 800700a:	4604      	mov	r4, r0
 800700c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007010:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8007014:	4a24      	ldr	r2, [pc, #144]	; (80070a8 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8007016:	8812      	ldrh	r2, [r2, #0]
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800701e:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8007022:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800702c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8007030:	2202      	movs	r2, #2
 8007032:	605a      	str	r2, [r3, #4]
 8007034:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007038:	4618      	mov	r0, r3
 800703a:	f019 fec4 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800703e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007042:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007046:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 800704a:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 800704e:	ca06      	ldmia	r2, {r1, r2}
 8007050:	f005 fb7c 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007054:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8007058:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800709c <_ZN3jlb5GraphC1Ev+0x1cb4>
 800705c:	2201      	movs	r2, #1
 800705e:	2149      	movs	r1, #73	; 0x49
 8007060:	4620      	mov	r0, r4
 8007062:	f7fe f970 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007066:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800706a:	4618      	mov	r0, r3
 800706c:	f005 fadc 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007070:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007074:	4618      	mov	r0, r3
 8007076:	f019 fea8 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 800707a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800707e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007082:	214c      	movs	r1, #76	; 0x4c
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f001 fbe2 	bl	800884e <_ZN3jlb5GraphixEc>
 800708a:	4604      	mov	r4, r0
 800708c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007090:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8007094:	e00a      	b.n	80070ac <_ZN3jlb5GraphC1Ev+0x1cc4>
 8007096:	bf00      	nop
 8007098:	0802578c 	.word	0x0802578c
 800709c:	3f71463a 	.word	0x3f71463a
 80070a0:	08025790 	.word	0x08025790
 80070a4:	3f99999a 	.word	0x3f99999a
 80070a8:	08025794 	.word	0x08025794
 80070ac:	4ae4      	ldr	r2, [pc, #912]	; (8007440 <_ZN3jlb5GraphC1Ev+0x2058>)
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	4611      	mov	r1, r2
 80070b2:	8019      	strh	r1, [r3, #0]
 80070b4:	3302      	adds	r3, #2
 80070b6:	0c12      	lsrs	r2, r2, #16
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070be:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80070c2:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070cc:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80070d0:	2203      	movs	r2, #3
 80070d2:	605a      	str	r2, [r3, #4]
 80070d4:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80070d8:	4618      	mov	r0, r3
 80070da:	f019 fe74 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80070de:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80070e2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80070e6:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 80070ea:	f207 7034 	addw	r0, r7, #1844	; 0x734
 80070ee:	ca06      	ldmia	r2, {r1, r2}
 80070f0:	f005 fb2c 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80070f4:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80070f8:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8007444 <_ZN3jlb5GraphC1Ev+0x205c>
 80070fc:	2200      	movs	r2, #0
 80070fe:	214a      	movs	r1, #74	; 0x4a
 8007100:	4620      	mov	r0, r4
 8007102:	f7fe f920 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007106:	f207 7334 	addw	r3, r7, #1844	; 0x734
 800710a:	4618      	mov	r0, r3
 800710c:	f005 fa8c 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007110:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8007114:	4618      	mov	r0, r3
 8007116:	f019 fe58 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 800711a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800711e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007122:	214c      	movs	r1, #76	; 0x4c
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	f001 fb92 	bl	800884e <_ZN3jlb5GraphixEc>
 800712a:	4604      	mov	r4, r0
 800712c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007130:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8007134:	4ac2      	ldr	r2, [pc, #776]	; (8007440 <_ZN3jlb5GraphC1Ev+0x2058>)
 8007136:	6812      	ldr	r2, [r2, #0]
 8007138:	4611      	mov	r1, r2
 800713a:	8019      	strh	r1, [r3, #0]
 800713c:	3302      	adds	r3, #2
 800713e:	0c12      	lsrs	r2, r2, #16
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007146:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 800714a:	f207 7264 	addw	r2, r7, #1892	; 0x764
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007154:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8007158:	2203      	movs	r2, #3
 800715a:	605a      	str	r2, [r3, #4]
 800715c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8007160:	4618      	mov	r0, r3
 8007162:	f019 fe30 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007166:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800716a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800716e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8007172:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8007176:	ca06      	ldmia	r2, {r1, r2}
 8007178:	f005 fae8 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800717c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8007180:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8007444 <_ZN3jlb5GraphC1Ev+0x205c>
 8007184:	2201      	movs	r2, #1
 8007186:	214f      	movs	r1, #79	; 0x4f
 8007188:	4620      	mov	r0, r4
 800718a:	f7fe f8dc 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800718e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8007192:	4618      	mov	r0, r3
 8007194:	f005 fa48 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007198:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800719c:	4618      	mov	r0, r3
 800719e:	f019 fe14 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 80071a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80071aa:	214c      	movs	r1, #76	; 0x4c
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	f001 fb4e 	bl	800884e <_ZN3jlb5GraphixEc>
 80071b2:	4604      	mov	r4, r0
 80071b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071b8:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80071bc:	4aa2      	ldr	r2, [pc, #648]	; (8007448 <_ZN3jlb5GraphC1Ev+0x2060>)
 80071be:	8812      	ldrh	r2, [r2, #0]
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071c6:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80071ca:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071d4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80071d8:	2202      	movs	r2, #2
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80071e0:	4618      	mov	r0, r3
 80071e2:	f019 fdf0 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80071e6:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80071ea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80071ee:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 80071f2:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 80071f6:	ca06      	ldmia	r2, {r1, r2}
 80071f8:	f005 faa8 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80071fc:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8007200:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8007444 <_ZN3jlb5GraphC1Ev+0x205c>
 8007204:	2200      	movs	r2, #0
 8007206:	214e      	movs	r1, #78	; 0x4e
 8007208:	4620      	mov	r0, r4
 800720a:	f7fe f89c 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800720e:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8007212:	4618      	mov	r0, r3
 8007214:	f005 fa08 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007218:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800721c:	4618      	mov	r0, r3
 800721e:	f019 fdd4 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8007222:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007226:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800722a:	214d      	movs	r1, #77	; 0x4d
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	f001 fb0e 	bl	800884e <_ZN3jlb5GraphixEc>
 8007232:	4604      	mov	r4, r0
 8007234:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007238:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800723c:	4a83      	ldr	r2, [pc, #524]	; (800744c <_ZN3jlb5GraphC1Ev+0x2064>)
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	4611      	mov	r1, r2
 8007242:	8019      	strh	r1, [r3, #0]
 8007244:	3302      	adds	r3, #2
 8007246:	0c12      	lsrs	r2, r2, #16
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800724e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8007252:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800725c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8007260:	2203      	movs	r2, #3
 8007262:	605a      	str	r2, [r3, #4]
 8007264:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8007268:	4618      	mov	r0, r3
 800726a:	f019 fdac 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800726e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8007272:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007276:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 800727a:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 800727e:	ca06      	ldmia	r2, {r1, r2}
 8007280:	f005 fa64 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007284:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8007288:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8007450 <_ZN3jlb5GraphC1Ev+0x2068>
 800728c:	2202      	movs	r2, #2
 800728e:	2148      	movs	r1, #72	; 0x48
 8007290:	4620      	mov	r0, r4
 8007292:	f7fe f858 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007296:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 800729a:	4618      	mov	r0, r3
 800729c:	f005 f9c4 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80072a0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80072a4:	4618      	mov	r0, r3
 80072a6:	f019 fd90 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 80072aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80072b2:	214d      	movs	r1, #77	; 0x4d
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	f001 faca 	bl	800884e <_ZN3jlb5GraphixEc>
 80072ba:	4604      	mov	r4, r0
 80072bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072c0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80072c4:	4a61      	ldr	r2, [pc, #388]	; (800744c <_ZN3jlb5GraphC1Ev+0x2064>)
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	4611      	mov	r1, r2
 80072ca:	8019      	strh	r1, [r3, #0]
 80072cc:	3302      	adds	r3, #2
 80072ce:	0c12      	lsrs	r2, r2, #16
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072d6:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80072da:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072e4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80072e8:	2203      	movs	r2, #3
 80072ea:	605a      	str	r2, [r3, #4]
 80072ec:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80072f0:	4618      	mov	r0, r3
 80072f2:	f019 fd68 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80072f6:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80072fa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80072fe:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 8007302:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 8007306:	ca06      	ldmia	r2, {r1, r2}
 8007308:	f005 fa20 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800730c:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8007310:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8007444 <_ZN3jlb5GraphC1Ev+0x205c>
 8007314:	2201      	movs	r2, #1
 8007316:	214b      	movs	r1, #75	; 0x4b
 8007318:	4620      	mov	r0, r4
 800731a:	f7fe f814 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800731e:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8007322:	4618      	mov	r0, r3
 8007324:	f005 f980 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007328:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 800732c:	4618      	mov	r0, r3
 800732e:	f019 fd4c 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8007332:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007336:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800733a:	214d      	movs	r1, #77	; 0x4d
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f001 fa86 	bl	800884e <_ZN3jlb5GraphixEc>
 8007342:	4604      	mov	r4, r0
 8007344:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007348:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800734c:	4a41      	ldr	r2, [pc, #260]	; (8007454 <_ZN3jlb5GraphC1Ev+0x206c>)
 800734e:	8812      	ldrh	r2, [r2, #0]
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007356:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800735a:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007364:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8007368:	2202      	movs	r2, #2
 800736a:	605a      	str	r2, [r3, #4]
 800736c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8007370:	4618      	mov	r0, r3
 8007372:	f019 fd28 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007376:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800737a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800737e:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8007382:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8007386:	ca06      	ldmia	r2, {r1, r2}
 8007388:	f005 f9e0 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800738c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8007390:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007444 <_ZN3jlb5GraphC1Ev+0x205c>
 8007394:	2200      	movs	r2, #0
 8007396:	2152      	movs	r1, #82	; 0x52
 8007398:	4620      	mov	r0, r4
 800739a:	f7fd ffd4 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800739e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 80073a2:	4618      	mov	r0, r3
 80073a4:	f005 f940 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80073a8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80073ac:	4618      	mov	r0, r3
 80073ae:	f019 fd0c 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 80073b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80073ba:	214d      	movs	r1, #77	; 0x4d
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	f001 fa46 	bl	800884e <_ZN3jlb5GraphixEc>
 80073c2:	4604      	mov	r4, r0
 80073c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073c8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80073cc:	4a21      	ldr	r2, [pc, #132]	; (8007454 <_ZN3jlb5GraphC1Ev+0x206c>)
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073d6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80073da:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073e4:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80073e8:	2202      	movs	r2, #2
 80073ea:	605a      	str	r2, [r3, #4]
 80073ec:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80073f0:	4618      	mov	r0, r3
 80073f2:	f019 fce8 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80073f6:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80073fa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80073fe:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8007402:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 8007406:	ca06      	ldmia	r2, {r1, r2}
 8007408:	f005 f9a0 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800740c:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8007410:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007458 <_ZN3jlb5GraphC1Ev+0x2070>
 8007414:	2202      	movs	r2, #2
 8007416:	2151      	movs	r1, #81	; 0x51
 8007418:	4620      	mov	r0, r4
 800741a:	f7fd ff94 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800741e:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8007422:	4618      	mov	r0, r3
 8007424:	f005 f900 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007428:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800742c:	4618      	mov	r0, r3
 800742e:	f019 fccc 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8007432:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007436:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800743a:	214d      	movs	r1, #77	; 0x4d
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	e00d      	b.n	800745c <_ZN3jlb5GraphC1Ev+0x2074>
 8007440:	08025798 	.word	0x08025798
 8007444:	3f71463a 	.word	0x3f71463a
 8007448:	08025794 	.word	0x08025794
 800744c:	0802579c 	.word	0x0802579c
 8007450:	3f99999a 	.word	0x3f99999a
 8007454:	080257a0 	.word	0x080257a0
 8007458:	3f19999a 	.word	0x3f19999a
 800745c:	f001 f9f7 	bl	800884e <_ZN3jlb5GraphixEc>
 8007460:	4604      	mov	r4, r0
 8007462:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007466:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800746a:	4ae5      	ldr	r2, [pc, #916]	; (8007800 <_ZN3jlb5GraphC1Ev+0x2418>)
 800746c:	8812      	ldrh	r2, [r2, #0]
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007474:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007478:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007482:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007486:	2202      	movs	r2, #2
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800748e:	4618      	mov	r0, r3
 8007490:	f019 fc99 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007494:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8007498:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800749c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 80074a0:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 80074a4:	ca06      	ldmia	r2, {r1, r2}
 80074a6:	f005 f951 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80074aa:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80074ae:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8007804 <_ZN3jlb5GraphC1Ev+0x241c>
 80074b2:	2201      	movs	r2, #1
 80074b4:	2150      	movs	r1, #80	; 0x50
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7fd ff45 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80074bc:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80074c0:	4618      	mov	r0, r3
 80074c2:	f005 f8b1 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80074c6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80074ca:	4618      	mov	r0, r3
 80074cc:	f019 fc7d 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 80074d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074d4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80074d8:	214e      	movs	r1, #78	; 0x4e
 80074da:	6818      	ldr	r0, [r3, #0]
 80074dc:	f001 f9b7 	bl	800884e <_ZN3jlb5GraphixEc>
 80074e0:	4604      	mov	r4, r0
 80074e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074e6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80074ea:	4ac7      	ldr	r2, [pc, #796]	; (8007808 <_ZN3jlb5GraphC1Ev+0x2420>)
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	4611      	mov	r1, r2
 80074f0:	8019      	strh	r1, [r3, #0]
 80074f2:	3302      	adds	r3, #2
 80074f4:	0c12      	lsrs	r2, r2, #16
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074fc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8007500:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800750a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800750e:	2203      	movs	r2, #3
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8007516:	4618      	mov	r0, r3
 8007518:	f019 fc55 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800751c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8007520:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007524:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8007528:	f607 0014 	addw	r0, r7, #2068	; 0x814
 800752c:	ca06      	ldmia	r2, {r1, r2}
 800752e:	f005 f90d 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007532:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8007536:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8007804 <_ZN3jlb5GraphC1Ev+0x241c>
 800753a:	2200      	movs	r2, #0
 800753c:	214b      	movs	r1, #75	; 0x4b
 800753e:	4620      	mov	r0, r4
 8007540:	f7fd ff01 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007544:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8007548:	4618      	mov	r0, r3
 800754a:	f005 f86d 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800754e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8007552:	4618      	mov	r0, r3
 8007554:	f019 fc39 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8007558:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800755c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007560:	214e      	movs	r1, #78	; 0x4e
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	f001 f973 	bl	800884e <_ZN3jlb5GraphixEc>
 8007568:	4604      	mov	r4, r0
 800756a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800756e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8007572:	4aa5      	ldr	r2, [pc, #660]	; (8007808 <_ZN3jlb5GraphC1Ev+0x2420>)
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	4611      	mov	r1, r2
 8007578:	8019      	strh	r1, [r3, #0]
 800757a:	3302      	adds	r3, #2
 800757c:	0c12      	lsrs	r2, r2, #16
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007584:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8007588:	f607 0244 	addw	r2, r7, #2116	; 0x844
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007592:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8007596:	2203      	movs	r2, #3
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 800759e:	4618      	mov	r0, r3
 80075a0:	f019 fc11 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80075a4:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80075a8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80075ac:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 80075b0:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 80075b4:	ca06      	ldmia	r2, {r1, r2}
 80075b6:	f005 f8c9 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80075ba:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80075be:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800780c <_ZN3jlb5GraphC1Ev+0x2424>
 80075c2:	2202      	movs	r2, #2
 80075c4:	2149      	movs	r1, #73	; 0x49
 80075c6:	4620      	mov	r0, r4
 80075c8:	f7fd febd 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80075cc:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80075d0:	4618      	mov	r0, r3
 80075d2:	f005 f829 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80075d6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80075da:	4618      	mov	r0, r3
 80075dc:	f019 fbf5 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 80075e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075e4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80075e8:	214e      	movs	r1, #78	; 0x4e
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	f001 f92f 	bl	800884e <_ZN3jlb5GraphixEc>
 80075f0:	4604      	mov	r4, r0
 80075f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075f6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80075fa:	4a83      	ldr	r2, [pc, #524]	; (8007808 <_ZN3jlb5GraphC1Ev+0x2420>)
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	4611      	mov	r1, r2
 8007600:	8019      	strh	r1, [r3, #0]
 8007602:	3302      	adds	r3, #2
 8007604:	0c12      	lsrs	r2, r2, #16
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800760c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007610:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800761a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800761e:	2203      	movs	r2, #3
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007626:	4618      	mov	r0, r3
 8007628:	f019 fbcd 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800762c:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007630:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007634:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8007638:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 800763c:	ca06      	ldmia	r2, {r1, r2}
 800763e:	f005 f885 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007642:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8007646:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8007804 <_ZN3jlb5GraphC1Ev+0x241c>
 800764a:	2201      	movs	r2, #1
 800764c:	214c      	movs	r1, #76	; 0x4c
 800764e:	4620      	mov	r0, r4
 8007650:	f7fd fe79 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007654:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8007658:	4618      	mov	r0, r3
 800765a:	f004 ffe5 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800765e:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007662:	4618      	mov	r0, r3
 8007664:	f019 fbb1 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8007668:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800766c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007670:	214e      	movs	r1, #78	; 0x4e
 8007672:	6818      	ldr	r0, [r3, #0]
 8007674:	f001 f8eb 	bl	800884e <_ZN3jlb5GraphixEc>
 8007678:	4604      	mov	r4, r0
 800767a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800767e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8007682:	4a63      	ldr	r2, [pc, #396]	; (8007810 <_ZN3jlb5GraphC1Ev+0x2428>)
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	4611      	mov	r1, r2
 8007688:	8019      	strh	r1, [r3, #0]
 800768a:	3302      	adds	r3, #2
 800768c:	0c12      	lsrs	r2, r2, #16
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007694:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8007698:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076a2:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80076a6:	2203      	movs	r2, #3
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80076ae:	4618      	mov	r0, r3
 80076b0:	f019 fb89 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80076b4:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80076b8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80076bc:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 80076c0:	f607 0068 	addw	r0, r7, #2152	; 0x868
 80076c4:	ca06      	ldmia	r2, {r1, r2}
 80076c6:	f005 f841 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80076ca:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80076ce:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8007804 <_ZN3jlb5GraphC1Ev+0x241c>
 80076d2:	2200      	movs	r2, #0
 80076d4:	2154      	movs	r1, #84	; 0x54
 80076d6:	4620      	mov	r0, r4
 80076d8:	f7fd fe35 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80076dc:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80076e0:	4618      	mov	r0, r3
 80076e2:	f004 ffa1 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80076e6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80076ea:	4618      	mov	r0, r3
 80076ec:	f019 fb6d 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 80076f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076f4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80076f8:	214e      	movs	r1, #78	; 0x4e
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	f001 f8a7 	bl	800884e <_ZN3jlb5GraphixEc>
 8007700:	4604      	mov	r4, r0
 8007702:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007706:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800770a:	4a41      	ldr	r2, [pc, #260]	; (8007810 <_ZN3jlb5GraphC1Ev+0x2428>)
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	4611      	mov	r1, r2
 8007710:	8019      	strh	r1, [r3, #0]
 8007712:	3302      	adds	r3, #2
 8007714:	0c12      	lsrs	r2, r2, #16
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800771c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8007720:	f607 0298 	addw	r2, r7, #2200	; 0x898
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800772a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800772e:	2203      	movs	r2, #3
 8007730:	605a      	str	r2, [r3, #4]
 8007732:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007736:	4618      	mov	r0, r3
 8007738:	f019 fb45 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800773c:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007740:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007744:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8007748:	f607 0084 	addw	r0, r7, #2180	; 0x884
 800774c:	ca06      	ldmia	r2, {r1, r2}
 800774e:	f004 fffd 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007752:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8007756:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8007814 <_ZN3jlb5GraphC1Ev+0x242c>
 800775a:	2202      	movs	r2, #2
 800775c:	2153      	movs	r1, #83	; 0x53
 800775e:	4620      	mov	r0, r4
 8007760:	f7fd fdf1 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007764:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8007768:	4618      	mov	r0, r3
 800776a:	f004 ff5d 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800776e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007772:	4618      	mov	r0, r3
 8007774:	f019 fb29 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8007778:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800777c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007780:	214e      	movs	r1, #78	; 0x4e
 8007782:	6818      	ldr	r0, [r3, #0]
 8007784:	f001 f863 	bl	800884e <_ZN3jlb5GraphixEc>
 8007788:	4604      	mov	r4, r0
 800778a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800778e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8007792:	4a1f      	ldr	r2, [pc, #124]	; (8007810 <_ZN3jlb5GraphC1Ev+0x2428>)
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	4611      	mov	r1, r2
 8007798:	8019      	strh	r1, [r3, #0]
 800779a:	3302      	adds	r3, #2
 800779c:	0c12      	lsrs	r2, r2, #16
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077a4:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80077a8:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077b2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80077b6:	2203      	movs	r2, #3
 80077b8:	605a      	str	r2, [r3, #4]
 80077ba:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80077be:	4618      	mov	r0, r3
 80077c0:	f019 fb01 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80077c4:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80077c8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80077cc:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 80077d0:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 80077d4:	ca06      	ldmia	r2, {r1, r2}
 80077d6:	f004 ffb9 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80077da:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80077de:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8007804 <_ZN3jlb5GraphC1Ev+0x241c>
 80077e2:	2201      	movs	r2, #1
 80077e4:	2152      	movs	r1, #82	; 0x52
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7fd fdad 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80077ec:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f004 ff19 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80077f6:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80077fa:	4618      	mov	r0, r3
 80077fc:	e00c      	b.n	8007818 <_ZN3jlb5GraphC1Ev+0x2430>
 80077fe:	bf00      	nop
 8007800:	080257a0 	.word	0x080257a0
 8007804:	3f71463a 	.word	0x3f71463a
 8007808:	080257a4 	.word	0x080257a4
 800780c:	3f99999a 	.word	0x3f99999a
 8007810:	080257a8 	.word	0x080257a8
 8007814:	3f19999a 	.word	0x3f19999a
 8007818:	f019 fad7 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 800781c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007820:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007824:	214f      	movs	r1, #79	; 0x4f
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	f001 f811 	bl	800884e <_ZN3jlb5GraphixEc>
 800782c:	4604      	mov	r4, r0
 800782e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007832:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8007836:	4aeb      	ldr	r2, [pc, #940]	; (8007be4 <_ZN3jlb5GraphC1Ev+0x27fc>)
 8007838:	6812      	ldr	r2, [r2, #0]
 800783a:	4611      	mov	r1, r2
 800783c:	8019      	strh	r1, [r3, #0]
 800783e:	3302      	adds	r3, #2
 8007840:	0c12      	lsrs	r2, r2, #16
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007848:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800784c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007856:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800785a:	2203      	movs	r2, #3
 800785c:	605a      	str	r2, [r3, #4]
 800785e:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007862:	4618      	mov	r0, r3
 8007864:	f019 faaf 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007868:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800786c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007870:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007874:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8007878:	ca06      	ldmia	r2, {r1, r2}
 800787a:	f004 ff67 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800787e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007882:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8007bf4 <_ZN3jlb5GraphC1Ev+0x280c>
 8007886:	2200      	movs	r2, #0
 8007888:	214c      	movs	r1, #76	; 0x4c
 800788a:	4620      	mov	r0, r4
 800788c:	f7fd fd5b 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007890:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007894:	4618      	mov	r0, r3
 8007896:	f004 fec7 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800789a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800789e:	4618      	mov	r0, r3
 80078a0:	f019 fa93 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 80078a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078a8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80078ac:	214f      	movs	r1, #79	; 0x4f
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	f000 ffcd 	bl	800884e <_ZN3jlb5GraphixEc>
 80078b4:	4604      	mov	r4, r0
 80078b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078ba:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80078be:	224c      	movs	r2, #76	; 0x4c
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078c6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80078ca:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078d4:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80078d8:	2201      	movs	r2, #1
 80078da:	605a      	str	r2, [r3, #4]
 80078dc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80078e0:	4618      	mov	r0, r3
 80078e2:	f019 fa70 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80078e6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80078ea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80078ee:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 80078f2:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 80078f6:	ca06      	ldmia	r2, {r1, r2}
 80078f8:	f004 ff28 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80078fc:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007900:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8007bf4 <_ZN3jlb5GraphC1Ev+0x280c>
 8007904:	2200      	movs	r2, #0
 8007906:	2155      	movs	r1, #85	; 0x55
 8007908:	4620      	mov	r0, r4
 800790a:	f7fd fd1c 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800790e:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007912:	4618      	mov	r0, r3
 8007914:	f004 fe88 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007918:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800791c:	4618      	mov	r0, r3
 800791e:	f019 fa54 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 8007922:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007926:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800792a:	214f      	movs	r1, #79	; 0x4f
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	f000 ff8e 	bl	800884e <_ZN3jlb5GraphixEc>
 8007932:	4604      	mov	r4, r0
 8007934:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007938:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800793c:	224c      	movs	r2, #76	; 0x4c
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007944:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007948:	f607 1208 	addw	r2, r7, #2312	; 0x908
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007952:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007956:	2201      	movs	r2, #1
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800795e:	4618      	mov	r0, r3
 8007960:	f019 fa31 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007964:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007968:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800796c:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8007970:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8007974:	ca06      	ldmia	r2, {r1, r2}
 8007976:	f004 fee9 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800797a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 800797e:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8007be8 <_ZN3jlb5GraphC1Ev+0x2800>
 8007982:	2202      	movs	r2, #2
 8007984:	2157      	movs	r1, #87	; 0x57
 8007986:	4620      	mov	r0, r4
 8007988:	f7fd fcdd 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800798c:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8007990:	4618      	mov	r0, r3
 8007992:	f004 fe49 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007996:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800799a:	4618      	mov	r0, r3
 800799c:	f019 fa15 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 80079a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079a4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80079a8:	214f      	movs	r1, #79	; 0x4f
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	f000 ff4f 	bl	800884e <_ZN3jlb5GraphixEc>
 80079b0:	4604      	mov	r4, r0
 80079b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079b6:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80079ba:	224c      	movs	r2, #76	; 0x4c
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079c2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80079c6:	f607 1224 	addw	r2, r7, #2340	; 0x924
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079d0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80079d4:	2201      	movs	r2, #1
 80079d6:	605a      	str	r2, [r3, #4]
 80079d8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80079dc:	4618      	mov	r0, r3
 80079de:	f019 f9f2 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80079e2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80079e6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80079ea:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 80079ee:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 80079f2:	ca06      	ldmia	r2, {r1, r2}
 80079f4:	f004 feaa 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80079f8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80079fc:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007bf4 <_ZN3jlb5GraphC1Ev+0x280c>
 8007a00:	2201      	movs	r2, #1
 8007a02:	2154      	movs	r1, #84	; 0x54
 8007a04:	4620      	mov	r0, r4
 8007a06:	f7fd fc9e 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007a0a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f004 fe0a 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007a14:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f019 f9d6 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8007a1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a22:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007a26:	2150      	movs	r1, #80	; 0x50
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	f000 ff10 	bl	800884e <_ZN3jlb5GraphixEc>
 8007a2e:	4604      	mov	r4, r0
 8007a30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a34:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007a38:	2250      	movs	r2, #80	; 0x50
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a40:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8007a44:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a4e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8007a52:	2201      	movs	r2, #1
 8007a54:	605a      	str	r2, [r3, #4]
 8007a56:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f019 f9b3 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007a60:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007a64:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007a68:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8007a6c:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8007a70:	ca06      	ldmia	r2, {r1, r2}
 8007a72:	f004 fe6b 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007a76:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007a7a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8007bf4 <_ZN3jlb5GraphC1Ev+0x280c>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	214d      	movs	r1, #77	; 0x4d
 8007a82:	4620      	mov	r0, r4
 8007a84:	f7fd fc5f 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007a88:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f004 fdcb 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007a92:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007a96:	4618      	mov	r0, r3
 8007a98:	f019 f997 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 8007a9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007aa0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007aa4:	2150      	movs	r1, #80	; 0x50
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	f000 fed1 	bl	800884e <_ZN3jlb5GraphixEc>
 8007aac:	4604      	mov	r4, r0
 8007aae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ab2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8007ab6:	2250      	movs	r2, #80	; 0x50
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007abe:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007ac2:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007acc:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	605a      	str	r2, [r3, #4]
 8007ad4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f019 f974 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007ade:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007ae2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007ae6:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8007aea:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8007aee:	ca06      	ldmia	r2, {r1, r2}
 8007af0:	f004 fe2c 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007af4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007af8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8007bf0 <_ZN3jlb5GraphC1Ev+0x2808>
 8007afc:	2202      	movs	r2, #2
 8007afe:	2151      	movs	r1, #81	; 0x51
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7fd fc20 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007b06:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f004 fd8c 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b10:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007b14:	4618      	mov	r0, r3
 8007b16:	f019 f958 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 8007b1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b1e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007b22:	2151      	movs	r1, #81	; 0x51
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f000 fe92 	bl	800884e <_ZN3jlb5GraphixEc>
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b30:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8007b34:	2252      	movs	r2, #82	; 0x52
 8007b36:	701a      	strb	r2, [r3, #0]
 8007b38:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b3c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007b40:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b4a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007b4e:	2201      	movs	r2, #1
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007b56:	4618      	mov	r0, r3
 8007b58:	f019 f935 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007b5c:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007b60:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007b64:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8007b68:	f607 1064 	addw	r0, r7, #2404	; 0x964
 8007b6c:	ca06      	ldmia	r2, {r1, r2}
 8007b6e:	f004 fded 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007b72:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007b76:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8007bf0 <_ZN3jlb5GraphC1Ev+0x2808>
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	2150      	movs	r1, #80	; 0x50
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f7fd fbe1 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007b84:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f004 fd4d 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b8e:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007b92:	4618      	mov	r0, r3
 8007b94:	f019 f919 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8007b98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b9c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ba0:	2151      	movs	r1, #81	; 0x51
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	f000 fe53 	bl	800884e <_ZN3jlb5GraphixEc>
 8007ba8:	4604      	mov	r4, r0
 8007baa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bae:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8007bb2:	4a0e      	ldr	r2, [pc, #56]	; (8007bec <_ZN3jlb5GraphC1Ev+0x2804>)
 8007bb4:	8812      	ldrh	r2, [r2, #0]
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bbc:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007bc0:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bca:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007bce:	2202      	movs	r2, #2
 8007bd0:	605a      	str	r2, [r3, #4]
 8007bd2:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f019 f8f5 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007bdc:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007be0:	e00c      	b.n	8007bfc <_ZN3jlb5GraphC1Ev+0x2814>
 8007be2:	bf00      	nop
 8007be4:	080257ac 	.word	0x080257ac
 8007be8:	3fc56fea 	.word	0x3fc56fea
 8007bec:	080257b0 	.word	0x080257b0
 8007bf0:	3f19999a 	.word	0x3f19999a
 8007bf4:	3f71463a 	.word	0x3f71463a
 8007bf8:	401c518f 	.word	0x401c518f
 8007bfc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007c00:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8007c04:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8007c08:	ca06      	ldmia	r2, {r1, r2}
 8007c0a:	f004 fd9f 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007c0e:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8007c12:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8007bf0 <_ZN3jlb5GraphC1Ev+0x2808>
 8007c16:	2202      	movs	r2, #2
 8007c18:	214d      	movs	r1, #77	; 0x4d
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7fd fb93 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007c20:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8007c24:	4618      	mov	r0, r3
 8007c26:	f004 fcff 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007c2a:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f019 f8cb 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 8007c34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c38:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c3c:	2151      	movs	r1, #81	; 0x51
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	f000 fe05 	bl	800884e <_ZN3jlb5GraphixEc>
 8007c44:	4604      	mov	r4, r0
 8007c46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c4a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8007c4e:	2250      	movs	r2, #80	; 0x50
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c56:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007c5a:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c64:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007c68:	2201      	movs	r2, #1
 8007c6a:	605a      	str	r2, [r3, #4]
 8007c6c:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007c70:	4618      	mov	r0, r3
 8007c72:	f019 f8a8 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007c76:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007c7a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007c7e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8007c82:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8007c86:	ca06      	ldmia	r2, {r1, r2}
 8007c88:	f004 fd60 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007c8c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007c90:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8007bf0 <_ZN3jlb5GraphC1Ev+0x2808>
 8007c94:	2202      	movs	r2, #2
 8007c96:	2152      	movs	r1, #82	; 0x52
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f7fd fb54 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007c9e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f004 fcc0 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007ca8:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007cac:	4618      	mov	r0, r3
 8007cae:	f019 f88c 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8007cb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cb6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007cba:	2151      	movs	r1, #81	; 0x51
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f000 fdc6 	bl	800884e <_ZN3jlb5GraphixEc>
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cc8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8007ccc:	224d      	movs	r2, #77	; 0x4d
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cd4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007cd8:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ce2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	605a      	str	r2, [r3, #4]
 8007cea:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f019 f869 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007cf4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007cf8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007cfc:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8007d00:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 8007d04:	ca06      	ldmia	r2, {r1, r2}
 8007d06:	f004 fd21 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007d0a:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007d0e:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 8007bf4 <_ZN3jlb5GraphC1Ev+0x280c>
 8007d12:	2200      	movs	r2, #0
 8007d14:	2156      	movs	r1, #86	; 0x56
 8007d16:	4620      	mov	r0, r4
 8007d18:	f7fd fb15 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007d1c:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007d20:	4618      	mov	r0, r3
 8007d22:	f004 fc81 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007d26:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f019 f84d 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8007d30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d34:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007d38:	2151      	movs	r1, #81	; 0x51
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	f000 fd87 	bl	800884e <_ZN3jlb5GraphixEc>
 8007d40:	4604      	mov	r4, r0
 8007d42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d46:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8007d4a:	224d      	movs	r2, #77	; 0x4d
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d52:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007d56:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d60:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007d64:	2201      	movs	r2, #1
 8007d66:	605a      	str	r2, [r3, #4]
 8007d68:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f019 f82a 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007d72:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007d76:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007d7a:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8007d7e:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 8007d82:	ca06      	ldmia	r2, {r1, r2}
 8007d84:	f004 fce2 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007d88:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8007d8c:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8007bf8 <_ZN3jlb5GraphC1Ev+0x2810>
 8007d90:	2202      	movs	r2, #2
 8007d92:	2158      	movs	r1, #88	; 0x58
 8007d94:	4620      	mov	r0, r4
 8007d96:	f7fd fad6 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007d9a:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f004 fc42 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007da4:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007da8:	4618      	mov	r0, r3
 8007daa:	f019 f80e 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8007dae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007db2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007db6:	2152      	movs	r1, #82	; 0x52
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	f000 fd48 	bl	800884e <_ZN3jlb5GraphixEc>
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dc4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007dc8:	4ae6      	ldr	r2, [pc, #920]	; (8008164 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8007dca:	8812      	ldrh	r2, [r2, #0]
 8007dcc:	801a      	strh	r2, [r3, #0]
 8007dce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dd2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007dd6:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007de0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007de4:	2202      	movs	r2, #2
 8007de6:	605a      	str	r2, [r3, #4]
 8007de8:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8007dec:	4618      	mov	r0, r3
 8007dee:	f018 ffea 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007df2:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8007df6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007dfa:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8007dfe:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 8007e02:	ca06      	ldmia	r2, {r1, r2}
 8007e04:	f004 fca2 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e08:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8007e0c:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8008168 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007e10:	2202      	movs	r2, #2
 8007e12:	2151      	movs	r1, #81	; 0x51
 8007e14:	4620      	mov	r0, r4
 8007e16:	f7fd fa96 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e1a:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f004 fc02 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007e24:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f018 ffce 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 8007e2e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e32:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007e36:	2152      	movs	r1, #82	; 0x52
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	f000 fd08 	bl	800884e <_ZN3jlb5GraphixEc>
 8007e3e:	4604      	mov	r4, r0
 8007e40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e44:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8007e48:	4ac6      	ldr	r2, [pc, #792]	; (8008164 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8007e4a:	8812      	ldrh	r2, [r2, #0]
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e52:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8007e56:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e60:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8007e64:	2202      	movs	r2, #2
 8007e66:	605a      	str	r2, [r3, #4]
 8007e68:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f018 ffaa 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007e72:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007e76:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007e7a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8007e7e:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 8007e82:	ca06      	ldmia	r2, {r1, r2}
 8007e84:	f004 fc62 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e88:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8007e8c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8008174 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007e90:	2201      	movs	r2, #1
 8007e92:	214d      	movs	r1, #77	; 0x4d
 8007e94:	4620      	mov	r0, r4
 8007e96:	f7fd fa56 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e9a:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f004 fbc2 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007ea4:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f018 ff8e 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 8007eae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007eb2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007eb6:	2152      	movs	r1, #82	; 0x52
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f000 fcc8 	bl	800884e <_ZN3jlb5GraphixEc>
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ec4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007ec8:	4aa8      	ldr	r2, [pc, #672]	; (800816c <_ZN3jlb5GraphC1Ev+0x2d84>)
 8007eca:	8812      	ldrh	r2, [r2, #0]
 8007ecc:	801a      	strh	r2, [r3, #0]
 8007ece:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ed2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8007ed6:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ee0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	605a      	str	r2, [r3, #4]
 8007ee8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8007eec:	4618      	mov	r0, r3
 8007eee:	f018 ff6a 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007ef2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8007ef6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007efa:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8007efe:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 8007f02:	ca06      	ldmia	r2, {r1, r2}
 8007f04:	f004 fc22 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007f08:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8007f0c:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8008174 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007f10:	2200      	movs	r2, #0
 8007f12:	214e      	movs	r1, #78	; 0x4e
 8007f14:	4620      	mov	r0, r4
 8007f16:	f7fd fa16 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f1a:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f004 fb82 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007f24:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f018 ff4e 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 8007f2e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f32:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007f36:	2152      	movs	r1, #82	; 0x52
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	f000 fc88 	bl	800884e <_ZN3jlb5GraphixEc>
 8007f3e:	4604      	mov	r4, r0
 8007f40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f44:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8007f48:	4a88      	ldr	r2, [pc, #544]	; (800816c <_ZN3jlb5GraphC1Ev+0x2d84>)
 8007f4a:	8812      	ldrh	r2, [r2, #0]
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f52:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8007f56:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f60:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8007f64:	2202      	movs	r2, #2
 8007f66:	605a      	str	r2, [r3, #4]
 8007f68:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f018 ff2a 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007f72:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007f76:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007f7a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8007f7e:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 8007f82:	ca06      	ldmia	r2, {r1, r2}
 8007f84:	f004 fbe2 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007f88:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8007f8c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8008168 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007f90:	2202      	movs	r2, #2
 8007f92:	2153      	movs	r1, #83	; 0x53
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7fd f9d6 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f9a:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f004 fb42 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8007fa4:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f018 ff0e 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 8007fae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fb2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007fb6:	2153      	movs	r1, #83	; 0x53
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f000 fc48 	bl	800884e <_ZN3jlb5GraphixEc>
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fc4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8007fc8:	2254      	movs	r2, #84	; 0x54
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fd4:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	605a      	str	r2, [r3, #4]
 8007fe6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8007fea:	4618      	mov	r0, r3
 8007fec:	f018 feeb 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8007ff0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8007ff4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007ff8:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8007ffc:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 8008000:	ca06      	ldmia	r2, {r1, r2}
 8008002:	f004 fba3 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008006:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800800a:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8008168 <_ZN3jlb5GraphC1Ev+0x2d80>
 800800e:	2202      	movs	r2, #2
 8008010:	2152      	movs	r1, #82	; 0x52
 8008012:	4620      	mov	r0, r4
 8008014:	f7fd f997 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008018:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800801c:	4618      	mov	r0, r3
 800801e:	f004 fb03 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008022:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8008026:	4618      	mov	r0, r3
 8008028:	f018 fecf 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 800802c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008030:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008034:	2153      	movs	r1, #83	; 0x53
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	f000 fc09 	bl	800884e <_ZN3jlb5GraphixEc>
 800803c:	4604      	mov	r4, r0
 800803e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008042:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008046:	4a4a      	ldr	r2, [pc, #296]	; (8008170 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8008048:	8812      	ldrh	r2, [r2, #0]
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008050:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008054:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800805e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008062:	2202      	movs	r2, #2
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 800806a:	4618      	mov	r0, r3
 800806c:	f018 feab 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008070:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8008074:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008078:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800807c:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8008080:	ca06      	ldmia	r2, {r1, r2}
 8008082:	f004 fb63 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008086:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800808a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8008168 <_ZN3jlb5GraphC1Ev+0x2d80>
 800808e:	2202      	movs	r2, #2
 8008090:	214e      	movs	r1, #78	; 0x4e
 8008092:	4620      	mov	r0, r4
 8008094:	f7fd f957 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008098:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800809c:	4618      	mov	r0, r3
 800809e:	f004 fac3 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80080a2:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80080a6:	4618      	mov	r0, r3
 80080a8:	f018 fe8f 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 80080ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80080b4:	2153      	movs	r1, #83	; 0x53
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	f000 fbc9 	bl	800884e <_ZN3jlb5GraphixEc>
 80080bc:	4604      	mov	r4, r0
 80080be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080c2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80080c6:	2252      	movs	r2, #82	; 0x52
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080ce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80080d2:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080dc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80080e0:	2201      	movs	r2, #1
 80080e2:	605a      	str	r2, [r3, #4]
 80080e4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f018 fe6c 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80080ee:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80080f2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80080f6:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80080fa:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 80080fe:	ca06      	ldmia	r2, {r1, r2}
 8008100:	f004 fb24 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008104:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8008108:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8008168 <_ZN3jlb5GraphC1Ev+0x2d80>
 800810c:	2202      	movs	r2, #2
 800810e:	2154      	movs	r1, #84	; 0x54
 8008110:	4620      	mov	r0, r4
 8008112:	f7fd f918 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008116:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800811a:	4618      	mov	r0, r3
 800811c:	f004 fa84 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008120:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8008124:	4618      	mov	r0, r3
 8008126:	f018 fe50 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 800812a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800812e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008132:	2153      	movs	r1, #83	; 0x53
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	f000 fb8a 	bl	800884e <_ZN3jlb5GraphixEc>
 800813a:	4604      	mov	r4, r0
 800813c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008140:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8008144:	224e      	movs	r2, #78	; 0x4e
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800814c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008150:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800815a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800815e:	2201      	movs	r2, #1
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	e009      	b.n	8008178 <_ZN3jlb5GraphC1Ev+0x2d90>
 8008164:	080257b4 	.word	0x080257b4
 8008168:	3f19999a 	.word	0x3f19999a
 800816c:	080257b8 	.word	0x080257b8
 8008170:	080257bc 	.word	0x080257bc
 8008174:	3f71463a 	.word	0x3f71463a
 8008178:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 800817c:	4618      	mov	r0, r3
 800817e:	f018 fe22 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008182:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8008186:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800818a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800818e:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8008192:	ca06      	ldmia	r2, {r1, r2}
 8008194:	f004 fada 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008198:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800819c:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8008174 <_ZN3jlb5GraphC1Ev+0x2d8c>
 80081a0:	2200      	movs	r2, #0
 80081a2:	2157      	movs	r1, #87	; 0x57
 80081a4:	4620      	mov	r0, r4
 80081a6:	f7fd f8ce 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80081aa:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f004 fa3a 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80081b4:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80081b8:	4618      	mov	r0, r3
 80081ba:	f018 fe06 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 80081be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081c2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80081c6:	2153      	movs	r1, #83	; 0x53
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f000 fb40 	bl	800884e <_ZN3jlb5GraphixEc>
 80081ce:	4604      	mov	r4, r0
 80081d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80081d8:	224e      	movs	r2, #78	; 0x4e
 80081da:	701a      	strb	r2, [r3, #0]
 80081dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80081e4:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80081f2:	2201      	movs	r2, #1
 80081f4:	605a      	str	r2, [r3, #4]
 80081f6:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80081fa:	4618      	mov	r0, r3
 80081fc:	f018 fde3 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008200:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8008204:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008208:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 800820c:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8008210:	ca06      	ldmia	r2, {r1, r2}
 8008212:	f004 fa9b 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008216:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800821a:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8008174 <_ZN3jlb5GraphC1Ev+0x2d8c>
 800821e:	2201      	movs	r2, #1
 8008220:	2156      	movs	r1, #86	; 0x56
 8008222:	4620      	mov	r0, r4
 8008224:	f7fd f88f 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008228:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800822c:	4618      	mov	r0, r3
 800822e:	f004 f9fb 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008232:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8008236:	4618      	mov	r0, r3
 8008238:	f018 fdc7 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 800823c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008240:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008244:	2154      	movs	r1, #84	; 0x54
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	f000 fb01 	bl	800884e <_ZN3jlb5GraphixEc>
 800824c:	4604      	mov	r4, r0
 800824e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008252:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008256:	4ae9      	ldr	r2, [pc, #932]	; (80085fc <_ZN3jlb5GraphC1Ev+0x3214>)
 8008258:	8812      	ldrh	r2, [r2, #0]
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008260:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008264:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800826e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008272:	2202      	movs	r2, #2
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 800827a:	4618      	mov	r0, r3
 800827c:	f018 fda3 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008280:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8008284:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008288:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 800828c:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8008290:	ca06      	ldmia	r2, {r1, r2}
 8008292:	f004 fa5b 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008296:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800829a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8008600 <_ZN3jlb5GraphC1Ev+0x3218>
 800829e:	2202      	movs	r2, #2
 80082a0:	2153      	movs	r1, #83	; 0x53
 80082a2:	4620      	mov	r0, r4
 80082a4:	f7fd f84f 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80082a8:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 80082ac:	4618      	mov	r0, r3
 80082ae:	f004 f9bb 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80082b2:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80082b6:	4618      	mov	r0, r3
 80082b8:	f018 fd87 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 80082bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082c0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80082c4:	2154      	movs	r1, #84	; 0x54
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	f000 fac1 	bl	800884e <_ZN3jlb5GraphixEc>
 80082cc:	4604      	mov	r4, r0
 80082ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80082d6:	4ac9      	ldr	r2, [pc, #804]	; (80085fc <_ZN3jlb5GraphC1Ev+0x3214>)
 80082d8:	8812      	ldrh	r2, [r2, #0]
 80082da:	801a      	strh	r2, [r3, #0]
 80082dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082e0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80082e4:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80082f2:	2202      	movs	r2, #2
 80082f4:	605a      	str	r2, [r3, #4]
 80082f6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80082fa:	4618      	mov	r0, r3
 80082fc:	f018 fd63 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008300:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8008304:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008308:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800830c:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8008310:	ca06      	ldmia	r2, {r1, r2}
 8008312:	f004 fa1b 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008316:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800831a:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8008610 <_ZN3jlb5GraphC1Ev+0x3228>
 800831e:	2201      	movs	r2, #1
 8008320:	214e      	movs	r1, #78	; 0x4e
 8008322:	4620      	mov	r0, r4
 8008324:	f7fd f80f 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008328:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800832c:	4618      	mov	r0, r3
 800832e:	f004 f97b 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008332:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8008336:	4618      	mov	r0, r3
 8008338:	f018 fd47 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 800833c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008340:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008344:	2154      	movs	r1, #84	; 0x54
 8008346:	6818      	ldr	r0, [r3, #0]
 8008348:	f000 fa81 	bl	800884e <_ZN3jlb5GraphixEc>
 800834c:	4604      	mov	r4, r0
 800834e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008356:	4aab      	ldr	r2, [pc, #684]	; (8008604 <_ZN3jlb5GraphC1Ev+0x321c>)
 8008358:	8812      	ldrh	r2, [r2, #0]
 800835a:	801a      	strh	r2, [r3, #0]
 800835c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008360:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008364:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800836e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008372:	2202      	movs	r2, #2
 8008374:	605a      	str	r2, [r3, #4]
 8008376:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800837a:	4618      	mov	r0, r3
 800837c:	f018 fd23 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008380:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8008384:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008388:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800838c:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8008390:	ca06      	ldmia	r2, {r1, r2}
 8008392:	f004 f9db 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008396:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800839a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8008610 <_ZN3jlb5GraphC1Ev+0x3228>
 800839e:	2200      	movs	r2, #0
 80083a0:	214f      	movs	r1, #79	; 0x4f
 80083a2:	4620      	mov	r0, r4
 80083a4:	f7fc ffcf 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80083a8:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 80083ac:	4618      	mov	r0, r3
 80083ae:	f004 f93b 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80083b2:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 80083b6:	4618      	mov	r0, r3
 80083b8:	f018 fd07 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 80083bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083c0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80083c4:	2154      	movs	r1, #84	; 0x54
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	f000 fa41 	bl	800884e <_ZN3jlb5GraphixEc>
 80083cc:	4604      	mov	r4, r0
 80083ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80083d6:	4a8b      	ldr	r2, [pc, #556]	; (8008604 <_ZN3jlb5GraphC1Ev+0x321c>)
 80083d8:	8812      	ldrh	r2, [r2, #0]
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80083e4:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80083f2:	2202      	movs	r2, #2
 80083f4:	605a      	str	r2, [r3, #4]
 80083f6:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80083fa:	4618      	mov	r0, r3
 80083fc:	f018 fce3 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008400:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8008404:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008408:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800840c:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 8008410:	ca06      	ldmia	r2, {r1, r2}
 8008412:	f004 f99b 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008416:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800841a:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800860c <_ZN3jlb5GraphC1Ev+0x3224>
 800841e:	2202      	movs	r2, #2
 8008420:	2155      	movs	r1, #85	; 0x55
 8008422:	4620      	mov	r0, r4
 8008424:	f7fc ff8f 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008428:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800842c:	4618      	mov	r0, r3
 800842e:	f004 f8fb 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008432:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8008436:	4618      	mov	r0, r3
 8008438:	f018 fcc7 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 800843c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008440:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008444:	2155      	movs	r1, #85	; 0x55
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	f000 fa01 	bl	800884e <_ZN3jlb5GraphixEc>
 800844c:	4604      	mov	r4, r0
 800844e:	2355      	movs	r3, #85	; 0x55
 8008450:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8008454:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008458:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800845c:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008466:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800846a:	2201      	movs	r2, #1
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8008472:	4618      	mov	r0, r3
 8008474:	f018 fca7 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008478:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800847c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008480:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008484:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8008488:	ca06      	ldmia	r2, {r1, r2}
 800848a:	f004 f95f 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800848e:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8008492:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800860c <_ZN3jlb5GraphC1Ev+0x3224>
 8008496:	2202      	movs	r2, #2
 8008498:	2154      	movs	r1, #84	; 0x54
 800849a:	4620      	mov	r0, r4
 800849c:	f7fc ff53 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80084a0:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 80084a4:	4618      	mov	r0, r3
 80084a6:	f004 f8bf 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80084aa:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 80084ae:	4618      	mov	r0, r3
 80084b0:	f018 fc8b 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 80084b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80084b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80084bc:	2155      	movs	r1, #85	; 0x55
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	f000 f9c5 	bl	800884e <_ZN3jlb5GraphixEc>
 80084c4:	4604      	mov	r4, r0
 80084c6:	2355      	movs	r3, #85	; 0x55
 80084c8:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 80084cc:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 80084d0:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80084d4:	2301      	movs	r3, #1
 80084d6:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 80084da:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80084de:	4618      	mov	r0, r3
 80084e0:	f018 fc71 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80084e4:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80084e8:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 80084ec:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 80084f0:	ca06      	ldmia	r2, {r1, r2}
 80084f2:	f004 f92b 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80084f6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80084fa:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8008610 <_ZN3jlb5GraphC1Ev+0x3228>
 80084fe:	2201      	movs	r2, #1
 8008500:	214f      	movs	r1, #79	; 0x4f
 8008502:	4620      	mov	r0, r4
 8008504:	f7fc ff1f 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008508:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800850c:	4618      	mov	r0, r3
 800850e:	f004 f88b 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008512:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008516:	4618      	mov	r0, r3
 8008518:	f018 fc57 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 800851c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008520:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008524:	2156      	movs	r1, #86	; 0x56
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	f000 f991 	bl	800884e <_ZN3jlb5GraphixEc>
 800852c:	4604      	mov	r4, r0
 800852e:	4b36      	ldr	r3, [pc, #216]	; (8008608 <_ZN3jlb5GraphC1Ev+0x3220>)
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8008536:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 800853a:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 800853e:	2302      	movs	r3, #2
 8008540:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8008544:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8008548:	4618      	mov	r0, r3
 800854a:	f018 fc3c 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800854e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8008552:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8008556:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800855a:	ca06      	ldmia	r2, {r1, r2}
 800855c:	f004 f8f6 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008560:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8008564:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008610 <_ZN3jlb5GraphC1Ev+0x3228>
 8008568:	2201      	movs	r2, #1
 800856a:	2151      	movs	r1, #81	; 0x51
 800856c:	4620      	mov	r0, r4
 800856e:	f7fc feea 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008572:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8008576:	4618      	mov	r0, r3
 8008578:	f004 f856 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800857c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8008580:	4618      	mov	r0, r3
 8008582:	f018 fc22 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 8008586:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800858a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800858e:	2156      	movs	r1, #86	; 0x56
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f000 f95c 	bl	800884e <_ZN3jlb5GraphixEc>
 8008596:	4604      	mov	r4, r0
 8008598:	2351      	movs	r3, #81	; 0x51
 800859a:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 800859e:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 80085a2:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 80085a6:	2301      	movs	r3, #1
 80085a8:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 80085ac:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80085b0:	4618      	mov	r0, r3
 80085b2:	f018 fc08 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80085b6:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80085ba:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 80085be:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 80085c2:	ca06      	ldmia	r2, {r1, r2}
 80085c4:	f004 f8c2 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80085c8:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80085cc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008610 <_ZN3jlb5GraphC1Ev+0x3228>
 80085d0:	2200      	movs	r2, #0
 80085d2:	2153      	movs	r1, #83	; 0x53
 80085d4:	4620      	mov	r0, r4
 80085d6:	f7fc feb6 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80085da:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80085de:	4618      	mov	r0, r3
 80085e0:	f004 f822 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80085e4:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80085e8:	4618      	mov	r0, r3
 80085ea:	f018 fbee 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 80085ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80085f2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80085f6:	2156      	movs	r1, #86	; 0x56
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	e00b      	b.n	8008614 <_ZN3jlb5GraphC1Ev+0x322c>
 80085fc:	080257c0 	.word	0x080257c0
 8008600:	3f19999a 	.word	0x3f19999a
 8008604:	080257b4 	.word	0x080257b4
 8008608:	080257c4 	.word	0x080257c4
 800860c:	3f99999a 	.word	0x3f99999a
 8008610:	3f71463a 	.word	0x3f71463a
 8008614:	f000 f91b 	bl	800884e <_ZN3jlb5GraphixEc>
 8008618:	4604      	mov	r4, r0
 800861a:	2351      	movs	r3, #81	; 0x51
 800861c:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 8008620:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8008624:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8008628:	2301      	movs	r3, #1
 800862a:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 800862e:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8008632:	4618      	mov	r0, r3
 8008634:	f018 fbc7 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008638:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800863c:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8008640:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8008644:	ca06      	ldmia	r2, {r1, r2}
 8008646:	f004 f881 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800864a:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 800864e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800860c <_ZN3jlb5GraphC1Ev+0x3224>
 8008652:	2202      	movs	r2, #2
 8008654:	2157      	movs	r1, #87	; 0x57
 8008656:	4620      	mov	r0, r4
 8008658:	f7fc fe75 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800865c:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8008660:	4618      	mov	r0, r3
 8008662:	f003 ffe1 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008666:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800866a:	4618      	mov	r0, r3
 800866c:	f018 fbad 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8008670:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008674:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008678:	2157      	movs	r1, #87	; 0x57
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	f000 f8e7 	bl	800884e <_ZN3jlb5GraphixEc>
 8008680:	4604      	mov	r4, r0
 8008682:	234f      	movs	r3, #79	; 0x4f
 8008684:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8008688:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 800868c:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8008690:	2301      	movs	r3, #1
 8008692:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 8008696:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800869a:	4618      	mov	r0, r3
 800869c:	f018 fb93 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80086a0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80086a4:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 80086a8:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 80086ac:	ca06      	ldmia	r2, {r1, r2}
 80086ae:	f004 f84d 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80086b2:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80086b6:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 800860c <_ZN3jlb5GraphC1Ev+0x3224>
 80086ba:	2202      	movs	r2, #2
 80086bc:	2156      	movs	r1, #86	; 0x56
 80086be:	4620      	mov	r0, r4
 80086c0:	f7fc fe41 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80086c4:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80086c8:	4618      	mov	r0, r3
 80086ca:	f003 ffad 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80086ce:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80086d2:	4618      	mov	r0, r3
 80086d4:	f018 fb79 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 80086d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80086dc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80086e0:	2157      	movs	r1, #87	; 0x57
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	f000 f8b3 	bl	800884e <_ZN3jlb5GraphixEc>
 80086e8:	4604      	mov	r4, r0
 80086ea:	234f      	movs	r3, #79	; 0x4f
 80086ec:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 80086f0:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 80086f4:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 80086f8:	2301      	movs	r3, #1
 80086fa:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80086fe:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8008702:	4618      	mov	r0, r3
 8008704:	f018 fb5f 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008708:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800870c:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 8008710:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 8008714:	ca06      	ldmia	r2, {r1, r2}
 8008716:	f004 f819 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800871a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800871e:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8008610 <_ZN3jlb5GraphC1Ev+0x3228>
 8008722:	2201      	movs	r2, #1
 8008724:	2153      	movs	r1, #83	; 0x53
 8008726:	4620      	mov	r0, r4
 8008728:	f7fc fe0d 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800872c:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8008730:	4618      	mov	r0, r3
 8008732:	f003 ff79 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008736:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800873a:	4618      	mov	r0, r3
 800873c:	f018 fb45 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8008740:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008744:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008748:	2157      	movs	r1, #87	; 0x57
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	f000 f87f 	bl	800884e <_ZN3jlb5GraphixEc>
 8008750:	4604      	mov	r4, r0
 8008752:	4b35      	ldr	r3, [pc, #212]	; (8008828 <_ZN3jlb5GraphC1Ev+0x3440>)
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 800875a:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 800875e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8008762:	2302      	movs	r3, #2
 8008764:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8008768:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800876c:	4618      	mov	r0, r3
 800876e:	f018 fb2a 	bl	8020dc6 <_ZNSaIcEC1Ev>
 8008772:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8008776:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 800877a:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 800877e:	ca06      	ldmia	r2, {r1, r2}
 8008780:	f003 ffe4 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008784:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008788:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800882c <_ZN3jlb5GraphC1Ev+0x3444>
 800878c:	2202      	movs	r2, #2
 800878e:	214f      	movs	r1, #79	; 0x4f
 8008790:	4620      	mov	r0, r4
 8008792:	f7fc fdd8 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008796:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 800879a:	4618      	mov	r0, r3
 800879c:	f003 ff44 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 80087a0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80087a4:	4618      	mov	r0, r3
 80087a6:	f018 fb10 	bl	8020dca <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 80087aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80087ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80087b2:	2158      	movs	r1, #88	; 0x58
 80087b4:	6818      	ldr	r0, [r3, #0]
 80087b6:	f000 f84a 	bl	800884e <_ZN3jlb5GraphixEc>
 80087ba:	4604      	mov	r4, r0
 80087bc:	2358      	movs	r3, #88	; 0x58
 80087be:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 80087c2:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80087c6:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 80087ca:	2301      	movs	r3, #1
 80087cc:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 80087d0:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80087d4:	4618      	mov	r0, r3
 80087d6:	f018 faf6 	bl	8020dc6 <_ZNSaIcEC1Ev>
 80087da:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80087de:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 80087e2:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 80087e6:	ca06      	ldmia	r2, {r1, r2}
 80087e8:	f003 ffb0 	bl	800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80087ec:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 80087f0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008830 <_ZN3jlb5GraphC1Ev+0x3448>
 80087f4:	2202      	movs	r2, #2
 80087f6:	2151      	movs	r1, #81	; 0x51
 80087f8:	4620      	mov	r0, r4
 80087fa:	f7fc fda4 	bl	8005346 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80087fe:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8008802:	4618      	mov	r0, r3
 8008804:	f003 ff10 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8008808:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 800880c:	4618      	mov	r0, r3
 800880e:	f018 fadc 	bl	8020dca <_ZNSaIcED1Ev>
        }
 8008812:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008816:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 8008822:	46bd      	mov	sp, r7
 8008824:	bd90      	pop	{r4, r7, pc}
 8008826:	bf00      	nop
 8008828:	080257c8 	.word	0x080257c8
 800882c:	3fc56fea 	.word	0x3fc56fea
 8008830:	401c518f 	.word	0x401c518f

08008834 <_ZN3jlb5GraphD1Ev>:

        ~Graph() {}
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4618      	mov	r0, r3
 8008840:	f003 ff58 	bl	800c6f4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <_ZN3jlb5GraphixEc>:
        Node &operator[](char name)
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
        {
#ifdef SIMULATION
            if (nodes.empty()) throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X') throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	3b41      	subs	r3, #65	; 0x41
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f003 ff93 	bl	800c78e <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8008868:	4603      	mov	r3, r0
        }
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008880:	d205      	bcs.n	800888e <_ZSt16__deque_buf_sizej+0x1c>
 8008882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	fbb2 f3f3 	udiv	r3, r2, r3
 800888c:	e000      	b.n	8008890 <_ZSt16__deque_buf_sizej+0x1e>
 800888e:	2301      	movs	r3, #1
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f003 ff90 	bl	800c7cc <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	ed87 0a02 	vstr	s0, [r7, #8]
 80088c2:	edc7 0a01 	vstr	s1, [r7, #4]
 80088c6:	ed87 1a00 	vstr	s2, [r7]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	609a      	str	r2, [r3, #8]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	ed97 0a00 	vldr	s0, [r7]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fa5c 	bl	8008da8 <_ZN3jlb8Odometry15normalize_angleEf>
 80088f0:	eef0 7a40 	vmov.f32	s15, s0
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	edc3 7a04 	vstr	s15, [r3, #16]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	615a      	str	r2, [r3, #20]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f04f 0200 	mov.w	r2, #0
 8008908:	619a      	str	r2, [r3, #24]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	61da      	str	r2, [r3, #28]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	621a      	str	r2, [r3, #32]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	625a      	str	r2, [r3, #36]	; 0x24
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f04f 0200 	mov.w	r2, #0
 8008928:	629a      	str	r2, [r3, #40]	; 0x28
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	62da      	str	r2, [r3, #44]	; 0x2c
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	631a      	str	r2, [r3, #48]	; 0x30
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3334      	adds	r3, #52	; 0x34
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff ffac 	bl	800889c <_ZNSt5dequeIfSaIfEEC1Ev>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	335c      	adds	r3, #92	; 0x5c
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff ffa7 	bl	800889c <_ZNSt5dequeIfSaIfEEC1Ev>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <_ZN3jlb8OdometryD1Ev>:

        ~Odometry() {}
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	335c      	adds	r3, #92	; 0x5c
 800896c:	4618      	mov	r0, r3
 800896e:	f003 ff60 	bl	800c832 <_ZNSt5dequeIfSaIfEED1Ev>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3334      	adds	r3, #52	; 0x34
 8008976:	4618      	mov	r0, r3
 8008978:	f003 ff5b 	bl	800c832 <_ZNSt5dequeIfSaIfEED1Ev>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <_ZN3jlb8Odometry12rpm_callbackEf>:

        void rpm_callback(const float wheel_rpm)
 8008988:	b580      	push	{r7, lr}
 800898a:	ed2d 8b02 	vpush	{d8}
 800898e:	b08c      	sub	sp, #48	; 0x30
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_wheel_rpm = wheel_rpm;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	619a      	str	r2, [r3, #24]
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 800899e:	6838      	ldr	r0, [r7, #0]
 80089a0:	f7f7 fdc4 	bl	800052c <__aeabi_f2d>
 80089a4:	a33e      	add	r3, pc, #248	; (adr r3, 8008aa0 <_ZN3jlb8Odometry12rpm_callbackEf+0x118>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fe17 	bl	80005dc <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	4b37      	ldr	r3, [pc, #220]	; (8008a98 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>)
 80089bc:	f7f7 ff38 	bl	8000830 <__aeabi_ddiv>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4610      	mov	r0, r2
 80089c6:	4619      	mov	r1, r3
 80089c8:	f7f8 f900 	bl	8000bcc <__aeabi_d2f>
 80089cc:	4603      	mov	r3, r0
 80089ce:	60fb      	str	r3, [r7, #12]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 80089d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80089d4:	eeb0 0a67 	vmov.f32	s0, s15
 80089d8:	f7fb fe56 	bl	8004688 <_ZSt4fabsf>
 80089dc:	eef0 7a40 	vmov.f32	s15, s0
 80089e0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80089e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ec:	bfcc      	ite	gt
 80089ee:	2301      	movgt	r3, #1
 80089f0:	2300      	movle	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d146      	bne.n	8008a86 <_ZN3jlb8Odometry12rpm_callbackEf+0xfe>

            v_buffer_.push_back(velocity);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3334      	adds	r3, #52	; 0x34
 80089fc:	f107 020c 	add.w	r2, r7, #12
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f003 ff3a 	bl	800c87c <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE) { v_buffer_.pop_front(); }
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3334      	adds	r3, #52	; 0x34
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f003 ff56 	bl	800c8be <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	bf8c      	ite	hi
 8008a18:	2301      	movhi	r3, #1
 8008a1a:	2300      	movls	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <_ZN3jlb8Odometry12rpm_callbackEf+0xa4>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3334      	adds	r3, #52	; 0x34
 8008a26:	4618      	mov	r0, r3
 8008a28:	f003 ff5b 	bl	800c8e2 <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a32:	f107 0310 	add.w	r3, r7, #16
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f003 ff75 	bl	800c928 <_ZNSt5dequeIfSaIfEE5beginEv>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a44:	f107 0320 	add.w	r3, r7, #32
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f003 ff7b 	bl	800c946 <_ZNSt5dequeIfSaIfEE3endEv>
 8008a50:	f107 0220 	add.w	r2, r7, #32
 8008a54:	f107 0310 	add.w	r3, r7, #16
 8008a58:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008a9c <_ZN3jlb8Odometry12rpm_callbackEf+0x114>
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f003 ff8b 	bl	800c97a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8008a64:	eeb0 8a40 	vmov.f32	s16, s0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3334      	adds	r3, #52	; 0x34
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f003 ff26 	bl	800c8be <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008a72:	ee07 0a90 	vmov	s15, r0
 8008a76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a7a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	edc3 7a00 	vstr	s15, [r3]
 8008a84:	e000      	b.n	8008a88 <_ZN3jlb8Odometry12rpm_callbackEf+0x100>
            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 8008a86:	bf00      	nop
        }
 8008a88:	3730      	adds	r7, #48	; 0x30
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	ecbd 8b02 	vpop	{d8}
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	f3af 8000 	nop.w
 8008a98:	404e0000 	.word	0x404e0000
 8008a9c:	00000000 	.word	0x00000000
 8008aa0:	64af6f9d 	.word	0x64af6f9d
 8008aa4:	3fd51c8b 	.word	0x3fd51c8b

08008aa8 <_ZN3jlb8Odometry12imu_callbackEf>:

        void imu_callback(const float ang_vel_z)
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	ed2d 8b02 	vpush	{d8}
 8008aae:	b08a      	sub	sp, #40	; 0x28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_ang_vel_z = ang_vel_z;
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	625a      	str	r2, [r3, #36]	; 0x24

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 8008abe:	edd7 7a00 	vldr	s15, [r7]
 8008ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ac6:	f7fb fddf 	bl	8004688 <_ZSt4fabsf>
 8008aca:	eef0 7a40 	vmov.f32	s15, s0
 8008ace:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8008b80 <_ZN3jlb8Odometry12imu_callbackEf+0xd8>
 8008ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ada:	bfcc      	ite	gt
 8008adc:	2301      	movgt	r3, #1
 8008ade:	2300      	movle	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d145      	bne.n	8008b72 <_ZN3jlb8Odometry12imu_callbackEf+0xca>

            w_buffer_.push_back(ang_vel_z);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	335c      	adds	r3, #92	; 0x5c
 8008aea:	463a      	mov	r2, r7
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f003 fec4 	bl	800c87c <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE) { w_buffer_.pop_front(); }
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	335c      	adds	r3, #92	; 0x5c
 8008af8:	4618      	mov	r0, r3
 8008afa:	f003 fee0 	bl	800c8be <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b0a      	cmp	r3, #10
 8008b02:	bf8c      	ite	hi
 8008b04:	2301      	movhi	r3, #1
 8008b06:	2300      	movls	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <_ZN3jlb8Odometry12imu_callbackEf+0x70>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	335c      	adds	r3, #92	; 0x5c
 8008b12:	4618      	mov	r0, r3
 8008b14:	f003 fee5 	bl	800c8e2 <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8008b1e:	f107 0308 	add.w	r3, r7, #8
 8008b22:	4611      	mov	r1, r2
 8008b24:	4618      	mov	r0, r3
 8008b26:	f003 feff 	bl	800c928 <_ZNSt5dequeIfSaIfEE5beginEv>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8008b30:	f107 0318 	add.w	r3, r7, #24
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f003 ff05 	bl	800c946 <_ZNSt5dequeIfSaIfEE3endEv>
 8008b3c:	f107 0218 	add.w	r2, r7, #24
 8008b40:	f107 0308 	add.w	r3, r7, #8
 8008b44:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008b84 <_ZN3jlb8Odometry12imu_callbackEf+0xdc>
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f003 ff15 	bl	800c97a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8008b50:	eeb0 8a40 	vmov.f32	s16, s0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	335c      	adds	r3, #92	; 0x5c
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f003 feb0 	bl	800c8be <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008b5e:	ee07 0a90 	vmov	s15, r0
 8008b62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b66:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	edc3 7a01 	vstr	s15, [r3, #4]
 8008b70:	e000      	b.n	8008b74 <_ZN3jlb8Odometry12imu_callbackEf+0xcc>
            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 8008b72:	bf00      	nop
        }
 8008b74:	3728      	adds	r7, #40	; 0x28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	ecbd 8b02 	vpop	{d8}
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	4096cbe4 	.word	0x4096cbe4
 8008b84:	00000000 	.word	0x00000000

08008b88 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	ed2d 8b02 	vpush	{d8}
 8008b8e:	b08c      	sub	sp, #48	; 0x30
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6178      	str	r0, [r7, #20]
        {
#ifndef SIMULATION
            // TODO: add timestamp and dt
            float dt = 0.005f;
 8008b94:	4b74      	ldr	r3, [pc, #464]	; (8008d68 <_ZN3jlb8Odometry11update_odomEv+0x1e0>)
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c

            auto  update_timestamp = std::chrono::steady_clock::now();
            float dt               = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 8008b98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba4:	f340 80b0 	ble.w	8008d08 <_ZN3jlb8Odometry11update_odomEv+0x180>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	edd3 7a00 	vldr	s15, [r3]
 8008bae:	eeb0 0a67 	vmov.f32	s0, s15
 8008bb2:	f7fb fd69 	bl	8004688 <_ZSt4fabsf>
 8008bb6:	ee10 3a10 	vmov	r3, s0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7f7 fcb6 	bl	800052c <__aeabi_f2d>
 8008bc0:	a365      	add	r3, pc, #404	; (adr r3, 8008d58 <_ZN3jlb8Odometry11update_odomEv+0x1d0>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 ff7b 	bl	8000ac0 <__aeabi_dcmplt>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <_ZN3jlb8Odometry11update_odomEv+0x4e>
 8008bd0:	f04f 0300 	mov.w	r3, #0
 8008bd4:	e001      	b.n	8008bda <_ZN3jlb8Odometry11update_odomEv+0x52>
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	6013      	str	r3, [r2, #0]
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	edd3 7a01 	vldr	s15, [r3, #4]
 8008be4:	eeb0 0a67 	vmov.f32	s0, s15
 8008be8:	f7fb fd4e 	bl	8004688 <_ZSt4fabsf>
 8008bec:	ee10 3a10 	vmov	r3, s0
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7f7 fc9b 	bl	800052c <__aeabi_f2d>
 8008bf6:	a35a      	add	r3, pc, #360	; (adr r3, 8008d60 <_ZN3jlb8Odometry11update_odomEv+0x1d8>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f7f7 ff60 	bl	8000ac0 <__aeabi_dcmplt>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <_ZN3jlb8Odometry11update_odomEv+0x84>
 8008c06:	f04f 0300 	mov.w	r3, #0
 8008c0a:	e001      	b.n	8008c10 <_ZN3jlb8Odometry11update_odomEv+0x88>
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	ed93 8a00 	vldr	s16, [r3]
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c26:	eeb0 0a67 	vmov.f32	s0, s15
 8008c2a:	f7fb fd1d 	bl	8004668 <_ZSt3cosf>
 8008c2e:	eef0 7a40 	vmov.f32	s15, s0
 8008c32:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8008c40:	f7fb fd32 	bl	80046a8 <_ZSt3sinf>
 8008c44:	eeb0 7a40 	vmov.f32	s14, s0
 8008c48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c50:	ee38 7a67 	vsub.f32	s14, s16, s15
 8008c54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	ed93 8a00 	vldr	s16, [r3]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c78:	eeb0 0a67 	vmov.f32	s0, s15
 8008c7c:	f7fb fd14 	bl	80046a8 <_ZSt3sinf>
 8008c80:	eef0 7a40 	vmov.f32	s15, s0
 8008c84:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c92:	f7fb fce9 	bl	8004668 <_ZSt3cosf>
 8008c96:	eeb0 7a40 	vmov.f32	s14, s0
 8008c9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca2:	ee38 7a27 	vadd.f32	s14, s16, s15
 8008ca6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8008cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	ed93 7a04 	vldr	s14, [r3, #16]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8008cca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8008cda:	6978      	ldr	r0, [r7, #20]
 8008cdc:	f000 f864 	bl	8008da8 <_ZN3jlb8Odometry15normalize_angleEf>
 8008ce0:	eef0 7a40 	vmov.f32	s15, s0
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	edc3 7a04 	vstr	s15, [r3, #16]

                distance_traveled_since_checkpoint += vx_t * dt;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	ed93 7a05 	vldr	s14, [r3, #20]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	edd3 6a00 	vldr	s13, [r3]
 8008cf6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	edc3 7a05 	vstr	s15, [r3, #20]
            }
#ifdef SIMULATION
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	61bb      	str	r3, [r7, #24]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	623b      	str	r3, [r7, #32]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d20:	69b8      	ldr	r0, [r7, #24]
 8008d22:	69f9      	ldr	r1, [r7, #28]
 8008d24:	6a3a      	ldr	r2, [r7, #32]
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	ee06 0a10 	vmov	s12, r0
 8008d2c:	ee06 1a90 	vmov	s13, r1
 8008d30:	ee07 2a10 	vmov	s14, r2
 8008d34:	ee07 3a90 	vmov	s15, r3
        }
 8008d38:	eeb0 0a46 	vmov.f32	s0, s12
 8008d3c:	eef0 0a66 	vmov.f32	s1, s13
 8008d40:	eeb0 1a47 	vmov.f32	s2, s14
 8008d44:	eef0 1a67 	vmov.f32	s3, s15
 8008d48:	3730      	adds	r7, #48	; 0x30
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	ecbd 8b02 	vpop	{d8}
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	f3af 8000 	nop.w
 8008d58:	eb851eb8 	.word	0xeb851eb8
 8008d5c:	3f9eb851 	.word	0x3f9eb851
 8008d60:	eb851eb8 	.word	0xeb851eb8
 8008d64:	3f8eb851 	.word	0x3f8eb851
 8008d68:	3ba3d70a 	.word	0x3ba3d70a

08008d6c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	ed87 0a03 	vstr	s0, [r7, #12]
 8008d76:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f7f7 fbd6 	bl	800052c <__aeabi_f2d>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	ed97 1b00 	vldr	d1, [r7]
 8008d88:	ec43 2b10 	vmov	d0, r2, r3
 8008d8c:	f018 f82e 	bl	8020dec <fmod>
 8008d90:	eeb0 7a40 	vmov.f32	s14, s0
 8008d94:	eef0 7a60 	vmov.f32	s15, s1
    }
 8008d98:	eeb0 0a47 	vmov.f32	s0, s14
 8008d9c:	eef0 0a67 	vmov.f32	s1, s15
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 8008db4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8008e10 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8008db8:	ed97 0a00 	vldr	s0, [r7]
 8008dbc:	f7ff ffd6 	bl	8008d6c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008dc0:	ec53 2b10 	vmov	r2, r3, d0
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	f7f7 ff00 	bl	8000bcc <__aeabi_d2f>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f) { angle += 2.0f * M_PI; }
 8008dd0:	edd7 7a00 	vldr	s15, [r7]
 8008dd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ddc:	d50f      	bpl.n	8008dfe <_ZN3jlb8Odometry15normalize_angleEf+0x56>
 8008dde:	6838      	ldr	r0, [r7, #0]
 8008de0:	f7f7 fba4 	bl	800052c <__aeabi_f2d>
 8008de4:	a30a      	add	r3, pc, #40	; (adr r3, 8008e10 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa41 	bl	8000270 <__adddf3>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4610      	mov	r0, r2
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7f7 fee9 	bl	8000bcc <__aeabi_d2f>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	603b      	str	r3, [r7, #0]
            return angle;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	ee07 3a90 	vmov	s15, r3
        }
 8008e04:	eeb0 0a67 	vmov.f32	s0, s15
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	54442d18 	.word	0x54442d18
 8008e14:	401921fb 	.word	0x401921fb

08008e18 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 8008e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e1c:	b094      	sub	sp, #80	; 0x50
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6178      	str	r0, [r7, #20]
 8008e22:	ed87 0a04 	vstr	s0, [r7, #16]
 8008e26:	edc7 0a03 	vstr	s1, [r7, #12]
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008e30:	eeb0 0a67 	vmov.f32	s0, s15
 8008e34:	f7fb fc18 	bl	8004668 <_ZSt3cosf>
 8008e38:	eef0 7a40 	vmov.f32	s15, s0
 8008e3c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e44:	ed97 7a04 	vldr	s14, [r7, #16]
 8008e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	edd3 7a04 	vldr	s15, [r3, #16]
 8008e58:	eeb0 0a67 	vmov.f32	s0, s15
 8008e5c:	f7fb fc24 	bl	80046a8 <_ZSt3sinf>
 8008e60:	eef0 7a40 	vmov.f32	s15, s0
 8008e64:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	edc3 7a03 	vstr	s15, [r3, #12]

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0   = std::fabs(theta_t);
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008e80:	eeb0 0a67 	vmov.f32	s0, s15
 8008e84:	f7fb fc00 	bl	8004688 <_ZSt4fabsf>
 8008e88:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7f7 fb4b 	bl	800052c <__aeabi_f2d>
 8008e96:	a396      	add	r3, pc, #600	; (adr r3, 80090f0 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f7f7 f9e6 	bl	800026c <__aeabi_dsub>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	603a      	str	r2, [r7, #0]
 8008ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eaa:	607b      	str	r3, [r7, #4]
 8008eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eb0:	f7f7 fe8c 	bl	8000bcc <__aeabi_d2f>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	64bb      	str	r3, [r7, #72]	; 0x48
            float theta_180 = std::fabs(theta_t - M_PI);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f7 fb35 	bl	800052c <__aeabi_f2d>
 8008ec2:	a38d      	add	r3, pc, #564	; (adr r3, 80090f8 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 f9d0 	bl	800026c <__aeabi_dsub>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4692      	mov	sl, r2
 8008ed2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8008ed6:	4650      	mov	r0, sl
 8008ed8:	4659      	mov	r1, fp
 8008eda:	f7f7 fe77 	bl	8000bcc <__aeabi_d2f>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	647b      	str	r3, [r7, #68]	; 0x44
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f7 fb20 	bl	800052c <__aeabi_f2d>
 8008eec:	a384      	add	r3, pc, #528	; (adr r3, 8009100 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 f9bb 	bl	800026c <__aeabi_dsub>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4690      	mov	r8, r2
 8008efc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8008f00:	4640      	mov	r0, r8
 8008f02:	4649      	mov	r1, r9
 8008f04:	f7f7 fe62 	bl	8000bcc <__aeabi_d2f>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	643b      	str	r3, [r7, #64]	; 0x40
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7f7 fb0b 	bl	800052c <__aeabi_f2d>
 8008f16:	a37c      	add	r3, pc, #496	; (adr r3, 8009108 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	f7f7 f9a6 	bl	800026c <__aeabi_dsub>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4614      	mov	r4, r2
 8008f26:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	f7f7 fe4d 	bl	8000bcc <__aeabi_d2f>
 8008f32:	4603      	mov	r3, r0
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 8008f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f44:	633b      	str	r3, [r7, #48]	; 0x30
 8008f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f48:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	2305      	movs	r3, #5
 8008f52:	623b      	str	r3, [r7, #32]
 8008f54:	f107 031c 	add.w	r3, r7, #28
 8008f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f5c:	f003 fd3f 	bl	800c9de <_ZSt3minIfET_St16initializer_listIS0_E>
 8008f60:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

            if (min_theta == theta_0) { theta_t = (theta_t + 0.0f) / 2.0f; }
 8008f64:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008f68:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008f6c:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f74:	d10e      	bne.n	8008f94 <_ZN3jlb8Odometry10correctionEff+0x17c>
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f7c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8009110 <_ZN3jlb8Odometry10correctionEff+0x2f8>
 8008f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	edc3 7a04 	vstr	s15, [r3, #16]
 8008f92:	e09a      	b.n	80090ca <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_90) { theta_t = (theta_t + M_PI / 2.0f) / 2.0f; }
 8008f94:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008f98:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008f9c:	eeb4 7a67 	vcmp.f32	s14, s15
 8008fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa4:	d11d      	bne.n	8008fe2 <_ZN3jlb8Odometry10correctionEff+0x1ca>
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f7 fabe 	bl	800052c <__aeabi_f2d>
 8008fb0:	a34f      	add	r3, pc, #316	; (adr r3, 80090f0 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	f7f7 f95b 	bl	8000270 <__adddf3>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008fca:	f7f7 fc31 	bl	8000830 <__aeabi_ddiv>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f7f7 fdf9 	bl	8000bcc <__aeabi_d2f>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	611a      	str	r2, [r3, #16]
 8008fe0:	e073      	b.n	80090ca <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_180) { theta_t = (theta_t + M_PI) / 2.0f; }
 8008fe2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008fe6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008fea:	eeb4 7a67 	vcmp.f32	s14, s15
 8008fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff2:	d11d      	bne.n	8009030 <_ZN3jlb8Odometry10correctionEff+0x218>
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7f7 fa97 	bl	800052c <__aeabi_f2d>
 8008ffe:	a33e      	add	r3, pc, #248	; (adr r3, 80090f8 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f7f7 f934 	bl	8000270 <__adddf3>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	4610      	mov	r0, r2
 800900e:	4619      	mov	r1, r3
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009018:	f7f7 fc0a 	bl	8000830 <__aeabi_ddiv>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4610      	mov	r0, r2
 8009022:	4619      	mov	r1, r3
 8009024:	f7f7 fdd2 	bl	8000bcc <__aeabi_d2f>
 8009028:	4602      	mov	r2, r0
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	611a      	str	r2, [r3, #16]
 800902e:	e04c      	b.n	80090ca <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_270) { theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f; }
 8009030:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009034:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009038:	eeb4 7a67 	vcmp.f32	s14, s15
 800903c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009040:	d11d      	bne.n	800907e <_ZN3jlb8Odometry10correctionEff+0x266>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	4618      	mov	r0, r3
 8009048:	f7f7 fa70 	bl	800052c <__aeabi_f2d>
 800904c:	a32c      	add	r3, pc, #176	; (adr r3, 8009100 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f7f7 f90d 	bl	8000270 <__adddf3>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4610      	mov	r0, r2
 800905c:	4619      	mov	r1, r3
 800905e:	f04f 0200 	mov.w	r2, #0
 8009062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009066:	f7f7 fbe3 	bl	8000830 <__aeabi_ddiv>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	f7f7 fdab 	bl	8000bcc <__aeabi_d2f>
 8009076:	4602      	mov	r2, r0
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	611a      	str	r2, [r3, #16]
 800907c:	e025      	b.n	80090ca <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }
 800907e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009082:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009086:	eeb4 7a67 	vcmp.f32	s14, s15
 800908a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908e:	d11c      	bne.n	80090ca <_ZN3jlb8Odometry10correctionEff+0x2b2>
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	4618      	mov	r0, r3
 8009096:	f7f7 fa49 	bl	800052c <__aeabi_f2d>
 800909a:	a31b      	add	r3, pc, #108	; (adr r3, 8009108 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	f7f7 f8e6 	bl	8000270 <__adddf3>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090b4:	f7f7 fbbc 	bl	8000830 <__aeabi_ddiv>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4610      	mov	r0, r2
 80090be:	4619      	mov	r1, r3
 80090c0:	f7f7 fd84 	bl	8000bcc <__aeabi_d2f>
 80090c4:	4602      	mov	r2, r0
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	611a      	str	r2, [r3, #16]

            theta_t = normalize_angle(theta_t);
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80090d0:	eeb0 0a67 	vmov.f32	s0, s15
 80090d4:	6978      	ldr	r0, [r7, #20]
 80090d6:	f7ff fe67 	bl	8008da8 <_ZN3jlb8Odometry15normalize_angleEf>
 80090da:	eef0 7a40 	vmov.f32	s15, s0
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	edc3 7a04 	vstr	s15, [r3, #16]
        }
 80090e4:	bf00      	nop
 80090e6:	3750      	adds	r7, #80	; 0x50
 80090e8:	46bd      	mov	sp, r7
 80090ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090ee:	bf00      	nop
 80090f0:	54442d18 	.word	0x54442d18
 80090f4:	3ff921fb 	.word	0x3ff921fb
 80090f8:	54442d18 	.word	0x54442d18
 80090fc:	400921fb 	.word	0x400921fb
 8009100:	7f3321d2 	.word	0x7f3321d2
 8009104:	4012d97c 	.word	0x4012d97c
 8009108:	54442d18 	.word	0x54442d18
 800910c:	401921fb 	.word	0x401921fb
 8009110:	00000000 	.word	0x00000000

08009114 <_ZN3jlb14CompositeStateC1ENS_9FastStateE>:
        Mission        mission;
        LabyrinthState labyrinth_state;
        FastState      fast_state;
        float          reference_speed = 0.0f;

        CompositeState(FastState fast_state_) : mission{Mission::FAST}, labyrinth_state{LabyrinthState::START}, fast_state{fast_state_}, reference_speed{0.0f} {}
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	609a      	str	r2, [r3, #8]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f04f 0200 	mov.w	r2, #0
 8009136:	60da      	str	r2, [r3, #12]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>:
        CompositeState(LabyrinthState labyrinth_state_) : mission{Mission::LABYRINTH}, labyrinth_state{labyrinth_state_}, fast_state{FastState::FOLLOW_SAFETY_CAR}, reference_speed{0.0f} {}
        CompositeState(Mission mission_, LabyrinthState labyrinth_state_, FastState fast_state_, float reference_speed_)
 8009146:	b480      	push	{r7}
 8009148:	b087      	sub	sp, #28
 800914a:	af00      	add	r7, sp, #0
 800914c:	6178      	str	r0, [r7, #20]
 800914e:	6139      	str	r1, [r7, #16]
 8009150:	60fa      	str	r2, [r7, #12]
 8009152:	60bb      	str	r3, [r7, #8]
 8009154:	ed87 0a01 	vstr	s0, [r7, #4]
            : mission{mission_}, labyrinth_state{labyrinth_state_}, fast_state{fast_state_}, reference_speed{reference_speed_}
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	609a      	str	r2, [r3, #8]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	60da      	str	r2, [r3, #12]
        {
        }
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4618      	mov	r0, r3
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>:
        bool    started_state_transition = false;

        [[maybe_unused]] char previous_node = 'U';
        [[maybe_unused]] char next_node     = 'U';

        ASState(Odometry& odometry_, Controller& controller_, Graph& graph_) : odometry{odometry_}, controller{controller_}, graph{graph_} {}
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	607a      	str	r2, [r7, #4]
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	605a      	str	r2, [r3, #4]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	609a      	str	r2, [r3, #8]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	60da      	str	r2, [r3, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	741a      	strb	r2, [r3, #16]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	745a      	strb	r2, [r3, #17]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	749a      	strb	r2, [r3, #18]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	74da      	strb	r2, [r3, #19]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f04f 0200 	mov.w	r2, #0
 80091c4:	615a      	str	r2, [r3, #20]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	619a      	str	r2, [r3, #24]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2255      	movs	r2, #85	; 0x55
 80091d8:	775a      	strb	r2, [r3, #29]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2255      	movs	r2, #85	; 0x55
 80091de:	779a      	strb	r2, [r3, #30]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	621a      	str	r2, [r3, #32]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	625a      	str	r2, [r3, #36]	; 0x24
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	629a      	str	r2, [r3, #40]	; 0x28
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>:

        void set_states(const CompositeState state_)
 8009200:	b084      	sub	sp, #16
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	f107 0014 	add.w	r0, r7, #20
 800920e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        {
            mission         = state_.mission;
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	601a      	str	r2, [r3, #0]
            labyrinth_state = state_.labyrinth_state;
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	605a      	str	r2, [r3, #4]
            fast_state      = state_.fast_state;
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	609a      	str	r2, [r3, #8]
        }
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	b004      	add	sp, #16
 8009230:	4770      	bx	lr

08009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <_ZN3jlb7ASState6updateEv>:

        CompositeState update()
 8009248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924a:	ed2d 8b02 	vpush	{d8}
 800924e:	b08f      	sub	sp, #60	; 0x3c
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
        {
#ifndef SIMULATION
            // TODO: add timestamp
            float dt = 0.005f;
 8009256:	4bc4      	ldr	r3, [pc, #784]	; (8009568 <_ZN3jlb7ASState6updateEv+0x320>)
 8009258:	637b      	str	r3, [r7, #52]	; 0x34
            auto                   update_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp_ - prev_update_timestamp_).count() / 1000.0f;
            prev_update_timestamp_                   = update_timestamp_;
#endif

            state_transition_time += dt;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	ed93 7a06 	vldr	s14, [r3, #24]
 8009260:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	edc3 7a06 	vstr	s15, [r3, #24]
            state_time += dt;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	ed93 7a05 	vldr	s14, [r3, #20]
 8009274:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	edc3 7a05 	vstr	s15, [r3, #20]

            switch (mission)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <_ZN3jlb7ASState6updateEv+0x4a>
 800928a:	2b01      	cmp	r3, #1
 800928c:	f000 816e 	beq.w	800956c <_ZN3jlb7ASState6updateEv+0x324>
                    break;
                }
                default:
                {
                    // this should never happen
                    break;
 8009290:	e297      	b.n	80097c2 <_ZN3jlb7ASState6updateEv+0x57a>
                    bool at_decision_point = under_gate || at_cross_section;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	7c1b      	ldrb	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <_ZN3jlb7ASState6updateEv+0x5a>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	7c5b      	ldrb	r3, [r3, #17]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <_ZN3jlb7ASState6updateEv+0x5e>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <_ZN3jlb7ASState6updateEv+0x60>
 80092a6:	2300      	movs	r3, #0
 80092a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (!prev_at_decision_point && at_decision_point)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	7c9b      	ldrb	r3, [r3, #18]
 80092b0:	f083 0301 	eor.w	r3, r3, #1
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 814d 	beq.w	8009556 <_ZN3jlb7ASState6updateEv+0x30e>
 80092bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 8148 	beq.w	8009556 <_ZN3jlb7ASState6updateEv+0x30e>
                        float inaccuracy = 0.25f;
 80092c6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if (std::sqrt(std::pow(graph[next_node].x - odometry.x_t, 2) + std::pow(graph[next_node].y - odometry.y_t, 2)) < inaccuracy)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	7f9b      	ldrb	r3, [r3, #30]
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f7ff fab9 	bl	800884e <_ZN3jlb5GraphixEc>
 80092dc:	4603      	mov	r3, r0
 80092de:	ed93 7a01 	vldr	s14, [r3, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80092ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092ee:	2002      	movs	r0, #2
 80092f0:	eeb0 0a67 	vmov.f32	s0, s15
 80092f4:	f7f9 f9ba 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80092f8:	ec55 4b10 	vmov	r4, r5, d0
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	7f9b      	ldrb	r3, [r3, #30]
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7ff faa1 	bl	800884e <_ZN3jlb5GraphixEc>
 800930c:	4603      	mov	r3, r0
 800930e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	edd3 7a03 	vldr	s15, [r3, #12]
 800931a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800931e:	2002      	movs	r0, #2
 8009320:	eeb0 0a67 	vmov.f32	s0, s15
 8009324:	f7f9 f9a2 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8009328:	ec53 2b10 	vmov	r2, r3, d0
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	f7f6 ff9e 	bl	8000270 <__adddf3>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	ec43 2b17 	vmov	d7, r2, r3
 800933c:	eeb0 0a47 	vmov.f32	s0, s14
 8009340:	eef0 0a67 	vmov.f32	s1, s15
 8009344:	f017 fdf0 	bl	8020f28 <sqrt>
 8009348:	ec55 4b10 	vmov	r4, r5, d0
 800934c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800934e:	f7f7 f8ed 	bl	800052c <__aeabi_f2d>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	2101      	movs	r1, #1
 8009358:	460e      	mov	r6, r1
 800935a:	4620      	mov	r0, r4
 800935c:	4629      	mov	r1, r5
 800935e:	f7f7 fbaf 	bl	8000ac0 <__aeabi_dcmplt>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <_ZN3jlb7ASState6updateEv+0x124>
 8009368:	2300      	movs	r3, #0
 800936a:	461e      	mov	r6, r3
 800936c:	b2f3      	uxtb	r3, r6
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80f1 	beq.w	8009556 <_ZN3jlb7ASState6updateEv+0x30e>
                            auto at_node = next_node;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	7f9b      	ldrb	r3, [r3, #30]
 8009378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                unsigned long num_neighbors = graph[at_node].edges.size();
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fa61 	bl	800884e <_ZN3jlb5GraphixEc>
 800938c:	4603      	mov	r3, r0
 800938e:	330c      	adds	r3, #12
 8009390:	4618      	mov	r0, r3
 8009392:	f003 fb41 	bl	800ca18 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8009396:	6278      	str	r0, [r7, #36]	; 0x24
                                auto          selected_edge = rand() % num_neighbors;
 8009398:	f01a fd64 	bl	8023e64 <rand>
 800939c:	4603      	mov	r3, r0
 800939e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80093a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093a6:	fb01 f202 	mul.w	r2, r1, r2
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	623b      	str	r3, [r7, #32]
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff fa48 	bl	800884e <_ZN3jlb5GraphixEc>
 80093be:	4603      	mov	r3, r0
 80093c0:	330c      	adds	r3, #12
 80093c2:	6a39      	ldr	r1, [r7, #32]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f003 fb3d 	bl	800ca44 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80093ca:	4603      	mov	r3, r0
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	2b50      	cmp	r3, #80	; 0x50
 80093d0:	d023      	beq.n	800941a <_ZN3jlb7ASState6updateEv+0x1d2>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fa36 	bl	800884e <_ZN3jlb5GraphixEc>
 80093e2:	4603      	mov	r3, r0
 80093e4:	330c      	adds	r3, #12
 80093e6:	6a39      	ldr	r1, [r7, #32]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f003 fb2b 	bl	800ca44 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80093ee:	4603      	mov	r3, r0
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2b55      	cmp	r3, #85	; 0x55
 80093f4:	d011      	beq.n	800941a <_ZN3jlb7ASState6updateEv+0x1d2>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80093fe:	4611      	mov	r1, r2
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fa24 	bl	800884e <_ZN3jlb5GraphixEc>
 8009406:	4603      	mov	r3, r0
 8009408:	330c      	adds	r3, #12
 800940a:	6a39      	ldr	r1, [r7, #32]
 800940c:	4618      	mov	r0, r3
 800940e:	f003 fb19 	bl	800ca44 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009412:	4603      	mov	r3, r0
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	2b58      	cmp	r3, #88	; 0x58
 8009418:	d101      	bne.n	800941e <_ZN3jlb7ASState6updateEv+0x1d6>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <_ZN3jlb7ASState6updateEv+0x1d8>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 8096 	bne.w	8009552 <_ZN3jlb7ASState6updateEv+0x30a>
                                auto prev_nodes = graph[at_node].edges[selected_edge].prev_nodes;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff fa0c 	bl	800884e <_ZN3jlb5GraphixEc>
 8009436:	4603      	mov	r3, r0
 8009438:	330c      	adds	r3, #12
 800943a:	6a39      	ldr	r1, [r7, #32]
 800943c:	4618      	mov	r0, r3
 800943e:	f003 fb01 	bl	800ca44 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009442:	4603      	mov	r3, r0
 8009444:	f103 0208 	add.w	r2, r3, #8
 8009448:	f107 030c 	add.w	r3, r7, #12
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f003 f8ad 	bl	800c5ae <_ZNSt6vectorIcSaIcEEC1ERKS1_>
                                if (std::find(prev_nodes.begin(), prev_nodes.end(), previous_node) != prev_nodes.end())
 8009454:	f107 030c 	add.w	r3, r7, #12
 8009458:	4618      	mov	r0, r3
 800945a:	f003 fb06 	bl	800ca6a <_ZNSt6vectorIcSaIcEE5beginEv>
 800945e:	4604      	mov	r4, r0
 8009460:	f107 030c 	add.w	r3, r7, #12
 8009464:	4618      	mov	r0, r3
 8009466:	f003 fb10 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800946a:	4601      	mov	r1, r0
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	331d      	adds	r3, #29
 8009470:	461a      	mov	r2, r3
 8009472:	4620      	mov	r0, r4
 8009474:	f003 fb1a 	bl	800caac <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8009478:	4603      	mov	r3, r0
 800947a:	61bb      	str	r3, [r7, #24]
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	4618      	mov	r0, r3
 8009482:	f003 fb02 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 8009486:	4603      	mov	r3, r0
 8009488:	61fb      	str	r3, [r7, #28]
 800948a:	f107 021c 	add.w	r2, r7, #28
 800948e:	f107 0318 	add.w	r3, r7, #24
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f003 fb1d 	bl	800cad4 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800949a:	4603      	mov	r3, r0
 800949c:	f083 0301 	eor.w	r3, r3, #1
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d04c      	beq.n	8009540 <_ZN3jlb7ASState6updateEv+0x2f8>
                                    next_node     = graph[at_node].edges[selected_edge].node;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80094ae:	4611      	mov	r1, r2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff f9cc 	bl	800884e <_ZN3jlb5GraphixEc>
 80094b6:	4603      	mov	r3, r0
 80094b8:	330c      	adds	r3, #12
 80094ba:	6a39      	ldr	r1, [r7, #32]
 80094bc:	4618      	mov	r0, r3
 80094be:	f003 fac1 	bl	800ca44 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80094c2:	4603      	mov	r3, r0
 80094c4:	781a      	ldrb	r2, [r3, #0]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	779a      	strb	r2, [r3, #30]
                                    previous_node = at_node;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80094d0:	775a      	strb	r2, [r3, #29]
                                    controller.set_direction(graph[at_node].edges[selected_edge].direction);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094da:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80094de:	4611      	mov	r1, r2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff f9b4 	bl	800884e <_ZN3jlb5GraphixEc>
 80094e6:	4603      	mov	r3, r0
 80094e8:	330c      	adds	r3, #12
 80094ea:	6a39      	ldr	r1, [r7, #32]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f003 faa9 	bl	800ca44 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80094f2:	4603      	mov	r3, r0
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	4619      	mov	r1, r3
 80094f8:	4620      	mov	r0, r4
 80094fa:	f7fb fea0 	bl	800523e <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                                    odometry.correction(graph[previous_node].x, graph[previous_node].y);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	6a1c      	ldr	r4, [r3, #32]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	7f5b      	ldrb	r3, [r3, #29]
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f7ff f99e 	bl	800884e <_ZN3jlb5GraphixEc>
 8009512:	4603      	mov	r3, r0
 8009514:	ed93 8a01 	vldr	s16, [r3, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	7f5b      	ldrb	r3, [r3, #29]
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7ff f993 	bl	800884e <_ZN3jlb5GraphixEc>
 8009528:	4603      	mov	r3, r0
 800952a:	edd3 7a02 	vldr	s15, [r3, #8]
 800952e:	eef0 0a67 	vmov.f32	s1, s15
 8009532:	eeb0 0a48 	vmov.f32	s0, s16
 8009536:	4620      	mov	r0, r4
 8009538:	f7ff fc6e 	bl	8008e18 <_ZN3jlb8Odometry10correctionEff>
                                    break;
 800953c:	2400      	movs	r4, #0
 800953e:	e000      	b.n	8009542 <_ZN3jlb7ASState6updateEv+0x2fa>
                            }
 8009540:	2401      	movs	r4, #1
 8009542:	f107 030c 	add.w	r3, r7, #12
 8009546:	4618      	mov	r0, r3
 8009548:	f003 f86e 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 800954c:	2c01      	cmp	r4, #1
 800954e:	d102      	bne.n	8009556 <_ZN3jlb7ASState6updateEv+0x30e>
 8009550:	e000      	b.n	8009554 <_ZN3jlb7ASState6updateEv+0x30c>
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 8009552:	bf00      	nop
                            }
 8009554:	e712      	b.n	800937c <_ZN3jlb7ASState6updateEv+0x134>
                    prev_at_decision_point = at_decision_point;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800955c:	749a      	strb	r2, [r3, #18]
                    reference_speed = LABYRINTH_SPEED;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009564:	60da      	str	r2, [r3, #12]
                    break;
 8009566:	e12c      	b.n	80097c2 <_ZN3jlb7ASState6updateEv+0x57a>
 8009568:	3ba3d70a 	.word	0x3ba3d70a
                    switch (fast_state)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	2b06      	cmp	r3, #6
 8009572:	f200 8124 	bhi.w	80097be <_ZN3jlb7ASState6updateEv+0x576>
 8009576:	a201      	add	r2, pc, #4	; (adr r2, 800957c <_ZN3jlb7ASState6updateEv+0x334>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	08009599 	.word	0x08009599
 8009580:	080095a3 	.word	0x080095a3
 8009584:	080095ad 	.word	0x080095ad
 8009588:	080095b7 	.word	0x080095b7
 800958c:	08009639 	.word	0x08009639
 8009590:	080096bb 	.word	0x080096bb
 8009594:	0800973d 	.word	0x0800973d
                            reference_speed = FAST_SPEED_SAFETY_CAR;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800959e:	60da      	str	r2, [r3, #12]
                            break;
 80095a0:	e10e      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED_OVERTAKE;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80095a8:	60da      	str	r2, [r3, #12]
                            break;
 80095aa:	e109      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80095b2:	60da      	str	r2, [r3, #12]
                            break;
 80095b4:	e104      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            if (current_number_of_lines == 1u && !started_state_transition)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	7cdb      	ldrb	r3, [r3, #19]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d10e      	bne.n	80095dc <_ZN3jlb7ASState6updateEv+0x394>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	7f1b      	ldrb	r3, [r3, #28]
 80095c2:	f083 0301 	eor.w	r3, r3, #1
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <_ZN3jlb7ASState6updateEv+0x394>
                                started_state_transition = true;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2201      	movs	r2, #1
 80095d0:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	f04f 0200 	mov.w	r2, #0
 80095d8:	619a      	str	r2, [r3, #24]
 80095da:	e00a      	b.n	80095f2 <_ZN3jlb7ASState6updateEv+0x3aa>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	7cdb      	ldrb	r3, [r3, #19]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d006      	beq.n	80095f2 <_ZN3jlb7ASState6updateEv+0x3aa>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	7f1b      	ldrb	r3, [r3, #28]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <_ZN3jlb7ASState6updateEv+0x3aa>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	7f1b      	ldrb	r3, [r3, #28]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d019      	beq.n	800962e <_ZN3jlb7ASState6updateEv+0x3e6>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8009600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009608:	dd11      	ble.n	800962e <_ZN3jlb7ASState6updateEv+0x3e6>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	edd3 7a05 	vldr	s15, [r3, #20]
 8009610:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8009614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961c:	dd07      	ble.n	800962e <_ZN3jlb7ASState6updateEv+0x3e6>
                                fast_state = FastState::OUT_ACCEL_ZONE;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2204      	movs	r2, #4
 8009622:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	615a      	str	r2, [r3, #20]
                                break;
 800962c:	e0c8      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009634:	60da      	str	r2, [r3, #12]
                            break;
 8009636:	e0c3      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	7cdb      	ldrb	r3, [r3, #19]
 800963c:	2b03      	cmp	r3, #3
 800963e:	d10e      	bne.n	800965e <_ZN3jlb7ASState6updateEv+0x416>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	7f1b      	ldrb	r3, [r3, #28]
 8009644:	f083 0301 	eor.w	r3, r3, #1
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d007      	beq.n	800965e <_ZN3jlb7ASState6updateEv+0x416>
                                started_state_transition = true;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2201      	movs	r2, #1
 8009652:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	f04f 0200 	mov.w	r2, #0
 800965a:	619a      	str	r2, [r3, #24]
 800965c:	e00a      	b.n	8009674 <_ZN3jlb7ASState6updateEv+0x42c>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	7cdb      	ldrb	r3, [r3, #19]
 8009662:	2b03      	cmp	r3, #3
 8009664:	d006      	beq.n	8009674 <_ZN3jlb7ASState6updateEv+0x42c>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	7f1b      	ldrb	r3, [r3, #28]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d002      	beq.n	8009674 <_ZN3jlb7ASState6updateEv+0x42c>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2200      	movs	r2, #0
 8009672:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	7f1b      	ldrb	r3, [r3, #28]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d019      	beq.n	80096b0 <_ZN3jlb7ASState6updateEv+0x468>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	edd3 7a06 	vldr	s15, [r3, #24]
 8009682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968a:	dd11      	ble.n	80096b0 <_ZN3jlb7ASState6updateEv+0x468>
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009692:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8009696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800969a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969e:	dd07      	ble.n	80096b0 <_ZN3jlb7ASState6updateEv+0x468>
                                fast_state = FastState::IN_BRAKE_ZONE;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2205      	movs	r2, #5
 80096a4:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	615a      	str	r2, [r3, #20]
                                break;
 80096ae:	e087      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80096b6:	60da      	str	r2, [r3, #12]
                            break;
 80096b8:	e082      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            if (current_number_of_lines == 1u && !started_state_transition)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	7cdb      	ldrb	r3, [r3, #19]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d10e      	bne.n	80096e0 <_ZN3jlb7ASState6updateEv+0x498>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	7f1b      	ldrb	r3, [r3, #28]
 80096c6:	f083 0301 	eor.w	r3, r3, #1
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d007      	beq.n	80096e0 <_ZN3jlb7ASState6updateEv+0x498>
                                started_state_transition = true;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2201      	movs	r2, #1
 80096d4:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	f04f 0200 	mov.w	r2, #0
 80096dc:	619a      	str	r2, [r3, #24]
 80096de:	e00a      	b.n	80096f6 <_ZN3jlb7ASState6updateEv+0x4ae>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	7cdb      	ldrb	r3, [r3, #19]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d006      	beq.n	80096f6 <_ZN3jlb7ASState6updateEv+0x4ae>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	7f1b      	ldrb	r3, [r3, #28]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <_ZN3jlb7ASState6updateEv+0x4ae>
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2200      	movs	r2, #0
 80096f4:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	7f1b      	ldrb	r3, [r3, #28]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d019      	beq.n	8009732 <_ZN3jlb7ASState6updateEv+0x4ea>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	edd3 7a06 	vldr	s15, [r3, #24]
 8009704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970c:	dd11      	ble.n	8009732 <_ZN3jlb7ASState6updateEv+0x4ea>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	edd3 7a05 	vldr	s15, [r3, #20]
 8009714:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8009718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800971c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009720:	dd07      	ble.n	8009732 <_ZN3jlb7ASState6updateEv+0x4ea>
                                fast_state = FastState::OUT_BRAKE_ZONE;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2206      	movs	r2, #6
 8009726:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f04f 0200 	mov.w	r2, #0
 800972e:	615a      	str	r2, [r3, #20]
                                break;
 8009730:	e046      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED_TURN;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009738:	60da      	str	r2, [r3, #12]
                            break;
 800973a:	e041      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            if (current_number_of_lines == 3u && !started_state_transition)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	7cdb      	ldrb	r3, [r3, #19]
 8009740:	2b03      	cmp	r3, #3
 8009742:	d10e      	bne.n	8009762 <_ZN3jlb7ASState6updateEv+0x51a>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	7f1b      	ldrb	r3, [r3, #28]
 8009748:	f083 0301 	eor.w	r3, r3, #1
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d007      	beq.n	8009762 <_ZN3jlb7ASState6updateEv+0x51a>
                                started_state_transition = true;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2201      	movs	r2, #1
 8009756:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	f04f 0200 	mov.w	r2, #0
 800975e:	619a      	str	r2, [r3, #24]
 8009760:	e00a      	b.n	8009778 <_ZN3jlb7ASState6updateEv+0x530>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	7cdb      	ldrb	r3, [r3, #19]
 8009766:	2b03      	cmp	r3, #3
 8009768:	d006      	beq.n	8009778 <_ZN3jlb7ASState6updateEv+0x530>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	7f1b      	ldrb	r3, [r3, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <_ZN3jlb7ASState6updateEv+0x530>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2200      	movs	r2, #0
 8009776:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	7f1b      	ldrb	r3, [r3, #28]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d019      	beq.n	80097b4 <_ZN3jlb7ASState6updateEv+0x56c>
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	edd3 7a06 	vldr	s15, [r3, #24]
 8009786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800978a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978e:	dd11      	ble.n	80097b4 <_ZN3jlb7ASState6updateEv+0x56c>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	edd3 7a05 	vldr	s15, [r3, #20]
 8009796:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800979a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800979e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a2:	dd07      	ble.n	80097b4 <_ZN3jlb7ASState6updateEv+0x56c>
                                fast_state = FastState::IN_ACCEL_ZONE;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2203      	movs	r2, #3
 80097a8:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	f04f 0200 	mov.w	r2, #0
 80097b0:	615a      	str	r2, [r3, #20]
                                break;
 80097b2:	e005      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED_TURN;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80097ba:	60da      	str	r2, [r3, #12]
                            break;
 80097bc:	e000      	b.n	80097c0 <_ZN3jlb7ASState6updateEv+0x578>
                            break;
 80097be:	bf00      	nop
                    break;
 80097c0:	bf00      	nop
                }
            }

            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6819      	ldr	r1, [r3, #0]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	6898      	ldr	r0, [r3, #8]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80097d4:	eeb0 0a67 	vmov.f32	s0, s15
 80097d8:	4603      	mov	r3, r0
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff fcb3 	bl	8009146 <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>
        }
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	373c      	adds	r7, #60	; 0x3c
 80097e4:	46bd      	mov	sp, r7
 80097e6:	ecbd 8b02 	vpop	{d8}
 80097ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097ec <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f017 fae8 	bl	8020dca <_ZNSaIcED1Ev>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base() = default;
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4618      	mov	r0, r3
 8009810:	f003 f978 	bl	800cb04 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <_ZNSt6vectorIcSaIcEEC1Ev>:
      vector() = default;
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff ffeb 	bl	8009804 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4618      	mov	r0, r3
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>:

        std::vector<char> telemetry_data;

#ifndef SIMULATION
        // TODO: initialize UDPClient for STM32
        SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_, const Measurements &measurements_)
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	69fa      	ldr	r2, [r7, #28]
 800986a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff ffd2 	bl	800981e <_ZNSt6vectorIcSaIcEEC1Ev>
        {
        }
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <_ZN3jlb12SignalSenderD1Ev>:
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_) , client(SENDER_ADDRESS, SENDER_PORT)
        {
        }
#endif

        ~SignalSender() {}
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009892:	4618      	mov	r0, r3
 8009894:	f002 fec8 	bl	800c628 <_ZNSt6vectorIcSaIcEED1Ev>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <_ZN3jlb12SignalSender14send_telemetryEv>:

        void send_telemetry()
 80098a2:	b590      	push	{r4, r7, lr}
 80098a4:	b085      	sub	sp, #20
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
        {
            telemetry_data.clear();
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80098b0:	4618      	mov	r0, r3
 80098b2:	f003 f94f 	bl	800cb54 <_ZNSt6vectorIcSaIcEE5clearEv>
            measurements_1();
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f87e 	bl	80099b8 <_ZN3jlb12SignalSender14measurements_1Ev>
            measurements_2();
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fe18 	bl	800a4f2 <_ZN3jlb12SignalSender14measurements_2Ev>
            measurements_3();
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f001 fd34 	bl	800b330 <_ZN3jlb12SignalSender14measurements_3Ev>
            measurements_4();
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 fd94 	bl	800b3f6 <_ZN3jlb12SignalSender14measurements_4Ev>
            measurements_5();
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fdf4 	bl	800b4bc <_ZN3jlb12SignalSender14measurements_5Ev>
            odometry_1();
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 fe60 	bl	800b59a <_ZN3jlb12SignalSender10odometry_1Ev>
            odometry_2();
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fec0 	bl	800b660 <_ZN3jlb12SignalSender10odometry_2Ev>
            logic_1();
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 ff14 	bl	800b70e <_ZN3jlb12SignalSender7logic_1Ev>
            logic_2();
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 ff80 	bl	800b7ec <_ZN3jlb12SignalSender7logic_2Ev>
            logic3();
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 fff7 	bl	800b8e0 <_ZN3jlb12SignalSender6logic3Ev>

            uint32_t timestamp = HAL_GetTick();
 80098f2:	f00a fc3d 	bl	8014170 <HAL_GetTick>
 80098f6:	60f8      	str	r0, [r7, #12]
            telemetry_data.push_back((timestamp >> 24u) & 0xFF);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	0e1b      	lsrs	r3, r3, #24
 8009902:	b2db      	uxtb	r3, r3
 8009904:	723b      	strb	r3, [r7, #8]
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	4619      	mov	r1, r3
 800990c:	4610      	mov	r0, r2
 800990e:	f003 f92f 	bl	800cb70 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back((timestamp >> 16u) & 0xFF);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	0c1b      	lsrs	r3, r3, #16
 800991c:	b2db      	uxtb	r3, r3
 800991e:	727b      	strb	r3, [r7, #9]
 8009920:	f107 0309 	add.w	r3, r7, #9
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f003 f922 	bl	800cb70 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back((timestamp >> 8u) & 0xFF);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	0a1b      	lsrs	r3, r3, #8
 8009936:	b2db      	uxtb	r3, r3
 8009938:	72bb      	strb	r3, [r7, #10]
 800993a:	f107 030a 	add.w	r3, r7, #10
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f003 f915 	bl	800cb70 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back(timestamp & 0xFF);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	72fa      	strb	r2, [r7, #11]
 8009952:	f107 020b 	add.w	r2, r7, #11
 8009956:	4611      	mov	r1, r2
 8009958:	4618      	mov	r0, r3
 800995a:	f003 f909 	bl	800cb70 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            send(telemetry_data.data(), telemetry_data.size());
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009964:	4618      	mov	r0, r3
 8009966:	f003 f914 	bl	800cb92 <_ZNSt6vectorIcSaIcEE4dataEv>
 800996a:	4604      	mov	r4, r0
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009972:	4618      	mov	r0, r3
 8009974:	f003 f91c 	bl	800cbb0 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8009978:	4603      	mov	r3, r0
 800997a:	461a      	mov	r2, r3
 800997c:	4621      	mov	r1, r4
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f804 	bl	800998c <_ZN3jlb12SignalSender4sendEPcj>
        }
 8009984:	bf00      	nop
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	bd90      	pop	{r4, r7, pc}

0800998c <_ZN3jlb12SignalSender4sendEPcj>:
        // TODO: add UDPClient for STM32
#else
        UDPClient client;
#endif

        int send([[maybe_unused]] char *msg, [[maybe_unused]] size_t max_size)
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
        {
#ifndef SIMULATION
            HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(msg), max_size, HAL_MAX_DELAY);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	b29a      	uxth	r2, r3
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	4804      	ldr	r0, [pc, #16]	; (80099b4 <_ZN3jlb12SignalSender4sendEPcj+0x28>)
 80099a4:	f012 fb9a 	bl	801c0dc <HAL_UART_Transmit>
            return 0;
 80099a8:	2300      	movs	r3, #0
#else
            return client.send(msg, max_size);
#endif
        }
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000920 	.word	0x20000920

080099b8 <_ZN3jlb12SignalSender14measurements_1Ev>:

        void measurements_1()
 80099b8:	b590      	push	{r4, r7, lr}
 80099ba:	b089      	sub	sp, #36	; 0x24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_1.line_sensor_1  = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d113      	bne.n	80099f4 <_ZN3jlb12SignalSender14measurements_1Ev+0x3c>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80099d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80099e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ea:	edc7 7a00 	vstr	s15, [r7]
 80099ee:	783b      	ldrb	r3, [r7, #0]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	e00e      	b.n	8009a12 <_ZN3jlb12SignalSender14measurements_1Ev+0x5a>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80099fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0a:	edc7 7a00 	vstr	s15, [r7]
 8009a0e:	783b      	ldrb	r3, [r7, #0]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	7013      	strb	r3, [r2, #0]
            jlb_rx.measurements_1.line_sensor_2  = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d113      	bne.n	8009a4a <_ZN3jlb12SignalSender14measurements_1Ev+0x92>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a40:	edc7 7a00 	vstr	s15, [r7]
 8009a44:	783b      	ldrb	r3, [r7, #0]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	e00e      	b.n	8009a68 <_ZN3jlb12SignalSender14measurements_1Ev+0xb0>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a54:	ee07 3a90 	vmov	s15, r3
 8009a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a60:	edc7 7a00 	vstr	s15, [r7]
 8009a64:	783b      	ldrb	r3, [r7, #0]
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	7053      	strb	r3, [r2, #1]
            jlb_rx.measurements_1.line_sensor_3  = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d113      	bne.n	8009aa0 <_ZN3jlb12SignalSender14measurements_1Ev+0xe8>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a7e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a8a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a96:	edc7 7a00 	vstr	s15, [r7]
 8009a9a:	783b      	ldrb	r3, [r7, #0]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	e00e      	b.n	8009abe <_ZN3jlb12SignalSender14measurements_1Ev+0x106>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009aa6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab6:	edc7 7a00 	vstr	s15, [r7]
 8009aba:	783b      	ldrb	r3, [r7, #0]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	7093      	strb	r3, [r2, #2]
            jlb_rx.measurements_1.line_sensor_4  = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d113      	bne.n	8009af6 <_ZN3jlb12SignalSender14measurements_1Ev+0x13e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ad4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009ad8:	ee07 3a90 	vmov	s15, r3
 8009adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ae0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ae4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aec:	edc7 7a00 	vstr	s15, [r7]
 8009af0:	783b      	ldrb	r3, [r7, #0]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	e00e      	b.n	8009b14 <_ZN3jlb12SignalSender14measurements_1Ev+0x15c>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009afc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009b00:	ee07 3a90 	vmov	s15, r3
 8009b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b0c:	edc7 7a00 	vstr	s15, [r7]
 8009b10:	783b      	ldrb	r3, [r7, #0]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	70d3      	strb	r3, [r2, #3]
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d113      	bne.n	8009b4c <_ZN3jlb12SignalSender14measurements_1Ev+0x194>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009b2e:	ee07 3a90 	vmov	s15, r3
 8009b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b36:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b42:	edc7 7a00 	vstr	s15, [r7]
 8009b46:	783b      	ldrb	r3, [r7, #0]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	e00e      	b.n	8009b6a <_ZN3jlb12SignalSender14measurements_1Ev+0x1b2>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b62:	edc7 7a00 	vstr	s15, [r7]
 8009b66:	783b      	ldrb	r3, [r7, #0]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	7113      	strb	r3, [r2, #4]
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b05      	cmp	r3, #5
 8009b78:	d113      	bne.n	8009ba2 <_ZN3jlb12SignalSender14measurements_1Ev+0x1ea>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b84:	ee07 3a90 	vmov	s15, r3
 8009b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b98:	edc7 7a00 	vstr	s15, [r7]
 8009b9c:	783b      	ldrb	r3, [r7, #0]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	e00e      	b.n	8009bc0 <_ZN3jlb12SignalSender14measurements_1Ev+0x208>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ba8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009bac:	ee07 3a90 	vmov	s15, r3
 8009bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bb8:	edc7 7a00 	vstr	s15, [r7]
 8009bbc:	783b      	ldrb	r3, [r7, #0]
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	7153      	strb	r3, [r2, #5]
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b06      	cmp	r3, #6
 8009bce:	d113      	bne.n	8009bf8 <_ZN3jlb12SignalSender14measurements_1Ev+0x240>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009bd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009be2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bee:	edc7 7a00 	vstr	s15, [r7]
 8009bf2:	783b      	ldrb	r3, [r7, #0]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	e00e      	b.n	8009c16 <_ZN3jlb12SignalSender14measurements_1Ev+0x25e>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009bfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c0e:	edc7 7a00 	vstr	s15, [r7]
 8009c12:	783b      	ldrb	r3, [r7, #0]
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	7193      	strb	r3, [r2, #6]
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b07      	cmp	r3, #7
 8009c24:	d113      	bne.n	8009c4e <_ZN3jlb12SignalSender14measurements_1Ev+0x296>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c2c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009c30:	ee07 3a90 	vmov	s15, r3
 8009c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c44:	edc7 7a00 	vstr	s15, [r7]
 8009c48:	783b      	ldrb	r3, [r7, #0]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	e00e      	b.n	8009c6c <_ZN3jlb12SignalSender14measurements_1Ev+0x2b4>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c54:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009c58:	ee07 3a90 	vmov	s15, r3
 8009c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c64:	edc7 7a00 	vstr	s15, [r7]
 8009c68:	783b      	ldrb	r3, [r7, #0]
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	71d3      	strb	r3, [r2, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d113      	bne.n	8009ca4 <_ZN3jlb12SignalSender14measurements_1Ev+0x2ec>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009c92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c9a:	edc7 7a00 	vstr	s15, [r7]
 8009c9e:	783b      	ldrb	r3, [r7, #0]
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	e00e      	b.n	8009cc2 <_ZN3jlb12SignalSender14measurements_1Ev+0x30a>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cae:	ee07 3a90 	vmov	s15, r3
 8009cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cba:	edc7 7a00 	vstr	s15, [r7]
 8009cbe:	783b      	ldrb	r3, [r7, #0]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	7213      	strb	r3, [r2, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b09      	cmp	r3, #9
 8009cd0:	d113      	bne.n	8009cfa <_ZN3jlb12SignalSender14measurements_1Ev+0x342>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cdc:	ee07 3a90 	vmov	s15, r3
 8009ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ce4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf0:	edc7 7a00 	vstr	s15, [r7]
 8009cf4:	783b      	ldrb	r3, [r7, #0]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	e00e      	b.n	8009d18 <_ZN3jlb12SignalSender14measurements_1Ev+0x360>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d10:	edc7 7a00 	vstr	s15, [r7]
 8009d14:	783b      	ldrb	r3, [r7, #0]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	7253      	strb	r3, [r2, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b0a      	cmp	r3, #10
 8009d26:	d113      	bne.n	8009d50 <_ZN3jlb12SignalSender14measurements_1Ev+0x398>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d3a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d46:	edc7 7a00 	vstr	s15, [r7]
 8009d4a:	783b      	ldrb	r3, [r7, #0]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	e00e      	b.n	8009d6e <_ZN3jlb12SignalSender14measurements_1Ev+0x3b6>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d5a:	ee07 3a90 	vmov	s15, r3
 8009d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d66:	edc7 7a00 	vstr	s15, [r7]
 8009d6a:	783b      	ldrb	r3, [r7, #0]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	7293      	strb	r3, [r2, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b0b      	cmp	r3, #11
 8009d7c:	d113      	bne.n	8009da6 <_ZN3jlb12SignalSender14measurements_1Ev+0x3ee>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d88:	ee07 3a90 	vmov	s15, r3
 8009d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d9c:	edc7 7a00 	vstr	s15, [r7]
 8009da0:	783b      	ldrb	r3, [r7, #0]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	e00e      	b.n	8009dc4 <_ZN3jlb12SignalSender14measurements_1Ev+0x40c>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009dac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009db0:	ee07 3a90 	vmov	s15, r3
 8009db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dbc:	edc7 7a00 	vstr	s15, [r7]
 8009dc0:	783b      	ldrb	r3, [r7, #0]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	72d3      	strb	r3, [r2, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b0c      	cmp	r3, #12
 8009dd2:	d113      	bne.n	8009dfc <_ZN3jlb12SignalSender14measurements_1Ev+0x444>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009de6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009dea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009df2:	edc7 7a00 	vstr	s15, [r7]
 8009df6:	783b      	ldrb	r3, [r7, #0]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	e00e      	b.n	8009e1a <_ZN3jlb12SignalSender14measurements_1Ev+0x462>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e12:	edc7 7a00 	vstr	s15, [r7]
 8009e16:	783b      	ldrb	r3, [r7, #0]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	7313      	strb	r3, [r2, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b0d      	cmp	r3, #13
 8009e28:	d113      	bne.n	8009e52 <_ZN3jlb12SignalSender14measurements_1Ev+0x49a>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e34:	ee07 3a90 	vmov	s15, r3
 8009e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e48:	edc7 7a00 	vstr	s15, [r7]
 8009e4c:	783b      	ldrb	r3, [r7, #0]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	e00e      	b.n	8009e70 <_ZN3jlb12SignalSender14measurements_1Ev+0x4b8>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e5c:	ee07 3a90 	vmov	s15, r3
 8009e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e68:	edc7 7a00 	vstr	s15, [r7]
 8009e6c:	783b      	ldrb	r3, [r7, #0]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	7353      	strb	r3, [r2, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b0e      	cmp	r3, #14
 8009e7e:	d113      	bne.n	8009ea8 <_ZN3jlb12SignalSender14measurements_1Ev+0x4f0>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e8a:	ee07 3a90 	vmov	s15, r3
 8009e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009e96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e9e:	edc7 7a00 	vstr	s15, [r7]
 8009ea2:	783b      	ldrb	r3, [r7, #0]
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	e00e      	b.n	8009ec6 <_ZN3jlb12SignalSender14measurements_1Ev+0x50e>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ebe:	edc7 7a00 	vstr	s15, [r7]
 8009ec2:	783b      	ldrb	r3, [r7, #0]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	7393      	strb	r3, [r2, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b0f      	cmp	r3, #15
 8009ed4:	d113      	bne.n	8009efe <_ZN3jlb12SignalSender14measurements_1Ev+0x546>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009edc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ee8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef4:	edc7 7a00 	vstr	s15, [r7]
 8009ef8:	783b      	ldrb	r3, [r7, #0]
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	e00e      	b.n	8009f1c <_ZN3jlb12SignalSender14measurements_1Ev+0x564>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f08:	ee07 3a90 	vmov	s15, r3
 8009f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f14:	edc7 7a00 	vstr	s15, [r7]
 8009f18:	783b      	ldrb	r3, [r7, #0]
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	73d3      	strb	r3, [r2, #15]
#ifndef SIMULATION
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b10      	cmp	r3, #16
 8009f2a:	d113      	bne.n	8009f54 <_ZN3jlb12SignalSender14measurements_1Ev+0x59c>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f3e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f4a:	edc7 7a00 	vstr	s15, [r7]
 8009f4e:	783b      	ldrb	r3, [r7, #0]
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	e00e      	b.n	8009f72 <_ZN3jlb12SignalSender14measurements_1Ev+0x5ba>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f6a:	edc7 7a00 	vstr	s15, [r7]
 8009f6e:	783b      	ldrb	r3, [r7, #0]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	7413      	strb	r3, [r2, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b11      	cmp	r3, #17
 8009f80:	d113      	bne.n	8009faa <_ZN3jlb12SignalSender14measurements_1Ev+0x5f2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa0:	edc7 7a00 	vstr	s15, [r7]
 8009fa4:	783b      	ldrb	r3, [r7, #0]
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	e00e      	b.n	8009fc8 <_ZN3jlb12SignalSender14measurements_1Ev+0x610>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fb4:	ee07 3a90 	vmov	s15, r3
 8009fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fc0:	edc7 7a00 	vstr	s15, [r7]
 8009fc4:	783b      	ldrb	r3, [r7, #0]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	7453      	strb	r3, [r2, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b12      	cmp	r3, #18
 8009fd6:	d113      	bne.n	800a000 <_ZN3jlb12SignalSender14measurements_1Ev+0x648>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009fde:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff6:	edc7 7a00 	vstr	s15, [r7]
 8009ffa:	783b      	ldrb	r3, [r7, #0]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	e00e      	b.n	800a01e <_ZN3jlb12SignalSender14measurements_1Ev+0x666>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a006:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a016:	edc7 7a00 	vstr	s15, [r7]
 800a01a:	783b      	ldrb	r3, [r7, #0]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	7493      	strb	r3, [r2, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b13      	cmp	r3, #19
 800a02c:	d113      	bne.n	800a056 <_ZN3jlb12SignalSender14measurements_1Ev+0x69e>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a034:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a038:	ee07 3a90 	vmov	s15, r3
 800a03c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a040:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a044:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a04c:	edc7 7a00 	vstr	s15, [r7]
 800a050:	783b      	ldrb	r3, [r7, #0]
 800a052:	b2db      	uxtb	r3, r3
 800a054:	e00e      	b.n	800a074 <_ZN3jlb12SignalSender14measurements_1Ev+0x6bc>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a05c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a06c:	edc7 7a00 	vstr	s15, [r7]
 800a070:	783b      	ldrb	r3, [r7, #0]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	74d3      	strb	r3, [r2, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b14      	cmp	r3, #20
 800a082:	d113      	bne.n	800a0ac <_ZN3jlb12SignalSender14measurements_1Ev+0x6f4>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a08a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a096:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a09a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a09e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0a2:	edc7 7a00 	vstr	s15, [r7]
 800a0a6:	783b      	ldrb	r3, [r7, #0]
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	e00e      	b.n	800a0ca <_ZN3jlb12SignalSender14measurements_1Ev+0x712>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c2:	edc7 7a00 	vstr	s15, [r7]
 800a0c6:	783b      	ldrb	r3, [r7, #0]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	7513      	strb	r3, [r2, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b15      	cmp	r3, #21
 800a0d8:	d113      	bne.n	800a102 <_ZN3jlb12SignalSender14measurements_1Ev+0x74a>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a0f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f8:	edc7 7a00 	vstr	s15, [r7]
 800a0fc:	783b      	ldrb	r3, [r7, #0]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	e00e      	b.n	800a120 <_ZN3jlb12SignalSender14measurements_1Ev+0x768>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a108:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a10c:	ee07 3a90 	vmov	s15, r3
 800a110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a118:	edc7 7a00 	vstr	s15, [r7]
 800a11c:	783b      	ldrb	r3, [r7, #0]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	7553      	strb	r3, [r2, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b16      	cmp	r3, #22
 800a12e:	d113      	bne.n	800a158 <_ZN3jlb12SignalSender14measurements_1Ev+0x7a0>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a136:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a13a:	ee07 3a90 	vmov	s15, r3
 800a13e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a142:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a14a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a14e:	edc7 7a00 	vstr	s15, [r7]
 800a152:	783b      	ldrb	r3, [r7, #0]
 800a154:	b2db      	uxtb	r3, r3
 800a156:	e00e      	b.n	800a176 <_ZN3jlb12SignalSender14measurements_1Ev+0x7be>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a15e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a16e:	edc7 7a00 	vstr	s15, [r7]
 800a172:	783b      	ldrb	r3, [r7, #0]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	7593      	strb	r3, [r2, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b17      	cmp	r3, #23
 800a184:	d113      	bne.n	800a1ae <_ZN3jlb12SignalSender14measurements_1Ev+0x7f6>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a18c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a198:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a19c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a4:	edc7 7a00 	vstr	s15, [r7]
 800a1a8:	783b      	ldrb	r3, [r7, #0]
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	e00e      	b.n	800a1cc <_ZN3jlb12SignalSender14measurements_1Ev+0x814>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1b4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a1b8:	ee07 3a90 	vmov	s15, r3
 800a1bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c4:	edc7 7a00 	vstr	s15, [r7]
 800a1c8:	783b      	ldrb	r3, [r7, #0]
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	75d3      	strb	r3, [r2, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b18      	cmp	r3, #24
 800a1da:	d113      	bne.n	800a204 <_ZN3jlb12SignalSender14measurements_1Ev+0x84c>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a1f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1fa:	edc7 7a00 	vstr	s15, [r7]
 800a1fe:	783b      	ldrb	r3, [r7, #0]
 800a200:	b2db      	uxtb	r3, r3
 800a202:	e00e      	b.n	800a222 <_ZN3jlb12SignalSender14measurements_1Ev+0x86a>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a20a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a20e:	ee07 3a90 	vmov	s15, r3
 800a212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21a:	edc7 7a00 	vstr	s15, [r7]
 800a21e:	783b      	ldrb	r3, [r7, #0]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	7613      	strb	r3, [r2, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b19      	cmp	r3, #25
 800a230:	d113      	bne.n	800a25a <_ZN3jlb12SignalSender14measurements_1Ev+0x8a2>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a238:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a23c:	ee07 3a90 	vmov	s15, r3
 800a240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a244:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a248:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a24c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a250:	edc7 7a00 	vstr	s15, [r7]
 800a254:	783b      	ldrb	r3, [r7, #0]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	e00e      	b.n	800a278 <_ZN3jlb12SignalSender14measurements_1Ev+0x8c0>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a260:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a264:	ee07 3a90 	vmov	s15, r3
 800a268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a270:	edc7 7a00 	vstr	s15, [r7]
 800a274:	783b      	ldrb	r3, [r7, #0]
 800a276:	b2db      	uxtb	r3, r3
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	7653      	strb	r3, [r2, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b1a      	cmp	r3, #26
 800a286:	d113      	bne.n	800a2b0 <_ZN3jlb12SignalSender14measurements_1Ev+0x8f8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a28e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a29a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a29e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2a6:	edc7 7a00 	vstr	s15, [r7]
 800a2aa:	783b      	ldrb	r3, [r7, #0]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	e00e      	b.n	800a2ce <_ZN3jlb12SignalSender14measurements_1Ev+0x916>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a2ba:	ee07 3a90 	vmov	s15, r3
 800a2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c6:	edc7 7a00 	vstr	s15, [r7]
 800a2ca:	783b      	ldrb	r3, [r7, #0]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	7693      	strb	r3, [r2, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b1b      	cmp	r3, #27
 800a2dc:	d113      	bne.n	800a306 <_ZN3jlb12SignalSender14measurements_1Ev+0x94e>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2e4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800a2e8:	ee07 3a90 	vmov	s15, r3
 800a2ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a2f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2fc:	edc7 7a00 	vstr	s15, [r7]
 800a300:	783b      	ldrb	r3, [r7, #0]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	e00e      	b.n	800a324 <_ZN3jlb12SignalSender14measurements_1Ev+0x96c>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a30c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800a310:	ee07 3a90 	vmov	s15, r3
 800a314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a31c:	edc7 7a00 	vstr	s15, [r7]
 800a320:	783b      	ldrb	r3, [r7, #0]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	76d3      	strb	r3, [r2, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b1c      	cmp	r3, #28
 800a332:	d113      	bne.n	800a35c <_ZN3jlb12SignalSender14measurements_1Ev+0x9a4>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a33a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a346:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a34a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a34e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a352:	edc7 7a00 	vstr	s15, [r7]
 800a356:	783b      	ldrb	r3, [r7, #0]
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	e00e      	b.n	800a37a <_ZN3jlb12SignalSender14measurements_1Ev+0x9c2>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a366:	ee07 3a90 	vmov	s15, r3
 800a36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a372:	edc7 7a00 	vstr	s15, [r7]
 800a376:	783b      	ldrb	r3, [r7, #0]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	7713      	strb	r3, [r2, #28]
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b1d      	cmp	r3, #29
 800a388:	d113      	bne.n	800a3b2 <_ZN3jlb12SignalSender14measurements_1Ev+0x9fa>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a394:	ee07 3a90 	vmov	s15, r3
 800a398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a39c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a3a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a8:	edc7 7a00 	vstr	s15, [r7]
 800a3ac:	783b      	ldrb	r3, [r7, #0]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	e00e      	b.n	800a3d0 <_ZN3jlb12SignalSender14measurements_1Ev+0xa18>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3bc:	ee07 3a90 	vmov	s15, r3
 800a3c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3c8:	edc7 7a00 	vstr	s15, [r7]
 800a3cc:	783b      	ldrb	r3, [r7, #0]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	7753      	strb	r3, [r2, #29]
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b1e      	cmp	r3, #30
 800a3de:	d113      	bne.n	800a408 <_ZN3jlb12SignalSender14measurements_1Ev+0xa50>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3e6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a3ea:	ee07 3a90 	vmov	s15, r3
 800a3ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a3f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3fe:	edc7 7a00 	vstr	s15, [r7]
 800a402:	783b      	ldrb	r3, [r7, #0]
 800a404:	b2db      	uxtb	r3, r3
 800a406:	e00e      	b.n	800a426 <_ZN3jlb12SignalSender14measurements_1Ev+0xa6e>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a40e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a41e:	edc7 7a00 	vstr	s15, [r7]
 800a422:	783b      	ldrb	r3, [r7, #0]
 800a424:	b2db      	uxtb	r3, r3
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	7793      	strb	r3, [r2, #30]
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b1f      	cmp	r3, #31
 800a434:	d113      	bne.n	800a45e <_ZN3jlb12SignalSender14measurements_1Ev+0xaa6>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a43c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a440:	ee07 3a90 	vmov	s15, r3
 800a444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a448:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a44c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a454:	edc7 7a00 	vstr	s15, [r7]
 800a458:	783b      	ldrb	r3, [r7, #0]
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	e00e      	b.n	800a47c <_ZN3jlb12SignalSender14measurements_1Ev+0xac4>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a464:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a468:	ee07 3a90 	vmov	s15, r3
 800a46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a474:	edc7 7a00 	vstr	s15, [r7]
 800a478:	783b      	ldrb	r3, [r7, #0]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	77d3      	strb	r3, [r2, #31]
#endif

            char    data[measurements_1_DLC + 2] = {0};
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	f107 0310 	add.w	r3, r7, #16
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_1_IDE;
 800a48e:	2300      	movs	r3, #0
 800a490:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_1_DLC;
 800a492:	2308      	movs	r3, #8
 800a494:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_1_CANID;
 800a496:	2301      	movs	r3, #1
 800a498:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_1_DLC;
 800a49a:	2308      	movs	r3, #8
 800a49c:	737b      	strb	r3, [r7, #13]
            Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f107 010c 	add.w	r1, r7, #12
 800a4a4:	3102      	adds	r1, #2
 800a4a6:	f107 030b 	add.w	r3, r7, #11
 800a4aa:	f107 020a 	add.w	r2, r7, #10
 800a4ae:	f7f6 feb7 	bl	8001220 <Pack_measurements_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_1_DLC + 2);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f002 fae3 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	61fb      	str	r3, [r7, #28]
 800a4c8:	f107 021c 	add.w	r2, r7, #28
 800a4cc:	f107 0318 	add.w	r3, r7, #24
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f002 fb7b 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800a4d8:	f107 030c 	add.w	r3, r7, #12
 800a4dc:	330a      	adds	r3, #10
 800a4de:	f107 020c 	add.w	r2, r7, #12
 800a4e2:	69b9      	ldr	r1, [r7, #24]
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f002 fb83 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800a4ea:	bf00      	nop
 800a4ec:	3724      	adds	r7, #36	; 0x24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd90      	pop	{r4, r7, pc}

0800a4f2 <_ZN3jlb12SignalSender14measurements_2Ev>:

        void measurements_2()
 800a4f2:	b590      	push	{r4, r7, lr}
 800a4f4:	b089      	sub	sp, #36	; 0x24
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_2.line_sensor_1  = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d113      	bne.n	800a52e <_ZN3jlb12SignalSender14measurements_2Ev+0x3c>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a50c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a518:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a51c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a524:	edc7 7a00 	vstr	s15, [r7]
 800a528:	783b      	ldrb	r3, [r7, #0]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	e00e      	b.n	800a54c <_ZN3jlb12SignalSender14measurements_2Ev+0x5a>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a534:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a538:	ee07 3a90 	vmov	s15, r3
 800a53c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a544:	edc7 7a00 	vstr	s15, [r7]
 800a548:	783b      	ldrb	r3, [r7, #0]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	f882 3020 	strb.w	r3, [r2, #32]
            jlb_rx.measurements_2.line_sensor_2  = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d113      	bne.n	800a586 <_ZN3jlb12SignalSender14measurements_2Ev+0x94>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a564:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a568:	ee07 3a90 	vmov	s15, r3
 800a56c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a570:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a574:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a57c:	edc7 7a00 	vstr	s15, [r7]
 800a580:	783b      	ldrb	r3, [r7, #0]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	e00e      	b.n	800a5a4 <_ZN3jlb12SignalSender14measurements_2Ev+0xb2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a58c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a590:	ee07 3a90 	vmov	s15, r3
 800a594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a59c:	edc7 7a00 	vstr	s15, [r7]
 800a5a0:	783b      	ldrb	r3, [r7, #0]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
            jlb_rx.measurements_2.line_sensor_3  = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d113      	bne.n	800a5de <_ZN3jlb12SignalSender14measurements_2Ev+0xec>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a5cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5d4:	edc7 7a00 	vstr	s15, [r7]
 800a5d8:	783b      	ldrb	r3, [r7, #0]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	e00e      	b.n	800a5fc <_ZN3jlb12SignalSender14measurements_2Ev+0x10a>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a5e8:	ee07 3a90 	vmov	s15, r3
 800a5ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5f4:	edc7 7a00 	vstr	s15, [r7]
 800a5f8:	783b      	ldrb	r3, [r7, #0]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            jlb_rx.measurements_2.line_sensor_4  = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d113      	bne.n	800a636 <_ZN3jlb12SignalSender14measurements_2Ev+0x144>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a614:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800a618:	ee07 3a90 	vmov	s15, r3
 800a61c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a620:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a624:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a62c:	edc7 7a00 	vstr	s15, [r7]
 800a630:	783b      	ldrb	r3, [r7, #0]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	e00e      	b.n	800a654 <_ZN3jlb12SignalSender14measurements_2Ev+0x162>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a63c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800a640:	ee07 3a90 	vmov	s15, r3
 800a644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a64c:	edc7 7a00 	vstr	s15, [r7]
 800a650:	783b      	ldrb	r3, [r7, #0]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	2b04      	cmp	r3, #4
 800a664:	d113      	bne.n	800a68e <_ZN3jlb12SignalSender14measurements_2Ev+0x19c>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a66c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a670:	ee07 3a90 	vmov	s15, r3
 800a674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a678:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a67c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a684:	edc7 7a00 	vstr	s15, [r7]
 800a688:	783b      	ldrb	r3, [r7, #0]
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	e00e      	b.n	800a6ac <_ZN3jlb12SignalSender14measurements_2Ev+0x1ba>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a694:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a698:	ee07 3a90 	vmov	s15, r3
 800a69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a4:	edc7 7a00 	vstr	s15, [r7]
 800a6a8:	783b      	ldrb	r3, [r7, #0]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b05      	cmp	r3, #5
 800a6bc:	d113      	bne.n	800a6e6 <_ZN3jlb12SignalSender14measurements_2Ev+0x1f4>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a6c8:	ee07 3a90 	vmov	s15, r3
 800a6cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a6d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6dc:	edc7 7a00 	vstr	s15, [r7]
 800a6e0:	783b      	ldrb	r3, [r7, #0]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	e00e      	b.n	800a704 <_ZN3jlb12SignalSender14measurements_2Ev+0x212>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a6f0:	ee07 3a90 	vmov	s15, r3
 800a6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6fc:	edc7 7a00 	vstr	s15, [r7]
 800a700:	783b      	ldrb	r3, [r7, #0]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	2b06      	cmp	r3, #6
 800a714:	d113      	bne.n	800a73e <_ZN3jlb12SignalSender14measurements_2Ev+0x24c>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a71c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a728:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a72c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a734:	edc7 7a00 	vstr	s15, [r7]
 800a738:	783b      	ldrb	r3, [r7, #0]
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	e00e      	b.n	800a75c <_ZN3jlb12SignalSender14measurements_2Ev+0x26a>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a744:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a754:	edc7 7a00 	vstr	s15, [r7]
 800a758:	783b      	ldrb	r3, [r7, #0]
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	2b07      	cmp	r3, #7
 800a76c:	d113      	bne.n	800a796 <_ZN3jlb12SignalSender14measurements_2Ev+0x2a4>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a774:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800a778:	ee07 3a90 	vmov	s15, r3
 800a77c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a780:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a784:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a78c:	edc7 7a00 	vstr	s15, [r7]
 800a790:	783b      	ldrb	r3, [r7, #0]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	e00e      	b.n	800a7b4 <_ZN3jlb12SignalSender14measurements_2Ev+0x2c2>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a79c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800a7a0:	ee07 3a90 	vmov	s15, r3
 800a7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7ac:	edc7 7a00 	vstr	s15, [r7]
 800a7b0:	783b      	ldrb	r3, [r7, #0]
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	2b08      	cmp	r3, #8
 800a7c4:	d113      	bne.n	800a7ee <_ZN3jlb12SignalSender14measurements_2Ev+0x2fc>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a7dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7e4:	edc7 7a00 	vstr	s15, [r7]
 800a7e8:	783b      	ldrb	r3, [r7, #0]
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	e00e      	b.n	800a80c <_ZN3jlb12SignalSender14measurements_2Ev+0x31a>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7f8:	ee07 3a90 	vmov	s15, r3
 800a7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a804:	edc7 7a00 	vstr	s15, [r7]
 800a808:	783b      	ldrb	r3, [r7, #0]
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	2b09      	cmp	r3, #9
 800a81c:	d113      	bne.n	800a846 <_ZN3jlb12SignalSender14measurements_2Ev+0x354>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a824:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a828:	ee07 3a90 	vmov	s15, r3
 800a82c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a830:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a834:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a83c:	edc7 7a00 	vstr	s15, [r7]
 800a840:	783b      	ldrb	r3, [r7, #0]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	e00e      	b.n	800a864 <_ZN3jlb12SignalSender14measurements_2Ev+0x372>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a84c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a850:	ee07 3a90 	vmov	s15, r3
 800a854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a85c:	edc7 7a00 	vstr	s15, [r7]
 800a860:	783b      	ldrb	r3, [r7, #0]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	2b0a      	cmp	r3, #10
 800a874:	d113      	bne.n	800a89e <_ZN3jlb12SignalSender14measurements_2Ev+0x3ac>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a87c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a888:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a88c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a894:	edc7 7a00 	vstr	s15, [r7]
 800a898:	783b      	ldrb	r3, [r7, #0]
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	e00e      	b.n	800a8bc <_ZN3jlb12SignalSender14measurements_2Ev+0x3ca>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8a4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a8a8:	ee07 3a90 	vmov	s15, r3
 800a8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b4:	edc7 7a00 	vstr	s15, [r7]
 800a8b8:	783b      	ldrb	r3, [r7, #0]
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b0b      	cmp	r3, #11
 800a8cc:	d113      	bne.n	800a8f6 <_ZN3jlb12SignalSender14measurements_2Ev+0x404>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8d4:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a8e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ec:	edc7 7a00 	vstr	s15, [r7]
 800a8f0:	783b      	ldrb	r3, [r7, #0]
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	e00e      	b.n	800a914 <_ZN3jlb12SignalSender14measurements_2Ev+0x422>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8fc:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a900:	ee07 3a90 	vmov	s15, r3
 800a904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a90c:	edc7 7a00 	vstr	s15, [r7]
 800a910:	783b      	ldrb	r3, [r7, #0]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	2b0c      	cmp	r3, #12
 800a924:	d113      	bne.n	800a94e <_ZN3jlb12SignalSender14measurements_2Ev+0x45c>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a92c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a930:	ee07 3a90 	vmov	s15, r3
 800a934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a938:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a93c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a944:	edc7 7a00 	vstr	s15, [r7]
 800a948:	783b      	ldrb	r3, [r7, #0]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	e00e      	b.n	800a96c <_ZN3jlb12SignalSender14measurements_2Ev+0x47a>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a954:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a958:	ee07 3a90 	vmov	s15, r3
 800a95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a964:	edc7 7a00 	vstr	s15, [r7]
 800a968:	783b      	ldrb	r3, [r7, #0]
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b0d      	cmp	r3, #13
 800a97c:	d113      	bne.n	800a9a6 <_ZN3jlb12SignalSender14measurements_2Ev+0x4b4>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a984:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a988:	ee07 3a90 	vmov	s15, r3
 800a98c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a990:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a994:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a99c:	edc7 7a00 	vstr	s15, [r7]
 800a9a0:	783b      	ldrb	r3, [r7, #0]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	e00e      	b.n	800a9c4 <_ZN3jlb12SignalSender14measurements_2Ev+0x4d2>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9ac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a9b0:	ee07 3a90 	vmov	s15, r3
 800a9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9bc:	edc7 7a00 	vstr	s15, [r7]
 800a9c0:	783b      	ldrb	r3, [r7, #0]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	2b0e      	cmp	r3, #14
 800a9d4:	d113      	bne.n	800a9fe <_ZN3jlb12SignalSender14measurements_2Ev+0x50c>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9dc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a9e0:	ee07 3a90 	vmov	s15, r3
 800a9e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a9ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9f4:	edc7 7a00 	vstr	s15, [r7]
 800a9f8:	783b      	ldrb	r3, [r7, #0]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	e00e      	b.n	800aa1c <_ZN3jlb12SignalSender14measurements_2Ev+0x52a>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa04:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800aa08:	ee07 3a90 	vmov	s15, r3
 800aa0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa14:	edc7 7a00 	vstr	s15, [r7]
 800aa18:	783b      	ldrb	r3, [r7, #0]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	2b0f      	cmp	r3, #15
 800aa2c:	d113      	bne.n	800aa56 <_ZN3jlb12SignalSender14measurements_2Ev+0x564>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa34:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa4c:	edc7 7a00 	vstr	s15, [r7]
 800aa50:	783b      	ldrb	r3, [r7, #0]
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	e00e      	b.n	800aa74 <_ZN3jlb12SignalSender14measurements_2Ev+0x582>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa5c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800aa60:	ee07 3a90 	vmov	s15, r3
 800aa64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa6c:	edc7 7a00 	vstr	s15, [r7]
 800aa70:	783b      	ldrb	r3, [r7, #0]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
#ifndef SIMULATION
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	2b08      	cmp	r3, #8
 800aa84:	d113      	bne.n	800aaae <_ZN3jlb12SignalSender14measurements_2Ev+0x5bc>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aaa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa4:	edc7 7a00 	vstr	s15, [r7]
 800aaa8:	783b      	ldrb	r3, [r7, #0]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	e00e      	b.n	800aacc <_ZN3jlb12SignalSender14measurements_2Ev+0x5da>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aab4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aab8:	ee07 3a90 	vmov	s15, r3
 800aabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aac4:	edc7 7a00 	vstr	s15, [r7]
 800aac8:	783b      	ldrb	r3, [r7, #0]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2b09      	cmp	r3, #9
 800aadc:	d113      	bne.n	800ab06 <_ZN3jlb12SignalSender14measurements_2Ev+0x614>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aae8:	ee07 3a90 	vmov	s15, r3
 800aaec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaf0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aaf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aaf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aafc:	edc7 7a00 	vstr	s15, [r7]
 800ab00:	783b      	ldrb	r3, [r7, #0]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	e00e      	b.n	800ab24 <_ZN3jlb12SignalSender14measurements_2Ev+0x632>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab10:	ee07 3a90 	vmov	s15, r3
 800ab14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab1c:	edc7 7a00 	vstr	s15, [r7]
 800ab20:	783b      	ldrb	r3, [r7, #0]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	2b0a      	cmp	r3, #10
 800ab34:	d113      	bne.n	800ab5e <_ZN3jlb12SignalSender14measurements_2Ev+0x66c>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab3c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ab4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab54:	edc7 7a00 	vstr	s15, [r7]
 800ab58:	783b      	ldrb	r3, [r7, #0]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	e00e      	b.n	800ab7c <_ZN3jlb12SignalSender14measurements_2Ev+0x68a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab64:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ab68:	ee07 3a90 	vmov	s15, r3
 800ab6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab74:	edc7 7a00 	vstr	s15, [r7]
 800ab78:	783b      	ldrb	r3, [r7, #0]
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2b0b      	cmp	r3, #11
 800ab8c:	d113      	bne.n	800abb6 <_ZN3jlb12SignalSender14measurements_2Ev+0x6c4>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab94:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800ab98:	ee07 3a90 	vmov	s15, r3
 800ab9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aba0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abac:	edc7 7a00 	vstr	s15, [r7]
 800abb0:	783b      	ldrb	r3, [r7, #0]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	e00e      	b.n	800abd4 <_ZN3jlb12SignalSender14measurements_2Ev+0x6e2>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abbc:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800abc0:	ee07 3a90 	vmov	s15, r3
 800abc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abcc:	edc7 7a00 	vstr	s15, [r7]
 800abd0:	783b      	ldrb	r3, [r7, #0]
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	2b0c      	cmp	r3, #12
 800abe4:	d113      	bne.n	800ac0e <_ZN3jlb12SignalSender14measurements_2Ev+0x71c>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800abf0:	ee07 3a90 	vmov	s15, r3
 800abf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abf8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800abfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac04:	edc7 7a00 	vstr	s15, [r7]
 800ac08:	783b      	ldrb	r3, [r7, #0]
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	e00e      	b.n	800ac2c <_ZN3jlb12SignalSender14measurements_2Ev+0x73a>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac14:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ac18:	ee07 3a90 	vmov	s15, r3
 800ac1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac24:	edc7 7a00 	vstr	s15, [r7]
 800ac28:	783b      	ldrb	r3, [r7, #0]
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	2b0d      	cmp	r3, #13
 800ac3c:	d113      	bne.n	800ac66 <_ZN3jlb12SignalSender14measurements_2Ev+0x774>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ac48:	ee07 3a90 	vmov	s15, r3
 800ac4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ac54:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac5c:	edc7 7a00 	vstr	s15, [r7]
 800ac60:	783b      	ldrb	r3, [r7, #0]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	e00e      	b.n	800ac84 <_ZN3jlb12SignalSender14measurements_2Ev+0x792>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ac70:	ee07 3a90 	vmov	s15, r3
 800ac74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac7c:	edc7 7a00 	vstr	s15, [r7]
 800ac80:	783b      	ldrb	r3, [r7, #0]
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2b0e      	cmp	r3, #14
 800ac94:	d113      	bne.n	800acbe <_ZN3jlb12SignalSender14measurements_2Ev+0x7cc>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac9c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800aca0:	ee07 3a90 	vmov	s15, r3
 800aca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aca8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800acac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acb4:	edc7 7a00 	vstr	s15, [r7]
 800acb8:	783b      	ldrb	r3, [r7, #0]
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	e00e      	b.n	800acdc <_ZN3jlb12SignalSender14measurements_2Ev+0x7ea>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800acc4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800acc8:	ee07 3a90 	vmov	s15, r3
 800accc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acd4:	edc7 7a00 	vstr	s15, [r7]
 800acd8:	783b      	ldrb	r3, [r7, #0]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b0f      	cmp	r3, #15
 800acec:	d113      	bne.n	800ad16 <_ZN3jlb12SignalSender14measurements_2Ev+0x824>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800acf4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ad04:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad0c:	edc7 7a00 	vstr	s15, [r7]
 800ad10:	783b      	ldrb	r3, [r7, #0]
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	e00e      	b.n	800ad34 <_ZN3jlb12SignalSender14measurements_2Ev+0x842>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad1c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800ad20:	ee07 3a90 	vmov	s15, r3
 800ad24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad2c:	edc7 7a00 	vstr	s15, [r7]
 800ad30:	783b      	ldrb	r3, [r7, #0]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b10      	cmp	r3, #16
 800ad44:	d113      	bne.n	800ad6e <_ZN3jlb12SignalSender14measurements_2Ev+0x87c>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad4c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800ad50:	ee07 3a90 	vmov	s15, r3
 800ad54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ad5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad64:	edc7 7a00 	vstr	s15, [r7]
 800ad68:	783b      	ldrb	r3, [r7, #0]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	e00e      	b.n	800ad8c <_ZN3jlb12SignalSender14measurements_2Ev+0x89a>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad74:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800ad78:	ee07 3a90 	vmov	s15, r3
 800ad7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad84:	edc7 7a00 	vstr	s15, [r7]
 800ad88:	783b      	ldrb	r3, [r7, #0]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2b11      	cmp	r3, #17
 800ad9c:	d113      	bne.n	800adc6 <_ZN3jlb12SignalSender14measurements_2Ev+0x8d4>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ada4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800ada8:	ee07 3a90 	vmov	s15, r3
 800adac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adb0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800adb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adbc:	edc7 7a00 	vstr	s15, [r7]
 800adc0:	783b      	ldrb	r3, [r7, #0]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	e00e      	b.n	800ade4 <_ZN3jlb12SignalSender14measurements_2Ev+0x8f2>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800adcc:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800add0:	ee07 3a90 	vmov	s15, r3
 800add4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800addc:	edc7 7a00 	vstr	s15, [r7]
 800ade0:	783b      	ldrb	r3, [r7, #0]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	2b12      	cmp	r3, #18
 800adf4:	d113      	bne.n	800ae1e <_ZN3jlb12SignalSender14measurements_2Ev+0x92c>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800adfc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800ae00:	ee07 3a90 	vmov	s15, r3
 800ae04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ae0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae14:	edc7 7a00 	vstr	s15, [r7]
 800ae18:	783b      	ldrb	r3, [r7, #0]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	e00e      	b.n	800ae3c <_ZN3jlb12SignalSender14measurements_2Ev+0x94a>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae24:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800ae28:	ee07 3a90 	vmov	s15, r3
 800ae2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae34:	edc7 7a00 	vstr	s15, [r7]
 800ae38:	783b      	ldrb	r3, [r7, #0]
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	2b13      	cmp	r3, #19
 800ae4c:	d113      	bne.n	800ae76 <_ZN3jlb12SignalSender14measurements_2Ev+0x984>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae54:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800ae58:	ee07 3a90 	vmov	s15, r3
 800ae5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ae64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae6c:	edc7 7a00 	vstr	s15, [r7]
 800ae70:	783b      	ldrb	r3, [r7, #0]
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	e00e      	b.n	800ae94 <_ZN3jlb12SignalSender14measurements_2Ev+0x9a2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae7c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800ae80:	ee07 3a90 	vmov	s15, r3
 800ae84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8c:	edc7 7a00 	vstr	s15, [r7]
 800ae90:	783b      	ldrb	r3, [r7, #0]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	2b14      	cmp	r3, #20
 800aea4:	d113      	bne.n	800aece <_ZN3jlb12SignalSender14measurements_2Ev+0x9dc>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aeac:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800aeb0:	ee07 3a90 	vmov	s15, r3
 800aeb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeb8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aec4:	edc7 7a00 	vstr	s15, [r7]
 800aec8:	783b      	ldrb	r3, [r7, #0]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	e00e      	b.n	800aeec <_ZN3jlb12SignalSender14measurements_2Ev+0x9fa>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aed4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800aed8:	ee07 3a90 	vmov	s15, r3
 800aedc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee4:	edc7 7a00 	vstr	s15, [r7]
 800aee8:	783b      	ldrb	r3, [r7, #0]
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	2b15      	cmp	r3, #21
 800aefc:	d113      	bne.n	800af26 <_ZN3jlb12SignalSender14measurements_2Ev+0xa34>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af04:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800af14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af1c:	edc7 7a00 	vstr	s15, [r7]
 800af20:	783b      	ldrb	r3, [r7, #0]
 800af22:	b2db      	uxtb	r3, r3
 800af24:	e00e      	b.n	800af44 <_ZN3jlb12SignalSender14measurements_2Ev+0xa52>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af2c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800af30:	ee07 3a90 	vmov	s15, r3
 800af34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3c:	edc7 7a00 	vstr	s15, [r7]
 800af40:	783b      	ldrb	r3, [r7, #0]
 800af42:	b2db      	uxtb	r3, r3
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	2b16      	cmp	r3, #22
 800af54:	d113      	bne.n	800af7e <_ZN3jlb12SignalSender14measurements_2Ev+0xa8c>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af5c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800af60:	ee07 3a90 	vmov	s15, r3
 800af64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800af6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af74:	edc7 7a00 	vstr	s15, [r7]
 800af78:	783b      	ldrb	r3, [r7, #0]
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	e00e      	b.n	800af9c <_ZN3jlb12SignalSender14measurements_2Ev+0xaaa>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af84:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af94:	edc7 7a00 	vstr	s15, [r7]
 800af98:	783b      	ldrb	r3, [r7, #0]
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	2b17      	cmp	r3, #23
 800afac:	d113      	bne.n	800afd6 <_ZN3jlb12SignalSender14measurements_2Ev+0xae4>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afb4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800afc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afcc:	edc7 7a00 	vstr	s15, [r7]
 800afd0:	783b      	ldrb	r3, [r7, #0]
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	e00e      	b.n	800aff4 <_ZN3jlb12SignalSender14measurements_2Ev+0xb02>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afdc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800afe0:	ee07 3a90 	vmov	s15, r3
 800afe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afec:	edc7 7a00 	vstr	s15, [r7]
 800aff0:	783b      	ldrb	r3, [r7, #0]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2b18      	cmp	r3, #24
 800b004:	d113      	bne.n	800b02e <_ZN3jlb12SignalSender14measurements_2Ev+0xb3c>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b00c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b010:	ee07 3a90 	vmov	s15, r3
 800b014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b018:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b01c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b024:	edc7 7a00 	vstr	s15, [r7]
 800b028:	783b      	ldrb	r3, [r7, #0]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	e00e      	b.n	800b04c <_ZN3jlb12SignalSender14measurements_2Ev+0xb5a>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b034:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b038:	ee07 3a90 	vmov	s15, r3
 800b03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b044:	edc7 7a00 	vstr	s15, [r7]
 800b048:	783b      	ldrb	r3, [r7, #0]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	2b19      	cmp	r3, #25
 800b05c:	d113      	bne.n	800b086 <_ZN3jlb12SignalSender14measurements_2Ev+0xb94>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b064:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800b068:	ee07 3a90 	vmov	s15, r3
 800b06c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b070:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b074:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b07c:	edc7 7a00 	vstr	s15, [r7]
 800b080:	783b      	ldrb	r3, [r7, #0]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	e00e      	b.n	800b0a4 <_ZN3jlb12SignalSender14measurements_2Ev+0xbb2>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b08c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800b090:	ee07 3a90 	vmov	s15, r3
 800b094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b09c:	edc7 7a00 	vstr	s15, [r7]
 800b0a0:	783b      	ldrb	r3, [r7, #0]
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b1a      	cmp	r3, #26
 800b0b4:	d113      	bne.n	800b0de <_ZN3jlb12SignalSender14measurements_2Ev+0xbec>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0bc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b0cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0d4:	edc7 7a00 	vstr	s15, [r7]
 800b0d8:	783b      	ldrb	r3, [r7, #0]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	e00e      	b.n	800b0fc <_ZN3jlb12SignalSender14measurements_2Ev+0xc0a>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0e4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b0e8:	ee07 3a90 	vmov	s15, r3
 800b0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f4:	edc7 7a00 	vstr	s15, [r7]
 800b0f8:	783b      	ldrb	r3, [r7, #0]
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	2b1b      	cmp	r3, #27
 800b10c:	d113      	bne.n	800b136 <_ZN3jlb12SignalSender14measurements_2Ev+0xc44>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b114:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b118:	ee07 3a90 	vmov	s15, r3
 800b11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b120:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b124:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b12c:	edc7 7a00 	vstr	s15, [r7]
 800b130:	783b      	ldrb	r3, [r7, #0]
 800b132:	b2db      	uxtb	r3, r3
 800b134:	e00e      	b.n	800b154 <_ZN3jlb12SignalSender14measurements_2Ev+0xc62>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b13c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b140:	ee07 3a90 	vmov	s15, r3
 800b144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b14c:	edc7 7a00 	vstr	s15, [r7]
 800b150:	783b      	ldrb	r3, [r7, #0]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	2b1c      	cmp	r3, #28
 800b164:	d113      	bne.n	800b18e <_ZN3jlb12SignalSender14measurements_2Ev+0xc9c>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b16c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b170:	ee07 3a90 	vmov	s15, r3
 800b174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b178:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b17c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b184:	edc7 7a00 	vstr	s15, [r7]
 800b188:	783b      	ldrb	r3, [r7, #0]
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	e00e      	b.n	800b1ac <_ZN3jlb12SignalSender14measurements_2Ev+0xcba>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b194:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b198:	ee07 3a90 	vmov	s15, r3
 800b19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1a4:	edc7 7a00 	vstr	s15, [r7]
 800b1a8:	783b      	ldrb	r3, [r7, #0]
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	2b1d      	cmp	r3, #29
 800b1bc:	d113      	bne.n	800b1e6 <_ZN3jlb12SignalSender14measurements_2Ev+0xcf4>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b1c4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800b1c8:	ee07 3a90 	vmov	s15, r3
 800b1cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b1d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1dc:	edc7 7a00 	vstr	s15, [r7]
 800b1e0:	783b      	ldrb	r3, [r7, #0]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	e00e      	b.n	800b204 <_ZN3jlb12SignalSender14measurements_2Ev+0xd12>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b1ec:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800b1f0:	ee07 3a90 	vmov	s15, r3
 800b1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1fc:	edc7 7a00 	vstr	s15, [r7]
 800b200:	783b      	ldrb	r3, [r7, #0]
 800b202:	b2db      	uxtb	r3, r3
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	2b1e      	cmp	r3, #30
 800b214:	d113      	bne.n	800b23e <_ZN3jlb12SignalSender14measurements_2Ev+0xd4c>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b21c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b228:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b22c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b234:	edc7 7a00 	vstr	s15, [r7]
 800b238:	783b      	ldrb	r3, [r7, #0]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	e00e      	b.n	800b25c <_ZN3jlb12SignalSender14measurements_2Ev+0xd6a>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b244:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800b248:	ee07 3a90 	vmov	s15, r3
 800b24c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b254:	edc7 7a00 	vstr	s15, [r7]
 800b258:	783b      	ldrb	r3, [r7, #0]
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	2b1f      	cmp	r3, #31
 800b26c:	d113      	bne.n	800b296 <_ZN3jlb12SignalSender14measurements_2Ev+0xda4>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b274:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800b278:	ee07 3a90 	vmov	s15, r3
 800b27c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b280:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b284:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b28c:	edc7 7a00 	vstr	s15, [r7]
 800b290:	783b      	ldrb	r3, [r7, #0]
 800b292:	b2db      	uxtb	r3, r3
 800b294:	e00e      	b.n	800b2b4 <_ZN3jlb12SignalSender14measurements_2Ev+0xdc2>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b29c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800b2a0:	ee07 3a90 	vmov	s15, r3
 800b2a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ac:	edc7 7a00 	vstr	s15, [r7]
 800b2b0:	783b      	ldrb	r3, [r7, #0]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
#endif

            char    data[measurements_2_DLC + 2] = {0};
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
 800b2be:	f107 0310 	add.w	r3, r7, #16
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_2_IDE;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_2_DLC;
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_2_CANID;
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_2_DLC;
 800b2d4:	2308      	movs	r3, #8
 800b2d6:	737b      	strb	r3, [r7, #13]
            Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f103 0020 	add.w	r0, r3, #32
 800b2de:	f107 010c 	add.w	r1, r7, #12
 800b2e2:	3102      	adds	r1, #2
 800b2e4:	f107 030b 	add.w	r3, r7, #11
 800b2e8:	f107 020a 	add.w	r2, r7, #10
 800b2ec:	f7f6 f8e0 	bl	80014b0 <Pack_measurements_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_2_DLC + 2);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f001 fbc4 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b302:	4603      	mov	r3, r0
 800b304:	61fb      	str	r3, [r7, #28]
 800b306:	f107 021c 	add.w	r2, r7, #28
 800b30a:	f107 0318 	add.w	r3, r7, #24
 800b30e:	4611      	mov	r1, r2
 800b310:	4618      	mov	r0, r3
 800b312:	f001 fc5c 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b316:	f107 030c 	add.w	r3, r7, #12
 800b31a:	330a      	adds	r3, #10
 800b31c:	f107 020c 	add.w	r2, r7, #12
 800b320:	69b9      	ldr	r1, [r7, #24]
 800b322:	4620      	mov	r0, r4
 800b324:	f001 fc64 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b328:	bf00      	nop
 800b32a:	3724      	adds	r7, #36	; 0x24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd90      	pop	{r4, r7, pc}

0800b330 <_ZN3jlb12SignalSender14measurements_3Ev>:

        void measurements_3()
 800b330:	b590      	push	{r4, r7, lr}
 800b332:	b089      	sub	sp, #36	; 0x24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	4618      	mov	r0, r3
 800b342:	f7f5 f8f3 	bl	800052c <__aeabi_f2d>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	6879      	ldr	r1, [r7, #4]
 800b34c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
            jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b356:	6a1b      	ldr	r3, [r3, #32]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7f5 f8e7 	bl	800052c <__aeabi_f2d>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	6879      	ldr	r1, [r7, #4]
 800b364:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	4618      	mov	r0, r3
 800b372:	f7f5 f8db 	bl	800052c <__aeabi_f2d>
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
 800b37a:	6879      	ldr	r1, [r7, #4]
 800b37c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

            char    data[measurements_2_DLC + 2] = {0};
 800b380:	2300      	movs	r3, #0
 800b382:	60fb      	str	r3, [r7, #12]
 800b384:	f107 0310 	add.w	r3, r7, #16
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_3_IDE;
 800b38e:	2300      	movs	r3, #0
 800b390:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_3_DLC;
 800b392:	2308      	movs	r3, #8
 800b394:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_3_CANID;
 800b396:	2303      	movs	r3, #3
 800b398:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_3_DLC;
 800b39a:	2308      	movs	r3, #8
 800b39c:	737b      	strb	r3, [r7, #13]
            Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b3a4:	f107 010c 	add.w	r1, r7, #12
 800b3a8:	3102      	adds	r1, #2
 800b3aa:	f107 030b 	add.w	r3, r7, #11
 800b3ae:	f107 020a 	add.w	r2, r7, #10
 800b3b2:	f7f6 f9c5 	bl	8001740 <Pack_measurements_3_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_3_DLC + 2);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f001 fb61 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	61fb      	str	r3, [r7, #28]
 800b3cc:	f107 021c 	add.w	r2, r7, #28
 800b3d0:	f107 0318 	add.w	r3, r7, #24
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f001 fbf9 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b3dc:	f107 030c 	add.w	r3, r7, #12
 800b3e0:	330a      	adds	r3, #10
 800b3e2:	f107 020c 	add.w	r2, r7, #12
 800b3e6:	69b9      	ldr	r1, [r7, #24]
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f001 fc01 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b3ee:	bf00      	nop
 800b3f0:	3724      	adds	r7, #36	; 0x24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd90      	pop	{r4, r7, pc}

0800b3f6 <_ZN3jlb12SignalSender14measurements_4Ev>:

        void measurements_4()
 800b3f6:	b590      	push	{r4, r7, lr}
 800b3f8:	b089      	sub	sp, #36	; 0x24
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_4.linear_acceleration_x_phys = odometry.meas_lin_acc_x;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b406:	4618      	mov	r0, r3
 800b408:	f7f5 f890 	bl	800052c <__aeabi_f2d>
 800b40c:	4602      	mov	r2, r0
 800b40e:	460b      	mov	r3, r1
 800b410:	6879      	ldr	r1, [r7, #4]
 800b412:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
            jlb_rx.measurements_4.linear_acceleration_y_phys = odometry.meas_lin_acc_y;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41e:	4618      	mov	r0, r3
 800b420:	f7f5 f884 	bl	800052c <__aeabi_f2d>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	6879      	ldr	r1, [r7, #4]
 800b42a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
            jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b436:	4618      	mov	r0, r3
 800b438:	f7f5 f878 	bl	800052c <__aeabi_f2d>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

            char    data[measurements_3_DLC + 2] = {0};
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	f107 0310 	add.w	r3, r7, #16
 800b44e:	2200      	movs	r2, #0
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_4_IDE;
 800b454:	2300      	movs	r3, #0
 800b456:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_4_DLC;
 800b458:	2308      	movs	r3, #8
 800b45a:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_4_CANID;
 800b45c:	2304      	movs	r3, #4
 800b45e:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_4_DLC;
 800b460:	2308      	movs	r3, #8
 800b462:	737b      	strb	r3, [r7, #13]
            Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b46a:	f107 010c 	add.w	r1, r7, #12
 800b46e:	3102      	adds	r1, #2
 800b470:	f107 030b 	add.w	r3, r7, #11
 800b474:	f107 020a 	add.w	r2, r7, #10
 800b478:	f7f6 fa22 	bl	80018c0 <Pack_measurements_4_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_4_DLC + 2);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b488:	4618      	mov	r0, r3
 800b48a:	f001 fafe 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b48e:	4603      	mov	r3, r0
 800b490:	61fb      	str	r3, [r7, #28]
 800b492:	f107 021c 	add.w	r2, r7, #28
 800b496:	f107 0318 	add.w	r3, r7, #24
 800b49a:	4611      	mov	r1, r2
 800b49c:	4618      	mov	r0, r3
 800b49e:	f001 fb96 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b4a2:	f107 030c 	add.w	r3, r7, #12
 800b4a6:	330a      	adds	r3, #10
 800b4a8:	f107 020c 	add.w	r2, r7, #12
 800b4ac:	69b9      	ldr	r1, [r7, #24]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f001 fb9e 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b4b4:	bf00      	nop
 800b4b6:	3724      	adds	r7, #36	; 0x24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd90      	pop	{r4, r7, pc}

0800b4bc <_ZN3jlb12SignalSender14measurements_5Ev>:

        void measurements_5()
 800b4bc:	b590      	push	{r4, r7, lr}
 800b4be:	b089      	sub	sp, #36	; 0x24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_5.duty_cycle_phys    = measurements.duty_cycle;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f5 f82d 	bl	800052c <__aeabi_f2d>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	6879      	ldr	r1, [r7, #4]
 800b4d8:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
            jlb_rx.measurements_5.motor_current_phys = measurements.motor_current;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7f5 f821 	bl	800052c <__aeabi_f2d>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	6879      	ldr	r1, [r7, #4]
 800b4f0:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
            jlb_rx.measurements_5.object_range_phys  = measurements.object_range;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7f5 f815 	bl	800052c <__aeabi_f2d>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
            jlb_rx.measurements_5.wheel_rpm_phys     = measurements.wheel_rpm;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	4618      	mov	r0, r3
 800b516:	f7f5 f809 	bl	800052c <__aeabi_f2d>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

            char    data[measurements_4_DLC + 2] = {0};
 800b524:	2300      	movs	r3, #0
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	f107 0310 	add.w	r3, r7, #16
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_5_IDE;
 800b532:	2300      	movs	r3, #0
 800b534:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_5_DLC;
 800b536:	2308      	movs	r3, #8
 800b538:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_5_CANID;
 800b53a:	2305      	movs	r3, #5
 800b53c:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_5_DLC;
 800b53e:	2308      	movs	r3, #8
 800b540:	737b      	strb	r3, [r7, #13]
            Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800b548:	f107 010c 	add.w	r1, r7, #12
 800b54c:	3102      	adds	r1, #2
 800b54e:	f107 030b 	add.w	r3, r7, #11
 800b552:	f107 020a 	add.w	r2, r7, #10
 800b556:	f7f6 fa73 	bl	8001a40 <Pack_measurements_5_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_5_DLC + 2);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b566:	4618      	mov	r0, r3
 800b568:	f001 fa8f 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b56c:	4603      	mov	r3, r0
 800b56e:	61fb      	str	r3, [r7, #28]
 800b570:	f107 021c 	add.w	r2, r7, #28
 800b574:	f107 0318 	add.w	r3, r7, #24
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f001 fb27 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b580:	f107 030c 	add.w	r3, r7, #12
 800b584:	330a      	adds	r3, #10
 800b586:	f107 020c 	add.w	r2, r7, #12
 800b58a:	69b9      	ldr	r1, [r7, #24]
 800b58c:	4620      	mov	r0, r4
 800b58e:	f001 fb2f 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b592:	bf00      	nop
 800b594:	3724      	adds	r7, #36	; 0x24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd90      	pop	{r4, r7, pc}

0800b59a <_ZN3jlb12SignalSender10odometry_1Ev>:

        void odometry_1()
 800b59a:	b590      	push	{r4, r7, lr}
 800b59c:	b089      	sub	sp, #36	; 0x24
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.odometry_1.position_x_phys  = odometry.x_t;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7f4 ffbe 	bl	800052c <__aeabi_f2d>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
            jlb_rx.odometry_1.position_y_phys  = odometry.y_t;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f4 ffb2 	bl	800052c <__aeabi_f2d>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	6879      	ldr	r1, [r7, #4]
 800b5ce:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
            jlb_rx.odometry_1.orientation_phys = odometry.theta_t;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7f4 ffa6 	bl	800052c <__aeabi_f2d>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	6879      	ldr	r1, [r7, #4]
 800b5e6:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

            char    data[odometry_1_DLC + 2] = {0};
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	f107 0310 	add.w	r3, r7, #16
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	809a      	strh	r2, [r3, #4]
            uint8_t ide                      = odometry_1_IDE;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                      = odometry_1_DLC;
 800b5fc:	2308      	movs	r3, #8
 800b5fe:	72bb      	strb	r3, [r7, #10]
            data[0]                          = odometry_1_CANID;
 800b600:	2311      	movs	r3, #17
 800b602:	733b      	strb	r3, [r7, #12]
            data[1]                          = odometry_1_DLC;
 800b604:	2308      	movs	r3, #8
 800b606:	737b      	strb	r3, [r7, #13]
            Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 800b60e:	f107 010c 	add.w	r1, r7, #12
 800b612:	3102      	adds	r1, #2
 800b614:	f107 030b 	add.w	r3, r7, #11
 800b618:	f107 020a 	add.w	r2, r7, #10
 800b61c:	f7f6 faf4 	bl	8001c08 <Pack_odometry_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_1_DLC + 2);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b62c:	4618      	mov	r0, r3
 800b62e:	f001 fa2c 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b632:	4603      	mov	r3, r0
 800b634:	61fb      	str	r3, [r7, #28]
 800b636:	f107 021c 	add.w	r2, r7, #28
 800b63a:	f107 0318 	add.w	r3, r7, #24
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f001 fac4 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b646:	f107 030c 	add.w	r3, r7, #12
 800b64a:	330a      	adds	r3, #10
 800b64c:	f107 020c 	add.w	r2, r7, #12
 800b650:	69b9      	ldr	r1, [r7, #24]
 800b652:	4620      	mov	r0, r4
 800b654:	f001 facc 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b658:	bf00      	nop
 800b65a:	3724      	adds	r7, #36	; 0x24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd90      	pop	{r4, r7, pc}

0800b660 <_ZN3jlb12SignalSender10odometry_2Ev>:

        void odometry_2()
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b089      	sub	sp, #36	; 0x24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.odometry_2.linear_velocity_x_phys  = odometry.vx_t;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4618      	mov	r0, r3
 800b672:	f7f4 ff5b 	bl	800052c <__aeabi_f2d>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
            jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7f4 ff4f 	bl	800052c <__aeabi_f2d>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

            char    data[odometry_2_DLC + 2] = {0};
 800b698:	2300      	movs	r3, #0
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	f107 0310 	add.w	r3, r7, #16
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	809a      	strh	r2, [r3, #4]
            uint8_t ide                      = odometry_2_IDE;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                      = odometry_2_DLC;
 800b6aa:	2308      	movs	r3, #8
 800b6ac:	72bb      	strb	r3, [r7, #10]
            data[0]                          = odometry_2_CANID;
 800b6ae:	2312      	movs	r3, #18
 800b6b0:	733b      	strb	r3, [r7, #12]
            data[1]                          = odometry_2_DLC;
 800b6b2:	2308      	movs	r3, #8
 800b6b4:	737b      	strb	r3, [r7, #13]
            Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800b6bc:	f107 010c 	add.w	r1, r7, #12
 800b6c0:	3102      	adds	r1, #2
 800b6c2:	f107 030b 	add.w	r3, r7, #11
 800b6c6:	f107 020a 	add.w	r2, r7, #10
 800b6ca:	f7f6 fb65 	bl	8001d98 <Pack_odometry_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_2_DLC + 2);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 f9d5 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	f107 021c 	add.w	r2, r7, #28
 800b6e8:	f107 0318 	add.w	r3, r7, #24
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f001 fa6d 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b6f4:	f107 030c 	add.w	r3, r7, #12
 800b6f8:	330a      	adds	r3, #10
 800b6fa:	f107 020c 	add.w	r2, r7, #12
 800b6fe:	69b9      	ldr	r1, [r7, #24]
 800b700:	4620      	mov	r0, r4
 800b702:	f001 fa75 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b706:	bf00      	nop
 800b708:	3724      	adds	r7, #36	; 0x24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd90      	pop	{r4, r7, pc}

0800b70e <_ZN3jlb12SignalSender7logic_1Ev>:

        void logic_1()
 800b70e:	b590      	push	{r4, r7, lr}
 800b710:	b089      	sub	sp, #36	; 0x24
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_1.target_angle_phys      = controller.target_angle;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f4 ff04 	bl	800052c <__aeabi_f2d>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
            jlb_rx.logic_1.target_speed_phys      = controller.target_speed;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b734:	69db      	ldr	r3, [r3, #28]
 800b736:	4618      	mov	r0, r3
 800b738:	f7f4 fef8 	bl	800052c <__aeabi_f2d>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
            jlb_rx.logic_1.cross_track_error_phys = controller.cross_track_error;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	4618      	mov	r0, r3
 800b750:	f7f4 feec 	bl	800052c <__aeabi_f2d>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
            jlb_rx.logic_1.heading_error_phys     = controller.heading_error;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b766:	4618      	mov	r0, r3
 800b768:	f7f4 fee0 	bl	800052c <__aeabi_f2d>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	6879      	ldr	r1, [r7, #4]
 800b772:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

            char    data[logic_1_DLC + 2] = {0};
 800b776:	2300      	movs	r3, #0
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	f107 0310 	add.w	r3, r7, #16
 800b77e:	2200      	movs	r2, #0
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_1_IDE;
 800b784:	2300      	movs	r3, #0
 800b786:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_1_DLC;
 800b788:	2308      	movs	r3, #8
 800b78a:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_1_CANID;
 800b78c:	2321      	movs	r3, #33	; 0x21
 800b78e:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_1_DLC;
 800b790:	2308      	movs	r3, #8
 800b792:	737b      	strb	r3, [r7, #13]
            Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f503 7098 	add.w	r0, r3, #304	; 0x130
 800b79a:	f107 010c 	add.w	r1, r7, #12
 800b79e:	3102      	adds	r1, #2
 800b7a0:	f107 030b 	add.w	r3, r7, #11
 800b7a4:	f107 020a 	add.w	r2, r7, #10
 800b7a8:	f7f6 fb8a 	bl	8001ec0 <Pack_logic_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_1_DLC + 2);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f001 f966 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	61fb      	str	r3, [r7, #28]
 800b7c2:	f107 021c 	add.w	r2, r7, #28
 800b7c6:	f107 0318 	add.w	r3, r7, #24
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f001 f9fe 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b7d2:	f107 030c 	add.w	r3, r7, #12
 800b7d6:	330a      	adds	r3, #10
 800b7d8:	f107 020c 	add.w	r2, r7, #12
 800b7dc:	69b9      	ldr	r1, [r7, #24]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f001 fa06 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b7e4:	bf00      	nop
 800b7e6:	3724      	adds	r7, #36	; 0x24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd90      	pop	{r4, r7, pc}

0800b7ec <_ZN3jlb12SignalSender7logic_2Ev>:

        void logic_2()
 800b7ec:	b590      	push	{r4, r7, lr}
 800b7ee:	b089      	sub	sp, #36	; 0x24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_2.distance_traveled_phys = odometry.distance_traveled_since_checkpoint;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7f4 fe95 	bl	800052c <__aeabi_f2d>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
            jlb_rx.logic_2.labyrinth_state        = static_cast<uint8_t>(as_state.labyrinth_state);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	b2da      	uxtb	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
            jlb_rx.logic_2.fast_state             = static_cast<uint8_t>(as_state.fast_state);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	b2da      	uxtb	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
            jlb_rx.logic_2.next_node              = as_state.next_node;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b832:	7f9a      	ldrb	r2, [r3, #30]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
            jlb_rx.logic_2.previous_node          = as_state.previous_node;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b840:	7f5a      	ldrb	r2, [r3, #29]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b852:	b2da      	uxtb	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
            jlb_rx.logic_2.mission                = static_cast<uint8_t>(as_state.mission);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	b2da      	uxtb	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

            char    data[logic_2_DLC + 2] = {0};
 800b86a:	2300      	movs	r3, #0
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	f107 0310 	add.w	r3, r7, #16
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]
 800b876:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_2_IDE;
 800b878:	2300      	movs	r3, #0
 800b87a:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_2_DLC;
 800b87c:	2308      	movs	r3, #8
 800b87e:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_2_CANID;
 800b880:	2322      	movs	r3, #34	; 0x22
 800b882:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_2_DLC;
 800b884:	2308      	movs	r3, #8
 800b886:	737b      	strb	r3, [r7, #13]
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f503 70b8 	add.w	r0, r3, #368	; 0x170
 800b88e:	f107 010c 	add.w	r1, r7, #12
 800b892:	3102      	adds	r1, #2
 800b894:	f107 030b 	add.w	r3, r7, #11
 800b898:	f107 020a 	add.w	r2, r7, #10
 800b89c:	f7f6 fc14 	bl	80020c8 <Pack_logic_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_2_DLC + 2);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f001 f8ec 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	61fb      	str	r3, [r7, #28]
 800b8b6:	f107 021c 	add.w	r2, r7, #28
 800b8ba:	f107 0318 	add.w	r3, r7, #24
 800b8be:	4611      	mov	r1, r2
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 f984 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b8c6:	f107 030c 	add.w	r3, r7, #12
 800b8ca:	330a      	adds	r3, #10
 800b8cc:	f107 020c 	add.w	r2, r7, #12
 800b8d0:	69b9      	ldr	r1, [r7, #24]
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f001 f98c 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b8d8:	bf00      	nop
 800b8da:	3724      	adds	r7, #36	; 0x24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd90      	pop	{r4, r7, pc}

0800b8e0 <_ZN3jlb12SignalSender6logic3Ev>:

        void logic3()
 800b8e0:	b590      	push	{r4, r7, lr}
 800b8e2:	b089      	sub	sp, #36	; 0x24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_3.ang_error_norm_phys      = controller.ang_error_norm;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7f4 fe1b 	bl	800052c <__aeabi_f2d>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	6879      	ldr	r1, [r7, #4]
 800b8fc:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
            jlb_rx.logic_3.dist_error_norm_phys     = controller.dist_error_norm;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b908:	4618      	mov	r0, r3
 800b90a:	f7f4 fe0f 	bl	800052c <__aeabi_f2d>
 800b90e:	4602      	mov	r2, r0
 800b910:	460b      	mov	r3, r1
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
            jlb_rx.logic_3.line_position_rear_phys  = controller.line_position_rear;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	4618      	mov	r0, r3
 800b922:	f7f4 fe03 	bl	800052c <__aeabi_f2d>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	6879      	ldr	r1, [r7, #4]
 800b92c:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
            jlb_rx.logic_3.line_position_front_phys = controller.line_position_front;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	4618      	mov	r0, r3
 800b93a:	f7f4 fdf7 	bl	800052c <__aeabi_f2d>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	6879      	ldr	r1, [r7, #4]
 800b944:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
            jlb_rx.logic_3.at_cross_section         = as_state.at_cross_section;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b94e:	7c5b      	ldrb	r3, [r3, #17]
 800b950:	461a      	mov	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
            jlb_rx.logic_3.under_gate               = as_state.under_gate;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b95e:	7c1b      	ldrb	r3, [r3, #16]
 800b960:	461a      	mov	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1

            char    data[logic_3_DLC + 2] = {0};
 800b968:	2300      	movs	r3, #0
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	f107 0310 	add.w	r3, r7, #16
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_3_IDE;
 800b976:	2300      	movs	r3, #0
 800b978:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_3_DLC;
 800b97a:	2308      	movs	r3, #8
 800b97c:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_3_CANID;
 800b97e:	2323      	movs	r3, #35	; 0x23
 800b980:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_3_DLC;
 800b982:	2308      	movs	r3, #8
 800b984:	737b      	strb	r3, [r7, #13]
            Pack_logic_3_jlb(&jlb_rx.logic_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 800b98c:	f107 010c 	add.w	r1, r7, #12
 800b990:	3102      	adds	r1, #2
 800b992:	f107 030b 	add.w	r3, r7, #11
 800b996:	f107 020a 	add.w	r2, r7, #10
 800b99a:	f7f6 fc1d 	bl	80021d8 <Pack_logic_3_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_3_DLC + 2);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 f86d 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	61fb      	str	r3, [r7, #28]
 800b9b4:	f107 021c 	add.w	r2, r7, #28
 800b9b8:	f107 0318 	add.w	r3, r7, #24
 800b9bc:	4611      	mov	r1, r2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f001 f905 	bl	800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b9c4:	f107 030c 	add.w	r3, r7, #12
 800b9c8:	330a      	adds	r3, #10
 800b9ca:	f107 020c 	add.w	r2, r7, #12
 800b9ce:	69b9      	ldr	r1, [r7, #24]
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f001 f90d 	bl	800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b9d6:	bf00      	nop
 800b9d8:	3724      	adds	r7, #36	; 0x24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd90      	pop	{r4, r7, pc}

0800b9de <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
namespace jlb
{
    class Logic
    {
    public:
        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 800b9de:	b5b0      	push	{r4, r5, r7, lr}
 800b9e0:	b088      	sub	sp, #32
 800b9e2:	af02      	add	r7, sp, #8
 800b9e4:	6178      	str	r0, [r7, #20]
 800b9e6:	6139      	str	r1, [r7, #16]
 800b9e8:	ed87 0a03 	vstr	s0, [r7, #12]
 800b9ec:	edc7 0a02 	vstr	s1, [r7, #8]
 800b9f0:	ed87 1a01 	vstr	s2, [r7, #4]
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	ed97 1a01 	vldr	s2, [r7, #4]
 800b9fa:	edd7 0a02 	vldr	s1, [r7, #8]
 800b9fe:	ed97 0a03 	vldr	s0, [r7, #12]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fc ff57 	bl	80088b6 <_ZN3jlb8OdometryC1Efff>
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	3388      	adds	r3, #136	; 0x88
 800ba0c:	6939      	ldr	r1, [r7, #16]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f8 feb2 	bl	8004778 <_ZN3jlb10ControllerC1ENS_9DirectionE>
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7f9 fce4 	bl	80053e8 <_ZN3jlb5GraphC1Ev>
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800ba26:	6979      	ldr	r1, [r7, #20]
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ba34:	f7fd fba3 	bl	800917e <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 800ba3e:	6979      	ldr	r1, [r7, #20]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 800ba58:	9201      	str	r2, [sp, #4]
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	462b      	mov	r3, r5
 800ba5e:	4622      	mov	r2, r4
 800ba60:	f7fd feea 	bl	8009838 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bdb0      	pop	{r4, r5, r7, pc}

0800ba6e <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b090      	sub	sp, #64	; 0x40
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fd f885 	bl	8008b88 <_ZN3jlb8Odometry11update_odomEv>
 800ba7e:	eeb0 6a40 	vmov.f32	s12, s0
 800ba82:	eef0 6a60 	vmov.f32	s13, s1
 800ba86:	eeb0 7a41 	vmov.f32	s14, s2
 800ba8a:	eef0 7a61 	vmov.f32	s15, s3
 800ba8e:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 800ba92:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800ba96:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800ba9a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            controller.set_current_velocity(vx);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3388      	adds	r3, #136	; 0x88
            auto [vx, x, y, theta] = odometry.update_odom();
 800baa2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
            controller.set_current_velocity(vx);
 800baa6:	eeb0 0a67 	vmov.f32	s0, s15
 800baaa:	4618      	mov	r0, r3
 800baac:	f7f9 fbb7 	bl	800521e <_ZN3jlb10Controller20set_current_velocityEf>

            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 800bab6:	f107 0318 	add.w	r3, r7, #24
 800baba:	4611      	mov	r1, r2
 800babc:	4618      	mov	r0, r3
 800babe:	f7fd fbc3 	bl	8009248 <_ZN3jlb7ASState6updateEv>
            controller.set_reference_speed(reference_speed);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3388      	adds	r3, #136	; 0x88
            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800bac6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_reference_speed(reference_speed);
 800baca:	eeb0 0a67 	vmov.f32	s0, s15
 800bace:	4618      	mov	r0, r3
 800bad0:	f7f9 fbca 	bl	8005268 <_ZN3jlb10Controller19set_reference_speedEf>

            auto [target_angle, target_speed] = controller.update();
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3388      	adds	r3, #136	; 0x88
 800bad8:	4618      	mov	r0, r3
 800bada:	f7f9 fb25 	bl	8005128 <_ZN3jlb10Controller6updateEv>
 800bade:	eeb0 7a40 	vmov.f32	s14, s0
 800bae2:	eef0 7a60 	vmov.f32	s15, s1
 800bae6:	ed87 7a04 	vstr	s14, [r7, #16]
 800baea:	edc7 7a05 	vstr	s15, [r7, #20]
 800baee:	693b      	ldr	r3, [r7, #16]
            return ControlSignal{target_angle, target_speed};
 800baf0:	63bb      	str	r3, [r7, #56]	; 0x38
            auto [target_angle, target_speed] = controller.update();
 800baf2:	697b      	ldr	r3, [r7, #20]
            return ControlSignal{target_angle, target_speed};
 800baf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bafa:	ee07 2a10 	vmov	s14, r2
 800bafe:	ee07 3a90 	vmov	s15, r3
        }
 800bb02:	eeb0 0a47 	vmov.f32	s0, s14
 800bb06:	eef0 0a67 	vmov.f32	s1, s15
 800bb0a:	3740      	adds	r7, #64	; 0x40
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 800bb10:	b590      	push	{r4, r7, lr}
 800bb12:	b089      	sub	sp, #36	; 0x24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
        {
            as_state.current_number_of_lines = static_cast<uint8_t>(line_positions_front_.size());
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7f7 ff5e 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800bb22:	4603      	mov	r3, r0
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
            controller.set_detection_front(detection_front_, line_positions_front_);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800bb32:	f107 0314 	add.w	r3, r7, #20
 800bb36:	6879      	ldr	r1, [r7, #4]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 fb7b 	bl	800c234 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	461a      	mov	r2, r3
 800bb44:	68b9      	ldr	r1, [r7, #8]
 800bb46:	4620      	mov	r0, r4
 800bb48:	f7f9 fb23 	bl	8005192 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 800bb4c:	f107 0314 	add.w	r3, r7, #20
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f7 fca5 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
        }
 800bb56:	bf00      	nop
 800bb58:	3724      	adds	r7, #36	; 0x24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd90      	pop	{r4, r7, pc}

0800bb5e <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>:
        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_) { controller.set_detection_rear(detection_rear_, line_positions_rear_); }
 800bb5e:	b590      	push	{r4, r7, lr}
 800bb60:	b089      	sub	sp, #36	; 0x24
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	60b9      	str	r1, [r7, #8]
 800bb68:	607a      	str	r2, [r7, #4]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800bb70:	f107 0314 	add.w	r3, r7, #20
 800bb74:	6879      	ldr	r1, [r7, #4]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 fb5c 	bl	800c234 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800bb7c:	f107 0314 	add.w	r3, r7, #20
 800bb80:	461a      	mov	r2, r3
 800bb82:	68b9      	ldr	r1, [r7, #8]
 800bb84:	4620      	mov	r0, r4
 800bb86:	f7f9 fb27 	bl	80051d8 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 800bb8a:	f107 0314 	add.w	r3, r7, #20
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7f7 fc86 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 800bb94:	bf00      	nop
 800bb96:	3724      	adds	r7, #36	; 0x24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd90      	pop	{r4, r7, pc}

0800bb9c <_ZN3jlb5Logic12imu_callbackEf>:
        void set_under_gate(const bool under_gate_) { as_state.under_gate = under_gate_; }
        void set_at_cross_section(const bool at_cross_section_) { as_state.at_cross_section = at_cross_section_; }
        void imu_callback(const float yaw_rate_) { odometry.imu_callback(yaw_rate_); }
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	ed87 0a00 	vstr	s0, [r7]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	ed97 0a00 	vldr	s0, [r7]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fc ff7a 	bl	8008aa8 <_ZN3jlb8Odometry12imu_callbackEf>
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <_ZN3jlb5Logic12rpm_callbackEf>:
        void rpm_callback(const float motor_rpm_) { odometry.rpm_callback(motor_rpm_); }
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	ed87 0a00 	vstr	s0, [r7]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	ed97 0a00 	vldr	s0, [r7]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fc feda 	bl	8008988 <_ZN3jlb8Odometry12rpm_callbackEf>
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <_ZN3jlb5Logic16set_object_rangeEf>:
        void set_object_range(const float object_range_) { controller.set_object_range(object_range_); }
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	ed87 0a00 	vstr	s0, [r7]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3388      	adds	r3, #136	; 0x88
 800bbec:	ed97 0a00 	vldr	s0, [r7]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f9 fabf 	bl	8005174 <_ZN3jlb10Controller16set_object_rangeEf>
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>:
        void set_states(const CompositeState state_) { as_state.set_states(state_); }
 800bbfe:	b084      	sub	sp, #16
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	f107 0014 	add.w	r0, r7, #20
 800bc0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	f107 0314 	add.w	r3, r7, #20
 800bc1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc20:	f7fd faee 	bl	8009200 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc2e:	b004      	add	sp, #16
 800bc30:	4770      	bx	lr

0800bc32 <_ZN3jlb5Logic14send_telemetryEv>:
        void send_telemetry() { signal_sender.send_telemetry(); }
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b082      	sub	sp, #8
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fd fe2e 	bl	80098a2 <_ZN3jlb12SignalSender14send_telemetryEv>
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <_ZN3jlb5Logic16set_measurementsERK12Measurements>:
        void set_measurements(const Measurements &measurements_) { measurements = measurements_; }
 800bc4e:	b490      	push	{r4, r7}
 800bc50:	b082      	sub	sp, #8
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 800bc60:	4613      	mov	r3, r2
 800bc62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc68:	bf00      	nop
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bc90      	pop	{r4, r7}
 800bc70:	4770      	bx	lr

0800bc72 <_ZN3jlb5Logic12get_odometryEv>:
        Odom get_odometry() { return {odometry.vx_t, odometry.x_t, odometry.y_t, odometry.theta_t}; }
 800bc72:	b480      	push	{r7}
 800bc74:	b08b      	sub	sp, #44	; 0x2c
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6178      	str	r0, [r7, #20]
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	61bb      	str	r3, [r7, #24]
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	61fb      	str	r3, [r7, #28]
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	623b      	str	r3, [r7, #32]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	627b      	str	r3, [r7, #36]	; 0x24
 800bc92:	69b8      	ldr	r0, [r7, #24]
 800bc94:	69f9      	ldr	r1, [r7, #28]
 800bc96:	6a3a      	ldr	r2, [r7, #32]
 800bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9a:	ee06 0a10 	vmov	s12, r0
 800bc9e:	ee06 1a90 	vmov	s13, r1
 800bca2:	ee07 2a10 	vmov	s14, r2
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eeb0 0a46 	vmov.f32	s0, s12
 800bcae:	eef0 0a66 	vmov.f32	s1, s13
 800bcb2:	eeb0 1a47 	vmov.f32	s2, s14
 800bcb6:	eef0 1a67 	vmov.f32	s3, s15
 800bcba:	372c      	adds	r7, #44	; 0x2c
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <_Z19RegistrateUserTasksv>:
{ .name = "LoggerTask", .stack_size = 128 * 5, .priority = (osPriority_t) osPriorityHigh };



void RegistrateUserTasks()
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 800bcc8:	4a0c      	ldr	r2, [pc, #48]	; (800bcfc <_Z19RegistrateUserTasksv+0x38>)
 800bcca:	2100      	movs	r1, #0
 800bccc:	480c      	ldr	r0, [pc, #48]	; (800bd00 <_Z19RegistrateUserTasksv+0x3c>)
 800bcce:	f012 fd61 	bl	801e794 <osThreadNew>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	4a0b      	ldr	r2, [pc, #44]	; (800bd04 <_Z19RegistrateUserTasksv+0x40>)
 800bcd6:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 800bcd8:	4a0b      	ldr	r2, [pc, #44]	; (800bd08 <_Z19RegistrateUserTasksv+0x44>)
 800bcda:	2100      	movs	r1, #0
 800bcdc:	480b      	ldr	r0, [pc, #44]	; (800bd0c <_Z19RegistrateUserTasksv+0x48>)
 800bcde:	f012 fd59 	bl	801e794 <osThreadNew>
 800bce2:	4603      	mov	r3, r0
 800bce4:	4a0a      	ldr	r2, [pc, #40]	; (800bd10 <_Z19RegistrateUserTasksv+0x4c>)
 800bce6:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 800bce8:	4a0a      	ldr	r2, [pc, #40]	; (800bd14 <_Z19RegistrateUserTasksv+0x50>)
 800bcea:	2100      	movs	r1, #0
 800bcec:	480a      	ldr	r0, [pc, #40]	; (800bd18 <_Z19RegistrateUserTasksv+0x54>)
 800bcee:	f012 fd51 	bl	801e794 <osThreadNew>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	4a09      	ldr	r2, [pc, #36]	; (800bd1c <_Z19RegistrateUserTasksv+0x58>)
 800bcf6:	6013      	str	r3, [r2, #0]
	//loggerTaskHandle = osThreadNew(LoggerTask, NULL, &loggerTask_attributes);

}
 800bcf8:	bf00      	nop
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	080258c4 	.word	0x080258c4
 800bd00:	0800bd21 	.word	0x0800bd21
 800bd04:	200006c8 	.word	0x200006c8
 800bd08:	080258e8 	.word	0x080258e8
 800bd0c:	0800bd51 	.word	0x0800bd51
 800bd10:	200006cc 	.word	0x200006cc
 800bd14:	0802590c 	.word	0x0802590c
 800bd18:	080027a9 	.word	0x080027a9
 800bd1c:	200006d0 	.word	0x200006d0

0800bd20 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800bd28:	f013 fdca 	bl	801f8c0 <xTaskGetTickCount>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800bd30:	2208      	movs	r2, #8
 800bd32:	4905      	ldr	r1, [pc, #20]	; (800bd48 <_Z7ADCTaskPv+0x28>)
 800bd34:	4805      	ldr	r0, [pc, #20]	; (800bd4c <_Z7ADCTaskPv+0x2c>)
 800bd36:	f008 fd7d 	bl	8014834 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 800bd3a:	f107 030c 	add.w	r3, r7, #12
 800bd3e:	2105      	movs	r1, #5
 800bd40:	4618      	mov	r0, r3
 800bd42:	f013 fc49 	bl	801f5d8 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800bd46:	e7f3      	b.n	800bd30 <_Z7ADCTaskPv+0x10>
 800bd48:	2000012c 	.word	0x2000012c
 800bd4c:	200006d4 	.word	0x200006d4

0800bd50 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 800bd50:	b590      	push	{r4, r7, lr}
 800bd52:	b09b      	sub	sp, #108	; 0x6c
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800bd58:	f013 fdb2 	bl	801f8c0 <xTaskGetTickCount>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	637b      	str	r3, [r7, #52]	; 0x34

	static uint8_t direction = 1u;
	logic.set_states({jlb::FastState::OUT_ACCEL_ZONE});
 800bd60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd64:	2104      	movs	r1, #4
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fd f9d4 	bl	8009114 <_ZN3jlb14CompositeStateC1ENS_9FastStateE>
 800bd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd74:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd76:	4868      	ldr	r0, [pc, #416]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800bd78:	f7ff ff41 	bl	800bbfe <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 800bd7c:	4b67      	ldr	r3, [pc, #412]	; (800bf1c <_Z8MainTaskPv+0x1cc>)
 800bd7e:	899b      	ldrh	r3, [r3, #12]
 800bd80:	ee07 3a90 	vmov	s15, r3
 800bd84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd88:	eddf 6a65 	vldr	s13, [pc, #404]	; 800bf20 <_Z8MainTaskPv+0x1d0>
 800bd8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd90:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800bf24 <_Z8MainTaskPv+0x1d4>
 800bd94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd98:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800bf28 <_Z8MainTaskPv+0x1d8>
 800bd9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bda0:	ee16 0a90 	vmov	r0, s13
 800bda4:	f7f4 fbc2 	bl	800052c <__aeabi_f2d>
 800bda8:	a359      	add	r3, pc, #356	; (adr r3, 800bf10 <_Z8MainTaskPv+0x1c0>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fc15 	bl	80005dc <__aeabi_dmul>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	4619      	mov	r1, r3
 800bdba:	f7f4 ff07 	bl	8000bcc <__aeabi_d2f>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	4a5a      	ldr	r2, [pc, #360]	; (800bf2c <_Z8MainTaskPv+0x1dc>)
 800bdc2:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 800bdc4:	f7f7 f826 	bl	8002e14 <_Z14LineSensorTaskv>
		IMU_Task();
 800bdc8:	f7f6 fdb0 	bl	800292c <_Z8IMU_Taskv>
		DistanceSensorTask();
 800bdcc:	f7f6 fb1a 	bl	8002404 <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 800bdd0:	f7f6 fd3c 	bl	800284c <_Z12CalculateRPMv>
 800bdd4:	eef0 7a40 	vmov.f32	s15, s0
 800bdd8:	4b55      	ldr	r3, [pc, #340]	; (800bf30 <_Z8MainTaskPv+0x1e0>)
 800bdda:	edc3 7a00 	vstr	s15, [r3]
		{
			motorcontrol.target_velocity = 0.0f;
		}
#else

		logic.imu_callback(imu.yaw);
 800bdde:	4b55      	ldr	r3, [pc, #340]	; (800bf34 <_Z8MainTaskPv+0x1e4>)
 800bde0:	edd3 7a03 	vldr	s15, [r3, #12]
 800bde4:	eeb0 0a67 	vmov.f32	s0, s15
 800bde8:	484b      	ldr	r0, [pc, #300]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800bdea:	f7ff fed7 	bl	800bb9c <_ZN3jlb5Logic12imu_callbackEf>
		logic.rpm_callback(wheel_rpm);
 800bdee:	4b50      	ldr	r3, [pc, #320]	; (800bf30 <_Z8MainTaskPv+0x1e0>)
 800bdf0:	edd3 7a00 	vldr	s15, [r3]
 800bdf4:	eeb0 0a67 	vmov.f32	s0, s15
 800bdf8:	4847      	ldr	r0, [pc, #284]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800bdfa:	f7ff fedf 	bl	800bbbc <_ZN3jlb5Logic12rpm_callbackEf>

		std::reverse(std::begin(ls_data.front_detection), std::end(ls_data.front_detection));
 800bdfe:	484e      	ldr	r0, [pc, #312]	; (800bf38 <_Z8MainTaskPv+0x1e8>)
 800be00:	f000 f9d5 	bl	800c1ae <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800be04:	4604      	mov	r4, r0
 800be06:	484c      	ldr	r0, [pc, #304]	; (800bf38 <_Z8MainTaskPv+0x1e8>)
 800be08:	f000 f9dc 	bl	800c1c4 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800be0c:	4603      	mov	r3, r0
 800be0e:	4619      	mov	r1, r3
 800be10:	4620      	mov	r0, r4
 800be12:	f000 ff25 	bl	800cc60 <_ZSt7reverseIPbEvT_S1_>
		//std::reverse(std::begin(ls_data.rear_detection), std::end(ls_data.rear_detection));
		logic.set_detection_front( ls_data.front_detection, ls_data.front);
 800be16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800be1a:	4948      	ldr	r1, [pc, #288]	; (800bf3c <_Z8MainTaskPv+0x1ec>)
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 fa09 	bl	800c234 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800be22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800be26:	461a      	mov	r2, r3
 800be28:	4943      	ldr	r1, [pc, #268]	; (800bf38 <_Z8MainTaskPv+0x1e8>)
 800be2a:	483b      	ldr	r0, [pc, #236]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800be2c:	f7ff fe70 	bl	800bb10 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>
 800be30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800be34:	4618      	mov	r0, r3
 800be36:	f7f7 fb33 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_detection_rear(ls_data.rear_detection, ls_data.rear);
 800be3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800be3e:	4940      	ldr	r1, [pc, #256]	; (800bf40 <_Z8MainTaskPv+0x1f0>)
 800be40:	4618      	mov	r0, r3
 800be42:	f000 f9f7 	bl	800c234 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800be46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800be4a:	461a      	mov	r2, r3
 800be4c:	493d      	ldr	r1, [pc, #244]	; (800bf44 <_Z8MainTaskPv+0x1f4>)
 800be4e:	4832      	ldr	r0, [pc, #200]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800be50:	f7ff fe85 	bl	800bb5e <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>
 800be54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800be58:	4618      	mov	r0, r3
 800be5a:	f7f7 fb21 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_object_range(distance_sensor.distance);
 800be5e:	4b3a      	ldr	r3, [pc, #232]	; (800bf48 <_Z8MainTaskPv+0x1f8>)
 800be60:	edd3 7a08 	vldr	s15, [r3, #32]
 800be64:	eeb0 0a67 	vmov.f32	s0, s15
 800be68:	482b      	ldr	r0, [pc, #172]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800be6a:	f7ff feb7 	bl	800bbdc <_ZN3jlb5Logic16set_object_rangeEf>
		Measurements meas;
		meas.duty_cycle = motorcontrol.duty_cycle;
 800be6e:	4b37      	ldr	r3, [pc, #220]	; (800bf4c <_Z8MainTaskPv+0x1fc>)
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	627b      	str	r3, [r7, #36]	; 0x24
		meas.motor_current = motorcontrol.motor_current;
 800be74:	4b35      	ldr	r3, [pc, #212]	; (800bf4c <_Z8MainTaskPv+0x1fc>)
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	62bb      	str	r3, [r7, #40]	; 0x28
		meas.object_range = distance_sensor.distance;
 800be7a:	4b33      	ldr	r3, [pc, #204]	; (800bf48 <_Z8MainTaskPv+0x1f8>)
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		meas.wheel_rpm = wheel_rpm;
 800be80:	4b2b      	ldr	r3, [pc, #172]	; (800bf30 <_Z8MainTaskPv+0x1e0>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	633b      	str	r3, [r7, #48]	; 0x30
		logic.set_measurements(meas);
 800be86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be8a:	4619      	mov	r1, r3
 800be8c:	4822      	ldr	r0, [pc, #136]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800be8e:	f7ff fede 	bl	800bc4e <_ZN3jlb5Logic16set_measurementsERK12Measurements>
		auto [target_angle, target_speed] = logic.update();
 800be92:	4821      	ldr	r0, [pc, #132]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800be94:	f7ff fdeb 	bl	800ba6e <_ZN3jlb5Logic6updateEv>
 800be98:	eeb0 7a40 	vmov.f32	s14, s0
 800be9c:	eef0 7a60 	vmov.f32	s15, s1
 800bea0:	ed87 7a07 	vstr	s14, [r7, #28]
 800bea4:	edc7 7a08 	vstr	s15, [r7, #32]
		auto [vx_t, x_t, y_t, theta_t] = logic.get_odometry();
 800bea8:	481b      	ldr	r0, [pc, #108]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800beaa:	f7ff fee2 	bl	800bc72 <_ZN3jlb5Logic12get_odometryEv>
 800beae:	eeb0 6a40 	vmov.f32	s12, s0
 800beb2:	eef0 6a60 	vmov.f32	s13, s1
 800beb6:	eeb0 7a41 	vmov.f32	s14, s2
 800beba:	eef0 7a61 	vmov.f32	s15, s3
 800bebe:	ed87 6a03 	vstr	s12, [r7, #12]
 800bec2:	edc7 6a04 	vstr	s13, [r7, #16]
 800bec6:	ed87 7a05 	vstr	s14, [r7, #20]
 800beca:	edc7 7a06 	vstr	s15, [r7, #24]
 800bece:	68fb      	ldr	r3, [r7, #12]
		motorcontrol.actual_velocity = vx_t;
 800bed0:	4a1e      	ldr	r2, [pc, #120]	; (800bf4c <_Z8MainTaskPv+0x1fc>)
 800bed2:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 800bed4:	6a3b      	ldr	r3, [r7, #32]
		motorcontrol.target_velocity = target_speed;
 800bed6:	4a1d      	ldr	r2, [pc, #116]	; (800bf4c <_Z8MainTaskPv+0x1fc>)
 800bed8:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 800beda:	f7f8 f8f7 	bl	80040cc <_Z16MotorControlTaskv>
		auto [target_angle, target_speed] = logic.update();
 800bede:	edd7 7a07 	vldr	s15, [r7, #28]
		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 800bee2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800bf50 <_Z8MainTaskPv+0x200>
 800bee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800beea:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800bf54 <_Z8MainTaskPv+0x204>
 800beee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bef2:	eeb0 0a47 	vmov.f32	s0, s14
 800bef6:	f7f8 faeb 	bl	80044d0 <_Z16SetSteeringAnglef>
		logic.send_telemetry();
 800befa:	4807      	ldr	r0, [pc, #28]	; (800bf18 <_Z8MainTaskPv+0x1c8>)
 800befc:	f7ff fe99 	bl	800bc32 <_ZN3jlb5Logic14send_telemetryEv>

#endif
		//vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
		vTaskDelayUntil(&xLastWakeTime, 20u);
 800bf00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bf04:	2114      	movs	r1, #20
 800bf06:	4618      	mov	r0, r3
 800bf08:	f013 fb66 	bl	801f5d8 <vTaskDelayUntil>
	}
 800bf0c:	e736      	b.n	800bd7c <_Z8MainTaskPv+0x2c>
 800bf0e:	bf00      	nop
 800bf10:	2cba732e 	.word	0x2cba732e
 800bf14:	3ff0b626 	.word	0x3ff0b626
 800bf18:	20000310 	.word	0x20000310
 800bf1c:	2000014c 	.word	0x2000014c
 800bf20:	45800000 	.word	0x45800000
 800bf24:	40533333 	.word	0x40533333
 800bf28:	3e7df3b6 	.word	0x3e7df3b6
 800bf2c:	20000308 	.word	0x20000308
 800bf30:	2000030c 	.word	0x2000030c
 800bf34:	200001a8 	.word	0x200001a8
 800bf38:	20000240 	.word	0x20000240
 800bf3c:	20000288 	.word	0x20000288
 800bf40:	20000294 	.word	0x20000294
 800bf44:	20000260 	.word	0x20000260
 800bf48:	2000015c 	.word	0x2000015c
 800bf4c:	200002a0 	.word	0x200002a0
 800bf50:	c3340000 	.word	0xc3340000
 800bf54:	4048f5c3 	.word	0x4048f5c3

0800bf58 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800bf58:	b590      	push	{r4, r7, lr}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f000 fe8e 	bl	800cc86 <_ZSt12__miter_baseIPKcET_S2_>
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	68b8      	ldr	r0, [r7, #8]
 800bf6e:	f000 fe8a 	bl	800cc86 <_ZSt12__miter_baseIPKcET_S2_>
 800bf72:	4603      	mov	r3, r0
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	4619      	mov	r1, r3
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 fe8f 	bl	800cc9c <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800bf7e:	4603      	mov	r3, r0
    }
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd90      	pop	{r4, r7, pc}

0800bf88 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 800bf88:	b590      	push	{r4, r7, lr}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800bf92:	f7f8 fb33 	bl	80045fc <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 800bf96:	4622      	mov	r2, r4
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fec3 	bl	800cd26 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd90      	pop	{r4, r7, pc}

0800bfa8 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
      }
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>:
    operator*(const _Tp& __x, const complex<_Tp>& __y)
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __y;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	60ba      	str	r2, [r7, #8]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	60fb      	str	r3, [r7, #12]
      __r *= __x;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	edd3 7a00 	vldr	s15, [r3]
 800bfe2:	f107 0308 	add.w	r3, r7, #8
 800bfe6:	eeb0 0a67 	vmov.f32	s0, s15
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f8 fb8f 	bl	800470e <_ZNSt7complexIfEmLEf>
      return __r;
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	ee07 2a10 	vmov	s14, r2
 800bff8:	ee07 3a90 	vmov	s15, r3
    }
 800bffc:	eeb0 0a47 	vmov.f32	s0, s14
 800c000:	eef0 0a67 	vmov.f32	s1, s15
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <_ZNSt7complexIfEmLIfEERS0_RKS_IT_E>:
        operator*=(const complex<_Tp>& __z)
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b086      	sub	sp, #24
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
	  const _ComplexT __t = __z.__rep();
 800c014:	6838      	ldr	r0, [r7, #0]
 800c016:	f7f8 fb9b 	bl	8004750 <_ZNKSt7complexIfE5__repEv>
 800c01a:	ed87 0a04 	vstr	s0, [r7, #16]
 800c01e:	edc7 0a05 	vstr	s1, [r7, #20]
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	60bb      	str	r3, [r7, #8]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	edd3 7a00 	vldr	s15, [r3]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	ed93 7a01 	vldr	s14, [r3, #4]
	  _M_value *= __t;
 800c036:	eef0 1a47 	vmov.f32	s3, s14
 800c03a:	eeb0 1a67 	vmov.f32	s2, s15
 800c03e:	edd7 0a02 	vldr	s1, [r7, #8]
 800c042:	ed97 0a03 	vldr	s0, [r7, #12]
 800c046:	f7f4 fe29 	bl	8000c9c <__mulsc3>
 800c04a:	eeb0 7a40 	vmov.f32	s14, s0
 800c04e:	eef0 7a60 	vmov.f32	s15, s1
 800c052:	ee17 1a10 	vmov	r1, s14
 800c056:	ee17 2a90 	vmov	r2, s15
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6019      	str	r1, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	605a      	str	r2, [r3, #4]
	  return *this;
 800c062:	687b      	ldr	r3, [r7, #4]
	}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <_ZStmlIfESt7complexIT_ERKS2_S4_>:
    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	60ba      	str	r2, [r7, #8]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	60fb      	str	r3, [r7, #12]
      __r *= __y;
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	4618      	mov	r0, r3
 800c088:	f7ff ffbf 	bl	800c00a <_ZNSt7complexIfEmLIfEERS0_RKS_IT_E>
      return __r;
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	ee07 2a10 	vmov	s14, r2
 800c094:	ee07 3a90 	vmov	s15, r3
    }
 800c098:	eeb0 0a47 	vmov.f32	s0, s14
 800c09c:	eef0 0a67 	vmov.f32	s1, s15
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <_ZNSt7complexIfEpLIfEERS0_RKS_IT_E>:
        operator+=(const complex<_Tp>& __z)
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
	  _M_value += __z.__rep();
 800c0b0:	6838      	ldr	r0, [r7, #0]
 800c0b2:	f7f8 fb4d 	bl	8004750 <_ZNKSt7complexIfE5__repEv>
 800c0b6:	eeb0 7a40 	vmov.f32	s14, s0
 800c0ba:	eef0 7a60 	vmov.f32	s15, s1
 800c0be:	eeb0 6a47 	vmov.f32	s12, s14
 800c0c2:	eef0 6a67 	vmov.f32	s13, s15
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	ed93 7a00 	vldr	s14, [r3]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	edd3 7a01 	vldr	s15, [r3, #4]
 800c0d2:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	ed83 7a00 	vstr	s14, [r3]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	edc3 7a01 	vstr	s15, [r3, #4]
	  return *this;
 800c0e6:	687b      	ldr	r3, [r7, #4]
	}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_ZStplIfESt7complexIT_ERKS2_S4_>:
    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	60ba      	str	r2, [r7, #8]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	60fb      	str	r3, [r7, #12]
      __r += __y;
 800c104:	f107 0308 	add.w	r3, r7, #8
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff ffcb 	bl	800c0a6 <_ZNSt7complexIfEpLIfEERS0_RKS_IT_E>
      return __r;
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	ee07 2a10 	vmov	s14, r2
 800c118:	ee07 3a90 	vmov	s15, r3
    }
 800c11c:	eeb0 0a47 	vmov.f32	s0, s14
 800c120:	eef0 0a67 	vmov.f32	s1, s15
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <_ZNSt7complexIfEmIIfEERS0_RKS_IT_E>:
        operator-=(const complex<_Tp>& __z)
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b082      	sub	sp, #8
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	6039      	str	r1, [r7, #0]
	  _M_value -= __z.__rep();
 800c134:	6838      	ldr	r0, [r7, #0]
 800c136:	f7f8 fb0b 	bl	8004750 <_ZNKSt7complexIfE5__repEv>
 800c13a:	eeb0 7a40 	vmov.f32	s14, s0
 800c13e:	eef0 7a60 	vmov.f32	s15, s1
 800c142:	eeb0 6a47 	vmov.f32	s12, s14
 800c146:	eef0 6a67 	vmov.f32	s13, s15
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	ed93 7a00 	vldr	s14, [r3]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	edd3 7a01 	vldr	s15, [r3, #4]
 800c156:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c15a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	ed83 7a00 	vstr	s14, [r3]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	edc3 7a01 	vstr	s15, [r3, #4]
	  return *this;
 800c16a:	687b      	ldr	r3, [r7, #4]
	}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <_ZStmiIfESt7complexIT_ERKS2_S4_>:
    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	60ba      	str	r2, [r7, #8]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	60fb      	str	r3, [r7, #12]
      __r -= __y;
 800c188:	f107 0308 	add.w	r3, r7, #8
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff ffcb 	bl	800c12a <_ZNSt7complexIfEmIIfEERS0_RKS_IT_E>
      return __r;
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	ee07 2a10 	vmov	s14, r2
 800c19c:	ee07 3a90 	vmov	s15, r3
    }
 800c1a0:	eeb0 0a47 	vmov.f32	s0, s14
 800c1a4:	eef0 0a67 	vmov.f32	s1, s15
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 800c1ae:	b480      	push	{r7}
 800c1b0:	b083      	sub	sp, #12
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3320      	adds	r3, #32
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	68b9      	ldr	r1, [r7, #8]
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f000 fdca 	bl	800cd86 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	bf0c      	ite	eq
 800c1fa:	2301      	moveq	r3, #1
 800c1fc:	2300      	movne	r3, #0
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800c214:	461a      	mov	r2, r3
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f000 fdc7 	bl	800cdac <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>
 800c21e:	4602      	mov	r2, r0
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	4293      	cmp	r3, r2
 800c224:	bf0c      	ite	eq
 800c226:	2301      	moveq	r3, #1
 800c228:	2300      	movne	r3, #0
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 800c234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800c23e:	687c      	ldr	r4, [r7, #4]
 800c240:	6838      	ldr	r0, [r7, #0]
 800c242:	f7f7 fbcc 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c246:	4605      	mov	r5, r0
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7f7 fc72 	bl	8003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c250:	4602      	mov	r2, r0
 800c252:	f107 030c 	add.w	r3, r7, #12
 800c256:	4611      	mov	r1, r2
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 fdba 	bl	800cdd2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 800c25e:	f107 030c 	add.w	r3, r7, #12
 800c262:	461a      	mov	r2, r3
 800c264:	4629      	mov	r1, r5
 800c266:	4620      	mov	r0, r4
 800c268:	f000 fdc1 	bl	800cdee <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 800c26c:	f107 030c 	add.w	r3, r7, #12
 800c270:	4618      	mov	r0, r3
 800c272:	f7f7 f8f1 	bl	8003458 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c276:	6838      	ldr	r0, [r7, #0]
 800c278:	f000 fdcd 	bl	800ce16 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800c27c:	4605      	mov	r5, r0
 800c27e:	6838      	ldr	r0, [r7, #0]
 800c280:	f000 fdd9 	bl	800ce36 <_ZNKSt6vectorIfSaIfEE3endEv>
 800c284:	4606      	mov	r6, r0
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7f7 f988 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c292:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c294:	4622      	mov	r2, r4
 800c296:	4631      	mov	r1, r6
 800c298:	4628      	mov	r0, r5
 800c29a:	f000 fddd 	bl	800ce58 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800c29e:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	605a      	str	r2, [r3, #4]
      }
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2ae <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800c2ae:	b480      	push	{r7}
 800c2b0:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800c2be:	b480      	push	{r7}
 800c2c0:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <_ZSteqRKSaIfES1_>:
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800c2ce:	b480      	push	{r7}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
      { return true; }
 800c2d8:	2301      	movs	r3, #1
 800c2da:	4618      	mov	r0, r3
 800c2dc:	370c      	adds	r7, #12
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800c2e6:	b590      	push	{r4, r7, lr}
 800c2e8:	b085      	sub	sp, #20
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f000 fe1e 	bl	800cf34 <_ZSt12__miter_baseIPfET_S1_>
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	68b8      	ldr	r0, [r7, #8]
 800c2fc:	f000 fe1a 	bl	800cf34 <_ZSt12__miter_baseIPfET_S1_>
 800c300:	4603      	mov	r3, r0
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	4619      	mov	r1, r3
 800c306:	4620      	mov	r0, r4
 800c308:	f000 fe1f 	bl	800cf4a <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 800c30c:	4603      	mov	r3, r0
    }
 800c30e:	4618      	mov	r0, r3
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	bd90      	pop	{r4, r7, pc}

0800c316 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800c316:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c318:	b085      	sub	sp, #20
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	429a      	cmp	r2, r3
 800c326:	f000 80e9 	beq.w	800c4fc <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800c32a:	f7ff ffc0 	bl	800c2ae <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d046      	beq.n	800c3c2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 800c334:	f7ff ffc3 	bl	800c2be <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 800c338:	4603      	mov	r3, r0
 800c33a:	f083 0301 	eor.w	r3, r3, #1
 800c33e:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800c340:	2b00      	cmp	r3, #0
 800c342:	d015      	beq.n	800c370 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4618      	mov	r0, r3
 800c348:	f7f7 f92b 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c34c:	4604      	mov	r4, r0
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f7f7 fbef 	bl	8003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c356:	4603      	mov	r3, r0
 800c358:	4619      	mov	r1, r3
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7ff ffb7 	bl	800c2ce <_ZSteqRKSaIfES1_>
 800c360:	4603      	mov	r3, r0
 800c362:	f083 0301 	eor.w	r3, r3, #1
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800c36c:	2301      	movs	r3, #1
 800c36e:	e000      	b.n	800c372 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 800c370:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800c372:	2b00      	cmp	r3, #0
 800c374:	d017      	beq.n	800c3a6 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
		  this->clear();
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7f7 f8ad 	bl	80034d6 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800c38e:	461a      	mov	r2, r3
 800c390:	f7f7 f8f4 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7f7 f8fa 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c3ae:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7f7 fbbe 	bl	8003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c3b8:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f000 fd5c 	bl	800ce7a <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 800c3c2:	6838      	ldr	r0, [r7, #0]
 800c3c4:	f7f7 fb0b 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c3c8:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fd60 	bl	800ce90 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	bf8c      	ite	hi
 800c3d8:	2301      	movhi	r3, #1
 800c3da:	2300      	movls	r3, #0
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d032      	beq.n	800c448 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800c3e2:	6838      	ldr	r0, [r7, #0]
 800c3e4:	f000 fd17 	bl	800ce16 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	6838      	ldr	r0, [r7, #0]
 800c3ec:	f000 fd23 	bl	800ce36 <_ZNKSt6vectorIfSaIfEE3endEv>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	68f9      	ldr	r1, [r7, #12]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fd5a 	bl	800ceb0 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 800c3fc:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681c      	ldr	r4, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4618      	mov	r0, r3
 800c40a:	f7f7 f8ca 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c40e:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c410:	461a      	mov	r2, r3
 800c412:	4629      	mov	r1, r5
 800c414:	4620      	mov	r0, r4
 800c416:	f7f7 f8cf 	bl	80035b8 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800c42c:	461a      	mov	r2, r3
 800c42e:	f7f7 f8a5 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	441a      	add	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	609a      	str	r2, [r3, #8]
 800c446:	e052      	b.n	800c4ee <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	  else if (size() >= __xlen)
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7f7 fac8 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c44e:	4602      	mov	r2, r0
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4293      	cmp	r3, r2
 800c454:	bf94      	ite	ls
 800c456:	2301      	movls	r3, #1
 800c458:	2300      	movhi	r3, #0
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d020      	beq.n	800c4a2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800c460:	6838      	ldr	r0, [r7, #0]
 800c462:	f000 fcd8 	bl	800ce16 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800c466:	4604      	mov	r4, r0
 800c468:	6838      	ldr	r0, [r7, #0]
 800c46a:	f000 fce4 	bl	800ce36 <_ZNKSt6vectorIfSaIfEE3endEv>
 800c46e:	4605      	mov	r5, r0
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f7f7 fa27 	bl	80038c4 <_ZNSt6vectorIfSaIfEE5beginEv>
 800c476:	4603      	mov	r3, r0
 800c478:	461a      	mov	r2, r3
 800c47a:	4629      	mov	r1, r5
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 fd33 	bl	800cee8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 800c482:	4604      	mov	r4, r0
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7f7 f8ed 	bl	8003664 <_ZNSt6vectorIfSaIfEE3endEv>
 800c48a:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7f7 f887 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c494:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800c496:	461a      	mov	r2, r3
 800c498:	4629      	mov	r1, r5
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 fd3c 	bl	800cf18 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 800c4a0:	e025      	b.n	800c4ee <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	681d      	ldr	r5, [r3, #0]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	681c      	ldr	r4, [r3, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7f7 fa97 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	18e1      	adds	r1, r4, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f7ff ff12 	bl	800c2e6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	681c      	ldr	r4, [r3, #0]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7f7 fa89 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f7 f860 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c4e2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 fd51 	bl	800cf90 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	441a      	add	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	605a      	str	r2, [r3, #4]
      return *this;
 800c4fc:	687b      	ldr	r3, [r7, #4]
    }
 800c4fe:	4618      	mov	r0, r3
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c506 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fd4f 	bl	800cfb2 <_ZNSaIN3jlb4EdgeEEC1Ev>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4618      	mov	r0, r3
 800c518:	f000 fd57 	bl	800cfca <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c526:	b480      	push	{r7}
 800c528:	b083      	sub	sp, #12
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4618      	mov	r0, r3
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	689a      	ldr	r2, [r3, #8]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	10db      	asrs	r3, r3, #3
 800c554:	4a07      	ldr	r2, [pc, #28]	; (800c574 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 800c556:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800c55a:	461a      	mov	r2, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fd48 	bl	800cff2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4618      	mov	r0, r3
 800c566:	f7f8 fe8f 	bl	8005288 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	aaaaaaab 	.word	0xaaaaaaab

0800c578 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c578:	b5b0      	push	{r4, r5, r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681c      	ldr	r4, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fd44 	bl	800d018 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c590:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c592:	461a      	mov	r2, r3
 800c594:	4629      	mov	r1, r5
 800c596:	4620      	mov	r0, r4
 800c598:	f000 fd49 	bl	800d02e <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7ff ffcc 	bl	800c53c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bdb0      	pop	{r4, r5, r7, pc}

0800c5ae <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 800c5ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b0:	b085      	sub	sp, #20
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800c5b8:	687c      	ldr	r4, [r7, #4]
 800c5ba:	6838      	ldr	r0, [r7, #0]
 800c5bc:	f000 faf8 	bl	800cbb0 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 fd4e 	bl	800d066 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	f107 030c 	add.w	r3, r7, #12
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 fd39 	bl	800d04a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800c5d8:	f107 030c 	add.w	r3, r7, #12
 800c5dc:	461a      	mov	r2, r3
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 fd4b 	bl	800d07c <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 800c5e6:	f107 030c 	add.w	r3, r7, #12
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f014 fbed 	bl	8020dca <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c5f0:	6838      	ldr	r0, [r7, #0]
 800c5f2:	f000 fd57 	bl	800d0a4 <_ZNKSt6vectorIcSaIcEE5beginEv>
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	6838      	ldr	r0, [r7, #0]
 800c5fa:	f000 fd63 	bl	800d0c4 <_ZNKSt6vectorIcSaIcEE3endEv>
 800c5fe:	4606      	mov	r6, r0
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fd6d 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800c60c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c60e:	4622      	mov	r2, r4
 800c610:	4631      	mov	r1, r6
 800c612:	4628      	mov	r0, r5
 800c614:	f000 fd72 	bl	800d0fc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 800c618:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	605a      	str	r2, [r3, #4]
      }
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4618      	mov	r0, r3
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c628 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c628:	b5b0      	push	{r4, r5, r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681c      	ldr	r4, [r3, #0]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 fd53 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800c640:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c642:	461a      	mov	r2, r3
 800c644:	4629      	mov	r1, r5
 800c646:	4620      	mov	r0, r4
 800c648:	f000 fd69 	bl	800d11e <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fa68 	bl	800cb24 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4618      	mov	r0, r3
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bdb0      	pop	{r4, r5, r7, pc}

0800c65e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800c65e:	b580      	push	{r7, lr}
 800c660:	b082      	sub	sp, #8
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c668:	6838      	ldr	r0, [r7, #0]
 800c66a:	f000 fd66 	bl	800d13a <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800c66e:	4603      	mov	r3, r0
 800c670:	4619      	mov	r1, r3
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fd6c 	bl	800d150 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800c678:	bf00      	nop
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fd94 	bl	800d1b6 <_ZNSaIN3jlb4NodeEEC1Ev>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fd9c 	bl	800d1ce <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4618      	mov	r0, r3
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <_ZNSaIN3jlb4NodeEED1Ev>:
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
	...

0800c6b8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689a      	ldr	r2, [r3, #8]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	10db      	asrs	r3, r3, #3
 800c6d0:	4a07      	ldr	r2, [pc, #28]	; (800c6f0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev+0x38>)
 800c6d2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fd8c 	bl	800d1f6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7f8 fe59 	bl	8005398 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	aaaaaaab 	.word	0xaaaaaaab

0800c6f4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c6f4:	b5b0      	push	{r4, r5, r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681c      	ldr	r4, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 fd88 	bl	800d21c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c70c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c70e:	461a      	mov	r2, r3
 800c710:	4629      	mov	r1, r5
 800c712:	4620      	mov	r0, r4
 800c714:	f000 fd8d 	bl	800d232 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      }
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7ff ffcc 	bl	800c6b8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4618      	mov	r0, r3
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bdb0      	pop	{r4, r5, r7, pc}

0800c72a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b082      	sub	sp, #8
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c734:	6838      	ldr	r0, [r7, #0]
 800c736:	f000 fd8a 	bl	800d24e <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 800c73a:	4603      	mov	r3, r0
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fd90 	bl	800d264 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 800c74c:	b5b0      	push	{r4, r5, r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	1d38      	adds	r0, r7, #4
 800c756:	e880 0006 	stmia.w	r0, {r1, r2}
 800c75a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	4618      	mov	r0, r3
 800c762:	f000 fdb2 	bl	800d2ca <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800c766:	1d3b      	adds	r3, r7, #4
 800c768:	4618      	mov	r0, r3
 800c76a:	f000 fdbd 	bl	800d2e8 <_ZNKSt16initializer_listIcE5beginEv>
 800c76e:	4604      	mov	r4, r0
 800c770:	1d3b      	adds	r3, r7, #4
 800c772:	4618      	mov	r0, r3
 800c774:	f000 fdc4 	bl	800d300 <_ZNKSt16initializer_listIcE3endEv>
 800c778:	4602      	mov	r2, r0
 800c77a:	462b      	mov	r3, r5
 800c77c:	4621      	mov	r1, r4
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f000 fde3 	bl	800d34a <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	4618      	mov	r0, r3
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bdb0      	pop	{r4, r5, r7, pc}

0800c78e <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c78e:	b480      	push	{r7}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6819      	ldr	r1, [r3, #0]
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	4413      	add	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	440b      	add	r3, r1
      }
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>:
      struct _Deque_impl
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7f6 fe4b 	bl	8003458 <_ZNSaIfED1Ev>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 fdef 	bl	800d3ba <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800c7dc:	2100      	movs	r1, #0
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fdfb 	bl	800d3da <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d010      	beq.n	800c820 <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800c806:	3304      	adds	r3, #4
 800c808:	461a      	mov	r2, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fe48 	bl	800d4a0 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	461a      	mov	r2, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fe5b 	bl	800d4d6 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
    }
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff ffc6 	bl	800c7b4 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800c832:	b580      	push	{r7, lr}
 800c834:	b08a      	sub	sp, #40	; 0x28
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800c83a:	f107 0308 	add.w	r3, r7, #8
 800c83e:	6879      	ldr	r1, [r7, #4]
 800c840:	4618      	mov	r0, r3
 800c842:	f000 f871 	bl	800c928 <_ZNSt5dequeIfSaIfEE5beginEv>
 800c846:	f107 0318 	add.w	r3, r7, #24
 800c84a:	6879      	ldr	r1, [r7, #4]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 f87a 	bl	800c946 <_ZNSt5dequeIfSaIfEE3endEv>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fe59 	bl	800d50c <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c85a:	4603      	mov	r3, r0
 800c85c:	f107 0218 	add.w	r2, r7, #24
 800c860:	f107 0108 	add.w	r1, r7, #8
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fe5c 	bl	800d522 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7ff ffbe 	bl	800c7ee <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4618      	mov	r0, r3
 800c876:	3728      	adds	r7, #40	; 0x28
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800c890:	429a      	cmp	r2, r3
 800c892:	d00c      	beq.n	800c8ae <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	4619      	mov	r1, r3
 800c89e:	f7f6 fecf 	bl	8003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	1d1a      	adds	r2, r3, #4
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 800c8ac:	e003      	b.n	800c8b6 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fe43 	bl	800d53c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 800c8b6:	bf00      	nop
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f103 0218 	add.w	r2, r3, #24
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	f000 fe76 	bl	800d5c4 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d010      	beq.n	800c91a <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f000 fe06 	bl	800d50c <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c900:	4602      	mov	r2, r0
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f000 fe87 	bl	800d61c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 800c918:	e002      	b.n	800c920 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fe8a 	bl	800d634 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	3308      	adds	r3, #8
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fea3 	bl	800d684 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c946:	b580      	push	{r7, lr}
 800c948:	b082      	sub	sp, #8
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	3318      	adds	r3, #24
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fe94 	bl	800d684 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4618      	mov	r0, r3
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 800c97a:	b580      	push	{r7, lr}
 800c97c:	ed2d 8b02 	vpush	{d8}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	60f8      	str	r0, [r7, #12]
 800c986:	60b9      	str	r1, [r7, #8]
 800c988:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 800c98c:	e013      	b.n	800c9b6 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x3c>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 800c98e:	1d3b      	adds	r3, r7, #4
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff ffe7 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c996:	4603      	mov	r3, r0
 800c998:	ed93 8a00 	vldr	s16, [r3]
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f000 fec0 	bl	800d722 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	edd3 7a00 	vldr	s15, [r3]
 800c9a8:	ee78 7a27 	vadd.f32	s15, s16, s15
 800c9ac:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f000 fe97 	bl	800d6e4 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 800c9b6:	68b9      	ldr	r1, [r7, #8]
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f000 fe7f 	bl	800d6bc <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	f083 0301 	eor.w	r3, r3, #1
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1e1      	bne.n	800c98e <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x14>
      return __init;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	ee07 3a90 	vmov	s15, r3
    }
 800c9d0:	eeb0 0a67 	vmov.f32	s0, s15
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	ecbd 8b02 	vpop	{d8}
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <_ZSt3minIfET_St16initializer_listIS0_E>:
    min(initializer_list<_Tp> __l)
 800c9de:	b590      	push	{r4, r7, lr}
 800c9e0:	b083      	sub	sp, #12
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	463b      	mov	r3, r7
 800c9e6:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::min_element(__l.begin(), __l.end()); }
 800c9ea:	463b      	mov	r3, r7
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 fea4 	bl	800d73a <_ZNKSt16initializer_listIfE5beginEv>
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	463b      	mov	r3, r7
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 feab 	bl	800d752 <_ZNKSt16initializer_listIfE3endEv>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	4619      	mov	r1, r3
 800ca00:	4620      	mov	r0, r4
 800ca02:	f000 feb8 	bl	800d776 <_ZSt11min_elementIPKfET_S2_S2_>
 800ca06:	4603      	mov	r3, r0
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd90      	pop	{r4, r7, pc}

0800ca18 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	10db      	asrs	r3, r3, #3
 800ca2c:	4a04      	ldr	r2, [pc, #16]	; (800ca40 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 800ca2e:	fb02 f303 	mul.w	r3, r2, r3
 800ca32:	4618      	mov	r0, r3
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	aaaaaaab 	.word	0xaaaaaaab

0800ca44 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6819      	ldr	r1, [r3, #0]
 800ca52:	683a      	ldr	r2, [r7, #0]
 800ca54:	4613      	mov	r3, r2
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	4413      	add	r3, r2
 800ca5a:	00db      	lsls	r3, r3, #3
 800ca5c:	440b      	add	r3, r1
      }
 800ca5e:	4618      	mov	r0, r3
 800ca60:	370c      	adds	r7, #12
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr

0800ca6a <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	f107 030c 	add.w	r3, r7, #12
 800ca78:	4611      	mov	r1, r2
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f000 fe8c 	bl	800d798 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	1d1a      	adds	r2, r3, #4
 800ca96:	f107 030c 	add.w	r3, r7, #12
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 fe7b 	bl	800d798 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fe7d 	bl	800d7b8 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 800cabe:	4603      	mov	r3, r0
 800cac0:	461a      	mov	r2, r3
 800cac2:	68b9      	ldr	r1, [r7, #8]
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f000 fe86 	bl	800d7d6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 800caca:	4603      	mov	r3, r0
    }
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7fc fba7 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cae4:	4603      	mov	r3, r0
 800cae6:	681c      	ldr	r4, [r3, #0]
 800cae8:	6838      	ldr	r0, [r7, #0]
 800caea:	f7fc fba2 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800caee:	4603      	mov	r3, r0
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	429c      	cmp	r4, r3
 800caf4:	bf0c      	ite	eq
 800caf6:	2301      	moveq	r3, #1
 800caf8:	2300      	movne	r3, #0
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	4618      	mov	r0, r3
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd90      	pop	{r4, r7, pc}

0800cb04 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f014 f95a 	bl	8020dc6 <_ZNSaIcEC1Ev>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 fe74 	bl	800d802 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	689a      	ldr	r2, [r3, #8]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fe74 	bl	800d82a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fc fe51 	bl	80097ec <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <_ZNSt6vectorIcSaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 fe74 	bl	800d850 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <_ZNSt6vectorIcSaIcEE9push_backEOc>:
      push_back(value_type&& __x)
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800cb7a:	6838      	ldr	r0, [r7, #0]
 800cb7c:	f000 fe88 	bl	800d890 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800cb80:	4603      	mov	r3, r0
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fe8e 	bl	800d8a6 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_>
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <_ZNSt6vectorIcSaIcEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b082      	sub	sp, #8
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4619      	mov	r1, r3
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 feb2 	bl	800d90a <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>
 800cba6:	4603      	mov	r3, r0
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800cbd8:	6838      	ldr	r0, [r7, #0]
 800cbda:	f7fc fb2a 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 800cbf0:	b590      	push	{r4, r7, lr}
 800cbf2:	b08b      	sub	sp, #44	; 0x2c
 800cbf4:	af02      	add	r7, sp, #8
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
	  difference_type __offset = __position - cbegin();
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f000 fe8f 	bl	800d922 <_ZNKSt6vectorIcSaIcEE6cbeginEv>
 800cc04:	4603      	mov	r3, r0
 800cc06:	613b      	str	r3, [r7, #16]
 800cc08:	f107 0210 	add.w	r2, r7, #16
 800cc0c:	f107 0308 	add.w	r3, r7, #8
 800cc10:	4611      	mov	r1, r2
 800cc12:	4618      	mov	r0, r3
 800cc14:	f000 fe95 	bl	800d942 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800cc18:	61f8      	str	r0, [r7, #28]
	  _M_insert_dispatch(begin() + __offset,
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f7ff ff25 	bl	800ca6a <_ZNSt6vectorIcSaIcEE5beginEv>
 800cc20:	4603      	mov	r3, r0
 800cc22:	617b      	str	r3, [r7, #20]
 800cc24:	f107 0314 	add.w	r3, r7, #20
 800cc28:	69f9      	ldr	r1, [r7, #28]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 fe9d 	bl	800d96a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800cc30:	4601      	mov	r1, r0
 800cc32:	f88d 4000 	strb.w	r4, [sp]
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f000 feac 	bl	800d998 <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>
	  return begin() + __offset;
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f7ff ff12 	bl	800ca6a <_ZNSt6vectorIcSaIcEE5beginEv>
 800cc46:	4603      	mov	r3, r0
 800cc48:	61bb      	str	r3, [r7, #24]
 800cc4a:	f107 0318 	add.w	r3, r7, #24
 800cc4e:	69f9      	ldr	r1, [r7, #28]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f000 fe8a 	bl	800d96a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800cc56:	4603      	mov	r3, r0
	}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3724      	adds	r7, #36	; 0x24
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd90      	pop	{r4, r7, pc}

0800cc60 <_ZSt7reverseIPbEvT_S1_>:
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
 800cc60:	b5b0      	push	{r4, r5, r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
      std::__reverse(__first, __last, std::__iterator_category(__first));
 800cc6a:	687c      	ldr	r4, [r7, #4]
 800cc6c:	1d3b      	adds	r3, r7, #4
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 feaa 	bl	800d9c8 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800cc74:	462a      	mov	r2, r5
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 feaf 	bl	800d9dc <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>
    }
 800cc7e:	bf00      	nop
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bdb0      	pop	{r4, r5, r7, pc}

0800cc86 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800cc86:	b480      	push	{r7}
 800cc88:	b083      	sub	sp, #12
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4618      	mov	r0, r3
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800cc9c:	b5b0      	push	{r4, r5, r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f000 feb8 	bl	800da1e <_ZSt12__niter_baseIPKcET_S2_>
 800ccae:	4604      	mov	r4, r0
 800ccb0:	68b8      	ldr	r0, [r7, #8]
 800ccb2:	f000 feb4 	bl	800da1e <_ZSt12__niter_baseIPKcET_S2_>
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 feba 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	4629      	mov	r1, r5
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 febf 	bl	800da4a <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800cccc:	4602      	mov	r2, r0
 800ccce:	1d3b      	adds	r3, r7, #4
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 fec9 	bl	800da6a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800ccd8:	4603      	mov	r3, r0
    }
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bdb0      	pop	{r4, r5, r7, pc}

0800cce2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800ccea:	4618      	mov	r0, r3
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ccf6:	b590      	push	{r4, r7, lr}
 800ccf8:	b083      	sub	sp, #12
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7f6 fe2c 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800cd06:	4603      	mov	r3, r0
 800cd08:	681c      	ldr	r4, [r3, #0]
 800cd0a:	6838      	ldr	r0, [r7, #0]
 800cd0c:	f7f6 fe27 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800cd10:	4603      	mov	r3, r0
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	429c      	cmp	r4, r3
 800cd16:	bf0c      	ite	eq
 800cd18:	2301      	moveq	r3, #1
 800cd1a:	2300      	movne	r3, #0
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	4618      	mov	r0, r3
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd90      	pop	{r4, r7, pc}

0800cd26 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800cd26:	b5b0      	push	{r4, r5, r7, lr}
 800cd28:	b084      	sub	sp, #16
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	60b9      	str	r1, [r7, #8]
 800cd30:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800cd32:	f107 0208 	add.w	r2, r7, #8
 800cd36:	f107 030c 	add.w	r3, r7, #12
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff ffda 	bl	800ccf6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800cd42:	4603      	mov	r3, r0
 800cd44:	f083 0301 	eor.w	r3, r3, #1
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d017      	beq.n	800cd7e <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 800cd4e:	f107 020c 	add.w	r2, r7, #12
 800cd52:	f107 0308 	add.w	r3, r7, #8
 800cd56:	4611      	mov	r1, r2
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7f6 fdc3 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f7 fc5e 	bl	8004622 <_ZSt4__lgi>
 800cd66:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800cd68:	005a      	lsls	r2, r3, #1
 800cd6a:	462b      	mov	r3, r5
 800cd6c:	68b9      	ldr	r1, [r7, #8]
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f000 fe87 	bl	800da82 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800cd74:	4622      	mov	r2, r4
 800cd76:	68b9      	ldr	r1, [r7, #8]
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f000 feb9 	bl	800daf0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800cd7e:	bf00      	nop
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bdb0      	pop	{r4, r5, r7, pc}

0800cd86 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800cd86:	b590      	push	{r4, r7, lr}
 800cd88:	b085      	sub	sp, #20
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	60f8      	str	r0, [r7, #12]
 800cd8e:	60b9      	str	r1, [r7, #8]
 800cd90:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 fee4 	bl	800db60 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>
 800cd98:	4622      	mov	r2, r4
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f000 fef2 	bl	800db86 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>
 800cda2:	4603      	mov	r3, r0
    }
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd90      	pop	{r4, r7, pc}

0800cdac <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800cdac:	b590      	push	{r4, r7, lr}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 fefe 	bl	800dbba <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	68b9      	ldr	r1, [r7, #8]
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f000 ff0c 	bl	800dbe0 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>
 800cdc8:	4603      	mov	r3, r0
    }
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd90      	pop	{r4, r7, pc}

0800cdd2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b082      	sub	sp, #8
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 ff17 	bl	800dc14 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	60b9      	str	r1, [r7, #8]
 800cdf8:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 ff15 	bl	800dc2e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800ce04:	68b9      	ldr	r1, [r7, #8]
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f000 ff23 	bl	800dc52 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b084      	sub	sp, #16
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	f107 030c 	add.w	r3, r7, #12
 800ce24:	4611      	mov	r1, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 ff2e 	bl	800dc88 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	1d1a      	adds	r2, r3, #4
 800ce42:	f107 030c 	add.w	r3, r7, #12
 800ce46:	4611      	mov	r1, r2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 ff1d 	bl	800dc88 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	4618      	mov	r0, r3
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	68b9      	ldr	r1, [r7, #8]
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f000 ff1c 	bl	800dca8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800ce70:	4603      	mov	r3, r0
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800ce7a:	b480      	push	{r7}
 800ce7c:	b083      	sub	sp, #12
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	6039      	str	r1, [r7, #0]
    }
 800ce84:	bf00      	nop
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	109b      	asrs	r3, r3, #2
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	68b9      	ldr	r1, [r7, #8]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7f6 fd23 	bl	800390e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800cec8:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	4618      	mov	r0, r3
 800cece:	f7f6 fb68 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800ced2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7ff ffbd 	bl	800ce58 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800cede:	697b      	ldr	r3, [r7, #20]
	}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800cee8:	b590      	push	{r4, r7, lr}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f000 fee9 	bl	800dccc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800cefa:	4604      	mov	r4, r0
 800cefc:	68b8      	ldr	r0, [r7, #8]
 800cefe:	f000 fee5 	bl	800dccc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800cf02:	4603      	mov	r3, r0
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	4619      	mov	r1, r3
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f000 feea 	bl	800dce2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 800cf0e:	4603      	mov	r3, r0
    }
 800cf10:	4618      	mov	r0, r3
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd90      	pop	{r4, r7, pc}

0800cf18 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800cf24:	68b9      	ldr	r1, [r7, #8]
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f000 fefc 	bl	800dd24 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 800cf2c:	bf00      	nop
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	370c      	adds	r7, #12
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800cf4a:	b5b0      	push	{r4, r5, r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f7f6 fe5e 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	68b8      	ldr	r0, [r7, #8]
 800cf60:	f7f6 fe5a 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 800cf64:	4605      	mov	r5, r0
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7f6 fe55 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	461a      	mov	r2, r3
 800cf72:	4629      	mov	r1, r5
 800cf74:	4620      	mov	r0, r4
 800cf76:	f000 feeb 	bl	800dd50 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	1d3b      	adds	r3, r7, #4
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 fef5 	bl	800dd70 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800cf86:	4603      	mov	r3, r0
    }
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bdb0      	pop	{r4, r5, r7, pc}

0800cf90 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	68b9      	ldr	r1, [r7, #8]
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f000 fef0 	bl	800dd88 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <_ZNSaIN3jlb4EdgeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fef6 	bl	800ddac <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800cfca:	b480      	push	{r7}
 800cfcc:	b083      	sub	sp, #12
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	601a      	str	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	605a      	str	r2, [r3, #4]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	609a      	str	r2, [r3, #8]
	{ }
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	607a      	str	r2, [r7, #4]
	if (__p)
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d005      	beq.n	800d010 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	68b9      	ldr	r1, [r7, #8]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 fed9 	bl	800ddc2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800d010:	bf00      	nop
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d02e:	b580      	push	{r7, lr}
 800d030:	b084      	sub	sp, #16
 800d032:	af00      	add	r7, sp, #0
 800d034:	60f8      	str	r0, [r7, #12]
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d03a:	68b9      	ldr	r1, [r7, #8]
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f000 fedf 	bl	800de00 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 800d042:	bf00      	nop
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b082      	sub	sp, #8
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 fee7 	bl	800de2c <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d066:	b480      	push	{r7}
 800d068:	b083      	sub	sp, #12
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4618      	mov	r0, r3
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6879      	ldr	r1, [r7, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 feda 	bl	800de46 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800d092:	68b9      	ldr	r1, [r7, #8]
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 fee8 	bl	800de6a <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	f107 030c 	add.w	r3, r7, #12
 800d0b2:	4611      	mov	r1, r2
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 fef2 	bl	800de9e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	1d1a      	adds	r2, r3, #4
 800d0d0:	f107 030c 	add.w	r3, r7, #12
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 fee1 	bl	800de9e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d0e6:	b480      	push	{r7}
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	68b9      	ldr	r1, [r7, #8]
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f000 fed5 	bl	800debe <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800d114:	4603      	mov	r3, r0
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	60f8      	str	r0, [r7, #12]
 800d126:	60b9      	str	r1, [r7, #8]
 800d128:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d12a:	68b9      	ldr	r1, [r7, #8]
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f000 fed8 	bl	800dee2 <_ZSt8_DestroyIPcEvT_S1_>
    }
 800d132:	bf00      	nop
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d13a:	b480      	push	{r7}
 800d13c:	b083      	sub	sp, #12
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4618      	mov	r0, r3
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800d150:	b5b0      	push	{r4, r5, r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	d012      	beq.n	800d18c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d166:	687c      	ldr	r4, [r7, #4]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685d      	ldr	r5, [r3, #4]
 800d16c:	6838      	ldr	r0, [r7, #0]
 800d16e:	f000 fece 	bl	800df0e <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d172:	4603      	mov	r3, r0
 800d174:	461a      	mov	r2, r3
 800d176:	4629      	mov	r1, r5
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 ff2a 	bl	800dfd2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	f103 0218 	add.w	r2, r3, #24
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	605a      	str	r2, [r3, #4]
 800d18a:	e00c      	b.n	800d1a6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 ff32 	bl	800dff6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800d192:	4604      	mov	r4, r0
 800d194:	6838      	ldr	r0, [r7, #0]
 800d196:	f000 feba 	bl	800df0e <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d19a:	4603      	mov	r3, r0
 800d19c:	461a      	mov	r2, r3
 800d19e:	4621      	mov	r1, r4
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 ff39 	bl	800e018 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 ffc0 	bl	800e12c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 800d1ac:	4603      	mov	r3, r0
      }
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bdb0      	pop	{r4, r5, r7, pc}

0800d1b6 <_ZNSaIN3jlb4NodeEEC1Ev>:
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b082      	sub	sp, #8
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 ffcf 	bl	800e162 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800d1ce:	b480      	push	{r7}
 800d1d0:	b083      	sub	sp, #12
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	601a      	str	r2, [r3, #0]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	605a      	str	r2, [r3, #4]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	609a      	str	r2, [r3, #8]
	{ }
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b084      	sub	sp, #16
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
	if (__p)
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d005      	beq.n	800d214 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 ffb2 	bl	800e178 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 800d214:	bf00      	nop
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4618      	mov	r0, r3
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d23e:	68b9      	ldr	r1, [r7, #8]
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f000 ffb8 	bl	800e1b6 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 800d246:	bf00      	nop
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d24e:	b480      	push	{r7}
 800d250:	b083      	sub	sp, #12
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4618      	mov	r0, r3
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800d264:	b5b0      	push	{r4, r5, r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685a      	ldr	r2, [r3, #4]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	429a      	cmp	r2, r3
 800d278:	d012      	beq.n	800d2a0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d27a:	687c      	ldr	r4, [r7, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685d      	ldr	r5, [r3, #4]
 800d280:	6838      	ldr	r0, [r7, #0]
 800d282:	f000 ffae 	bl	800e1e2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d286:	4603      	mov	r3, r0
 800d288:	461a      	mov	r2, r3
 800d28a:	4629      	mov	r1, r5
 800d28c:	4620      	mov	r0, r4
 800d28e:	f000 ffea 	bl	800e266 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	f103 0218 	add.w	r2, r3, #24
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	605a      	str	r2, [r3, #4]
 800d29e:	e00c      	b.n	800d2ba <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fff2 	bl	800e28a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	6838      	ldr	r0, [r7, #0]
 800d2aa:	f000 ff9a 	bl	800e1e2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fff9 	bl	800e2ac <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f001 f88a 	bl	800e3d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800d2c0:	4603      	mov	r3, r0
      }
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bdb0      	pop	{r4, r5, r7, pc}

0800d2ca <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6839      	ldr	r1, [r7, #0]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f000 fdb4 	bl	800de46 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800d300:	b590      	push	{r4, r7, lr}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff ffed 	bl	800d2e8 <_ZNKSt16initializer_listIcE5beginEv>
 800d30e:	4604      	mov	r4, r0
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f001 f87a 	bl	800e40a <_ZNKSt16initializer_listIcE4sizeEv>
 800d316:	4603      	mov	r3, r0
 800d318:	4423      	add	r3, r4
 800d31a:	4618      	mov	r0, r3
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd90      	pop	{r4, r7, pc}

0800d322 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800d322:	b5b0      	push	{r4, r5, r7, lr}
 800d324:	b082      	sub	sp, #8
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
 800d32a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800d32c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d32e:	1d3b      	adds	r3, r7, #4
 800d330:	4618      	mov	r0, r3
 800d332:	f001 f876 	bl	800e422 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d336:	462a      	mov	r2, r5
 800d338:	6839      	ldr	r1, [r7, #0]
 800d33a:	4620      	mov	r0, r4
 800d33c:	f001 f87b 	bl	800e436 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d340:	4603      	mov	r3, r0
    }
 800d342:	4618      	mov	r0, r3
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bdb0      	pop	{r4, r5, r7, pc}

0800d34a <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800d34a:	b590      	push	{r4, r7, lr}
 800d34c:	b087      	sub	sp, #28
 800d34e:	af00      	add	r7, sp, #0
 800d350:	60f8      	str	r0, [r7, #12]
 800d352:	60b9      	str	r1, [r7, #8]
 800d354:	607a      	str	r2, [r7, #4]
 800d356:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800d358:	6879      	ldr	r1, [r7, #4]
 800d35a:	68b8      	ldr	r0, [r7, #8]
 800d35c:	f7ff ffe1 	bl	800d322 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800d360:	4603      	mov	r3, r0
 800d362:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800d364:	68fc      	ldr	r4, [r7, #12]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff febc 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800d36e:	4603      	mov	r3, r0
 800d370:	4619      	mov	r1, r3
 800d372:	6978      	ldr	r0, [r7, #20]
 800d374:	f001 f86e 	bl	800e454 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 800d378:	4603      	mov	r3, r0
 800d37a:	4619      	mov	r1, r3
 800d37c:	4620      	mov	r0, r4
 800d37e:	f001 f891 	bl	800e4a4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800d382:	4602      	mov	r2, r0
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	441a      	add	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff fea3 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800d3a0:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	68b8      	ldr	r0, [r7, #8]
 800d3a8:	f001 f890 	bl	800e4cc <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 800d3ac:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	605a      	str	r2, [r3, #4]
	}
 800d3b2:	bf00      	nop
 800d3b4:	371c      	adds	r7, #28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd90      	pop	{r4, r7, pc}

0800d3ba <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b082      	sub	sp, #8
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f7f6 f8ba 	bl	800353c <_ZNSaIfEC1Ev>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f001 f88f 	bl	800e4ee <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800d3da:	b590      	push	{r4, r7, lr}
 800d3dc:	b089      	sub	sp, #36	; 0x24
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800d3e4:	2004      	movs	r0, #4
 800d3e6:	f7fb fa44 	bl	8008872 <_ZSt16__deque_buf_sizej>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800d3f6:	2308      	movs	r3, #8
 800d3f8:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	3302      	adds	r3, #2
 800d3fe:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800d400:	f107 0210 	add.w	r2, r7, #16
 800d404:	f107 030c 	add.w	r3, r7, #12
 800d408:	4611      	mov	r1, r2
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7f6 faf7 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 800d410:	4603      	mov	r3, r0
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f001 f87e 	bl	800e520 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800d424:	4602      	mov	r2, r0
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6859      	ldr	r1, [r3, #4]
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	1acb      	subs	r3, r1, r3
 800d436:	085b      	lsrs	r3, r3, #1
 800d438:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800d43a:	4413      	add	r3, r2
 800d43c:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	69ba      	ldr	r2, [r7, #24]
 800d444:	4413      	add	r3, r2
 800d446:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800d448:	697a      	ldr	r2, [r7, #20]
 800d44a:	69b9      	ldr	r1, [r7, #24]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f001 f884 	bl	800e55a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	3308      	adds	r3, #8
 800d456:	69b9      	ldr	r1, [r7, #24]
 800d458:	4618      	mov	r0, r3
 800d45a:	f001 f899 	bl	800e590 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f103 0218 	add.w	r2, r3, #24
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	3b04      	subs	r3, #4
 800d468:	4619      	mov	r1, r3
 800d46a:	4610      	mov	r0, r2
 800d46c:	f001 f890 	bl	800e590 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68da      	ldr	r2, [r3, #12]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800d47c:	2004      	movs	r0, #4
 800d47e:	f7fb f9f8 	bl	8008872 <_ZSt16__deque_buf_sizej>
 800d482:	4602      	mov	r2, r0
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	fbb3 f1f2 	udiv	r1, r3, r2
 800d48a:	fb01 f202 	mul.w	r2, r1, r2
 800d48e:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	619a      	str	r2, [r3, #24]
    }
 800d498:	bf00      	nop
 800d49a:	3724      	adds	r7, #36	; 0x24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd90      	pop	{r4, r7, pc}

0800d4a0 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	617b      	str	r3, [r7, #20]
 800d4b0:	e008      	b.n	800d4c4 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x24>
	_M_deallocate_node(*__n);
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f001 f882 	bl	800e5c2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	617b      	str	r3, [r7, #20]
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d3f2      	bcc.n	800d4b2 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x12>
    }
 800d4cc:	bf00      	nop
 800d4ce:	bf00      	nop
 800d4d0:	3718      	adds	r7, #24
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b086      	sub	sp, #24
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800d4e2:	f107 0314 	add.w	r3, r7, #20
 800d4e6:	68f9      	ldr	r1, [r7, #12]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f001 f87d 	bl	800e5e8 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800d4ee:	f107 0314 	add.w	r3, r7, #20
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	68b9      	ldr	r1, [r7, #8]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f001 f892 	bl	800e620 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
      }
 800d4fc:	f107 0314 	add.w	r3, r7, #20
 800d500:	4618      	mov	r0, r3
 800d502:	f001 f882 	bl	800e60a <_ZNSaIPfED1Ev>
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4618      	mov	r0, r3
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800d522:	b480      	push	{r7}
 800d524:	b08d      	sub	sp, #52	; 0x34
 800d526:	af00      	add	r7, sp, #0
 800d528:	60f8      	str	r0, [r7, #12]
 800d52a:	60b9      	str	r1, [r7, #8]
 800d52c:	607a      	str	r2, [r7, #4]
 800d52e:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800d530:	bf00      	nop
 800d532:	3734      	adds	r7, #52	; 0x34
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800d53c:	b5b0      	push	{r4, r5, r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff f9b9 	bl	800c8be <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800d54c:	4604      	mov	r4, r0
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f001 f885 	bl	800e65e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 800d554:	4603      	mov	r3, r0
 800d556:	429c      	cmp	r4, r3
 800d558:	bf0c      	ite	eq
 800d55a:	2301      	moveq	r3, #1
 800d55c:	2300      	movne	r3, #0
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 800d564:	4816      	ldr	r0, [pc, #88]	; (800d5c0 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 800d566:	f013 fc37 	bl	8020dd8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800d56a:	2101      	movs	r1, #1
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 f887 	bl	800e680 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d578:	1d1c      	adds	r4, r3, #4
 800d57a:	4610      	mov	r0, r2
 800d57c:	f001 f89b 	bl	800e6b6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800d580:	4603      	mov	r3, r0
 800d582:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800d584:	687c      	ldr	r4, [r7, #4]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	699d      	ldr	r5, [r3, #24]
 800d58a:	6838      	ldr	r0, [r7, #0]
 800d58c:	f7f6 f938 	bl	8003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d590:	4603      	mov	r3, r0
 800d592:	461a      	mov	r2, r3
 800d594:	4629      	mov	r1, r5
 800d596:	4620      	mov	r0, r4
 800d598:	f7f6 f852 	bl	8003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f103 0218 	add.w	r2, r3, #24
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a6:	3304      	adds	r3, #4
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	4610      	mov	r0, r2
 800d5ac:	f000 fff0 	bl	800e590 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	69da      	ldr	r2, [r3, #28]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800d5b8:	bf00      	nop
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bdb0      	pop	{r4, r5, r7, pc}
 800d5c0:	080257f8 	.word	0x080257f8

0800d5c4 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800d5ce:	f001 f884 	bl	800e6da <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68da      	ldr	r2, [r3, #12]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	109b      	asrs	r3, r3, #2
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	bf14      	ite	ne
 800d5ec:	2301      	movne	r3, #1
 800d5ee:	2300      	moveq	r3, #0
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	6811      	ldr	r1, [r2, #0]
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	6852      	ldr	r2, [r2, #4]
 800d600:	1a8a      	subs	r2, r1, r2
 800d602:	1092      	asrs	r2, r2, #2
 800d604:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	6891      	ldr	r1, [r2, #8]
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	6812      	ldr	r2, [r2, #0]
 800d60e:	1a8a      	subs	r2, r1, r2
 800d610:	1092      	asrs	r2, r2, #2
 800d612:	4413      	add	r3, r2
      }
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800d626:	6838      	ldr	r0, [r7, #0]
 800d628:	f7f6 fa2f 	bl	8003a8a <_ZSt10destroy_atIfEvPT_>
	}
 800d62c:	bf00      	nop
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff ff64 	bl	800d50c <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d644:	4602      	mov	r2, r0
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	4619      	mov	r1, r3
 800d64c:	4610      	mov	r0, r2
 800d64e:	f7ff ffe5 	bl	800d61c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	4619      	mov	r1, r3
 800d65a:	4610      	mov	r0, r2
 800d65c:	f000 ffb1 	bl	800e5c2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f103 0208 	add.w	r2, r3, #8
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	3304      	adds	r3, #4
 800d66c:	4619      	mov	r1, r3
 800d66e:	4610      	mov	r0, r2
 800d670:	f000 ff8e 	bl	800e590 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68da      	ldr	r2, [r3, #12]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	609a      	str	r2, [r3, #8]
    }
 800d67c:	bf00      	nop
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	601a      	str	r2, [r3, #0]
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	685a      	ldr	r2, [r3, #4]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	689a      	ldr	r2, [r3, #8]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	609a      	str	r2, [r3, #8]
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	68da      	ldr	r2, [r3, #12]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	60da      	str	r2, [r3, #12]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	bf0c      	ite	eq
 800d6d2:	2301      	moveq	r3, #1
 800d6d4:	2300      	movne	r3, #0
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	4618      	mov	r0, r3
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
	++_M_cur;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	1d1a      	adds	r2, r3, #4
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d10a      	bne.n	800d718 <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	3304      	adds	r3, #4
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 ff40 	bl	800e590 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	601a      	str	r2, [r3, #0]
	return *this;
 800d718:	687b      	ldr	r3, [r7, #4]
      }
 800d71a:	4618      	mov	r0, r3
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800d722:	b480      	push	{r7}
 800d724:	b083      	sub	sp, #12
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4618      	mov	r0, r3
 800d730:	370c      	adds	r7, #12
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr

0800d73a <_ZNKSt16initializer_listIfE5beginEv>:
      begin() const noexcept { return _M_array; }
 800d73a:	b480      	push	{r7}
 800d73c:	b083      	sub	sp, #12
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4618      	mov	r0, r3
 800d748:	370c      	adds	r7, #12
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr

0800d752 <_ZNKSt16initializer_listIfE3endEv>:
      end() const noexcept { return begin() + size(); }
 800d752:	b590      	push	{r4, r7, lr}
 800d754:	b083      	sub	sp, #12
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff ffed 	bl	800d73a <_ZNKSt16initializer_listIfE5beginEv>
 800d760:	4604      	mov	r4, r0
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 ffc1 	bl	800e6ea <_ZNKSt16initializer_listIfE4sizeEv>
 800d768:	4603      	mov	r3, r0
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4423      	add	r3, r4
 800d76e:	4618      	mov	r0, r3
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	bd90      	pop	{r4, r7, pc}

0800d776 <_ZSt11min_elementIPKfET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the smallest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800d776:	b590      	push	{r4, r7, lr}
 800d778:	b083      	sub	sp, #12
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__min_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800d780:	f7f6 ff3c 	bl	80045fc <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800d784:	4622      	mov	r2, r4
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 ffd4 	bl	800e736 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 800d78e:	4603      	mov	r3, r0
    }
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	bd90      	pop	{r4, r7, pc}

0800d798 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800d7c0:	f107 030c 	add.w	r3, r7, #12
 800d7c4:	6879      	ldr	r1, [r7, #4]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f000 ffe0 	bl	800e78c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800d7d6:	b590      	push	{r4, r7, lr}
 800d7d8:	b085      	sub	sp, #20
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 800d7e2:	f107 030c 	add.w	r3, r7, #12
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f000 ffdf 	bl	800e7aa <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 800d7ec:	4623      	mov	r3, r4
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	68b9      	ldr	r1, [r7, #8]
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f001 f82a 	bl	800e84c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 800d7f8:	4603      	mov	r3, r0
    }
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd90      	pop	{r4, r7, pc}

0800d802 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800d802:	b480      	push	{r7}
 800d804:	b083      	sub	sp, #12
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	605a      	str	r2, [r3, #4]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	609a      	str	r2, [r3, #8]
	{ }
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4618      	mov	r0, r3
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	60f8      	str	r0, [r7, #12]
 800d832:	60b9      	str	r1, [r7, #8]
 800d834:	607a      	str	r2, [r7, #4]
	if (__p)
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d005      	beq.n	800d848 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	68b9      	ldr	r1, [r7, #8]
 800d842:	4618      	mov	r0, r3
 800d844:	f001 f89b 	bl	800e97e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800d848:	bf00      	nop
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800d850:	b590      	push	{r4, r7, lr}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685a      	ldr	r2, [r3, #4]
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00e      	beq.n	800d888 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fc38 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800d876:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800d878:	461a      	mov	r2, r3
 800d87a:	4621      	mov	r1, r4
 800d87c:	6838      	ldr	r0, [r7, #0]
 800d87e:	f7ff fc4e 	bl	800d11e <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	605a      	str	r2, [r3, #4]
      }
 800d888:	bf00      	nop
 800d88a:	3714      	adds	r7, #20
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd90      	pop	{r4, r7, pc}

0800d890 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4618      	mov	r0, r3
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_>:
      vector<_Tp, _Alloc>::
 800d8a6:	b5b0      	push	{r4, r5, r7, lr}
 800d8a8:	b082      	sub	sp, #8
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d011      	beq.n	800d8e0 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d8bc:	687c      	ldr	r4, [r7, #4]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685d      	ldr	r5, [r3, #4]
 800d8c2:	6838      	ldr	r0, [r7, #0]
 800d8c4:	f001 f87a 	bl	800e9bc <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f001 f895 	bl	800e9fe <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	1c5a      	adds	r2, r3, #1
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	605a      	str	r2, [r3, #4]
 800d8de:	e00c      	b.n	800d8fa <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff f8d2 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	6838      	ldr	r0, [r7, #0]
 800d8ea:	f001 f867 	bl	800e9bc <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4621      	mov	r1, r4
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f001 f895 	bl	800ea24 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
	return back();
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f001 f90c 	bl	800eb18 <_ZNSt6vectorIcSaIcEE4backEv>
 800d900:	4603      	mov	r3, r0
      }
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bdb0      	pop	{r4, r5, r7, pc}

0800d90a <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800d90a:	b480      	push	{r7}
 800d90c:	b083      	sub	sp, #12
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	4618      	mov	r0, r3
 800d918:	370c      	adds	r7, #12
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr

0800d922 <_ZNKSt6vectorIcSaIcEE6cbeginEv>:
      cbegin() const noexcept
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	f107 030c 	add.w	r3, r7, #12
 800d930:	4611      	mov	r1, r2
 800d932:	4618      	mov	r0, r3
 800d934:	f000 fab3 	bl	800de9e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	4618      	mov	r0, r3
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d942:	b590      	push	{r4, r7, lr}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f001 f8fe 	bl	800eb4e <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800d952:	4603      	mov	r3, r0
 800d954:	681c      	ldr	r4, [r3, #0]
 800d956:	6838      	ldr	r0, [r7, #0]
 800d958:	f001 f8f9 	bl	800eb4e <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800d95c:	4603      	mov	r3, r0
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	1ae3      	subs	r3, r4, r3
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	bd90      	pop	{r4, r7, pc}

0800d96a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b084      	sub	sp, #16
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
 800d972:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	4413      	add	r3, r2
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	f107 020c 	add.w	r2, r7, #12
 800d982:	f107 0308 	add.w	r3, r7, #8
 800d986:	4611      	mov	r1, r2
 800d988:	4618      	mov	r0, r3
 800d98a:	f7ff ff05 	bl	800d798 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>:
	_M_insert_dispatch(iterator __pos, _InputIterator __first,
 800d998:	b5b0      	push	{r4, r5, r7, lr}
 800d99a:	b088      	sub	sp, #32
 800d99c:	af02      	add	r7, sp, #8
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
	  _M_range_insert(__pos, __first, __last,
 800d9a6:	687c      	ldr	r4, [r7, #4]
			  std::__iterator_category(__first));
 800d9a8:	1d3b      	adds	r3, r7, #4
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7ff f999 	bl	800cce2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_insert(__pos, __first, __last,
 800d9b0:	f88d 5000 	strb.w	r5, [sp]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	4622      	mov	r2, r4
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f001 f916 	bl	800ebec <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
	}
 800d9c0:	bf00      	nop
 800d9c2:	3718      	adds	r7, #24
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bdb0      	pop	{r4, r5, r7, pc}

0800d9c8 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>:
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d012      	beq.n	800da16 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3a>
      --__last;
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800d9f6:	e009      	b.n	800da0c <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x30>
	  std::iter_swap(__first, __last);
 800d9f8:	68b9      	ldr	r1, [r7, #8]
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f001 f9fe 	bl	800edfc <_ZSt9iter_swapIPbS0_EvT_T0_>
	  ++__first;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3301      	adds	r3, #1
 800da04:	60fb      	str	r3, [r7, #12]
	  --__last;
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	3b01      	subs	r3, #1
 800da0a:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	429a      	cmp	r2, r3
 800da12:	d3f1      	bcc.n	800d9f8 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x1c>
 800da14:	e000      	b.n	800da18 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3c>
	return;
 800da16:	bf00      	nop
    }
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800da1e:	b480      	push	{r7}
 800da20:	b083      	sub	sp, #12
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
    { return __it; }
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4618      	mov	r0, r3
 800da2a:	370c      	adds	r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr

0800da34 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4618      	mov	r0, r3
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	60f8      	str	r0, [r7, #12]
 800da52:	60b9      	str	r1, [r7, #8]
 800da54:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	68b9      	ldr	r1, [r7, #8]
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f001 f9db 	bl	800ee16 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800da60:	4603      	mov	r3, r0
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800da6a:	b480      	push	{r7}
 800da6c:	b083      	sub	sp, #12
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
 800da72:	6039      	str	r1, [r7, #0]
    { return __res; }
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	4618      	mov	r0, r3
 800da78:	370c      	adds	r7, #12
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr

0800da82 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800da82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da84:	b087      	sub	sp, #28
 800da86:	af00      	add	r7, sp, #0
 800da88:	60f8      	str	r0, [r7, #12]
 800da8a:	60b9      	str	r1, [r7, #8]
 800da8c:	607a      	str	r2, [r7, #4]
 800da8e:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800da90:	e01b      	b.n	800daca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d106      	bne.n	800daa6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800da98:	4633      	mov	r3, r6
 800da9a:	68ba      	ldr	r2, [r7, #8]
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f001 f9f4 	bl	800ee8c <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 800daa4:	e021      	b.n	800daea <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800daac:	462a      	mov	r2, r5
 800daae:	68b9      	ldr	r1, [r7, #8]
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f001 fa02 	bl	800eeba <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 800dab6:	4603      	mov	r3, r0
 800dab8:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800daba:	4623      	mov	r3, r4
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	68b9      	ldr	r1, [r7, #8]
 800dac0:	6978      	ldr	r0, [r7, #20]
 800dac2:	f7ff ffde 	bl	800da82 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800daca:	f107 020c 	add.w	r2, r7, #12
 800dace:	f107 0308 	add.w	r3, r7, #8
 800dad2:	4611      	mov	r1, r2
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7f5 ff05 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b10      	cmp	r3, #16
 800dade:	bfcc      	ite	gt
 800dae0:	2301      	movgt	r3, #1
 800dae2:	2300      	movle	r3, #0
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1d3      	bne.n	800da92 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 800daea:	371c      	adds	r7, #28
 800daec:	46bd      	mov	sp, r7
 800daee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800daf0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800daf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800dafc:	f107 020c 	add.w	r2, r7, #12
 800db00:	f107 0308 	add.w	r3, r7, #8
 800db04:	4611      	mov	r1, r2
 800db06:	4618      	mov	r0, r3
 800db08:	f7f5 feec 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b10      	cmp	r3, #16
 800db10:	bfcc      	ite	gt
 800db12:	2301      	movgt	r3, #1
 800db14:	2300      	movle	r3, #0
 800db16:	b2db      	uxtb	r3, r3
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d018      	beq.n	800db4e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800db1c:	f107 030c 	add.w	r3, r7, #12
 800db20:	2110      	movs	r1, #16
 800db22:	4618      	mov	r0, r3
 800db24:	f001 fa09 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800db28:	4603      	mov	r3, r0
 800db2a:	4632      	mov	r2, r6
 800db2c:	4619      	mov	r1, r3
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f001 fa74 	bl	800f01c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800db34:	f107 030c 	add.w	r3, r7, #12
 800db38:	2110      	movs	r1, #16
 800db3a:	4618      	mov	r0, r3
 800db3c:	f001 f9fd 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800db40:	4603      	mov	r3, r0
 800db42:	462a      	mov	r2, r5
 800db44:	68b9      	ldr	r1, [r7, #8]
 800db46:	4618      	mov	r0, r3
 800db48:	f001 fad1 	bl	800f0ee <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800db4c:	e004      	b.n	800db58 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800db4e:	4622      	mov	r2, r4
 800db50:	68b9      	ldr	r1, [r7, #8]
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f001 fa62 	bl	800f01c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800db58:	bf00      	nop
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db60 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 800db60:	b5b0      	push	{r4, r5, r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800db68:	1d3b      	adds	r3, r7, #4
 800db6a:	4618      	mov	r0, r3
 800db6c:	f001 fae7 	bl	800f13e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800db70:	f107 030c 	add.w	r3, r7, #12
 800db74:	4629      	mov	r1, r5
 800db76:	4618      	mov	r0, r3
 800db78:	f001 faec 	bl	800f154 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800db7c:	bf00      	nop
 800db7e:	4620      	mov	r0, r4
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bdb0      	pop	{r4, r5, r7, pc}

0800db86 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800db86:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db88:	b085      	sub	sp, #20
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	60f8      	str	r0, [r7, #12]
 800db8e:	60b9      	str	r1, [r7, #8]
 800db90:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800db92:	68fc      	ldr	r4, [r7, #12]
 800db94:	7938      	ldrb	r0, [r7, #4]
 800db96:	f001 faeb 	bl	800f170 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800db9a:	f107 030c 	add.w	r3, r7, #12
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7ff ff12 	bl	800d9c8 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800dba4:	4633      	mov	r3, r6
 800dba6:	462a      	mov	r2, r5
 800dba8:	68b9      	ldr	r1, [r7, #8]
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f001 fb07 	bl	800f1be <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800dbb0:	4603      	mov	r3, r0
    }
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbba <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 800dbba:	b5b0      	push	{r4, r5, r7, lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800dbc2:	1d3b      	adds	r3, r7, #4
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f001 fb79 	bl	800f2bc <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800dbca:	f107 030c 	add.w	r3, r7, #12
 800dbce:	4629      	mov	r1, r5
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f001 fb7e 	bl	800f2d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800dbd6:	bf00      	nop
 800dbd8:	4620      	mov	r0, r4
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bdb0      	pop	{r4, r5, r7, pc}

0800dbe0 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800dbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800dbec:	68fc      	ldr	r4, [r7, #12]
 800dbee:	7938      	ldrb	r0, [r7, #4]
 800dbf0:	f001 fb7d 	bl	800f2ee <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800dbf4:	f107 030c 	add.w	r3, r7, #12
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7ff fee5 	bl	800d9c8 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800dbfe:	4633      	mov	r3, r6
 800dc00:	462a      	mov	r2, r5
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	4620      	mov	r0, r4
 800dc06:	f001 fb99 	bl	800f33c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800dc0a:	4603      	mov	r3, r0
    }
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3714      	adds	r7, #20
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc14 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f001 fc0a 	bl	800f43a <_ZNSaIfEC1ERKS_>
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800dc38:	6839      	ldr	r1, [r7, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f001 fbfd 	bl	800f43a <_ZNSaIfEC1ERKS_>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7f5 fc86 	bl	8003554 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800dc5c:	6839      	ldr	r1, [r7, #0]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7f5 fe55 	bl	800390e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800dc64:	4602      	mov	r2, r0
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	441a      	add	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	609a      	str	r2, [r3, #8]
      }
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	68b9      	ldr	r1, [r7, #8]
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f001 fbca 	bl	800f456 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800dcc2:	4603      	mov	r3, r0
    }
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	370c      	adds	r7, #12
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800dce2:	b5b0      	push	{r4, r5, r7, lr}
 800dce4:	b084      	sub	sp, #16
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	60f8      	str	r0, [r7, #12]
 800dcea:	60b9      	str	r1, [r7, #8]
 800dcec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f001 fbc1 	bl	800f476 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	68b8      	ldr	r0, [r7, #8]
 800dcf8:	f001 fbbd 	bl	800f476 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f001 fbc7 	bl	800f492 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800dd04:	4603      	mov	r3, r0
 800dd06:	461a      	mov	r2, r3
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f001 fbcf 	bl	800f4ae <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800dd10:	4603      	mov	r3, r0
 800dd12:	4619      	mov	r1, r3
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f001 fbda 	bl	800f4ce <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800dd1a:	4603      	mov	r3, r0
    }
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3710      	adds	r7, #16
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bdb0      	pop	{r4, r5, r7, pc}

0800dd24 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800dd2e:	f7f4 feed 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d004      	beq.n	800dd42 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f001 fbde 	bl	800f4fc <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 800dd40:	e003      	b.n	800dd4a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f001 fc00 	bl	800f54a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	68b9      	ldr	r1, [r7, #8]
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f001 fbfd 	bl	800f560 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800dd66:	4603      	mov	r3, r0
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
    { return __res; }
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800dd94:	2301      	movs	r3, #1
 800dd96:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	68b9      	ldr	r1, [r7, #8]
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f001 fbfc 	bl	800f59a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 800dda2:	4603      	mov	r3, r0
    }
 800dda4:	4618      	mov	r0, r3
 800dda6:	3718      	adds	r7, #24
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr

0800ddc2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b088      	sub	sp, #32
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	60f8      	str	r0, [r7, #12]
 800ddca:	60b9      	str	r1, [r7, #8]
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	61fb      	str	r3, [r7, #28]
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	61bb      	str	r3, [r7, #24]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800ddda:	f7f4 fe97 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d003      	beq.n	800ddec <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800dde4:	69b8      	ldr	r0, [r7, #24]
 800dde6:	f012 ffd9 	bl	8020d9c <_ZdlPv>
	    return;
 800ddea:	e005      	b.n	800ddf8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	69b9      	ldr	r1, [r7, #24]
 800ddf0:	69f8      	ldr	r0, [r7, #28]
 800ddf2:	f002 fc0e 	bl	8010612 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800ddf6:	bf00      	nop
 800ddf8:	bf00      	nop
 800ddfa:	3720      	adds	r7, #32
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800de0a:	f7f4 fe7f 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d004      	beq.n	800de1e <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f001 fbcf 	bl	800f5ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 800de1c:	e003      	b.n	800de26 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f001 fbca 	bl	800f5ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f012 ffc5 	bl	8020dc8 <_ZNSaIcEC1ERKS_>
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	3708      	adds	r7, #8
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800de46:	b580      	push	{r7, lr}
 800de48:	b082      	sub	sp, #8
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
 800de4e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f012 ffb8 	bl	8020dc8 <_ZNSaIcEC1ERKS_>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7ff fcd1 	bl	800d802 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4618      	mov	r0, r3
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b082      	sub	sp, #8
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fb14 	bl	800e4a4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800de7c:	4602      	mov	r2, r0
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	441a      	add	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	609a      	str	r2, [r3, #8]
      }
 800de96:	bf00      	nop
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800de9e:	b480      	push	{r7}
 800dea0:	b083      	sub	sp, #12
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
 800dea6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	601a      	str	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4618      	mov	r0, r3
 800deb4:	370c      	adds	r7, #12
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr

0800debe <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800debe:	b580      	push	{r7, lr}
 800dec0:	b086      	sub	sp, #24
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	60f8      	str	r0, [r7, #12]
 800dec6:	60b9      	str	r1, [r7, #8]
 800dec8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800deca:	2301      	movs	r3, #1
 800decc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	68b9      	ldr	r1, [r7, #8]
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f001 fb8a 	bl	800f5ec <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 800ded8:	4603      	mov	r3, r0
    }
 800deda:	4618      	mov	r0, r3
 800dedc:	3718      	adds	r7, #24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b082      	sub	sp, #8
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
 800deea:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800deec:	f7f4 fe0e 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d004      	beq.n	800df00 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f001 fb87 	bl	800f60c <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 800defe:	e003      	b.n	800df08 <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f001 fb9b 	bl	800f63e <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800df0e:	b480      	push	{r7}
 800df10:	b083      	sub	sp, #12
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4618      	mov	r0, r3
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	4611      	mov	r1, r2
 800df34:	4618      	mov	r0, r3
 800df36:	f001 fb8d 	bl	800f654 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4618      	mov	r0, r3
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	683a      	ldr	r2, [r7, #0]
 800df52:	4611      	mov	r1, r2
 800df54:	4618      	mov	r0, r3
 800df56:	f7ff ffe5 	bl	800df24 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	781a      	ldrb	r2, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	605a      	str	r2, [r3, #4]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f103 0208 	add.w	r2, r3, #8
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	3308      	adds	r3, #8
 800df88:	4619      	mov	r1, r3
 800df8a:	4610      	mov	r0, r2
 800df8c:	f7ff ffda 	bl	800df44 <_ZNSt6vectorIcSaIcEEC1EOS1_>
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	695a      	ldr	r2, [r3, #20]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	615a      	str	r2, [r3, #20]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4618      	mov	r0, r3
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800dfa2:	b5b0      	push	{r4, r5, r7, lr}
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800dfac:	6838      	ldr	r0, [r7, #0]
 800dfae:	f7ff ffae 	bl	800df0e <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	2018      	movs	r0, #24
 800dfba:	f7f4 fdaf 	bl	8002b1c <_ZnwjPv>
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f7ff ffce 	bl	800df64 <_ZN3jlb4EdgeC1EOS0_>
 800dfc8:	4623      	mov	r3, r4
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bdb0      	pop	{r4, r5, r7, pc}

0800dfd2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b084      	sub	sp, #16
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	60f8      	str	r0, [r7, #12]
 800dfda:	60b9      	str	r1, [r7, #8]
 800dfdc:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff ff95 	bl	800df0e <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	68b8      	ldr	r0, [r7, #8]
 800dfea:	f7ff ffda 	bl	800dfa2 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800dfee:	bf00      	nop
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b084      	sub	sp, #16
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	1d1a      	adds	r2, r3, #4
 800e002:	f107 030c 	add.w	r3, r7, #12
 800e006:	4611      	mov	r1, r2
 800e008:	4618      	mov	r0, r3
 800e00a:	f001 fb3e 	bl	800f68a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800e018:	b5b0      	push	{r4, r5, r7, lr}
 800e01a:	b08c      	sub	sp, #48	; 0x30
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800e024:	4a3f      	ldr	r2, [pc, #252]	; (800e124 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 800e026:	2101      	movs	r1, #1
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f001 fb3e 	bl	800f6aa <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 800e02e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f001 fb7b 	bl	800f738 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800e042:	4603      	mov	r3, r0
 800e044:	617b      	str	r3, [r7, #20]
 800e046:	f107 0214 	add.w	r2, r7, #20
 800e04a:	f107 0308 	add.w	r3, r7, #8
 800e04e:	4611      	mov	r1, r2
 800e050:	4618      	mov	r0, r3
 800e052:	f001 fb81 	bl	800f758 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e056:	4603      	mov	r3, r0
 800e058:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e05e:	4618      	mov	r0, r3
 800e060:	f001 fb94 	bl	800f78c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800e064:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800e06a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800e06c:	6a3a      	ldr	r2, [r7, #32]
 800e06e:	4613      	mov	r3, r2
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	4413      	add	r3, r2
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	189d      	adds	r5, r3, r2
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7ff ff46 	bl	800df0e <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e082:	4603      	mov	r3, r0
 800e084:	461a      	mov	r2, r3
 800e086:	4629      	mov	r1, r5
 800e088:	4620      	mov	r0, r4
 800e08a:	f7ff ffa2 	bl	800dfd2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800e08e:	2300      	movs	r3, #0
 800e090:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800e092:	f107 0308 	add.w	r3, r7, #8
 800e096:	4618      	mov	r0, r3
 800e098:	f001 fba0 	bl	800f7dc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800e09c:	4603      	mov	r3, r0
 800e09e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fe ffb8 	bl	800d018 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e0a8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800e0aa:	69fa      	ldr	r2, [r7, #28]
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0b0:	f001 fb80 	bl	800f7b4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800e0b4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	3318      	adds	r3, #24
 800e0ba:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800e0bc:	f107 0308 	add.w	r3, r7, #8
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f001 fb8b 	bl	800f7dc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe ffa3 	bl	800d018 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e0d2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800e0d4:	69ba      	ldr	r2, [r7, #24]
 800e0d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f001 fb6b 	bl	800f7b4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800e0de:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800e0e0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	689a      	ldr	r2, [r3, #8]
 800e0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	10db      	asrs	r3, r3, #3
 800e0ec:	4a0e      	ldr	r2, [pc, #56]	; (800e128 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 800e0ee:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0f6:	f7fe ff7c 	bl	800cff2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	69fa      	ldr	r2, [r7, #28]
 800e0fe:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	69ba      	ldr	r2, [r7, #24]
 800e104:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800e106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e108:	4613      	mov	r3, r2
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	4413      	add	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	461a      	mov	r2, r3
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	441a      	add	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	609a      	str	r2, [r3, #8]
    }
 800e11a:	bf00      	nop
 800e11c:	3730      	adds	r7, #48	; 0x30
 800e11e:	46bd      	mov	sp, r7
 800e120:	bdb0      	pop	{r4, r5, r7, pc}
 800e122:	bf00      	nop
 800e124:	08025828 	.word	0x08025828
 800e128:	aaaaaaab 	.word	0xaaaaaaab

0800e12c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7ff ff5e 	bl	800dff6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800e13a:	4603      	mov	r3, r0
 800e13c:	60fb      	str	r3, [r7, #12]
 800e13e:	f107 030c 	add.w	r3, r7, #12
 800e142:	2101      	movs	r1, #1
 800e144:	4618      	mov	r0, r3
 800e146:	f001 fb60 	bl	800f80a <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 800e14a:	4603      	mov	r3, r0
 800e14c:	60bb      	str	r3, [r7, #8]
 800e14e:	f107 0308 	add.w	r3, r7, #8
 800e152:	4618      	mov	r0, r3
 800e154:	f001 fb75 	bl	800f842 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800e158:	4603      	mov	r3, r0
      }
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800e162:	b480      	push	{r7}
 800e164:	b083      	sub	sp, #12
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	61fb      	str	r3, [r7, #28]
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	61bb      	str	r3, [r7, #24]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e190:	f7f4 fcbc 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d003      	beq.n	800e1a2 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800e19a:	69b8      	ldr	r0, [r7, #24]
 800e19c:	f012 fdfe 	bl	8020d9c <_ZdlPv>
	    return;
 800e1a0:	e005      	b.n	800e1ae <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800e1a2:	697a      	ldr	r2, [r7, #20]
 800e1a4:	69b9      	ldr	r1, [r7, #24]
 800e1a6:	69f8      	ldr	r0, [r7, #28]
 800e1a8:	f002 fafd 	bl	80107a6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800e1ac:	bf00      	nop
 800e1ae:	bf00      	nop
 800e1b0:	3720      	adds	r7, #32
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b082      	sub	sp, #8
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800e1c0:	f7f4 fca4 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d004      	beq.n	800e1d4 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f001 fb44 	bl	800f85a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 800e1d2:	e003      	b.n	800e1dc <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800e1d4:	6839      	ldr	r1, [r7, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f001 fb3f 	bl	800f85a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 800e1dc:	3708      	adds	r7, #8
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e1e2:	b480      	push	{r7}
 800e1e4:	b083      	sub	sp, #12
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	781a      	ldrb	r2, [r3, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	701a      	strb	r2, [r3, #0]
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	605a      	str	r2, [r3, #4]
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	689a      	ldr	r2, [r3, #8]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	609a      	str	r2, [r3, #8]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f103 020c 	add.w	r2, r3, #12
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	330c      	adds	r3, #12
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f001 fb30 	bl	800f88c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4618      	mov	r0, r3
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800e236:	b5b0      	push	{r4, r5, r7, lr}
 800e238:	b082      	sub	sp, #8
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800e240:	6838      	ldr	r0, [r7, #0]
 800e242:	f7ff ffce 	bl	800e1e2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e246:	4605      	mov	r5, r0
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4619      	mov	r1, r3
 800e24c:	2018      	movs	r0, #24
 800e24e:	f7f4 fc65 	bl	8002b1c <_ZnwjPv>
 800e252:	4604      	mov	r4, r0
 800e254:	4629      	mov	r1, r5
 800e256:	4620      	mov	r0, r4
 800e258:	f7ff ffce 	bl	800e1f8 <_ZN3jlb4NodeC1ERKS0_>
 800e25c:	4623      	mov	r3, r4
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bdb0      	pop	{r4, r5, r7, pc}

0800e266 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e266:	b580      	push	{r7, lr}
 800e268:	b084      	sub	sp, #16
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	60f8      	str	r0, [r7, #12]
 800e26e:	60b9      	str	r1, [r7, #8]
 800e270:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7ff ffb5 	bl	800e1e2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e278:	4603      	mov	r3, r0
 800e27a:	4619      	mov	r1, r3
 800e27c:	68b8      	ldr	r0, [r7, #8]
 800e27e:	f7ff ffda 	bl	800e236 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800e282:	bf00      	nop
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b084      	sub	sp, #16
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	1d1a      	adds	r2, r3, #4
 800e296:	f107 030c 	add.w	r3, r7, #12
 800e29a:	4611      	mov	r1, r2
 800e29c:	4618      	mov	r0, r3
 800e29e:	f001 fb32 	bl	800f906 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800e2ac:	b5b0      	push	{r4, r5, r7, lr}
 800e2ae:	b08c      	sub	sp, #48	; 0x30
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800e2b8:	4a44      	ldr	r2, [pc, #272]	; (800e3cc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 800e2ba:	2101      	movs	r1, #1
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f001 fb32 	bl	800f926 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 800e2c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f001 fb6f 	bl	800f9b4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	617b      	str	r3, [r7, #20]
 800e2da:	f107 0214 	add.w	r2, r7, #20
 800e2de:	f107 0308 	add.w	r3, r7, #8
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f001 fb75 	bl	800f9d4 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f001 fb88 	bl	800fa08 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 800e2f8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800e2fe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800e300:	6a3a      	ldr	r2, [r7, #32]
 800e302:	4613      	mov	r3, r2
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	4413      	add	r3, r2
 800e308:	00db      	lsls	r3, r3, #3
 800e30a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	189d      	adds	r5, r3, r2
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff ff66 	bl	800e1e2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e316:	4603      	mov	r3, r0
 800e318:	461a      	mov	r2, r3
 800e31a:	4629      	mov	r1, r5
 800e31c:	4620      	mov	r0, r4
 800e31e:	f7ff ffa2 	bl	800e266 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800e322:	2300      	movs	r3, #0
 800e324:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800e326:	f107 0308 	add.w	r3, r7, #8
 800e32a:	4618      	mov	r0, r3
 800e32c:	f001 fb80 	bl	800fa30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800e330:	4603      	mov	r3, r0
 800e332:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe ff70 	bl	800d21c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e33c:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800e33e:	69fa      	ldr	r2, [r7, #28]
 800e340:	4621      	mov	r1, r4
 800e342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e344:	f001 fb7f 	bl	800fa46 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800e348:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	3318      	adds	r3, #24
 800e34e:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 800e350:	f107 0308 	add.w	r3, r7, #8
 800e354:	4618      	mov	r0, r3
 800e356:	f001 fb6b 	bl	800fa30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800e35a:	4603      	mov	r3, r0
 800e35c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	4618      	mov	r0, r3
 800e362:	f7fe ff5b 	bl	800d21c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e366:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800e368:	69ba      	ldr	r2, [r7, #24]
 800e36a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e36c:	4620      	mov	r0, r4
 800e36e:	f001 fb6a 	bl	800fa46 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800e372:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe ff50 	bl	800d21c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e37c:	4603      	mov	r3, r0
 800e37e:	461a      	mov	r2, r3
 800e380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e384:	f7fe ff55 	bl	800d232 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800e388:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	689a      	ldr	r2, [r3, #8]
 800e38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	10db      	asrs	r3, r3, #3
 800e394:	4a0e      	ldr	r2, [pc, #56]	; (800e3d0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800e396:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800e39a:	461a      	mov	r2, r3
 800e39c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e39e:	f7fe ff2a 	bl	800d1f6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	69fa      	ldr	r2, [r7, #28]
 800e3a6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	69ba      	ldr	r2, [r7, #24]
 800e3ac:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800e3ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	4413      	add	r3, r2
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	441a      	add	r2, r3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	609a      	str	r2, [r3, #8]
    }
 800e3c2:	bf00      	nop
 800e3c4:	3730      	adds	r7, #48	; 0x30
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	08025828 	.word	0x08025828
 800e3d0:	aaaaaaab 	.word	0xaaaaaaab

0800e3d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7ff ff54 	bl	800e28a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	60fb      	str	r3, [r7, #12]
 800e3e6:	f107 030c 	add.w	r3, r7, #12
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f001 fb43 	bl	800fa78 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	60bb      	str	r3, [r7, #8]
 800e3f6:	f107 0308 	add.w	r3, r7, #8
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f001 fb58 	bl	800fab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 800e400:	4603      	mov	r3, r0
      }
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 800e40a:	b480      	push	{r7}
 800e40c:	b083      	sub	sp, #12
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	4618      	mov	r0, r3
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800e422:	b480      	push	{r7}
 800e424:	b083      	sub	sp, #12
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e42a:	4618      	mov	r0, r3
 800e42c:	370c      	adds	r7, #12
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e436:	b480      	push	{r7}
 800e438:	b085      	sub	sp, #20
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	60f8      	str	r0, [r7, #12]
 800e43e:	60b9      	str	r1, [r7, #8]
 800e440:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	1ad3      	subs	r3, r2, r3
    }
 800e448:	4618      	mov	r0, r3
 800e44a:	3714      	adds	r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800e454:	b590      	push	{r4, r7, lr}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800e45e:	f107 030c 	add.w	r3, r7, #12
 800e462:	6839      	ldr	r1, [r7, #0]
 800e464:	4618      	mov	r0, r3
 800e466:	f012 fcaf 	bl	8020dc8 <_ZNSaIcEC1ERKS_>
 800e46a:	f107 030c 	add.w	r3, r7, #12
 800e46e:	4618      	mov	r0, r3
 800e470:	f001 fb36 	bl	800fae0 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800e474:	4602      	mov	r2, r0
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	4293      	cmp	r3, r2
 800e47a:	bf8c      	ite	hi
 800e47c:	2301      	movhi	r3, #1
 800e47e:	2300      	movls	r3, #0
 800e480:	b2dc      	uxtb	r4, r3
 800e482:	f107 030c 	add.w	r3, r7, #12
 800e486:	4618      	mov	r0, r3
 800e488:	f012 fc9f 	bl	8020dca <_ZNSaIcED1Ev>
 800e48c:	2c00      	cmp	r4, #0
 800e48e:	d002      	beq.n	800e496 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800e490:	4803      	ldr	r0, [pc, #12]	; (800e4a0 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800e492:	f012 fca1 	bl	8020dd8 <_ZSt20__throw_length_errorPKc>
	return __n;
 800e496:	687b      	ldr	r3, [r7, #4]
      }
 800e498:	4618      	mov	r0, r3
 800e49a:	3714      	adds	r7, #20
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd90      	pop	{r4, r7, pc}
 800e4a0:	08025844 	.word	0x08025844

0800e4a4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d006      	beq.n	800e4c2 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f000 fcc9 	bl	800ee50 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	e000      	b.n	800e4c4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800e4c2:	2300      	movs	r3, #0
      }
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	68b9      	ldr	r1, [r7, #8]
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f001 fb18 	bl	800fb14 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	601a      	str	r2, [r3, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	605a      	str	r2, [r3, #4]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	3308      	adds	r3, #8
 800e506:	4618      	mov	r0, r3
 800e508:	f001 fb16 	bl	800fb38 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	3318      	adds	r3, #24
 800e510:	4618      	mov	r0, r3
 800e512:	f001 fb11 	bl	800fb38 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800e520:	b590      	push	{r4, r7, lr}
 800e522:	b085      	sub	sp, #20
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800e52a:	f107 030c 	add.w	r3, r7, #12
 800e52e:	6879      	ldr	r1, [r7, #4]
 800e530:	4618      	mov	r0, r3
 800e532:	f000 f859 	bl	800e5e8 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800e536:	f107 030c 	add.w	r3, r7, #12
 800e53a:	6839      	ldr	r1, [r7, #0]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f001 fb12 	bl	800fb66 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 800e542:	4604      	mov	r4, r0
 800e544:	bf00      	nop
      }
 800e546:	f107 030c 	add.w	r3, r7, #12
 800e54a:	4618      	mov	r0, r3
 800e54c:	f000 f85d 	bl	800e60a <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800e550:	4623      	mov	r3, r4
      }
 800e552:	4618      	mov	r0, r3
 800e554:	3714      	adds	r7, #20
 800e556:	46bd      	mov	sp, r7
 800e558:	bd90      	pop	{r4, r7, pc}

0800e55a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b086      	sub	sp, #24
 800e55e:	af00      	add	r7, sp, #0
 800e560:	60f8      	str	r0, [r7, #12]
 800e562:	60b9      	str	r1, [r7, #8]
 800e564:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	617b      	str	r3, [r7, #20]
 800e56a:	e008      	b.n	800e57e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f000 f8a2 	bl	800e6b6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800e572:	4602      	mov	r2, r0
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	3304      	adds	r3, #4
 800e57c:	617b      	str	r3, [r7, #20]
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	429a      	cmp	r2, r3
 800e584:	d3f2      	bcc.n	800e56c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 800e586:	bf00      	nop
 800e588:	bf00      	nop
 800e58a:	3718      	adds	r7, #24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800e590:	b590      	push	{r4, r7, lr}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685c      	ldr	r4, [r3, #4]
 800e5ac:	f000 f895 	bl	800e6da <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	18e2      	adds	r2, r4, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	609a      	str	r2, [r3, #8]
      }
 800e5ba:	bf00      	nop
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd90      	pop	{r4, r7, pc}

0800e5c2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800e5c2:	b590      	push	{r4, r7, lr}
 800e5c4:	b083      	sub	sp, #12
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800e5cc:	687c      	ldr	r4, [r7, #4]
 800e5ce:	2004      	movs	r0, #4
 800e5d0:	f7fa f94f 	bl	8008872 <_ZSt16__deque_buf_sizej>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	6839      	ldr	r1, [r7, #0]
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f7f5 f8db 	bl	8003796 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd90      	pop	{r4, r7, pc}

0800e5e8 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800e5f2:	6838      	ldr	r0, [r7, #0]
 800e5f4:	f001 fad7 	bl	800fba6 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f001 fadd 	bl	800fbbc <_ZNSaIPfEC1IfEERKSaIT_E>
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e60a:	b480      	push	{r7}
 800e60c:	b083      	sub	sp, #12
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e620:	b580      	push	{r7, lr}
 800e622:	b088      	sub	sp, #32
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	61fb      	str	r3, [r7, #28]
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	61bb      	str	r3, [r7, #24]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e638:	f7f4 fa68 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d003      	beq.n	800e64a <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 800e642:	69b8      	ldr	r0, [r7, #24]
 800e644:	f012 fbaa 	bl	8020d9c <_ZdlPv>
	    return;
 800e648:	e005      	b.n	800e656 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	69b9      	ldr	r1, [r7, #24]
 800e64e:	69f8      	ldr	r0, [r7, #28]
 800e650:	f002 f9bd 	bl	80109ce <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 800e654:	bf00      	nop
 800e656:	bf00      	nop
 800e658:	3720      	adds	r7, #32
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800e65e:	b580      	push	{r7, lr}
 800e660:	b082      	sub	sp, #8
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4618      	mov	r0, r3
 800e66a:	f001 fa9c 	bl	800fba6 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800e66e:	4603      	mov	r3, r0
 800e670:	4618      	mov	r0, r3
 800e672:	f001 fab0 	bl	800fbd6 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 800e676:	4603      	mov	r3, r0
 800e678:	4618      	mov	r0, r3
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	1c5a      	adds	r2, r3, #1
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800e692:	6879      	ldr	r1, [r7, #4]
 800e694:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800e696:	6879      	ldr	r1, [r7, #4]
 800e698:	6809      	ldr	r1, [r1, #0]
 800e69a:	1a41      	subs	r1, r0, r1
 800e69c:	1089      	asrs	r1, r1, #2
 800e69e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d904      	bls.n	800e6ae <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	6839      	ldr	r1, [r7, #0]
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f001 fade 	bl	800fc6a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 800e6ae:	bf00      	nop
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800e6b6:	b590      	push	{r4, r7, lr}
 800e6b8:	b083      	sub	sp, #12
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800e6be:	687c      	ldr	r4, [r7, #4]
 800e6c0:	2004      	movs	r0, #4
 800e6c2:	f7fa f8d6 	bl	8008872 <_ZSt16__deque_buf_sizej>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f7f5 f9ab 	bl	8003a26 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800e6d0:	4603      	mov	r3, r0
      }
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	370c      	adds	r7, #12
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd90      	pop	{r4, r7, pc}

0800e6da <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800e6de:	2004      	movs	r0, #4
 800e6e0:	f7fa f8c7 	bl	8008872 <_ZSt16__deque_buf_sizej>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <_ZNKSt16initializer_listIfE4sizeEv>:
 800e6ea:	b480      	push	{r7}
 800e6ec:	b083      	sub	sp, #12
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800e702:	b480      	push	{r7}
 800e704:	b085      	sub	sp, #20
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	60b9      	str	r1, [r7, #8]
 800e70c:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	ed93 7a00 	vldr	s14, [r3]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	edd3 7a00 	vldr	s15, [r3]
 800e71a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e722:	bf4c      	ite	mi
 800e724:	2301      	movmi	r3, #1
 800e726:	2300      	movpl	r3, #0
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800e736:	b580      	push	{r7, lr}
 800e738:	b086      	sub	sp, #24
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	60f8      	str	r0, [r7, #12]
 800e73e:	60b9      	str	r1, [r7, #8]
 800e740:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	429a      	cmp	r2, r3
 800e748:	d101      	bne.n	800e74e <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
	return __first;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	e01a      	b.n	800e784 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800e752:	e00a      	b.n	800e76a <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	if (__comp(__first, __result))
 800e754:	1d3b      	adds	r3, r7, #4
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	68f9      	ldr	r1, [r7, #12]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7ff ffd1 	bl	800e702 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d001      	beq.n	800e76a <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	  __result = __first;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3304      	adds	r3, #4
 800e76e:	60fb      	str	r3, [r7, #12]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	429a      	cmp	r2, r3
 800e776:	bf14      	ite	ne
 800e778:	2301      	movne	r3, #1
 800e77a:	2300      	moveq	r3, #0
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1e8      	bne.n	800e754 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1e>
      return __result;
 800e782:	697b      	ldr	r3, [r7, #20]
    }
 800e784:	4618      	mov	r0, r3
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	683a      	ldr	r2, [r7, #0]
 800e79a:	601a      	str	r2, [r3, #0]
      { }
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr

0800e7aa <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 800e7aa:	b480      	push	{r7}
 800e7ac:	b083      	sub	sp, #12
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e7be:	b590      	push	{r4, r7, lr}
 800e7c0:	b083      	sub	sp, #12
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7fa fd32 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	681c      	ldr	r4, [r3, #0]
 800e7d2:	6838      	ldr	r0, [r7, #0]
 800e7d4:	f7fa fd2d 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	1ae3      	subs	r3, r4, r3
 800e7de:	4618      	mov	r0, r3
 800e7e0:	370c      	adds	r7, #12
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd90      	pop	{r4, r7, pc}

0800e7e6 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e7e6:	b480      	push	{r7}
 800e7e8:	b083      	sub	sp, #12
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	370c      	adds	r7, #12
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr

0800e7fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b082      	sub	sp, #8
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800e808:	463b      	mov	r3, r7
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7ff ffeb 	bl	800e7e6 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800e810:	4603      	mov	r3, r0
 800e812:	781a      	ldrb	r2, [r3, #0]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	bf0c      	ite	eq
 800e81e:	2301      	moveq	r3, #1
 800e820:	2300      	movne	r3, #0
 800e822:	b2db      	uxtb	r3, r3
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	1c5a      	adds	r2, r3, #1
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	601a      	str	r2, [r3, #0]
	return *this;
 800e83e:	687b      	ldr	r3, [r7, #4]
      }
 800e840:	4618      	mov	r0, r3
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
 800e858:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800e85a:	f107 020c 	add.w	r2, r7, #12
 800e85e:	f107 0308 	add.w	r3, r7, #8
 800e862:	4611      	mov	r1, r2
 800e864:	4618      	mov	r0, r3
 800e866:	f7ff ffaa 	bl	800e7be <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800e86a:	4603      	mov	r3, r0
 800e86c:	109b      	asrs	r3, r3, #2
 800e86e:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800e870:	e03e      	b.n	800e8f0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800e872:	1d3b      	adds	r3, r7, #4
 800e874:	68f9      	ldr	r1, [r7, #12]
 800e876:	4618      	mov	r0, r3
 800e878:	f7ff ffc1 	bl	800e7fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	e077      	b.n	800e976 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e886:	f107 030c 	add.w	r3, r7, #12
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff ffce 	bl	800e82c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800e890:	1d3b      	adds	r3, r7, #4
 800e892:	68f9      	ldr	r1, [r7, #12]
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff ffb2 	bl	800e7fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	e068      	b.n	800e976 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e8a4:	f107 030c 	add.w	r3, r7, #12
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7ff ffbf 	bl	800e82c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800e8ae:	1d3b      	adds	r3, r7, #4
 800e8b0:	68f9      	ldr	r1, [r7, #12]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7ff ffa3 	bl	800e7fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d001      	beq.n	800e8c2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	e059      	b.n	800e976 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e8c2:	f107 030c 	add.w	r3, r7, #12
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7ff ffb0 	bl	800e82c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800e8cc:	1d3b      	adds	r3, r7, #4
 800e8ce:	68f9      	ldr	r1, [r7, #12]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7ff ff94 	bl	800e7fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d001      	beq.n	800e8e0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	e04a      	b.n	800e976 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e8e0:	f107 030c 	add.w	r3, r7, #12
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7ff ffa1 	bl	800e82c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	617b      	str	r3, [r7, #20]
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	dcbd      	bgt.n	800e872 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800e8f6:	f107 020c 	add.w	r2, r7, #12
 800e8fa:	f107 0308 	add.w	r3, r7, #8
 800e8fe:	4611      	mov	r1, r2
 800e900:	4618      	mov	r0, r3
 800e902:	f7ff ff5c 	bl	800e7be <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800e906:	4603      	mov	r3, r0
 800e908:	2b03      	cmp	r3, #3
 800e90a:	d006      	beq.n	800e91a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 800e90c:	2b03      	cmp	r3, #3
 800e90e:	dc31      	bgt.n	800e974 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 800e910:	2b01      	cmp	r3, #1
 800e912:	d020      	beq.n	800e956 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 800e914:	2b02      	cmp	r3, #2
 800e916:	d00f      	beq.n	800e938 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 800e918:	e02c      	b.n	800e974 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 800e91a:	1d3b      	adds	r3, r7, #4
 800e91c:	68f9      	ldr	r1, [r7, #12]
 800e91e:	4618      	mov	r0, r3
 800e920:	f7ff ff6d 	bl	800e7fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	e023      	b.n	800e976 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e92e:	f107 030c 	add.w	r3, r7, #12
 800e932:	4618      	mov	r0, r3
 800e934:	f7ff ff7a 	bl	800e82c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800e938:	1d3b      	adds	r3, r7, #4
 800e93a:	68f9      	ldr	r1, [r7, #12]
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7ff ff5e 	bl	800e7fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d001      	beq.n	800e94c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	e014      	b.n	800e976 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e94c:	f107 030c 	add.w	r3, r7, #12
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff ff6b 	bl	800e82c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800e956:	1d3b      	adds	r3, r7, #4
 800e958:	68f9      	ldr	r1, [r7, #12]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff ff4f 	bl	800e7fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d001      	beq.n	800e96a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	e005      	b.n	800e976 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e96a:	f107 030c 	add.w	r3, r7, #12
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff ff5c 	bl	800e82c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 800e974:	68bb      	ldr	r3, [r7, #8]
    }
 800e976:	4618      	mov	r0, r3
 800e978:	3718      	adds	r7, #24
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e97e:	b580      	push	{r7, lr}
 800e980:	b088      	sub	sp, #32
 800e982:	af00      	add	r7, sp, #0
 800e984:	60f8      	str	r0, [r7, #12]
 800e986:	60b9      	str	r1, [r7, #8]
 800e988:	607a      	str	r2, [r7, #4]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	61fb      	str	r3, [r7, #28]
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	61bb      	str	r3, [r7, #24]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e996:	f7f4 f8b9 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d003      	beq.n	800e9a8 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 800e9a0:	69b8      	ldr	r0, [r7, #24]
 800e9a2:	f012 f9fb 	bl	8020d9c <_ZdlPv>
	    return;
 800e9a6:	e005      	b.n	800e9b4 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800e9a8:	697a      	ldr	r2, [r7, #20]
 800e9aa:	69b9      	ldr	r1, [r7, #24]
 800e9ac:	69f8      	ldr	r0, [r7, #28]
 800e9ae:	f002 f86e 	bl	8010a8e <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800e9b2:	bf00      	nop
 800e9b4:	bf00      	nop
 800e9b6:	3720      	adds	r7, #32
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	370c      	adds	r7, #12
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr

0800e9d2 <_ZSt12construct_atIcJcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800e9d2:	b590      	push	{r4, r7, lr}
 800e9d4:	b083      	sub	sp, #12
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
 800e9da:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800e9dc:	6838      	ldr	r0, [r7, #0]
 800e9de:	f7ff ffed 	bl	800e9bc <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	781c      	ldrb	r4, [r3, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	2001      	movs	r0, #1
 800e9ec:	f7f4 f896 	bl	8002b1c <_ZnwjPv>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	4622      	mov	r2, r4
 800e9f4:	701a      	strb	r2, [r3, #0]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	370c      	adds	r7, #12
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd90      	pop	{r4, r7, pc}

0800e9fe <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b084      	sub	sp, #16
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	60f8      	str	r0, [r7, #12]
 800ea06:	60b9      	str	r1, [r7, #8]
 800ea08:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7ff ffd6 	bl	800e9bc <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800ea10:	4603      	mov	r3, r0
 800ea12:	4619      	mov	r1, r3
 800ea14:	68b8      	ldr	r0, [r7, #8]
 800ea16:	f7ff ffdc 	bl	800e9d2 <_ZSt12construct_atIcJcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 800ea1a:	bf00      	nop
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
	...

0800ea24 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ea24:	b5b0      	push	{r4, r5, r7, lr}
 800ea26:	b08c      	sub	sp, #48	; 0x30
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800ea30:	4a38      	ldr	r2, [pc, #224]	; (800eb14 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xf0>)
 800ea32:	2101      	movs	r1, #1
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f001 f9b2 	bl	800fd9e <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800ea3a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	f7fe f80e 	bl	800ca6a <_ZNSt6vectorIcSaIcEE5beginEv>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	617b      	str	r3, [r7, #20]
 800ea52:	f107 0214 	add.w	r2, r7, #20
 800ea56:	f107 0308 	add.w	r3, r7, #8
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7ff feae 	bl	800e7be <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800ea62:	4603      	mov	r3, r0
 800ea64:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff fd1a 	bl	800e4a4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800ea70:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800ea76:	68fc      	ldr	r4, [r7, #12]
 800ea78:	69fa      	ldr	r2, [r7, #28]
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	18d5      	adds	r5, r2, r3
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7ff ff9c 	bl	800e9bc <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800ea84:	4603      	mov	r3, r0
 800ea86:	461a      	mov	r2, r3
 800ea88:	4629      	mov	r1, r5
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f7ff ffb7 	bl	800e9fe <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 800ea90:	2300      	movs	r3, #0
 800ea92:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ea94:	f107 0308 	add.w	r3, r7, #8
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fa fbca 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe fb1e 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800eaaa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800eaac:	69fa      	ldr	r2, [r7, #28]
 800eaae:	4621      	mov	r1, r4
 800eab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eab2:	f001 f9bb 	bl	800fe2c <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 800eab6:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	3301      	adds	r3, #1
 800eabc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800eabe:	f107 0308 	add.w	r3, r7, #8
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fa fbb5 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800eac8:	4603      	mov	r3, r0
 800eaca:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fe fb09 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ead4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ead6:	69ba      	ldr	r2, [r7, #24]
 800ead8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eada:	4620      	mov	r0, r4
 800eadc:	f001 f9a6 	bl	800fe2c <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 800eae0:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800eae2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	689a      	ldr	r2, [r3, #8]
 800eae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaea:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 800eaec:	461a      	mov	r2, r3
 800eaee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eaf0:	f7fe fe9b 	bl	800d82a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      this->_M_impl._M_start = __new_start;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	69fa      	ldr	r2, [r7, #28]
 800eaf8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	69ba      	ldr	r2, [r7, #24]
 800eafe:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800eb00:	69fa      	ldr	r2, [r7, #28]
 800eb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb04:	441a      	add	r2, r3
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	609a      	str	r2, [r3, #8]
    }
 800eb0a:	bf00      	nop
 800eb0c:	3730      	adds	r7, #48	; 0x30
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bdb0      	pop	{r4, r5, r7, pc}
 800eb12:	bf00      	nop
 800eb14:	08025828 	.word	0x08025828

0800eb18 <_ZNSt6vectorIcSaIcEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7fd ffb2 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800eb26:	4603      	mov	r3, r0
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	f107 030c 	add.w	r3, r7, #12
 800eb2e:	2101      	movs	r1, #1
 800eb30:	4618      	mov	r0, r3
 800eb32:	f001 f98f 	bl	800fe54 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEmiEi>
 800eb36:	4603      	mov	r3, r0
 800eb38:	60bb      	str	r3, [r7, #8]
 800eb3a:	f107 0308 	add.w	r3, r7, #8
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff fe51 	bl	800e7e6 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800eb44:	4603      	mov	r3, r0
      }
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800eb4e:	b480      	push	{r7}
 800eb50:	b083      	sub	sp, #12
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800eb64:	b5b0      	push	{r4, r5, r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800eb6e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800eb70:	1d3b      	adds	r3, r7, #4
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fe f8b5 	bl	800cce2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800eb78:	462a      	mov	r2, r5
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f001 f981 	bl	800fe84 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800eb82:	4603      	mov	r3, r0
    }
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bdb0      	pop	{r4, r5, r7, pc}

0800eb8c <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800eb8c:	b590      	push	{r4, r7, lr}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f001 f99b 	bl	800fed4 <_ZSt12__miter_baseIPcET_S1_>
 800eb9e:	4604      	mov	r4, r0
 800eba0:	68b8      	ldr	r0, [r7, #8]
 800eba2:	f001 f997 	bl	800fed4 <_ZSt12__miter_baseIPcET_S1_>
 800eba6:	4603      	mov	r3, r0
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4620      	mov	r0, r4
 800ebae:	f001 f99c 	bl	800feea <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>
 800ebb2:	4603      	mov	r3, r0
    }
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3714      	adds	r7, #20
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd90      	pop	{r4, r7, pc}

0800ebbc <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800ebbc:	b590      	push	{r4, r7, lr}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f001 f983 	bl	800fed4 <_ZSt12__miter_baseIPcET_S1_>
 800ebce:	4604      	mov	r4, r0
 800ebd0:	68b8      	ldr	r0, [r7, #8]
 800ebd2:	f001 f97f 	bl	800fed4 <_ZSt12__miter_baseIPcET_S1_>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	4619      	mov	r1, r3
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f001 f9a7 	bl	800ff30 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>
 800ebe2:	4603      	mov	r3, r0
    }
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd90      	pop	{r4, r7, pc}

0800ebec <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 800ebec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebee:	b08d      	sub	sp, #52	; 0x34
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	607a      	str	r2, [r7, #4]
 800ebf8:	603b      	str	r3, [r7, #0]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	f000 80f6 	beq.w	800edf0 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
	  {
	    const size_type __n = std::distance(__first, __last);
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7ff ffac 	bl	800eb64 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (size_type(this->_M_impl._M_end_of_storage
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_finish) >= __n)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	1ad3      	subs	r3, r2, r3
	    if (size_type(this->_M_impl._M_end_of_storage
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	f200 8081 	bhi.w	800ed26 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x13a>
	      {
		const size_type __elems_after = end() - __position;
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f7fd ff30 	bl	800ca8a <_ZNSt6vectorIcSaIcEE3endEv>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	617b      	str	r3, [r7, #20]
 800ec2e:	f107 0208 	add.w	r2, r7, #8
 800ec32:	f107 0314 	add.w	r3, r7, #20
 800ec36:	4611      	mov	r1, r2
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7ff fdc0 	bl	800e7be <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	61fb      	str	r3, [r7, #28]
		pointer __old_finish(this->_M_impl._M_finish);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	61bb      	str	r3, [r7, #24]
		if (__elems_after > __n)
 800ec48:	69fa      	ldr	r2, [r7, #28]
 800ec4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d92d      	bls.n	800ecac <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc0>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec56:	425b      	negs	r3, r3
 800ec58:	18d4      	adds	r4, r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	685d      	ldr	r5, [r3, #4]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	685e      	ldr	r6, [r3, #4]
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fe fa3e 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ec6a:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800ec6c:	4632      	mov	r2, r6
 800ec6e:	4629      	mov	r1, r5
 800ec70:	4620      	mov	r0, r4
 800ec72:	f001 f916 	bl	800fea2 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __n;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	685a      	ldr	r2, [r3, #4]
 800ec7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7c:	441a      	add	r2, r3
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	605a      	str	r2, [r3, #4]
		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800ec82:	f107 0308 	add.w	r3, r7, #8
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fa fad3 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	6818      	ldr	r0, [r3, #0]
 800ec90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec92:	425b      	negs	r3, r3
 800ec94:	69ba      	ldr	r2, [r7, #24]
 800ec96:	4413      	add	r3, r2
 800ec98:	69ba      	ldr	r2, [r7, #24]
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	f7ff ff76 	bl	800eb8c <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
 800eca0:	68ba      	ldr	r2, [r7, #8]
 800eca2:	6839      	ldr	r1, [r7, #0]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff ff89 	bl	800ebbc <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 800ecaa:	e0a1      	b.n	800edf0 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		    _ForwardIterator __mid = __first;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	613b      	str	r3, [r7, #16]
		    std::advance(__mid, __elems_after);
 800ecb0:	f107 0310 	add.w	r3, r7, #16
 800ecb4:	69f9      	ldr	r1, [r7, #28]
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f001 f95b 	bl	800ff72 <_ZSt7advanceIPcjEvRT_T0_>
		    std::__uninitialized_copy_a(__mid, __last,
 800ecbc:	693c      	ldr	r4, [r7, #16]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fe fa0e 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ecca:	4603      	mov	r3, r0
		    std::__uninitialized_copy_a(__mid, __last,
 800eccc:	462a      	mov	r2, r5
 800ecce:	6839      	ldr	r1, [r7, #0]
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f001 f961 	bl	800ff98 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
		    this->_M_impl._M_finish += __n - __elems_after;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	685a      	ldr	r2, [r3, #4]
 800ecda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	1acb      	subs	r3, r1, r3
 800ece0:	441a      	add	r2, r3
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	605a      	str	r2, [r3, #4]
		    std::__uninitialized_move_a(__position.base(),
 800ece6:	f107 0308 	add.w	r3, r7, #8
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fa faa1 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	681c      	ldr	r4, [r3, #0]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fe f9f3 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ed00:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(__position.base(),
 800ed02:	462a      	mov	r2, r5
 800ed04:	69b9      	ldr	r1, [r7, #24]
 800ed06:	4620      	mov	r0, r4
 800ed08:	f001 f8cb 	bl	800fea2 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __elems_after;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	685a      	ldr	r2, [r3, #4]
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	441a      	add	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	605a      	str	r2, [r3, #4]
		    std::copy(__first, __mid, __position);
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff ff4c 	bl	800ebbc <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
      }
 800ed24:	e064      	b.n	800edf0 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		  _M_check_len(__n, "vector::_M_range_insert");
 800ed26:	4a34      	ldr	r2, [pc, #208]	; (800edf8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x20c>)
 800ed28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f001 f837 	bl	800fd9e <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800ed30:	62b8      	str	r0, [r7, #40]	; 0x28
		pointer __new_start(this->_M_allocate(__len));
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff fbb4 	bl	800e4a4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800ed3c:	6278      	str	r0, [r7, #36]	; 0x24
		pointer __new_finish(__new_start);
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	623b      	str	r3, [r7, #32]
		      (this->_M_impl._M_start, __position.base(),
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681c      	ldr	r4, [r3, #0]
 800ed46:	f107 0308 	add.w	r3, r7, #8
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fa fa71 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ed50:	4603      	mov	r3, r0
 800ed52:	681d      	ldr	r5, [r3, #0]
		       __new_start, _M_get_Tp_allocator());
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fe f9c5 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ed5c:	4603      	mov	r3, r0
		      (this->_M_impl._M_start, __position.base(),
 800ed5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed60:	4629      	mov	r1, r5
 800ed62:	4620      	mov	r0, r4
 800ed64:	f001 f929 	bl	800ffba <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800ed68:	6238      	str	r0, [r7, #32]
						    _M_get_Tp_allocator());
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fe f9ba 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ed72:	4603      	mov	r3, r0
		      = std::__uninitialized_copy_a(__first, __last,
 800ed74:	6a3a      	ldr	r2, [r7, #32]
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f001 f90d 	bl	800ff98 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
 800ed7e:	6238      	str	r0, [r7, #32]
		      (__position.base(), this->_M_impl._M_finish,
 800ed80:	f107 0308 	add.w	r3, r7, #8
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fa fa54 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	681c      	ldr	r4, [r3, #0]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	685d      	ldr	r5, [r3, #4]
		       __new_finish, _M_get_Tp_allocator());
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fe f9a6 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ed9a:	4603      	mov	r3, r0
		      (__position.base(), this->_M_impl._M_finish,
 800ed9c:	6a3a      	ldr	r2, [r7, #32]
 800ed9e:	4629      	mov	r1, r5
 800eda0:	4620      	mov	r0, r4
 800eda2:	f001 f90a 	bl	800ffba <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800eda6:	6238      	str	r0, [r7, #32]
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681c      	ldr	r4, [r3, #0]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	685d      	ldr	r5, [r3, #4]
			      _M_get_Tp_allocator());
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe f997 	bl	800d0e6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800edb8:	4603      	mov	r3, r0
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800edba:	461a      	mov	r2, r3
 800edbc:	4629      	mov	r1, r5
 800edbe:	4620      	mov	r0, r4
 800edc0:	f7fe f9ad 	bl	800d11e <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
		_M_deallocate(this->_M_impl._M_start,
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6819      	ldr	r1, [r3, #0]
			      this->_M_impl._M_end_of_storage
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	689a      	ldr	r2, [r3, #8]
			      - this->_M_impl._M_start);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	1ad3      	subs	r3, r2, r3
		_M_deallocate(this->_M_impl._M_start,
 800edd4:	461a      	mov	r2, r3
 800edd6:	f7fe fd28 	bl	800d82a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
		this->_M_impl._M_start = __new_start;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edde:	601a      	str	r2, [r3, #0]
		this->_M_impl._M_finish = __new_finish;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6a3a      	ldr	r2, [r7, #32]
 800ede4:	605a      	str	r2, [r3, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 800ede6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ede8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edea:	441a      	add	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	609a      	str	r2, [r3, #8]
      }
 800edf0:	bf00      	nop
 800edf2:	3734      	adds	r7, #52	; 0x34
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edf8:	08025878 	.word	0x08025878

0800edfc <_ZSt9iter_swapIPbS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800ee06:	6839      	ldr	r1, [r7, #0]
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f001 f8ef 	bl	800ffec <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	60f8      	str	r0, [r7, #12]
 800ee1e:	60b9      	str	r1, [r7, #8]
 800ee20:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800ee22:	f7f3 fe73 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d006      	beq.n	800ee3a <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	68b9      	ldr	r1, [r7, #8]
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f001 f8fa 	bl	801002a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 800ee36:	4603      	mov	r3, r0
 800ee38:	e006      	b.n	800ee48 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	68b9      	ldr	r1, [r7, #8]
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f001 f915 	bl	801006e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800ee44:	4603      	mov	r3, r0
 800ee46:	bf00      	nop
    }
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3710      	adds	r7, #16
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	60fb      	str	r3, [r7, #12]
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ee62:	f7f3 fe53 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d004      	beq.n	800ee76 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ee6c:	68b8      	ldr	r0, [r7, #8]
 800ee6e:	f011 ff99 	bl	8020da4 <_Znwj>
 800ee72:	4603      	mov	r3, r0
 800ee74:	e006      	b.n	800ee84 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ee76:	2200      	movs	r2, #0
 800ee78:	68b9      	ldr	r1, [r7, #8]
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f001 fef4 	bl	8010c68 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800ee80:	4603      	mov	r3, r0
 800ee82:	bf00      	nop
      { return __a.allocate(__n); }
 800ee84:	4618      	mov	r0, r3
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800ee8c:	b590      	push	{r4, r7, lr}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
 800ee98:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800ee9a:	4623      	mov	r3, r4
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	68b9      	ldr	r1, [r7, #8]
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f001 f941 	bl	8010128 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800eea6:	463b      	mov	r3, r7
 800eea8:	461a      	mov	r2, r3
 800eeaa:	68b9      	ldr	r1, [r7, #8]
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f001 f989 	bl	80101c4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 800eeb2:	bf00      	nop
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd90      	pop	{r4, r7, pc}

0800eeba <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800eeba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eebc:	b089      	sub	sp, #36	; 0x24
 800eebe:	af02      	add	r7, sp, #8
 800eec0:	60f8      	str	r0, [r7, #12]
 800eec2:	60b9      	str	r1, [r7, #8]
 800eec4:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800eec6:	f107 020c 	add.w	r2, r7, #12
 800eeca:	f107 0308 	add.w	r3, r7, #8
 800eece:	4611      	mov	r1, r2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7f4 fd07 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800eed6:	4603      	mov	r3, r0
 800eed8:	0fda      	lsrs	r2, r3, #31
 800eeda:	4413      	add	r3, r2
 800eedc:	105b      	asrs	r3, r3, #1
 800eede:	461a      	mov	r2, r3
 800eee0:	f107 030c 	add.w	r3, r7, #12
 800eee4:	4611      	mov	r1, r2
 800eee6:	4618      	mov	r0, r3
 800eee8:	f000 f827 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800eeec:	4603      	mov	r3, r0
 800eeee:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800eef0:	f107 030c 	add.w	r3, r7, #12
 800eef4:	2101      	movs	r1, #1
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 f81f 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800eefc:	4604      	mov	r4, r0
 800eefe:	f107 0308 	add.w	r3, r7, #8
 800ef02:	2101      	movs	r1, #1
 800ef04:	4618      	mov	r0, r3
 800ef06:	f001 f984 	bl	8010212 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	f88d 5000 	strb.w	r5, [sp]
 800ef10:	697a      	ldr	r2, [r7, #20]
 800ef12:	4621      	mov	r1, r4
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f001 f995 	bl	8010244 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800ef1a:	f107 030c 	add.w	r3, r7, #12
 800ef1e:	2101      	movs	r1, #1
 800ef20:	4618      	mov	r0, r3
 800ef22:	f000 f80a 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ef26:	4633      	mov	r3, r6
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	68b9      	ldr	r1, [r7, #8]
 800ef2c:	f001 f9df 	bl	80102ee <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 800ef30:	4603      	mov	r3, r0
    }
 800ef32:	4618      	mov	r0, r3
 800ef34:	371c      	adds	r7, #28
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b084      	sub	sp, #16
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4413      	add	r3, r2
 800ef4e:	60fb      	str	r3, [r7, #12]
 800ef50:	f107 020c 	add.w	r2, r7, #12
 800ef54:	f107 0308 	add.w	r3, r7, #8
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f4 fc5b 	bl	8003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	4618      	mov	r0, r3
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ef6a:	b480      	push	{r7}
 800ef6c:	b083      	sub	sp, #12
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	1d1a      	adds	r2, r3, #4
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	601a      	str	r2, [r3, #0]
	return *this;
 800ef7c:	687b      	ldr	r3, [r7, #4]
      }
 800ef7e:	4618      	mov	r0, r3
 800ef80:	370c      	adds	r7, #12
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr

0800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ef8a:	b480      	push	{r7}
 800ef8c:	b083      	sub	sp, #12
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4618      	mov	r0, r3
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800efa2:	b580      	push	{r7, lr}
 800efa4:	ed2d 8b02 	vpush	{d8}
 800efa8:	b084      	sub	sp, #16
 800efaa:	af00      	add	r7, sp, #0
 800efac:	60f8      	str	r0, [r7, #12]
 800efae:	60b9      	str	r1, [r7, #8]
 800efb0:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800efb2:	f107 0308 	add.w	r3, r7, #8
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff ffe7 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800efbc:	4603      	mov	r3, r0
 800efbe:	ed93 8a00 	vldr	s16, [r3]
 800efc2:	1d3b      	adds	r3, r7, #4
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7ff ffe0 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800efca:	4603      	mov	r3, r0
 800efcc:	edd3 7a00 	vldr	s15, [r3]
 800efd0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800efd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd8:	bf4c      	ite	mi
 800efda:	2301      	movmi	r3, #1
 800efdc:	2300      	movpl	r3, #0
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	4618      	mov	r0, r3
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	ecbd 8b02 	vpop	{d8}
 800efea:	bd80      	pop	{r7, pc}

0800efec <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800efec:	b590      	push	{r4, r7, lr}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f001 f9cb 	bl	8010394 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800effe:	4604      	mov	r4, r0
 800f000:	68b8      	ldr	r0, [r7, #8]
 800f002:	f001 f9c7 	bl	8010394 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800f006:	4603      	mov	r3, r0
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	4619      	mov	r1, r3
 800f00c:	4620      	mov	r0, r4
 800f00e:	f001 f9cc 	bl	80103aa <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 800f012:	4603      	mov	r3, r0
    }
 800f014:	4618      	mov	r0, r3
 800f016:	3714      	adds	r7, #20
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd90      	pop	{r4, r7, pc}

0800f01c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800f01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f01e:	b087      	sub	sp, #28
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800f028:	f107 0208 	add.w	r2, r7, #8
 800f02c:	f107 030c 	add.w	r3, r7, #12
 800f030:	4611      	mov	r1, r2
 800f032:	4618      	mov	r0, r3
 800f034:	f7fd fe5f 	bl	800ccf6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d153      	bne.n	800f0e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800f03e:	f107 030c 	add.w	r3, r7, #12
 800f042:	2101      	movs	r1, #1
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff ff78 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f04a:	4603      	mov	r3, r0
 800f04c:	617b      	str	r3, [r7, #20]
 800f04e:	e03b      	b.n	800f0c8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 800f050:	1d3b      	adds	r3, r7, #4
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	6979      	ldr	r1, [r7, #20]
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff ffa3 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d026      	beq.n	800f0b0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800f062:	f107 0314 	add.w	r3, r7, #20
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff ff8f 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f06c:	4603      	mov	r3, r0
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fd fc78 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f074:	4603      	mov	r3, r0
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800f07a:	f107 0314 	add.w	r3, r7, #20
 800f07e:	2101      	movs	r1, #1
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff ff5a 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f086:	4603      	mov	r3, r0
 800f088:	461a      	mov	r2, r3
 800f08a:	6979      	ldr	r1, [r7, #20]
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f7ff ffad 	bl	800efec <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 800f092:	f107 0310 	add.w	r3, r7, #16
 800f096:	4618      	mov	r0, r3
 800f098:	f7fd fc64 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f09c:	4603      	mov	r3, r0
 800f09e:	681c      	ldr	r4, [r3, #0]
 800f0a0:	f107 030c 	add.w	r3, r7, #12
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7ff ff70 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	601c      	str	r4, [r3, #0]
 800f0ae:	e006      	b.n	800f0be <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f7f5 faab 	bl	800460c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	6978      	ldr	r0, [r7, #20]
 800f0ba:	f001 f9b7 	bl	801042c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800f0be:	f107 0314 	add.w	r3, r7, #20
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff ff51 	bl	800ef6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800f0c8:	f107 0208 	add.w	r2, r7, #8
 800f0cc:	f107 0314 	add.w	r3, r7, #20
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fd fe0f 	bl	800ccf6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	f083 0301 	eor.w	r3, r3, #1
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1b5      	bne.n	800f050 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 800f0e4:	e000      	b.n	800f0e8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 800f0e6:	bf00      	nop
    }
 800f0e8:	371c      	adds	r7, #28
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0ee <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800f0ee:	b5b0      	push	{r4, r5, r7, lr}
 800f0f0:	b086      	sub	sp, #24
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	60f8      	str	r0, [r7, #12]
 800f0f6:	60b9      	str	r1, [r7, #8]
 800f0f8:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	617b      	str	r3, [r7, #20]
 800f0fe:	e00b      	b.n	800f118 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800f100:	4628      	mov	r0, r5
 800f102:	f7f5 fa83 	bl	800460c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800f106:	4621      	mov	r1, r4
 800f108:	6978      	ldr	r0, [r7, #20]
 800f10a:	f001 f98f 	bl	801042c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800f10e:	f107 0314 	add.w	r3, r7, #20
 800f112:	4618      	mov	r0, r3
 800f114:	f7ff ff29 	bl	800ef6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800f118:	f107 0208 	add.w	r2, r7, #8
 800f11c:	f107 0314 	add.w	r3, r7, #20
 800f120:	4611      	mov	r1, r2
 800f122:	4618      	mov	r0, r3
 800f124:	f7fd fde7 	bl	800ccf6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800f128:	4603      	mov	r3, r0
 800f12a:	f083 0301 	eor.w	r3, r3, #1
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1e5      	bne.n	800f100 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 800f134:	bf00      	nop
 800f136:	bf00      	nop
 800f138:	3718      	adds	r7, #24
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bdb0      	pop	{r4, r5, r7, pc}

0800f13e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800f13e:	b480      	push	{r7}
 800f140:	b083      	sub	sp, #12
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4618      	mov	r0, r3
 800f14a:	370c      	adds	r7, #12
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800f15e:	463b      	mov	r3, r7
 800f160:	4618      	mov	r0, r3
 800f162:	f7ff ffec 	bl	800f13e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4618      	mov	r0, r3
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800f170:	b5b0      	push	{r4, r5, r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800f178:	1d3b      	adds	r3, r7, #4
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff ffdf 	bl	800f13e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800f180:	f107 030c 	add.w	r3, r7, #12
 800f184:	4629      	mov	r1, r5
 800f186:	4618      	mov	r0, r3
 800f188:	f001 f99b 	bl	80104c2 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800f18c:	bf00      	nop
 800f18e:	4620      	mov	r0, r4
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bdb0      	pop	{r4, r5, r7, pc}

0800f196 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800f196:	b580      	push	{r7, lr}
 800f198:	b082      	sub	sp, #8
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
 800f19e:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	f7f5 fdf7 	bl	8004d9c <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	f083 0301 	eor.w	r3, r3, #1
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b086      	sub	sp, #24
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	60f8      	str	r0, [r7, #12]
 800f1c6:	60b9      	str	r1, [r7, #8]
 800f1c8:	713a      	strb	r2, [r7, #4]
 800f1ca:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800f1cc:	68ba      	ldr	r2, [r7, #8]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	1ad3      	subs	r3, r2, r3
 800f1d2:	109b      	asrs	r3, r3, #2
 800f1d4:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800f1d6:	e036      	b.n	800f246 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800f1d8:	1d3b      	adds	r3, r7, #4
 800f1da:	68f9      	ldr	r1, [r7, #12]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7ff ffda 	bl	800f196 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	e063      	b.n	800f2b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f1f2:	1d3b      	adds	r3, r7, #4
 800f1f4:	68f9      	ldr	r1, [r7, #12]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7ff ffcd 	bl	800f196 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d001      	beq.n	800f206 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	e056      	b.n	800f2b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	3301      	adds	r3, #1
 800f20a:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f20c:	1d3b      	adds	r3, r7, #4
 800f20e:	68f9      	ldr	r1, [r7, #12]
 800f210:	4618      	mov	r0, r3
 800f212:	f7ff ffc0 	bl	800f196 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d001      	beq.n	800f220 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	e049      	b.n	800f2b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	3301      	adds	r3, #1
 800f224:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f226:	1d3b      	adds	r3, r7, #4
 800f228:	68f9      	ldr	r1, [r7, #12]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7ff ffb3 	bl	800f196 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d001      	beq.n	800f23a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	e03c      	b.n	800f2b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	3301      	adds	r3, #1
 800f23e:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	3b01      	subs	r3, #1
 800f244:	617b      	str	r3, [r7, #20]
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	dcc5      	bgt.n	800f1d8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	2b03      	cmp	r3, #3
 800f254:	d006      	beq.n	800f264 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800f256:	2b03      	cmp	r3, #3
 800f258:	dc2b      	bgt.n	800f2b2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d01c      	beq.n	800f298 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800f25e:	2b02      	cmp	r3, #2
 800f260:	d00d      	beq.n	800f27e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800f262:	e026      	b.n	800f2b2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800f264:	1d3b      	adds	r3, r7, #4
 800f266:	68f9      	ldr	r1, [r7, #12]
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff ff94 	bl	800f196 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	e01d      	b.n	800f2b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	3301      	adds	r3, #1
 800f27c:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f27e:	1d3b      	adds	r3, r7, #4
 800f280:	68f9      	ldr	r1, [r7, #12]
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff ff87 	bl	800f196 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	e010      	b.n	800f2b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	3301      	adds	r3, #1
 800f296:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f298:	1d3b      	adds	r3, r7, #4
 800f29a:	68f9      	ldr	r1, [r7, #12]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff ff7a 	bl	800f196 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d001      	beq.n	800f2ac <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	e003      	b.n	800f2b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	60fb      	str	r3, [r7, #12]
	  return __last;
 800f2b2:	68bb      	ldr	r3, [r7, #8]
    }
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	370c      	adds	r7, #12
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b082      	sub	sp, #8
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
 800f2da:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800f2dc:	463b      	mov	r3, r7
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7ff ffec 	bl	800f2bc <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}

0800f2ee <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800f2ee:	b5b0      	push	{r4, r5, r7, lr}
 800f2f0:	b084      	sub	sp, #16
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800f2f6:	1d3b      	adds	r3, r7, #4
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff ffdf 	bl	800f2bc <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800f2fe:	f107 030c 	add.w	r3, r7, #12
 800f302:	4629      	mov	r1, r5
 800f304:	4618      	mov	r0, r3
 800f306:	f001 f8ea 	bl	80104de <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800f30a:	bf00      	nop
 800f30c:	4620      	mov	r0, r4
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bdb0      	pop	{r4, r5, r7, pc}

0800f314 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	4619      	mov	r1, r3
 800f326:	4610      	mov	r0, r2
 800f328:	f7f5 fd45 	bl	8004db6 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>
 800f32c:	4603      	mov	r3, r0
 800f32e:	f083 0301 	eor.w	r3, r3, #1
 800f332:	b2db      	uxtb	r3, r3
 800f334:	4618      	mov	r0, r3
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b086      	sub	sp, #24
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	713a      	strb	r2, [r7, #4]
 800f348:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800f34a:	68ba      	ldr	r2, [r7, #8]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	109b      	asrs	r3, r3, #2
 800f352:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800f354:	e036      	b.n	800f3c4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800f356:	1d3b      	adds	r3, r7, #4
 800f358:	68f9      	ldr	r1, [r7, #12]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7ff ffda 	bl	800f314 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	e063      	b.n	800f432 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	3301      	adds	r3, #1
 800f36e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f370:	1d3b      	adds	r3, r7, #4
 800f372:	68f9      	ldr	r1, [r7, #12]
 800f374:	4618      	mov	r0, r3
 800f376:	f7ff ffcd 	bl	800f314 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d001      	beq.n	800f384 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	e056      	b.n	800f432 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	3301      	adds	r3, #1
 800f388:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f38a:	1d3b      	adds	r3, r7, #4
 800f38c:	68f9      	ldr	r1, [r7, #12]
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff ffc0 	bl	800f314 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d001      	beq.n	800f39e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	e049      	b.n	800f432 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f3a4:	1d3b      	adds	r3, r7, #4
 800f3a6:	68f9      	ldr	r1, [r7, #12]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7ff ffb3 	bl	800f314 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d001      	beq.n	800f3b8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	e03c      	b.n	800f432 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	dcc5      	bgt.n	800f356 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	d006      	beq.n	800f3e2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800f3d4:	2b03      	cmp	r3, #3
 800f3d6:	dc2b      	bgt.n	800f430 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d01c      	beq.n	800f416 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800f3dc:	2b02      	cmp	r3, #2
 800f3de:	d00d      	beq.n	800f3fc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800f3e0:	e026      	b.n	800f430 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800f3e2:	1d3b      	adds	r3, r7, #4
 800f3e4:	68f9      	ldr	r1, [r7, #12]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7ff ff94 	bl	800f314 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	e01d      	b.n	800f432 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f3fc:	1d3b      	adds	r3, r7, #4
 800f3fe:	68f9      	ldr	r1, [r7, #12]
 800f400:	4618      	mov	r0, r3
 800f402:	f7ff ff87 	bl	800f314 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	e010      	b.n	800f432 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	3301      	adds	r3, #1
 800f414:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f416:	1d3b      	adds	r3, r7, #4
 800f418:	68f9      	ldr	r1, [r7, #12]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7ff ff7a 	bl	800f314 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d001      	beq.n	800f42a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	e003      	b.n	800f432 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	3301      	adds	r3, #1
 800f42e:	60fb      	str	r3, [r7, #12]
	  return __last;
 800f430:	68bb      	ldr	r3, [r7, #8]
    }
 800f432:	4618      	mov	r0, r3
 800f434:	3718      	adds	r7, #24
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b082      	sub	sp, #8
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800f444:	6839      	ldr	r1, [r7, #0]
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f001 f857 	bl	80104fa <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4618      	mov	r0, r3
 800f450:	3708      	adds	r7, #8
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}

0800f456 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f456:	b580      	push	{r7, lr}
 800f458:	b084      	sub	sp, #16
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	60f8      	str	r0, [r7, #12]
 800f45e:	60b9      	str	r1, [r7, #8]
 800f460:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	68b9      	ldr	r1, [r7, #8]
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f001 f853 	bl	8010512 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800f46c:	4603      	mov	r3, r0
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800f47e:	1d3b      	adds	r3, r7, #4
 800f480:	4618      	mov	r0, r3
 800f482:	f001 f85e 	bl	8010542 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800f486:	4603      	mov	r3, r0
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4618      	mov	r0, r3
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800f492:	b580      	push	{r7, lr}
 800f494:	b082      	sub	sp, #8
 800f496:	af00      	add	r7, sp, #0
 800f498:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800f49a:	1d3b      	adds	r3, r7, #4
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f4 fa5e 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b084      	sub	sp, #16
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	60f8      	str	r0, [r7, #12]
 800f4b6:	60b9      	str	r1, [r7, #8]
 800f4b8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	68b9      	ldr	r1, [r7, #8]
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f001 f84a 	bl	8010558 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b082      	sub	sp, #8
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
 800f4d6:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff ffda 	bl	800f492 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	1a9b      	subs	r3, r3, r2
 800f4e4:	109b      	asrs	r3, r3, #2
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	1d3b      	adds	r3, r7, #4
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff fd24 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800f506:	e00f      	b.n	800f528 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 800f508:	1d3b      	adds	r3, r7, #4
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7ff fd3d 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f510:	4603      	mov	r3, r0
 800f512:	4618      	mov	r0, r3
 800f514:	f7f4 fad2 	bl	8003abc <_ZSt11__addressofIfEPT_RS0_>
 800f518:	4603      	mov	r3, r0
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7f4 fad9 	bl	8003ad2 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800f520:	1d3b      	adds	r3, r7, #4
 800f522:	4618      	mov	r0, r3
 800f524:	f7ff fd21 	bl	800ef6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800f528:	463a      	mov	r2, r7
 800f52a:	1d3b      	adds	r3, r7, #4
 800f52c:	4611      	mov	r1, r2
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fd fbe1 	bl	800ccf6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800f534:	4603      	mov	r3, r0
 800f536:	f083 0301 	eor.w	r3, r3, #1
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1e3      	bne.n	800f508 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xc>
	}
 800f540:	bf00      	nop
 800f542:	bf00      	nop
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800f54a:	b480      	push	{r7}
 800f54c:	b083      	sub	sp, #12
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
 800f552:	6039      	str	r1, [r7, #0]
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f56c:	f7f3 face 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d006      	beq.n	800f584 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	68b9      	ldr	r1, [r7, #8]
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f001 f809 	bl	8010592 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 800f580:	4603      	mov	r3, r0
 800f582:	e006      	b.n	800f592 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f001 f825 	bl	80105d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800f58e:	4603      	mov	r3, r0
 800f590:	bf00      	nop
    }
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b084      	sub	sp, #16
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	60f8      	str	r0, [r7, #12]
 800f5a2:	60b9      	str	r1, [r7, #8]
 800f5a4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	68b9      	ldr	r1, [r7, #8]
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f7fc fe9b 	bl	800c2e6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3710      	adds	r7, #16
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b082      	sub	sp, #8
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
 800f5c2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800f5c4:	e009      	b.n	800f5da <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f001 f835 	bl	8010636 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f001 f83c 	bl	801064c <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	3318      	adds	r3, #24
 800f5d8:	607b      	str	r3, [r7, #4]
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d1f1      	bne.n	800f5c6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 800f5e2:	bf00      	nop
 800f5e4:	bf00      	nop
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	68b9      	ldr	r1, [r7, #8]
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f001 f830 	bl	8010662 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800f602:	4603      	mov	r3, r0
 800f604:	4618      	mov	r0, r3
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800f616:	e009      	b.n	800f62c <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 fd42 	bl	80100a2 <_ZSt11__addressofIcEPT_RS0_>
 800f61e:	4603      	mov	r3, r0
 800f620:	4618      	mov	r0, r3
 800f622:	f001 f836 	bl	8010692 <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	3301      	adds	r3, #1
 800f62a:	607b      	str	r3, [r7, #4]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	429a      	cmp	r2, r3
 800f632:	d1f1      	bne.n	800f618 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 800f634:	bf00      	nop
 800f636:	bf00      	nop
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800f63e:	b480      	push	{r7}
 800f640:	b083      	sub	sp, #12
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]
 800f648:	bf00      	nop
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800f654:	b590      	push	{r4, r7, lr}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800f65e:	6838      	ldr	r0, [r7, #0]
 800f660:	f001 f822 	bl	80106a8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800f664:	4603      	mov	r3, r0
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f011 fbad 	bl	8020dc8 <_ZNSaIcEC1ERKS_>
 800f66e:	687c      	ldr	r4, [r7, #4]
 800f670:	6838      	ldr	r0, [r7, #0]
 800f672:	f001 f819 	bl	80106a8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800f676:	4603      	mov	r3, r0
 800f678:	4619      	mov	r1, r3
 800f67a:	4620      	mov	r0, r4
 800f67c:	f001 f81f 	bl	80106be <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4618      	mov	r0, r3
 800f684:	370c      	adds	r7, #12
 800f686:	46bd      	mov	sp, r7
 800f688:	bd90      	pop	{r4, r7, pc}

0800f68a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f68a:	b480      	push	{r7}
 800f68c:	b083      	sub	sp, #12
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
 800f692:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	601a      	str	r2, [r3, #0]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	370c      	adds	r7, #12
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f6aa:	b590      	push	{r4, r7, lr}
 800f6ac:	b087      	sub	sp, #28
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	60f8      	str	r0, [r7, #12]
 800f6b2:	60b9      	str	r1, [r7, #8]
 800f6b4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f001 f824 	bl	8010704 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800f6bc:	4604      	mov	r4, r0
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f7fd f9aa 	bl	800ca18 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	1ae2      	subs	r2, r4, r3
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	bf34      	ite	cc
 800f6ce:	2301      	movcc	r3, #1
 800f6d0:	2300      	movcs	r3, #0
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d002      	beq.n	800f6de <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f011 fb7d 	bl	8020dd8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f7fd f99a 	bl	800ca18 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800f6e4:	4604      	mov	r4, r0
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f7fd f996 	bl	800ca18 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	613b      	str	r3, [r7, #16]
 800f6f0:	f107 0208 	add.w	r2, r7, #8
 800f6f4:	f107 0310 	add.w	r3, r7, #16
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7f4 f97f 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 800f700:	4603      	mov	r3, r0
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4423      	add	r3, r4
 800f706:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f7fd f985 	bl	800ca18 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800f70e:	4602      	mov	r2, r0
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	4293      	cmp	r3, r2
 800f714:	d306      	bcc.n	800f724 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f000 fff4 	bl	8010704 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800f71c:	4602      	mov	r2, r0
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	4293      	cmp	r3, r2
 800f722:	d904      	bls.n	800f72e <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f000 ffed 	bl	8010704 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800f72a:	4603      	mov	r3, r0
 800f72c:	e000      	b.n	800f730 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800f72e:	697b      	ldr	r3, [r7, #20]
      }
 800f730:	4618      	mov	r0, r3
 800f732:	371c      	adds	r7, #28
 800f734:	46bd      	mov	sp, r7
 800f736:	bd90      	pop	{r4, r7, pc}

0800f738 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	f107 030c 	add.w	r3, r7, #12
 800f746:	4611      	mov	r1, r2
 800f748:	4618      	mov	r0, r3
 800f74a:	f7ff ff9e 	bl	800f68a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	4618      	mov	r0, r3
 800f752:	3710      	adds	r7, #16
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f758:	b590      	push	{r4, r7, lr}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 f83a 	bl	800f7dc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800f768:	4603      	mov	r3, r0
 800f76a:	681c      	ldr	r4, [r3, #0]
 800f76c:	6838      	ldr	r0, [r7, #0]
 800f76e:	f000 f835 	bl	800f7dc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800f772:	4603      	mov	r3, r0
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	1ae3      	subs	r3, r4, r3
 800f778:	10db      	asrs	r3, r3, #3
 800f77a:	4a03      	ldr	r2, [pc, #12]	; (800f788 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800f77c:	fb02 f303 	mul.w	r3, r2, r3
 800f780:	4618      	mov	r0, r3
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	bd90      	pop	{r4, r7, pc}
 800f788:	aaaaaaab 	.word	0xaaaaaaab

0800f78c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d006      	beq.n	800f7aa <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6839      	ldr	r1, [r7, #0]
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f000 ffc0 	bl	8010726 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	e000      	b.n	800f7ac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 800f7aa:	2300      	movs	r3, #0
      }
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b087      	sub	sp, #28
 800f7b8:	af02      	add	r7, sp, #8
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	607a      	str	r2, [r7, #4]
 800f7c0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800f7c2:	f88d 4000 	strb.w	r4, [sp]
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	68b9      	ldr	r1, [r7, #8]
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f000 ffcd 	bl	801076c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800f7d2:	4603      	mov	r3, r0
      }
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3714      	adds	r7, #20
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd90      	pop	{r4, r7, pc}

0800f7dc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800f7f2:	b580      	push	{r7, lr}
 800f7f4:	b082      	sub	sp, #8
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800f7fc:	6838      	ldr	r0, [r7, #0]
 800f7fe:	f000 ffc7 	bl	8010790 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 800f802:	bf00      	nop
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b084      	sub	sp, #16
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
 800f812:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6819      	ldr	r1, [r3, #0]
 800f818:	683a      	ldr	r2, [r7, #0]
 800f81a:	4613      	mov	r3, r2
 800f81c:	005b      	lsls	r3, r3, #1
 800f81e:	4413      	add	r3, r2
 800f820:	00db      	lsls	r3, r3, #3
 800f822:	425b      	negs	r3, r3
 800f824:	440b      	add	r3, r1
 800f826:	60fb      	str	r3, [r7, #12]
 800f828:	f107 020c 	add.w	r2, r7, #12
 800f82c:	f107 0308 	add.w	r3, r7, #8
 800f830:	4611      	mov	r1, r2
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff ff29 	bl	800f68a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800f842:	b480      	push	{r7}
 800f844:	b083      	sub	sp, #12
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	4618      	mov	r0, r3
 800f850:	370c      	adds	r7, #12
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr

0800f85a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b082      	sub	sp, #8
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
 800f862:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800f864:	e009      	b.n	800f87a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 ffaf 	bl	80107ca <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800f86c:	4603      	mov	r3, r0
 800f86e:	4618      	mov	r0, r3
 800f870:	f000 ffb6 	bl	80107e0 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	3318      	adds	r3, #24
 800f878:	607b      	str	r3, [r7, #4]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d1f1      	bne.n	800f866 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 800f882:	bf00      	nop
 800f884:	bf00      	nop
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800f88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800f896:	687c      	ldr	r4, [r7, #4]
 800f898:	6838      	ldr	r0, [r7, #0]
 800f89a:	f7fd f8bd 	bl	800ca18 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800f89e:	4605      	mov	r5, r0
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f000 ffb5 	bl	8010812 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	f107 030c 	add.w	r3, r7, #12
 800f8ae:	4611      	mov	r1, r2
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 ffa0 	bl	80107f6 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 800f8b6:	f107 030c 	add.w	r3, r7, #12
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	4629      	mov	r1, r5
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f000 ffb2 	bl	8010828 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 800f8c4:	f107 030c 	add.w	r3, r7, #12
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fc fe2c 	bl	800c526 <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800f8ce:	6838      	ldr	r0, [r7, #0]
 800f8d0:	f000 ffbe 	bl	8010850 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800f8d4:	4605      	mov	r5, r0
 800f8d6:	6838      	ldr	r0, [r7, #0]
 800f8d8:	f000 ffca 	bl	8010870 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800f8dc:	4606      	mov	r6, r0
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7fd fb97 	bl	800d018 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800f8ea:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	4631      	mov	r1, r6
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	f000 ffce 	bl	8010892 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800f8f6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	605a      	str	r2, [r3, #4]
      }
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4618      	mov	r0, r3
 800f900:	3714      	adds	r7, #20
 800f902:	46bd      	mov	sp, r7
 800f904:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f906 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	601a      	str	r2, [r3, #0]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4618      	mov	r0, r3
 800f91c:	370c      	adds	r7, #12
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr

0800f926 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f926:	b590      	push	{r4, r7, lr}
 800f928:	b087      	sub	sp, #28
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	60f8      	str	r0, [r7, #12]
 800f92e:	60b9      	str	r1, [r7, #8]
 800f930:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f000 ffbe 	bl	80108b4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800f938:	4604      	mov	r4, r0
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f000 ffcc 	bl	80108d8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800f940:	4603      	mov	r3, r0
 800f942:	1ae2      	subs	r2, r4, r3
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	429a      	cmp	r2, r3
 800f948:	bf34      	ite	cc
 800f94a:	2301      	movcc	r3, #1
 800f94c:	2300      	movcs	r3, #0
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b00      	cmp	r3, #0
 800f952:	d002      	beq.n	800f95a <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f011 fa3f 	bl	8020dd8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f000 ffbc 	bl	80108d8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800f960:	4604      	mov	r4, r0
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f000 ffb8 	bl	80108d8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800f968:	4603      	mov	r3, r0
 800f96a:	613b      	str	r3, [r7, #16]
 800f96c:	f107 0208 	add.w	r2, r7, #8
 800f970:	f107 0310 	add.w	r3, r7, #16
 800f974:	4611      	mov	r1, r2
 800f976:	4618      	mov	r0, r3
 800f978:	f7f4 f841 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 800f97c:	4603      	mov	r3, r0
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4423      	add	r3, r4
 800f982:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f984:	68f8      	ldr	r0, [r7, #12]
 800f986:	f000 ffa7 	bl	80108d8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800f98a:	4602      	mov	r2, r0
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	4293      	cmp	r3, r2
 800f990:	d306      	bcc.n	800f9a0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f000 ff8e 	bl	80108b4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800f998:	4602      	mov	r2, r0
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d904      	bls.n	800f9aa <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 ff87 	bl	80108b4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	e000      	b.n	800f9ac <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800f9aa:	697b      	ldr	r3, [r7, #20]
      }
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	371c      	adds	r7, #28
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd90      	pop	{r4, r7, pc}

0800f9b4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	f107 030c 	add.w	r3, r7, #12
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7ff ff9e 	bl	800f906 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f9d4:	b590      	push	{r4, r7, lr}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 f826 	bl	800fa30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	681c      	ldr	r4, [r3, #0]
 800f9e8:	6838      	ldr	r0, [r7, #0]
 800f9ea:	f000 f821 	bl	800fa30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	1ae3      	subs	r3, r4, r3
 800f9f4:	10db      	asrs	r3, r3, #3
 800f9f6:	4a03      	ldr	r2, [pc, #12]	; (800fa04 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800f9f8:	fb02 f303 	mul.w	r3, r2, r3
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd90      	pop	{r4, r7, pc}
 800fa04:	aaaaaaab 	.word	0xaaaaaaab

0800fa08 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d006      	beq.n	800fa26 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f000 ff71 	bl	8010904 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 800fa22:	4603      	mov	r3, r0
 800fa24:	e000      	b.n	800fa28 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800fa26:	2300      	movs	r3, #0
      }
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	370c      	adds	r7, #12
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr

0800fa46 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800fa46:	b590      	push	{r4, r7, lr}
 800fa48:	b085      	sub	sp, #20
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	60f8      	str	r0, [r7, #12]
 800fa4e:	60b9      	str	r1, [r7, #8]
 800fa50:	607a      	str	r2, [r7, #4]
 800fa52:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f000 ff78 	bl	801094a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	68b8      	ldr	r0, [r7, #8]
 800fa5e:	f000 ff74 	bl	801094a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800fa62:	4601      	mov	r1, r0
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f000 ff79 	bl	8010960 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800fa6e:	4603      	mov	r3, r0
    }
 800fa70:	4618      	mov	r0, r3
 800fa72:	3714      	adds	r7, #20
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd90      	pop	{r4, r7, pc}

0800fa78 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6819      	ldr	r1, [r3, #0]
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	4613      	mov	r3, r2
 800fa8a:	005b      	lsls	r3, r3, #1
 800fa8c:	4413      	add	r3, r2
 800fa8e:	00db      	lsls	r3, r3, #3
 800fa90:	425b      	negs	r3, r3
 800fa92:	440b      	add	r3, r1
 800fa94:	60fb      	str	r3, [r7, #12]
 800fa96:	f107 020c 	add.w	r2, r7, #12
 800fa9a:	f107 0308 	add.w	r3, r7, #8
 800fa9e:	4611      	mov	r1, r2
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7ff ff30 	bl	800f906 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	4618      	mov	r0, r3
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800fad0:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800fad4:	4618      	mov	r0, r3
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800fae8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800faec:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f7ff ffea 	bl	800fac8 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800faf4:	4603      	mov	r3, r0
 800faf6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800faf8:	f107 0208 	add.w	r2, r7, #8
 800fafc:	f107 030c 	add.w	r3, r7, #12
 800fb00:	4611      	mov	r1, r2
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f4 f83e 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	681b      	ldr	r3, [r3, #0]
      }
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b086      	sub	sp, #24
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800fb20:	2301      	movs	r3, #1
 800fb22:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	68b9      	ldr	r1, [r7, #8]
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 ff35 	bl	8010998 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 800fb2e:	4603      	mov	r3, r0
    }
 800fb30:	4618      	mov	r0, r3
 800fb32:	3718      	adds	r7, #24
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	605a      	str	r2, [r3, #4]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	609a      	str	r2, [r3, #8]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	60da      	str	r2, [r3, #12]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	370c      	adds	r7, #12
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr

0800fb66 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b084      	sub	sp, #16
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	6039      	str	r1, [r7, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	60fb      	str	r3, [r7, #12]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800fb78:	f7f2 ffc8 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d006      	beq.n	800fb90 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	4618      	mov	r0, r3
 800fb88:	f011 f90c 	bl	8020da4 <_Znwj>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	e006      	b.n	800fb9e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800fb90:	2200      	movs	r2, #0
 800fb92:	68b9      	ldr	r1, [r7, #8]
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f001 fab4 	bl	8011102 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	bf00      	nop
      { return __a.allocate(__n); }
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800fba6:	b480      	push	{r7}
 800fba8:	b083      	sub	sp, #12
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 fef6 	bl	80109b8 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b084      	sub	sp, #16
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800fbde:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fbe2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f7f3 ff7f 	bl	8003ae8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800fbea:	4603      	mov	r3, r0
 800fbec:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800fbee:	f107 0208 	add.w	r2, r7, #8
 800fbf2:	f107 030c 	add.w	r3, r7, #12
 800fbf6:	4611      	mov	r1, r2
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7f3 ffc3 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	681b      	ldr	r3, [r3, #0]
      }
 800fc02:	4618      	mov	r0, r3
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800fc0a:	b590      	push	{r4, r7, lr}
 800fc0c:	b085      	sub	sp, #20
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	60f8      	str	r0, [r7, #12]
 800fc12:	60b9      	str	r1, [r7, #8]
 800fc14:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f000 fee8 	bl	80109ec <_ZSt12__miter_baseIPPfET_S2_>
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	68b8      	ldr	r0, [r7, #8]
 800fc20:	f000 fee4 	bl	80109ec <_ZSt12__miter_baseIPPfET_S2_>
 800fc24:	4603      	mov	r3, r0
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	4619      	mov	r1, r3
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f000 fee9 	bl	8010a02 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 800fc30:	4603      	mov	r3, r0
    }
 800fc32:	4618      	mov	r0, r3
 800fc34:	3714      	adds	r7, #20
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd90      	pop	{r4, r7, pc}

0800fc3a <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800fc3a:	b590      	push	{r4, r7, lr}
 800fc3c:	b085      	sub	sp, #20
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	60f8      	str	r0, [r7, #12]
 800fc42:	60b9      	str	r1, [r7, #8]
 800fc44:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f000 fed0 	bl	80109ec <_ZSt12__miter_baseIPPfET_S2_>
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	68b8      	ldr	r0, [r7, #8]
 800fc50:	f000 fecc 	bl	80109ec <_ZSt12__miter_baseIPPfET_S2_>
 800fc54:	4603      	mov	r3, r0
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	4619      	mov	r1, r3
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f000 fef4 	bl	8010a48 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 800fc60:	4603      	mov	r3, r0
    }
 800fc62:	4618      	mov	r0, r3
 800fc64:	3714      	adds	r7, #20
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd90      	pop	{r4, r7, pc}

0800fc6a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800fc6a:	b590      	push	{r4, r7, lr}
 800fc6c:	b08b      	sub	sp, #44	; 0x2c
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	60f8      	str	r0, [r7, #12]
 800fc72:	60b9      	str	r1, [r7, #8]
 800fc74:	4613      	mov	r3, r2
 800fc76:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	695b      	ldr	r3, [r3, #20]
 800fc80:	1ad3      	subs	r3, r2, r3
 800fc82:	109b      	asrs	r3, r3, #2
 800fc84:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800fc86:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	6a3a      	ldr	r2, [r7, #32]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d92d      	bls.n	800fcf8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	1acb      	subs	r3, r1, r3
 800fca8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800fcaa:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800fcac:	79fb      	ldrb	r3, [r7, #7]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d002      	beq.n	800fcb8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	e000      	b.n	800fcba <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800fcbc:	4413      	add	r3, r2
 800fcbe:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d209      	bcs.n	800fcde <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	f7ff ff97 	bl	800fc0a <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 800fcdc:	e048      	b.n	800fd70 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800fce6:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800fcec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcee:	4413      	add	r3, r2
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	f7ff ffa2 	bl	800fc3a <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 800fcf6:	e03b      	b.n	800fd70 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	3304      	adds	r3, #4
 800fd00:	f107 0208 	add.w	r2, r7, #8
 800fd04:	4611      	mov	r1, r2
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7f3 fe79 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800fd12:	3302      	adds	r3, #2
 800fd14:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	69b9      	ldr	r1, [r7, #24]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fe fc00 	bl	800e520 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800fd20:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800fd22:	69ba      	ldr	r2, [r7, #24]
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	085b      	lsrs	r3, r3, #1
 800fd2a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800fd2c:	79fb      	ldrb	r3, [r7, #7]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d002      	beq.n	800fd38 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	e000      	b.n	800fd3a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800fd3c:	697a      	ldr	r2, [r7, #20]
 800fd3e:	4413      	add	r3, r2
 800fd40:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd4e:	4619      	mov	r1, r3
 800fd50:	f7ff ff5b 	bl	800fc0a <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6819      	ldr	r1, [r3, #0]
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	f7fd fbb9 	bl	800d4d6 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	697a      	ldr	r2, [r7, #20]
 800fd68:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	69ba      	ldr	r2, [r7, #24]
 800fd6e:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	3308      	adds	r3, #8
 800fd74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe fc0a 	bl	800e590 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f103 0018 	add.w	r0, r3, #24
 800fd82:	6a3b      	ldr	r3, [r7, #32]
 800fd84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd8e:	4413      	add	r3, r2
 800fd90:	4619      	mov	r1, r3
 800fd92:	f7fe fbfd 	bl	800e590 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 800fd96:	bf00      	nop
 800fd98:	372c      	adds	r7, #44	; 0x2c
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd90      	pop	{r4, r7, pc}

0800fd9e <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800fd9e:	b590      	push	{r4, r7, lr}
 800fda0:	b087      	sub	sp, #28
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	60f8      	str	r0, [r7, #12]
 800fda6:	60b9      	str	r1, [r7, #8]
 800fda8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800fdaa:	68f8      	ldr	r0, [r7, #12]
 800fdac:	f000 fe7c 	bl	8010aa8 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	68f8      	ldr	r0, [r7, #12]
 800fdb4:	f7fc fefc 	bl	800cbb0 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	1ae2      	subs	r2, r4, r3
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	bf34      	ite	cc
 800fdc2:	2301      	movcc	r3, #1
 800fdc4:	2300      	movcs	r3, #0
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d002      	beq.n	800fdd2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f011 f803 	bl	8020dd8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800fdd2:	68f8      	ldr	r0, [r7, #12]
 800fdd4:	f7fc feec 	bl	800cbb0 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800fdd8:	4604      	mov	r4, r0
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f7fc fee8 	bl	800cbb0 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800fde0:	4603      	mov	r3, r0
 800fde2:	613b      	str	r3, [r7, #16]
 800fde4:	f107 0208 	add.w	r2, r7, #8
 800fde8:	f107 0310 	add.w	r3, r7, #16
 800fdec:	4611      	mov	r1, r2
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7f3 fe05 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4423      	add	r3, r4
 800fdfa:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f7fc fed7 	bl	800cbb0 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800fe02:	4602      	mov	r2, r0
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d306      	bcc.n	800fe18 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x7a>
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f000 fe4c 	bl	8010aa8 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800fe10:	4602      	mov	r2, r0
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d904      	bls.n	800fe22 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x84>
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f000 fe45 	bl	8010aa8 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	e000      	b.n	800fe24 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x86>
 800fe22:	697b      	ldr	r3, [r7, #20]
      }
 800fe24:	4618      	mov	r0, r3
 800fe26:	371c      	adds	r7, #28
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd90      	pop	{r4, r7, pc}

0800fe2c <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b087      	sub	sp, #28
 800fe30:	af02      	add	r7, sp, #8
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
 800fe38:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800fe3a:	f88d 4000 	strb.w	r4, [sp]
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	68b9      	ldr	r1, [r7, #8]
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f000 fe40 	bl	8010aca <_ZNSt6vectorIcSaIcEE14_S_do_relocateEPcS2_S2_RS0_St17integral_constantIbLb1EE>
 800fe4a:	4603      	mov	r3, r0
      }
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3714      	adds	r7, #20
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd90      	pop	{r4, r7, pc}

0800fe54 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b084      	sub	sp, #16
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	425b      	negs	r3, r3
 800fe66:	4413      	add	r3, r2
 800fe68:	60fb      	str	r3, [r7, #12]
 800fe6a:	f107 020c 	add.w	r2, r7, #12
 800fe6e:	f107 0308 	add.w	r3, r7, #8
 800fe72:	4611      	mov	r1, r2
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7fd fc8f 	bl	800d798 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	1ad3      	subs	r3, r2, r3
    }
 800fe96:	4618      	mov	r0, r3
 800fe98:	3714      	adds	r7, #20
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr

0800fea2 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800fea2:	b590      	push	{r4, r7, lr}
 800fea4:	b085      	sub	sp, #20
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	60f8      	str	r0, [r7, #12]
 800feaa:	60b9      	str	r1, [r7, #8]
 800feac:	607a      	str	r2, [r7, #4]
 800feae:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f000 fe26 	bl	8010b02 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 800feb6:	4604      	mov	r4, r0
 800feb8:	68b8      	ldr	r0, [r7, #8]
 800feba:	f000 fe22 	bl	8010b02 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 800febe:	4601      	mov	r1, r0
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	4620      	mov	r0, r4
 800fec6:	f000 fe31 	bl	8010b2c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 800feca:	4603      	mov	r3, r0
    }
 800fecc:	4618      	mov	r0, r3
 800fece:	3714      	adds	r7, #20
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd90      	pop	{r4, r7, pc}

0800fed4 <_ZSt12__miter_baseIPcET_S1_>:
    __miter_base(_Iterator __it)
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
    { return __it; }
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	4618      	mov	r0, r3
 800fee0:	370c      	adds	r7, #12
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr

0800feea <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800feea:	b5b0      	push	{r4, r5, r7, lr}
 800feec:	b084      	sub	sp, #16
 800feee:	af00      	add	r7, sp, #0
 800fef0:	60f8      	str	r0, [r7, #12]
 800fef2:	60b9      	str	r1, [r7, #8]
 800fef4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f7fd fd9c 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 800fefc:	4604      	mov	r4, r0
 800fefe:	68b8      	ldr	r0, [r7, #8]
 800ff00:	f7fd fd98 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 800ff04:	4605      	mov	r5, r0
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7fd fd93 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	461a      	mov	r2, r3
 800ff12:	4629      	mov	r1, r5
 800ff14:	4620      	mov	r0, r4
 800ff16:	f000 fe1a 	bl	8010b4e <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	1d3b      	adds	r3, r7, #4
 800ff1e:	4611      	mov	r1, r2
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7fd fda2 	bl	800da6a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800ff26:	4603      	mov	r3, r0
    }
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bdb0      	pop	{r4, r5, r7, pc}

0800ff30 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ff30:	b5b0      	push	{r4, r5, r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f7fd fd79 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 800ff42:	4604      	mov	r4, r0
 800ff44:	68b8      	ldr	r0, [r7, #8]
 800ff46:	f7fd fd75 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 fe0e 	bl	8010b6e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800ff52:	4603      	mov	r3, r0
 800ff54:	461a      	mov	r2, r3
 800ff56:	4629      	mov	r1, r5
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f000 fe16 	bl	8010b8a <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	4619      	mov	r1, r3
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 fe21 	bl	8010baa <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>
 800ff68:	4603      	mov	r3, r0
    }
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3710      	adds	r7, #16
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bdb0      	pop	{r4, r5, r7, pc}

0800ff72 <_ZSt7advanceIPcjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 800ff72:	b590      	push	{r4, r7, lr}
 800ff74:	b085      	sub	sp, #20
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
 800ff7a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7fc feae 	bl	800cce2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800ff86:	4622      	mov	r2, r4
 800ff88:	68f9      	ldr	r1, [r7, #12]
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 fe22 	bl	8010bd4 <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>
    }
 800ff90:	bf00      	nop
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd90      	pop	{r4, r7, pc}

0800ff98 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
 800ffa4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	68b9      	ldr	r1, [r7, #8]
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f000 fe24 	bl	8010bf8 <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ffba:	b590      	push	{r4, r7, lr}
 800ffbc:	b085      	sub	sp, #20
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	60f8      	str	r0, [r7, #12]
 800ffc2:	60b9      	str	r1, [r7, #8]
 800ffc4:	607a      	str	r2, [r7, #4]
 800ffc6:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f000 fe27 	bl	8010c1c <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 800ffce:	4604      	mov	r4, r0
 800ffd0:	68b8      	ldr	r0, [r7, #8]
 800ffd2:	f000 fe23 	bl	8010c1c <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 800ffd6:	4601      	mov	r1, r0
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f000 fda5 	bl	8010b2c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 800ffe2:	4603      	mov	r3, r0
    }
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3714      	adds	r7, #20
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd90      	pop	{r4, r7, pc}

0800ffec <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fe1f 	bl	8010c3a <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800fffc:	4603      	mov	r3, r0
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 8010002:	6838      	ldr	r0, [r7, #0]
 8010004:	f000 fe19 	bl	8010c3a <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 8010008:	4603      	mov	r3, r0
 801000a:	781a      	ldrb	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010010:	f107 030f 	add.w	r3, r7, #15
 8010014:	4618      	mov	r0, r3
 8010016:	f000 fe10 	bl	8010c3a <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 801001a:	4603      	mov	r3, r0
 801001c:	781a      	ldrb	r2, [r3, #0]
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	701a      	strb	r2, [r3, #0]
    }
 8010022:	bf00      	nop
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}

0801002a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801002a:	b480      	push	{r7}
 801002c:	b087      	sub	sp, #28
 801002e:	af00      	add	r7, sp, #0
 8010030:	60f8      	str	r0, [r7, #12]
 8010032:	60b9      	str	r1, [r7, #8]
 8010034:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010036:	68ba      	ldr	r2, [r7, #8]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	617b      	str	r3, [r7, #20]
 801003e:	e00c      	b.n	801005a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	781a      	ldrb	r2, [r3, #0]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3301      	adds	r3, #1
 801004c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	3301      	adds	r3, #1
 8010052:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	3b01      	subs	r3, #1
 8010058:	617b      	str	r3, [r7, #20]
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	2b00      	cmp	r3, #0
 801005e:	dcef      	bgt.n	8010040 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 8010060:	687b      	ldr	r3, [r7, #4]
	}
 8010062:	4618      	mov	r0, r3
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801006e:	b580      	push	{r7, lr}
 8010070:	b086      	sub	sp, #24
 8010072:	af00      	add	r7, sp, #0
 8010074:	60f8      	str	r0, [r7, #12]
 8010076:	60b9      	str	r1, [r7, #8]
 8010078:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801007a:	68ba      	ldr	r2, [r7, #8]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d005      	beq.n	8010094 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	461a      	mov	r2, r3
 801008c:	68f9      	ldr	r1, [r7, #12]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f014 f859 	bl	8024146 <memmove>
	  return __result + _Num;
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	4413      	add	r3, r2
	}
 801009a:	4618      	mov	r0, r3
 801009c:	3718      	adds	r7, #24
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80100a2:	b480      	push	{r7}
 80100a4:	b083      	sub	sp, #12
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4618      	mov	r0, r3
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d009      	beq.n	80100e4 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d201      	bcs.n	80100e0 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 80100dc:	23ff      	movs	r3, #255	; 0xff
 80100de:	e002      	b.n	80100e6 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 80100e0:	2301      	movs	r3, #1
 80100e2:	e000      	b.n	80100e6 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 80100e4:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3714      	adds	r7, #20
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr
	...

080100f4 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 80100f4:	b590      	push	{r4, r7, lr}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f7f3 fc2d 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8010104:	4604      	mov	r4, r0
 8010106:	6838      	ldr	r0, [r7, #0]
 8010108:	f7f3 fc29 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 801010c:	4603      	mov	r3, r0
 801010e:	461a      	mov	r2, r3
 8010110:	4621      	mov	r1, r4
 8010112:	4804      	ldr	r0, [pc, #16]	; (8010124 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 8010114:	f7ff ffd0 	bl	80100b8 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 8010118:	4603      	mov	r3, r0
 801011a:	4618      	mov	r0, r3
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	bd90      	pop	{r4, r7, pc}
 8010122:	bf00      	nop
 8010124:	080258c0 	.word	0x080258c0

08010128 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8010128:	b590      	push	{r4, r7, lr}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
 8010134:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8010136:	463b      	mov	r3, r7
 8010138:	461a      	mov	r2, r3
 801013a:	68b9      	ldr	r1, [r7, #8]
 801013c:	68f8      	ldr	r0, [r7, #12]
 801013e:	f000 fdb5 	bl	8010cac <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	613b      	str	r3, [r7, #16]
 8010146:	e013      	b.n	8010170 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 8010148:	463b      	mov	r3, r7
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	6939      	ldr	r1, [r7, #16]
 801014e:	4618      	mov	r0, r3
 8010150:	f7fe ff27 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d005      	beq.n	8010166 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 801015a:	463b      	mov	r3, r7
 801015c:	693a      	ldr	r2, [r7, #16]
 801015e:	68b9      	ldr	r1, [r7, #8]
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f000 fdf9 	bl	8010d58 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8010166:	f107 0310 	add.w	r3, r7, #16
 801016a:	4618      	mov	r0, r3
 801016c:	f7fe fefd 	bl	800ef6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8010170:	1d3a      	adds	r2, r7, #4
 8010172:	f107 0310 	add.w	r3, r7, #16
 8010176:	4611      	mov	r1, r2
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff ffbb 	bl	80100f4 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 801017e:	4604      	mov	r4, r0
 8010180:	f107 0314 	add.w	r3, r7, #20
 8010184:	2100      	movs	r1, #0
 8010186:	4618      	mov	r0, r3
 8010188:	f7f4 fa1c 	bl	80045c4 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 801018c:	7d39      	ldrb	r1, [r7, #20]
 801018e:	4620      	mov	r0, r4
 8010190:	f7f4 fa24 	bl	80045dc <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d1d6      	bne.n	8010148 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 801019a:	bf00      	nop
 801019c:	bf00      	nop
 801019e:	371c      	adds	r7, #28
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd90      	pop	{r4, r7, pc}

080101a4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
	--_M_current;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	1f1a      	subs	r2, r3, #4
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	601a      	str	r2, [r3, #0]
	return *this;
 80101b6:	687b      	ldr	r3, [r7, #4]
      }
 80101b8:	4618      	mov	r0, r3
 80101ba:	370c      	adds	r7, #12
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr

080101c4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 80101d0:	e00a      	b.n	80101e8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 80101d2:	f107 0308 	add.w	r3, r7, #8
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7ff ffe4 	bl	80101a4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	68b9      	ldr	r1, [r7, #8]
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f000 fdb8 	bl	8010d58 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 80101e8:	f107 020c 	add.w	r2, r7, #12
 80101ec:	f107 0308 	add.w	r3, r7, #8
 80101f0:	4611      	mov	r1, r2
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7f3 fb76 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	bfcc      	ite	gt
 80101fe:	2301      	movgt	r3, #1
 8010200:	2300      	movle	r3, #0
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1e4      	bne.n	80101d2 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 8010208:	bf00      	nop
 801020a:	bf00      	nop
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8010212:	b580      	push	{r7, lr}
 8010214:	b084      	sub	sp, #16
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	425b      	negs	r3, r3
 8010226:	4413      	add	r3, r2
 8010228:	60fb      	str	r3, [r7, #12]
 801022a:	f107 020c 	add.w	r2, r7, #12
 801022e:	f107 0308 	add.w	r3, r7, #8
 8010232:	4611      	mov	r1, r2
 8010234:	4618      	mov	r0, r3
 8010236:	f7f3 faee 	bl	8003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
 8010250:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	68b9      	ldr	r1, [r7, #8]
 8010256:	f107 0018 	add.w	r0, r7, #24
 801025a:	f7fe fea2 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d020      	beq.n	80102a6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 8010264:	683a      	ldr	r2, [r7, #0]
 8010266:	6879      	ldr	r1, [r7, #4]
 8010268:	f107 0018 	add.w	r0, r7, #24
 801026c:	f7fe fe99 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8010270:	4603      	mov	r3, r0
 8010272:	2b00      	cmp	r3, #0
 8010274:	d004      	beq.n	8010280 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8010276:	6879      	ldr	r1, [r7, #4]
 8010278:	68f8      	ldr	r0, [r7, #12]
 801027a:	f000 fdad 	bl	8010dd8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 801027e:	e032      	b.n	80102e6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 8010280:	683a      	ldr	r2, [r7, #0]
 8010282:	68b9      	ldr	r1, [r7, #8]
 8010284:	f107 0018 	add.w	r0, r7, #24
 8010288:	f7fe fe8b 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d004      	beq.n	801029c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 8010292:	6839      	ldr	r1, [r7, #0]
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f000 fd9f 	bl	8010dd8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 801029a:	e024      	b.n	80102e6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 801029c:	68b9      	ldr	r1, [r7, #8]
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f000 fd9a 	bl	8010dd8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80102a4:	e01f      	b.n	80102e6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	68b9      	ldr	r1, [r7, #8]
 80102aa:	f107 0018 	add.w	r0, r7, #24
 80102ae:	f7fe fe78 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d004      	beq.n	80102c2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 80102b8:	68b9      	ldr	r1, [r7, #8]
 80102ba:	68f8      	ldr	r0, [r7, #12]
 80102bc:	f000 fd8c 	bl	8010dd8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80102c0:	e011      	b.n	80102e6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 80102c2:	683a      	ldr	r2, [r7, #0]
 80102c4:	6879      	ldr	r1, [r7, #4]
 80102c6:	f107 0018 	add.w	r0, r7, #24
 80102ca:	f7fe fe6a 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d004      	beq.n	80102de <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 80102d4:	6839      	ldr	r1, [r7, #0]
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	f000 fd7e 	bl	8010dd8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80102dc:	e003      	b.n	80102e6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 80102de:	6879      	ldr	r1, [r7, #4]
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f000 fd79 	bl	8010dd8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80102e6:	bf00      	nop
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 80102ee:	b590      	push	{r4, r7, lr}
 80102f0:	b087      	sub	sp, #28
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	60f8      	str	r0, [r7, #12]
 80102f6:	60b9      	str	r1, [r7, #8]
 80102f8:	607a      	str	r2, [r7, #4]
 80102fa:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 80102fc:	e004      	b.n	8010308 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 80102fe:	f107 030c 	add.w	r3, r7, #12
 8010302:	4618      	mov	r0, r3
 8010304:	f7fe fe31 	bl	800ef6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 8010308:	463b      	mov	r3, r7
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	68f9      	ldr	r1, [r7, #12]
 801030e:	4618      	mov	r0, r3
 8010310:	f7fe fe47 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d1f1      	bne.n	80102fe <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 801031a:	f107 0308 	add.w	r3, r7, #8
 801031e:	4618      	mov	r0, r3
 8010320:	f7ff ff40 	bl	80101a4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8010324:	e004      	b.n	8010330 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 8010326:	f107 0308 	add.w	r3, r7, #8
 801032a:	4618      	mov	r0, r3
 801032c:	f7ff ff3a 	bl	80101a4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8010330:	463b      	mov	r3, r7
 8010332:	68ba      	ldr	r2, [r7, #8]
 8010334:	6879      	ldr	r1, [r7, #4]
 8010336:	4618      	mov	r0, r3
 8010338:	f7fe fe33 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d1f1      	bne.n	8010326 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 8010342:	f107 0208 	add.w	r2, r7, #8
 8010346:	f107 030c 	add.w	r3, r7, #12
 801034a:	4611      	mov	r1, r2
 801034c:	4618      	mov	r0, r3
 801034e:	f7ff fed1 	bl	80100f4 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 8010352:	4604      	mov	r4, r0
 8010354:	f107 0314 	add.w	r3, r7, #20
 8010358:	2100      	movs	r1, #0
 801035a:	4618      	mov	r0, r3
 801035c:	f7f4 f932 	bl	80045c4 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8010360:	7d39      	ldrb	r1, [r7, #20]
 8010362:	4620      	mov	r0, r4
 8010364:	f7f4 f93a 	bl	80045dc <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 8010368:	4603      	mov	r3, r0
 801036a:	f083 0301 	eor.w	r3, r3, #1
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	e009      	b.n	801038c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 8010378:	68b9      	ldr	r1, [r7, #8]
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f000 fd2c 	bl	8010dd8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 8010380:	f107 030c 	add.w	r3, r7, #12
 8010384:	4618      	mov	r0, r3
 8010386:	f7fe fdf0 	bl	800ef6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 801038a:	e7bd      	b.n	8010308 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 801038c:	4618      	mov	r0, r3
 801038e:	371c      	adds	r7, #28
 8010390:	46bd      	mov	sp, r7
 8010392:	bd90      	pop	{r4, r7, pc}

08010394 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4618      	mov	r0, r3
 80103a0:	370c      	adds	r7, #12
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr

080103aa <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80103aa:	b5b0      	push	{r4, r5, r7, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	60f8      	str	r0, [r7, #12]
 80103b2:	60b9      	str	r1, [r7, #8]
 80103b4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f7ff f86b 	bl	800f492 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80103bc:	4604      	mov	r4, r0
 80103be:	68b8      	ldr	r0, [r7, #8]
 80103c0:	f7ff f867 	bl	800f492 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80103c4:	4605      	mov	r5, r0
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7ff f863 	bl	800f492 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80103cc:	4603      	mov	r3, r0
 80103ce:	461a      	mov	r2, r3
 80103d0:	4629      	mov	r1, r5
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 fd17 	bl	8010e06 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 80103d8:	4603      	mov	r3, r0
 80103da:	4619      	mov	r1, r3
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f7ff f876 	bl	800f4ce <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 80103e2:	4603      	mov	r3, r0
    }
 80103e4:	4618      	mov	r0, r3
 80103e6:	3710      	adds	r7, #16
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bdb0      	pop	{r4, r5, r7, pc}

080103ec <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 80103ec:	b580      	push	{r7, lr}
 80103ee:	ed2d 8b02 	vpush	{d8}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	ed93 8a00 	vldr	s16, [r3]
 8010402:	1d3b      	adds	r3, r7, #4
 8010404:	4618      	mov	r0, r3
 8010406:	f7fe fdc0 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801040a:	4603      	mov	r3, r0
 801040c:	edd3 7a00 	vldr	s15, [r3]
 8010410:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010418:	bf4c      	ite	mi
 801041a:	2301      	movmi	r3, #1
 801041c:	2300      	movpl	r3, #0
 801041e:	b2db      	uxtb	r3, r3
 8010420:	4618      	mov	r0, r3
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	ecbd 8b02 	vpop	{d8}
 801042a:	bd80      	pop	{r7, pc}

0801042c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 801042c:	b590      	push	{r4, r7, lr}
 801042e:	b085      	sub	sp, #20
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8010436:	1d3b      	adds	r3, r7, #4
 8010438:	4618      	mov	r0, r3
 801043a:	f7fe fda6 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801043e:	4603      	mov	r3, r0
 8010440:	4618      	mov	r0, r3
 8010442:	f7fc fa8f 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010446:	4603      	mov	r3, r0
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	60bb      	str	r3, [r7, #8]
      --__next;
 8010450:	f107 0308 	add.w	r3, r7, #8
 8010454:	4618      	mov	r0, r3
 8010456:	f7ff fea5 	bl	80101a4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 801045a:	e017      	b.n	801048c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 801045c:	f107 0308 	add.w	r3, r7, #8
 8010460:	4618      	mov	r0, r3
 8010462:	f7fe fd92 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010466:	4603      	mov	r3, r0
 8010468:	4618      	mov	r0, r3
 801046a:	f7fc fa7b 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801046e:	4603      	mov	r3, r0
 8010470:	681c      	ldr	r4, [r3, #0]
 8010472:	1d3b      	adds	r3, r7, #4
 8010474:	4618      	mov	r0, r3
 8010476:	f7fe fd88 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801047a:	4603      	mov	r3, r0
 801047c:	601c      	str	r4, [r3, #0]
	  __last = __next;
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	607b      	str	r3, [r7, #4]
	  --__next;
 8010482:	f107 0308 	add.w	r3, r7, #8
 8010486:	4618      	mov	r0, r3
 8010488:	f7ff fe8c 	bl	80101a4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 801048c:	f107 010c 	add.w	r1, r7, #12
 8010490:	463b      	mov	r3, r7
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff ffa9 	bl	80103ec <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d1dd      	bne.n	801045c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 80104a0:	f107 030c 	add.w	r3, r7, #12
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fc fa5d 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80104aa:	4603      	mov	r3, r0
 80104ac:	681c      	ldr	r4, [r3, #0]
 80104ae:	1d3b      	adds	r3, r7, #4
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fe fd6a 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80104b6:	4603      	mov	r3, r0
 80104b8:	601c      	str	r4, [r3, #0]
    }
 80104ba:	bf00      	nop
 80104bc:	3714      	adds	r7, #20
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd90      	pop	{r4, r7, pc}

080104c2 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b082      	sub	sp, #8
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 80104cc:	463b      	mov	r3, r7
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fe fe35 	bl	800f13e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4618      	mov	r0, r3
 80104d8:	3708      	adds	r7, #8
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}

080104de <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 80104de:	b580      	push	{r7, lr}
 80104e0:	b082      	sub	sp, #8
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	6078      	str	r0, [r7, #4]
 80104e6:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 80104e8:	463b      	mov	r3, r7
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fe fee6 	bl	800f2bc <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4618      	mov	r0, r3
 80104f4:	3708      	adds	r7, #8
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}

080104fa <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80104fa:	b480      	push	{r7}
 80104fc:	b083      	sub	sp, #12
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
 8010502:	6039      	str	r1, [r7, #0]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4618      	mov	r0, r3
 8010508:	370c      	adds	r7, #12
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8010512:	b590      	push	{r4, r7, lr}
 8010514:	b085      	sub	sp, #20
 8010516:	af00      	add	r7, sp, #0
 8010518:	60f8      	str	r0, [r7, #12]
 801051a:	60b9      	str	r1, [r7, #8]
 801051c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801051e:	68f8      	ldr	r0, [r7, #12]
 8010520:	f7fd fbd4 	bl	800dccc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8010524:	4604      	mov	r4, r0
 8010526:	68b8      	ldr	r0, [r7, #8]
 8010528:	f7fd fbd0 	bl	800dccc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 801052c:	4603      	mov	r3, r0
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	4619      	mov	r1, r3
 8010532:	4620      	mov	r0, r4
 8010534:	f000 fc77 	bl	8010e26 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8010538:	4603      	mov	r3, r0
    }
 801053a:	4618      	mov	r0, r3
 801053c:	3714      	adds	r7, #20
 801053e:	46bd      	mov	sp, r7
 8010540:	bd90      	pop	{r4, r7, pc}

08010542 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8010542:	b480      	push	{r7}
 8010544:	b083      	sub	sp, #12
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4618      	mov	r0, r3
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8010564:	f7f2 fad2 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d006      	beq.n	801057c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	68b9      	ldr	r1, [r7, #8]
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f000 fc7a 	bl	8010e6c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 8010578:	4603      	mov	r3, r0
 801057a:	e006      	b.n	801058a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	68b9      	ldr	r1, [r7, #8]
 8010580:	68f8      	ldr	r0, [r7, #12]
 8010582:	f000 f829 	bl	80105d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8010586:	4603      	mov	r3, r0
 8010588:	bf00      	nop
    }
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010592:	b480      	push	{r7}
 8010594:	b087      	sub	sp, #28
 8010596:	af00      	add	r7, sp, #0
 8010598:	60f8      	str	r0, [r7, #12]
 801059a:	60b9      	str	r1, [r7, #8]
 801059c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801059e:	68ba      	ldr	r2, [r7, #8]
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	109b      	asrs	r3, r3, #2
 80105a6:	617b      	str	r3, [r7, #20]
 80105a8:	e00c      	b.n	80105c4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x32>
	      *__result = *__first;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	601a      	str	r2, [r3, #0]
	      ++__first;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	3304      	adds	r3, #4
 80105b6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	3304      	adds	r3, #4
 80105bc:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	3b01      	subs	r3, #1
 80105c2:	617b      	str	r3, [r7, #20]
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	dcef      	bgt.n	80105aa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 80105ca:	687b      	ldr	r3, [r7, #4]
	}
 80105cc:	4618      	mov	r0, r3
 80105ce:	371c      	adds	r7, #28
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr

080105d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80105d8:	b580      	push	{r7, lr}
 80105da:	b086      	sub	sp, #24
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80105e4:	68ba      	ldr	r2, [r7, #8]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	109b      	asrs	r3, r3, #2
 80105ec:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d006      	beq.n	8010602 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	461a      	mov	r2, r3
 80105fa:	68f9      	ldr	r1, [r7, #12]
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f013 fda2 	bl	8024146 <memmove>
	  return __result + _Num;
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	4413      	add	r3, r2
	}
 801060a:	4618      	mov	r0, r3
 801060c:	3718      	adds	r7, #24
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8010612:	b580      	push	{r7, lr}
 8010614:	b084      	sub	sp, #16
 8010616:	af00      	add	r7, sp, #0
 8010618:	60f8      	str	r0, [r7, #12]
 801061a:	60b9      	str	r1, [r7, #8]
 801061c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	4613      	mov	r3, r2
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	4413      	add	r3, r2
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	4619      	mov	r1, r3
 801062a:	68b8      	ldr	r0, [r7, #8]
 801062c:	f010 fbb8 	bl	8020da0 <_ZdlPvj>
      }
 8010630:	3710      	adds	r7, #16
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}

08010636 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010636:	b480      	push	{r7}
 8010638:	b083      	sub	sp, #12
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4618      	mov	r0, r3
 8010642:	370c      	adds	r7, #12
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr

0801064c <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 f89b 	bl	8010790 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 801065a:	bf00      	nop
 801065c:	3708      	adds	r7, #8
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8010662:	b590      	push	{r4, r7, lr}
 8010664:	b085      	sub	sp, #20
 8010666:	af00      	add	r7, sp, #0
 8010668:	60f8      	str	r0, [r7, #12]
 801066a:	60b9      	str	r1, [r7, #8]
 801066c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f000 fc1f 	bl	8010eb2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8010674:	4604      	mov	r4, r0
 8010676:	68b8      	ldr	r0, [r7, #8]
 8010678:	f000 fc1b 	bl	8010eb2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 801067c:	4603      	mov	r3, r0
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	4619      	mov	r1, r3
 8010682:	4620      	mov	r0, r4
 8010684:	f000 fc20 	bl	8010ec8 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 8010688:	4603      	mov	r3, r0
    }
 801068a:	4618      	mov	r0, r3
 801068c:	3714      	adds	r7, #20
 801068e:	46bd      	mov	sp, r7
 8010690:	bd90      	pop	{r4, r7, pc}

08010692 <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 8010692:	b580      	push	{r7, lr}
 8010694:	b082      	sub	sp, #8
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 fa27 	bl	8010aee <_ZSt10destroy_atIcEvPT_>
    }
 80106a0:	bf00      	nop
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4618      	mov	r0, r3
 80106b4:	370c      	adds	r7, #12
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr

080106be <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 80106be:	b480      	push	{r7}
 80106c0:	b083      	sub	sp, #12
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
 80106c6:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	601a      	str	r2, [r3, #0]
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	685a      	ldr	r2, [r3, #4]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	689a      	ldr	r2, [r3, #8]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	2200      	movs	r2, #0
 80106e4:	609a      	str	r2, [r3, #8]
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	689a      	ldr	r2, [r3, #8]
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	605a      	str	r2, [r3, #4]
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	4618      	mov	r0, r3
 8010710:	f000 f87f 	bl	8010812 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8010714:	4603      	mov	r3, r0
 8010716:	4618      	mov	r0, r3
 8010718:	f000 fc08 	bl	8010f2c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 801071c:	4603      	mov	r3, r0
 801071e:	4618      	mov	r0, r3
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8010726:	b580      	push	{r7, lr}
 8010728:	b084      	sub	sp, #16
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	60fb      	str	r3, [r7, #12]
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8010738:	f7f2 f9e8 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d009      	beq.n	8010756 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	4613      	mov	r3, r2
 8010746:	005b      	lsls	r3, r3, #1
 8010748:	4413      	add	r3, r2
 801074a:	00db      	lsls	r3, r3, #3
 801074c:	4618      	mov	r0, r3
 801074e:	f010 fb29 	bl	8020da4 <_Znwj>
 8010752:	4603      	mov	r3, r0
 8010754:	e006      	b.n	8010764 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8010756:	2200      	movs	r2, #0
 8010758:	68b9      	ldr	r1, [r7, #8]
 801075a:	68f8      	ldr	r0, [r7, #12]
 801075c:	f000 fec8 	bl	80114f0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 8010760:	4603      	mov	r3, r0
 8010762:	bf00      	nop
      { return __a.allocate(__n); }
 8010764:	4618      	mov	r0, r3
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	607a      	str	r2, [r7, #4]
 8010778:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	68b9      	ldr	r1, [r7, #8]
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f000 fbef 	bl	8010f64 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8010786:	4603      	mov	r3, r0
      }
 8010788:	4618      	mov	r0, r3
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f7f4 fdc6 	bl	800532a <_ZN3jlb4EdgeD1Ev>
    }
 801079e:	bf00      	nop
 80107a0:	3708      	adds	r7, #8
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b084      	sub	sp, #16
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	60f8      	str	r0, [r7, #12]
 80107ae:	60b9      	str	r1, [r7, #8]
 80107b0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	4613      	mov	r3, r2
 80107b6:	005b      	lsls	r3, r3, #1
 80107b8:	4413      	add	r3, r2
 80107ba:	00db      	lsls	r3, r3, #3
 80107bc:	4619      	mov	r1, r3
 80107be:	68b8      	ldr	r0, [r7, #8]
 80107c0:	f010 faee 	bl	8020da0 <_ZdlPvj>
      }
 80107c4:	3710      	adds	r7, #16
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80107ca:	b480      	push	{r7}
 80107cc:	b083      	sub	sp, #12
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	4618      	mov	r0, r3
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 f8ca 	bl	8010982 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 80107ee:	bf00      	nop
 80107f0:	3708      	adds	r7, #8
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b082      	sub	sp, #8
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
 80107fe:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6839      	ldr	r1, [r7, #0]
 8010804:	4618      	mov	r0, r3
 8010806:	f000 fbca 	bl	8010f9e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	3708      	adds	r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4618      	mov	r0, r3
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6879      	ldr	r1, [r7, #4]
 8010838:	4618      	mov	r0, r3
 801083a:	f000 fbbd 	bl	8010fb8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 801083e:	68b9      	ldr	r1, [r7, #8]
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f000 fbcb 	bl	8010fdc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	4618      	mov	r0, r3
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	f107 030c 	add.w	r3, r7, #12
 801085e:	4611      	mov	r1, r2
 8010860:	4618      	mov	r0, r3
 8010862:	f000 fbd9 	bl	8011018 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	4618      	mov	r0, r3
 801086a:	3710      	adds	r7, #16
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	1d1a      	adds	r2, r3, #4
 801087c:	f107 030c 	add.w	r3, r7, #12
 8010880:	4611      	mov	r1, r2
 8010882:	4618      	mov	r0, r3
 8010884:	f000 fbc8 	bl	8011018 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	4618      	mov	r0, r3
 801088c:	3710      	adds	r7, #16
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}

08010892 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010892:	b580      	push	{r7, lr}
 8010894:	b084      	sub	sp, #16
 8010896:	af00      	add	r7, sp, #0
 8010898:	60f8      	str	r0, [r7, #12]
 801089a:	60b9      	str	r1, [r7, #8]
 801089c:	607a      	str	r2, [r7, #4]
 801089e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	68b9      	ldr	r1, [r7, #8]
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f000 fbc7 	bl	8011038 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 80108aa:	4603      	mov	r3, r0
 80108ac:	4618      	mov	r0, r3
 80108ae:	3710      	adds	r7, #16
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 fbf6 	bl	80110b0 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 80108c4:	4603      	mov	r3, r0
 80108c6:	4618      	mov	r0, r3
 80108c8:	f000 fbd6 	bl	8011078 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 80108cc:	4603      	mov	r3, r0
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
	...

080108d8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	685a      	ldr	r2, [r3, #4]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	10db      	asrs	r3, r3, #3
 80108ec:	4a04      	ldr	r2, [pc, #16]	; (8010900 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 80108ee:	fb02 f303 	mul.w	r3, r2, r3
 80108f2:	4618      	mov	r0, r3
 80108f4:	370c      	adds	r7, #12
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	aaaaaaab 	.word	0xaaaaaaab

08010904 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	60fb      	str	r3, [r7, #12]
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8010916:	f7f2 f8f9 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d009      	beq.n	8010934 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	4613      	mov	r3, r2
 8010924:	005b      	lsls	r3, r3, #1
 8010926:	4413      	add	r3, r2
 8010928:	00db      	lsls	r3, r3, #3
 801092a:	4618      	mov	r0, r3
 801092c:	f010 fa3a 	bl	8020da4 <_Znwj>
 8010930:	4603      	mov	r3, r0
 8010932:	e006      	b.n	8010942 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8010934:	2200      	movs	r2, #0
 8010936:	68b9      	ldr	r1, [r7, #8]
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	f000 fea5 	bl	8011688 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 801093e:	4603      	mov	r3, r0
 8010940:	bf00      	nop
      { return __a.allocate(__n); }
 8010942:	4618      	mov	r0, r3
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 801094a:	b480      	push	{r7}
 801094c:	b083      	sub	sp, #12
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4618      	mov	r0, r3
 8010956:	370c      	adds	r7, #12
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	607a      	str	r2, [r7, #4]
 801096c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	68b9      	ldr	r1, [r7, #8]
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f000 fba7 	bl	80110c6 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 8010978:	4603      	mov	r3, r0
 801097a:	4618      	mov	r0, r3
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 8010982:	b580      	push	{r7, lr}
 8010984:	b082      	sub	sp, #8
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7f4 fcbf 	bl	800530e <_ZN3jlb4NodeD1Ev>
    }
 8010990:	bf00      	nop
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	68b9      	ldr	r1, [r7, #8]
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f7fb fad5 	bl	800bf58 <_ZSt4copyIPKcPcET0_T_S4_S3_>
 80109ae:	4603      	mov	r3, r0
 80109b0:	4618      	mov	r0, r3
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	4618      	mov	r0, r3
 80109c4:	370c      	adds	r7, #12
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr

080109ce <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b084      	sub	sp, #16
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	60f8      	str	r0, [r7, #12]
 80109d6:	60b9      	str	r1, [r7, #8]
 80109d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	4619      	mov	r1, r3
 80109e0:	68b8      	ldr	r0, [r7, #8]
 80109e2:	f010 f9dd 	bl	8020da0 <_ZdlPvj>
      }
 80109e6:	3710      	adds	r7, #16
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	4618      	mov	r0, r3
 80109f8:	370c      	adds	r7, #12
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr

08010a02 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010a02:	b5b0      	push	{r4, r5, r7, lr}
 8010a04:	b084      	sub	sp, #16
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	60f8      	str	r0, [r7, #12]
 8010a0a:	60b9      	str	r1, [r7, #8]
 8010a0c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f000 fba1 	bl	8011156 <_ZSt12__niter_baseIPPfET_S2_>
 8010a14:	4604      	mov	r4, r0
 8010a16:	68b8      	ldr	r0, [r7, #8]
 8010a18:	f000 fb9d 	bl	8011156 <_ZSt12__niter_baseIPPfET_S2_>
 8010a1c:	4605      	mov	r5, r0
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f000 fb98 	bl	8011156 <_ZSt12__niter_baseIPPfET_S2_>
 8010a26:	4603      	mov	r3, r0
 8010a28:	461a      	mov	r2, r3
 8010a2a:	4629      	mov	r1, r5
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f000 fb9d 	bl	801116c <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 8010a32:	4602      	mov	r2, r0
 8010a34:	1d3b      	adds	r3, r7, #4
 8010a36:	4611      	mov	r1, r2
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f000 fba7 	bl	801118c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 8010a3e:	4603      	mov	r3, r0
    }
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bdb0      	pop	{r4, r5, r7, pc}

08010a48 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8010a48:	b5b0      	push	{r4, r5, r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f000 fb7e 	bl	8011156 <_ZSt12__niter_baseIPPfET_S2_>
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	68b8      	ldr	r0, [r7, #8]
 8010a5e:	f000 fb7a 	bl	8011156 <_ZSt12__niter_baseIPPfET_S2_>
 8010a62:	4605      	mov	r5, r0
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	4618      	mov	r0, r3
 8010a68:	f000 fb75 	bl	8011156 <_ZSt12__niter_baseIPPfET_S2_>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	461a      	mov	r2, r3
 8010a70:	4629      	mov	r1, r5
 8010a72:	4620      	mov	r0, r4
 8010a74:	f000 fb96 	bl	80111a4 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	1d3b      	adds	r3, r7, #4
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f000 fb84 	bl	801118c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 8010a84:	4603      	mov	r3, r0
    }
 8010a86:	4618      	mov	r0, r3
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bdb0      	pop	{r4, r5, r7, pc}

08010a8e <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b084      	sub	sp, #16
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	60f8      	str	r0, [r7, #12]
 8010a96:	60b9      	str	r1, [r7, #8]
 8010a98:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8010a9a:	6879      	ldr	r1, [r7, #4]
 8010a9c:	68b8      	ldr	r0, [r7, #8]
 8010a9e:	f010 f97f 	bl	8020da0 <_ZdlPvj>
      }
 8010aa2:	3710      	adds	r7, #16
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fc fad7 	bl	800d066 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7ff f810 	bl	800fae0 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3708      	adds	r7, #8
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}

08010aca <_ZNSt6vectorIcSaIcEE14_S_do_relocateEPcS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b084      	sub	sp, #16
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	60f8      	str	r0, [r7, #12]
 8010ad2:	60b9      	str	r1, [r7, #8]
 8010ad4:	607a      	str	r2, [r7, #4]
 8010ad6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	68b9      	ldr	r1, [r7, #8]
 8010ade:	68f8      	ldr	r0, [r7, #12]
 8010ae0:	f000 fb70 	bl	80111c4 <_ZSt12__relocate_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 8010ae4:	4603      	mov	r3, r0
      }
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 8010aee:	b480      	push	{r7}
 8010af0:	b083      	sub	sp, #12
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
    }
 8010af6:	bf00      	nop
 8010af8:	370c      	adds	r7, #12
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b084      	sub	sp, #16
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8010b0a:	1d3b      	adds	r3, r7, #4
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f000 fb76 	bl	80111fe <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 8010b12:	4603      	mov	r3, r0
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	f107 030c 	add.w	r3, r7, #12
 8010b1a:	4611      	mov	r1, r2
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f000 fb79 	bl	8011214 <_ZNSt13move_iteratorIPcEC1ES0_>
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	4618      	mov	r0, r3
 8010b26:	3710      	adds	r7, #16
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	607a      	str	r2, [r7, #4]
 8010b38:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	68b9      	ldr	r1, [r7, #8]
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f000 fb7a 	bl	8011238 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8010b44:	4603      	mov	r3, r0
 8010b46:	4618      	mov	r0, r3
 8010b48:	3710      	adds	r7, #16
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b084      	sub	sp, #16
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	60f8      	str	r0, [r7, #12]
 8010b56:	60b9      	str	r1, [r7, #8]
 8010b58:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	68b9      	ldr	r1, [r7, #8]
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f000 fb7c 	bl	801125c <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>
 8010b64:	4603      	mov	r3, r0
 8010b66:	4618      	mov	r0, r3
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b082      	sub	sp, #8
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8010b76:	1d3b      	adds	r3, r7, #4
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7f8 fb5a 	bl	8009232 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	4618      	mov	r0, r3
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	60f8      	str	r0, [r7, #12]
 8010b92:	60b9      	str	r1, [r7, #8]
 8010b94:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	68b9      	ldr	r1, [r7, #8]
 8010b9a:	68f8      	ldr	r0, [r7, #12]
 8010b9c:	f000 fb7b 	bl	8011296 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7ff ffda 	bl	8010b6e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	1a9a      	subs	r2, r3, r2
 8010bc0:	1d3b      	adds	r3, r7, #4
 8010bc2:	4611      	mov	r1, r2
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fc fed0 	bl	800d96a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3708      	adds	r7, #8
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8010bd4:	b480      	push	{r7}
 8010bd6:	b085      	sub	sp, #20
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	441a      	add	r2, r3
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	601a      	str	r2, [r3, #0]
    }
 8010bec:	bf00      	nop
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b086      	sub	sp, #24
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8010c04:	2301      	movs	r3, #1
 8010c06:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	68b9      	ldr	r1, [r7, #8]
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f000 fb5f 	bl	80112d0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>
 8010c12:	4603      	mov	r3, r0
    }
 8010c14:	4618      	mov	r0, r3
 8010c16:	3718      	adds	r7, #24
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8010c24:	f107 030c 	add.w	r3, r7, #12
 8010c28:	6879      	ldr	r1, [r7, #4]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f000 faf2 	bl	8011214 <_ZNSt13move_iteratorIPcEC1ES0_>
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	4618      	mov	r0, r3
 8010c34:	3710      	adds	r7, #16
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}

08010c3a <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8010c3a:	b480      	push	{r7}
 8010c3c:	b083      	sub	sp, #12
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	370c      	adds	r7, #12
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010c58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8010c74:	68f8      	ldr	r0, [r7, #12]
 8010c76:	f7ff ffeb 	bl	8010c50 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	bf8c      	ite	hi
 8010c82:	2301      	movhi	r3, #1
 8010c84:	2300      	movls	r3, #0
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	bf14      	ite	ne
 8010c8c:	2301      	movne	r3, #1
 8010c8e:	2300      	moveq	r3, #0
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d001      	beq.n	8010c9a <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8010c96:	f010 f899 	bl	8020dcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010c9a:	68b8      	ldr	r0, [r7, #8]
 8010c9c:	f010 f882 	bl	8020da4 <_Znwj>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	bf00      	nop
      }
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8010cac:	b590      	push	{r4, r7, lr}
 8010cae:	b089      	sub	sp, #36	; 0x24
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8010cb8:	f107 020c 	add.w	r2, r7, #12
 8010cbc:	f107 0308 	add.w	r3, r7, #8
 8010cc0:	4611      	mov	r1, r2
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7f2 fe0e 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	bfd4      	ite	le
 8010cce:	2301      	movle	r3, #1
 8010cd0:	2300      	movgt	r3, #0
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d139      	bne.n	8010d4c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 8010cd8:	f107 020c 	add.w	r2, r7, #12
 8010cdc:	f107 0308 	add.w	r3, r7, #8
 8010ce0:	4611      	mov	r1, r2
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7f2 fdfe 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8010ce8:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	3b02      	subs	r3, #2
 8010cee:	0fda      	lsrs	r2, r3, #31
 8010cf0:	4413      	add	r3, r2
 8010cf2:	105b      	asrs	r3, r3, #1
 8010cf4:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8010cf6:	f107 030c 	add.w	r3, r7, #12
 8010cfa:	69f9      	ldr	r1, [r7, #28]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fe f91c 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010d02:	4603      	mov	r3, r0
 8010d04:	617b      	str	r3, [r7, #20]
 8010d06:	f107 0314 	add.w	r3, r7, #20
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fe f93d 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010d10:	4603      	mov	r3, r0
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fb fe26 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8010d1e:	f107 0310 	add.w	r3, r7, #16
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fb fe1e 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	edd3 7a00 	vldr	s15, [r3]
 8010d2e:	4623      	mov	r3, r4
 8010d30:	eeb0 0a67 	vmov.f32	s0, s15
 8010d34:	69ba      	ldr	r2, [r7, #24]
 8010d36:	69f9      	ldr	r1, [r7, #28]
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f000 fad9 	bl	80112f0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d005      	beq.n	8010d50 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	3b01      	subs	r3, #1
 8010d48:	61fb      	str	r3, [r7, #28]
      while (true)
 8010d4a:	e7d4      	b.n	8010cf6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 8010d4c:	bf00      	nop
 8010d4e:	e000      	b.n	8010d52 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 8010d50:	bf00      	nop
    }
 8010d52:	3724      	adds	r7, #36	; 0x24
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd90      	pop	{r4, r7, pc}

08010d58 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8010d58:	b5b0      	push	{r4, r5, r7, lr}
 8010d5a:	b086      	sub	sp, #24
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
 8010d64:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8010d66:	1d3b      	adds	r3, r7, #4
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fe f90e 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fb fdf7 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010d76:	4603      	mov	r3, r0
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 8010d7c:	f107 030c 	add.w	r3, r7, #12
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fe f902 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010d86:	4603      	mov	r3, r0
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fb fdeb 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	681c      	ldr	r4, [r3, #0]
 8010d92:	1d3b      	adds	r3, r7, #4
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7fe f8f8 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 8010d9e:	f107 020c 	add.w	r2, r7, #12
 8010da2:	f107 0308 	add.w	r3, r7, #8
 8010da6:	4611      	mov	r1, r2
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7f2 fd9b 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8010dae:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8010db0:	f107 0314 	add.w	r3, r7, #20
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fb fdd5 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010dba:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8010dbc:	edd3 7a00 	vldr	s15, [r3]
 8010dc0:	462b      	mov	r3, r5
 8010dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8010dc6:	4622      	mov	r2, r4
 8010dc8:	2100      	movs	r1, #0
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f000 fa90 	bl	80112f0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 8010dd0:	bf00      	nop
 8010dd2:	3718      	adds	r7, #24
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bdb0      	pop	{r4, r5, r7, pc}

08010dd8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8010dd8:	b590      	push	{r4, r7, lr}
 8010dda:	b083      	sub	sp, #12
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8010de2:	1d3b      	adds	r3, r7, #4
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7fe f8d0 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010dea:	4604      	mov	r4, r0
 8010dec:	463b      	mov	r3, r7
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fe f8cb 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010df4:	4603      	mov	r3, r0
 8010df6:	4619      	mov	r1, r3
 8010df8:	4620      	mov	r0, r4
 8010dfa:	f000 fb21 	bl	8011440 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8010dfe:	bf00      	nop
 8010e00:	370c      	adds	r7, #12
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd90      	pop	{r4, r7, pc}

08010e06 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8010e06:	b580      	push	{r7, lr}
 8010e08:	b084      	sub	sp, #16
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	60f8      	str	r0, [r7, #12]
 8010e0e:	60b9      	str	r1, [r7, #8]
 8010e10:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	68b9      	ldr	r1, [r7, #8]
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f000 fb31 	bl	801147e <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010e26:	b5b0      	push	{r4, r5, r7, lr}
 8010e28:	b084      	sub	sp, #16
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	60f8      	str	r0, [r7, #12]
 8010e2e:	60b9      	str	r1, [r7, #8]
 8010e30:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f7fe fb1f 	bl	800f476 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010e38:	4604      	mov	r4, r0
 8010e3a:	68b8      	ldr	r0, [r7, #8]
 8010e3c:	f7fe fb1b 	bl	800f476 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010e40:	4605      	mov	r5, r0
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7f2 fee7 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	4629      	mov	r1, r5
 8010e50:	4620      	mov	r0, r4
 8010e52:	f7fe fb2c 	bl	800f4ae <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8010e56:	4602      	mov	r2, r0
 8010e58:	1d3b      	adds	r3, r7, #4
 8010e5a:	4611      	mov	r1, r2
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fc ff87 	bl	800dd70 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8010e62:	4603      	mov	r3, r0
    }
 8010e64:	4618      	mov	r0, r3
 8010e66:	3710      	adds	r7, #16
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bdb0      	pop	{r4, r5, r7, pc}

08010e6c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010e6c:	b480      	push	{r7}
 8010e6e:	b087      	sub	sp, #28
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	1ad3      	subs	r3, r2, r3
 8010e7e:	109b      	asrs	r3, r3, #2
 8010e80:	617b      	str	r3, [r7, #20]
 8010e82:	e00c      	b.n	8010e9e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	601a      	str	r2, [r3, #0]
	      ++__first;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	3304      	adds	r3, #4
 8010e90:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	3304      	adds	r3, #4
 8010e96:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	3b01      	subs	r3, #1
 8010e9c:	617b      	str	r3, [r7, #20]
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	dcef      	bgt.n	8010e84 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 8010ea4:	687b      	ldr	r3, [r7, #4]
	}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	371c      	adds	r7, #28
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8010eb2:	b480      	push	{r7}
 8010eb4:	b083      	sub	sp, #12
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010ec8:	b5b0      	push	{r4, r5, r7, lr}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	60f8      	str	r0, [r7, #12]
 8010ed0:	60b9      	str	r1, [r7, #8]
 8010ed2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010ed4:	68f8      	ldr	r0, [r7, #12]
 8010ed6:	f000 faef 	bl	80114b8 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010eda:	4604      	mov	r4, r0
 8010edc:	68b8      	ldr	r0, [r7, #8]
 8010ede:	f000 faeb 	bl	80114b8 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fc fda4 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 8010eec:	4603      	mov	r3, r0
 8010eee:	461a      	mov	r2, r3
 8010ef0:	4629      	mov	r1, r5
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	f7fc fda9 	bl	800da4a <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	1d3b      	adds	r3, r7, #4
 8010efc:	4611      	mov	r1, r2
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fc fdb3 	bl	800da6a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8010f04:	4603      	mov	r3, r0
    }
 8010f06:	4618      	mov	r0, r3
 8010f08:	3710      	adds	r7, #16
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010f10 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8010f18:	4b03      	ldr	r3, [pc, #12]	; (8010f28 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	370c      	adds	r7, #12
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop
 8010f28:	0aaaaaaa 	.word	0x0aaaaaaa

08010f2c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8010f34:	4b0a      	ldr	r3, [pc, #40]	; (8010f60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8010f36:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7ff ffe9 	bl	8010f10 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8010f42:	f107 0208 	add.w	r2, r7, #8
 8010f46:	f107 030c 	add.w	r3, r7, #12
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7f2 fe19 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 8010f52:	4603      	mov	r3, r0
 8010f54:	681b      	ldr	r3, [r3, #0]
      }
 8010f56:	4618      	mov	r0, r3
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	05555555 	.word	0x05555555

08010f64 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8010f64:	b5b0      	push	{r4, r5, r7, lr}
 8010f66:	b084      	sub	sp, #16
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	607a      	str	r2, [r7, #4]
 8010f70:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f000 faec 	bl	8011550 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8010f78:	4604      	mov	r4, r0
 8010f7a:	68b8      	ldr	r0, [r7, #8]
 8010f7c:	f000 fae8 	bl	8011550 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8010f80:	4605      	mov	r5, r0
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f000 fae4 	bl	8011550 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8010f88:	4602      	mov	r2, r0
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	4620      	mov	r0, r4
 8010f90:	f000 fae9 	bl	8011566 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8010f94:	4603      	mov	r3, r0
    }
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bdb0      	pop	{r4, r5, r7, pc}

08010f9e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
 8010fa6:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8010fa8:	6839      	ldr	r1, [r7, #0]
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 fb01 	bl	80115b2 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	3708      	adds	r7, #8
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8010fc2:	6839      	ldr	r1, [r7, #0]
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f000 faf4 	bl	80115b2 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fb fffc 	bl	800cfca <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8010fe6:	6839      	ldr	r1, [r7, #0]
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f7fe fbcf 	bl	800f78c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6819      	ldr	r1, [r3, #0]
 8011000:	683a      	ldr	r2, [r7, #0]
 8011002:	4613      	mov	r3, r2
 8011004:	005b      	lsls	r3, r3, #1
 8011006:	4413      	add	r3, r2
 8011008:	00db      	lsls	r3, r3, #3
 801100a:	18ca      	adds	r2, r1, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	609a      	str	r2, [r3, #8]
      }
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4618      	mov	r0, r3
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011044:	2301      	movs	r3, #1
 8011046:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	68b9      	ldr	r1, [r7, #8]
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f000 fada 	bl	8011606 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8011052:	4603      	mov	r3, r0
    }
 8011054:	4618      	mov	r0, r3
 8011056:	3718      	adds	r7, #24
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8011064:	4b03      	ldr	r3, [pc, #12]	; (8011074 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 8011066:	4618      	mov	r0, r3
 8011068:	370c      	adds	r7, #12
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr
 8011072:	bf00      	nop
 8011074:	0aaaaaaa 	.word	0x0aaaaaaa

08011078 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8011078:	b580      	push	{r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8011080:	4b0a      	ldr	r3, [pc, #40]	; (80110ac <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8011082:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7ff ffe9 	bl	801105c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 801108a:	4603      	mov	r3, r0
 801108c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801108e:	f107 0208 	add.w	r2, r7, #8
 8011092:	f107 030c 	add.w	r3, r7, #12
 8011096:	4611      	mov	r1, r2
 8011098:	4618      	mov	r0, r3
 801109a:	f7f2 fd73 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 801109e:	4603      	mov	r3, r0
 80110a0:	681b      	ldr	r3, [r3, #0]
      }
 80110a2:	4618      	mov	r0, r3
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	05555555 	.word	0x05555555

080110b0 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80110b0:	b480      	push	{r7}
 80110b2:	b083      	sub	sp, #12
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4618      	mov	r0, r3
 80110bc:	370c      	adds	r7, #12
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr

080110c6 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80110c6:	b580      	push	{r7, lr}
 80110c8:	b086      	sub	sp, #24
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	60f8      	str	r0, [r7, #12]
 80110ce:	60b9      	str	r1, [r7, #8]
 80110d0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80110d2:	2301      	movs	r3, #1
 80110d4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	68b9      	ldr	r1, [r7, #8]
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f000 fb04 	bl	80116e8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 80110e0:	4603      	mov	r3, r0
    }
 80110e2:	4618      	mov	r0, r3
 80110e4:	3718      	adds	r7, #24
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80110ea:	b480      	push	{r7}
 80110ec:	b083      	sub	sp, #12
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80110f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80110f6:	4618      	mov	r0, r3
 80110f8:	370c      	adds	r7, #12
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr

08011102 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011102:	b580      	push	{r7, lr}
 8011104:	b084      	sub	sp, #16
 8011106:	af00      	add	r7, sp, #0
 8011108:	60f8      	str	r0, [r7, #12]
 801110a:	60b9      	str	r1, [r7, #8]
 801110c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f7ff ffeb 	bl	80110ea <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 8011114:	4602      	mov	r2, r0
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	4293      	cmp	r3, r2
 801111a:	bf8c      	ite	hi
 801111c:	2301      	movhi	r3, #1
 801111e:	2300      	movls	r3, #0
 8011120:	b2db      	uxtb	r3, r3
 8011122:	2b00      	cmp	r3, #0
 8011124:	bf14      	ite	ne
 8011126:	2301      	movne	r3, #1
 8011128:	2300      	moveq	r3, #0
 801112a:	b2db      	uxtb	r3, r3
 801112c:	2b00      	cmp	r3, #0
 801112e:	d007      	beq.n	8011140 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011136:	d301      	bcc.n	801113c <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011138:	f00f fe4b 	bl	8020dd2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801113c:	f00f fe46 	bl	8020dcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	4618      	mov	r0, r3
 8011146:	f00f fe2d 	bl	8020da4 <_Znwj>
 801114a:	4603      	mov	r3, r0
 801114c:	bf00      	nop
      }
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 8011156:	b480      	push	{r7}
 8011158:	b083      	sub	sp, #12
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
    { return __it; }
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr

0801116c <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801116c:	b580      	push	{r7, lr}
 801116e:	b084      	sub	sp, #16
 8011170:	af00      	add	r7, sp, #0
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	68b9      	ldr	r1, [r7, #8]
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f000 fad3 	bl	8011728 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8011182:	4603      	mov	r3, r0
 8011184:	4618      	mov	r0, r3
 8011186:	3710      	adds	r7, #16
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801118c:	b480      	push	{r7}
 801118e:	b083      	sub	sp, #12
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
    { return __res; }
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	4618      	mov	r0, r3
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	68b9      	ldr	r1, [r7, #8]
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f000 fad4 	bl	8011762 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 80111ba:	4603      	mov	r3, r0
 80111bc:	4618      	mov	r0, r3
 80111be:	3710      	adds	r7, #16
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}

080111c4 <_ZSt12__relocate_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80111c4:	b5b0      	push	{r4, r5, r7, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	607a      	str	r2, [r7, #4]
 80111d0:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80111d2:	68f8      	ldr	r0, [r7, #12]
 80111d4:	f7fc fc2e 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 80111d8:	4604      	mov	r4, r0
 80111da:	68b8      	ldr	r0, [r7, #8]
 80111dc:	f7fc fc2a 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 80111e0:	4605      	mov	r5, r0
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f7fc fc26 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 80111e8:	4602      	mov	r2, r0
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	4629      	mov	r1, r5
 80111ee:	4620      	mov	r0, r4
 80111f0:	f000 fad4 	bl	801179c <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80111f4:	4603      	mov	r3, r0
    }
 80111f6:	4618      	mov	r0, r3
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bdb0      	pop	{r4, r5, r7, pc}

080111fe <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80111fe:	b480      	push	{r7}
 8011200:	b083      	sub	sp, #12
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4618      	mov	r0, r3
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 801121e:	463b      	mov	r3, r7
 8011220:	4618      	mov	r0, r3
 8011222:	f7ff ffec 	bl	80111fe <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 8011226:	4603      	mov	r3, r0
 8011228:	681a      	ldr	r2, [r3, #0]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	601a      	str	r2, [r3, #0]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011238:	b580      	push	{r7, lr}
 801123a:	b086      	sub	sp, #24
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011244:	2301      	movs	r3, #1
 8011246:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	68b9      	ldr	r1, [r7, #8]
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f000 fac0 	bl	80117d2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 8011252:	4603      	mov	r3, r0
    }
 8011254:	4618      	mov	r0, r3
 8011256:	3718      	adds	r7, #24
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8011268:	f7f1 fc50 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d006      	beq.n	8011280 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	68b9      	ldr	r1, [r7, #8]
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	f000 fabb 	bl	80117f2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>
 801127c:	4603      	mov	r3, r0
 801127e:	e006      	b.n	801128e <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	68b9      	ldr	r1, [r7, #8]
 8011284:	68f8      	ldr	r0, [r7, #12]
 8011286:	f000 fad7 	bl	8011838 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 801128a:	4603      	mov	r3, r0
								 __result);
 801128c:	bf00      	nop
    }
 801128e:	4618      	mov	r0, r3
 8011290:	3710      	adds	r7, #16
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}

08011296 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011296:	b580      	push	{r7, lr}
 8011298:	b084      	sub	sp, #16
 801129a:	af00      	add	r7, sp, #0
 801129c:	60f8      	str	r0, [r7, #12]
 801129e:	60b9      	str	r1, [r7, #8]
 80112a0:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80112a2:	f7f1 fc33 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d006      	beq.n	80112ba <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	68b9      	ldr	r1, [r7, #8]
 80112b0:	68f8      	ldr	r0, [r7, #12]
 80112b2:	f000 fadf 	bl	8011874 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 80112b6:	4603      	mov	r3, r0
 80112b8:	e006      	b.n	80112c8 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	68b9      	ldr	r1, [r7, #8]
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f7fe fed5 	bl	801006e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 80112c4:	4603      	mov	r3, r0
 80112c6:	bf00      	nop
    }
 80112c8:	4618      	mov	r0, r3
 80112ca:	3710      	adds	r7, #16
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80112dc:	687a      	ldr	r2, [r7, #4]
 80112de:	68b9      	ldr	r1, [r7, #8]
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f000 fae9 	bl	80118b8 <_ZSt4copyIPcS0_ET0_T_S2_S1_>
 80112e6:	4603      	mov	r3, r0
 80112e8:	4618      	mov	r0, r3
 80112ea:	3710      	adds	r7, #16
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	b08f      	sub	sp, #60	; 0x3c
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6178      	str	r0, [r7, #20]
 80112f8:	6139      	str	r1, [r7, #16]
 80112fa:	60fa      	str	r2, [r7, #12]
 80112fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8011300:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 801130a:	e042      	b.n	8011392 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 801130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130e:	3301      	adds	r3, #1
 8011310:	005b      	lsls	r3, r3, #1
 8011312:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8011314:	f107 0314 	add.w	r3, r7, #20
 8011318:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801131a:	4618      	mov	r0, r3
 801131c:	f7fd fe0d 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011320:	4604      	mov	r4, r0
 8011322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011324:	1e5a      	subs	r2, r3, #1
 8011326:	f107 0314 	add.w	r3, r7, #20
 801132a:	4611      	mov	r1, r2
 801132c:	4618      	mov	r0, r3
 801132e:	f7fd fe04 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011332:	4602      	mov	r2, r0
 8011334:	1d3b      	adds	r3, r7, #4
 8011336:	4621      	mov	r1, r4
 8011338:	4618      	mov	r0, r3
 801133a:	f7fd fe32 	bl	800efa2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d002      	beq.n	801134a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 8011344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011346:	3b01      	subs	r3, #1
 8011348:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 801134a:	f107 0314 	add.w	r3, r7, #20
 801134e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011350:	4618      	mov	r0, r3
 8011352:	f7fd fdf2 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011356:	4603      	mov	r3, r0
 8011358:	623b      	str	r3, [r7, #32]
 801135a:	f107 0320 	add.w	r3, r7, #32
 801135e:	4618      	mov	r0, r3
 8011360:	f7fd fe13 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8011364:	4603      	mov	r3, r0
 8011366:	4618      	mov	r0, r3
 8011368:	f7fb fafc 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801136c:	4603      	mov	r3, r0
 801136e:	681c      	ldr	r4, [r3, #0]
 8011370:	f107 0314 	add.w	r3, r7, #20
 8011374:	6939      	ldr	r1, [r7, #16]
 8011376:	4618      	mov	r0, r3
 8011378:	f7fd fddf 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 801137c:	4603      	mov	r3, r0
 801137e:	627b      	str	r3, [r7, #36]	; 0x24
 8011380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011384:	4618      	mov	r0, r3
 8011386:	f7fd fe00 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801138a:	4603      	mov	r3, r0
 801138c:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011390:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	3b01      	subs	r3, #1
 8011396:	0fda      	lsrs	r2, r3, #31
 8011398:	4413      	add	r3, r2
 801139a:	105b      	asrs	r3, r3, #1
 801139c:	461a      	mov	r2, r3
 801139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a0:	4293      	cmp	r3, r2
 80113a2:	dbb3      	blt.n	801130c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d133      	bne.n	8011416 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	3b02      	subs	r3, #2
 80113b2:	0fda      	lsrs	r2, r3, #31
 80113b4:	4413      	add	r3, r2
 80113b6:	105b      	asrs	r3, r3, #1
 80113b8:	461a      	mov	r2, r3
 80113ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113bc:	4293      	cmp	r3, r2
 80113be:	d12a      	bne.n	8011416 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 80113c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c2:	3301      	adds	r3, #1
 80113c4:	005b      	lsls	r3, r3, #1
 80113c6:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80113c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ca:	1e5a      	subs	r2, r3, #1
 80113cc:	f107 0314 	add.w	r3, r7, #20
 80113d0:	4611      	mov	r1, r2
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fd fdb1 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80113d8:	4603      	mov	r3, r0
 80113da:	62bb      	str	r3, [r7, #40]	; 0x28
 80113dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fd fdd2 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80113e6:	4603      	mov	r3, r0
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7fb fabb 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80113ee:	4603      	mov	r3, r0
 80113f0:	681c      	ldr	r4, [r3, #0]
 80113f2:	f107 0314 	add.w	r3, r7, #20
 80113f6:	6939      	ldr	r1, [r7, #16]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fd fd9e 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80113fe:	4603      	mov	r3, r0
 8011400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011406:	4618      	mov	r0, r3
 8011408:	f7fd fdbf 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801140c:	4603      	mov	r3, r0
 801140e:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8011410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011412:	3b01      	subs	r3, #1
 8011414:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 8011416:	f107 0308 	add.w	r3, r7, #8
 801141a:	4618      	mov	r0, r3
 801141c:	f7fb faa2 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011420:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8011422:	edd3 7a00 	vldr	s15, [r3]
 8011426:	f107 031c 	add.w	r3, r7, #28
 801142a:	eeb0 0a67 	vmov.f32	s0, s15
 801142e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011430:	6939      	ldr	r1, [r7, #16]
 8011432:	6978      	ldr	r0, [r7, #20]
 8011434:	f000 fa75 	bl	8011922 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 8011438:	bf00      	nop
 801143a:	373c      	adds	r7, #60	; 0x3c
 801143c:	46bd      	mov	sp, r7
 801143e:	bd90      	pop	{r4, r7, pc}

08011440 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f7fb fa8a 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011450:	4603      	mov	r3, r0
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011456:	6838      	ldr	r0, [r7, #0]
 8011458:	f7fb fa84 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801145c:	4603      	mov	r3, r0
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011464:	f107 030c 	add.w	r3, r7, #12
 8011468:	4618      	mov	r0, r3
 801146a:	f7fb fa7b 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801146e:	4603      	mov	r3, r0
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	601a      	str	r2, [r3, #0]
    }
 8011476:	bf00      	nop
 8011478:	3710      	adds	r7, #16
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801147e:	b580      	push	{r7, lr}
 8011480:	b084      	sub	sp, #16
 8011482:	af00      	add	r7, sp, #0
 8011484:	60f8      	str	r0, [r7, #12]
 8011486:	60b9      	str	r1, [r7, #8]
 8011488:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801148a:	f7f1 fb3f 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801148e:	4603      	mov	r3, r0
 8011490:	2b00      	cmp	r3, #0
 8011492:	d006      	beq.n	80114a2 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	68b9      	ldr	r1, [r7, #8]
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f000 faaf 	bl	80119fc <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 801149e:	4603      	mov	r3, r0
 80114a0:	e006      	b.n	80114b0 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	68b9      	ldr	r1, [r7, #8]
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f000 facc 	bl	8011a44 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 80114ac:	4603      	mov	r3, r0
								 __result);
 80114ae:	bf00      	nop
    }
 80114b0:	4618      	mov	r0, r3
 80114b2:	3710      	adds	r7, #16
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80114c0:	1d3b      	adds	r3, r7, #4
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fd fb43 	bl	800eb4e <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 80114c8:	4603      	mov	r3, r0
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	4618      	mov	r0, r3
 80114ce:	3708      	adds	r7, #8
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80114dc:	4b03      	ldr	r3, [pc, #12]	; (80114ec <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 80114de:	4618      	mov	r0, r3
 80114e0:	370c      	adds	r7, #12
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	05555555 	.word	0x05555555

080114f0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f7ff ffe9 	bl	80114d4 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 8011502:	4602      	mov	r2, r0
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	4293      	cmp	r3, r2
 8011508:	bf8c      	ite	hi
 801150a:	2301      	movhi	r3, #1
 801150c:	2300      	movls	r3, #0
 801150e:	b2db      	uxtb	r3, r3
 8011510:	2b00      	cmp	r3, #0
 8011512:	bf14      	ite	ne
 8011514:	2301      	movne	r3, #1
 8011516:	2300      	moveq	r3, #0
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	d007      	beq.n	801152e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	4a0a      	ldr	r2, [pc, #40]	; (801154c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 8011522:	4293      	cmp	r3, r2
 8011524:	d901      	bls.n	801152a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011526:	f00f fc54 	bl	8020dd2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801152a:	f00f fc4f 	bl	8020dcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	4613      	mov	r3, r2
 8011532:	005b      	lsls	r3, r3, #1
 8011534:	4413      	add	r3, r2
 8011536:	00db      	lsls	r3, r3, #3
 8011538:	4618      	mov	r0, r3
 801153a:	f00f fc33 	bl	8020da4 <_Znwj>
 801153e:	4603      	mov	r3, r0
 8011540:	bf00      	nop
      }
 8011542:	4618      	mov	r0, r3
 8011544:	3710      	adds	r7, #16
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	0aaaaaaa 	.word	0x0aaaaaaa

08011550 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	4618      	mov	r0, r3
 801155c:	370c      	adds	r7, #12
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr

08011566 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8011566:	b590      	push	{r4, r7, lr}
 8011568:	b087      	sub	sp, #28
 801156a:	af00      	add	r7, sp, #0
 801156c:	60f8      	str	r0, [r7, #12]
 801156e:	60b9      	str	r1, [r7, #8]
 8011570:	607a      	str	r2, [r7, #4]
 8011572:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8011578:	e012      	b.n	80115a0 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 801157a:	6978      	ldr	r0, [r7, #20]
 801157c:	f7ff f85b 	bl	8010636 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8011580:	4604      	mov	r4, r0
 8011582:	68f8      	ldr	r0, [r7, #12]
 8011584:	f7ff f857 	bl	8010636 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8011588:	4603      	mov	r3, r0
 801158a:	683a      	ldr	r2, [r7, #0]
 801158c:	4619      	mov	r1, r3
 801158e:	4620      	mov	r0, r4
 8011590:	f000 fa7a 	bl	8011a88 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	3318      	adds	r3, #24
 8011598:	60fb      	str	r3, [r7, #12]
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	3318      	adds	r3, #24
 801159e:	617b      	str	r3, [r7, #20]
 80115a0:	68fa      	ldr	r2, [r7, #12]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d1e8      	bne.n	801157a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 80115a8:	697b      	ldr	r3, [r7, #20]
    }
 80115aa:	4618      	mov	r0, r3
 80115ac:	371c      	adds	r7, #28
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd90      	pop	{r4, r7, pc}

080115b2 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b082      	sub	sp, #8
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80115bc:	6839      	ldr	r1, [r7, #0]
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f000 fa7d 	bl	8011abe <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4618      	mov	r0, r3
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}

080115ce <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80115ce:	b480      	push	{r7}
 80115d0:	b083      	sub	sp, #12
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4618      	mov	r0, r3
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
	++_M_current;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f103 0218 	add.w	r2, r3, #24
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	601a      	str	r2, [r3, #0]
	return *this;
 80115f8:	687b      	ldr	r3, [r7, #4]
      }
 80115fa:	4618      	mov	r0, r3
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011606:	b590      	push	{r4, r7, lr}
 8011608:	b087      	sub	sp, #28
 801160a:	af00      	add	r7, sp, #0
 801160c:	60f8      	str	r0, [r7, #12]
 801160e:	60b9      	str	r1, [r7, #8]
 8011610:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8011616:	e015      	b.n	8011644 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8011618:	6978      	ldr	r0, [r7, #20]
 801161a:	f7ff f80c 	bl	8010636 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 801161e:	4604      	mov	r4, r0
 8011620:	f107 030c 	add.w	r3, r7, #12
 8011624:	4618      	mov	r0, r3
 8011626:	f000 fa6e 	bl	8011b06 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 801162a:	4603      	mov	r3, r0
 801162c:	4619      	mov	r1, r3
 801162e:	4620      	mov	r0, r4
 8011630:	f000 fa94 	bl	8011b5c <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8011634:	f107 030c 	add.w	r3, r7, #12
 8011638:	4618      	mov	r0, r3
 801163a:	f7ff ffd3 	bl	80115e4 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	3318      	adds	r3, #24
 8011642:	617b      	str	r3, [r7, #20]
 8011644:	f107 0208 	add.w	r2, r7, #8
 8011648:	f107 030c 	add.w	r3, r7, #12
 801164c:	4611      	mov	r1, r2
 801164e:	4618      	mov	r0, r3
 8011650:	f000 fa41 	bl	8011ad6 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8011654:	4603      	mov	r3, r0
 8011656:	f083 0301 	eor.w	r3, r3, #1
 801165a:	b2db      	uxtb	r3, r3
 801165c:	2b00      	cmp	r3, #0
 801165e:	d1db      	bne.n	8011618 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 8011660:	697b      	ldr	r3, [r7, #20]
	}
 8011662:	4618      	mov	r0, r3
 8011664:	371c      	adds	r7, #28
 8011666:	46bd      	mov	sp, r7
 8011668:	bd90      	pop	{r4, r7, pc}
	...

0801166c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011674:	4b03      	ldr	r3, [pc, #12]	; (8011684 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 8011676:	4618      	mov	r0, r3
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop
 8011684:	05555555 	.word	0x05555555

08011688 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011694:	68f8      	ldr	r0, [r7, #12]
 8011696:	f7ff ffe9 	bl	801166c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 801169a:	4602      	mov	r2, r0
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	4293      	cmp	r3, r2
 80116a0:	bf8c      	ite	hi
 80116a2:	2301      	movhi	r3, #1
 80116a4:	2300      	movls	r3, #0
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	bf14      	ite	ne
 80116ac:	2301      	movne	r3, #1
 80116ae:	2300      	moveq	r3, #0
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d007      	beq.n	80116c6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	4a0a      	ldr	r2, [pc, #40]	; (80116e4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d901      	bls.n	80116c2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80116be:	f00f fb88 	bl	8020dd2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80116c2:	f00f fb83 	bl	8020dcc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80116c6:	68ba      	ldr	r2, [r7, #8]
 80116c8:	4613      	mov	r3, r2
 80116ca:	005b      	lsls	r3, r3, #1
 80116cc:	4413      	add	r3, r2
 80116ce:	00db      	lsls	r3, r3, #3
 80116d0:	4618      	mov	r0, r3
 80116d2:	f00f fb67 	bl	8020da4 <_Znwj>
 80116d6:	4603      	mov	r3, r0
 80116d8:	bf00      	nop
      }
 80116da:	4618      	mov	r0, r3
 80116dc:	3710      	adds	r7, #16
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	0aaaaaaa 	.word	0x0aaaaaaa

080116e8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b086      	sub	sp, #24
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80116f8:	e00d      	b.n	8011716 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 80116fa:	6978      	ldr	r0, [r7, #20]
 80116fc:	f7ff f865 	bl	80107ca <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8011700:	4603      	mov	r3, r0
 8011702:	68f9      	ldr	r1, [r7, #12]
 8011704:	4618      	mov	r0, r3
 8011706:	f000 fa3f 	bl	8011b88 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	3318      	adds	r3, #24
 801170e:	60fb      	str	r3, [r7, #12]
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	3318      	adds	r3, #24
 8011714:	617b      	str	r3, [r7, #20]
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	429a      	cmp	r2, r3
 801171c:	d1ed      	bne.n	80116fa <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 801171e:	697b      	ldr	r3, [r7, #20]
	}
 8011720:	4618      	mov	r0, r3
 8011722:	3718      	adds	r7, #24
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8011734:	f7f1 f9ea 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8011738:	4603      	mov	r3, r0
 801173a:	2b00      	cmp	r3, #0
 801173c:	d006      	beq.n	801174c <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	68b9      	ldr	r1, [r7, #8]
 8011742:	68f8      	ldr	r0, [r7, #12]
 8011744:	f000 fa36 	bl	8011bb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 8011748:	4603      	mov	r3, r0
 801174a:	e006      	b.n	801175a <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	68b9      	ldr	r1, [r7, #8]
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	f000 fa52 	bl	8011bfa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 8011756:	4603      	mov	r3, r0
 8011758:	bf00      	nop
    }
 801175a:	4618      	mov	r0, r3
 801175c:	3710      	adds	r7, #16
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8011762:	b580      	push	{r7, lr}
 8011764:	b084      	sub	sp, #16
 8011766:	af00      	add	r7, sp, #0
 8011768:	60f8      	str	r0, [r7, #12]
 801176a:	60b9      	str	r1, [r7, #8]
 801176c:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801176e:	f7f1 f9cd 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d006      	beq.n	8011786 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	68b9      	ldr	r1, [r7, #8]
 801177c:	68f8      	ldr	r0, [r7, #12]
 801177e:	f000 fa59 	bl	8011c34 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 8011782:	4603      	mov	r3, r0
 8011784:	e006      	b.n	8011794 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	68b9      	ldr	r1, [r7, #8]
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f000 fa75 	bl	8011c7a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 8011790:	4603      	mov	r3, r0
								 __result);
 8011792:	bf00      	nop
    }
 8011794:	4618      	mov	r0, r3
 8011796:	3710      	adds	r7, #16
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	60b9      	str	r1, [r7, #8]
 80117a6:	607a      	str	r2, [r7, #4]
 80117a8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80117aa:	68ba      	ldr	r2, [r7, #8]
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	dd05      	ble.n	80117c4 <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	461a      	mov	r2, r3
 80117bc:	68f9      	ldr	r1, [r7, #12]
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f012 fcc1 	bl	8024146 <memmove>
      return __result + __count;
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	4413      	add	r3, r2
    }
 80117ca:	4618      	mov	r0, r3
 80117cc:	3718      	adds	r7, #24
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}

080117d2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80117d2:	b580      	push	{r7, lr}
 80117d4:	b084      	sub	sp, #16
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	60f8      	str	r0, [r7, #12]
 80117da:	60b9      	str	r1, [r7, #8]
 80117dc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	68b9      	ldr	r1, [r7, #8]
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f000 fa6b 	bl	8011cbe <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 80117e8:	4603      	mov	r3, r0
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b086      	sub	sp, #24
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	60f8      	str	r0, [r7, #12]
 80117fa:	60b9      	str	r1, [r7, #8]
 80117fc:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 80117fe:	68ba      	ldr	r2, [r7, #8]
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8011806:	e00f      	b.n	8011828 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x36>
	    *--__result = std::move(*--__last);
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	3b01      	subs	r3, #1
 801180c:	60bb      	str	r3, [r7, #8]
 801180e:	68b8      	ldr	r0, [r7, #8]
 8011810:	f7fc f83e 	bl	800d890 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8011814:	4603      	mov	r3, r0
 8011816:	781a      	ldrb	r2, [r3, #0]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	3b01      	subs	r3, #1
 801181c:	607b      	str	r3, [r7, #4]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	3b01      	subs	r3, #1
 8011826:	617b      	str	r3, [r7, #20]
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	2b00      	cmp	r3, #0
 801182c:	dcec      	bgt.n	8011808 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 801182e:	687b      	ldr	r3, [r7, #4]
	}
 8011830:	4618      	mov	r0, r3
 8011832:	3718      	adds	r7, #24
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011838:	b580      	push	{r7, lr}
 801183a:	b086      	sub	sp, #24
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011844:	68ba      	ldr	r2, [r7, #8]
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	1ad3      	subs	r3, r2, r3
 801184a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d008      	beq.n	8011864 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	425b      	negs	r3, r3
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	4413      	add	r3, r2
 801185a:	697a      	ldr	r2, [r7, #20]
 801185c:	68f9      	ldr	r1, [r7, #12]
 801185e:	4618      	mov	r0, r3
 8011860:	f012 fc71 	bl	8024146 <memmove>
	  return __result - _Num;
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	425b      	negs	r3, r3
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	4413      	add	r3, r2
	}
 801186c:	4618      	mov	r0, r3
 801186e:	3718      	adds	r7, #24
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8011874:	b480      	push	{r7}
 8011876:	b087      	sub	sp, #28
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011880:	68ba      	ldr	r2, [r7, #8]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	1ad3      	subs	r3, r2, r3
 8011886:	617b      	str	r3, [r7, #20]
 8011888:	e00c      	b.n	80118a4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	781a      	ldrb	r2, [r3, #0]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	3301      	adds	r3, #1
 8011896:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	3301      	adds	r3, #1
 801189c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	3b01      	subs	r3, #1
 80118a2:	617b      	str	r3, [r7, #20]
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	dcef      	bgt.n	801188a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 80118aa:	687b      	ldr	r3, [r7, #4]
	}
 80118ac:	4618      	mov	r0, r3
 80118ae:	371c      	adds	r7, #28
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <_ZSt4copyIPcS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80118b8:	b590      	push	{r4, r7, lr}
 80118ba:	b085      	sub	sp, #20
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f7fe fb05 	bl	800fed4 <_ZSt12__miter_baseIPcET_S1_>
 80118ca:	4604      	mov	r4, r0
 80118cc:	68b8      	ldr	r0, [r7, #8]
 80118ce:	f7fe fb01 	bl	800fed4 <_ZSt12__miter_baseIPcET_S1_>
 80118d2:	4603      	mov	r3, r0
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	4619      	mov	r1, r3
 80118d8:	4620      	mov	r0, r4
 80118da:	f000 fa08 	bl	8011cee <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>
 80118de:	4603      	mov	r3, r0
    }
 80118e0:	4618      	mov	r0, r3
 80118e2:	3714      	adds	r7, #20
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd90      	pop	{r4, r7, pc}

080118e8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 80118f4:	f107 0308 	add.w	r3, r7, #8
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7fd fb46 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80118fe:	4603      	mov	r3, r0
 8011900:	ed93 7a00 	vldr	s14, [r3]
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	edd3 7a00 	vldr	s15, [r3]
 801190a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011912:	bf4c      	ite	mi
 8011914:	2301      	movmi	r3, #1
 8011916:	2300      	movpl	r3, #0
 8011918:	b2db      	uxtb	r3, r3
 801191a:	4618      	mov	r0, r3
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8011922:	b590      	push	{r4, r7, lr}
 8011924:	b08b      	sub	sp, #44	; 0x2c
 8011926:	af00      	add	r7, sp, #0
 8011928:	6178      	str	r0, [r7, #20]
 801192a:	6139      	str	r1, [r7, #16]
 801192c:	60fa      	str	r2, [r7, #12]
 801192e:	ed87 0a02 	vstr	s0, [r7, #8]
 8011932:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	3b01      	subs	r3, #1
 8011938:	0fda      	lsrs	r2, r3, #31
 801193a:	4413      	add	r3, r2
 801193c:	105b      	asrs	r3, r3, #1
 801193e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8011940:	e029      	b.n	8011996 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8011942:	f107 0314 	add.w	r3, r7, #20
 8011946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011948:	4618      	mov	r0, r3
 801194a:	f7fd faf6 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 801194e:	4603      	mov	r3, r0
 8011950:	61bb      	str	r3, [r7, #24]
 8011952:	f107 0318 	add.w	r3, r7, #24
 8011956:	4618      	mov	r0, r3
 8011958:	f7fd fb17 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801195c:	4603      	mov	r3, r0
 801195e:	4618      	mov	r0, r3
 8011960:	f7fb f800 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011964:	4603      	mov	r3, r0
 8011966:	681c      	ldr	r4, [r3, #0]
 8011968:	f107 0314 	add.w	r3, r7, #20
 801196c:	6939      	ldr	r1, [r7, #16]
 801196e:	4618      	mov	r0, r3
 8011970:	f7fd fae3 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011974:	4603      	mov	r3, r0
 8011976:	61fb      	str	r3, [r7, #28]
 8011978:	f107 031c 	add.w	r3, r7, #28
 801197c:	4618      	mov	r0, r3
 801197e:	f7fd fb04 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8011982:	4603      	mov	r3, r0
 8011984:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 8011986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011988:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	3b01      	subs	r3, #1
 801198e:	0fda      	lsrs	r2, r3, #31
 8011990:	4413      	add	r3, r2
 8011992:	105b      	asrs	r3, r3, #1
 8011994:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8011996:	693a      	ldr	r2, [r7, #16]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	429a      	cmp	r2, r3
 801199c:	dd11      	ble.n	80119c2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 801199e:	f107 0314 	add.w	r3, r7, #20
 80119a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7fd fac8 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80119aa:	4601      	mov	r1, r0
 80119ac:	f107 0308 	add.w	r3, r7, #8
 80119b0:	461a      	mov	r2, r3
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7ff ff98 	bl	80118e8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 80119b8:	4603      	mov	r3, r0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d001      	beq.n	80119c2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 80119be:	2301      	movs	r3, #1
 80119c0:	e000      	b.n	80119c4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 80119c2:	2300      	movs	r3, #0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d1bc      	bne.n	8011942 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80119c8:	f107 0308 	add.w	r3, r7, #8
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fa ffc9 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80119d2:	4603      	mov	r3, r0
 80119d4:	681c      	ldr	r4, [r3, #0]
 80119d6:	f107 0314 	add.w	r3, r7, #20
 80119da:	6939      	ldr	r1, [r7, #16]
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fd faac 	bl	800ef3a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80119e2:	4603      	mov	r3, r0
 80119e4:	623b      	str	r3, [r7, #32]
 80119e6:	f107 0320 	add.w	r3, r7, #32
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fd facd 	bl	800ef8a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80119f0:	4603      	mov	r3, r0
 80119f2:	601c      	str	r4, [r3, #0]
    }
 80119f4:	bf00      	nop
 80119f6:	372c      	adds	r7, #44	; 0x2c
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd90      	pop	{r4, r7, pc}

080119fc <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b086      	sub	sp, #24
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8011a08:	68ba      	ldr	r2, [r7, #8]
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	1ad3      	subs	r3, r2, r3
 8011a0e:	109b      	asrs	r3, r3, #2
 8011a10:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8011a12:	e00f      	b.n	8011a34 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	3b04      	subs	r3, #4
 8011a18:	60bb      	str	r3, [r7, #8]
 8011a1a:	68b8      	ldr	r0, [r7, #8]
 8011a1c:	f7fa ffa2 	bl	800c964 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011a20:	4603      	mov	r3, r0
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	3b04      	subs	r3, #4
 8011a28:	607b      	str	r3, [r7, #4]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	3b01      	subs	r3, #1
 8011a32:	617b      	str	r3, [r7, #20]
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	dcec      	bgt.n	8011a14 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 8011a3a:	687b      	ldr	r3, [r7, #4]
	}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3718      	adds	r7, #24
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b086      	sub	sp, #24
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011a50:	68ba      	ldr	r2, [r7, #8]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	1ad3      	subs	r3, r2, r3
 8011a56:	109b      	asrs	r3, r3, #2
 8011a58:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d00a      	beq.n	8011a76 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	425b      	negs	r3, r3
 8011a66:	687a      	ldr	r2, [r7, #4]
 8011a68:	18d0      	adds	r0, r2, r3
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	461a      	mov	r2, r3
 8011a70:	68f9      	ldr	r1, [r7, #12]
 8011a72:	f012 fb68 	bl	8024146 <memmove>
	  return __result - _Num;
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	425b      	negs	r3, r3
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	4413      	add	r3, r2
	}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3718      	adds	r7, #24
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}

08011a88 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b084      	sub	sp, #16
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8011a94:	68b8      	ldr	r0, [r7, #8]
 8011a96:	f7fb fb50 	bl	800d13a <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	68f9      	ldr	r1, [r7, #12]
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f7fc fa96 	bl	800dfd2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8011aa6:	68b8      	ldr	r0, [r7, #8]
 8011aa8:	f7fe fdc5 	bl	8010636 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8011aac:	4603      	mov	r3, r0
 8011aae:	4619      	mov	r1, r3
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f7fd fe9e 	bl	800f7f2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 8011ab6:	bf00      	nop
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}

08011abe <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8011abe:	b480      	push	{r7}
 8011ac0:	b083      	sub	sp, #12
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
 8011ac6:	6039      	str	r1, [r7, #0]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	4618      	mov	r0, r3
 8011acc:	370c      	adds	r7, #12
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr

08011ad6 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011ad6:	b590      	push	{r4, r7, lr}
 8011ad8:	b083      	sub	sp, #12
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
 8011ade:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7ff fd74 	bl	80115ce <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	681c      	ldr	r4, [r3, #0]
 8011aea:	6838      	ldr	r0, [r7, #0]
 8011aec:	f7ff fd6f 	bl	80115ce <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8011af0:	4603      	mov	r3, r0
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	429c      	cmp	r4, r3
 8011af6:	bf0c      	ite	eq
 8011af8:	2301      	moveq	r3, #1
 8011afa:	2300      	movne	r3, #0
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	4618      	mov	r0, r3
 8011b00:	370c      	adds	r7, #12
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd90      	pop	{r4, r7, pc}

08011b06 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011b06:	b480      	push	{r7}
 8011b08:	b083      	sub	sp, #12
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	4618      	mov	r0, r3
 8011b14:	370c      	adds	r7, #12
 8011b16:	46bd      	mov	sp, r7
 8011b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1c:	4770      	bx	lr

08011b1e <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b082      	sub	sp, #8
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
 8011b26:	6039      	str	r1, [r7, #0]
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	781a      	ldrb	r2, [r3, #0]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	701a      	strb	r2, [r3, #0]
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	685a      	ldr	r2, [r3, #4]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	605a      	str	r2, [r3, #4]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f103 0208 	add.w	r2, r3, #8
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	3308      	adds	r3, #8
 8011b42:	4619      	mov	r1, r3
 8011b44:	4610      	mov	r0, r2
 8011b46:	f7fa fd32 	bl	800c5ae <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	695a      	ldr	r2, [r3, #20]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	615a      	str	r2, [r3, #20]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	3708      	adds	r7, #8
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8011b5c:	b590      	push	{r4, r7, lr}
 8011b5e:	b083      	sub	sp, #12
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8011b66:	6838      	ldr	r0, [r7, #0]
 8011b68:	f000 f8e4 	bl	8011d34 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	4619      	mov	r1, r3
 8011b72:	2018      	movs	r0, #24
 8011b74:	f7f0 ffd2 	bl	8002b1c <_ZnwjPv>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	4621      	mov	r1, r4
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7ff ffce 	bl	8011b1e <_ZN3jlb4EdgeC1ERKS0_>
    }
 8011b82:	370c      	adds	r7, #12
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd90      	pop	{r4, r7, pc}

08011b88 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8011b88:	b590      	push	{r4, r7, lr}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8011b92:	6838      	ldr	r0, [r7, #0]
 8011b94:	f000 f8d9 	bl	8011d4a <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011b98:	4604      	mov	r4, r0
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	2018      	movs	r0, #24
 8011ba0:	f7f0 ffbc 	bl	8002b1c <_ZnwjPv>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	4621      	mov	r1, r4
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fc fb25 	bl	800e1f8 <_ZN3jlb4NodeC1ERKS0_>
    }
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd90      	pop	{r4, r7, pc}

08011bb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8011bb4:	b480      	push	{r7}
 8011bb6:	b087      	sub	sp, #28
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	60b9      	str	r1, [r7, #8]
 8011bbe:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	1ad3      	subs	r3, r2, r3
 8011bc6:	109b      	asrs	r3, r3, #2
 8011bc8:	617b      	str	r3, [r7, #20]
 8011bca:	e00c      	b.n	8011be6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x32>
	      *__result = *__first;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	601a      	str	r2, [r3, #0]
	      ++__first;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	3304      	adds	r3, #4
 8011bd8:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	3304      	adds	r3, #4
 8011bde:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	3b01      	subs	r3, #1
 8011be4:	617b      	str	r3, [r7, #20]
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	dcef      	bgt.n	8011bcc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 8011bec:	687b      	ldr	r3, [r7, #4]
	}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	371c      	adds	r7, #28
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b086      	sub	sp, #24
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	60f8      	str	r0, [r7, #12]
 8011c02:	60b9      	str	r1, [r7, #8]
 8011c04:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	109b      	asrs	r3, r3, #2
 8011c0e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d006      	beq.n	8011c24 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	461a      	mov	r2, r3
 8011c1c:	68f9      	ldr	r1, [r7, #12]
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f012 fa91 	bl	8024146 <memmove>
	  return __result + _Num;
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	4413      	add	r3, r2
	}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8011c34:	b480      	push	{r7}
 8011c36:	b087      	sub	sp, #28
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8011c40:	68ba      	ldr	r2, [r7, #8]
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	1ad3      	subs	r3, r2, r3
 8011c46:	109b      	asrs	r3, r3, #2
 8011c48:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8011c4a:	e00c      	b.n	8011c66 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x32>
	    *--__result = *--__last;
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	3b04      	subs	r3, #4
 8011c50:	60bb      	str	r3, [r7, #8]
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	3b04      	subs	r3, #4
 8011c5a:	607b      	str	r3, [r7, #4]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	3b01      	subs	r3, #1
 8011c64:	617b      	str	r3, [r7, #20]
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	dcef      	bgt.n	8011c4c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 8011c6c:	687b      	ldr	r3, [r7, #4]
	}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	371c      	adds	r7, #28
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr

08011c7a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b086      	sub	sp, #24
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	60f8      	str	r0, [r7, #12]
 8011c82:	60b9      	str	r1, [r7, #8]
 8011c84:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011c86:	68ba      	ldr	r2, [r7, #8]
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	1ad3      	subs	r3, r2, r3
 8011c8c:	109b      	asrs	r3, r3, #2
 8011c8e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d00a      	beq.n	8011cac <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	425b      	negs	r3, r3
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	18d0      	adds	r0, r2, r3
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	68f9      	ldr	r1, [r7, #12]
 8011ca8:	f012 fa4d 	bl	8024146 <memmove>
	  return __result - _Num;
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	009b      	lsls	r3, r3, #2
 8011cb0:	425b      	negs	r3, r3
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	4413      	add	r3, r2
	}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3718      	adds	r7, #24
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8011cbe:	b590      	push	{r4, r7, lr}
 8011cc0:	b085      	sub	sp, #20
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	60f8      	str	r0, [r7, #12]
 8011cc6:	60b9      	str	r1, [r7, #8]
 8011cc8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011cca:	68f8      	ldr	r0, [r7, #12]
 8011ccc:	f000 f848 	bl	8011d60 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	68b8      	ldr	r0, [r7, #8]
 8011cd4:	f000 f844 	bl	8011d60 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	4619      	mov	r1, r3
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f000 f850 	bl	8011d84 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 8011ce4:	4603      	mov	r3, r0
    }
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd90      	pop	{r4, r7, pc}

08011cee <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011cee:	b5b0      	push	{r4, r5, r7, lr}
 8011cf0:	b084      	sub	sp, #16
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	60f8      	str	r0, [r7, #12]
 8011cf6:	60b9      	str	r1, [r7, #8]
 8011cf8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8011cfa:	68f8      	ldr	r0, [r7, #12]
 8011cfc:	f7fb fe9a 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 8011d00:	4604      	mov	r4, r0
 8011d02:	68b8      	ldr	r0, [r7, #8]
 8011d04:	f7fb fe96 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 8011d08:	4605      	mov	r5, r0
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fb fe91 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 8011d12:	4603      	mov	r3, r0
 8011d14:	461a      	mov	r2, r3
 8011d16:	4629      	mov	r1, r5
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f7fe ff36 	bl	8010b8a <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	1d3b      	adds	r3, r7, #4
 8011d22:	4611      	mov	r1, r2
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7fb fea0 	bl	800da6a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8011d2a:	4603      	mov	r3, r0
    }
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3710      	adds	r7, #16
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bdb0      	pop	{r4, r5, r7, pc}

08011d34 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011d34:	b480      	push	{r7}
 8011d36:	b083      	sub	sp, #12
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	4618      	mov	r0, r3
 8011d40:	370c      	adds	r7, #12
 8011d42:	46bd      	mov	sp, r7
 8011d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d48:	4770      	bx	lr

08011d4a <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011d4a:	b480      	push	{r7}
 8011d4c:	b083      	sub	sp, #12
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	4618      	mov	r0, r3
 8011d56:	370c      	adds	r7, #12
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8011d68:	1d3b      	adds	r3, r7, #4
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f000 f82d 	bl	8011dca <_ZNKRSt13move_iteratorIPcE4baseEv>
 8011d70:	4603      	mov	r3, r0
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fe f8ad 	bl	800fed4 <_ZSt12__miter_baseIPcET_S1_>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3708      	adds	r7, #8
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011d84:	b5b0      	push	{r4, r5, r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8011d90:	68f8      	ldr	r0, [r7, #12]
 8011d92:	f7fb fe4f 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 8011d96:	4604      	mov	r4, r0
 8011d98:	68b8      	ldr	r0, [r7, #8]
 8011d9a:	f7fb fe4b 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 8011d9e:	4605      	mov	r5, r0
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fb fe46 	bl	800da34 <_ZSt12__niter_baseIPcET_S1_>
 8011da8:	4603      	mov	r3, r0
 8011daa:	461a      	mov	r2, r3
 8011dac:	4629      	mov	r1, r5
 8011dae:	4620      	mov	r0, r4
 8011db0:	f000 f816 	bl	8011de0 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>
 8011db4:	4602      	mov	r2, r0
 8011db6:	1d3b      	adds	r3, r7, #4
 8011db8:	4611      	mov	r1, r2
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fb fe55 	bl	800da6a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8011dc0:	4603      	mov	r3, r0
    }
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bdb0      	pop	{r4, r5, r7, pc}

08011dca <_ZNKRSt13move_iteratorIPcE4baseEv>:
      base() const & noexcept
 8011dca:	b480      	push	{r7}
 8011dcc:	b083      	sub	sp, #12
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr

08011de0 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	68b9      	ldr	r1, [r7, #8]
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	f000 f805 	bl	8011e00 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 8011df6:	4603      	mov	r3, r0
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8011e0c:	f7f0 fe7e 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d006      	beq.n	8011e24 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	68b9      	ldr	r1, [r7, #8]
 8011e1a:	68f8      	ldr	r0, [r7, #12]
 8011e1c:	f000 f80d 	bl	8011e3a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 8011e20:	4603      	mov	r3, r0
 8011e22:	e006      	b.n	8011e32 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	68b9      	ldr	r1, [r7, #8]
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f000 f829 	bl	8011e80 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	bf00      	nop
    }
 8011e32:	4618      	mov	r0, r3
 8011e34:	3710      	adds	r7, #16
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}

08011e3a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b086      	sub	sp, #24
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	60f8      	str	r0, [r7, #12]
 8011e42:	60b9      	str	r1, [r7, #8]
 8011e44:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011e46:	68ba      	ldr	r2, [r7, #8]
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	617b      	str	r3, [r7, #20]
 8011e4e:	e00f      	b.n	8011e70 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x36>
	      *__result = std::move(*__first);
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f7fb fd1d 	bl	800d890 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8011e56:	4603      	mov	r3, r0
 8011e58:	781a      	ldrb	r2, [r3, #0]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	3301      	adds	r3, #1
 8011e62:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	3301      	adds	r3, #1
 8011e68:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	3b01      	subs	r3, #1
 8011e6e:	617b      	str	r3, [r7, #20]
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	dcec      	bgt.n	8011e50 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8011e76:	687b      	ldr	r3, [r7, #4]
	}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3718      	adds	r7, #24
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}

08011e80 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b086      	sub	sp, #24
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	60b9      	str	r1, [r7, #8]
 8011e8a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011e8c:	68ba      	ldr	r2, [r7, #8]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d005      	beq.n	8011ea6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	68f9      	ldr	r1, [r7, #12]
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f012 f950 	bl	8024146 <memmove>
	  return __result + _Num;
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	4413      	add	r3, r2
	}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3718      	adds	r7, #24
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <_ZN3jlb5LogicD1Ev>:
    class Logic
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7f7 fcde 	bl	8009884 <_ZN3jlb12SignalSenderD1Ev>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7f6 fcb0 	bl	8008834 <_ZN3jlb5GraphD1Ev>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	3388      	adds	r3, #136	; 0x88
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7f2 fce7 	bl	80048ac <_ZN3jlb10ControllerD1Ev>
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7f6 fd3d 	bl	8008960 <_ZN3jlb8OdometryD1Ev>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3708      	adds	r7, #8
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <_Z41__static_initialization_and_destruction_0ii>:
	for(;;)
	{
		vTaskDelayUntil(&xLastWakeTime, 50u);
	}

}
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b082      	sub	sp, #8
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	6039      	str	r1, [r7, #0]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d10e      	bne.n	8011f1e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f06:	4293      	cmp	r3, r2
 8011f08:	d109      	bne.n	8011f1e <_Z41__static_initialization_and_destruction_0ii+0x2e>
jlb::Logic logic;
 8011f0a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8011f3c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8011f0e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8011f3c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8011f12:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011f3c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8011f16:	2102      	movs	r1, #2
 8011f18:	4809      	ldr	r0, [pc, #36]	; (8011f40 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8011f1a:	f7f9 fd60 	bl	800b9de <_ZN3jlb5LogicC1ENS_9DirectionEfff>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d107      	bne.n	8011f34 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	d102      	bne.n	8011f34 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8011f2e:	4804      	ldr	r0, [pc, #16]	; (8011f40 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8011f30:	f7ff ffc0 	bl	8011eb4 <_ZN3jlb5LogicD1Ev>
}
 8011f34:	bf00      	nop
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	00000000 	.word	0x00000000
 8011f40:	20000310 	.word	0x20000310

08011f44 <_GLOBAL__sub_I_motor_battery_voltage>:
 8011f44:	b580      	push	{r7, lr}
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f4c:	2001      	movs	r0, #1
 8011f4e:	f7ff ffcf 	bl	8011ef0 <_Z41__static_initialization_and_destruction_0ii>
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <_GLOBAL__sub_D_motor_battery_voltage>:
 8011f54:	b580      	push	{r7, lr}
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	f7ff ffc7 	bl	8011ef0 <_Z41__static_initialization_and_destruction_0ii>
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011f6c:	4b08      	ldr	r3, [pc, #32]	; (8011f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f70:	4907      	ldr	r1, [pc, #28]	; (8011f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4313      	orrs	r3, r2
 8011f76:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011f78:	4b05      	ldr	r3, [pc, #20]	; (8011f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	4013      	ands	r3, r2
 8011f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011f82:	68fb      	ldr	r3, [r7, #12]
}
 8011f84:	bf00      	nop
 8011f86:	3714      	adds	r7, #20
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr
 8011f90:	40021000 	.word	0x40021000

08011f94 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b085      	sub	sp, #20
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8011f9c:	4b08      	ldr	r3, [pc, #32]	; (8011fc0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8011f9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011fa0:	4907      	ldr	r1, [pc, #28]	; (8011fc0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4313      	orrs	r3, r2
 8011fa6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8011fa8:	4b05      	ldr	r3, [pc, #20]	; (8011fc0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8011faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	4013      	ands	r3, r2
 8011fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
}
 8011fb4:	bf00      	nop
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr
 8011fc0:	40021000 	.word	0x40021000

08011fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011fc8:	f002 f8a3 	bl	8014112 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8011fcc:	f000 f862 	bl	8012094 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8011fd0:	f000 ffba 	bl	8012f48 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8011fd4:	f000 ff8e 	bl	8012ef4 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8011fd8:	f000 fa62 	bl	80124a0 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8011fdc:	f000 fb82 	bl	80126e4 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8011fe0:	f000 ff24 	bl	8012e2c <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 8011fe4:	f000 ff58 	bl	8012e98 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 8011fe8:	f000 fabc 	bl	8012564 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8011fec:	f000 fbce 	bl	801278c <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8011ff0:	f000 fc0e 	bl	8012810 <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 8011ff4:	f000 fc4e 	bl	8012894 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8011ff8:	f000 fc8e 	bl	8012918 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8011ffc:	f000 fd2e 	bl	8012a5c <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8012000:	f000 fb10 	bl	8012624 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8012004:	f000 f8b6 	bl	8012174 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 8012008:	f000 fd88 	bl	8012b1c <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 801200c:	f000 f9dc 	bl	80123c8 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 8012010:	f000 fa28 	bl	8012464 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 8012014:	f000 fe22 	bl	8012c5c <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8012018:	f000 fe60 	bl	8012cdc <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 801201c:	f7f2 f9ea 	bl	80043f4 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8012020:	2100      	movs	r1, #0
 8012022:	4814      	ldr	r0, [pc, #80]	; (8012074 <main+0xb0>)
 8012024:	f008 f98c 	bl	801a340 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8012028:	2100      	movs	r1, #0
 801202a:	4813      	ldr	r0, [pc, #76]	; (8012078 <main+0xb4>)
 801202c:	f008 f988 	bl	801a340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8012030:	210c      	movs	r1, #12
 8012032:	4811      	ldr	r0, [pc, #68]	; (8012078 <main+0xb4>)
 8012034:	f008 f984 	bl	801a340 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8012038:	213c      	movs	r1, #60	; 0x3c
 801203a:	4810      	ldr	r0, [pc, #64]	; (801207c <main+0xb8>)
 801203c:	f008 fcd8 	bl	801a9f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 8012040:	480f      	ldr	r0, [pc, #60]	; (8012080 <main+0xbc>)
 8012042:	f008 f84d 	bl	801a0e0 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8012046:	2108      	movs	r1, #8
 8012048:	480e      	ldr	r0, [pc, #56]	; (8012084 <main+0xc0>)
 801204a:	f008 fae1 	bl	801a610 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 801204e:	210c      	movs	r1, #12
 8012050:	480c      	ldr	r0, [pc, #48]	; (8012084 <main+0xc0>)
 8012052:	f008 fadd 	bl	801a610 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8012056:	f00c fb53 	bl	801e700 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 801205a:	4a0b      	ldr	r2, [pc, #44]	; (8012088 <main+0xc4>)
 801205c:	2100      	movs	r1, #0
 801205e:	480b      	ldr	r0, [pc, #44]	; (801208c <main+0xc8>)
 8012060:	f00c fb98 	bl	801e794 <osThreadNew>
 8012064:	4603      	mov	r3, r0
 8012066:	4a0a      	ldr	r2, [pc, #40]	; (8012090 <main+0xcc>)
 8012068:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 801206a:	f7f9 fe2b 	bl	800bcc4 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 801206e:	f00c fb6b 	bl	801e748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8012072:	e7fe      	b.n	8012072 <main+0xae>
 8012074:	20000c38 	.word	0x20000c38
 8012078:	20000ba0 	.word	0x20000ba0
 801207c:	20000b54 	.word	0x20000b54
 8012080:	20000bec 	.word	0x20000bec
 8012084:	20000b08 	.word	0x20000b08
 8012088:	08025930 	.word	0x08025930
 801208c:	080131ad 	.word	0x080131ad
 8012090:	20000f78 	.word	0x20000f78

08012094 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b098      	sub	sp, #96	; 0x60
 8012098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801209a:	f107 0318 	add.w	r3, r7, #24
 801209e:	2248      	movs	r2, #72	; 0x48
 80120a0:	2100      	movs	r1, #0
 80120a2:	4618      	mov	r0, r3
 80120a4:	f012 f869 	bl	802417a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80120a8:	1d3b      	adds	r3, r7, #4
 80120aa:	2200      	movs	r2, #0
 80120ac:	601a      	str	r2, [r3, #0]
 80120ae:	605a      	str	r2, [r3, #4]
 80120b0:	609a      	str	r2, [r3, #8]
 80120b2:	60da      	str	r2, [r3, #12]
 80120b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80120b6:	2000      	movs	r0, #0
 80120b8:	f005 f9de 	bl	8017478 <HAL_PWREx_ControlVoltageScaling>
 80120bc:	4603      	mov	r3, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	bf14      	ite	ne
 80120c2:	2301      	movne	r3, #1
 80120c4:	2300      	moveq	r3, #0
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d001      	beq.n	80120d0 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80120cc:	f001 f88d 	bl	80131ea <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80120d0:	f005 f9b4 	bl	801743c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80120d4:	4b26      	ldr	r3, [pc, #152]	; (8012170 <_Z18SystemClock_Configv+0xdc>)
 80120d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120da:	4a25      	ldr	r2, [pc, #148]	; (8012170 <_Z18SystemClock_Configv+0xdc>)
 80120dc:	f023 0318 	bic.w	r3, r3, #24
 80120e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80120e4:	2334      	movs	r3, #52	; 0x34
 80120e6:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80120e8:	2381      	movs	r3, #129	; 0x81
 80120ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80120ec:	2301      	movs	r3, #1
 80120ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80120f0:	2301      	movs	r3, #1
 80120f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80120f4:	2300      	movs	r3, #0
 80120f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80120f8:	2360      	movs	r3, #96	; 0x60
 80120fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80120fc:	2302      	movs	r3, #2
 80120fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8012100:	2301      	movs	r3, #1
 8012102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8012104:	2301      	movs	r3, #1
 8012106:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8012108:	2337      	movs	r3, #55	; 0x37
 801210a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 801210c:	2307      	movs	r3, #7
 801210e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8012110:	2302      	movs	r3, #2
 8012112:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8012114:	2302      	movs	r3, #2
 8012116:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012118:	f107 0318 	add.w	r3, r7, #24
 801211c:	4618      	mov	r0, r3
 801211e:	f005 fa3b 	bl	8017598 <HAL_RCC_OscConfig>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	bf14      	ite	ne
 8012128:	2301      	movne	r3, #1
 801212a:	2300      	moveq	r3, #0
 801212c:	b2db      	uxtb	r3, r3
 801212e:	2b00      	cmp	r3, #0
 8012130:	d001      	beq.n	8012136 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8012132:	f001 f85a 	bl	80131ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012136:	230f      	movs	r3, #15
 8012138:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801213a:	2303      	movs	r3, #3
 801213c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801213e:	2300      	movs	r3, #0
 8012140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8012142:	2300      	movs	r3, #0
 8012144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012146:	2300      	movs	r3, #0
 8012148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801214a:	1d3b      	adds	r3, r7, #4
 801214c:	2105      	movs	r1, #5
 801214e:	4618      	mov	r0, r3
 8012150:	f005 fef8 	bl	8017f44 <HAL_RCC_ClockConfig>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	bf14      	ite	ne
 801215a:	2301      	movne	r3, #1
 801215c:	2300      	moveq	r3, #0
 801215e:	b2db      	uxtb	r3, r3
 8012160:	2b00      	cmp	r3, #0
 8012162:	d001      	beq.n	8012168 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8012164:	f001 f841 	bl	80131ea <Error_Handler>
  }
}
 8012168:	bf00      	nop
 801216a:	3760      	adds	r7, #96	; 0x60
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}
 8012170:	40021000 	.word	0x40021000

08012174 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b08a      	sub	sp, #40	; 0x28
 8012178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 801217a:	f107 031c 	add.w	r3, r7, #28
 801217e:	2200      	movs	r2, #0
 8012180:	601a      	str	r2, [r3, #0]
 8012182:	605a      	str	r2, [r3, #4]
 8012184:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8012186:	1d3b      	adds	r3, r7, #4
 8012188:	2200      	movs	r2, #0
 801218a:	601a      	str	r2, [r3, #0]
 801218c:	605a      	str	r2, [r3, #4]
 801218e:	609a      	str	r2, [r3, #8]
 8012190:	60da      	str	r2, [r3, #12]
 8012192:	611a      	str	r2, [r3, #16]
 8012194:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8012196:	4b82      	ldr	r3, [pc, #520]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012198:	4a82      	ldr	r2, [pc, #520]	; (80123a4 <_ZL12MX_ADC1_Initv+0x230>)
 801219a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801219c:	4b80      	ldr	r3, [pc, #512]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 801219e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80121a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80121a4:	4b7e      	ldr	r3, [pc, #504]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121a6:	2200      	movs	r2, #0
 80121a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80121aa:	4b7d      	ldr	r3, [pc, #500]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121ac:	2200      	movs	r2, #0
 80121ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80121b0:	4b7b      	ldr	r3, [pc, #492]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121b2:	2201      	movs	r2, #1
 80121b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80121b6:	4b7a      	ldr	r3, [pc, #488]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121b8:	2208      	movs	r2, #8
 80121ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80121bc:	4b78      	ldr	r3, [pc, #480]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121be:	2201      	movs	r2, #1
 80121c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80121c2:	4b77      	ldr	r3, [pc, #476]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121c4:	2200      	movs	r2, #0
 80121c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 80121c8:	4b75      	ldr	r3, [pc, #468]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121ca:	2208      	movs	r2, #8
 80121cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80121ce:	4b74      	ldr	r3, [pc, #464]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121d0:	2200      	movs	r2, #0
 80121d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80121d6:	4b72      	ldr	r3, [pc, #456]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121d8:	2200      	movs	r2, #0
 80121da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80121dc:	4b70      	ldr	r3, [pc, #448]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121de:	2200      	movs	r2, #0
 80121e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80121e2:	4b6f      	ldr	r3, [pc, #444]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121e4:	2201      	movs	r2, #1
 80121e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80121ea:	4b6d      	ldr	r3, [pc, #436]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80121f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80121f2:	4b6b      	ldr	r3, [pc, #428]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121f4:	2201      	movs	r2, #1
 80121f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 80121fa:	4b69      	ldr	r3, [pc, #420]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80121fc:	2214      	movs	r2, #20
 80121fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8012200:	4b67      	ldr	r3, [pc, #412]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012202:	22c0      	movs	r2, #192	; 0xc0
 8012204:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8012206:	4b66      	ldr	r3, [pc, #408]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012208:	2200      	movs	r2, #0
 801220a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 801220c:	4b64      	ldr	r3, [pc, #400]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 801220e:	2201      	movs	r2, #1
 8012210:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8012212:	4863      	ldr	r0, [pc, #396]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012214:	f002 f9c2 	bl	801459c <HAL_ADC_Init>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	bf14      	ite	ne
 801221e:	2301      	movne	r3, #1
 8012220:	2300      	moveq	r3, #0
 8012222:	b2db      	uxtb	r3, r3
 8012224:	2b00      	cmp	r3, #0
 8012226:	d001      	beq.n	801222c <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 8012228:	f000 ffdf 	bl	80131ea <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 801222c:	2300      	movs	r3, #0
 801222e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8012230:	f107 031c 	add.w	r3, r7, #28
 8012234:	4619      	mov	r1, r3
 8012236:	485a      	ldr	r0, [pc, #360]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012238:	f003 fb44 	bl	80158c4 <HAL_ADCEx_MultiModeConfigChannel>
 801223c:	4603      	mov	r3, r0
 801223e:	2b00      	cmp	r3, #0
 8012240:	bf14      	ite	ne
 8012242:	2301      	movne	r3, #1
 8012244:	2300      	moveq	r3, #0
 8012246:	b2db      	uxtb	r3, r3
 8012248:	2b00      	cmp	r3, #0
 801224a:	d001      	beq.n	8012250 <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 801224c:	f000 ffcd 	bl	80131ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8012250:	4b55      	ldr	r3, [pc, #340]	; (80123a8 <_ZL12MX_ADC1_Initv+0x234>)
 8012252:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012254:	2306      	movs	r3, #6
 8012256:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8012258:	2301      	movs	r3, #1
 801225a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801225c:	237f      	movs	r3, #127	; 0x7f
 801225e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8012260:	2304      	movs	r3, #4
 8012262:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8012264:	2300      	movs	r3, #0
 8012266:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012268:	1d3b      	adds	r3, r7, #4
 801226a:	4619      	mov	r1, r3
 801226c:	484c      	ldr	r0, [pc, #304]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 801226e:	f002 fdcd 	bl	8014e0c <HAL_ADC_ConfigChannel>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	bf14      	ite	ne
 8012278:	2301      	movne	r3, #1
 801227a:	2300      	moveq	r3, #0
 801227c:	b2db      	uxtb	r3, r3
 801227e:	2b00      	cmp	r3, #0
 8012280:	d001      	beq.n	8012286 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 8012282:	f000 ffb2 	bl	80131ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8012286:	4b49      	ldr	r3, [pc, #292]	; (80123ac <_ZL12MX_ADC1_Initv+0x238>)
 8012288:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 801228a:	230c      	movs	r3, #12
 801228c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801228e:	1d3b      	adds	r3, r7, #4
 8012290:	4619      	mov	r1, r3
 8012292:	4843      	ldr	r0, [pc, #268]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012294:	f002 fdba 	bl	8014e0c <HAL_ADC_ConfigChannel>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	bf14      	ite	ne
 801229e:	2301      	movne	r3, #1
 80122a0:	2300      	moveq	r3, #0
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d001      	beq.n	80122ac <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 80122a8:	f000 ff9f 	bl	80131ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80122ac:	4b40      	ldr	r3, [pc, #256]	; (80123b0 <_ZL12MX_ADC1_Initv+0x23c>)
 80122ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80122b0:	2312      	movs	r3, #18
 80122b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80122b4:	1d3b      	adds	r3, r7, #4
 80122b6:	4619      	mov	r1, r3
 80122b8:	4839      	ldr	r0, [pc, #228]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80122ba:	f002 fda7 	bl	8014e0c <HAL_ADC_ConfigChannel>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	bf14      	ite	ne
 80122c4:	2301      	movne	r3, #1
 80122c6:	2300      	moveq	r3, #0
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d001      	beq.n	80122d2 <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 80122ce:	f000 ff8c 	bl	80131ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80122d2:	4b38      	ldr	r3, [pc, #224]	; (80123b4 <_ZL12MX_ADC1_Initv+0x240>)
 80122d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80122d6:	2318      	movs	r3, #24
 80122d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80122da:	1d3b      	adds	r3, r7, #4
 80122dc:	4619      	mov	r1, r3
 80122de:	4830      	ldr	r0, [pc, #192]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 80122e0:	f002 fd94 	bl	8014e0c <HAL_ADC_ConfigChannel>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	bf14      	ite	ne
 80122ea:	2301      	movne	r3, #1
 80122ec:	2300      	moveq	r3, #0
 80122ee:	b2db      	uxtb	r3, r3
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d001      	beq.n	80122f8 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 80122f4:	f000 ff79 	bl	80131ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80122f8:	4b2f      	ldr	r3, [pc, #188]	; (80123b8 <_ZL12MX_ADC1_Initv+0x244>)
 80122fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80122fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012302:	1d3b      	adds	r3, r7, #4
 8012304:	4619      	mov	r1, r3
 8012306:	4826      	ldr	r0, [pc, #152]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012308:	f002 fd80 	bl	8014e0c <HAL_ADC_ConfigChannel>
 801230c:	4603      	mov	r3, r0
 801230e:	2b00      	cmp	r3, #0
 8012310:	bf14      	ite	ne
 8012312:	2301      	movne	r3, #1
 8012314:	2300      	moveq	r3, #0
 8012316:	b2db      	uxtb	r3, r3
 8012318:	2b00      	cmp	r3, #0
 801231a:	d001      	beq.n	8012320 <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 801231c:	f000 ff65 	bl	80131ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8012320:	4b26      	ldr	r3, [pc, #152]	; (80123bc <_ZL12MX_ADC1_Initv+0x248>)
 8012322:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8012324:	f44f 7383 	mov.w	r3, #262	; 0x106
 8012328:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801232a:	1d3b      	adds	r3, r7, #4
 801232c:	4619      	mov	r1, r3
 801232e:	481c      	ldr	r0, [pc, #112]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012330:	f002 fd6c 	bl	8014e0c <HAL_ADC_ConfigChannel>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	bf14      	ite	ne
 801233a:	2301      	movne	r3, #1
 801233c:	2300      	moveq	r3, #0
 801233e:	b2db      	uxtb	r3, r3
 8012340:	2b00      	cmp	r3, #0
 8012342:	d001      	beq.n	8012348 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 8012344:	f000 ff51 	bl	80131ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8012348:	4b1d      	ldr	r3, [pc, #116]	; (80123c0 <_ZL12MX_ADC1_Initv+0x24c>)
 801234a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 801234c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8012350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012352:	1d3b      	adds	r3, r7, #4
 8012354:	4619      	mov	r1, r3
 8012356:	4812      	ldr	r0, [pc, #72]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012358:	f002 fd58 	bl	8014e0c <HAL_ADC_ConfigChannel>
 801235c:	4603      	mov	r3, r0
 801235e:	2b00      	cmp	r3, #0
 8012360:	bf14      	ite	ne
 8012362:	2301      	movne	r3, #1
 8012364:	2300      	moveq	r3, #0
 8012366:	b2db      	uxtb	r3, r3
 8012368:	2b00      	cmp	r3, #0
 801236a:	d001      	beq.n	8012370 <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 801236c:	f000 ff3d 	bl	80131ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8012370:	4b14      	ldr	r3, [pc, #80]	; (80123c4 <_ZL12MX_ADC1_Initv+0x250>)
 8012372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8012374:	f44f 7389 	mov.w	r3, #274	; 0x112
 8012378:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801237a:	1d3b      	adds	r3, r7, #4
 801237c:	4619      	mov	r1, r3
 801237e:	4808      	ldr	r0, [pc, #32]	; (80123a0 <_ZL12MX_ADC1_Initv+0x22c>)
 8012380:	f002 fd44 	bl	8014e0c <HAL_ADC_ConfigChannel>
 8012384:	4603      	mov	r3, r0
 8012386:	2b00      	cmp	r3, #0
 8012388:	bf14      	ite	ne
 801238a:	2301      	movne	r3, #1
 801238c:	2300      	moveq	r3, #0
 801238e:	b2db      	uxtb	r3, r3
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 8012394:	f000 ff29 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8012398:	bf00      	nop
 801239a:	3728      	adds	r7, #40	; 0x28
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	200006d4 	.word	0x200006d4
 80123a4:	42028000 	.word	0x42028000
 80123a8:	04300002 	.word	0x04300002
 80123ac:	08600004 	.word	0x08600004
 80123b0:	0c900008 	.word	0x0c900008
 80123b4:	1d500080 	.word	0x1d500080
 80123b8:	21800100 	.word	0x21800100
 80123bc:	25b00200 	.word	0x25b00200
 80123c0:	32601000 	.word	0x32601000
 80123c4:	43210000 	.word	0x43210000

080123c8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80123cc:	4b22      	ldr	r3, [pc, #136]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123ce:	4a23      	ldr	r2, [pc, #140]	; (801245c <_ZL12MX_I2C1_Initv+0x94>)
 80123d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 80123d2:	4b21      	ldr	r3, [pc, #132]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123d4:	4a22      	ldr	r2, [pc, #136]	; (8012460 <_ZL12MX_I2C1_Initv+0x98>)
 80123d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80123d8:	4b1f      	ldr	r3, [pc, #124]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123da:	2200      	movs	r2, #0
 80123dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80123de:	4b1e      	ldr	r3, [pc, #120]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123e0:	2201      	movs	r2, #1
 80123e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80123e4:	4b1c      	ldr	r3, [pc, #112]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123e6:	2200      	movs	r2, #0
 80123e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80123ea:	4b1b      	ldr	r3, [pc, #108]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123ec:	2200      	movs	r2, #0
 80123ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80123f0:	4b19      	ldr	r3, [pc, #100]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80123f6:	4b18      	ldr	r3, [pc, #96]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123f8:	2200      	movs	r2, #0
 80123fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80123fc:	4b16      	ldr	r3, [pc, #88]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 80123fe:	2200      	movs	r2, #0
 8012400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012402:	4815      	ldr	r0, [pc, #84]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 8012404:	f004 f942 	bl	801668c <HAL_I2C_Init>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	bf14      	ite	ne
 801240e:	2301      	movne	r3, #1
 8012410:	2300      	moveq	r3, #0
 8012412:	b2db      	uxtb	r3, r3
 8012414:	2b00      	cmp	r3, #0
 8012416:	d001      	beq.n	801241c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8012418:	f000 fee7 	bl	80131ea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801241c:	2100      	movs	r1, #0
 801241e:	480e      	ldr	r0, [pc, #56]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 8012420:	f004 fe40 	bl	80170a4 <HAL_I2CEx_ConfigAnalogFilter>
 8012424:	4603      	mov	r3, r0
 8012426:	2b00      	cmp	r3, #0
 8012428:	bf14      	ite	ne
 801242a:	2301      	movne	r3, #1
 801242c:	2300      	moveq	r3, #0
 801242e:	b2db      	uxtb	r3, r3
 8012430:	2b00      	cmp	r3, #0
 8012432:	d001      	beq.n	8012438 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8012434:	f000 fed9 	bl	80131ea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8012438:	2100      	movs	r1, #0
 801243a:	4807      	ldr	r0, [pc, #28]	; (8012458 <_ZL12MX_I2C1_Initv+0x90>)
 801243c:	f004 fe7d 	bl	801713a <HAL_I2CEx_ConfigDigitalFilter>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	bf14      	ite	ne
 8012446:	2301      	movne	r3, #1
 8012448:	2300      	moveq	r3, #0
 801244a:	b2db      	uxtb	r3, r3
 801244c:	2b00      	cmp	r3, #0
 801244e:	d001      	beq.n	8012454 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8012450:	f000 fecb 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8012454:	bf00      	nop
 8012456:	bd80      	pop	{r7, pc}
 8012458:	200007a4 	.word	0x200007a4
 801245c:	40005400 	.word	0x40005400
 8012460:	60514452 	.word	0x60514452

08012464 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8012468:	2000      	movs	r0, #0
 801246a:	f004 feb3 	bl	80171d4 <HAL_ICACHE_ConfigAssociativityMode>
 801246e:	4603      	mov	r3, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	bf14      	ite	ne
 8012474:	2301      	movne	r3, #1
 8012476:	2300      	moveq	r3, #0
 8012478:	b2db      	uxtb	r3, r3
 801247a:	2b00      	cmp	r3, #0
 801247c:	d001      	beq.n	8012482 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 801247e:	f000 feb4 	bl	80131ea <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8012482:	f004 fec7 	bl	8017214 <HAL_ICACHE_Enable>
 8012486:	4603      	mov	r3, r0
 8012488:	2b00      	cmp	r3, #0
 801248a:	bf14      	ite	ne
 801248c:	2301      	movne	r3, #1
 801248e:	2300      	moveq	r3, #0
 8012490:	b2db      	uxtb	r3, r3
 8012492:	2b00      	cmp	r3, #0
 8012494:	d001      	beq.n	801249a <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8012496:	f000 fea8 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 801249a:	bf00      	nop
 801249c:	bd80      	pop	{r7, pc}
	...

080124a0 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80124a4:	4b2c      	ldr	r3, [pc, #176]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124a6:	4a2d      	ldr	r2, [pc, #180]	; (801255c <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 80124a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80124aa:	4b2b      	ldr	r3, [pc, #172]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124ac:	4a2c      	ldr	r2, [pc, #176]	; (8012560 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 80124ae:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80124b0:	4b29      	ldr	r3, [pc, #164]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124b2:	2200      	movs	r2, #0
 80124b4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80124b6:	4b28      	ldr	r3, [pc, #160]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124b8:	2200      	movs	r2, #0
 80124ba:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80124bc:	4b26      	ldr	r3, [pc, #152]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124be:	2200      	movs	r2, #0
 80124c0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80124c2:	4b25      	ldr	r3, [pc, #148]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124c4:	220c      	movs	r2, #12
 80124c6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80124c8:	4b23      	ldr	r3, [pc, #140]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124ca:	2200      	movs	r2, #0
 80124cc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80124ce:	4b22      	ldr	r3, [pc, #136]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124d0:	2200      	movs	r2, #0
 80124d2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80124d4:	4b20      	ldr	r3, [pc, #128]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80124da:	4b1f      	ldr	r3, [pc, #124]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124dc:	2200      	movs	r2, #0
 80124de:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80124e0:	4b1d      	ldr	r3, [pc, #116]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80124e6:	481c      	ldr	r0, [pc, #112]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80124e8:	f009 fda8 	bl	801c03c <HAL_UART_Init>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	bf14      	ite	ne
 80124f2:	2301      	movne	r3, #1
 80124f4:	2300      	moveq	r3, #0
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d001      	beq.n	8012500 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 80124fc:	f000 fe75 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012500:	2100      	movs	r1, #0
 8012502:	4815      	ldr	r0, [pc, #84]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8012504:	f00b fdf9 	bl	801e0fa <HAL_UARTEx_SetTxFifoThreshold>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	bf14      	ite	ne
 801250e:	2301      	movne	r3, #1
 8012510:	2300      	moveq	r3, #0
 8012512:	b2db      	uxtb	r3, r3
 8012514:	2b00      	cmp	r3, #0
 8012516:	d001      	beq.n	801251c <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8012518:	f000 fe67 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801251c:	2100      	movs	r1, #0
 801251e:	480e      	ldr	r0, [pc, #56]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8012520:	f00b fe29 	bl	801e176 <HAL_UARTEx_SetRxFifoThreshold>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	bf14      	ite	ne
 801252a:	2301      	movne	r3, #1
 801252c:	2300      	moveq	r3, #0
 801252e:	b2db      	uxtb	r3, r3
 8012530:	2b00      	cmp	r3, #0
 8012532:	d001      	beq.n	8012538 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 8012534:	f000 fe59 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8012538:	4807      	ldr	r0, [pc, #28]	; (8012558 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801253a:	f00b fda5 	bl	801e088 <HAL_UARTEx_DisableFifoMode>
 801253e:	4603      	mov	r3, r0
 8012540:	2b00      	cmp	r3, #0
 8012542:	bf14      	ite	ne
 8012544:	2301      	movne	r3, #1
 8012546:	2300      	moveq	r3, #0
 8012548:	b2db      	uxtb	r3, r3
 801254a:	2b00      	cmp	r3, #0
 801254c:	d001      	beq.n	8012552 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 801254e:	f000 fe4c 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8012552:	bf00      	nop
 8012554:	bd80      	pop	{r7, pc}
 8012556:	bf00      	nop
 8012558:	200007f8 	.word	0x200007f8
 801255c:	40008000 	.word	0x40008000
 8012560:	00033324 	.word	0x00033324

08012564 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8012568:	4b2c      	ldr	r3, [pc, #176]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 801256a:	4a2d      	ldr	r2, [pc, #180]	; (8012620 <_ZL13MX_UART4_Initv+0xbc>)
 801256c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 801256e:	4b2b      	ldr	r3, [pc, #172]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 8012570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012574:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012576:	4b29      	ldr	r3, [pc, #164]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 8012578:	2200      	movs	r2, #0
 801257a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 801257c:	4b27      	ldr	r3, [pc, #156]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 801257e:	2200      	movs	r2, #0
 8012580:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8012582:	4b26      	ldr	r3, [pc, #152]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 8012584:	2200      	movs	r2, #0
 8012586:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8012588:	4b24      	ldr	r3, [pc, #144]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 801258a:	2204      	movs	r2, #4
 801258c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801258e:	4b23      	ldr	r3, [pc, #140]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 8012590:	2200      	movs	r2, #0
 8012592:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012594:	4b21      	ldr	r3, [pc, #132]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 8012596:	2200      	movs	r2, #0
 8012598:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801259a:	4b20      	ldr	r3, [pc, #128]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 801259c:	2200      	movs	r2, #0
 801259e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80125a0:	4b1e      	ldr	r3, [pc, #120]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 80125a2:	2200      	movs	r2, #0
 80125a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80125a6:	4b1d      	ldr	r3, [pc, #116]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 80125a8:	2200      	movs	r2, #0
 80125aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80125ac:	481b      	ldr	r0, [pc, #108]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 80125ae:	f009 fd45 	bl	801c03c <HAL_UART_Init>
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	bf14      	ite	ne
 80125b8:	2301      	movne	r3, #1
 80125ba:	2300      	moveq	r3, #0
 80125bc:	b2db      	uxtb	r3, r3
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d001      	beq.n	80125c6 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 80125c2:	f000 fe12 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80125c6:	2100      	movs	r1, #0
 80125c8:	4814      	ldr	r0, [pc, #80]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 80125ca:	f00b fd96 	bl	801e0fa <HAL_UARTEx_SetTxFifoThreshold>
 80125ce:	4603      	mov	r3, r0
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	bf14      	ite	ne
 80125d4:	2301      	movne	r3, #1
 80125d6:	2300      	moveq	r3, #0
 80125d8:	b2db      	uxtb	r3, r3
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d001      	beq.n	80125e2 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 80125de:	f000 fe04 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80125e2:	2100      	movs	r1, #0
 80125e4:	480d      	ldr	r0, [pc, #52]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 80125e6:	f00b fdc6 	bl	801e176 <HAL_UARTEx_SetRxFifoThreshold>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	bf14      	ite	ne
 80125f0:	2301      	movne	r3, #1
 80125f2:	2300      	moveq	r3, #0
 80125f4:	b2db      	uxtb	r3, r3
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d001      	beq.n	80125fe <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 80125fa:	f000 fdf6 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80125fe:	4807      	ldr	r0, [pc, #28]	; (801261c <_ZL13MX_UART4_Initv+0xb8>)
 8012600:	f00b fd42 	bl	801e088 <HAL_UARTEx_DisableFifoMode>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	bf14      	ite	ne
 801260a:	2301      	movne	r3, #1
 801260c:	2300      	moveq	r3, #0
 801260e:	b2db      	uxtb	r3, r3
 8012610:	2b00      	cmp	r3, #0
 8012612:	d001      	beq.n	8012618 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8012614:	f000 fde9 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8012618:	bf00      	nop
 801261a:	bd80      	pop	{r7, pc}
 801261c:	2000088c 	.word	0x2000088c
 8012620:	40004c00 	.word	0x40004c00

08012624 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8012628:	4b2c      	ldr	r3, [pc, #176]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 801262a:	4a2d      	ldr	r2, [pc, #180]	; (80126e0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 801262c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801262e:	4b2b      	ldr	r3, [pc, #172]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8012636:	4b29      	ldr	r3, [pc, #164]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012638:	2200      	movs	r2, #0
 801263a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801263c:	4b27      	ldr	r3, [pc, #156]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 801263e:	2200      	movs	r2, #0
 8012640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8012642:	4b26      	ldr	r3, [pc, #152]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012644:	2200      	movs	r2, #0
 8012646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8012648:	4b24      	ldr	r3, [pc, #144]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 801264a:	2208      	movs	r2, #8
 801264c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801264e:	4b23      	ldr	r3, [pc, #140]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012650:	2200      	movs	r2, #0
 8012652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012654:	4b21      	ldr	r3, [pc, #132]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012656:	2200      	movs	r2, #0
 8012658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801265a:	4b20      	ldr	r3, [pc, #128]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 801265c:	2200      	movs	r2, #0
 801265e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012660:	4b1e      	ldr	r3, [pc, #120]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012662:	2200      	movs	r2, #0
 8012664:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012666:	4b1d      	ldr	r3, [pc, #116]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012668:	2200      	movs	r2, #0
 801266a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801266c:	481b      	ldr	r0, [pc, #108]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 801266e:	f009 fce5 	bl	801c03c <HAL_UART_Init>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	bf14      	ite	ne
 8012678:	2301      	movne	r3, #1
 801267a:	2300      	moveq	r3, #0
 801267c:	b2db      	uxtb	r3, r3
 801267e:	2b00      	cmp	r3, #0
 8012680:	d001      	beq.n	8012686 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8012682:	f000 fdb2 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012686:	2100      	movs	r1, #0
 8012688:	4814      	ldr	r0, [pc, #80]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 801268a:	f00b fd36 	bl	801e0fa <HAL_UARTEx_SetTxFifoThreshold>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	bf14      	ite	ne
 8012694:	2301      	movne	r3, #1
 8012696:	2300      	moveq	r3, #0
 8012698:	b2db      	uxtb	r3, r3
 801269a:	2b00      	cmp	r3, #0
 801269c:	d001      	beq.n	80126a2 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 801269e:	f000 fda4 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80126a2:	2100      	movs	r1, #0
 80126a4:	480d      	ldr	r0, [pc, #52]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80126a6:	f00b fd66 	bl	801e176 <HAL_UARTEx_SetRxFifoThreshold>
 80126aa:	4603      	mov	r3, r0
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	bf14      	ite	ne
 80126b0:	2301      	movne	r3, #1
 80126b2:	2300      	moveq	r3, #0
 80126b4:	b2db      	uxtb	r3, r3
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d001      	beq.n	80126be <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80126ba:	f000 fd96 	bl	80131ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80126be:	4807      	ldr	r0, [pc, #28]	; (80126dc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80126c0:	f00b fce2 	bl	801e088 <HAL_UARTEx_DisableFifoMode>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	bf14      	ite	ne
 80126ca:	2301      	movne	r3, #1
 80126cc:	2300      	moveq	r3, #0
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d001      	beq.n	80126d8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80126d4:	f000 fd89 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80126d8:	bf00      	nop
 80126da:	bd80      	pop	{r7, pc}
 80126dc:	20000920 	.word	0x20000920
 80126e0:	40004400 	.word	0x40004400

080126e4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b086      	sub	sp, #24
 80126e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80126ea:	463b      	mov	r3, r7
 80126ec:	2200      	movs	r2, #0
 80126ee:	601a      	str	r2, [r3, #0]
 80126f0:	605a      	str	r2, [r3, #4]
 80126f2:	609a      	str	r2, [r3, #8]
 80126f4:	60da      	str	r2, [r3, #12]
 80126f6:	611a      	str	r2, [r3, #16]
 80126f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80126fa:	4b22      	ldr	r3, [pc, #136]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 80126fc:	4a22      	ldr	r2, [pc, #136]	; (8012788 <_ZL11MX_RTC_Initv+0xa4>)
 80126fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012700:	4b20      	ldr	r3, [pc, #128]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 8012702:	2200      	movs	r2, #0
 8012704:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8012706:	4b1f      	ldr	r3, [pc, #124]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 8012708:	227f      	movs	r2, #127	; 0x7f
 801270a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801270c:	4b1d      	ldr	r3, [pc, #116]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 801270e:	22ff      	movs	r2, #255	; 0xff
 8012710:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012712:	4b1c      	ldr	r3, [pc, #112]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 8012714:	2200      	movs	r2, #0
 8012716:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8012718:	4b1a      	ldr	r3, [pc, #104]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 801271a:	2200      	movs	r2, #0
 801271c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801271e:	4b19      	ldr	r3, [pc, #100]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 8012720:	2200      	movs	r2, #0
 8012722:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012724:	4b17      	ldr	r3, [pc, #92]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 8012726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801272a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 801272c:	4b15      	ldr	r3, [pc, #84]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 801272e:	2200      	movs	r2, #0
 8012730:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8012732:	4814      	ldr	r0, [pc, #80]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 8012734:	f006 fc32 	bl	8018f9c <HAL_RTC_Init>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	bf14      	ite	ne
 801273e:	2301      	movne	r3, #1
 8012740:	2300      	moveq	r3, #0
 8012742:	b2db      	uxtb	r3, r3
 8012744:	2b00      	cmp	r3, #0
 8012746:	d001      	beq.n	801274c <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8012748:	f000 fd4f 	bl	80131ea <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 801274c:	2300      	movs	r3, #0
 801274e:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8012750:	2300      	movs	r3, #0
 8012752:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8012754:	2300      	movs	r3, #0
 8012756:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8012758:	2300      	movs	r3, #0
 801275a:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 801275c:	463b      	mov	r3, r7
 801275e:	4619      	mov	r1, r3
 8012760:	4808      	ldr	r0, [pc, #32]	; (8012784 <_ZL11MX_RTC_Initv+0xa0>)
 8012762:	f006 fd29 	bl	80191b8 <HAL_RTCEx_PrivilegeModeSet>
 8012766:	4603      	mov	r3, r0
 8012768:	2b00      	cmp	r3, #0
 801276a:	bf14      	ite	ne
 801276c:	2301      	movne	r3, #1
 801276e:	2300      	moveq	r3, #0
 8012770:	b2db      	uxtb	r3, r3
 8012772:	2b00      	cmp	r3, #0
 8012774:	d001      	beq.n	801277a <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8012776:	f000 fd38 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801277a:	bf00      	nop
 801277c:	3718      	adds	r7, #24
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	200009b4 	.word	0x200009b4
 8012788:	40002800 	.word	0x40002800

0801278c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8012790:	4b1d      	ldr	r3, [pc, #116]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 8012792:	4a1e      	ldr	r2, [pc, #120]	; (801280c <_ZL12MX_SPI1_Initv+0x80>)
 8012794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8012796:	4b1c      	ldr	r3, [pc, #112]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 8012798:	f44f 7282 	mov.w	r2, #260	; 0x104
 801279c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801279e:	4b1a      	ldr	r3, [pc, #104]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127a0:	2200      	movs	r2, #0
 80127a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80127a4:	4b18      	ldr	r3, [pc, #96]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80127aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80127ac:	4b16      	ldr	r3, [pc, #88]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127ae:	2200      	movs	r2, #0
 80127b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80127b2:	4b15      	ldr	r3, [pc, #84]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127b4:	2200      	movs	r2, #0
 80127b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80127b8:	4b13      	ldr	r3, [pc, #76]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80127be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80127c0:	4b11      	ldr	r3, [pc, #68]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127c2:	2228      	movs	r2, #40	; 0x28
 80127c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80127c6:	4b10      	ldr	r3, [pc, #64]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127c8:	2200      	movs	r2, #0
 80127ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80127cc:	4b0e      	ldr	r3, [pc, #56]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127ce:	2200      	movs	r2, #0
 80127d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80127d2:	4b0d      	ldr	r3, [pc, #52]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127d4:	2200      	movs	r2, #0
 80127d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80127d8:	4b0b      	ldr	r3, [pc, #44]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127da:	2207      	movs	r2, #7
 80127dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80127de:	4b0a      	ldr	r3, [pc, #40]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127e0:	2200      	movs	r2, #0
 80127e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80127e4:	4b08      	ldr	r3, [pc, #32]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127e6:	2208      	movs	r2, #8
 80127e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80127ea:	4807      	ldr	r0, [pc, #28]	; (8012808 <_ZL12MX_SPI1_Initv+0x7c>)
 80127ec:	f006 fd10 	bl	8019210 <HAL_SPI_Init>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	bf14      	ite	ne
 80127f6:	2301      	movne	r3, #1
 80127f8:	2300      	moveq	r3, #0
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d001      	beq.n	8012804 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8012800:	f000 fcf3 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012804:	bf00      	nop
 8012806:	bd80      	pop	{r7, pc}
 8012808:	200009dc 	.word	0x200009dc
 801280c:	40013000 	.word	0x40013000

08012810 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8012814:	4b1d      	ldr	r3, [pc, #116]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012816:	4a1e      	ldr	r2, [pc, #120]	; (8012890 <_ZL12MX_SPI2_Initv+0x80>)
 8012818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801281a:	4b1c      	ldr	r3, [pc, #112]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 801281c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8012820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8012822:	4b1a      	ldr	r3, [pc, #104]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012824:	2200      	movs	r2, #0
 8012826:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8012828:	4b18      	ldr	r3, [pc, #96]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 801282a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801282e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012830:	4b16      	ldr	r3, [pc, #88]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012832:	2200      	movs	r2, #0
 8012834:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012836:	4b15      	ldr	r3, [pc, #84]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012838:	2200      	movs	r2, #0
 801283a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801283c:	4b13      	ldr	r3, [pc, #76]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 801283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012842:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012844:	4b11      	ldr	r3, [pc, #68]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012846:	2218      	movs	r2, #24
 8012848:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 801284a:	4b10      	ldr	r3, [pc, #64]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 801284c:	2280      	movs	r2, #128	; 0x80
 801284e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8012850:	4b0e      	ldr	r3, [pc, #56]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012852:	2200      	movs	r2, #0
 8012854:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012856:	4b0d      	ldr	r3, [pc, #52]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012858:	2200      	movs	r2, #0
 801285a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 801285c:	4b0b      	ldr	r3, [pc, #44]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 801285e:	2207      	movs	r2, #7
 8012860:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012862:	4b0a      	ldr	r3, [pc, #40]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012864:	2200      	movs	r2, #0
 8012866:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8012868:	4b08      	ldr	r3, [pc, #32]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 801286a:	2208      	movs	r2, #8
 801286c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801286e:	4807      	ldr	r0, [pc, #28]	; (801288c <_ZL12MX_SPI2_Initv+0x7c>)
 8012870:	f006 fcce 	bl	8019210 <HAL_SPI_Init>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	bf14      	ite	ne
 801287a:	2301      	movne	r3, #1
 801287c:	2300      	moveq	r3, #0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	d001      	beq.n	8012888 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8012884:	f000 fcb1 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8012888:	bf00      	nop
 801288a:	bd80      	pop	{r7, pc}
 801288c:	20000a40 	.word	0x20000a40
 8012890:	40003800 	.word	0x40003800

08012894 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8012898:	4b1d      	ldr	r3, [pc, #116]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 801289a:	4a1e      	ldr	r2, [pc, #120]	; (8012914 <_ZL12MX_SPI3_Initv+0x80>)
 801289c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801289e:	4b1c      	ldr	r3, [pc, #112]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80128a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80128a6:	4b1a      	ldr	r3, [pc, #104]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128a8:	2200      	movs	r2, #0
 80128aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80128ac:	4b18      	ldr	r3, [pc, #96]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80128b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80128b4:	4b16      	ldr	r3, [pc, #88]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128b6:	2200      	movs	r2, #0
 80128b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80128ba:	4b15      	ldr	r3, [pc, #84]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128bc:	2200      	movs	r2, #0
 80128be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80128c0:	4b13      	ldr	r3, [pc, #76]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80128c8:	4b11      	ldr	r3, [pc, #68]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128ca:	2218      	movs	r2, #24
 80128cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80128ce:	4b10      	ldr	r3, [pc, #64]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128d0:	2200      	movs	r2, #0
 80128d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80128d4:	4b0e      	ldr	r3, [pc, #56]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128d6:	2200      	movs	r2, #0
 80128d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80128da:	4b0d      	ldr	r3, [pc, #52]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128dc:	2200      	movs	r2, #0
 80128de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80128e0:	4b0b      	ldr	r3, [pc, #44]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128e2:	2207      	movs	r2, #7
 80128e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80128e6:	4b0a      	ldr	r3, [pc, #40]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128e8:	2200      	movs	r2, #0
 80128ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80128ec:	4b08      	ldr	r3, [pc, #32]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128ee:	2208      	movs	r2, #8
 80128f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80128f2:	4807      	ldr	r0, [pc, #28]	; (8012910 <_ZL12MX_SPI3_Initv+0x7c>)
 80128f4:	f006 fc8c 	bl	8019210 <HAL_SPI_Init>
 80128f8:	4603      	mov	r3, r0
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	bf14      	ite	ne
 80128fe:	2301      	movne	r3, #1
 8012900:	2300      	moveq	r3, #0
 8012902:	b2db      	uxtb	r3, r3
 8012904:	2b00      	cmp	r3, #0
 8012906:	d001      	beq.n	801290c <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8012908:	f000 fc6f 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801290c:	bf00      	nop
 801290e:	bd80      	pop	{r7, pc}
 8012910:	20000aa4 	.word	0x20000aa4
 8012914:	40003c00 	.word	0x40003c00

08012918 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b08c      	sub	sp, #48	; 0x30
 801291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801291e:	f107 0320 	add.w	r3, r7, #32
 8012922:	2200      	movs	r2, #0
 8012924:	601a      	str	r2, [r3, #0]
 8012926:	605a      	str	r2, [r3, #4]
 8012928:	609a      	str	r2, [r3, #8]
 801292a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801292c:	f107 0314 	add.w	r3, r7, #20
 8012930:	2200      	movs	r2, #0
 8012932:	601a      	str	r2, [r3, #0]
 8012934:	605a      	str	r2, [r3, #4]
 8012936:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8012938:	1d3b      	adds	r3, r7, #4
 801293a:	2200      	movs	r2, #0
 801293c:	601a      	str	r2, [r3, #0]
 801293e:	605a      	str	r2, [r3, #4]
 8012940:	609a      	str	r2, [r3, #8]
 8012942:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8012944:	4b43      	ldr	r3, [pc, #268]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012946:	4a44      	ldr	r2, [pc, #272]	; (8012a58 <_ZL12MX_TIM1_Initv+0x140>)
 8012948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 801294a:	4b42      	ldr	r3, [pc, #264]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 801294c:	226e      	movs	r2, #110	; 0x6e
 801294e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012950:	4b40      	ldr	r3, [pc, #256]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012952:	2200      	movs	r2, #0
 8012954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8012956:	4b3f      	ldr	r3, [pc, #252]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012958:	f24c 3250 	movw	r2, #50000	; 0xc350
 801295c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801295e:	4b3d      	ldr	r3, [pc, #244]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012960:	2200      	movs	r2, #0
 8012962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8012964:	4b3b      	ldr	r3, [pc, #236]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012966:	2200      	movs	r2, #0
 8012968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801296a:	4b3a      	ldr	r3, [pc, #232]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 801296c:	2280      	movs	r2, #128	; 0x80
 801296e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8012970:	4838      	ldr	r0, [pc, #224]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012972:	f007 fb5d 	bl	801a030 <HAL_TIM_Base_Init>
 8012976:	4603      	mov	r3, r0
 8012978:	2b00      	cmp	r3, #0
 801297a:	bf14      	ite	ne
 801297c:	2301      	movne	r3, #1
 801297e:	2300      	moveq	r3, #0
 8012980:	b2db      	uxtb	r3, r3
 8012982:	2b00      	cmp	r3, #0
 8012984:	d001      	beq.n	801298a <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 8012986:	f000 fc30 	bl	80131ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801298a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801298e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8012990:	f107 0320 	add.w	r3, r7, #32
 8012994:	4619      	mov	r1, r3
 8012996:	482f      	ldr	r0, [pc, #188]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012998:	f008 fb88 	bl	801b0ac <HAL_TIM_ConfigClockSource>
 801299c:	4603      	mov	r3, r0
 801299e:	2b00      	cmp	r3, #0
 80129a0:	bf14      	ite	ne
 80129a2:	2301      	movne	r3, #1
 80129a4:	2300      	moveq	r3, #0
 80129a6:	b2db      	uxtb	r3, r3
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d001      	beq.n	80129b0 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 80129ac:	f000 fc1d 	bl	80131ea <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80129b0:	4828      	ldr	r0, [pc, #160]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 80129b2:	f007 fdcb 	bl	801a54c <HAL_TIM_IC_Init>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	bf14      	ite	ne
 80129bc:	2301      	movne	r3, #1
 80129be:	2300      	moveq	r3, #0
 80129c0:	b2db      	uxtb	r3, r3
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d001      	beq.n	80129ca <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 80129c6:	f000 fc10 	bl	80131ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80129ca:	2300      	movs	r3, #0
 80129cc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80129ce:	2300      	movs	r3, #0
 80129d0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80129d2:	2300      	movs	r3, #0
 80129d4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80129d6:	f107 0314 	add.w	r3, r7, #20
 80129da:	4619      	mov	r1, r3
 80129dc:	481d      	ldr	r0, [pc, #116]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 80129de:	f009 f9e7 	bl	801bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 80129e2:	4603      	mov	r3, r0
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	bf14      	ite	ne
 80129e8:	2301      	movne	r3, #1
 80129ea:	2300      	moveq	r3, #0
 80129ec:	b2db      	uxtb	r3, r3
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d001      	beq.n	80129f6 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 80129f2:	f000 fbfa 	bl	80131ea <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80129f6:	2300      	movs	r3, #0
 80129f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80129fa:	2301      	movs	r3, #1
 80129fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80129fe:	2300      	movs	r3, #0
 8012a00:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8012a02:	2300      	movs	r3, #0
 8012a04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8012a06:	1d3b      	adds	r3, r7, #4
 8012a08:	2208      	movs	r2, #8
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	4811      	ldr	r0, [pc, #68]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012a0e:	f008 f99c 	bl	801ad4a <HAL_TIM_IC_ConfigChannel>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	bf14      	ite	ne
 8012a18:	2301      	movne	r3, #1
 8012a1a:	2300      	moveq	r3, #0
 8012a1c:	b2db      	uxtb	r3, r3
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8012a22:	f000 fbe2 	bl	80131ea <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8012a26:	2302      	movs	r3, #2
 8012a28:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8012a2a:	1d3b      	adds	r3, r7, #4
 8012a2c:	220c      	movs	r2, #12
 8012a2e:	4619      	mov	r1, r3
 8012a30:	4808      	ldr	r0, [pc, #32]	; (8012a54 <_ZL12MX_TIM1_Initv+0x13c>)
 8012a32:	f008 f98a 	bl	801ad4a <HAL_TIM_IC_ConfigChannel>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	bf14      	ite	ne
 8012a3c:	2301      	movne	r3, #1
 8012a3e:	2300      	moveq	r3, #0
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d001      	beq.n	8012a4a <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8012a46:	f000 fbd0 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8012a4a:	bf00      	nop
 8012a4c:	3730      	adds	r7, #48	; 0x30
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	20000b08 	.word	0x20000b08
 8012a58:	40012c00 	.word	0x40012c00

08012a5c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b08c      	sub	sp, #48	; 0x30
 8012a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8012a62:	f107 030c 	add.w	r3, r7, #12
 8012a66:	2224      	movs	r2, #36	; 0x24
 8012a68:	2100      	movs	r1, #0
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f011 fb85 	bl	802417a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012a70:	463b      	mov	r3, r7
 8012a72:	2200      	movs	r2, #0
 8012a74:	601a      	str	r2, [r3, #0]
 8012a76:	605a      	str	r2, [r3, #4]
 8012a78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8012a7a:	4b26      	ldr	r3, [pc, #152]	; (8012b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8012a7c:	4a26      	ldr	r2, [pc, #152]	; (8012b18 <_ZL12MX_TIM3_Initv+0xbc>)
 8012a7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012a80:	4b24      	ldr	r3, [pc, #144]	; (8012b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8012a82:	2200      	movs	r2, #0
 8012a84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012a86:	4b23      	ldr	r3, [pc, #140]	; (8012b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8012a88:	2200      	movs	r2, #0
 8012a8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8012a8c:	4b21      	ldr	r3, [pc, #132]	; (8012b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8012a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012a94:	4b1f      	ldr	r3, [pc, #124]	; (8012b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8012a96:	2200      	movs	r2, #0
 8012a98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012a9a:	4b1e      	ldr	r3, [pc, #120]	; (8012b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8012aa0:	2303      	movs	r3, #3
 8012aa2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8012aac:	2300      	movs	r3, #0
 8012aae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8012abc:	2300      	movs	r3, #0
 8012abe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8012ac4:	f107 030c 	add.w	r3, r7, #12
 8012ac8:	4619      	mov	r1, r3
 8012aca:	4812      	ldr	r0, [pc, #72]	; (8012b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8012acc:	f007 feea 	bl	801a8a4 <HAL_TIM_Encoder_Init>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	bf14      	ite	ne
 8012ad6:	2301      	movne	r3, #1
 8012ad8:	2300      	moveq	r3, #0
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d001      	beq.n	8012ae4 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8012ae0:	f000 fb83 	bl	80131ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012aec:	463b      	mov	r3, r7
 8012aee:	4619      	mov	r1, r3
 8012af0:	4808      	ldr	r0, [pc, #32]	; (8012b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8012af2:	f009 f95d 	bl	801bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	bf14      	ite	ne
 8012afc:	2301      	movne	r3, #1
 8012afe:	2300      	moveq	r3, #0
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d001      	beq.n	8012b0a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8012b06:	f000 fb70 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8012b0a:	bf00      	nop
 8012b0c:	3730      	adds	r7, #48	; 0x30
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	20000b54 	.word	0x20000b54
 8012b18:	40000400 	.word	0x40000400

08012b1c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b08e      	sub	sp, #56	; 0x38
 8012b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012b26:	2200      	movs	r2, #0
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	605a      	str	r2, [r3, #4]
 8012b2c:	609a      	str	r2, [r3, #8]
 8012b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012b30:	f107 031c 	add.w	r3, r7, #28
 8012b34:	2200      	movs	r2, #0
 8012b36:	601a      	str	r2, [r3, #0]
 8012b38:	605a      	str	r2, [r3, #4]
 8012b3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012b3c:	463b      	mov	r3, r7
 8012b3e:	2200      	movs	r2, #0
 8012b40:	601a      	str	r2, [r3, #0]
 8012b42:	605a      	str	r2, [r3, #4]
 8012b44:	609a      	str	r2, [r3, #8]
 8012b46:	60da      	str	r2, [r3, #12]
 8012b48:	611a      	str	r2, [r3, #16]
 8012b4a:	615a      	str	r2, [r3, #20]
 8012b4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8012b4e:	4b41      	ldr	r3, [pc, #260]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012b50:	4a41      	ldr	r2, [pc, #260]	; (8012c58 <_ZL12MX_TIM5_Initv+0x13c>)
 8012b52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8012b54:	4b3f      	ldr	r3, [pc, #252]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8012b5a:	4b3e      	ldr	r3, [pc, #248]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012b5c:	2220      	movs	r2, #32
 8012b5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 8012b60:	4b3c      	ldr	r3, [pc, #240]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012b62:	f240 722a 	movw	r2, #1834	; 0x72a
 8012b66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012b68:	4b3a      	ldr	r3, [pc, #232]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8012b6e:	4b39      	ldr	r3, [pc, #228]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012b70:	2280      	movs	r2, #128	; 0x80
 8012b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8012b74:	4837      	ldr	r0, [pc, #220]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012b76:	f007 fa5b 	bl	801a030 <HAL_TIM_Base_Init>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	bf14      	ite	ne
 8012b80:	2301      	movne	r3, #1
 8012b82:	2300      	moveq	r3, #0
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d001      	beq.n	8012b8e <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 8012b8a:	f000 fb2e 	bl	80131ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8012b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012b98:	4619      	mov	r1, r3
 8012b9a:	482e      	ldr	r0, [pc, #184]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012b9c:	f008 fa86 	bl	801b0ac <HAL_TIM_ConfigClockSource>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	bf14      	ite	ne
 8012ba6:	2301      	movne	r3, #1
 8012ba8:	2300      	moveq	r3, #0
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d001      	beq.n	8012bb4 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8012bb0:	f000 fb1b 	bl	80131ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8012bb4:	4827      	ldr	r0, [pc, #156]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012bb6:	f007 fb6b 	bl	801a290 <HAL_TIM_PWM_Init>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	bf14      	ite	ne
 8012bc0:	2301      	movne	r3, #1
 8012bc2:	2300      	moveq	r3, #0
 8012bc4:	b2db      	uxtb	r3, r3
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d001      	beq.n	8012bce <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8012bca:	f000 fb0e 	bl	80131ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8012bd6:	f107 031c 	add.w	r3, r7, #28
 8012bda:	4619      	mov	r1, r3
 8012bdc:	481d      	ldr	r0, [pc, #116]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012bde:	f009 f8e7 	bl	801bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8012be2:	4603      	mov	r3, r0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	bf14      	ite	ne
 8012be8:	2301      	movne	r3, #1
 8012bea:	2300      	moveq	r3, #0
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d001      	beq.n	8012bf6 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8012bf2:	f000 fafa 	bl	80131ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012bf6:	2360      	movs	r3, #96	; 0x60
 8012bf8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012c02:	2300      	movs	r3, #0
 8012c04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012c06:	463b      	mov	r3, r7
 8012c08:	2200      	movs	r2, #0
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	4811      	ldr	r0, [pc, #68]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012c0e:	f008 f939 	bl	801ae84 <HAL_TIM_PWM_ConfigChannel>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	bf14      	ite	ne
 8012c18:	2301      	movne	r3, #1
 8012c1a:	2300      	moveq	r3, #0
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d001      	beq.n	8012c26 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8012c22:	f000 fae2 	bl	80131ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012c26:	463b      	mov	r3, r7
 8012c28:	220c      	movs	r2, #12
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	4809      	ldr	r0, [pc, #36]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012c2e:	f008 f929 	bl	801ae84 <HAL_TIM_PWM_ConfigChannel>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	bf14      	ite	ne
 8012c38:	2301      	movne	r3, #1
 8012c3a:	2300      	moveq	r3, #0
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d001      	beq.n	8012c46 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 8012c42:	f000 fad2 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8012c46:	4803      	ldr	r0, [pc, #12]	; (8012c54 <_ZL12MX_TIM5_Initv+0x138>)
 8012c48:	f000 ff2c 	bl	8013aa4 <HAL_TIM_MspPostInit>

}
 8012c4c:	bf00      	nop
 8012c4e:	3738      	adds	r7, #56	; 0x38
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	20000ba0 	.word	0x20000ba0
 8012c58:	40000c00 	.word	0x40000c00

08012c5c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012c62:	1d3b      	adds	r3, r7, #4
 8012c64:	2200      	movs	r2, #0
 8012c66:	601a      	str	r2, [r3, #0]
 8012c68:	605a      	str	r2, [r3, #4]
 8012c6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012c6c:	4b19      	ldr	r3, [pc, #100]	; (8012cd4 <_ZL12MX_TIM6_Initv+0x78>)
 8012c6e:	4a1a      	ldr	r2, [pc, #104]	; (8012cd8 <_ZL12MX_TIM6_Initv+0x7c>)
 8012c70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8012c72:	4b18      	ldr	r3, [pc, #96]	; (8012cd4 <_ZL12MX_TIM6_Initv+0x78>)
 8012c74:	226e      	movs	r2, #110	; 0x6e
 8012c76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012c78:	4b16      	ldr	r3, [pc, #88]	; (8012cd4 <_ZL12MX_TIM6_Initv+0x78>)
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8012c7e:	4b15      	ldr	r3, [pc, #84]	; (8012cd4 <_ZL12MX_TIM6_Initv+0x78>)
 8012c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012c86:	4b13      	ldr	r3, [pc, #76]	; (8012cd4 <_ZL12MX_TIM6_Initv+0x78>)
 8012c88:	2200      	movs	r2, #0
 8012c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8012c8c:	4811      	ldr	r0, [pc, #68]	; (8012cd4 <_ZL12MX_TIM6_Initv+0x78>)
 8012c8e:	f007 f9cf 	bl	801a030 <HAL_TIM_Base_Init>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	bf14      	ite	ne
 8012c98:	2301      	movne	r3, #1
 8012c9a:	2300      	moveq	r3, #0
 8012c9c:	b2db      	uxtb	r3, r3
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d001      	beq.n	8012ca6 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8012ca2:	f000 faa2 	bl	80131ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012caa:	2300      	movs	r3, #0
 8012cac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012cae:	1d3b      	adds	r3, r7, #4
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	4808      	ldr	r0, [pc, #32]	; (8012cd4 <_ZL12MX_TIM6_Initv+0x78>)
 8012cb4:	f009 f87c 	bl	801bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	bf14      	ite	ne
 8012cbe:	2301      	movne	r3, #1
 8012cc0:	2300      	moveq	r3, #0
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d001      	beq.n	8012ccc <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8012cc8:	f000 fa8f 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8012ccc:	bf00      	nop
 8012cce:	3710      	adds	r7, #16
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	20000bec 	.word	0x20000bec
 8012cd8:	40001000 	.word	0x40001000

08012cdc <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b098      	sub	sp, #96	; 0x60
 8012ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012ce2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	601a      	str	r2, [r3, #0]
 8012cea:	605a      	str	r2, [r3, #4]
 8012cec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012cee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	601a      	str	r2, [r3, #0]
 8012cf6:	605a      	str	r2, [r3, #4]
 8012cf8:	609a      	str	r2, [r3, #8]
 8012cfa:	60da      	str	r2, [r3, #12]
 8012cfc:	611a      	str	r2, [r3, #16]
 8012cfe:	615a      	str	r2, [r3, #20]
 8012d00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8012d02:	1d3b      	adds	r3, r7, #4
 8012d04:	2234      	movs	r2, #52	; 0x34
 8012d06:	2100      	movs	r1, #0
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f011 fa36 	bl	802417a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8012d0e:	4b45      	ldr	r3, [pc, #276]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d10:	4a45      	ldr	r2, [pc, #276]	; (8012e28 <_ZL12MX_TIM8_Initv+0x14c>)
 8012d12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 8012d14:	4b43      	ldr	r3, [pc, #268]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d16:	226e      	movs	r2, #110	; 0x6e
 8012d18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012d1a:	4b42      	ldr	r3, [pc, #264]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 8012d20:	4b40      	ldr	r3, [pc, #256]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8012d26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012d28:	4b3e      	ldr	r3, [pc, #248]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8012d2e:	4b3d      	ldr	r3, [pc, #244]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d30:	2200      	movs	r2, #0
 8012d32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012d34:	4b3b      	ldr	r3, [pc, #236]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d36:	2200      	movs	r2, #0
 8012d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8012d3a:	483a      	ldr	r0, [pc, #232]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d3c:	f007 faa8 	bl	801a290 <HAL_TIM_PWM_Init>
 8012d40:	4603      	mov	r3, r0
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	bf14      	ite	ne
 8012d46:	2301      	movne	r3, #1
 8012d48:	2300      	moveq	r3, #0
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d001      	beq.n	8012d54 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8012d50:	f000 fa4b 	bl	80131ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012d54:	2300      	movs	r3, #0
 8012d56:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8012d60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012d64:	4619      	mov	r1, r3
 8012d66:	482f      	ldr	r0, [pc, #188]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012d68:	f009 f822 	bl	801bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	bf14      	ite	ne
 8012d72:	2301      	movne	r3, #1
 8012d74:	2300      	moveq	r3, #0
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d001      	beq.n	8012d80 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 8012d7c:	f000 fa35 	bl	80131ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012d80:	2360      	movs	r3, #96	; 0x60
 8012d82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8012d84:	2300      	movs	r3, #0
 8012d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012d90:	2300      	movs	r3, #0
 8012d92:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8012d94:	2300      	movs	r3, #0
 8012d96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012d9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012da0:	2200      	movs	r2, #0
 8012da2:	4619      	mov	r1, r3
 8012da4:	481f      	ldr	r0, [pc, #124]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012da6:	f008 f86d 	bl	801ae84 <HAL_TIM_PWM_ConfigChannel>
 8012daa:	4603      	mov	r3, r0
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	bf14      	ite	ne
 8012db0:	2301      	movne	r3, #1
 8012db2:	2300      	moveq	r3, #0
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d001      	beq.n	8012dbe <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 8012dba:	f000 fa16 	bl	80131ea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8012dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012dd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8012de0:	2300      	movs	r3, #0
 8012de2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8012de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012de8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8012dea:	2300      	movs	r3, #0
 8012dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8012dee:	2300      	movs	r3, #0
 8012df0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8012df2:	2300      	movs	r3, #0
 8012df4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8012df6:	1d3b      	adds	r3, r7, #4
 8012df8:	4619      	mov	r1, r3
 8012dfa:	480a      	ldr	r0, [pc, #40]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012dfc:	f009 f860 	bl	801bec0 <HAL_TIMEx_ConfigBreakDeadTime>
 8012e00:	4603      	mov	r3, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	bf14      	ite	ne
 8012e06:	2301      	movne	r3, #1
 8012e08:	2300      	moveq	r3, #0
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d001      	beq.n	8012e14 <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 8012e10:	f000 f9eb 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8012e14:	4803      	ldr	r0, [pc, #12]	; (8012e24 <_ZL12MX_TIM8_Initv+0x148>)
 8012e16:	f000 fe45 	bl	8013aa4 <HAL_TIM_MspPostInit>

}
 8012e1a:	bf00      	nop
 8012e1c:	3760      	adds	r7, #96	; 0x60
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	20000c38 	.word	0x20000c38
 8012e28:	40013400 	.word	0x40013400

08012e2c <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b086      	sub	sp, #24
 8012e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e32:	463b      	mov	r3, r7
 8012e34:	2200      	movs	r2, #0
 8012e36:	601a      	str	r2, [r3, #0]
 8012e38:	605a      	str	r2, [r3, #4]
 8012e3a:	609a      	str	r2, [r3, #8]
 8012e3c:	60da      	str	r2, [r3, #12]
 8012e3e:	611a      	str	r2, [r3, #16]
 8012e40:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8012e42:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8012e46:	f7ff f8a5 	bl	8011f94 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8012e4a:	2002      	movs	r0, #2
 8012e4c:	f7ff f88a 	bl	8011f64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8012e50:	2001      	movs	r0, #1
 8012e52:	f7ff f887 	bl	8011f64 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8012e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012e5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8012e5c:	2303      	movs	r3, #3
 8012e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8012e60:	2300      	movs	r3, #0
 8012e62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012e64:	463b      	mov	r3, r7
 8012e66:	4619      	mov	r1, r3
 8012e68:	4809      	ldr	r0, [pc, #36]	; (8012e90 <_ZL13MX_UCPD1_Initv+0x64>)
 8012e6a:	f00b fb5c 	bl	801e526 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8012e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012e72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8012e74:	2303      	movs	r3, #3
 8012e76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e7c:	463b      	mov	r3, r7
 8012e7e:	4619      	mov	r1, r3
 8012e80:	4804      	ldr	r0, [pc, #16]	; (8012e94 <_ZL13MX_UCPD1_Initv+0x68>)
 8012e82:	f00b fb50 	bl	801e526 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8012e86:	bf00      	nop
 8012e88:	3718      	adds	r7, #24
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	42020400 	.word	0x42020400
 8012e94:	42020000 	.word	0x42020000

08012e98 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8012e9c:	4b13      	ldr	r3, [pc, #76]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012e9e:	4a14      	ldr	r2, [pc, #80]	; (8012ef0 <_ZL15MX_USB_PCD_Initv+0x58>)
 8012ea0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012ea2:	4b12      	ldr	r3, [pc, #72]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012ea4:	2208      	movs	r2, #8
 8012ea6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012ea8:	4b10      	ldr	r3, [pc, #64]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012eaa:	2202      	movs	r2, #2
 8012eac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012eae:	4b0f      	ldr	r3, [pc, #60]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012eb0:	2202      	movs	r2, #2
 8012eb2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012eb4:	4b0d      	ldr	r3, [pc, #52]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012eba:	4b0c      	ldr	r3, [pc, #48]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012ec0:	4b0a      	ldr	r3, [pc, #40]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012ec6:	4b09      	ldr	r3, [pc, #36]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012ec8:	2200      	movs	r2, #0
 8012eca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012ecc:	4807      	ldr	r0, [pc, #28]	; (8012eec <_ZL15MX_USB_PCD_Initv+0x54>)
 8012ece:	f004 f9b1 	bl	8017234 <HAL_PCD_Init>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	bf14      	ite	ne
 8012ed8:	2301      	movne	r3, #1
 8012eda:	2300      	moveq	r3, #0
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d001      	beq.n	8012ee6 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8012ee2:	f000 f982 	bl	80131ea <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8012ee6:	bf00      	nop
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	20000c84 	.word	0x20000c84
 8012ef0:	4000d400 	.word	0x4000d400

08012ef4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8012efa:	4b12      	ldr	r3, [pc, #72]	; (8012f44 <_ZL11MX_DMA_Initv+0x50>)
 8012efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012efe:	4a11      	ldr	r2, [pc, #68]	; (8012f44 <_ZL11MX_DMA_Initv+0x50>)
 8012f00:	f043 0304 	orr.w	r3, r3, #4
 8012f04:	6493      	str	r3, [r2, #72]	; 0x48
 8012f06:	4b0f      	ldr	r3, [pc, #60]	; (8012f44 <_ZL11MX_DMA_Initv+0x50>)
 8012f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f0a:	f003 0304 	and.w	r3, r3, #4
 8012f0e:	607b      	str	r3, [r7, #4]
 8012f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8012f12:	4b0c      	ldr	r3, [pc, #48]	; (8012f44 <_ZL11MX_DMA_Initv+0x50>)
 8012f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f16:	4a0b      	ldr	r2, [pc, #44]	; (8012f44 <_ZL11MX_DMA_Initv+0x50>)
 8012f18:	f043 0301 	orr.w	r3, r3, #1
 8012f1c:	6493      	str	r3, [r2, #72]	; 0x48
 8012f1e:	4b09      	ldr	r3, [pc, #36]	; (8012f44 <_ZL11MX_DMA_Initv+0x50>)
 8012f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f22:	f003 0301 	and.w	r3, r3, #1
 8012f26:	603b      	str	r3, [r7, #0]
 8012f28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	2105      	movs	r1, #5
 8012f2e:	201d      	movs	r0, #29
 8012f30:	f002 fe24 	bl	8015b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8012f34:	201d      	movs	r0, #29
 8012f36:	f002 fe3b 	bl	8015bb0 <HAL_NVIC_EnableIRQ>

}
 8012f3a:	bf00      	nop
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	40021000 	.word	0x40021000

08012f48 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b08c      	sub	sp, #48	; 0x30
 8012f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f4e:	f107 031c 	add.w	r3, r7, #28
 8012f52:	2200      	movs	r2, #0
 8012f54:	601a      	str	r2, [r3, #0]
 8012f56:	605a      	str	r2, [r3, #4]
 8012f58:	609a      	str	r2, [r3, #8]
 8012f5a:	60da      	str	r2, [r3, #12]
 8012f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012f5e:	4b8b      	ldr	r3, [pc, #556]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f62:	4a8a      	ldr	r2, [pc, #552]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f64:	f043 0310 	orr.w	r3, r3, #16
 8012f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012f6a:	4b88      	ldr	r3, [pc, #544]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f6e:	f003 0310 	and.w	r3, r3, #16
 8012f72:	61bb      	str	r3, [r7, #24]
 8012f74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012f76:	4b85      	ldr	r3, [pc, #532]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f7a:	4a84      	ldr	r2, [pc, #528]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f7c:	f043 0304 	orr.w	r3, r3, #4
 8012f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012f82:	4b82      	ldr	r3, [pc, #520]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f86:	f003 0304 	and.w	r3, r3, #4
 8012f8a:	617b      	str	r3, [r7, #20]
 8012f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012f8e:	4b7f      	ldr	r3, [pc, #508]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f92:	4a7e      	ldr	r2, [pc, #504]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f94:	f043 0320 	orr.w	r3, r3, #32
 8012f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012f9a:	4b7c      	ldr	r3, [pc, #496]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f9e:	f003 0320 	and.w	r3, r3, #32
 8012fa2:	613b      	str	r3, [r7, #16]
 8012fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012fa6:	4b79      	ldr	r3, [pc, #484]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012faa:	4a78      	ldr	r2, [pc, #480]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fac:	f043 0301 	orr.w	r3, r3, #1
 8012fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012fb2:	4b76      	ldr	r3, [pc, #472]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fb6:	f003 0301 	and.w	r3, r3, #1
 8012fba:	60fb      	str	r3, [r7, #12]
 8012fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012fbe:	4b73      	ldr	r3, [pc, #460]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fc2:	4a72      	ldr	r2, [pc, #456]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fc4:	f043 0302 	orr.w	r3, r3, #2
 8012fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012fca:	4b70      	ldr	r3, [pc, #448]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fce:	f003 0302 	and.w	r3, r3, #2
 8012fd2:	60bb      	str	r3, [r7, #8]
 8012fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012fd6:	4b6d      	ldr	r3, [pc, #436]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fda:	4a6c      	ldr	r2, [pc, #432]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fdc:	f043 0308 	orr.w	r3, r3, #8
 8012fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012fe2:	4b6a      	ldr	r3, [pc, #424]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fe6:	f003 0308 	and.w	r3, r3, #8
 8012fea:	607b      	str	r3, [r7, #4]
 8012fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012fee:	4b67      	ldr	r3, [pc, #412]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ff2:	4a66      	ldr	r2, [pc, #408]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012ffa:	4b64      	ldr	r3, [pc, #400]	; (801318c <_ZL12MX_GPIO_Initv+0x244>)
 8012ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013002:	603b      	str	r3, [r7, #0]
 8013004:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8013006:	f004 fa93 	bl	8017530 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 801300a:	2200      	movs	r2, #0
 801300c:	f24e 0108 	movw	r1, #57352	; 0xe008
 8013010:	485f      	ldr	r0, [pc, #380]	; (8013190 <_ZL12MX_GPIO_Initv+0x248>)
 8013012:	f003 fb09 	bl	8016628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8013016:	2200      	movs	r2, #0
 8013018:	21a4      	movs	r1, #164	; 0xa4
 801301a:	485e      	ldr	r0, [pc, #376]	; (8013194 <_ZL12MX_GPIO_Initv+0x24c>)
 801301c:	f003 fb04 	bl	8016628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8013020:	2200      	movs	r2, #0
 8013022:	f64f 7187 	movw	r1, #65415	; 0xff87
 8013026:	485c      	ldr	r0, [pc, #368]	; (8013198 <_ZL12MX_GPIO_Initv+0x250>)
 8013028:	f003 fafe 	bl	8016628 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 801302c:	2200      	movs	r2, #0
 801302e:	2180      	movs	r1, #128	; 0x80
 8013030:	485a      	ldr	r0, [pc, #360]	; (801319c <_ZL12MX_GPIO_Initv+0x254>)
 8013032:	f003 faf9 	bl	8016628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8013036:	2200      	movs	r2, #0
 8013038:	f44f 7100 	mov.w	r1, #512	; 0x200
 801303c:	4858      	ldr	r0, [pc, #352]	; (80131a0 <_ZL12MX_GPIO_Initv+0x258>)
 801303e:	f003 faf3 	bl	8016628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8013042:	2200      	movs	r2, #0
 8013044:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8013048:	4856      	ldr	r0, [pc, #344]	; (80131a4 <_ZL12MX_GPIO_Initv+0x25c>)
 801304a:	f003 faed 	bl	8016628 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 801304e:	2308      	movs	r3, #8
 8013050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013052:	2301      	movs	r3, #1
 8013054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013056:	2302      	movs	r3, #2
 8013058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801305a:	2303      	movs	r3, #3
 801305c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 801305e:	f107 031c 	add.w	r3, r7, #28
 8013062:	4619      	mov	r1, r3
 8013064:	484a      	ldr	r0, [pc, #296]	; (8013190 <_ZL12MX_GPIO_Initv+0x248>)
 8013066:	f003 f95f 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 801306a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 801306e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013070:	2300      	movs	r3, #0
 8013072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013074:	2300      	movs	r3, #0
 8013076:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013078:	f107 031c 	add.w	r3, r7, #28
 801307c:	4619      	mov	r1, r3
 801307e:	4844      	ldr	r0, [pc, #272]	; (8013190 <_ZL12MX_GPIO_Initv+0x248>)
 8013080:	f003 f952 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 8013084:	23a4      	movs	r3, #164	; 0xa4
 8013086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013088:	2301      	movs	r3, #1
 801308a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801308c:	2300      	movs	r3, #0
 801308e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013090:	2300      	movs	r3, #0
 8013092:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013094:	f107 031c 	add.w	r3, r7, #28
 8013098:	4619      	mov	r1, r3
 801309a:	483e      	ldr	r0, [pc, #248]	; (8013194 <_ZL12MX_GPIO_Initv+0x24c>)
 801309c:	f003 f944 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 80130a0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80130a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130a6:	2301      	movs	r3, #1
 80130a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130aa:	2300      	movs	r3, #0
 80130ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130ae:	2300      	movs	r3, #0
 80130b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80130b2:	f107 031c 	add.w	r3, r7, #28
 80130b6:	4619      	mov	r1, r3
 80130b8:	4835      	ldr	r0, [pc, #212]	; (8013190 <_ZL12MX_GPIO_Initv+0x248>)
 80130ba:	f003 f935 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 80130be:	f643 6301 	movw	r3, #15873	; 0x3e01
 80130c2:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80130c4:	2300      	movs	r3, #0
 80130c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130c8:	2300      	movs	r3, #0
 80130ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80130cc:	f107 031c 	add.w	r3, r7, #28
 80130d0:	4619      	mov	r1, r3
 80130d2:	4835      	ldr	r0, [pc, #212]	; (80131a8 <_ZL12MX_GPIO_Initv+0x260>)
 80130d4:	f003 f928 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80130d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80130dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80130de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80130e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80130e8:	f107 031c 	add.w	r3, r7, #28
 80130ec:	4619      	mov	r1, r3
 80130ee:	4829      	ldr	r0, [pc, #164]	; (8013194 <_ZL12MX_GPIO_Initv+0x24c>)
 80130f0:	f003 f91a 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 80130f4:	f64f 7387 	movw	r3, #65415	; 0xff87
 80130f8:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130fa:	2301      	movs	r3, #1
 80130fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130fe:	2300      	movs	r3, #0
 8013100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013102:	2300      	movs	r3, #0
 8013104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013106:	f107 031c 	add.w	r3, r7, #28
 801310a:	4619      	mov	r1, r3
 801310c:	4822      	ldr	r0, [pc, #136]	; (8013198 <_ZL12MX_GPIO_Initv+0x250>)
 801310e:	f003 f90b 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 8013112:	2370      	movs	r3, #112	; 0x70
 8013114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013116:	2300      	movs	r3, #0
 8013118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801311a:	2300      	movs	r3, #0
 801311c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801311e:	f107 031c 	add.w	r3, r7, #28
 8013122:	4619      	mov	r1, r3
 8013124:	481f      	ldr	r0, [pc, #124]	; (80131a4 <_ZL12MX_GPIO_Initv+0x25c>)
 8013126:	f003 f8ff 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 801312a:	2380      	movs	r3, #128	; 0x80
 801312c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801312e:	2301      	movs	r3, #1
 8013130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013132:	2300      	movs	r3, #0
 8013134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013136:	2300      	movs	r3, #0
 8013138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 801313a:	f107 031c 	add.w	r3, r7, #28
 801313e:	4619      	mov	r1, r3
 8013140:	4816      	ldr	r0, [pc, #88]	; (801319c <_ZL12MX_GPIO_Initv+0x254>)
 8013142:	f003 f8f1 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8013146:	f44f 7300 	mov.w	r3, #512	; 0x200
 801314a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801314c:	2301      	movs	r3, #1
 801314e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013150:	2300      	movs	r3, #0
 8013152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013154:	2300      	movs	r3, #0
 8013156:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8013158:	f107 031c 	add.w	r3, r7, #28
 801315c:	4619      	mov	r1, r3
 801315e:	4810      	ldr	r0, [pc, #64]	; (80131a0 <_ZL12MX_GPIO_Initv+0x258>)
 8013160:	f003 f8e2 	bl	8016328 <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8013164:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8013168:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801316a:	2301      	movs	r3, #1
 801316c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801316e:	2300      	movs	r3, #0
 8013170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013172:	2300      	movs	r3, #0
 8013174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013176:	f107 031c 	add.w	r3, r7, #28
 801317a:	4619      	mov	r1, r3
 801317c:	4809      	ldr	r0, [pc, #36]	; (80131a4 <_ZL12MX_GPIO_Initv+0x25c>)
 801317e:	f003 f8d3 	bl	8016328 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8013182:	bf00      	nop
 8013184:	3730      	adds	r7, #48	; 0x30
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	40021000 	.word	0x40021000
 8013190:	42021400 	.word	0x42021400
 8013194:	42020400 	.word	0x42020400
 8013198:	42020c00 	.word	0x42020c00
 801319c:	42020800 	.word	0x42020800
 80131a0:	42020000 	.word	0x42020000
 80131a4:	42021800 	.word	0x42021800
 80131a8:	42021000 	.word	0x42021000

080131ac <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b082      	sub	sp, #8
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80131b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80131b8:	4803      	ldr	r0, [pc, #12]	; (80131c8 <_Z16StartDefaultTaskPv+0x1c>)
 80131ba:	f003 fa4d 	bl	8016658 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 80131be:	2064      	movs	r0, #100	; 0x64
 80131c0:	f00c fa68 	bl	801f694 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80131c4:	e7f6      	b.n	80131b4 <_Z16StartDefaultTaskPv+0x8>
 80131c6:	bf00      	nop
 80131c8:	42020000 	.word	0x42020000

080131cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80131dc:	d101      	bne.n	80131e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80131de:	f000 ffb3 	bl	8014148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80131e2:	bf00      	nop
 80131e4:	3708      	adds	r7, #8
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}

080131ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80131ea:	b480      	push	{r7}
 80131ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80131ee:	b672      	cpsid	i
}
 80131f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80131f2:	e7fe      	b.n	80131f2 <Error_Handler+0x8>

080131f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80131fa:	4b11      	ldr	r3, [pc, #68]	; (8013240 <HAL_MspInit+0x4c>)
 80131fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131fe:	4a10      	ldr	r2, [pc, #64]	; (8013240 <HAL_MspInit+0x4c>)
 8013200:	f043 0301 	orr.w	r3, r3, #1
 8013204:	6613      	str	r3, [r2, #96]	; 0x60
 8013206:	4b0e      	ldr	r3, [pc, #56]	; (8013240 <HAL_MspInit+0x4c>)
 8013208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801320a:	f003 0301 	and.w	r3, r3, #1
 801320e:	607b      	str	r3, [r7, #4]
 8013210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013212:	4b0b      	ldr	r3, [pc, #44]	; (8013240 <HAL_MspInit+0x4c>)
 8013214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013216:	4a0a      	ldr	r2, [pc, #40]	; (8013240 <HAL_MspInit+0x4c>)
 8013218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801321c:	6593      	str	r3, [r2, #88]	; 0x58
 801321e:	4b08      	ldr	r3, [pc, #32]	; (8013240 <HAL_MspInit+0x4c>)
 8013220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013226:	603b      	str	r3, [r7, #0]
 8013228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 801322a:	2200      	movs	r2, #0
 801322c:	2107      	movs	r1, #7
 801322e:	f06f 0001 	mvn.w	r0, #1
 8013232:	f002 fca3 	bl	8015b7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013236:	bf00      	nop
 8013238:	3708      	adds	r7, #8
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	40021000 	.word	0x40021000

08013244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b08c      	sub	sp, #48	; 0x30
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801324c:	f107 031c 	add.w	r3, r7, #28
 8013250:	2200      	movs	r2, #0
 8013252:	601a      	str	r2, [r3, #0]
 8013254:	605a      	str	r2, [r3, #4]
 8013256:	609a      	str	r2, [r3, #8]
 8013258:	60da      	str	r2, [r3, #12]
 801325a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a4b      	ldr	r2, [pc, #300]	; (8013390 <HAL_ADC_MspInit+0x14c>)
 8013262:	4293      	cmp	r3, r2
 8013264:	f040 8090 	bne.w	8013388 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8013268:	4b4a      	ldr	r3, [pc, #296]	; (8013394 <HAL_ADC_MspInit+0x150>)
 801326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801326c:	4a49      	ldr	r2, [pc, #292]	; (8013394 <HAL_ADC_MspInit+0x150>)
 801326e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013274:	4b47      	ldr	r3, [pc, #284]	; (8013394 <HAL_ADC_MspInit+0x150>)
 8013276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801327c:	61bb      	str	r3, [r7, #24]
 801327e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013280:	4b44      	ldr	r3, [pc, #272]	; (8013394 <HAL_ADC_MspInit+0x150>)
 8013282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013284:	4a43      	ldr	r2, [pc, #268]	; (8013394 <HAL_ADC_MspInit+0x150>)
 8013286:	f043 0304 	orr.w	r3, r3, #4
 801328a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801328c:	4b41      	ldr	r3, [pc, #260]	; (8013394 <HAL_ADC_MspInit+0x150>)
 801328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013290:	f003 0304 	and.w	r3, r3, #4
 8013294:	617b      	str	r3, [r7, #20]
 8013296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013298:	4b3e      	ldr	r3, [pc, #248]	; (8013394 <HAL_ADC_MspInit+0x150>)
 801329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801329c:	4a3d      	ldr	r2, [pc, #244]	; (8013394 <HAL_ADC_MspInit+0x150>)
 801329e:	f043 0301 	orr.w	r3, r3, #1
 80132a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80132a4:	4b3b      	ldr	r3, [pc, #236]	; (8013394 <HAL_ADC_MspInit+0x150>)
 80132a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132a8:	f003 0301 	and.w	r3, r3, #1
 80132ac:	613b      	str	r3, [r7, #16]
 80132ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80132b0:	4b38      	ldr	r3, [pc, #224]	; (8013394 <HAL_ADC_MspInit+0x150>)
 80132b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132b4:	4a37      	ldr	r2, [pc, #220]	; (8013394 <HAL_ADC_MspInit+0x150>)
 80132b6:	f043 0302 	orr.w	r3, r3, #2
 80132ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80132bc:	4b35      	ldr	r3, [pc, #212]	; (8013394 <HAL_ADC_MspInit+0x150>)
 80132be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132c0:	f003 0302 	and.w	r3, r3, #2
 80132c4:	60fb      	str	r3, [r7, #12]
 80132c6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 80132c8:	230f      	movs	r3, #15
 80132ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80132cc:	2303      	movs	r3, #3
 80132ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132d0:	2300      	movs	r3, #0
 80132d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80132d4:	f107 031c 	add.w	r3, r7, #28
 80132d8:	4619      	mov	r1, r3
 80132da:	482f      	ldr	r0, [pc, #188]	; (8013398 <HAL_ADC_MspInit+0x154>)
 80132dc:	f003 f824 	bl	8016328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 80132e0:	239c      	movs	r3, #156	; 0x9c
 80132e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80132e4:	2303      	movs	r3, #3
 80132e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132e8:	2300      	movs	r3, #0
 80132ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80132ec:	f107 031c 	add.w	r3, r7, #28
 80132f0:	4619      	mov	r1, r3
 80132f2:	482a      	ldr	r0, [pc, #168]	; (801339c <HAL_ADC_MspInit+0x158>)
 80132f4:	f003 f818 	bl	8016328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 80132f8:	2303      	movs	r3, #3
 80132fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80132fc:	2303      	movs	r3, #3
 80132fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013300:	2300      	movs	r3, #0
 8013302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013304:	f107 031c 	add.w	r3, r7, #28
 8013308:	4619      	mov	r1, r3
 801330a:	4825      	ldr	r0, [pc, #148]	; (80133a0 <HAL_ADC_MspInit+0x15c>)
 801330c:	f003 f80c 	bl	8016328 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8013310:	4b24      	ldr	r3, [pc, #144]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013312:	4a25      	ldr	r2, [pc, #148]	; (80133a8 <HAL_ADC_MspInit+0x164>)
 8013314:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8013316:	4b23      	ldr	r3, [pc, #140]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013318:	2205      	movs	r2, #5
 801331a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801331c:	4b21      	ldr	r3, [pc, #132]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 801331e:	2200      	movs	r2, #0
 8013320:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8013322:	4b20      	ldr	r3, [pc, #128]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013324:	2200      	movs	r2, #0
 8013326:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8013328:	4b1e      	ldr	r3, [pc, #120]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 801332a:	2280      	movs	r2, #128	; 0x80
 801332c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801332e:	4b1d      	ldr	r3, [pc, #116]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013334:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8013336:	4b1b      	ldr	r3, [pc, #108]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801333c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 801333e:	4b19      	ldr	r3, [pc, #100]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013340:	2200      	movs	r2, #0
 8013342:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8013344:	4b17      	ldr	r3, [pc, #92]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013346:	2200      	movs	r2, #0
 8013348:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 801334a:	4816      	ldr	r0, [pc, #88]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 801334c:	f002 fc3e 	bl	8015bcc <HAL_DMA_Init>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d001      	beq.n	801335a <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8013356:	f7ff ff48 	bl	80131ea <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 801335a:	2110      	movs	r1, #16
 801335c:	4811      	ldr	r0, [pc, #68]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 801335e:	f002 ff13 	bl	8016188 <HAL_DMA_ConfigChannelAttributes>
 8013362:	4603      	mov	r3, r0
 8013364:	2b00      	cmp	r3, #0
 8013366:	d001      	beq.n	801336c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8013368:	f7ff ff3f 	bl	80131ea <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4a0d      	ldr	r2, [pc, #52]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013370:	651a      	str	r2, [r3, #80]	; 0x50
 8013372:	4a0c      	ldr	r2, [pc, #48]	; (80133a4 <HAL_ADC_MspInit+0x160>)
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8013378:	2200      	movs	r2, #0
 801337a:	2105      	movs	r1, #5
 801337c:	2025      	movs	r0, #37	; 0x25
 801337e:	f002 fbfd 	bl	8015b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8013382:	2025      	movs	r0, #37	; 0x25
 8013384:	f002 fc14 	bl	8015bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8013388:	bf00      	nop
 801338a:	3730      	adds	r7, #48	; 0x30
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	42028000 	.word	0x42028000
 8013394:	40021000 	.word	0x40021000
 8013398:	42020800 	.word	0x42020800
 801339c:	42020000 	.word	0x42020000
 80133a0:	42020400 	.word	0x42020400
 80133a4:	2000073c 	.word	0x2000073c
 80133a8:	40020008 	.word	0x40020008

080133ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b0ae      	sub	sp, #184	; 0xb8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80133b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80133b8:	2200      	movs	r2, #0
 80133ba:	601a      	str	r2, [r3, #0]
 80133bc:	605a      	str	r2, [r3, #4]
 80133be:	609a      	str	r2, [r3, #8]
 80133c0:	60da      	str	r2, [r3, #12]
 80133c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80133c4:	f107 0310 	add.w	r3, r7, #16
 80133c8:	2294      	movs	r2, #148	; 0x94
 80133ca:	2100      	movs	r1, #0
 80133cc:	4618      	mov	r0, r3
 80133ce:	f010 fed4 	bl	802417a <memset>
  if(hi2c->Instance==I2C1)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	4a21      	ldr	r2, [pc, #132]	; (801345c <HAL_I2C_MspInit+0xb0>)
 80133d8:	4293      	cmp	r3, r2
 80133da:	d13b      	bne.n	8013454 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80133dc:	2340      	movs	r3, #64	; 0x40
 80133de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80133e0:	2300      	movs	r3, #0
 80133e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80133e4:	f107 0310 	add.w	r3, r7, #16
 80133e8:	4618      	mov	r0, r3
 80133ea:	f005 f8c1 	bl	8018570 <HAL_RCCEx_PeriphCLKConfig>
 80133ee:	4603      	mov	r3, r0
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d001      	beq.n	80133f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80133f4:	f7ff fef9 	bl	80131ea <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80133f8:	4b19      	ldr	r3, [pc, #100]	; (8013460 <HAL_I2C_MspInit+0xb4>)
 80133fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133fc:	4a18      	ldr	r2, [pc, #96]	; (8013460 <HAL_I2C_MspInit+0xb4>)
 80133fe:	f043 0302 	orr.w	r3, r3, #2
 8013402:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013404:	4b16      	ldr	r3, [pc, #88]	; (8013460 <HAL_I2C_MspInit+0xb4>)
 8013406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013408:	f003 0302 	and.w	r3, r3, #2
 801340c:	60fb      	str	r3, [r7, #12]
 801340e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8013410:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013414:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013418:	2312      	movs	r3, #18
 801341a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801341e:	2300      	movs	r3, #0
 8013420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013424:	2300      	movs	r3, #0
 8013426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801342a:	2304      	movs	r3, #4
 801342c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013430:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013434:	4619      	mov	r1, r3
 8013436:	480b      	ldr	r0, [pc, #44]	; (8013464 <HAL_I2C_MspInit+0xb8>)
 8013438:	f002 ff76 	bl	8016328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801343c:	4b08      	ldr	r3, [pc, #32]	; (8013460 <HAL_I2C_MspInit+0xb4>)
 801343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013440:	4a07      	ldr	r2, [pc, #28]	; (8013460 <HAL_I2C_MspInit+0xb4>)
 8013442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013446:	6593      	str	r3, [r2, #88]	; 0x58
 8013448:	4b05      	ldr	r3, [pc, #20]	; (8013460 <HAL_I2C_MspInit+0xb4>)
 801344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801344c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013450:	60bb      	str	r3, [r7, #8]
 8013452:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8013454:	bf00      	nop
 8013456:	37b8      	adds	r7, #184	; 0xb8
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	40005400 	.word	0x40005400
 8013460:	40021000 	.word	0x40021000
 8013464:	42020400 	.word	0x42020400

08013468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b0b2      	sub	sp, #200	; 0xc8
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013470:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013474:	2200      	movs	r2, #0
 8013476:	601a      	str	r2, [r3, #0]
 8013478:	605a      	str	r2, [r3, #4]
 801347a:	609a      	str	r2, [r3, #8]
 801347c:	60da      	str	r2, [r3, #12]
 801347e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013480:	f107 0320 	add.w	r3, r7, #32
 8013484:	2294      	movs	r2, #148	; 0x94
 8013486:	2100      	movs	r1, #0
 8013488:	4618      	mov	r0, r3
 801348a:	f010 fe76 	bl	802417a <memset>
  if(huart->Instance==LPUART1)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	4a67      	ldr	r2, [pc, #412]	; (8013630 <HAL_UART_MspInit+0x1c8>)
 8013494:	4293      	cmp	r3, r2
 8013496:	d13e      	bne.n	8013516 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8013498:	2320      	movs	r3, #32
 801349a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 801349c:	2300      	movs	r3, #0
 801349e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80134a0:	f107 0320 	add.w	r3, r7, #32
 80134a4:	4618      	mov	r0, r3
 80134a6:	f005 f863 	bl	8018570 <HAL_RCCEx_PeriphCLKConfig>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d001      	beq.n	80134b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80134b0:	f7ff fe9b 	bl	80131ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80134b4:	4b5f      	ldr	r3, [pc, #380]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80134b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134b8:	4a5e      	ldr	r2, [pc, #376]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80134ba:	f043 0301 	orr.w	r3, r3, #1
 80134be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80134c0:	4b5c      	ldr	r3, [pc, #368]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80134c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134c4:	f003 0301 	and.w	r3, r3, #1
 80134c8:	61fb      	str	r3, [r7, #28]
 80134ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80134cc:	4b59      	ldr	r3, [pc, #356]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80134ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134d0:	4a58      	ldr	r2, [pc, #352]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80134d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80134d8:	4b56      	ldr	r3, [pc, #344]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80134da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134e0:	61bb      	str	r3, [r7, #24]
 80134e2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80134e4:	f004 f824 	bl	8017530 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 80134e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80134ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80134f0:	2302      	movs	r3, #2
 80134f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134f6:	2300      	movs	r3, #0
 80134f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80134fc:	2300      	movs	r3, #0
 80134fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8013502:	2308      	movs	r3, #8
 8013504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013508:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801350c:	4619      	mov	r1, r3
 801350e:	484a      	ldr	r0, [pc, #296]	; (8013638 <HAL_UART_MspInit+0x1d0>)
 8013510:	f002 ff0a 	bl	8016328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8013514:	e088      	b.n	8013628 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4a48      	ldr	r2, [pc, #288]	; (801363c <HAL_UART_MspInit+0x1d4>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d143      	bne.n	80135a8 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8013520:	2308      	movs	r3, #8
 8013522:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8013524:	2300      	movs	r3, #0
 8013526:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013528:	f107 0320 	add.w	r3, r7, #32
 801352c:	4618      	mov	r0, r3
 801352e:	f005 f81f 	bl	8018570 <HAL_RCCEx_PeriphCLKConfig>
 8013532:	4603      	mov	r3, r0
 8013534:	2b00      	cmp	r3, #0
 8013536:	d001      	beq.n	801353c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8013538:	f7ff fe57 	bl	80131ea <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 801353c:	4b3d      	ldr	r3, [pc, #244]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 801353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013540:	4a3c      	ldr	r2, [pc, #240]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 8013542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013546:	6593      	str	r3, [r2, #88]	; 0x58
 8013548:	4b3a      	ldr	r3, [pc, #232]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 801354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801354c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013550:	617b      	str	r3, [r7, #20]
 8013552:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013554:	4b37      	ldr	r3, [pc, #220]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 8013556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013558:	4a36      	ldr	r2, [pc, #216]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 801355a:	f043 0301 	orr.w	r3, r3, #1
 801355e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013560:	4b34      	ldr	r3, [pc, #208]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 8013562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013564:	f003 0301 	and.w	r3, r3, #1
 8013568:	613b      	str	r3, [r7, #16]
 801356a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801356c:	2303      	movs	r3, #3
 801356e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013572:	2302      	movs	r3, #2
 8013574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013578:	2300      	movs	r3, #0
 801357a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801357e:	2300      	movs	r3, #0
 8013580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8013584:	2308      	movs	r3, #8
 8013586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801358a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801358e:	4619      	mov	r1, r3
 8013590:	482b      	ldr	r0, [pc, #172]	; (8013640 <HAL_UART_MspInit+0x1d8>)
 8013592:	f002 fec9 	bl	8016328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8013596:	2200      	movs	r2, #0
 8013598:	2105      	movs	r1, #5
 801359a:	2040      	movs	r0, #64	; 0x40
 801359c:	f002 faee 	bl	8015b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80135a0:	2040      	movs	r0, #64	; 0x40
 80135a2:	f002 fb05 	bl	8015bb0 <HAL_NVIC_EnableIRQ>
}
 80135a6:	e03f      	b.n	8013628 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4a25      	ldr	r2, [pc, #148]	; (8013644 <HAL_UART_MspInit+0x1dc>)
 80135ae:	4293      	cmp	r3, r2
 80135b0:	d13a      	bne.n	8013628 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80135b2:	2302      	movs	r3, #2
 80135b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80135b6:	2300      	movs	r3, #0
 80135b8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80135ba:	f107 0320 	add.w	r3, r7, #32
 80135be:	4618      	mov	r0, r3
 80135c0:	f004 ffd6 	bl	8018570 <HAL_RCCEx_PeriphCLKConfig>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d001      	beq.n	80135ce <HAL_UART_MspInit+0x166>
      Error_Handler();
 80135ca:	f7ff fe0e 	bl	80131ea <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80135ce:	4b19      	ldr	r3, [pc, #100]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80135d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135d2:	4a18      	ldr	r2, [pc, #96]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80135d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80135d8:	6593      	str	r3, [r2, #88]	; 0x58
 80135da:	4b16      	ldr	r3, [pc, #88]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80135dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80135e2:	60fb      	str	r3, [r7, #12]
 80135e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80135e6:	4b13      	ldr	r3, [pc, #76]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80135e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135ea:	4a12      	ldr	r2, [pc, #72]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80135ec:	f043 0308 	orr.w	r3, r3, #8
 80135f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80135f2:	4b10      	ldr	r3, [pc, #64]	; (8013634 <HAL_UART_MspInit+0x1cc>)
 80135f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135f6:	f003 0308 	and.w	r3, r3, #8
 80135fa:	60bb      	str	r3, [r7, #8]
 80135fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 80135fe:	2360      	movs	r3, #96	; 0x60
 8013600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013604:	2302      	movs	r3, #2
 8013606:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801360a:	2300      	movs	r3, #0
 801360c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013610:	2300      	movs	r3, #0
 8013612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8013616:	2307      	movs	r3, #7
 8013618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801361c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013620:	4619      	mov	r1, r3
 8013622:	4809      	ldr	r0, [pc, #36]	; (8013648 <HAL_UART_MspInit+0x1e0>)
 8013624:	f002 fe80 	bl	8016328 <HAL_GPIO_Init>
}
 8013628:	bf00      	nop
 801362a:	37c8      	adds	r7, #200	; 0xc8
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}
 8013630:	40008000 	.word	0x40008000
 8013634:	40021000 	.word	0x40021000
 8013638:	42021800 	.word	0x42021800
 801363c:	40004c00 	.word	0x40004c00
 8013640:	42020000 	.word	0x42020000
 8013644:	40004400 	.word	0x40004400
 8013648:	42020c00 	.word	0x42020c00

0801364c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b0a8      	sub	sp, #160	; 0xa0
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013654:	f107 030c 	add.w	r3, r7, #12
 8013658:	2294      	movs	r2, #148	; 0x94
 801365a:	2100      	movs	r1, #0
 801365c:	4618      	mov	r0, r3
 801365e:	f010 fd8c 	bl	802417a <memset>
  if(hrtc->Instance==RTC)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	4a16      	ldr	r2, [pc, #88]	; (80136c0 <HAL_RTC_MspInit+0x74>)
 8013668:	4293      	cmp	r3, r2
 801366a:	d124      	bne.n	80136b6 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 801366c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013670:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8013672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801367a:	f107 030c 	add.w	r3, r7, #12
 801367e:	4618      	mov	r0, r3
 8013680:	f004 ff76 	bl	8018570 <HAL_RCCEx_PeriphCLKConfig>
 8013684:	4603      	mov	r3, r0
 8013686:	2b00      	cmp	r3, #0
 8013688:	d001      	beq.n	801368e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 801368a:	f7ff fdae 	bl	80131ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801368e:	4b0d      	ldr	r3, [pc, #52]	; (80136c4 <HAL_RTC_MspInit+0x78>)
 8013690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013694:	4a0b      	ldr	r2, [pc, #44]	; (80136c4 <HAL_RTC_MspInit+0x78>)
 8013696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801369a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 801369e:	4b09      	ldr	r3, [pc, #36]	; (80136c4 <HAL_RTC_MspInit+0x78>)
 80136a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136a2:	4a08      	ldr	r2, [pc, #32]	; (80136c4 <HAL_RTC_MspInit+0x78>)
 80136a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80136a8:	6593      	str	r3, [r2, #88]	; 0x58
 80136aa:	4b06      	ldr	r3, [pc, #24]	; (80136c4 <HAL_RTC_MspInit+0x78>)
 80136ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80136b2:	60bb      	str	r3, [r7, #8]
 80136b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80136b6:	bf00      	nop
 80136b8:	37a0      	adds	r7, #160	; 0xa0
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}
 80136be:	bf00      	nop
 80136c0:	40002800 	.word	0x40002800
 80136c4:	40021000 	.word	0x40021000

080136c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b090      	sub	sp, #64	; 0x40
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80136d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]
 80136d8:	605a      	str	r2, [r3, #4]
 80136da:	609a      	str	r2, [r3, #8]
 80136dc:	60da      	str	r2, [r3, #12]
 80136de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	4a62      	ldr	r2, [pc, #392]	; (8013870 <HAL_SPI_MspInit+0x1a8>)
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d145      	bne.n	8013776 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80136ea:	4b62      	ldr	r3, [pc, #392]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 80136ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80136ee:	4a61      	ldr	r2, [pc, #388]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 80136f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80136f4:	6613      	str	r3, [r2, #96]	; 0x60
 80136f6:	4b5f      	ldr	r3, [pc, #380]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 80136f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80136fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80136fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8013700:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013702:	4b5c      	ldr	r3, [pc, #368]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013706:	4a5b      	ldr	r2, [pc, #364]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013708:	f043 0301 	orr.w	r3, r3, #1
 801370c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801370e:	4b59      	ldr	r3, [pc, #356]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013712:	f003 0301 	and.w	r3, r3, #1
 8013716:	627b      	str	r3, [r7, #36]	; 0x24
 8013718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801371a:	4b56      	ldr	r3, [pc, #344]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 801371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801371e:	4a55      	ldr	r2, [pc, #340]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013720:	f043 0310 	orr.w	r3, r3, #16
 8013724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013726:	4b53      	ldr	r3, [pc, #332]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801372a:	f003 0310 	and.w	r3, r3, #16
 801372e:	623b      	str	r3, [r7, #32]
 8013730:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8013732:	2360      	movs	r3, #96	; 0x60
 8013734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013736:	2302      	movs	r3, #2
 8013738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801373a:	2300      	movs	r3, #0
 801373c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801373e:	2300      	movs	r3, #0
 8013740:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013742:	2305      	movs	r3, #5
 8013744:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801374a:	4619      	mov	r1, r3
 801374c:	484a      	ldr	r0, [pc, #296]	; (8013878 <HAL_SPI_MspInit+0x1b0>)
 801374e:	f002 fdeb 	bl	8016328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8013752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013758:	2302      	movs	r3, #2
 801375a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801375c:	2300      	movs	r3, #0
 801375e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013760:	2300      	movs	r3, #0
 8013762:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013764:	2305      	movs	r3, #5
 8013766:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8013768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801376c:	4619      	mov	r1, r3
 801376e:	4843      	ldr	r0, [pc, #268]	; (801387c <HAL_SPI_MspInit+0x1b4>)
 8013770:	f002 fdda 	bl	8016328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8013774:	e078      	b.n	8013868 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4a41      	ldr	r2, [pc, #260]	; (8013880 <HAL_SPI_MspInit+0x1b8>)
 801377c:	4293      	cmp	r3, r2
 801377e:	d145      	bne.n	801380c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8013780:	4b3c      	ldr	r3, [pc, #240]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013784:	4a3b      	ldr	r2, [pc, #236]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801378a:	6593      	str	r3, [r2, #88]	; 0x58
 801378c:	4b39      	ldr	r3, [pc, #228]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 801378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013794:	61fb      	str	r3, [r7, #28]
 8013796:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013798:	4b36      	ldr	r3, [pc, #216]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 801379a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801379c:	4a35      	ldr	r2, [pc, #212]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 801379e:	f043 0302 	orr.w	r3, r3, #2
 80137a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80137a4:	4b33      	ldr	r3, [pc, #204]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 80137a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137a8:	f003 0302 	and.w	r3, r3, #2
 80137ac:	61bb      	str	r3, [r7, #24]
 80137ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80137b0:	4b30      	ldr	r3, [pc, #192]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 80137b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137b4:	4a2f      	ldr	r2, [pc, #188]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 80137b6:	f043 0308 	orr.w	r3, r3, #8
 80137ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80137bc:	4b2d      	ldr	r3, [pc, #180]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 80137be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137c0:	f003 0308 	and.w	r3, r3, #8
 80137c4:	617b      	str	r3, [r7, #20]
 80137c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80137c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80137ce:	2302      	movs	r3, #2
 80137d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137d2:	2300      	movs	r3, #0
 80137d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80137d6:	2300      	movs	r3, #0
 80137d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80137da:	2305      	movs	r3, #5
 80137dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80137de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137e2:	4619      	mov	r1, r3
 80137e4:	4827      	ldr	r0, [pc, #156]	; (8013884 <HAL_SPI_MspInit+0x1bc>)
 80137e6:	f002 fd9f 	bl	8016328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80137ea:	2318      	movs	r3, #24
 80137ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80137ee:	2302      	movs	r3, #2
 80137f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137f2:	2300      	movs	r3, #0
 80137f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80137f6:	2300      	movs	r3, #0
 80137f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80137fa:	2305      	movs	r3, #5
 80137fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80137fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013802:	4619      	mov	r1, r3
 8013804:	4820      	ldr	r0, [pc, #128]	; (8013888 <HAL_SPI_MspInit+0x1c0>)
 8013806:	f002 fd8f 	bl	8016328 <HAL_GPIO_Init>
}
 801380a:	e02d      	b.n	8013868 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	4a1e      	ldr	r2, [pc, #120]	; (801388c <HAL_SPI_MspInit+0x1c4>)
 8013812:	4293      	cmp	r3, r2
 8013814:	d128      	bne.n	8013868 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8013816:	4b17      	ldr	r3, [pc, #92]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801381a:	4a16      	ldr	r2, [pc, #88]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 801381c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013820:	6593      	str	r3, [r2, #88]	; 0x58
 8013822:	4b14      	ldr	r3, [pc, #80]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801382a:	613b      	str	r3, [r7, #16]
 801382c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801382e:	4b11      	ldr	r3, [pc, #68]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013832:	4a10      	ldr	r2, [pc, #64]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 8013834:	f043 0304 	orr.w	r3, r3, #4
 8013838:	64d3      	str	r3, [r2, #76]	; 0x4c
 801383a:	4b0e      	ldr	r3, [pc, #56]	; (8013874 <HAL_SPI_MspInit+0x1ac>)
 801383c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801383e:	f003 0304 	and.w	r3, r3, #4
 8013842:	60fb      	str	r3, [r7, #12]
 8013844:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8013846:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801384a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801384c:	2302      	movs	r3, #2
 801384e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013850:	2300      	movs	r3, #0
 8013852:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013854:	2300      	movs	r3, #0
 8013856:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8013858:	2306      	movs	r3, #6
 801385a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801385c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013860:	4619      	mov	r1, r3
 8013862:	480b      	ldr	r0, [pc, #44]	; (8013890 <HAL_SPI_MspInit+0x1c8>)
 8013864:	f002 fd60 	bl	8016328 <HAL_GPIO_Init>
}
 8013868:	bf00      	nop
 801386a:	3740      	adds	r7, #64	; 0x40
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	40013000 	.word	0x40013000
 8013874:	40021000 	.word	0x40021000
 8013878:	42020000 	.word	0x42020000
 801387c:	42021000 	.word	0x42021000
 8013880:	40003800 	.word	0x40003800
 8013884:	42020400 	.word	0x42020400
 8013888:	42020c00 	.word	0x42020c00
 801388c:	40003c00 	.word	0x40003c00
 8013890:	42020800 	.word	0x42020800

08013894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b08c      	sub	sp, #48	; 0x30
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801389c:	f107 031c 	add.w	r3, r7, #28
 80138a0:	2200      	movs	r2, #0
 80138a2:	601a      	str	r2, [r3, #0]
 80138a4:	605a      	str	r2, [r3, #4]
 80138a6:	609a      	str	r2, [r3, #8]
 80138a8:	60da      	str	r2, [r3, #12]
 80138aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a40      	ldr	r2, [pc, #256]	; (80139b4 <HAL_TIM_Base_MspInit+0x120>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d14e      	bne.n	8013954 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80138b6:	4b40      	ldr	r3, [pc, #256]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138ba:	4a3f      	ldr	r2, [pc, #252]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80138c0:	6613      	str	r3, [r2, #96]	; 0x60
 80138c2:	4b3d      	ldr	r3, [pc, #244]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80138ca:	61bb      	str	r3, [r7, #24]
 80138cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80138ce:	4b3a      	ldr	r3, [pc, #232]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138d2:	4a39      	ldr	r2, [pc, #228]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138d4:	f043 0310 	orr.w	r3, r3, #16
 80138d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80138da:	4b37      	ldr	r3, [pc, #220]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138de:	f003 0310 	and.w	r3, r3, #16
 80138e2:	617b      	str	r3, [r7, #20]
 80138e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80138e6:	4b34      	ldr	r3, [pc, #208]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138ea:	4a33      	ldr	r2, [pc, #204]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138ec:	f043 0301 	orr.w	r3, r3, #1
 80138f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80138f2:	4b31      	ldr	r3, [pc, #196]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 80138f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138f6:	f003 0301 	and.w	r3, r3, #1
 80138fa:	613b      	str	r3, [r7, #16]
 80138fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 80138fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013904:	2302      	movs	r3, #2
 8013906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013908:	2300      	movs	r3, #0
 801390a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801390c:	2300      	movs	r3, #0
 801390e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8013910:	2301      	movs	r3, #1
 8013912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8013914:	f107 031c 	add.w	r3, r7, #28
 8013918:	4619      	mov	r1, r3
 801391a:	4828      	ldr	r0, [pc, #160]	; (80139bc <HAL_TIM_Base_MspInit+0x128>)
 801391c:	f002 fd04 	bl	8016328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 8013920:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8013924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013926:	2302      	movs	r3, #2
 8013928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801392a:	2300      	movs	r3, #0
 801392c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801392e:	2300      	movs	r3, #0
 8013930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8013932:	2301      	movs	r3, #1
 8013934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013936:	f107 031c 	add.w	r3, r7, #28
 801393a:	4619      	mov	r1, r3
 801393c:	4820      	ldr	r0, [pc, #128]	; (80139c0 <HAL_TIM_Base_MspInit+0x12c>)
 801393e:	f002 fcf3 	bl	8016328 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8013942:	2200      	movs	r2, #0
 8013944:	2105      	movs	r1, #5
 8013946:	202c      	movs	r0, #44	; 0x2c
 8013948:	f002 f918 	bl	8015b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 801394c:	202c      	movs	r0, #44	; 0x2c
 801394e:	f002 f92f 	bl	8015bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8013952:	e02a      	b.n	80139aa <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	4a1a      	ldr	r2, [pc, #104]	; (80139c4 <HAL_TIM_Base_MspInit+0x130>)
 801395a:	4293      	cmp	r3, r2
 801395c:	d10c      	bne.n	8013978 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801395e:	4b16      	ldr	r3, [pc, #88]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 8013960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013962:	4a15      	ldr	r2, [pc, #84]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 8013964:	f043 0308 	orr.w	r3, r3, #8
 8013968:	6593      	str	r3, [r2, #88]	; 0x58
 801396a:	4b13      	ldr	r3, [pc, #76]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 801396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801396e:	f003 0308 	and.w	r3, r3, #8
 8013972:	60fb      	str	r3, [r7, #12]
 8013974:	68fb      	ldr	r3, [r7, #12]
}
 8013976:	e018      	b.n	80139aa <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	4a12      	ldr	r2, [pc, #72]	; (80139c8 <HAL_TIM_Base_MspInit+0x134>)
 801397e:	4293      	cmp	r3, r2
 8013980:	d113      	bne.n	80139aa <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013982:	4b0d      	ldr	r3, [pc, #52]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 8013984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013986:	4a0c      	ldr	r2, [pc, #48]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 8013988:	f043 0310 	orr.w	r3, r3, #16
 801398c:	6593      	str	r3, [r2, #88]	; 0x58
 801398e:	4b0a      	ldr	r3, [pc, #40]	; (80139b8 <HAL_TIM_Base_MspInit+0x124>)
 8013990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013992:	f003 0310 	and.w	r3, r3, #16
 8013996:	60bb      	str	r3, [r7, #8]
 8013998:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 801399a:	2200      	movs	r2, #0
 801399c:	2105      	movs	r1, #5
 801399e:	2031      	movs	r0, #49	; 0x31
 80139a0:	f002 f8ec 	bl	8015b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80139a4:	2031      	movs	r0, #49	; 0x31
 80139a6:	f002 f903 	bl	8015bb0 <HAL_NVIC_EnableIRQ>
}
 80139aa:	bf00      	nop
 80139ac:	3730      	adds	r7, #48	; 0x30
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	40012c00 	.word	0x40012c00
 80139b8:	40021000 	.word	0x40021000
 80139bc:	42021000 	.word	0x42021000
 80139c0:	42020000 	.word	0x42020000
 80139c4:	40000c00 	.word	0x40000c00
 80139c8:	40001000 	.word	0x40001000

080139cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b08a      	sub	sp, #40	; 0x28
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80139d4:	f107 0314 	add.w	r3, r7, #20
 80139d8:	2200      	movs	r2, #0
 80139da:	601a      	str	r2, [r3, #0]
 80139dc:	605a      	str	r2, [r3, #4]
 80139de:	609a      	str	r2, [r3, #8]
 80139e0:	60da      	str	r2, [r3, #12]
 80139e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	4a1b      	ldr	r2, [pc, #108]	; (8013a58 <HAL_TIM_Encoder_MspInit+0x8c>)
 80139ea:	4293      	cmp	r3, r2
 80139ec:	d12f      	bne.n	8013a4e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80139ee:	4b1b      	ldr	r3, [pc, #108]	; (8013a5c <HAL_TIM_Encoder_MspInit+0x90>)
 80139f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139f2:	4a1a      	ldr	r2, [pc, #104]	; (8013a5c <HAL_TIM_Encoder_MspInit+0x90>)
 80139f4:	f043 0302 	orr.w	r3, r3, #2
 80139f8:	6593      	str	r3, [r2, #88]	; 0x58
 80139fa:	4b18      	ldr	r3, [pc, #96]	; (8013a5c <HAL_TIM_Encoder_MspInit+0x90>)
 80139fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139fe:	f003 0302 	and.w	r3, r3, #2
 8013a02:	613b      	str	r3, [r7, #16]
 8013a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8013a06:	4b15      	ldr	r3, [pc, #84]	; (8013a5c <HAL_TIM_Encoder_MspInit+0x90>)
 8013a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a0a:	4a14      	ldr	r2, [pc, #80]	; (8013a5c <HAL_TIM_Encoder_MspInit+0x90>)
 8013a0c:	f043 0310 	orr.w	r3, r3, #16
 8013a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013a12:	4b12      	ldr	r3, [pc, #72]	; (8013a5c <HAL_TIM_Encoder_MspInit+0x90>)
 8013a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a16:	f003 0310 	and.w	r3, r3, #16
 8013a1a:	60fb      	str	r3, [r7, #12]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8013a1e:	2318      	movs	r3, #24
 8013a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a22:	2302      	movs	r3, #2
 8013a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a26:	2300      	movs	r3, #0
 8013a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013a2e:	2302      	movs	r3, #2
 8013a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013a32:	f107 0314 	add.w	r3, r7, #20
 8013a36:	4619      	mov	r1, r3
 8013a38:	4809      	ldr	r0, [pc, #36]	; (8013a60 <HAL_TIM_Encoder_MspInit+0x94>)
 8013a3a:	f002 fc75 	bl	8016328 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8013a3e:	2200      	movs	r2, #0
 8013a40:	2105      	movs	r1, #5
 8013a42:	202e      	movs	r0, #46	; 0x2e
 8013a44:	f002 f89a 	bl	8015b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8013a48:	202e      	movs	r0, #46	; 0x2e
 8013a4a:	f002 f8b1 	bl	8015bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8013a4e:	bf00      	nop
 8013a50:	3728      	adds	r7, #40	; 0x28
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	40000400 	.word	0x40000400
 8013a5c:	40021000 	.word	0x40021000
 8013a60:	42021000 	.word	0x42021000

08013a64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8013a64:	b480      	push	{r7}
 8013a66:	b085      	sub	sp, #20
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	4a0a      	ldr	r2, [pc, #40]	; (8013a9c <HAL_TIM_PWM_MspInit+0x38>)
 8013a72:	4293      	cmp	r3, r2
 8013a74:	d10b      	bne.n	8013a8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8013a76:	4b0a      	ldr	r3, [pc, #40]	; (8013aa0 <HAL_TIM_PWM_MspInit+0x3c>)
 8013a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013a7a:	4a09      	ldr	r2, [pc, #36]	; (8013aa0 <HAL_TIM_PWM_MspInit+0x3c>)
 8013a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013a80:	6613      	str	r3, [r2, #96]	; 0x60
 8013a82:	4b07      	ldr	r3, [pc, #28]	; (8013aa0 <HAL_TIM_PWM_MspInit+0x3c>)
 8013a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013a8a:	60fb      	str	r3, [r7, #12]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8013a8e:	bf00      	nop
 8013a90:	3714      	adds	r7, #20
 8013a92:	46bd      	mov	sp, r7
 8013a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop
 8013a9c:	40013400 	.word	0x40013400
 8013aa0:	40021000 	.word	0x40021000

08013aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b08a      	sub	sp, #40	; 0x28
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013aac:	f107 0314 	add.w	r3, r7, #20
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	601a      	str	r2, [r3, #0]
 8013ab4:	605a      	str	r2, [r3, #4]
 8013ab6:	609a      	str	r2, [r3, #8]
 8013ab8:	60da      	str	r2, [r3, #12]
 8013aba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	4a22      	ldr	r2, [pc, #136]	; (8013b4c <HAL_TIM_MspPostInit+0xa8>)
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	d11d      	bne.n	8013b02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8013ac6:	4b22      	ldr	r3, [pc, #136]	; (8013b50 <HAL_TIM_MspPostInit+0xac>)
 8013ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013aca:	4a21      	ldr	r2, [pc, #132]	; (8013b50 <HAL_TIM_MspPostInit+0xac>)
 8013acc:	f043 0320 	orr.w	r3, r3, #32
 8013ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013ad2:	4b1f      	ldr	r3, [pc, #124]	; (8013b50 <HAL_TIM_MspPostInit+0xac>)
 8013ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ad6:	f003 0320 	and.w	r3, r3, #32
 8013ada:	613b      	str	r3, [r7, #16]
 8013adc:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8013ade:	f44f 7310 	mov.w	r3, #576	; 0x240
 8013ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ae4:	2302      	movs	r3, #2
 8013ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013aec:	2300      	movs	r3, #0
 8013aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8013af0:	2302      	movs	r3, #2
 8013af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013af4:	f107 0314 	add.w	r3, r7, #20
 8013af8:	4619      	mov	r1, r3
 8013afa:	4816      	ldr	r0, [pc, #88]	; (8013b54 <HAL_TIM_MspPostInit+0xb0>)
 8013afc:	f002 fc14 	bl	8016328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8013b00:	e020      	b.n	8013b44 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	4a14      	ldr	r2, [pc, #80]	; (8013b58 <HAL_TIM_MspPostInit+0xb4>)
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d11b      	bne.n	8013b44 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013b0c:	4b10      	ldr	r3, [pc, #64]	; (8013b50 <HAL_TIM_MspPostInit+0xac>)
 8013b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b10:	4a0f      	ldr	r2, [pc, #60]	; (8013b50 <HAL_TIM_MspPostInit+0xac>)
 8013b12:	f043 0304 	orr.w	r3, r3, #4
 8013b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013b18:	4b0d      	ldr	r3, [pc, #52]	; (8013b50 <HAL_TIM_MspPostInit+0xac>)
 8013b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b1c:	f003 0304 	and.w	r3, r3, #4
 8013b20:	60fb      	str	r3, [r7, #12]
 8013b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8013b24:	2340      	movs	r3, #64	; 0x40
 8013b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b28:	2302      	movs	r3, #2
 8013b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b30:	2300      	movs	r3, #0
 8013b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8013b34:	2303      	movs	r3, #3
 8013b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013b38:	f107 0314 	add.w	r3, r7, #20
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	4807      	ldr	r0, [pc, #28]	; (8013b5c <HAL_TIM_MspPostInit+0xb8>)
 8013b40:	f002 fbf2 	bl	8016328 <HAL_GPIO_Init>
}
 8013b44:	bf00      	nop
 8013b46:	3728      	adds	r7, #40	; 0x28
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	40000c00 	.word	0x40000c00
 8013b50:	40021000 	.word	0x40021000
 8013b54:	42021400 	.word	0x42021400
 8013b58:	40013400 	.word	0x40013400
 8013b5c:	42020800 	.word	0x42020800

08013b60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b0ae      	sub	sp, #184	; 0xb8
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	601a      	str	r2, [r3, #0]
 8013b70:	605a      	str	r2, [r3, #4]
 8013b72:	609a      	str	r2, [r3, #8]
 8013b74:	60da      	str	r2, [r3, #12]
 8013b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013b78:	f107 0310 	add.w	r3, r7, #16
 8013b7c:	2294      	movs	r2, #148	; 0x94
 8013b7e:	2100      	movs	r1, #0
 8013b80:	4618      	mov	r0, r3
 8013b82:	f010 fafa 	bl	802417a <memset>
  if(hpcd->Instance==USB)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	4a22      	ldr	r2, [pc, #136]	; (8013c14 <HAL_PCD_MspInit+0xb4>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d13d      	bne.n	8013c0c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013b96:	2300      	movs	r3, #0
 8013b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013b9c:	f107 0310 	add.w	r3, r7, #16
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f004 fce5 	bl	8018570 <HAL_RCCEx_PeriphCLKConfig>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d001      	beq.n	8013bb0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8013bac:	f7ff fb1d 	bl	80131ea <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013bb0:	4b19      	ldr	r3, [pc, #100]	; (8013c18 <HAL_PCD_MspInit+0xb8>)
 8013bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bb4:	4a18      	ldr	r2, [pc, #96]	; (8013c18 <HAL_PCD_MspInit+0xb8>)
 8013bb6:	f043 0301 	orr.w	r3, r3, #1
 8013bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013bbc:	4b16      	ldr	r3, [pc, #88]	; (8013c18 <HAL_PCD_MspInit+0xb8>)
 8013bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bc0:	f003 0301 	and.w	r3, r3, #1
 8013bc4:	60fb      	str	r3, [r7, #12]
 8013bc6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013bc8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bd0:	2302      	movs	r3, #2
 8013bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013be2:	230a      	movs	r3, #10
 8013be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013bec:	4619      	mov	r1, r3
 8013bee:	480b      	ldr	r0, [pc, #44]	; (8013c1c <HAL_PCD_MspInit+0xbc>)
 8013bf0:	f002 fb9a 	bl	8016328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013bf4:	4b08      	ldr	r3, [pc, #32]	; (8013c18 <HAL_PCD_MspInit+0xb8>)
 8013bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013bf8:	4a07      	ldr	r2, [pc, #28]	; (8013c18 <HAL_PCD_MspInit+0xb8>)
 8013bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013bfe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8013c00:	4b05      	ldr	r3, [pc, #20]	; (8013c18 <HAL_PCD_MspInit+0xb8>)
 8013c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013c08:	60bb      	str	r3, [r7, #8]
 8013c0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8013c0c:	bf00      	nop
 8013c0e:	37b8      	adds	r7, #184	; 0xb8
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	4000d400 	.word	0x4000d400
 8013c18:	40021000 	.word	0x40021000
 8013c1c:	42020000 	.word	0x42020000

08013c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b08c      	sub	sp, #48	; 0x30
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8013c30:	2200      	movs	r2, #0
 8013c32:	6879      	ldr	r1, [r7, #4]
 8013c34:	202d      	movs	r0, #45	; 0x2d
 8013c36:	f001 ffa1 	bl	8015b7c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8013c3a:	202d      	movs	r0, #45	; 0x2d
 8013c3c:	f001 ffb8 	bl	8015bb0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8013c40:	4b1f      	ldr	r3, [pc, #124]	; (8013cc0 <HAL_InitTick+0xa0>)
 8013c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c44:	4a1e      	ldr	r2, [pc, #120]	; (8013cc0 <HAL_InitTick+0xa0>)
 8013c46:	f043 0301 	orr.w	r3, r3, #1
 8013c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8013c4c:	4b1c      	ldr	r3, [pc, #112]	; (8013cc0 <HAL_InitTick+0xa0>)
 8013c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c50:	f003 0301 	and.w	r3, r3, #1
 8013c54:	60fb      	str	r3, [r7, #12]
 8013c56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013c58:	f107 0210 	add.w	r2, r7, #16
 8013c5c:	f107 0314 	add.w	r3, r7, #20
 8013c60:	4611      	mov	r1, r2
 8013c62:	4618      	mov	r0, r3
 8013c64:	f004 fb80 	bl	8018368 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8013c68:	f004 fb56 	bl	8018318 <HAL_RCC_GetPCLK1Freq>
 8013c6c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c70:	4a14      	ldr	r2, [pc, #80]	; (8013cc4 <HAL_InitTick+0xa4>)
 8013c72:	fba2 2303 	umull	r2, r3, r2, r3
 8013c76:	0c9b      	lsrs	r3, r3, #18
 8013c78:	3b01      	subs	r3, #1
 8013c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8013c7c:	4b12      	ldr	r3, [pc, #72]	; (8013cc8 <HAL_InitTick+0xa8>)
 8013c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013c82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8013c84:	4b10      	ldr	r3, [pc, #64]	; (8013cc8 <HAL_InitTick+0xa8>)
 8013c86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8013c8c:	4a0e      	ldr	r2, [pc, #56]	; (8013cc8 <HAL_InitTick+0xa8>)
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8013c92:	4b0d      	ldr	r3, [pc, #52]	; (8013cc8 <HAL_InitTick+0xa8>)
 8013c94:	2200      	movs	r2, #0
 8013c96:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013c98:	4b0b      	ldr	r3, [pc, #44]	; (8013cc8 <HAL_InitTick+0xa8>)
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8013c9e:	480a      	ldr	r0, [pc, #40]	; (8013cc8 <HAL_InitTick+0xa8>)
 8013ca0:	f006 f9c6 	bl	801a030 <HAL_TIM_Base_Init>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d104      	bne.n	8013cb4 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8013caa:	4807      	ldr	r0, [pc, #28]	; (8013cc8 <HAL_InitTick+0xa8>)
 8013cac:	f006 fa80 	bl	801a1b0 <HAL_TIM_Base_Start_IT>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	e000      	b.n	8013cb6 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8013cb4:	2301      	movs	r3, #1
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3730      	adds	r7, #48	; 0x30
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	40021000 	.word	0x40021000
 8013cc4:	431bde83 	.word	0x431bde83
 8013cc8:	20000f7c 	.word	0x20000f7c

08013ccc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013cd0:	f3bf 8f4f 	dsb	sy
}
 8013cd4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013cd6:	4b06      	ldr	r3, [pc, #24]	; (8013cf0 <__NVIC_SystemReset+0x24>)
 8013cd8:	68db      	ldr	r3, [r3, #12]
 8013cda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013cde:	4904      	ldr	r1, [pc, #16]	; (8013cf0 <__NVIC_SystemReset+0x24>)
 8013ce0:	4b04      	ldr	r3, [pc, #16]	; (8013cf4 <__NVIC_SystemReset+0x28>)
 8013ce2:	4313      	orrs	r3, r2
 8013ce4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013ce6:	f3bf 8f4f 	dsb	sy
}
 8013cea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8013cec:	bf00      	nop
 8013cee:	e7fd      	b.n	8013cec <__NVIC_SystemReset+0x20>
 8013cf0:	e000ed00 	.word	0xe000ed00
 8013cf4:	05fa0004 	.word	0x05fa0004

08013cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8013cfc:	e7fe      	b.n	8013cfc <NMI_Handler+0x4>

08013cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013cfe:	b580      	push	{r7, lr}
 8013d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8013d02:	f7ff ffe3 	bl	8013ccc <__NVIC_SystemReset>

08013d06 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013d06:	b480      	push	{r7}
 8013d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013d0a:	e7fe      	b.n	8013d0a <MemManage_Handler+0x4>

08013d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013d10:	e7fe      	b.n	8013d10 <BusFault_Handler+0x4>

08013d12 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013d12:	b480      	push	{r7}
 8013d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013d16:	e7fe      	b.n	8013d16 <UsageFault_Handler+0x4>

08013d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013d1c:	bf00      	nop
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
	...

08013d28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8013d2c:	4802      	ldr	r0, [pc, #8]	; (8013d38 <DMA1_Channel1_IRQHandler+0x10>)
 8013d2e:	f002 f92b 	bl	8015f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8013d32:	bf00      	nop
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	2000073c 	.word	0x2000073c

08013d3c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8013d40:	4802      	ldr	r0, [pc, #8]	; (8013d4c <ADC1_2_IRQHandler+0x10>)
 8013d42:	f000 fe2b 	bl	801499c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8013d46:	bf00      	nop
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	200006d4 	.word	0x200006d4

08013d50 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013d54:	4802      	ldr	r0, [pc, #8]	; (8013d60 <TIM1_CC_IRQHandler+0x10>)
 8013d56:	f006 fed9 	bl	801ab0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8013d5a:	bf00      	nop
 8013d5c:	bd80      	pop	{r7, pc}
 8013d5e:	bf00      	nop
 8013d60:	20000b08 	.word	0x20000b08

08013d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8013d68:	4802      	ldr	r0, [pc, #8]	; (8013d74 <TIM2_IRQHandler+0x10>)
 8013d6a:	f006 fecf 	bl	801ab0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8013d6e:	bf00      	nop
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	20000f7c 	.word	0x20000f7c

08013d78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8013d7c:	4802      	ldr	r0, [pc, #8]	; (8013d88 <TIM3_IRQHandler+0x10>)
 8013d7e:	f006 fec5 	bl	801ab0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8013d82:	bf00      	nop
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	20000b54 	.word	0x20000b54

08013d8c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8013d90:	4802      	ldr	r0, [pc, #8]	; (8013d9c <TIM6_IRQHandler+0x10>)
 8013d92:	f006 febb 	bl	801ab0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8013d96:	bf00      	nop
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	20000bec 	.word	0x20000bec

08013da0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8013da4:	4802      	ldr	r0, [pc, #8]	; (8013db0 <UART4_IRQHandler+0x10>)
 8013da6:	f008 fa73 	bl	801c290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8013daa:	bf00      	nop
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	2000088c 	.word	0x2000088c

08013db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013db4:	b480      	push	{r7}
 8013db6:	af00      	add	r7, sp, #0
  return 1;
 8013db8:	2301      	movs	r3, #1
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc2:	4770      	bx	lr

08013dc4 <_kill>:

int _kill(int pid, int sig)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8013dce:	f010 fa77 	bl	80242c0 <__errno>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2216      	movs	r2, #22
 8013dd6:	601a      	str	r2, [r3, #0]
  return -1;
 8013dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <_exit>:

void _exit (int status)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013dec:	f04f 31ff 	mov.w	r1, #4294967295
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f7ff ffe7 	bl	8013dc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8013df6:	e7fe      	b.n	8013df6 <_exit+0x12>

08013df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b086      	sub	sp, #24
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013e04:	2300      	movs	r3, #0
 8013e06:	617b      	str	r3, [r7, #20]
 8013e08:	e00a      	b.n	8013e20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8013e0a:	f3af 8000 	nop.w
 8013e0e:	4601      	mov	r1, r0
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	1c5a      	adds	r2, r3, #1
 8013e14:	60ba      	str	r2, [r7, #8]
 8013e16:	b2ca      	uxtb	r2, r1
 8013e18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	617b      	str	r3, [r7, #20]
 8013e20:	697a      	ldr	r2, [r7, #20]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	dbf0      	blt.n	8013e0a <_read+0x12>
  }

  return len;
 8013e28:	687b      	ldr	r3, [r7, #4]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3718      	adds	r7, #24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013e32:	b580      	push	{r7, lr}
 8013e34:	b086      	sub	sp, #24
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	60f8      	str	r0, [r7, #12]
 8013e3a:	60b9      	str	r1, [r7, #8]
 8013e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013e3e:	2300      	movs	r3, #0
 8013e40:	617b      	str	r3, [r7, #20]
 8013e42:	e009      	b.n	8013e58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	1c5a      	adds	r2, r3, #1
 8013e48:	60ba      	str	r2, [r7, #8]
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	3301      	adds	r3, #1
 8013e56:	617b      	str	r3, [r7, #20]
 8013e58:	697a      	ldr	r2, [r7, #20]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	dbf1      	blt.n	8013e44 <_write+0x12>
  }
  return len;
 8013e60:	687b      	ldr	r3, [r7, #4]
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3718      	adds	r7, #24
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}

08013e6a <_close>:

int _close(int file)
{
 8013e6a:	b480      	push	{r7}
 8013e6c:	b083      	sub	sp, #12
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	370c      	adds	r7, #12
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr

08013e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013e82:	b480      	push	{r7}
 8013e84:	b083      	sub	sp, #12
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013e92:	605a      	str	r2, [r3, #4]
  return 0;
 8013e94:	2300      	movs	r3, #0
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	370c      	adds	r7, #12
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea0:	4770      	bx	lr

08013ea2 <_isatty>:

int _isatty(int file)
{
 8013ea2:	b480      	push	{r7}
 8013ea4:	b083      	sub	sp, #12
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8013eaa:	2301      	movs	r3, #1
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	370c      	adds	r7, #12
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb6:	4770      	bx	lr

08013eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b085      	sub	sp, #20
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8013ec4:	2300      	movs	r3, #0
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3714      	adds	r7, #20
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed0:	4770      	bx	lr
	...

08013ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013edc:	4a14      	ldr	r2, [pc, #80]	; (8013f30 <_sbrk+0x5c>)
 8013ede:	4b15      	ldr	r3, [pc, #84]	; (8013f34 <_sbrk+0x60>)
 8013ee0:	1ad3      	subs	r3, r2, r3
 8013ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013ee8:	4b13      	ldr	r3, [pc, #76]	; (8013f38 <_sbrk+0x64>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d102      	bne.n	8013ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013ef0:	4b11      	ldr	r3, [pc, #68]	; (8013f38 <_sbrk+0x64>)
 8013ef2:	4a12      	ldr	r2, [pc, #72]	; (8013f3c <_sbrk+0x68>)
 8013ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8013ef6:	4b10      	ldr	r3, [pc, #64]	; (8013f38 <_sbrk+0x64>)
 8013ef8:	681a      	ldr	r2, [r3, #0]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	4413      	add	r3, r2
 8013efe:	693a      	ldr	r2, [r7, #16]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d207      	bcs.n	8013f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013f04:	f010 f9dc 	bl	80242c0 <__errno>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	220c      	movs	r2, #12
 8013f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f12:	e009      	b.n	8013f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013f14:	4b08      	ldr	r3, [pc, #32]	; (8013f38 <_sbrk+0x64>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013f1a:	4b07      	ldr	r3, [pc, #28]	; (8013f38 <_sbrk+0x64>)
 8013f1c:	681a      	ldr	r2, [r3, #0]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	4413      	add	r3, r2
 8013f22:	4a05      	ldr	r2, [pc, #20]	; (8013f38 <_sbrk+0x64>)
 8013f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8013f26:	68fb      	ldr	r3, [r7, #12]
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3718      	adds	r7, #24
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	20030000 	.word	0x20030000
 8013f34:	00000400 	.word	0x00000400
 8013f38:	20000fc8 	.word	0x20000fc8
 8013f3c:	20005e68 	.word	0x20005e68

08013f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8013f40:	b480      	push	{r7}
 8013f42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8013f44:	4b06      	ldr	r3, [pc, #24]	; (8013f60 <SystemInit+0x20>)
 8013f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f4a:	4a05      	ldr	r2, [pc, #20]	; (8013f60 <SystemInit+0x20>)
 8013f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8013f54:	bf00      	nop
 8013f56:	46bd      	mov	sp, r7
 8013f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5c:	4770      	bx	lr
 8013f5e:	bf00      	nop
 8013f60:	e000ed00 	.word	0xe000ed00

08013f64 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8013f64:	b480      	push	{r7}
 8013f66:	b087      	sub	sp, #28
 8013f68:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8013f6a:	4b4f      	ldr	r3, [pc, #316]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	f003 0308 	and.w	r3, r3, #8
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d107      	bne.n	8013f86 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8013f76:	4b4c      	ldr	r3, [pc, #304]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 8013f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013f7c:	0a1b      	lsrs	r3, r3, #8
 8013f7e:	f003 030f 	and.w	r3, r3, #15
 8013f82:	617b      	str	r3, [r7, #20]
 8013f84:	e005      	b.n	8013f92 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8013f86:	4b48      	ldr	r3, [pc, #288]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	091b      	lsrs	r3, r3, #4
 8013f8c:	f003 030f 	and.w	r3, r3, #15
 8013f90:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8013f92:	4a46      	ldr	r2, [pc, #280]	; (80140ac <SystemCoreClockUpdate+0x148>)
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f9a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013f9c:	4b42      	ldr	r3, [pc, #264]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 8013f9e:	689b      	ldr	r3, [r3, #8]
 8013fa0:	f003 030c 	and.w	r3, r3, #12
 8013fa4:	2b0c      	cmp	r3, #12
 8013fa6:	d866      	bhi.n	8014076 <SystemCoreClockUpdate+0x112>
 8013fa8:	a201      	add	r2, pc, #4	; (adr r2, 8013fb0 <SystemCoreClockUpdate+0x4c>)
 8013faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fae:	bf00      	nop
 8013fb0:	08013fe5 	.word	0x08013fe5
 8013fb4:	08014077 	.word	0x08014077
 8013fb8:	08014077 	.word	0x08014077
 8013fbc:	08014077 	.word	0x08014077
 8013fc0:	08013fed 	.word	0x08013fed
 8013fc4:	08014077 	.word	0x08014077
 8013fc8:	08014077 	.word	0x08014077
 8013fcc:	08014077 	.word	0x08014077
 8013fd0:	08013ff5 	.word	0x08013ff5
 8013fd4:	08014077 	.word	0x08014077
 8013fd8:	08014077 	.word	0x08014077
 8013fdc:	08014077 	.word	0x08014077
 8013fe0:	08013ffd 	.word	0x08013ffd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8013fe4:	4a32      	ldr	r2, [pc, #200]	; (80140b0 <SystemCoreClockUpdate+0x14c>)
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	6013      	str	r3, [r2, #0]
      break;
 8013fea:	e048      	b.n	801407e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8013fec:	4b30      	ldr	r3, [pc, #192]	; (80140b0 <SystemCoreClockUpdate+0x14c>)
 8013fee:	4a31      	ldr	r2, [pc, #196]	; (80140b4 <SystemCoreClockUpdate+0x150>)
 8013ff0:	601a      	str	r2, [r3, #0]
      break;
 8013ff2:	e044      	b.n	801407e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8013ff4:	4b2e      	ldr	r3, [pc, #184]	; (80140b0 <SystemCoreClockUpdate+0x14c>)
 8013ff6:	4a30      	ldr	r2, [pc, #192]	; (80140b8 <SystemCoreClockUpdate+0x154>)
 8013ff8:	601a      	str	r2, [r3, #0]
      break;
 8013ffa:	e040      	b.n	801407e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8013ffc:	4b2a      	ldr	r3, [pc, #168]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	f003 0303 	and.w	r3, r3, #3
 8014004:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8014006:	4b28      	ldr	r3, [pc, #160]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	091b      	lsrs	r3, r3, #4
 801400c:	f003 030f 	and.w	r3, r3, #15
 8014010:	3301      	adds	r3, #1
 8014012:	60bb      	str	r3, [r7, #8]
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2b02      	cmp	r3, #2
 8014018:	d003      	beq.n	8014022 <SystemCoreClockUpdate+0xbe>
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	2b03      	cmp	r3, #3
 801401e:	d006      	beq.n	801402e <SystemCoreClockUpdate+0xca>
 8014020:	e00b      	b.n	801403a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8014022:	4a24      	ldr	r2, [pc, #144]	; (80140b4 <SystemCoreClockUpdate+0x150>)
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	fbb2 f3f3 	udiv	r3, r2, r3
 801402a:	613b      	str	r3, [r7, #16]
          break;
 801402c:	e00b      	b.n	8014046 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 801402e:	4a22      	ldr	r2, [pc, #136]	; (80140b8 <SystemCoreClockUpdate+0x154>)
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	fbb2 f3f3 	udiv	r3, r2, r3
 8014036:	613b      	str	r3, [r7, #16]
          break;
 8014038:	e005      	b.n	8014046 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 801403a:	697a      	ldr	r2, [r7, #20]
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014042:	613b      	str	r3, [r7, #16]
          break;
 8014044:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8014046:	4b18      	ldr	r3, [pc, #96]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 8014048:	68db      	ldr	r3, [r3, #12]
 801404a:	0a1b      	lsrs	r3, r3, #8
 801404c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	fb02 f303 	mul.w	r3, r2, r3
 8014056:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8014058:	4b13      	ldr	r3, [pc, #76]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	0e5b      	lsrs	r3, r3, #25
 801405e:	f003 0303 	and.w	r3, r3, #3
 8014062:	3301      	adds	r3, #1
 8014064:	005b      	lsls	r3, r3, #1
 8014066:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8014068:	693a      	ldr	r2, [r7, #16]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014070:	4a0f      	ldr	r2, [pc, #60]	; (80140b0 <SystemCoreClockUpdate+0x14c>)
 8014072:	6013      	str	r3, [r2, #0]
      break;
 8014074:	e003      	b.n	801407e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8014076:	4a0e      	ldr	r2, [pc, #56]	; (80140b0 <SystemCoreClockUpdate+0x14c>)
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	6013      	str	r3, [r2, #0]
      break;
 801407c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 801407e:	4b0a      	ldr	r3, [pc, #40]	; (80140a8 <SystemCoreClockUpdate+0x144>)
 8014080:	689b      	ldr	r3, [r3, #8]
 8014082:	091b      	lsrs	r3, r3, #4
 8014084:	f003 030f 	and.w	r3, r3, #15
 8014088:	4a0c      	ldr	r2, [pc, #48]	; (80140bc <SystemCoreClockUpdate+0x158>)
 801408a:	5cd3      	ldrb	r3, [r2, r3]
 801408c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 801408e:	4b08      	ldr	r3, [pc, #32]	; (80140b0 <SystemCoreClockUpdate+0x14c>)
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	fa22 f303 	lsr.w	r3, r2, r3
 8014098:	4a05      	ldr	r2, [pc, #20]	; (80140b0 <SystemCoreClockUpdate+0x14c>)
 801409a:	6013      	str	r3, [r2, #0]
}
 801409c:	bf00      	nop
 801409e:	371c      	adds	r7, #28
 80140a0:	46bd      	mov	sp, r7
 80140a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a6:	4770      	bx	lr
 80140a8:	40021000 	.word	0x40021000
 80140ac:	0802596c 	.word	0x0802596c
 80140b0:	20000090 	.word	0x20000090
 80140b4:	00f42400 	.word	0x00f42400
 80140b8:	007a1200 	.word	0x007a1200
 80140bc:	08025954 	.word	0x08025954

080140c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80140c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80140f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80140c4:	f7ff ff3c 	bl	8013f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80140c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80140ca:	e003      	b.n	80140d4 <LoopCopyDataInit>

080140cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80140cc:	4b0b      	ldr	r3, [pc, #44]	; (80140fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80140ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80140d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80140d2:	3104      	adds	r1, #4

080140d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80140d4:	480a      	ldr	r0, [pc, #40]	; (8014100 <LoopForever+0xa>)
	ldr	r3, =_edata
 80140d6:	4b0b      	ldr	r3, [pc, #44]	; (8014104 <LoopForever+0xe>)
	adds	r2, r0, r1
 80140d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80140da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80140dc:	d3f6      	bcc.n	80140cc <CopyDataInit>
	ldr	r2, =_sbss
 80140de:	4a0a      	ldr	r2, [pc, #40]	; (8014108 <LoopForever+0x12>)
	b	LoopFillZerobss
 80140e0:	e002      	b.n	80140e8 <LoopFillZerobss>

080140e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80140e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80140e4:	f842 3b04 	str.w	r3, [r2], #4

080140e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80140e8:	4b08      	ldr	r3, [pc, #32]	; (801410c <LoopForever+0x16>)
	cmp	r2, r3
 80140ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80140ec:	d3f9      	bcc.n	80140e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80140ee:	f010 f8ed 	bl	80242cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80140f2:	f7fd ff67 	bl	8011fc4 <main>

080140f6 <LoopForever>:

LoopForever:
    b LoopForever
 80140f6:	e7fe      	b.n	80140f6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80140f8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80140fc:	0802621c 	.word	0x0802621c
	ldr	r0, =_sdata
 8014100:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8014104:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 8014108:	20000110 	.word	0x20000110
	ldr	r3, = _ebss
 801410c:	20005e68 	.word	0x20005e68

08014110 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8014110:	e7fe      	b.n	8014110 <COMP_IRQHandler>

08014112 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014112:	b580      	push	{r7, lr}
 8014114:	b082      	sub	sp, #8
 8014116:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8014118:	2300      	movs	r3, #0
 801411a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 801411c:	2004      	movs	r0, #4
 801411e:	f001 fd22 	bl	8015b66 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8014122:	f7ff ff1f 	bl	8013f64 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014126:	2007      	movs	r0, #7
 8014128:	f7ff fd7a 	bl	8013c20 <HAL_InitTick>
 801412c:	4603      	mov	r3, r0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d002      	beq.n	8014138 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8014132:	2301      	movs	r3, #1
 8014134:	71fb      	strb	r3, [r7, #7]
 8014136:	e001      	b.n	801413c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8014138:	f7ff f85c 	bl	80131f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801413c:	79fb      	ldrb	r3, [r7, #7]
}
 801413e:	4618      	mov	r0, r3
 8014140:	3708      	adds	r7, #8
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
	...

08014148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014148:	b480      	push	{r7}
 801414a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801414c:	4b06      	ldr	r3, [pc, #24]	; (8014168 <HAL_IncTick+0x20>)
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	461a      	mov	r2, r3
 8014152:	4b06      	ldr	r3, [pc, #24]	; (801416c <HAL_IncTick+0x24>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	4413      	add	r3, r2
 8014158:	4a04      	ldr	r2, [pc, #16]	; (801416c <HAL_IncTick+0x24>)
 801415a:	6013      	str	r3, [r2, #0]
}
 801415c:	bf00      	nop
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr
 8014166:	bf00      	nop
 8014168:	20000098 	.word	0x20000098
 801416c:	20000fcc 	.word	0x20000fcc

08014170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014170:	b480      	push	{r7}
 8014172:	af00      	add	r7, sp, #0
  return uwTick;
 8014174:	4b03      	ldr	r3, [pc, #12]	; (8014184 <HAL_GetTick+0x14>)
 8014176:	681b      	ldr	r3, [r3, #0]
}
 8014178:	4618      	mov	r0, r3
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	20000fcc 	.word	0x20000fcc

08014188 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8014188:	b480      	push	{r7}
 801418a:	b083      	sub	sp, #12
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	431a      	orrs	r2, r3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	609a      	str	r2, [r3, #8]
}
 80141a2:	bf00      	nop
 80141a4:	370c      	adds	r7, #12
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr

080141ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80141ae:	b480      	push	{r7}
 80141b0:	b083      	sub	sp, #12
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
 80141b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	689b      	ldr	r3, [r3, #8]
 80141bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	431a      	orrs	r2, r3
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	609a      	str	r2, [r3, #8]
}
 80141c8:	bf00      	nop
 80141ca:	370c      	adds	r7, #12
 80141cc:	46bd      	mov	sp, r7
 80141ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d2:	4770      	bx	lr

080141d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80141d4:	b480      	push	{r7}
 80141d6:	b083      	sub	sp, #12
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	689b      	ldr	r3, [r3, #8]
 80141e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	370c      	adds	r7, #12
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr

080141f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80141f0:	b480      	push	{r7}
 80141f2:	b087      	sub	sp, #28
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
 80141fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	3360      	adds	r3, #96	; 0x60
 8014202:	461a      	mov	r2, r3
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	009b      	lsls	r3, r3, #2
 8014208:	4413      	add	r3, r2
 801420a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	681a      	ldr	r2, [r3, #0]
 8014210:	4b08      	ldr	r3, [pc, #32]	; (8014234 <LL_ADC_SetOffset+0x44>)
 8014212:	4013      	ands	r3, r2
 8014214:	687a      	ldr	r2, [r7, #4]
 8014216:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801421a:	683a      	ldr	r2, [r7, #0]
 801421c:	430a      	orrs	r2, r1
 801421e:	4313      	orrs	r3, r2
 8014220:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8014228:	bf00      	nop
 801422a:	371c      	adds	r7, #28
 801422c:	46bd      	mov	sp, r7
 801422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014232:	4770      	bx	lr
 8014234:	03fff000 	.word	0x03fff000

08014238 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8014238:	b480      	push	{r7}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	3360      	adds	r3, #96	; 0x60
 8014246:	461a      	mov	r2, r3
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	4413      	add	r3, r2
 801424e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8014258:	4618      	mov	r0, r3
 801425a:	3714      	adds	r7, #20
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr

08014264 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8014264:	b480      	push	{r7}
 8014266:	b087      	sub	sp, #28
 8014268:	af00      	add	r7, sp, #0
 801426a:	60f8      	str	r0, [r7, #12]
 801426c:	60b9      	str	r1, [r7, #8]
 801426e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	3360      	adds	r3, #96	; 0x60
 8014274:	461a      	mov	r2, r3
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	009b      	lsls	r3, r3, #2
 801427a:	4413      	add	r3, r2
 801427c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	431a      	orrs	r2, r3
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 801428e:	bf00      	nop
 8014290:	371c      	adds	r7, #28
 8014292:	46bd      	mov	sp, r7
 8014294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014298:	4770      	bx	lr

0801429a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 801429a:	b480      	push	{r7}
 801429c:	b083      	sub	sp, #12
 801429e:	af00      	add	r7, sp, #0
 80142a0:	6078      	str	r0, [r7, #4]
 80142a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	695b      	ldr	r3, [r3, #20]
 80142a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	431a      	orrs	r2, r3
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	615a      	str	r2, [r3, #20]
}
 80142b4:	bf00      	nop
 80142b6:	370c      	adds	r7, #12
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d101      	bne.n	80142d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80142d4:	2301      	movs	r3, #1
 80142d6:	e000      	b.n	80142da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80142d8:	2300      	movs	r3, #0
}
 80142da:	4618      	mov	r0, r3
 80142dc:	370c      	adds	r7, #12
 80142de:	46bd      	mov	sp, r7
 80142e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e4:	4770      	bx	lr

080142e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80142e6:	b480      	push	{r7}
 80142e8:	b087      	sub	sp, #28
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	60f8      	str	r0, [r7, #12]
 80142ee:	60b9      	str	r1, [r7, #8]
 80142f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	3330      	adds	r3, #48	; 0x30
 80142f6:	461a      	mov	r2, r3
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	0a1b      	lsrs	r3, r3, #8
 80142fc:	009b      	lsls	r3, r3, #2
 80142fe:	f003 030c 	and.w	r3, r3, #12
 8014302:	4413      	add	r3, r2
 8014304:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	681a      	ldr	r2, [r3, #0]
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	f003 031f 	and.w	r3, r3, #31
 8014310:	211f      	movs	r1, #31
 8014312:	fa01 f303 	lsl.w	r3, r1, r3
 8014316:	43db      	mvns	r3, r3
 8014318:	401a      	ands	r2, r3
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	0e9b      	lsrs	r3, r3, #26
 801431e:	f003 011f 	and.w	r1, r3, #31
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	f003 031f 	and.w	r3, r3, #31
 8014328:	fa01 f303 	lsl.w	r3, r1, r3
 801432c:	431a      	orrs	r2, r3
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8014332:	bf00      	nop
 8014334:	371c      	adds	r7, #28
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr

0801433e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 801433e:	b480      	push	{r7}
 8014340:	b083      	sub	sp, #12
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801434a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801434e:	2b00      	cmp	r3, #0
 8014350:	d101      	bne.n	8014356 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8014352:	2301      	movs	r3, #1
 8014354:	e000      	b.n	8014358 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8014356:	2300      	movs	r3, #0
}
 8014358:	4618      	mov	r0, r3
 801435a:	370c      	adds	r7, #12
 801435c:	46bd      	mov	sp, r7
 801435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014362:	4770      	bx	lr

08014364 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8014364:	b480      	push	{r7}
 8014366:	b087      	sub	sp, #28
 8014368:	af00      	add	r7, sp, #0
 801436a:	60f8      	str	r0, [r7, #12]
 801436c:	60b9      	str	r1, [r7, #8]
 801436e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	3314      	adds	r3, #20
 8014374:	461a      	mov	r2, r3
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	0e5b      	lsrs	r3, r3, #25
 801437a:	009b      	lsls	r3, r3, #2
 801437c:	f003 0304 	and.w	r3, r3, #4
 8014380:	4413      	add	r3, r2
 8014382:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	0d1b      	lsrs	r3, r3, #20
 801438c:	f003 031f 	and.w	r3, r3, #31
 8014390:	2107      	movs	r1, #7
 8014392:	fa01 f303 	lsl.w	r3, r1, r3
 8014396:	43db      	mvns	r3, r3
 8014398:	401a      	ands	r2, r3
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	0d1b      	lsrs	r3, r3, #20
 801439e:	f003 031f 	and.w	r3, r3, #31
 80143a2:	6879      	ldr	r1, [r7, #4]
 80143a4:	fa01 f303 	lsl.w	r3, r1, r3
 80143a8:	431a      	orrs	r2, r3
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80143ae:	bf00      	nop
 80143b0:	371c      	adds	r7, #28
 80143b2:	46bd      	mov	sp, r7
 80143b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b8:	4770      	bx	lr
	...

080143bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80143bc:	b480      	push	{r7}
 80143be:	b085      	sub	sp, #20
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	60b9      	str	r1, [r7, #8]
 80143c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143d4:	43db      	mvns	r3, r3
 80143d6:	401a      	ands	r2, r3
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	f003 0318 	and.w	r3, r3, #24
 80143de:	4908      	ldr	r1, [pc, #32]	; (8014400 <LL_ADC_SetChannelSingleDiff+0x44>)
 80143e0:	40d9      	lsrs	r1, r3
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	400b      	ands	r3, r1
 80143e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143ea:	431a      	orrs	r2, r3
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80143f2:	bf00      	nop
 80143f4:	3714      	adds	r7, #20
 80143f6:	46bd      	mov	sp, r7
 80143f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fc:	4770      	bx	lr
 80143fe:	bf00      	nop
 8014400:	0007ffff 	.word	0x0007ffff

08014404 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8014404:	b480      	push	{r7}
 8014406:	b083      	sub	sp, #12
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	689b      	ldr	r3, [r3, #8]
 8014410:	f003 031f 	and.w	r3, r3, #31
}
 8014414:	4618      	mov	r0, r3
 8014416:	370c      	adds	r7, #12
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr

08014420 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	689b      	ldr	r3, [r3, #8]
 801442c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8014430:	4618      	mov	r0, r3
 8014432:	370c      	adds	r7, #12
 8014434:	46bd      	mov	sp, r7
 8014436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443a:	4770      	bx	lr

0801443c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 801443c:	b480      	push	{r7}
 801443e:	b083      	sub	sp, #12
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	689b      	ldr	r3, [r3, #8]
 8014448:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 801444c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8014450:	687a      	ldr	r2, [r7, #4]
 8014452:	6093      	str	r3, [r2, #8]
}
 8014454:	bf00      	nop
 8014456:	370c      	adds	r7, #12
 8014458:	46bd      	mov	sp, r7
 801445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445e:	4770      	bx	lr

08014460 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8014460:	b480      	push	{r7}
 8014462:	b083      	sub	sp, #12
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	689b      	ldr	r3, [r3, #8]
 801446c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014474:	d101      	bne.n	801447a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8014476:	2301      	movs	r3, #1
 8014478:	e000      	b.n	801447c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801447a:	2300      	movs	r3, #0
}
 801447c:	4618      	mov	r0, r3
 801447e:	370c      	adds	r7, #12
 8014480:	46bd      	mov	sp, r7
 8014482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014486:	4770      	bx	lr

08014488 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8014488:	b480      	push	{r7}
 801448a:	b083      	sub	sp, #12
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	689b      	ldr	r3, [r3, #8]
 8014494:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8014498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801449c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80144a4:	bf00      	nop
 80144a6:	370c      	adds	r7, #12
 80144a8:	46bd      	mov	sp, r7
 80144aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ae:	4770      	bx	lr

080144b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80144b0:	b480      	push	{r7}
 80144b2:	b083      	sub	sp, #12
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	689b      	ldr	r3, [r3, #8]
 80144bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80144c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80144c4:	d101      	bne.n	80144ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80144c6:	2301      	movs	r3, #1
 80144c8:	e000      	b.n	80144cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80144ca:	2300      	movs	r3, #0
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	370c      	adds	r7, #12
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr

080144d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80144d8:	b480      	push	{r7}
 80144da:	b083      	sub	sp, #12
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	689b      	ldr	r3, [r3, #8]
 80144e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80144e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80144ec:	f043 0201 	orr.w	r2, r3, #1
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80144f4:	bf00      	nop
 80144f6:	370c      	adds	r7, #12
 80144f8:	46bd      	mov	sp, r7
 80144fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fe:	4770      	bx	lr

08014500 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8014500:	b480      	push	{r7}
 8014502:	b083      	sub	sp, #12
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	689b      	ldr	r3, [r3, #8]
 801450c:	f003 0301 	and.w	r3, r3, #1
 8014510:	2b01      	cmp	r3, #1
 8014512:	d101      	bne.n	8014518 <LL_ADC_IsEnabled+0x18>
 8014514:	2301      	movs	r3, #1
 8014516:	e000      	b.n	801451a <LL_ADC_IsEnabled+0x1a>
 8014518:	2300      	movs	r3, #0
}
 801451a:	4618      	mov	r0, r3
 801451c:	370c      	adds	r7, #12
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr

08014526 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8014526:	b480      	push	{r7}
 8014528:	b083      	sub	sp, #12
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014536:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801453a:	f043 0204 	orr.w	r2, r3, #4
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8014542:	bf00      	nop
 8014544:	370c      	adds	r7, #12
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr

0801454e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 801454e:	b480      	push	{r7}
 8014550:	b083      	sub	sp, #12
 8014552:	af00      	add	r7, sp, #0
 8014554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	689b      	ldr	r3, [r3, #8]
 801455a:	f003 0304 	and.w	r3, r3, #4
 801455e:	2b04      	cmp	r3, #4
 8014560:	d101      	bne.n	8014566 <LL_ADC_REG_IsConversionOngoing+0x18>
 8014562:	2301      	movs	r3, #1
 8014564:	e000      	b.n	8014568 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8014566:	2300      	movs	r3, #0
}
 8014568:	4618      	mov	r0, r3
 801456a:	370c      	adds	r7, #12
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr

08014574 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8014574:	b480      	push	{r7}
 8014576:	b083      	sub	sp, #12
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	689b      	ldr	r3, [r3, #8]
 8014580:	f003 0308 	and.w	r3, r3, #8
 8014584:	2b08      	cmp	r3, #8
 8014586:	d101      	bne.n	801458c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8014588:	2301      	movs	r3, #1
 801458a:	e000      	b.n	801458e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 801458c:	2300      	movs	r3, #0
}
 801458e:	4618      	mov	r0, r3
 8014590:	370c      	adds	r7, #12
 8014592:	46bd      	mov	sp, r7
 8014594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014598:	4770      	bx	lr
	...

0801459c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 801459c:	b590      	push	{r4, r7, lr}
 801459e:	b089      	sub	sp, #36	; 0x24
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80145a4:	2300      	movs	r3, #0
 80145a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80145a8:	2300      	movs	r3, #0
 80145aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d101      	bne.n	80145b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80145b2:	2301      	movs	r3, #1
 80145b4:	e12e      	b.n	8014814 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	691b      	ldr	r3, [r3, #16]
 80145ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d109      	bne.n	80145d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7fe fe3d 	bl	8013244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2200      	movs	r2, #0
 80145ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2200      	movs	r2, #0
 80145d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	4618      	mov	r0, r3
 80145de:	f7ff ff3f 	bl	8014460 <LL_ADC_IsDeepPowerDownEnabled>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d004      	beq.n	80145f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff ff25 	bl	801443c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7ff ff5a 	bl	80144b0 <LL_ADC_IsInternalRegulatorEnabled>
 80145fc:	4603      	mov	r3, r0
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d115      	bne.n	801462e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	4618      	mov	r0, r3
 8014608:	f7ff ff3e 	bl	8014488 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801460c:	4b83      	ldr	r3, [pc, #524]	; (801481c <HAL_ADC_Init+0x280>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	099b      	lsrs	r3, r3, #6
 8014612:	4a83      	ldr	r2, [pc, #524]	; (8014820 <HAL_ADC_Init+0x284>)
 8014614:	fba2 2303 	umull	r2, r3, r2, r3
 8014618:	099b      	lsrs	r3, r3, #6
 801461a:	3301      	adds	r3, #1
 801461c:	005b      	lsls	r3, r3, #1
 801461e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8014620:	e002      	b.n	8014628 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	3b01      	subs	r3, #1
 8014626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d1f9      	bne.n	8014622 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	4618      	mov	r0, r3
 8014634:	f7ff ff3c 	bl	80144b0 <LL_ADC_IsInternalRegulatorEnabled>
 8014638:	4603      	mov	r3, r0
 801463a:	2b00      	cmp	r3, #0
 801463c:	d10d      	bne.n	801465a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014642:	f043 0210 	orr.w	r2, r3, #16
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801464e:	f043 0201 	orr.w	r2, r3, #1
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8014656:	2301      	movs	r3, #1
 8014658:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	4618      	mov	r0, r3
 8014660:	f7ff ff75 	bl	801454e <LL_ADC_REG_IsConversionOngoing>
 8014664:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801466a:	f003 0310 	and.w	r3, r3, #16
 801466e:	2b00      	cmp	r3, #0
 8014670:	f040 80c7 	bne.w	8014802 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	2b00      	cmp	r3, #0
 8014678:	f040 80c3 	bne.w	8014802 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014680:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8014684:	f043 0202 	orr.w	r2, r3, #2
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff ff35 	bl	8014500 <LL_ADC_IsEnabled>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d110      	bne.n	80146be <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801469c:	4861      	ldr	r0, [pc, #388]	; (8014824 <HAL_ADC_Init+0x288>)
 801469e:	f7ff ff2f 	bl	8014500 <LL_ADC_IsEnabled>
 80146a2:	4604      	mov	r4, r0
 80146a4:	4860      	ldr	r0, [pc, #384]	; (8014828 <HAL_ADC_Init+0x28c>)
 80146a6:	f7ff ff2b 	bl	8014500 <LL_ADC_IsEnabled>
 80146aa:	4603      	mov	r3, r0
 80146ac:	4323      	orrs	r3, r4
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d105      	bne.n	80146be <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	685b      	ldr	r3, [r3, #4]
 80146b6:	4619      	mov	r1, r3
 80146b8:	485c      	ldr	r0, [pc, #368]	; (801482c <HAL_ADC_Init+0x290>)
 80146ba:	f7ff fd65 	bl	8014188 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	7e5b      	ldrb	r3, [r3, #25]
 80146c2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80146c8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80146ce:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80146d4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80146dc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80146de:	4313      	orrs	r3, r2
 80146e0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d106      	bne.n	80146fa <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f0:	3b01      	subs	r3, #1
 80146f2:	045b      	lsls	r3, r3, #17
 80146f4:	69ba      	ldr	r2, [r7, #24]
 80146f6:	4313      	orrs	r3, r2
 80146f8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d009      	beq.n	8014716 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014706:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801470e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8014710:	69ba      	ldr	r2, [r7, #24]
 8014712:	4313      	orrs	r3, r2
 8014714:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	68da      	ldr	r2, [r3, #12]
 801471c:	4b44      	ldr	r3, [pc, #272]	; (8014830 <HAL_ADC_Init+0x294>)
 801471e:	4013      	ands	r3, r2
 8014720:	687a      	ldr	r2, [r7, #4]
 8014722:	6812      	ldr	r2, [r2, #0]
 8014724:	69b9      	ldr	r1, [r7, #24]
 8014726:	430b      	orrs	r3, r1
 8014728:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	4618      	mov	r0, r3
 8014730:	f7ff ff20 	bl	8014574 <LL_ADC_INJ_IsConversionOngoing>
 8014734:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d140      	bne.n	80147be <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d13d      	bne.n	80147be <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	7e1b      	ldrb	r3, [r3, #24]
 801474a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 801474c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014754:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8014756:	4313      	orrs	r3, r2
 8014758:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	68db      	ldr	r3, [r3, #12]
 8014760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014764:	f023 0306 	bic.w	r3, r3, #6
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	6812      	ldr	r2, [r2, #0]
 801476c:	69b9      	ldr	r1, [r7, #24]
 801476e:	430b      	orrs	r3, r1
 8014770:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014778:	2b01      	cmp	r3, #1
 801477a:	d118      	bne.n	80147ae <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	691b      	ldr	r3, [r3, #16]
 8014782:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014786:	f023 0304 	bic.w	r3, r3, #4
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014792:	4311      	orrs	r1, r2
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8014798:	4311      	orrs	r1, r2
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801479e:	430a      	orrs	r2, r1
 80147a0:	431a      	orrs	r2, r3
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	f042 0201 	orr.w	r2, r2, #1
 80147aa:	611a      	str	r2, [r3, #16]
 80147ac:	e007      	b.n	80147be <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	691a      	ldr	r2, [r3, #16]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	f022 0201 	bic.w	r2, r2, #1
 80147bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	691b      	ldr	r3, [r3, #16]
 80147c2:	2b01      	cmp	r3, #1
 80147c4:	d10c      	bne.n	80147e0 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147cc:	f023 010f 	bic.w	r1, r3, #15
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	69db      	ldr	r3, [r3, #28]
 80147d4:	1e5a      	subs	r2, r3, #1
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	430a      	orrs	r2, r1
 80147dc:	631a      	str	r2, [r3, #48]	; 0x30
 80147de:	e007      	b.n	80147f0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	f022 020f 	bic.w	r2, r2, #15
 80147ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80147f4:	f023 0303 	bic.w	r3, r3, #3
 80147f8:	f043 0201 	orr.w	r2, r3, #1
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	659a      	str	r2, [r3, #88]	; 0x58
 8014800:	e007      	b.n	8014812 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014806:	f043 0210 	orr.w	r2, r3, #16
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 801480e:	2301      	movs	r3, #1
 8014810:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8014812:	7ffb      	ldrb	r3, [r7, #31]
}
 8014814:	4618      	mov	r0, r3
 8014816:	3724      	adds	r7, #36	; 0x24
 8014818:	46bd      	mov	sp, r7
 801481a:	bd90      	pop	{r4, r7, pc}
 801481c:	20000090 	.word	0x20000090
 8014820:	053e2d63 	.word	0x053e2d63
 8014824:	42028000 	.word	0x42028000
 8014828:	42028100 	.word	0x42028100
 801482c:	42028300 	.word	0x42028300
 8014830:	fff0c007 	.word	0xfff0c007

08014834 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b086      	sub	sp, #24
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8014840:	4850      	ldr	r0, [pc, #320]	; (8014984 <HAL_ADC_Start_DMA+0x150>)
 8014842:	f7ff fddf 	bl	8014404 <LL_ADC_GetMultimode>
 8014846:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	4618      	mov	r0, r3
 801484e:	f7ff fe7e 	bl	801454e <LL_ADC_REG_IsConversionOngoing>
 8014852:	4603      	mov	r3, r0
 8014854:	2b00      	cmp	r3, #0
 8014856:	f040 808e 	bne.w	8014976 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8014860:	2b01      	cmp	r3, #1
 8014862:	d101      	bne.n	8014868 <HAL_ADC_Start_DMA+0x34>
 8014864:	2302      	movs	r3, #2
 8014866:	e089      	b.n	801497c <HAL_ADC_Start_DMA+0x148>
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	2201      	movs	r2, #1
 801486c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d005      	beq.n	8014882 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	2b05      	cmp	r3, #5
 801487a:	d002      	beq.n	8014882 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	2b09      	cmp	r3, #9
 8014880:	d172      	bne.n	8014968 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8014882:	68f8      	ldr	r0, [r7, #12]
 8014884:	f000 feac 	bl	80155e0 <ADC_Enable>
 8014888:	4603      	mov	r3, r0
 801488a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 801488c:	7dfb      	ldrb	r3, [r7, #23]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d165      	bne.n	801495e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014896:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801489a:	f023 0301 	bic.w	r3, r3, #1
 801489e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	4a37      	ldr	r2, [pc, #220]	; (8014988 <HAL_ADC_Start_DMA+0x154>)
 80148ac:	4293      	cmp	r3, r2
 80148ae:	d002      	beq.n	80148b6 <HAL_ADC_Start_DMA+0x82>
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	e000      	b.n	80148b8 <HAL_ADC_Start_DMA+0x84>
 80148b6:	4b35      	ldr	r3, [pc, #212]	; (801498c <HAL_ADC_Start_DMA+0x158>)
 80148b8:	68fa      	ldr	r2, [r7, #12]
 80148ba:	6812      	ldr	r2, [r2, #0]
 80148bc:	4293      	cmp	r3, r2
 80148be:	d002      	beq.n	80148c6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d105      	bne.n	80148d2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d006      	beq.n	80148ec <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80148e2:	f023 0206 	bic.w	r2, r3, #6
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80148ea:	e002      	b.n	80148f2 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2200      	movs	r2, #0
 80148f0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148f6:	4a26      	ldr	r2, [pc, #152]	; (8014990 <HAL_ADC_Start_DMA+0x15c>)
 80148f8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148fe:	4a25      	ldr	r2, [pc, #148]	; (8014994 <HAL_ADC_Start_DMA+0x160>)
 8014900:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014906:	4a24      	ldr	r2, [pc, #144]	; (8014998 <HAL_ADC_Start_DMA+0x164>)
 8014908:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	221c      	movs	r2, #28
 8014910:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	2200      	movs	r2, #0
 8014916:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	685a      	ldr	r2, [r3, #4]
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f042 0210 	orr.w	r2, r2, #16
 8014928:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	68da      	ldr	r2, [r3, #12]
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	f042 0201 	orr.w	r2, r2, #1
 8014938:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	3340      	adds	r3, #64	; 0x40
 8014944:	4619      	mov	r1, r3
 8014946:	68ba      	ldr	r2, [r7, #8]
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f001 f9e7 	bl	8015d1c <HAL_DMA_Start_IT>
 801494e:	4603      	mov	r3, r0
 8014950:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	4618      	mov	r0, r3
 8014958:	f7ff fde5 	bl	8014526 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 801495c:	e00d      	b.n	801497a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2200      	movs	r2, #0
 8014962:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8014966:	e008      	b.n	801497a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8014968:	2301      	movs	r3, #1
 801496a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2200      	movs	r2, #0
 8014970:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8014974:	e001      	b.n	801497a <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014976:	2302      	movs	r3, #2
 8014978:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801497a:	7dfb      	ldrb	r3, [r7, #23]
}
 801497c:	4618      	mov	r0, r3
 801497e:	3718      	adds	r7, #24
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	42028300 	.word	0x42028300
 8014988:	42028100 	.word	0x42028100
 801498c:	42028000 	.word	0x42028000
 8014990:	080156ed 	.word	0x080156ed
 8014994:	080157c5 	.word	0x080157c5
 8014998:	080157e1 	.word	0x080157e1

0801499c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b08a      	sub	sp, #40	; 0x28
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80149a4:	2300      	movs	r3, #0
 80149a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	685b      	ldr	r3, [r3, #4]
 80149b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80149b8:	4882      	ldr	r0, [pc, #520]	; (8014bc4 <HAL_ADC_IRQHandler+0x228>)
 80149ba:	f7ff fd23 	bl	8014404 <LL_ADC_GetMultimode>
 80149be:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80149c0:	69fb      	ldr	r3, [r7, #28]
 80149c2:	f003 0302 	and.w	r3, r3, #2
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d017      	beq.n	80149fa <HAL_ADC_IRQHandler+0x5e>
 80149ca:	69bb      	ldr	r3, [r7, #24]
 80149cc:	f003 0302 	and.w	r3, r3, #2
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d012      	beq.n	80149fa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149d8:	f003 0310 	and.w	r3, r3, #16
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d105      	bne.n	80149ec <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149e4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 ff5f 	bl	80158b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2202      	movs	r2, #2
 80149f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80149fa:	69fb      	ldr	r3, [r7, #28]
 80149fc:	f003 0304 	and.w	r3, r3, #4
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d004      	beq.n	8014a0e <HAL_ADC_IRQHandler+0x72>
 8014a04:	69bb      	ldr	r3, [r7, #24]
 8014a06:	f003 0304 	and.w	r3, r3, #4
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d10a      	bne.n	8014a24 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8014a0e:	69fb      	ldr	r3, [r7, #28]
 8014a10:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	f000 8083 	beq.w	8014b20 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8014a1a:	69bb      	ldr	r3, [r7, #24]
 8014a1c:	f003 0308 	and.w	r3, r3, #8
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d07d      	beq.n	8014b20 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a28:	f003 0310 	and.w	r3, r3, #16
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d105      	bne.n	8014a3c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7ff fc3d 	bl	80142c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8014a46:	4603      	mov	r3, r0
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d062      	beq.n	8014b12 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4a5d      	ldr	r2, [pc, #372]	; (8014bc8 <HAL_ADC_IRQHandler+0x22c>)
 8014a52:	4293      	cmp	r3, r2
 8014a54:	d002      	beq.n	8014a5c <HAL_ADC_IRQHandler+0xc0>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	e000      	b.n	8014a5e <HAL_ADC_IRQHandler+0xc2>
 8014a5c:	4b5b      	ldr	r3, [pc, #364]	; (8014bcc <HAL_ADC_IRQHandler+0x230>)
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	6812      	ldr	r2, [r2, #0]
 8014a62:	4293      	cmp	r3, r2
 8014a64:	d008      	beq.n	8014a78 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d005      	beq.n	8014a78 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	2b05      	cmp	r3, #5
 8014a70:	d002      	beq.n	8014a78 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8014a72:	697b      	ldr	r3, [r7, #20]
 8014a74:	2b09      	cmp	r3, #9
 8014a76:	d104      	bne.n	8014a82 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	68db      	ldr	r3, [r3, #12]
 8014a7e:	623b      	str	r3, [r7, #32]
 8014a80:	e00c      	b.n	8014a9c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	4a50      	ldr	r2, [pc, #320]	; (8014bc8 <HAL_ADC_IRQHandler+0x22c>)
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d002      	beq.n	8014a92 <HAL_ADC_IRQHandler+0xf6>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	e000      	b.n	8014a94 <HAL_ADC_IRQHandler+0xf8>
 8014a92:	4b4e      	ldr	r3, [pc, #312]	; (8014bcc <HAL_ADC_IRQHandler+0x230>)
 8014a94:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8014a9c:	6a3b      	ldr	r3, [r7, #32]
 8014a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d135      	bne.n	8014b12 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	f003 0308 	and.w	r3, r3, #8
 8014ab0:	2b08      	cmp	r3, #8
 8014ab2:	d12e      	bne.n	8014b12 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7ff fd48 	bl	801454e <LL_ADC_REG_IsConversionOngoing>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d11a      	bne.n	8014afa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	685a      	ldr	r2, [r3, #4]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	f022 020c 	bic.w	r2, r2, #12
 8014ad2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d112      	bne.n	8014b12 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014af0:	f043 0201 	orr.w	r2, r3, #1
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	659a      	str	r2, [r3, #88]	; 0x58
 8014af8:	e00b      	b.n	8014b12 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014afe:	f043 0210 	orr.w	r2, r3, #16
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b0a:	f043 0201 	orr.w	r2, r3, #1
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f7ed fc40 	bl	8002398 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	220c      	movs	r2, #12
 8014b1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8014b20:	69fb      	ldr	r3, [r7, #28]
 8014b22:	f003 0320 	and.w	r3, r3, #32
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d004      	beq.n	8014b34 <HAL_ADC_IRQHandler+0x198>
 8014b2a:	69bb      	ldr	r3, [r7, #24]
 8014b2c:	f003 0320 	and.w	r3, r3, #32
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d10b      	bne.n	8014b4c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	f000 809f 	beq.w	8014c7e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f000 8099 	beq.w	8014c7e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b50:	f003 0310 	and.w	r3, r3, #16
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d105      	bne.n	8014b64 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7ff fbe8 	bl	801433e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8014b6e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7ff fba3 	bl	80142c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8014b7a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	4a11      	ldr	r2, [pc, #68]	; (8014bc8 <HAL_ADC_IRQHandler+0x22c>)
 8014b82:	4293      	cmp	r3, r2
 8014b84:	d002      	beq.n	8014b8c <HAL_ADC_IRQHandler+0x1f0>
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	e000      	b.n	8014b8e <HAL_ADC_IRQHandler+0x1f2>
 8014b8c:	4b0f      	ldr	r3, [pc, #60]	; (8014bcc <HAL_ADC_IRQHandler+0x230>)
 8014b8e:	687a      	ldr	r2, [r7, #4]
 8014b90:	6812      	ldr	r2, [r2, #0]
 8014b92:	4293      	cmp	r3, r2
 8014b94:	d008      	beq.n	8014ba8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d005      	beq.n	8014ba8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	2b06      	cmp	r3, #6
 8014ba0:	d002      	beq.n	8014ba8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	2b07      	cmp	r3, #7
 8014ba6:	d104      	bne.n	8014bb2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	68db      	ldr	r3, [r3, #12]
 8014bae:	623b      	str	r3, [r7, #32]
 8014bb0:	e013      	b.n	8014bda <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	4a04      	ldr	r2, [pc, #16]	; (8014bc8 <HAL_ADC_IRQHandler+0x22c>)
 8014bb8:	4293      	cmp	r3, r2
 8014bba:	d009      	beq.n	8014bd0 <HAL_ADC_IRQHandler+0x234>
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	e007      	b.n	8014bd2 <HAL_ADC_IRQHandler+0x236>
 8014bc2:	bf00      	nop
 8014bc4:	42028300 	.word	0x42028300
 8014bc8:	42028100 	.word	0x42028100
 8014bcc:	42028000 	.word	0x42028000
 8014bd0:	4b7d      	ldr	r3, [pc, #500]	; (8014dc8 <HAL_ADC_IRQHandler+0x42c>)
 8014bd2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8014bd4:	693b      	ldr	r3, [r7, #16]
 8014bd6:	68db      	ldr	r3, [r3, #12]
 8014bd8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d047      	beq.n	8014c70 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8014be0:	6a3b      	ldr	r3, [r7, #32]
 8014be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d007      	beq.n	8014bfa <HAL_ADC_IRQHandler+0x25e>
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d03f      	beq.n	8014c70 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8014bf0:	6a3b      	ldr	r3, [r7, #32]
 8014bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d13a      	bne.n	8014c70 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c04:	2b40      	cmp	r3, #64	; 0x40
 8014c06:	d133      	bne.n	8014c70 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8014c08:	6a3b      	ldr	r3, [r7, #32]
 8014c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d12e      	bne.n	8014c70 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7ff fcac 	bl	8014574 <LL_ADC_INJ_IsConversionOngoing>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d11a      	bne.n	8014c58 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	685a      	ldr	r2, [r3, #4]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014c30:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d112      	bne.n	8014c70 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c4e:	f043 0201 	orr.w	r2, r3, #1
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	659a      	str	r2, [r3, #88]	; 0x58
 8014c56:	e00b      	b.n	8014c70 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c5c:	f043 0210 	orr.w	r2, r3, #16
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c68:	f043 0201 	orr.w	r2, r3, #1
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f000 fdf5 	bl	8015860 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	2260      	movs	r2, #96	; 0x60
 8014c7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d011      	beq.n	8014cac <HAL_ADC_IRQHandler+0x310>
 8014c88:	69bb      	ldr	r3, [r7, #24]
 8014c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d00c      	beq.n	8014cac <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f000 f8a0 	bl	8014de4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2280      	movs	r2, #128	; 0x80
 8014caa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d012      	beq.n	8014cdc <HAL_ADC_IRQHandler+0x340>
 8014cb6:	69bb      	ldr	r3, [r7, #24]
 8014cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d00d      	beq.n	8014cdc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cc4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f000 fddb 	bl	8015888 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014cda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8014cdc:	69fb      	ldr	r3, [r7, #28]
 8014cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d012      	beq.n	8014d0c <HAL_ADC_IRQHandler+0x370>
 8014ce6:	69bb      	ldr	r3, [r7, #24]
 8014ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d00d      	beq.n	8014d0c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cf4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f000 fdcd 	bl	801589c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014d0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	f003 0310 	and.w	r3, r3, #16
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d036      	beq.n	8014d84 <HAL_ADC_IRQHandler+0x3e8>
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	f003 0310 	and.w	r3, r3, #16
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d031      	beq.n	8014d84 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d102      	bne.n	8014d2e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8014d28:	2301      	movs	r3, #1
 8014d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8014d2c:	e014      	b.n	8014d58 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d008      	beq.n	8014d46 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8014d34:	4825      	ldr	r0, [pc, #148]	; (8014dcc <HAL_ADC_IRQHandler+0x430>)
 8014d36:	f7ff fb73 	bl	8014420 <LL_ADC_GetMultiDMATransfer>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d00b      	beq.n	8014d58 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8014d40:	2301      	movs	r3, #1
 8014d42:	627b      	str	r3, [r7, #36]	; 0x24
 8014d44:	e008      	b.n	8014d58 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	68db      	ldr	r3, [r3, #12]
 8014d4c:	f003 0301 	and.w	r3, r3, #1
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d001      	beq.n	8014d58 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8014d54:	2301      	movs	r3, #1
 8014d56:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8014d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d5a:	2b01      	cmp	r3, #1
 8014d5c:	d10e      	bne.n	8014d7c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d62:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014d6e:	f043 0202 	orr.w	r2, r3, #2
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f000 f83e 	bl	8014df8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	2210      	movs	r2, #16
 8014d82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d018      	beq.n	8014dc0 <HAL_ADC_IRQHandler+0x424>
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d013      	beq.n	8014dc0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d9c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014da8:	f043 0208 	orr.w	r2, r3, #8
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014db8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f000 fd5a 	bl	8015874 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8014dc0:	bf00      	nop
 8014dc2:	3728      	adds	r7, #40	; 0x28
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	42028000 	.word	0x42028000
 8014dcc:	42028300 	.word	0x42028300

08014dd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b083      	sub	sp, #12
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8014dd8:	bf00      	nop
 8014dda:	370c      	adds	r7, #12
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr

08014de4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8014de4:	b480      	push	{r7}
 8014de6:	b083      	sub	sp, #12
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8014dec:	bf00      	nop
 8014dee:	370c      	adds	r7, #12
 8014df0:	46bd      	mov	sp, r7
 8014df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df6:	4770      	bx	lr

08014df8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8014df8:	b480      	push	{r7}
 8014dfa:	b083      	sub	sp, #12
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8014e00:	bf00      	nop
 8014e02:	370c      	adds	r7, #12
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr

08014e0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8014e0c:	b590      	push	{r4, r7, lr}
 8014e0e:	b0b7      	sub	sp, #220	; 0xdc
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014e16:	2300      	movs	r3, #0
 8014e18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8014e26:	2b01      	cmp	r3, #1
 8014e28:	d101      	bne.n	8014e2e <HAL_ADC_ConfigChannel+0x22>
 8014e2a:	2302      	movs	r3, #2
 8014e2c:	e3c1      	b.n	80155b2 <HAL_ADC_ConfigChannel+0x7a6>
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2201      	movs	r2, #1
 8014e32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7ff fb87 	bl	801454e <LL_ADC_REG_IsConversionOngoing>
 8014e40:	4603      	mov	r3, r0
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	f040 83a6 	bne.w	8015594 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	6818      	ldr	r0, [r3, #0]
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	6859      	ldr	r1, [r3, #4]
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	461a      	mov	r2, r3
 8014e56:	f7ff fa46 	bl	80142e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7ff fb75 	bl	801454e <LL_ADC_REG_IsConversionOngoing>
 8014e64:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7ff fb81 	bl	8014574 <LL_ADC_INJ_IsConversionOngoing>
 8014e72:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8014e76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f040 81c1 	bne.w	8015202 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8014e80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f040 81bc 	bne.w	8015202 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	689b      	ldr	r3, [r3, #8]
 8014e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e92:	d10f      	bne.n	8014eb4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6818      	ldr	r0, [r3, #0]
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	f7ff fa60 	bl	8014364 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7ff f9f4 	bl	801429a <LL_ADC_SetSamplingTimeCommonConfig>
 8014eb2:	e00e      	b.n	8014ed2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6818      	ldr	r0, [r3, #0]
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	6819      	ldr	r1, [r3, #0]
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	689b      	ldr	r3, [r3, #8]
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	f7ff fa4f 	bl	8014364 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2100      	movs	r1, #0
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7ff f9e4 	bl	801429a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	695a      	ldr	r2, [r3, #20]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	68db      	ldr	r3, [r3, #12]
 8014edc:	08db      	lsrs	r3, r3, #3
 8014ede:	f003 0303 	and.w	r3, r3, #3
 8014ee2:	005b      	lsls	r3, r3, #1
 8014ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8014ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	691b      	ldr	r3, [r3, #16]
 8014ef0:	2b04      	cmp	r3, #4
 8014ef2:	d00a      	beq.n	8014f0a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6818      	ldr	r0, [r3, #0]
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	6919      	ldr	r1, [r3, #16]
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	681a      	ldr	r2, [r3, #0]
 8014f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014f04:	f7ff f974 	bl	80141f0 <LL_ADC_SetOffset>
 8014f08:	e17b      	b.n	8015202 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2100      	movs	r1, #0
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7ff f991 	bl	8014238 <LL_ADC_GetOffsetChannel>
 8014f16:	4603      	mov	r3, r0
 8014f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d10a      	bne.n	8014f36 <HAL_ADC_ConfigChannel+0x12a>
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	2100      	movs	r1, #0
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7ff f986 	bl	8014238 <LL_ADC_GetOffsetChannel>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	0e9b      	lsrs	r3, r3, #26
 8014f30:	f003 021f 	and.w	r2, r3, #31
 8014f34:	e01e      	b.n	8014f74 <HAL_ADC_ConfigChannel+0x168>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	2100      	movs	r1, #0
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f7ff f97b 	bl	8014238 <LL_ADC_GetOffsetChannel>
 8014f42:	4603      	mov	r3, r0
 8014f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014f48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014f4c:	fa93 f3a3 	rbit	r3, r3
 8014f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8014f54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8014f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d101      	bne.n	8014f68 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8014f64:	2320      	movs	r3, #32
 8014f66:	e004      	b.n	8014f72 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8014f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f6c:	fab3 f383 	clz	r3, r3
 8014f70:	b2db      	uxtb	r3, r3
 8014f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d105      	bne.n	8014f8c <HAL_ADC_ConfigChannel+0x180>
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	0e9b      	lsrs	r3, r3, #26
 8014f86:	f003 031f 	and.w	r3, r3, #31
 8014f8a:	e018      	b.n	8014fbe <HAL_ADC_ConfigChannel+0x1b2>
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014f98:	fa93 f3a3 	rbit	r3, r3
 8014f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8014fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8014fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d101      	bne.n	8014fb4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8014fb0:	2320      	movs	r3, #32
 8014fb2:	e004      	b.n	8014fbe <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8014fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fb8:	fab3 f383 	clz	r3, r3
 8014fbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d106      	bne.n	8014fd0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	2100      	movs	r1, #0
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7ff f94a 	bl	8014264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2101      	movs	r1, #1
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7ff f92e 	bl	8014238 <LL_ADC_GetOffsetChannel>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d10a      	bne.n	8014ffc <HAL_ADC_ConfigChannel+0x1f0>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	2101      	movs	r1, #1
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7ff f923 	bl	8014238 <LL_ADC_GetOffsetChannel>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	0e9b      	lsrs	r3, r3, #26
 8014ff6:	f003 021f 	and.w	r2, r3, #31
 8014ffa:	e01e      	b.n	801503a <HAL_ADC_ConfigChannel+0x22e>
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	2101      	movs	r1, #1
 8015002:	4618      	mov	r0, r3
 8015004:	f7ff f918 	bl	8014238 <LL_ADC_GetOffsetChannel>
 8015008:	4603      	mov	r3, r0
 801500a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801500e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015012:	fa93 f3a3 	rbit	r3, r3
 8015016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801501a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801501e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8015022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015026:	2b00      	cmp	r3, #0
 8015028:	d101      	bne.n	801502e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 801502a:	2320      	movs	r3, #32
 801502c:	e004      	b.n	8015038 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 801502e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015032:	fab3 f383 	clz	r3, r3
 8015036:	b2db      	uxtb	r3, r3
 8015038:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015042:	2b00      	cmp	r3, #0
 8015044:	d105      	bne.n	8015052 <HAL_ADC_ConfigChannel+0x246>
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	0e9b      	lsrs	r3, r3, #26
 801504c:	f003 031f 	and.w	r3, r3, #31
 8015050:	e018      	b.n	8015084 <HAL_ADC_ConfigChannel+0x278>
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801505a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801505e:	fa93 f3a3 	rbit	r3, r3
 8015062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8015066:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801506a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801506e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015072:	2b00      	cmp	r3, #0
 8015074:	d101      	bne.n	801507a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8015076:	2320      	movs	r3, #32
 8015078:	e004      	b.n	8015084 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 801507a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801507e:	fab3 f383 	clz	r3, r3
 8015082:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8015084:	429a      	cmp	r2, r3
 8015086:	d106      	bne.n	8015096 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2200      	movs	r2, #0
 801508e:	2101      	movs	r1, #1
 8015090:	4618      	mov	r0, r3
 8015092:	f7ff f8e7 	bl	8014264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	2102      	movs	r1, #2
 801509c:	4618      	mov	r0, r3
 801509e:	f7ff f8cb 	bl	8014238 <LL_ADC_GetOffsetChannel>
 80150a2:	4603      	mov	r3, r0
 80150a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d10a      	bne.n	80150c2 <HAL_ADC_ConfigChannel+0x2b6>
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2102      	movs	r1, #2
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7ff f8c0 	bl	8014238 <LL_ADC_GetOffsetChannel>
 80150b8:	4603      	mov	r3, r0
 80150ba:	0e9b      	lsrs	r3, r3, #26
 80150bc:	f003 021f 	and.w	r2, r3, #31
 80150c0:	e01e      	b.n	8015100 <HAL_ADC_ConfigChannel+0x2f4>
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2102      	movs	r1, #2
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7ff f8b5 	bl	8014238 <LL_ADC_GetOffsetChannel>
 80150ce:	4603      	mov	r3, r0
 80150d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80150d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80150d8:	fa93 f3a3 	rbit	r3, r3
 80150dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80150e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80150e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80150e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d101      	bne.n	80150f4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80150f0:	2320      	movs	r3, #32
 80150f2:	e004      	b.n	80150fe <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80150f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80150f8:	fab3 f383 	clz	r3, r3
 80150fc:	b2db      	uxtb	r3, r3
 80150fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015108:	2b00      	cmp	r3, #0
 801510a:	d105      	bne.n	8015118 <HAL_ADC_ConfigChannel+0x30c>
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	0e9b      	lsrs	r3, r3, #26
 8015112:	f003 031f 	and.w	r3, r3, #31
 8015116:	e016      	b.n	8015146 <HAL_ADC_ConfigChannel+0x33a>
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015124:	fa93 f3a3 	rbit	r3, r3
 8015128:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801512a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801512c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8015130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015134:	2b00      	cmp	r3, #0
 8015136:	d101      	bne.n	801513c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8015138:	2320      	movs	r3, #32
 801513a:	e004      	b.n	8015146 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 801513c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015140:	fab3 f383 	clz	r3, r3
 8015144:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8015146:	429a      	cmp	r2, r3
 8015148:	d106      	bne.n	8015158 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	2200      	movs	r2, #0
 8015150:	2102      	movs	r1, #2
 8015152:	4618      	mov	r0, r3
 8015154:	f7ff f886 	bl	8014264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	2103      	movs	r1, #3
 801515e:	4618      	mov	r0, r3
 8015160:	f7ff f86a 	bl	8014238 <LL_ADC_GetOffsetChannel>
 8015164:	4603      	mov	r3, r0
 8015166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801516a:	2b00      	cmp	r3, #0
 801516c:	d10a      	bne.n	8015184 <HAL_ADC_ConfigChannel+0x378>
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2103      	movs	r1, #3
 8015174:	4618      	mov	r0, r3
 8015176:	f7ff f85f 	bl	8014238 <LL_ADC_GetOffsetChannel>
 801517a:	4603      	mov	r3, r0
 801517c:	0e9b      	lsrs	r3, r3, #26
 801517e:	f003 021f 	and.w	r2, r3, #31
 8015182:	e017      	b.n	80151b4 <HAL_ADC_ConfigChannel+0x3a8>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2103      	movs	r1, #3
 801518a:	4618      	mov	r0, r3
 801518c:	f7ff f854 	bl	8014238 <LL_ADC_GetOffsetChannel>
 8015190:	4603      	mov	r3, r0
 8015192:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015196:	fa93 f3a3 	rbit	r3, r3
 801519a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801519c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801519e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80151a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d101      	bne.n	80151aa <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80151a6:	2320      	movs	r3, #32
 80151a8:	e003      	b.n	80151b2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80151aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151ac:	fab3 f383 	clz	r3, r3
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d105      	bne.n	80151cc <HAL_ADC_ConfigChannel+0x3c0>
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	0e9b      	lsrs	r3, r3, #26
 80151c6:	f003 031f 	and.w	r3, r3, #31
 80151ca:	e011      	b.n	80151f0 <HAL_ADC_ConfigChannel+0x3e4>
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80151d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151d4:	fa93 f3a3 	rbit	r3, r3
 80151d8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80151da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80151dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80151de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d101      	bne.n	80151e8 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80151e4:	2320      	movs	r3, #32
 80151e6:	e003      	b.n	80151f0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80151e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151ea:	fab3 f383 	clz	r3, r3
 80151ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d106      	bne.n	8015202 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	2200      	movs	r2, #0
 80151fa:	2103      	movs	r1, #3
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7ff f831 	bl	8014264 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	4618      	mov	r0, r3
 8015208:	f7ff f97a 	bl	8014500 <LL_ADC_IsEnabled>
 801520c:	4603      	mov	r3, r0
 801520e:	2b00      	cmp	r3, #0
 8015210:	f040 81c9 	bne.w	80155a6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6818      	ldr	r0, [r3, #0]
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	6819      	ldr	r1, [r3, #0]
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	68db      	ldr	r3, [r3, #12]
 8015220:	461a      	mov	r2, r3
 8015222:	f7ff f8cb 	bl	80143bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	68db      	ldr	r3, [r3, #12]
 801522a:	4a8f      	ldr	r2, [pc, #572]	; (8015468 <HAL_ADC_ConfigChannel+0x65c>)
 801522c:	4293      	cmp	r3, r2
 801522e:	f040 8131 	bne.w	8015494 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801523e:	2b00      	cmp	r3, #0
 8015240:	d10b      	bne.n	801525a <HAL_ADC_ConfigChannel+0x44e>
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	0e9b      	lsrs	r3, r3, #26
 8015248:	3301      	adds	r3, #1
 801524a:	f003 031f 	and.w	r3, r3, #31
 801524e:	2b09      	cmp	r3, #9
 8015250:	bf94      	ite	ls
 8015252:	2301      	movls	r3, #1
 8015254:	2300      	movhi	r3, #0
 8015256:	b2db      	uxtb	r3, r3
 8015258:	e019      	b.n	801528e <HAL_ADC_ConfigChannel+0x482>
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015262:	fa93 f3a3 	rbit	r3, r3
 8015266:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8015268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801526a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801526c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801526e:	2b00      	cmp	r3, #0
 8015270:	d101      	bne.n	8015276 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8015272:	2320      	movs	r3, #32
 8015274:	e003      	b.n	801527e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8015276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015278:	fab3 f383 	clz	r3, r3
 801527c:	b2db      	uxtb	r3, r3
 801527e:	3301      	adds	r3, #1
 8015280:	f003 031f 	and.w	r3, r3, #31
 8015284:	2b09      	cmp	r3, #9
 8015286:	bf94      	ite	ls
 8015288:	2301      	movls	r3, #1
 801528a:	2300      	movhi	r3, #0
 801528c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801528e:	2b00      	cmp	r3, #0
 8015290:	d079      	beq.n	8015386 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801529a:	2b00      	cmp	r3, #0
 801529c:	d107      	bne.n	80152ae <HAL_ADC_ConfigChannel+0x4a2>
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	0e9b      	lsrs	r3, r3, #26
 80152a4:	3301      	adds	r3, #1
 80152a6:	069b      	lsls	r3, r3, #26
 80152a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80152ac:	e015      	b.n	80152da <HAL_ADC_ConfigChannel+0x4ce>
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80152b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152b6:	fa93 f3a3 	rbit	r3, r3
 80152ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80152bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152be:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80152c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d101      	bne.n	80152ca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80152c6:	2320      	movs	r3, #32
 80152c8:	e003      	b.n	80152d2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80152ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152cc:	fab3 f383 	clz	r3, r3
 80152d0:	b2db      	uxtb	r3, r3
 80152d2:	3301      	adds	r3, #1
 80152d4:	069b      	lsls	r3, r3, #26
 80152d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d109      	bne.n	80152fa <HAL_ADC_ConfigChannel+0x4ee>
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	0e9b      	lsrs	r3, r3, #26
 80152ec:	3301      	adds	r3, #1
 80152ee:	f003 031f 	and.w	r3, r3, #31
 80152f2:	2101      	movs	r1, #1
 80152f4:	fa01 f303 	lsl.w	r3, r1, r3
 80152f8:	e017      	b.n	801532a <HAL_ADC_ConfigChannel+0x51e>
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015302:	fa93 f3a3 	rbit	r3, r3
 8015306:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8015308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801530a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801530c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801530e:	2b00      	cmp	r3, #0
 8015310:	d101      	bne.n	8015316 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8015312:	2320      	movs	r3, #32
 8015314:	e003      	b.n	801531e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8015316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015318:	fab3 f383 	clz	r3, r3
 801531c:	b2db      	uxtb	r3, r3
 801531e:	3301      	adds	r3, #1
 8015320:	f003 031f 	and.w	r3, r3, #31
 8015324:	2101      	movs	r1, #1
 8015326:	fa01 f303 	lsl.w	r3, r1, r3
 801532a:	ea42 0103 	orr.w	r1, r2, r3
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015336:	2b00      	cmp	r3, #0
 8015338:	d10a      	bne.n	8015350 <HAL_ADC_ConfigChannel+0x544>
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	0e9b      	lsrs	r3, r3, #26
 8015340:	3301      	adds	r3, #1
 8015342:	f003 021f 	and.w	r2, r3, #31
 8015346:	4613      	mov	r3, r2
 8015348:	005b      	lsls	r3, r3, #1
 801534a:	4413      	add	r3, r2
 801534c:	051b      	lsls	r3, r3, #20
 801534e:	e018      	b.n	8015382 <HAL_ADC_ConfigChannel+0x576>
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015358:	fa93 f3a3 	rbit	r3, r3
 801535c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015360:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8015362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015364:	2b00      	cmp	r3, #0
 8015366:	d101      	bne.n	801536c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8015368:	2320      	movs	r3, #32
 801536a:	e003      	b.n	8015374 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 801536c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801536e:	fab3 f383 	clz	r3, r3
 8015372:	b2db      	uxtb	r3, r3
 8015374:	3301      	adds	r3, #1
 8015376:	f003 021f 	and.w	r2, r3, #31
 801537a:	4613      	mov	r3, r2
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	4413      	add	r3, r2
 8015380:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015382:	430b      	orrs	r3, r1
 8015384:	e081      	b.n	801548a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801538e:	2b00      	cmp	r3, #0
 8015390:	d107      	bne.n	80153a2 <HAL_ADC_ConfigChannel+0x596>
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	0e9b      	lsrs	r3, r3, #26
 8015398:	3301      	adds	r3, #1
 801539a:	069b      	lsls	r3, r3, #26
 801539c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80153a0:	e015      	b.n	80153ce <HAL_ADC_ConfigChannel+0x5c2>
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80153a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153aa:	fa93 f3a3 	rbit	r3, r3
 80153ae:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80153b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80153b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d101      	bne.n	80153be <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80153ba:	2320      	movs	r3, #32
 80153bc:	e003      	b.n	80153c6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80153be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c0:	fab3 f383 	clz	r3, r3
 80153c4:	b2db      	uxtb	r3, r3
 80153c6:	3301      	adds	r3, #1
 80153c8:	069b      	lsls	r3, r3, #26
 80153ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d109      	bne.n	80153ee <HAL_ADC_ConfigChannel+0x5e2>
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	0e9b      	lsrs	r3, r3, #26
 80153e0:	3301      	adds	r3, #1
 80153e2:	f003 031f 	and.w	r3, r3, #31
 80153e6:	2101      	movs	r1, #1
 80153e8:	fa01 f303 	lsl.w	r3, r1, r3
 80153ec:	e017      	b.n	801541e <HAL_ADC_ConfigChannel+0x612>
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80153f4:	6a3b      	ldr	r3, [r7, #32]
 80153f6:	fa93 f3a3 	rbit	r3, r3
 80153fa:	61fb      	str	r3, [r7, #28]
  return result;
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8015400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015402:	2b00      	cmp	r3, #0
 8015404:	d101      	bne.n	801540a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8015406:	2320      	movs	r3, #32
 8015408:	e003      	b.n	8015412 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 801540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540c:	fab3 f383 	clz	r3, r3
 8015410:	b2db      	uxtb	r3, r3
 8015412:	3301      	adds	r3, #1
 8015414:	f003 031f 	and.w	r3, r3, #31
 8015418:	2101      	movs	r1, #1
 801541a:	fa01 f303 	lsl.w	r3, r1, r3
 801541e:	ea42 0103 	orr.w	r1, r2, r3
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801542a:	2b00      	cmp	r3, #0
 801542c:	d10d      	bne.n	801544a <HAL_ADC_ConfigChannel+0x63e>
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	0e9b      	lsrs	r3, r3, #26
 8015434:	3301      	adds	r3, #1
 8015436:	f003 021f 	and.w	r2, r3, #31
 801543a:	4613      	mov	r3, r2
 801543c:	005b      	lsls	r3, r3, #1
 801543e:	4413      	add	r3, r2
 8015440:	3b1e      	subs	r3, #30
 8015442:	051b      	lsls	r3, r3, #20
 8015444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015448:	e01e      	b.n	8015488 <HAL_ADC_ConfigChannel+0x67c>
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	fa93 f3a3 	rbit	r3, r3
 8015456:	613b      	str	r3, [r7, #16]
  return result;
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d104      	bne.n	801546c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8015462:	2320      	movs	r3, #32
 8015464:	e006      	b.n	8015474 <HAL_ADC_ConfigChannel+0x668>
 8015466:	bf00      	nop
 8015468:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 801546c:	69bb      	ldr	r3, [r7, #24]
 801546e:	fab3 f383 	clz	r3, r3
 8015472:	b2db      	uxtb	r3, r3
 8015474:	3301      	adds	r3, #1
 8015476:	f003 021f 	and.w	r2, r3, #31
 801547a:	4613      	mov	r3, r2
 801547c:	005b      	lsls	r3, r3, #1
 801547e:	4413      	add	r3, r2
 8015480:	3b1e      	subs	r3, #30
 8015482:	051b      	lsls	r3, r3, #20
 8015484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015488:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 801548a:	683a      	ldr	r2, [r7, #0]
 801548c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801548e:	4619      	mov	r1, r3
 8015490:	f7fe ff68 	bl	8014364 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	681a      	ldr	r2, [r3, #0]
 8015498:	4b48      	ldr	r3, [pc, #288]	; (80155bc <HAL_ADC_ConfigChannel+0x7b0>)
 801549a:	4013      	ands	r3, r2
 801549c:	2b00      	cmp	r3, #0
 801549e:	f000 8082 	beq.w	80155a6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80154a2:	4847      	ldr	r0, [pc, #284]	; (80155c0 <HAL_ADC_ConfigChannel+0x7b4>)
 80154a4:	f7fe fe96 	bl	80141d4 <LL_ADC_GetCommonPathInternalCh>
 80154a8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80154ac:	4845      	ldr	r0, [pc, #276]	; (80155c4 <HAL_ADC_ConfigChannel+0x7b8>)
 80154ae:	f7ff f827 	bl	8014500 <LL_ADC_IsEnabled>
 80154b2:	4604      	mov	r4, r0
 80154b4:	4844      	ldr	r0, [pc, #272]	; (80155c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80154b6:	f7ff f823 	bl	8014500 <LL_ADC_IsEnabled>
 80154ba:	4603      	mov	r3, r0
 80154bc:	4323      	orrs	r3, r4
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d15e      	bne.n	8015580 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	4a41      	ldr	r2, [pc, #260]	; (80155cc <HAL_ADC_ConfigChannel+0x7c0>)
 80154c8:	4293      	cmp	r3, r2
 80154ca:	d127      	bne.n	801551c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80154cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80154d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d121      	bne.n	801551c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4a39      	ldr	r2, [pc, #228]	; (80155c4 <HAL_ADC_ConfigChannel+0x7b8>)
 80154de:	4293      	cmp	r3, r2
 80154e0:	d161      	bne.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80154e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80154e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80154ea:	4619      	mov	r1, r3
 80154ec:	4834      	ldr	r0, [pc, #208]	; (80155c0 <HAL_ADC_ConfigChannel+0x7b4>)
 80154ee:	f7fe fe5e 	bl	80141ae <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80154f2:	4b37      	ldr	r3, [pc, #220]	; (80155d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	099b      	lsrs	r3, r3, #6
 80154f8:	4a36      	ldr	r2, [pc, #216]	; (80155d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80154fa:	fba2 2303 	umull	r2, r3, r2, r3
 80154fe:	099b      	lsrs	r3, r3, #6
 8015500:	1c5a      	adds	r2, r3, #1
 8015502:	4613      	mov	r3, r2
 8015504:	005b      	lsls	r3, r3, #1
 8015506:	4413      	add	r3, r2
 8015508:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 801550a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 801550c:	e002      	b.n	8015514 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	3b01      	subs	r3, #1
 8015512:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d1f9      	bne.n	801550e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801551a:	e044      	b.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	4a2d      	ldr	r2, [pc, #180]	; (80155d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8015522:	4293      	cmp	r3, r2
 8015524:	d113      	bne.n	801554e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8015526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801552a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801552e:	2b00      	cmp	r3, #0
 8015530:	d10d      	bne.n	801554e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	4a23      	ldr	r2, [pc, #140]	; (80155c4 <HAL_ADC_ConfigChannel+0x7b8>)
 8015538:	4293      	cmp	r3, r2
 801553a:	d134      	bne.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801553c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015544:	4619      	mov	r1, r3
 8015546:	481e      	ldr	r0, [pc, #120]	; (80155c0 <HAL_ADC_ConfigChannel+0x7b4>)
 8015548:	f7fe fe31 	bl	80141ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801554c:	e02b      	b.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	4a22      	ldr	r2, [pc, #136]	; (80155dc <HAL_ADC_ConfigChannel+0x7d0>)
 8015554:	4293      	cmp	r3, r2
 8015556:	d126      	bne.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8015558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801555c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015560:	2b00      	cmp	r3, #0
 8015562:	d120      	bne.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	4a16      	ldr	r2, [pc, #88]	; (80155c4 <HAL_ADC_ConfigChannel+0x7b8>)
 801556a:	4293      	cmp	r3, r2
 801556c:	d11b      	bne.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801556e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015572:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015576:	4619      	mov	r1, r3
 8015578:	4811      	ldr	r0, [pc, #68]	; (80155c0 <HAL_ADC_ConfigChannel+0x7b4>)
 801557a:	f7fe fe18 	bl	80141ae <LL_ADC_SetCommonPathInternalCh>
 801557e:	e012      	b.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015584:	f043 0220 	orr.w	r2, r3, #32
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 801558c:	2301      	movs	r3, #1
 801558e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8015592:	e008      	b.n	80155a6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015598:	f043 0220 	orr.w	r2, r3, #32
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80155a0:	2301      	movs	r3, #1
 80155a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2200      	movs	r2, #0
 80155aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80155ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	37dc      	adds	r7, #220	; 0xdc
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd90      	pop	{r4, r7, pc}
 80155ba:	bf00      	nop
 80155bc:	80080000 	.word	0x80080000
 80155c0:	42028300 	.word	0x42028300
 80155c4:	42028000 	.word	0x42028000
 80155c8:	42028100 	.word	0x42028100
 80155cc:	c7520000 	.word	0xc7520000
 80155d0:	20000090 	.word	0x20000090
 80155d4:	053e2d63 	.word	0x053e2d63
 80155d8:	cb840000 	.word	0xcb840000
 80155dc:	80000001 	.word	0x80000001

080155e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80155e8:	2300      	movs	r3, #0
 80155ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7fe ff85 	bl	8014500 <LL_ADC_IsEnabled>
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d169      	bne.n	80156d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	689a      	ldr	r2, [r3, #8]
 8015602:	4b36      	ldr	r3, [pc, #216]	; (80156dc <ADC_Enable+0xfc>)
 8015604:	4013      	ands	r3, r2
 8015606:	2b00      	cmp	r3, #0
 8015608:	d00d      	beq.n	8015626 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801560e:	f043 0210 	orr.w	r2, r3, #16
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801561a:	f043 0201 	orr.w	r2, r3, #1
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8015622:	2301      	movs	r3, #1
 8015624:	e055      	b.n	80156d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	4618      	mov	r0, r3
 801562c:	f7fe ff54 	bl	80144d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8015630:	482b      	ldr	r0, [pc, #172]	; (80156e0 <ADC_Enable+0x100>)
 8015632:	f7fe fdcf 	bl	80141d4 <LL_ADC_GetCommonPathInternalCh>
 8015636:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8015638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 801563c:	2b00      	cmp	r3, #0
 801563e:	d013      	beq.n	8015668 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8015640:	4b28      	ldr	r3, [pc, #160]	; (80156e4 <ADC_Enable+0x104>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	099b      	lsrs	r3, r3, #6
 8015646:	4a28      	ldr	r2, [pc, #160]	; (80156e8 <ADC_Enable+0x108>)
 8015648:	fba2 2303 	umull	r2, r3, r2, r3
 801564c:	099b      	lsrs	r3, r3, #6
 801564e:	1c5a      	adds	r2, r3, #1
 8015650:	4613      	mov	r3, r2
 8015652:	005b      	lsls	r3, r3, #1
 8015654:	4413      	add	r3, r2
 8015656:	009b      	lsls	r3, r3, #2
 8015658:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 801565a:	e002      	b.n	8015662 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	3b01      	subs	r3, #1
 8015660:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d1f9      	bne.n	801565c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8015668:	f7fe fd82 	bl	8014170 <HAL_GetTick>
 801566c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801566e:	e028      	b.n	80156c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	4618      	mov	r0, r3
 8015676:	f7fe ff43 	bl	8014500 <LL_ADC_IsEnabled>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d104      	bne.n	801568a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	4618      	mov	r0, r3
 8015686:	f7fe ff27 	bl	80144d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801568a:	f7fe fd71 	bl	8014170 <HAL_GetTick>
 801568e:	4602      	mov	r2, r0
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	1ad3      	subs	r3, r2, r3
 8015694:	2b02      	cmp	r3, #2
 8015696:	d914      	bls.n	80156c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	f003 0301 	and.w	r3, r3, #1
 80156a2:	2b01      	cmp	r3, #1
 80156a4:	d00d      	beq.n	80156c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156aa:	f043 0210 	orr.w	r2, r3, #16
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80156b6:	f043 0201 	orr.w	r2, r3, #1
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80156be:	2301      	movs	r3, #1
 80156c0:	e007      	b.n	80156d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	f003 0301 	and.w	r3, r3, #1
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d1cf      	bne.n	8015670 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80156d0:	2300      	movs	r3, #0
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	3710      	adds	r7, #16
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}
 80156da:	bf00      	nop
 80156dc:	8000003f 	.word	0x8000003f
 80156e0:	42028300 	.word	0x42028300
 80156e4:	20000090 	.word	0x20000090
 80156e8:	053e2d63 	.word	0x053e2d63

080156ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015702:	2b00      	cmp	r3, #0
 8015704:	d14b      	bne.n	801579e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801570a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f003 0308 	and.w	r3, r3, #8
 801571c:	2b00      	cmp	r3, #0
 801571e:	d021      	beq.n	8015764 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	4618      	mov	r0, r3
 8015726:	f7fe fdcb 	bl	80142c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 801572a:	4603      	mov	r3, r0
 801572c:	2b00      	cmp	r3, #0
 801572e:	d032      	beq.n	8015796 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	68db      	ldr	r3, [r3, #12]
 8015736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801573a:	2b00      	cmp	r3, #0
 801573c:	d12b      	bne.n	8015796 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801574e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015752:	2b00      	cmp	r3, #0
 8015754:	d11f      	bne.n	8015796 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801575a:	f043 0201 	orr.w	r2, r3, #1
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	659a      	str	r2, [r3, #88]	; 0x58
 8015762:	e018      	b.n	8015796 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	f003 0302 	and.w	r3, r3, #2
 801576e:	2b00      	cmp	r3, #0
 8015770:	d111      	bne.n	8015796 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015786:	2b00      	cmp	r3, #0
 8015788:	d105      	bne.n	8015796 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801578e:	f043 0201 	orr.w	r2, r3, #1
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8015796:	68f8      	ldr	r0, [r7, #12]
 8015798:	f7ec fdfe 	bl	8002398 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801579c:	e00e      	b.n	80157bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157a2:	f003 0310 	and.w	r3, r3, #16
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d003      	beq.n	80157b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80157aa:	68f8      	ldr	r0, [r7, #12]
 80157ac:	f7ff fb24 	bl	8014df8 <HAL_ADC_ErrorCallback>
}
 80157b0:	e004      	b.n	80157bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	4798      	blx	r3
}
 80157bc:	bf00      	nop
 80157be:	3710      	adds	r7, #16
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80157d2:	68f8      	ldr	r0, [r7, #12]
 80157d4:	f7ff fafc 	bl	8014dd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80157d8:	bf00      	nop
 80157da:	3710      	adds	r7, #16
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}

080157e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157fe:	f043 0204 	orr.w	r2, r3, #4
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f7ff faf6 	bl	8014df8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801580c:	bf00      	nop
 801580e:	3710      	adds	r7, #16
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}

08015814 <LL_ADC_IsEnabled>:
{
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	689b      	ldr	r3, [r3, #8]
 8015820:	f003 0301 	and.w	r3, r3, #1
 8015824:	2b01      	cmp	r3, #1
 8015826:	d101      	bne.n	801582c <LL_ADC_IsEnabled+0x18>
 8015828:	2301      	movs	r3, #1
 801582a:	e000      	b.n	801582e <LL_ADC_IsEnabled+0x1a>
 801582c:	2300      	movs	r3, #0
}
 801582e:	4618      	mov	r0, r3
 8015830:	370c      	adds	r7, #12
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr

0801583a <LL_ADC_REG_IsConversionOngoing>:
{
 801583a:	b480      	push	{r7}
 801583c:	b083      	sub	sp, #12
 801583e:	af00      	add	r7, sp, #0
 8015840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	689b      	ldr	r3, [r3, #8]
 8015846:	f003 0304 	and.w	r3, r3, #4
 801584a:	2b04      	cmp	r3, #4
 801584c:	d101      	bne.n	8015852 <LL_ADC_REG_IsConversionOngoing+0x18>
 801584e:	2301      	movs	r3, #1
 8015850:	e000      	b.n	8015854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8015852:	2300      	movs	r3, #0
}
 8015854:	4618      	mov	r0, r3
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr

08015860 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8015860:	b480      	push	{r7}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8015868:	bf00      	nop
 801586a:	370c      	adds	r7, #12
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr

08015874 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8015874:	b480      	push	{r7}
 8015876:	b083      	sub	sp, #12
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801587c:	bf00      	nop
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr

08015888 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8015888:	b480      	push	{r7}
 801588a:	b083      	sub	sp, #12
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8015890:	bf00      	nop
 8015892:	370c      	adds	r7, #12
 8015894:	46bd      	mov	sp, r7
 8015896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589a:	4770      	bx	lr

0801589c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801589c:	b480      	push	{r7}
 801589e:	b083      	sub	sp, #12
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80158a4:	bf00      	nop
 80158a6:	370c      	adds	r7, #12
 80158a8:	46bd      	mov	sp, r7
 80158aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ae:	4770      	bx	lr

080158b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80158b0:	b480      	push	{r7}
 80158b2:	b083      	sub	sp, #12
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80158b8:	bf00      	nop
 80158ba:	370c      	adds	r7, #12
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr

080158c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80158c4:	b590      	push	{r4, r7, lr}
 80158c6:	b0a1      	sub	sp, #132	; 0x84
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80158ce:	2300      	movs	r3, #0
 80158d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80158da:	2b01      	cmp	r3, #1
 80158dc:	d101      	bne.n	80158e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80158de:	2302      	movs	r3, #2
 80158e0:	e089      	b.n	80159f6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2201      	movs	r2, #1
 80158e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80158ea:	2300      	movs	r3, #0
 80158ec:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80158ee:	2300      	movs	r3, #0
 80158f0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	4a42      	ldr	r2, [pc, #264]	; (8015a00 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80158f8:	4293      	cmp	r3, r2
 80158fa:	d102      	bne.n	8015902 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80158fc:	4b41      	ldr	r3, [pc, #260]	; (8015a04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80158fe:	60fb      	str	r3, [r7, #12]
 8015900:	e001      	b.n	8015906 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8015902:	2300      	movs	r3, #0
 8015904:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d10b      	bne.n	8015924 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015910:	f043 0220 	orr.w	r2, r3, #32
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2200      	movs	r2, #0
 801591c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8015920:	2301      	movs	r3, #1
 8015922:	e068      	b.n	80159f6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	4618      	mov	r0, r3
 8015928:	f7ff ff87 	bl	801583a <LL_ADC_REG_IsConversionOngoing>
 801592c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	4618      	mov	r0, r3
 8015934:	f7ff ff81 	bl	801583a <LL_ADC_REG_IsConversionOngoing>
 8015938:	4603      	mov	r3, r0
 801593a:	2b00      	cmp	r3, #0
 801593c:	d14a      	bne.n	80159d4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 801593e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015940:	2b00      	cmp	r3, #0
 8015942:	d147      	bne.n	80159d4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8015944:	4b30      	ldr	r3, [pc, #192]	; (8015a08 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8015946:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d027      	beq.n	80159a0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8015950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015952:	689b      	ldr	r3, [r3, #8]
 8015954:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	6859      	ldr	r1, [r3, #4]
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015962:	035b      	lsls	r3, r3, #13
 8015964:	430b      	orrs	r3, r1
 8015966:	431a      	orrs	r2, r3
 8015968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801596a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801596c:	4824      	ldr	r0, [pc, #144]	; (8015a00 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 801596e:	f7ff ff51 	bl	8015814 <LL_ADC_IsEnabled>
 8015972:	4604      	mov	r4, r0
 8015974:	4823      	ldr	r0, [pc, #140]	; (8015a04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8015976:	f7ff ff4d 	bl	8015814 <LL_ADC_IsEnabled>
 801597a:	4603      	mov	r3, r0
 801597c:	4323      	orrs	r3, r4
 801597e:	2b00      	cmp	r3, #0
 8015980:	d132      	bne.n	80159e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8015982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015984:	689b      	ldr	r3, [r3, #8]
 8015986:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801598a:	f023 030f 	bic.w	r3, r3, #15
 801598e:	683a      	ldr	r2, [r7, #0]
 8015990:	6811      	ldr	r1, [r2, #0]
 8015992:	683a      	ldr	r2, [r7, #0]
 8015994:	6892      	ldr	r2, [r2, #8]
 8015996:	430a      	orrs	r2, r1
 8015998:	431a      	orrs	r2, r3
 801599a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801599c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801599e:	e023      	b.n	80159e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80159a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159a2:	689b      	ldr	r3, [r3, #8]
 80159a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80159a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80159ac:	4814      	ldr	r0, [pc, #80]	; (8015a00 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80159ae:	f7ff ff31 	bl	8015814 <LL_ADC_IsEnabled>
 80159b2:	4604      	mov	r4, r0
 80159b4:	4813      	ldr	r0, [pc, #76]	; (8015a04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80159b6:	f7ff ff2d 	bl	8015814 <LL_ADC_IsEnabled>
 80159ba:	4603      	mov	r3, r0
 80159bc:	4323      	orrs	r3, r4
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d112      	bne.n	80159e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80159c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159c4:	689b      	ldr	r3, [r3, #8]
 80159c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80159ca:	f023 030f 	bic.w	r3, r3, #15
 80159ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80159d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80159d2:	e009      	b.n	80159e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159d8:	f043 0220 	orr.w	r2, r3, #32
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80159e0:	2301      	movs	r3, #1
 80159e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80159e6:	e000      	b.n	80159ea <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80159e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2200      	movs	r2, #0
 80159ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80159f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3784      	adds	r7, #132	; 0x84
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd90      	pop	{r4, r7, pc}
 80159fe:	bf00      	nop
 8015a00:	42028000 	.word	0x42028000
 8015a04:	42028100 	.word	0x42028100
 8015a08:	42028300 	.word	0x42028300

08015a0c <__NVIC_SetPriorityGrouping>:
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b085      	sub	sp, #20
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f003 0307 	and.w	r3, r3, #7
 8015a1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015a1c:	4b0c      	ldr	r3, [pc, #48]	; (8015a50 <__NVIC_SetPriorityGrouping+0x44>)
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015a22:	68ba      	ldr	r2, [r7, #8]
 8015a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015a28:	4013      	ands	r3, r2
 8015a2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015a3e:	4a04      	ldr	r2, [pc, #16]	; (8015a50 <__NVIC_SetPriorityGrouping+0x44>)
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	60d3      	str	r3, [r2, #12]
}
 8015a44:	bf00      	nop
 8015a46:	3714      	adds	r7, #20
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4e:	4770      	bx	lr
 8015a50:	e000ed00 	.word	0xe000ed00

08015a54 <__NVIC_GetPriorityGrouping>:
{
 8015a54:	b480      	push	{r7}
 8015a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015a58:	4b04      	ldr	r3, [pc, #16]	; (8015a6c <__NVIC_GetPriorityGrouping+0x18>)
 8015a5a:	68db      	ldr	r3, [r3, #12]
 8015a5c:	0a1b      	lsrs	r3, r3, #8
 8015a5e:	f003 0307 	and.w	r3, r3, #7
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr
 8015a6c:	e000ed00 	.word	0xe000ed00

08015a70 <__NVIC_EnableIRQ>:
{
 8015a70:	b480      	push	{r7}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	db0b      	blt.n	8015a9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015a82:	79fb      	ldrb	r3, [r7, #7]
 8015a84:	f003 021f 	and.w	r2, r3, #31
 8015a88:	4907      	ldr	r1, [pc, #28]	; (8015aa8 <__NVIC_EnableIRQ+0x38>)
 8015a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a8e:	095b      	lsrs	r3, r3, #5
 8015a90:	2001      	movs	r0, #1
 8015a92:	fa00 f202 	lsl.w	r2, r0, r2
 8015a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015a9a:	bf00      	nop
 8015a9c:	370c      	adds	r7, #12
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa4:	4770      	bx	lr
 8015aa6:	bf00      	nop
 8015aa8:	e000e100 	.word	0xe000e100

08015aac <__NVIC_SetPriority>:
{
 8015aac:	b480      	push	{r7}
 8015aae:	b083      	sub	sp, #12
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	6039      	str	r1, [r7, #0]
 8015ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	db0a      	blt.n	8015ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	b2da      	uxtb	r2, r3
 8015ac4:	490c      	ldr	r1, [pc, #48]	; (8015af8 <__NVIC_SetPriority+0x4c>)
 8015ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015aca:	0152      	lsls	r2, r2, #5
 8015acc:	b2d2      	uxtb	r2, r2
 8015ace:	440b      	add	r3, r1
 8015ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015ad4:	e00a      	b.n	8015aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	b2da      	uxtb	r2, r3
 8015ada:	4908      	ldr	r1, [pc, #32]	; (8015afc <__NVIC_SetPriority+0x50>)
 8015adc:	79fb      	ldrb	r3, [r7, #7]
 8015ade:	f003 030f 	and.w	r3, r3, #15
 8015ae2:	3b04      	subs	r3, #4
 8015ae4:	0152      	lsls	r2, r2, #5
 8015ae6:	b2d2      	uxtb	r2, r2
 8015ae8:	440b      	add	r3, r1
 8015aea:	761a      	strb	r2, [r3, #24]
}
 8015aec:	bf00      	nop
 8015aee:	370c      	adds	r7, #12
 8015af0:	46bd      	mov	sp, r7
 8015af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af6:	4770      	bx	lr
 8015af8:	e000e100 	.word	0xe000e100
 8015afc:	e000ed00 	.word	0xe000ed00

08015b00 <NVIC_EncodePriority>:
{
 8015b00:	b480      	push	{r7}
 8015b02:	b089      	sub	sp, #36	; 0x24
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	60f8      	str	r0, [r7, #12]
 8015b08:	60b9      	str	r1, [r7, #8]
 8015b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f003 0307 	and.w	r3, r3, #7
 8015b12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015b14:	69fb      	ldr	r3, [r7, #28]
 8015b16:	f1c3 0307 	rsb	r3, r3, #7
 8015b1a:	2b03      	cmp	r3, #3
 8015b1c:	bf28      	it	cs
 8015b1e:	2303      	movcs	r3, #3
 8015b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015b22:	69fb      	ldr	r3, [r7, #28]
 8015b24:	3303      	adds	r3, #3
 8015b26:	2b06      	cmp	r3, #6
 8015b28:	d902      	bls.n	8015b30 <NVIC_EncodePriority+0x30>
 8015b2a:	69fb      	ldr	r3, [r7, #28]
 8015b2c:	3b04      	subs	r3, #4
 8015b2e:	e000      	b.n	8015b32 <NVIC_EncodePriority+0x32>
 8015b30:	2300      	movs	r3, #0
 8015b32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015b34:	f04f 32ff 	mov.w	r2, #4294967295
 8015b38:	69bb      	ldr	r3, [r7, #24]
 8015b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8015b3e:	43da      	mvns	r2, r3
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	401a      	ands	r2, r3
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015b48:	f04f 31ff 	mov.w	r1, #4294967295
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8015b52:	43d9      	mvns	r1, r3
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015b58:	4313      	orrs	r3, r2
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3724      	adds	r7, #36	; 0x24
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b64:	4770      	bx	lr

08015b66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015b66:	b580      	push	{r7, lr}
 8015b68:	b082      	sub	sp, #8
 8015b6a:	af00      	add	r7, sp, #0
 8015b6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f7ff ff4c 	bl	8015a0c <__NVIC_SetPriorityGrouping>
}
 8015b74:	bf00      	nop
 8015b76:	3708      	adds	r7, #8
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}

08015b7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b086      	sub	sp, #24
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	4603      	mov	r3, r0
 8015b84:	60b9      	str	r1, [r7, #8]
 8015b86:	607a      	str	r2, [r7, #4]
 8015b88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8015b8a:	f7ff ff63 	bl	8015a54 <__NVIC_GetPriorityGrouping>
 8015b8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015b90:	687a      	ldr	r2, [r7, #4]
 8015b92:	68b9      	ldr	r1, [r7, #8]
 8015b94:	6978      	ldr	r0, [r7, #20]
 8015b96:	f7ff ffb3 	bl	8015b00 <NVIC_EncodePriority>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ba0:	4611      	mov	r1, r2
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7ff ff82 	bl	8015aac <__NVIC_SetPriority>
}
 8015ba8:	bf00      	nop
 8015baa:	3718      	adds	r7, #24
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}

08015bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7ff ff56 	bl	8015a70 <__NVIC_EnableIRQ>
}
 8015bc4:	bf00      	nop
 8015bc6:	3708      	adds	r7, #8
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}

08015bcc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b084      	sub	sp, #16
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d101      	bne.n	8015bde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8015bda:	2301      	movs	r3, #1
 8015bdc:	e08d      	b.n	8015cfa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	461a      	mov	r2, r3
 8015be4:	4b47      	ldr	r3, [pc, #284]	; (8015d04 <HAL_DMA_Init+0x138>)
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d80f      	bhi.n	8015c0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	461a      	mov	r2, r3
 8015bf0:	4b45      	ldr	r3, [pc, #276]	; (8015d08 <HAL_DMA_Init+0x13c>)
 8015bf2:	4413      	add	r3, r2
 8015bf4:	4a45      	ldr	r2, [pc, #276]	; (8015d0c <HAL_DMA_Init+0x140>)
 8015bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8015bfa:	091b      	lsrs	r3, r3, #4
 8015bfc:	009a      	lsls	r2, r3, #2
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	4a42      	ldr	r2, [pc, #264]	; (8015d10 <HAL_DMA_Init+0x144>)
 8015c06:	649a      	str	r2, [r3, #72]	; 0x48
 8015c08:	e00e      	b.n	8015c28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	461a      	mov	r2, r3
 8015c10:	4b40      	ldr	r3, [pc, #256]	; (8015d14 <HAL_DMA_Init+0x148>)
 8015c12:	4413      	add	r3, r2
 8015c14:	4a3d      	ldr	r2, [pc, #244]	; (8015d0c <HAL_DMA_Init+0x140>)
 8015c16:	fba2 2303 	umull	r2, r3, r2, r3
 8015c1a:	091b      	lsrs	r3, r3, #4
 8015c1c:	009a      	lsls	r2, r3, #2
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	4a3c      	ldr	r2, [pc, #240]	; (8015d18 <HAL_DMA_Init+0x14c>)
 8015c26:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2202      	movs	r2, #2
 8015c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8015c3e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8015c42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8015c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	691b      	ldr	r3, [r3, #16]
 8015c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	699b      	ldr	r3, [r3, #24]
 8015c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6a1b      	ldr	r3, [r3, #32]
 8015c6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8015c6c:	68fa      	ldr	r2, [r7, #12]
 8015c6e:	4313      	orrs	r3, r2
 8015c70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	68fa      	ldr	r2, [r7, #12]
 8015c78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f000 faf2 	bl	8016264 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	689b      	ldr	r3, [r3, #8]
 8015c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015c88:	d102      	bne.n	8015c90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	685a      	ldr	r2, [r3, #4]
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c98:	b2d2      	uxtb	r2, r2
 8015c9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ca0:	687a      	ldr	r2, [r7, #4]
 8015ca2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8015ca4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d010      	beq.n	8015cd0 <HAL_DMA_Init+0x104>
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	2b04      	cmp	r3, #4
 8015cb4:	d80c      	bhi.n	8015cd0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f000 fb12 	bl	80162e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015cc8:	687a      	ldr	r2, [r7, #4]
 8015cca:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015ccc:	605a      	str	r2, [r3, #4]
 8015cce:	e008      	b.n	8015ce2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2200      	movs	r2, #0
 8015cda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2201      	movs	r2, #1
 8015cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8015cf8:	2300      	movs	r3, #0
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3710      	adds	r7, #16
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	40020407 	.word	0x40020407
 8015d08:	bffdfff8 	.word	0xbffdfff8
 8015d0c:	cccccccd 	.word	0xcccccccd
 8015d10:	40020000 	.word	0x40020000
 8015d14:	bffdfbf8 	.word	0xbffdfbf8
 8015d18:	40020400 	.word	0x40020400

08015d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b086      	sub	sp, #24
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	607a      	str	r2, [r7, #4]
 8015d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	d101      	bne.n	8015d3c <HAL_DMA_Start_IT+0x20>
 8015d38:	2302      	movs	r3, #2
 8015d3a:	e066      	b.n	8015e0a <HAL_DMA_Start_IT+0xee>
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	2201      	movs	r2, #1
 8015d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8015d4a:	b2db      	uxtb	r3, r3
 8015d4c:	2b01      	cmp	r3, #1
 8015d4e:	d155      	bne.n	8015dfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2202      	movs	r2, #2
 8015d54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	681a      	ldr	r2, [r3, #0]
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	f022 0201 	bic.w	r2, r2, #1
 8015d6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	68b9      	ldr	r1, [r7, #8]
 8015d74:	68f8      	ldr	r0, [r7, #12]
 8015d76:	f000 fa37 	bl	80161e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d008      	beq.n	8015d94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	681a      	ldr	r2, [r3, #0]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	f042 020e 	orr.w	r2, r2, #14
 8015d90:	601a      	str	r2, [r3, #0]
 8015d92:	e00f      	b.n	8015db4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	681a      	ldr	r2, [r3, #0]
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	f022 0204 	bic.w	r2, r2, #4
 8015da2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	f042 020a 	orr.w	r2, r2, #10
 8015db2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d007      	beq.n	8015dd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dc6:	681a      	ldr	r2, [r3, #0]
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015dd0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d007      	beq.n	8015dea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015de8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	681a      	ldr	r2, [r3, #0]
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f042 0201 	orr.w	r2, r2, #1
 8015df8:	601a      	str	r2, [r3, #0]
 8015dfa:	e005      	b.n	8015e08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8015e04:	2302      	movs	r3, #2
 8015e06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8015e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3718      	adds	r7, #24
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015e12:	b480      	push	{r7}
 8015e14:	b085      	sub	sp, #20
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8015e24:	b2db      	uxtb	r3, r3
 8015e26:	2b02      	cmp	r3, #2
 8015e28:	d008      	beq.n	8015e3c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2204      	movs	r2, #4
 8015e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2200      	movs	r2, #0
 8015e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015e38:	2301      	movs	r3, #1
 8015e3a:	e040      	b.n	8015ebe <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	681a      	ldr	r2, [r3, #0]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f022 020e 	bic.w	r2, r2, #14
 8015e4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e50:	681a      	ldr	r2, [r3, #0]
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015e5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	f022 0201 	bic.w	r2, r2, #1
 8015e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e70:	f003 021c 	and.w	r2, r3, #28
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015e78:	2101      	movs	r1, #1
 8015e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8015e7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8015e88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00c      	beq.n	8015eac <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015e96:	681a      	ldr	r2, [r3, #0]
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015ea0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015ea6:	687a      	ldr	r2, [r7, #4]
 8015ea8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015eaa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	2201      	movs	r2, #1
 8015eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8015ebc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3714      	adds	r7, #20
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec8:	4770      	bx	lr

08015eca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015eca:	b580      	push	{r7, lr}
 8015ecc:	b084      	sub	sp, #16
 8015ece:	af00      	add	r7, sp, #0
 8015ed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8015edc:	b2db      	uxtb	r3, r3
 8015ede:	2b02      	cmp	r3, #2
 8015ee0:	d005      	beq.n	8015eee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2204      	movs	r2, #4
 8015ee6:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8015ee8:	2301      	movs	r3, #1
 8015eea:	73fb      	strb	r3, [r7, #15]
 8015eec:	e047      	b.n	8015f7e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	681a      	ldr	r2, [r3, #0]
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	f022 020e 	bic.w	r2, r2, #14
 8015efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	681a      	ldr	r2, [r3, #0]
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	f022 0201 	bic.w	r2, r2, #1
 8015f0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f12:	681a      	ldr	r2, [r3, #0]
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015f1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f22:	f003 021c 	and.w	r2, r3, #28
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8015f30:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f36:	687a      	ldr	r2, [r7, #4]
 8015f38:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8015f3a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d00c      	beq.n	8015f5e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015f52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f58:	687a      	ldr	r2, [r7, #4]
 8015f5a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015f5c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2201      	movs	r2, #1
 8015f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d003      	beq.n	8015f7e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	4798      	blx	r3
    }
  }
  return status;
 8015f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	3710      	adds	r7, #16
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}

08015f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015fa4:	f003 031c 	and.w	r3, r3, #28
 8015fa8:	2204      	movs	r2, #4
 8015faa:	409a      	lsls	r2, r3
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	4013      	ands	r3, r2
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d053      	beq.n	801605c <HAL_DMA_IRQHandler+0xd4>
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	f003 0304 	and.w	r3, r3, #4
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d04e      	beq.n	801605c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d024      	beq.n	8016016 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015fd0:	f003 021c 	and.w	r2, r3, #28
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015fd8:	2104      	movs	r1, #4
 8015fda:	fa01 f202 	lsl.w	r2, r1, r2
 8015fde:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d109      	bne.n	8016002 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	f000 80c0 	beq.w	8016178 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8016000:	e0ba      	b.n	8016178 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016006:	2b00      	cmp	r3, #0
 8016008:	f000 80b6 	beq.w	8016178 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8016014:	e0b0      	b.n	8016178 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	f003 0320 	and.w	r3, r3, #32
 8016020:	2b00      	cmp	r3, #0
 8016022:	d107      	bne.n	8016034 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	f022 0204 	bic.w	r2, r2, #4
 8016032:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016038:	f003 021c 	and.w	r2, r3, #28
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016040:	2104      	movs	r1, #4
 8016042:	fa01 f202 	lsl.w	r2, r1, r2
 8016046:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801604c:	2b00      	cmp	r3, #0
 801604e:	f000 8093 	beq.w	8016178 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801605a:	e08d      	b.n	8016178 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016060:	f003 031c 	and.w	r3, r3, #28
 8016064:	2202      	movs	r2, #2
 8016066:	409a      	lsls	r2, r3
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	4013      	ands	r3, r2
 801606c:	2b00      	cmp	r3, #0
 801606e:	d04e      	beq.n	801610e <HAL_DMA_IRQHandler+0x186>
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	f003 0302 	and.w	r3, r3, #2
 8016076:	2b00      	cmp	r3, #0
 8016078:	d049      	beq.n	801610e <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016084:	2b00      	cmp	r3, #0
 8016086:	d018      	beq.n	80160ba <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016092:	2b00      	cmp	r3, #0
 8016094:	d108      	bne.n	80160a8 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801609a:	2b00      	cmp	r3, #0
 801609c:	d06e      	beq.n	801617c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80160a6:	e069      	b.n	801617c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d065      	beq.n	801617c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80160b8:	e060      	b.n	801617c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	f003 0320 	and.w	r3, r3, #32
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d10b      	bne.n	80160e0 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	f022 020a 	bic.w	r2, r2, #10
 80160d6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	2201      	movs	r2, #1
 80160dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160e4:	f003 021c 	and.w	r2, r3, #28
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80160ec:	2102      	movs	r1, #2
 80160ee:	fa01 f202 	lsl.w	r2, r1, r2
 80160f2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2200      	movs	r2, #0
 80160f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016100:	2b00      	cmp	r3, #0
 8016102:	d03b      	beq.n	801617c <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801610c:	e036      	b.n	801617c <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016112:	f003 031c 	and.w	r3, r3, #28
 8016116:	2208      	movs	r2, #8
 8016118:	409a      	lsls	r2, r3
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	4013      	ands	r3, r2
 801611e:	2b00      	cmp	r3, #0
 8016120:	d02e      	beq.n	8016180 <HAL_DMA_IRQHandler+0x1f8>
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	f003 0308 	and.w	r3, r3, #8
 8016128:	2b00      	cmp	r3, #0
 801612a:	d029      	beq.n	8016180 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	681a      	ldr	r2, [r3, #0]
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	f022 020e 	bic.w	r2, r2, #14
 801613a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016140:	f003 021c 	and.w	r2, r3, #28
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016148:	2101      	movs	r1, #1
 801614a:	fa01 f202 	lsl.w	r2, r1, r2
 801614e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	2201      	movs	r2, #1
 8016154:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	2201      	movs	r2, #1
 801615a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2200      	movs	r2, #0
 8016162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801616a:	2b00      	cmp	r3, #0
 801616c:	d008      	beq.n	8016180 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8016176:	e002      	b.n	801617e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8016178:	bf00      	nop
 801617a:	e000      	b.n	801617e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801617c:	bf00      	nop
  return;
 801617e:	bf00      	nop
 8016180:	bf00      	nop
}
 8016182:	3710      	adds	r7, #16
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}

08016188 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8016188:	b480      	push	{r7}
 801618a:	b085      	sub	sp, #20
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016192:	2300      	movs	r3, #0
 8016194:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d103      	bne.n	80161a4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 801619c:	2301      	movs	r3, #1
 801619e:	72fb      	strb	r3, [r7, #11]
    return status;
 80161a0:	7afb      	ldrb	r3, [r7, #11]
 80161a2:	e01b      	b.n	80161dc <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	f003 0310 	and.w	r3, r3, #16
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d00d      	beq.n	80161d2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d004      	beq.n	80161ca <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80161c6:	60fb      	str	r3, [r7, #12]
 80161c8:	e003      	b.n	80161d2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80161d0:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	68fa      	ldr	r2, [r7, #12]
 80161d8:	601a      	str	r2, [r3, #0]

  return status;
 80161da:	7afb      	ldrb	r3, [r7, #11]
}
 80161dc:	4618      	mov	r0, r3
 80161de:	3714      	adds	r7, #20
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr

080161e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80161e8:	b480      	push	{r7}
 80161ea:	b085      	sub	sp, #20
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	60b9      	str	r1, [r7, #8]
 80161f2:	607a      	str	r2, [r7, #4]
 80161f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161fa:	68fa      	ldr	r2, [r7, #12]
 80161fc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80161fe:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016204:	2b00      	cmp	r3, #0
 8016206:	d004      	beq.n	8016212 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801620c:	68fa      	ldr	r2, [r7, #12]
 801620e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8016210:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016216:	f003 021c 	and.w	r2, r3, #28
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801621e:	2101      	movs	r1, #1
 8016220:	fa01 f202 	lsl.w	r2, r1, r2
 8016224:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	683a      	ldr	r2, [r7, #0]
 801622c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	689b      	ldr	r3, [r3, #8]
 8016232:	2b10      	cmp	r3, #16
 8016234:	d108      	bne.n	8016248 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	687a      	ldr	r2, [r7, #4]
 801623c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	68ba      	ldr	r2, [r7, #8]
 8016244:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8016246:	e007      	b.n	8016258 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	68ba      	ldr	r2, [r7, #8]
 801624e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	60da      	str	r2, [r3, #12]
}
 8016258:	bf00      	nop
 801625a:	3714      	adds	r7, #20
 801625c:	46bd      	mov	sp, r7
 801625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016262:	4770      	bx	lr

08016264 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8016264:	b480      	push	{r7}
 8016266:	b085      	sub	sp, #20
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	461a      	mov	r2, r3
 8016272:	4b17      	ldr	r3, [pc, #92]	; (80162d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8016274:	429a      	cmp	r2, r3
 8016276:	d80a      	bhi.n	801628e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801627c:	089b      	lsrs	r3, r3, #2
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016284:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8016288:	687a      	ldr	r2, [r7, #4]
 801628a:	6513      	str	r3, [r2, #80]	; 0x50
 801628c:	e007      	b.n	801629e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016292:	089b      	lsrs	r3, r3, #2
 8016294:	009a      	lsls	r2, r3, #2
 8016296:	4b0f      	ldr	r3, [pc, #60]	; (80162d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8016298:	4413      	add	r3, r2
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	3b08      	subs	r3, #8
 80162a6:	4a0c      	ldr	r2, [pc, #48]	; (80162d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80162a8:	fba2 2303 	umull	r2, r3, r2, r3
 80162ac:	091b      	lsrs	r3, r3, #4
 80162ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	4a0a      	ldr	r2, [pc, #40]	; (80162dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80162b4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	f003 031f 	and.w	r3, r3, #31
 80162bc:	2201      	movs	r2, #1
 80162be:	409a      	lsls	r2, r3
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80162c4:	bf00      	nop
 80162c6:	3714      	adds	r7, #20
 80162c8:	46bd      	mov	sp, r7
 80162ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ce:	4770      	bx	lr
 80162d0:	40020407 	.word	0x40020407
 80162d4:	40020820 	.word	0x40020820
 80162d8:	cccccccd 	.word	0xcccccccd
 80162dc:	40020880 	.word	0x40020880

080162e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80162e0:	b480      	push	{r7}
 80162e2:	b085      	sub	sp, #20
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	685b      	ldr	r3, [r3, #4]
 80162ec:	b2db      	uxtb	r3, r3
 80162ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80162f0:	68fa      	ldr	r2, [r7, #12]
 80162f2:	4b0b      	ldr	r3, [pc, #44]	; (8016320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80162f4:	4413      	add	r3, r2
 80162f6:	009b      	lsls	r3, r3, #2
 80162f8:	461a      	mov	r2, r3
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	4a08      	ldr	r2, [pc, #32]	; (8016324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8016302:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	3b01      	subs	r3, #1
 8016308:	f003 0303 	and.w	r3, r3, #3
 801630c:	2201      	movs	r2, #1
 801630e:	409a      	lsls	r2, r3
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	665a      	str	r2, [r3, #100]	; 0x64
}
 8016314:	bf00      	nop
 8016316:	3714      	adds	r7, #20
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr
 8016320:	1000823f 	.word	0x1000823f
 8016324:	40020940 	.word	0x40020940

08016328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016328:	b480      	push	{r7}
 801632a:	b087      	sub	sp, #28
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8016332:	2300      	movs	r3, #0
 8016334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8016336:	e158      	b.n	80165ea <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	681a      	ldr	r2, [r3, #0]
 801633c:	2101      	movs	r1, #1
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	fa01 f303 	lsl.w	r3, r1, r3
 8016344:	4013      	ands	r3, r2
 8016346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2b00      	cmp	r3, #0
 801634c:	f000 814a 	beq.w	80165e4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8016350:	683b      	ldr	r3, [r7, #0]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	f003 0303 	and.w	r3, r3, #3
 8016358:	2b01      	cmp	r3, #1
 801635a:	d005      	beq.n	8016368 <HAL_GPIO_Init+0x40>
 801635c:	683b      	ldr	r3, [r7, #0]
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	f003 0303 	and.w	r3, r3, #3
 8016364:	2b02      	cmp	r3, #2
 8016366:	d130      	bne.n	80163ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	689b      	ldr	r3, [r3, #8]
 801636c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801636e:	697b      	ldr	r3, [r7, #20]
 8016370:	005b      	lsls	r3, r3, #1
 8016372:	2203      	movs	r2, #3
 8016374:	fa02 f303 	lsl.w	r3, r2, r3
 8016378:	43db      	mvns	r3, r3
 801637a:	693a      	ldr	r2, [r7, #16]
 801637c:	4013      	ands	r3, r2
 801637e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016380:	683b      	ldr	r3, [r7, #0]
 8016382:	68da      	ldr	r2, [r3, #12]
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	005b      	lsls	r3, r3, #1
 8016388:	fa02 f303 	lsl.w	r3, r2, r3
 801638c:	693a      	ldr	r2, [r7, #16]
 801638e:	4313      	orrs	r3, r2
 8016390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	693a      	ldr	r2, [r7, #16]
 8016396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	685b      	ldr	r3, [r3, #4]
 801639c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801639e:	2201      	movs	r2, #1
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	fa02 f303 	lsl.w	r3, r2, r3
 80163a6:	43db      	mvns	r3, r3
 80163a8:	693a      	ldr	r2, [r7, #16]
 80163aa:	4013      	ands	r3, r2
 80163ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	091b      	lsrs	r3, r3, #4
 80163b4:	f003 0201 	and.w	r2, r3, #1
 80163b8:	697b      	ldr	r3, [r7, #20]
 80163ba:	fa02 f303 	lsl.w	r3, r2, r3
 80163be:	693a      	ldr	r2, [r7, #16]
 80163c0:	4313      	orrs	r3, r2
 80163c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	693a      	ldr	r2, [r7, #16]
 80163c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80163ca:	683b      	ldr	r3, [r7, #0]
 80163cc:	685b      	ldr	r3, [r3, #4]
 80163ce:	f003 0303 	and.w	r3, r3, #3
 80163d2:	2b03      	cmp	r3, #3
 80163d4:	d017      	beq.n	8016406 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	68db      	ldr	r3, [r3, #12]
 80163da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80163dc:	697b      	ldr	r3, [r7, #20]
 80163de:	005b      	lsls	r3, r3, #1
 80163e0:	2203      	movs	r2, #3
 80163e2:	fa02 f303 	lsl.w	r3, r2, r3
 80163e6:	43db      	mvns	r3, r3
 80163e8:	693a      	ldr	r2, [r7, #16]
 80163ea:	4013      	ands	r3, r2
 80163ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	689a      	ldr	r2, [r3, #8]
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	fa02 f303 	lsl.w	r3, r2, r3
 80163fa:	693a      	ldr	r2, [r7, #16]
 80163fc:	4313      	orrs	r3, r2
 80163fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	693a      	ldr	r2, [r7, #16]
 8016404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	f003 0303 	and.w	r3, r3, #3
 801640e:	2b02      	cmp	r3, #2
 8016410:	d123      	bne.n	801645a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	08da      	lsrs	r2, r3, #3
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	3208      	adds	r2, #8
 801641a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801641e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8016420:	697b      	ldr	r3, [r7, #20]
 8016422:	f003 0307 	and.w	r3, r3, #7
 8016426:	009b      	lsls	r3, r3, #2
 8016428:	220f      	movs	r2, #15
 801642a:	fa02 f303 	lsl.w	r3, r2, r3
 801642e:	43db      	mvns	r3, r3
 8016430:	693a      	ldr	r2, [r7, #16]
 8016432:	4013      	ands	r3, r2
 8016434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	691a      	ldr	r2, [r3, #16]
 801643a:	697b      	ldr	r3, [r7, #20]
 801643c:	f003 0307 	and.w	r3, r3, #7
 8016440:	009b      	lsls	r3, r3, #2
 8016442:	fa02 f303 	lsl.w	r3, r2, r3
 8016446:	693a      	ldr	r2, [r7, #16]
 8016448:	4313      	orrs	r3, r2
 801644a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801644c:	697b      	ldr	r3, [r7, #20]
 801644e:	08da      	lsrs	r2, r3, #3
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	3208      	adds	r2, #8
 8016454:	6939      	ldr	r1, [r7, #16]
 8016456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	005b      	lsls	r3, r3, #1
 8016464:	2203      	movs	r2, #3
 8016466:	fa02 f303 	lsl.w	r3, r2, r3
 801646a:	43db      	mvns	r3, r3
 801646c:	693a      	ldr	r2, [r7, #16]
 801646e:	4013      	ands	r3, r2
 8016470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	685b      	ldr	r3, [r3, #4]
 8016476:	f003 0203 	and.w	r2, r3, #3
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	005b      	lsls	r3, r3, #1
 801647e:	fa02 f303 	lsl.w	r3, r2, r3
 8016482:	693a      	ldr	r2, [r7, #16]
 8016484:	4313      	orrs	r3, r2
 8016486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	693a      	ldr	r2, [r7, #16]
 801648c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016496:	2b00      	cmp	r3, #0
 8016498:	f000 80a4 	beq.w	80165e4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 801649c:	4a5a      	ldr	r2, [pc, #360]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 801649e:	697b      	ldr	r3, [r7, #20]
 80164a0:	089b      	lsrs	r3, r3, #2
 80164a2:	3318      	adds	r3, #24
 80164a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80164a8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80164aa:	697b      	ldr	r3, [r7, #20]
 80164ac:	f003 0303 	and.w	r3, r3, #3
 80164b0:	00db      	lsls	r3, r3, #3
 80164b2:	220f      	movs	r2, #15
 80164b4:	fa02 f303 	lsl.w	r3, r2, r3
 80164b8:	43db      	mvns	r3, r3
 80164ba:	693a      	ldr	r2, [r7, #16]
 80164bc:	4013      	ands	r3, r2
 80164be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	4a52      	ldr	r2, [pc, #328]	; (801660c <HAL_GPIO_Init+0x2e4>)
 80164c4:	4293      	cmp	r3, r2
 80164c6:	d025      	beq.n	8016514 <HAL_GPIO_Init+0x1ec>
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	4a51      	ldr	r2, [pc, #324]	; (8016610 <HAL_GPIO_Init+0x2e8>)
 80164cc:	4293      	cmp	r3, r2
 80164ce:	d01f      	beq.n	8016510 <HAL_GPIO_Init+0x1e8>
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	4a50      	ldr	r2, [pc, #320]	; (8016614 <HAL_GPIO_Init+0x2ec>)
 80164d4:	4293      	cmp	r3, r2
 80164d6:	d019      	beq.n	801650c <HAL_GPIO_Init+0x1e4>
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	4a4f      	ldr	r2, [pc, #316]	; (8016618 <HAL_GPIO_Init+0x2f0>)
 80164dc:	4293      	cmp	r3, r2
 80164de:	d013      	beq.n	8016508 <HAL_GPIO_Init+0x1e0>
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	4a4e      	ldr	r2, [pc, #312]	; (801661c <HAL_GPIO_Init+0x2f4>)
 80164e4:	4293      	cmp	r3, r2
 80164e6:	d00d      	beq.n	8016504 <HAL_GPIO_Init+0x1dc>
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	4a4d      	ldr	r2, [pc, #308]	; (8016620 <HAL_GPIO_Init+0x2f8>)
 80164ec:	4293      	cmp	r3, r2
 80164ee:	d007      	beq.n	8016500 <HAL_GPIO_Init+0x1d8>
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	4a4c      	ldr	r2, [pc, #304]	; (8016624 <HAL_GPIO_Init+0x2fc>)
 80164f4:	4293      	cmp	r3, r2
 80164f6:	d101      	bne.n	80164fc <HAL_GPIO_Init+0x1d4>
 80164f8:	2306      	movs	r3, #6
 80164fa:	e00c      	b.n	8016516 <HAL_GPIO_Init+0x1ee>
 80164fc:	2307      	movs	r3, #7
 80164fe:	e00a      	b.n	8016516 <HAL_GPIO_Init+0x1ee>
 8016500:	2305      	movs	r3, #5
 8016502:	e008      	b.n	8016516 <HAL_GPIO_Init+0x1ee>
 8016504:	2304      	movs	r3, #4
 8016506:	e006      	b.n	8016516 <HAL_GPIO_Init+0x1ee>
 8016508:	2303      	movs	r3, #3
 801650a:	e004      	b.n	8016516 <HAL_GPIO_Init+0x1ee>
 801650c:	2302      	movs	r3, #2
 801650e:	e002      	b.n	8016516 <HAL_GPIO_Init+0x1ee>
 8016510:	2301      	movs	r3, #1
 8016512:	e000      	b.n	8016516 <HAL_GPIO_Init+0x1ee>
 8016514:	2300      	movs	r3, #0
 8016516:	697a      	ldr	r2, [r7, #20]
 8016518:	f002 0203 	and.w	r2, r2, #3
 801651c:	00d2      	lsls	r2, r2, #3
 801651e:	4093      	lsls	r3, r2
 8016520:	693a      	ldr	r2, [r7, #16]
 8016522:	4313      	orrs	r3, r2
 8016524:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8016526:	4938      	ldr	r1, [pc, #224]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	089b      	lsrs	r3, r3, #2
 801652c:	3318      	adds	r3, #24
 801652e:	693a      	ldr	r2, [r7, #16]
 8016530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8016534:	4b34      	ldr	r3, [pc, #208]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	43db      	mvns	r3, r3
 801653e:	693a      	ldr	r2, [r7, #16]
 8016540:	4013      	ands	r3, r2
 8016542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801654c:	2b00      	cmp	r3, #0
 801654e:	d003      	beq.n	8016558 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8016550:	693a      	ldr	r2, [r7, #16]
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	4313      	orrs	r3, r2
 8016556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8016558:	4a2b      	ldr	r2, [pc, #172]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 801655a:	693b      	ldr	r3, [r7, #16]
 801655c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801655e:	4b2a      	ldr	r3, [pc, #168]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	43db      	mvns	r3, r3
 8016568:	693a      	ldr	r2, [r7, #16]
 801656a:	4013      	ands	r3, r2
 801656c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016576:	2b00      	cmp	r3, #0
 8016578:	d003      	beq.n	8016582 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801657a:	693a      	ldr	r2, [r7, #16]
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	4313      	orrs	r3, r2
 8016580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8016582:	4a21      	ldr	r2, [pc, #132]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8016588:	4b1f      	ldr	r3, [pc, #124]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 801658a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801658e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	43db      	mvns	r3, r3
 8016594:	693a      	ldr	r2, [r7, #16]
 8016596:	4013      	ands	r3, r2
 8016598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	685b      	ldr	r3, [r3, #4]
 801659e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d003      	beq.n	80165ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80165a6:	693a      	ldr	r2, [r7, #16]
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	4313      	orrs	r3, r2
 80165ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80165ae:	4a16      	ldr	r2, [pc, #88]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 80165b0:	693b      	ldr	r3, [r7, #16]
 80165b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80165b6:	4b14      	ldr	r3, [pc, #80]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 80165b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80165bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	43db      	mvns	r3, r3
 80165c2:	693a      	ldr	r2, [r7, #16]
 80165c4:	4013      	ands	r3, r2
 80165c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	685b      	ldr	r3, [r3, #4]
 80165cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d003      	beq.n	80165dc <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80165d4:	693a      	ldr	r2, [r7, #16]
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	4313      	orrs	r3, r2
 80165da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80165dc:	4a0a      	ldr	r2, [pc, #40]	; (8016608 <HAL_GPIO_Init+0x2e0>)
 80165de:	693b      	ldr	r3, [r7, #16]
 80165e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	3301      	adds	r3, #1
 80165e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	681a      	ldr	r2, [r3, #0]
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	fa22 f303 	lsr.w	r3, r2, r3
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f47f ae9f 	bne.w	8016338 <HAL_GPIO_Init+0x10>
  }
}
 80165fa:	bf00      	nop
 80165fc:	bf00      	nop
 80165fe:	371c      	adds	r7, #28
 8016600:	46bd      	mov	sp, r7
 8016602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016606:	4770      	bx	lr
 8016608:	4002f400 	.word	0x4002f400
 801660c:	42020000 	.word	0x42020000
 8016610:	42020400 	.word	0x42020400
 8016614:	42020800 	.word	0x42020800
 8016618:	42020c00 	.word	0x42020c00
 801661c:	42021000 	.word	0x42021000
 8016620:	42021400 	.word	0x42021400
 8016624:	42021800 	.word	0x42021800

08016628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016628:	b480      	push	{r7}
 801662a:	b083      	sub	sp, #12
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
 8016630:	460b      	mov	r3, r1
 8016632:	807b      	strh	r3, [r7, #2]
 8016634:	4613      	mov	r3, r2
 8016636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8016638:	787b      	ldrb	r3, [r7, #1]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d003      	beq.n	8016646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801663e:	887a      	ldrh	r2, [r7, #2]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8016644:	e002      	b.n	801664c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8016646:	887a      	ldrh	r2, [r7, #2]
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801664c:	bf00      	nop
 801664e:	370c      	adds	r7, #12
 8016650:	46bd      	mov	sp, r7
 8016652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016656:	4770      	bx	lr

08016658 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8016658:	b480      	push	{r7}
 801665a:	b085      	sub	sp, #20
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	460b      	mov	r3, r1
 8016662:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	695b      	ldr	r3, [r3, #20]
 8016668:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801666a:	887a      	ldrh	r2, [r7, #2]
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	4013      	ands	r3, r2
 8016670:	041a      	lsls	r2, r3, #16
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	43d9      	mvns	r1, r3
 8016676:	887b      	ldrh	r3, [r7, #2]
 8016678:	400b      	ands	r3, r1
 801667a:	431a      	orrs	r2, r3
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	619a      	str	r2, [r3, #24]
}
 8016680:	bf00      	nop
 8016682:	3714      	adds	r7, #20
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr

0801668c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b082      	sub	sp, #8
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d101      	bne.n	801669e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801669a:	2301      	movs	r3, #1
 801669c:	e081      	b.n	80167a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80166a4:	b2db      	uxtb	r3, r3
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d106      	bne.n	80166b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2200      	movs	r2, #0
 80166ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f7fc fe7a 	bl	80133ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2224      	movs	r2, #36	; 0x24
 80166bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	f022 0201 	bic.w	r2, r2, #1
 80166ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	685a      	ldr	r2, [r3, #4]
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80166dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	689a      	ldr	r2, [r3, #8]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80166ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	68db      	ldr	r3, [r3, #12]
 80166f2:	2b01      	cmp	r3, #1
 80166f4:	d107      	bne.n	8016706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	689a      	ldr	r2, [r3, #8]
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016702:	609a      	str	r2, [r3, #8]
 8016704:	e006      	b.n	8016714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	689a      	ldr	r2, [r3, #8]
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8016712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	68db      	ldr	r3, [r3, #12]
 8016718:	2b02      	cmp	r3, #2
 801671a:	d104      	bne.n	8016726 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	685b      	ldr	r3, [r3, #4]
 801672c:	687a      	ldr	r2, [r7, #4]
 801672e:	6812      	ldr	r2, [r2, #0]
 8016730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016738:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	68da      	ldr	r2, [r3, #12]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016748:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	691a      	ldr	r2, [r3, #16]
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	695b      	ldr	r3, [r3, #20]
 8016752:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	699b      	ldr	r3, [r3, #24]
 801675a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	430a      	orrs	r2, r1
 8016762:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	69d9      	ldr	r1, [r3, #28]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6a1a      	ldr	r2, [r3, #32]
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	430a      	orrs	r2, r1
 8016772:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	681a      	ldr	r2, [r3, #0]
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	f042 0201 	orr.w	r2, r2, #1
 8016782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2200      	movs	r2, #0
 8016788:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2220      	movs	r2, #32
 801678e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2200      	movs	r2, #0
 8016796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2200      	movs	r2, #0
 801679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80167a0:	2300      	movs	r3, #0
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3708      	adds	r7, #8
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}
	...

080167ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b088      	sub	sp, #32
 80167b0:	af02      	add	r7, sp, #8
 80167b2:	60f8      	str	r0, [r7, #12]
 80167b4:	607a      	str	r2, [r7, #4]
 80167b6:	461a      	mov	r2, r3
 80167b8:	460b      	mov	r3, r1
 80167ba:	817b      	strh	r3, [r7, #10]
 80167bc:	4613      	mov	r3, r2
 80167be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80167c6:	b2db      	uxtb	r3, r3
 80167c8:	2b20      	cmp	r3, #32
 80167ca:	f040 80da 	bne.w	8016982 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80167d4:	2b01      	cmp	r3, #1
 80167d6:	d101      	bne.n	80167dc <HAL_I2C_Master_Transmit+0x30>
 80167d8:	2302      	movs	r3, #2
 80167da:	e0d3      	b.n	8016984 <HAL_I2C_Master_Transmit+0x1d8>
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2201      	movs	r2, #1
 80167e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80167e4:	f7fd fcc4 	bl	8014170 <HAL_GetTick>
 80167e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	9300      	str	r3, [sp, #0]
 80167ee:	2319      	movs	r3, #25
 80167f0:	2201      	movs	r2, #1
 80167f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80167f6:	68f8      	ldr	r0, [r7, #12]
 80167f8:	f000 f9e6 	bl	8016bc8 <I2C_WaitOnFlagUntilTimeout>
 80167fc:	4603      	mov	r3, r0
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d001      	beq.n	8016806 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8016802:	2301      	movs	r3, #1
 8016804:	e0be      	b.n	8016984 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2221      	movs	r2, #33	; 0x21
 801680a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2210      	movs	r2, #16
 8016812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2200      	movs	r2, #0
 801681a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	893a      	ldrh	r2, [r7, #8]
 8016826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2200      	movs	r2, #0
 801682c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016832:	b29b      	uxth	r3, r3
 8016834:	2bff      	cmp	r3, #255	; 0xff
 8016836:	d90e      	bls.n	8016856 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	22ff      	movs	r2, #255	; 0xff
 801683c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016842:	b2da      	uxtb	r2, r3
 8016844:	8979      	ldrh	r1, [r7, #10]
 8016846:	4b51      	ldr	r3, [pc, #324]	; (801698c <HAL_I2C_Master_Transmit+0x1e0>)
 8016848:	9300      	str	r3, [sp, #0]
 801684a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	f000 fbf6 	bl	8017040 <I2C_TransferConfig>
 8016854:	e06c      	b.n	8016930 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801685a:	b29a      	uxth	r2, r3
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016864:	b2da      	uxtb	r2, r3
 8016866:	8979      	ldrh	r1, [r7, #10]
 8016868:	4b48      	ldr	r3, [pc, #288]	; (801698c <HAL_I2C_Master_Transmit+0x1e0>)
 801686a:	9300      	str	r3, [sp, #0]
 801686c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016870:	68f8      	ldr	r0, [r7, #12]
 8016872:	f000 fbe5 	bl	8017040 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016876:	e05b      	b.n	8016930 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016878:	697a      	ldr	r2, [r7, #20]
 801687a:	6a39      	ldr	r1, [r7, #32]
 801687c:	68f8      	ldr	r0, [r7, #12]
 801687e:	f000 f9f2 	bl	8016c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8016882:	4603      	mov	r3, r0
 8016884:	2b00      	cmp	r3, #0
 8016886:	d001      	beq.n	801688c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8016888:	2301      	movs	r3, #1
 801688a:	e07b      	b.n	8016984 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016890:	781a      	ldrb	r2, [r3, #0]
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801689c:	1c5a      	adds	r2, r3, #1
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	3b01      	subs	r3, #1
 80168aa:	b29a      	uxth	r2, r3
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168b4:	3b01      	subs	r3, #1
 80168b6:	b29a      	uxth	r2, r3
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d034      	beq.n	8016930 <HAL_I2C_Master_Transmit+0x184>
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d130      	bne.n	8016930 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	9300      	str	r3, [sp, #0]
 80168d2:	6a3b      	ldr	r3, [r7, #32]
 80168d4:	2200      	movs	r2, #0
 80168d6:	2180      	movs	r1, #128	; 0x80
 80168d8:	68f8      	ldr	r0, [r7, #12]
 80168da:	f000 f975 	bl	8016bc8 <I2C_WaitOnFlagUntilTimeout>
 80168de:	4603      	mov	r3, r0
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d001      	beq.n	80168e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80168e4:	2301      	movs	r3, #1
 80168e6:	e04d      	b.n	8016984 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	2bff      	cmp	r3, #255	; 0xff
 80168f0:	d90e      	bls.n	8016910 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	22ff      	movs	r2, #255	; 0xff
 80168f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168fc:	b2da      	uxtb	r2, r3
 80168fe:	8979      	ldrh	r1, [r7, #10]
 8016900:	2300      	movs	r3, #0
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016908:	68f8      	ldr	r0, [r7, #12]
 801690a:	f000 fb99 	bl	8017040 <I2C_TransferConfig>
 801690e:	e00f      	b.n	8016930 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016914:	b29a      	uxth	r2, r3
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801691e:	b2da      	uxtb	r2, r3
 8016920:	8979      	ldrh	r1, [r7, #10]
 8016922:	2300      	movs	r3, #0
 8016924:	9300      	str	r3, [sp, #0]
 8016926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801692a:	68f8      	ldr	r0, [r7, #12]
 801692c:	f000 fb88 	bl	8017040 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016934:	b29b      	uxth	r3, r3
 8016936:	2b00      	cmp	r3, #0
 8016938:	d19e      	bne.n	8016878 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801693a:	697a      	ldr	r2, [r7, #20]
 801693c:	6a39      	ldr	r1, [r7, #32]
 801693e:	68f8      	ldr	r0, [r7, #12]
 8016940:	f000 f9d8 	bl	8016cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016944:	4603      	mov	r3, r0
 8016946:	2b00      	cmp	r3, #0
 8016948:	d001      	beq.n	801694e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 801694a:	2301      	movs	r3, #1
 801694c:	e01a      	b.n	8016984 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	2220      	movs	r2, #32
 8016954:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	6859      	ldr	r1, [r3, #4]
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	681a      	ldr	r2, [r3, #0]
 8016960:	4b0b      	ldr	r3, [pc, #44]	; (8016990 <HAL_I2C_Master_Transmit+0x1e4>)
 8016962:	400b      	ands	r3, r1
 8016964:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	2220      	movs	r2, #32
 801696a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	2200      	movs	r2, #0
 8016972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	2200      	movs	r2, #0
 801697a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801697e:	2300      	movs	r3, #0
 8016980:	e000      	b.n	8016984 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8016982:	2302      	movs	r3, #2
  }
}
 8016984:	4618      	mov	r0, r3
 8016986:	3718      	adds	r7, #24
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	80002000 	.word	0x80002000
 8016990:	fe00e800 	.word	0xfe00e800

08016994 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b088      	sub	sp, #32
 8016998:	af02      	add	r7, sp, #8
 801699a:	60f8      	str	r0, [r7, #12]
 801699c:	607a      	str	r2, [r7, #4]
 801699e:	461a      	mov	r2, r3
 80169a0:	460b      	mov	r3, r1
 80169a2:	817b      	strh	r3, [r7, #10]
 80169a4:	4613      	mov	r3, r2
 80169a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	2b20      	cmp	r3, #32
 80169b2:	f040 80db 	bne.w	8016b6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d101      	bne.n	80169c4 <HAL_I2C_Master_Receive+0x30>
 80169c0:	2302      	movs	r3, #2
 80169c2:	e0d4      	b.n	8016b6e <HAL_I2C_Master_Receive+0x1da>
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2201      	movs	r2, #1
 80169c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80169cc:	f7fd fbd0 	bl	8014170 <HAL_GetTick>
 80169d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	9300      	str	r3, [sp, #0]
 80169d6:	2319      	movs	r3, #25
 80169d8:	2201      	movs	r2, #1
 80169da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80169de:	68f8      	ldr	r0, [r7, #12]
 80169e0:	f000 f8f2 	bl	8016bc8 <I2C_WaitOnFlagUntilTimeout>
 80169e4:	4603      	mov	r3, r0
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d001      	beq.n	80169ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80169ea:	2301      	movs	r3, #1
 80169ec:	e0bf      	b.n	8016b6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2222      	movs	r2, #34	; 0x22
 80169f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	2210      	movs	r2, #16
 80169fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	2200      	movs	r2, #0
 8016a02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	687a      	ldr	r2, [r7, #4]
 8016a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	893a      	ldrh	r2, [r7, #8]
 8016a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	2200      	movs	r2, #0
 8016a14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	2bff      	cmp	r3, #255	; 0xff
 8016a1e:	d90e      	bls.n	8016a3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	22ff      	movs	r2, #255	; 0xff
 8016a24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a2a:	b2da      	uxtb	r2, r3
 8016a2c:	8979      	ldrh	r1, [r7, #10]
 8016a2e:	4b52      	ldr	r3, [pc, #328]	; (8016b78 <HAL_I2C_Master_Receive+0x1e4>)
 8016a30:	9300      	str	r3, [sp, #0]
 8016a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016a36:	68f8      	ldr	r0, [r7, #12]
 8016a38:	f000 fb02 	bl	8017040 <I2C_TransferConfig>
 8016a3c:	e06d      	b.n	8016b1a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016a42:	b29a      	uxth	r2, r3
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a4c:	b2da      	uxtb	r2, r3
 8016a4e:	8979      	ldrh	r1, [r7, #10]
 8016a50:	4b49      	ldr	r3, [pc, #292]	; (8016b78 <HAL_I2C_Master_Receive+0x1e4>)
 8016a52:	9300      	str	r3, [sp, #0]
 8016a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016a58:	68f8      	ldr	r0, [r7, #12]
 8016a5a:	f000 faf1 	bl	8017040 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016a5e:	e05c      	b.n	8016b1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016a60:	697a      	ldr	r2, [r7, #20]
 8016a62:	6a39      	ldr	r1, [r7, #32]
 8016a64:	68f8      	ldr	r0, [r7, #12]
 8016a66:	f000 f989 	bl	8016d7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d001      	beq.n	8016a74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8016a70:	2301      	movs	r3, #1
 8016a72:	e07c      	b.n	8016b6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a7e:	b2d2      	uxtb	r2, r2
 8016a80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a86:	1c5a      	adds	r2, r3, #1
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a90:	3b01      	subs	r3, #1
 8016a92:	b29a      	uxth	r2, r3
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	3b01      	subs	r3, #1
 8016aa0:	b29a      	uxth	r2, r3
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016aaa:	b29b      	uxth	r3, r3
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d034      	beq.n	8016b1a <HAL_I2C_Master_Receive+0x186>
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d130      	bne.n	8016b1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	9300      	str	r3, [sp, #0]
 8016abc:	6a3b      	ldr	r3, [r7, #32]
 8016abe:	2200      	movs	r2, #0
 8016ac0:	2180      	movs	r1, #128	; 0x80
 8016ac2:	68f8      	ldr	r0, [r7, #12]
 8016ac4:	f000 f880 	bl	8016bc8 <I2C_WaitOnFlagUntilTimeout>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d001      	beq.n	8016ad2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8016ace:	2301      	movs	r3, #1
 8016ad0:	e04d      	b.n	8016b6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ad6:	b29b      	uxth	r3, r3
 8016ad8:	2bff      	cmp	r3, #255	; 0xff
 8016ada:	d90e      	bls.n	8016afa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	22ff      	movs	r2, #255	; 0xff
 8016ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ae6:	b2da      	uxtb	r2, r3
 8016ae8:	8979      	ldrh	r1, [r7, #10]
 8016aea:	2300      	movs	r3, #0
 8016aec:	9300      	str	r3, [sp, #0]
 8016aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016af2:	68f8      	ldr	r0, [r7, #12]
 8016af4:	f000 faa4 	bl	8017040 <I2C_TransferConfig>
 8016af8:	e00f      	b.n	8016b1a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016afe:	b29a      	uxth	r2, r3
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b08:	b2da      	uxtb	r2, r3
 8016b0a:	8979      	ldrh	r1, [r7, #10]
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	9300      	str	r3, [sp, #0]
 8016b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016b14:	68f8      	ldr	r0, [r7, #12]
 8016b16:	f000 fa93 	bl	8017040 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016b1e:	b29b      	uxth	r3, r3
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d19d      	bne.n	8016a60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016b24:	697a      	ldr	r2, [r7, #20]
 8016b26:	6a39      	ldr	r1, [r7, #32]
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	f000 f8e3 	bl	8016cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d001      	beq.n	8016b38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8016b34:	2301      	movs	r3, #1
 8016b36:	e01a      	b.n	8016b6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	2220      	movs	r2, #32
 8016b3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	6859      	ldr	r1, [r3, #4]
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	681a      	ldr	r2, [r3, #0]
 8016b4a:	4b0c      	ldr	r3, [pc, #48]	; (8016b7c <HAL_I2C_Master_Receive+0x1e8>)
 8016b4c:	400b      	ands	r3, r1
 8016b4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	2220      	movs	r2, #32
 8016b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	2200      	movs	r2, #0
 8016b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	e000      	b.n	8016b6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8016b6c:	2302      	movs	r3, #2
  }
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3718      	adds	r7, #24
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}
 8016b76:	bf00      	nop
 8016b78:	80002400 	.word	0x80002400
 8016b7c:	fe00e800 	.word	0xfe00e800

08016b80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016b80:	b480      	push	{r7}
 8016b82:	b083      	sub	sp, #12
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	699b      	ldr	r3, [r3, #24]
 8016b8e:	f003 0302 	and.w	r3, r3, #2
 8016b92:	2b02      	cmp	r3, #2
 8016b94:	d103      	bne.n	8016b9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	699b      	ldr	r3, [r3, #24]
 8016ba4:	f003 0301 	and.w	r3, r3, #1
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d007      	beq.n	8016bbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	699a      	ldr	r2, [r3, #24]
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	f042 0201 	orr.w	r2, r2, #1
 8016bba:	619a      	str	r2, [r3, #24]
  }
}
 8016bbc:	bf00      	nop
 8016bbe:	370c      	adds	r7, #12
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc6:	4770      	bx	lr

08016bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b084      	sub	sp, #16
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	603b      	str	r3, [r7, #0]
 8016bd4:	4613      	mov	r3, r2
 8016bd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016bd8:	e031      	b.n	8016c3e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016be0:	d02d      	beq.n	8016c3e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016be2:	f7fd fac5 	bl	8014170 <HAL_GetTick>
 8016be6:	4602      	mov	r2, r0
 8016be8:	69bb      	ldr	r3, [r7, #24]
 8016bea:	1ad3      	subs	r3, r2, r3
 8016bec:	683a      	ldr	r2, [r7, #0]
 8016bee:	429a      	cmp	r2, r3
 8016bf0:	d302      	bcc.n	8016bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d122      	bne.n	8016c3e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	699a      	ldr	r2, [r3, #24]
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	4013      	ands	r3, r2
 8016c02:	68ba      	ldr	r2, [r7, #8]
 8016c04:	429a      	cmp	r2, r3
 8016c06:	bf0c      	ite	eq
 8016c08:	2301      	moveq	r3, #1
 8016c0a:	2300      	movne	r3, #0
 8016c0c:	b2db      	uxtb	r3, r3
 8016c0e:	461a      	mov	r2, r3
 8016c10:	79fb      	ldrb	r3, [r7, #7]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d113      	bne.n	8016c3e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c1a:	f043 0220 	orr.w	r2, r3, #32
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	2220      	movs	r2, #32
 8016c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	2200      	movs	r2, #0
 8016c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	e00f      	b.n	8016c5e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	699a      	ldr	r2, [r3, #24]
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	4013      	ands	r3, r2
 8016c48:	68ba      	ldr	r2, [r7, #8]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	bf0c      	ite	eq
 8016c4e:	2301      	moveq	r3, #1
 8016c50:	2300      	movne	r3, #0
 8016c52:	b2db      	uxtb	r3, r3
 8016c54:	461a      	mov	r2, r3
 8016c56:	79fb      	ldrb	r3, [r7, #7]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d0be      	beq.n	8016bda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016c5c:	2300      	movs	r3, #0
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3710      	adds	r7, #16
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}

08016c66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016c66:	b580      	push	{r7, lr}
 8016c68:	b084      	sub	sp, #16
 8016c6a:	af00      	add	r7, sp, #0
 8016c6c:	60f8      	str	r0, [r7, #12]
 8016c6e:	60b9      	str	r1, [r7, #8]
 8016c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016c72:	e033      	b.n	8016cdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016c74:	687a      	ldr	r2, [r7, #4]
 8016c76:	68b9      	ldr	r1, [r7, #8]
 8016c78:	68f8      	ldr	r0, [r7, #12]
 8016c7a:	f000 f901 	bl	8016e80 <I2C_IsErrorOccurred>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d001      	beq.n	8016c88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016c84:	2301      	movs	r3, #1
 8016c86:	e031      	b.n	8016cec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c8e:	d025      	beq.n	8016cdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016c90:	f7fd fa6e 	bl	8014170 <HAL_GetTick>
 8016c94:	4602      	mov	r2, r0
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	1ad3      	subs	r3, r2, r3
 8016c9a:	68ba      	ldr	r2, [r7, #8]
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d302      	bcc.n	8016ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8016ca0:	68bb      	ldr	r3, [r7, #8]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d11a      	bne.n	8016cdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	699b      	ldr	r3, [r3, #24]
 8016cac:	f003 0302 	and.w	r3, r3, #2
 8016cb0:	2b02      	cmp	r3, #2
 8016cb2:	d013      	beq.n	8016cdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cb8:	f043 0220 	orr.w	r2, r3, #32
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	2220      	movs	r2, #32
 8016cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8016cd8:	2301      	movs	r3, #1
 8016cda:	e007      	b.n	8016cec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	699b      	ldr	r3, [r3, #24]
 8016ce2:	f003 0302 	and.w	r3, r3, #2
 8016ce6:	2b02      	cmp	r3, #2
 8016ce8:	d1c4      	bne.n	8016c74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8016cea:	2300      	movs	r3, #0
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3710      	adds	r7, #16
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b084      	sub	sp, #16
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	60f8      	str	r0, [r7, #12]
 8016cfc:	60b9      	str	r1, [r7, #8]
 8016cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016d00:	e02f      	b.n	8016d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016d02:	687a      	ldr	r2, [r7, #4]
 8016d04:	68b9      	ldr	r1, [r7, #8]
 8016d06:	68f8      	ldr	r0, [r7, #12]
 8016d08:	f000 f8ba 	bl	8016e80 <I2C_IsErrorOccurred>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d001      	beq.n	8016d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016d12:	2301      	movs	r3, #1
 8016d14:	e02d      	b.n	8016d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016d16:	f7fd fa2b 	bl	8014170 <HAL_GetTick>
 8016d1a:	4602      	mov	r2, r0
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	1ad3      	subs	r3, r2, r3
 8016d20:	68ba      	ldr	r2, [r7, #8]
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d302      	bcc.n	8016d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d11a      	bne.n	8016d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	699b      	ldr	r3, [r3, #24]
 8016d32:	f003 0320 	and.w	r3, r3, #32
 8016d36:	2b20      	cmp	r3, #32
 8016d38:	d013      	beq.n	8016d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d3e:	f043 0220 	orr.w	r2, r3, #32
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	2220      	movs	r2, #32
 8016d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	2200      	movs	r2, #0
 8016d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	2200      	movs	r2, #0
 8016d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016d5e:	2301      	movs	r3, #1
 8016d60:	e007      	b.n	8016d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	699b      	ldr	r3, [r3, #24]
 8016d68:	f003 0320 	and.w	r3, r3, #32
 8016d6c:	2b20      	cmp	r3, #32
 8016d6e:	d1c8      	bne.n	8016d02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016d70:	2300      	movs	r3, #0
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	3710      	adds	r7, #16
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}
	...

08016d7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b084      	sub	sp, #16
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	60f8      	str	r0, [r7, #12]
 8016d84:	60b9      	str	r1, [r7, #8]
 8016d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016d88:	e06b      	b.n	8016e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016d8a:	687a      	ldr	r2, [r7, #4]
 8016d8c:	68b9      	ldr	r1, [r7, #8]
 8016d8e:	68f8      	ldr	r0, [r7, #12]
 8016d90:	f000 f876 	bl	8016e80 <I2C_IsErrorOccurred>
 8016d94:	4603      	mov	r3, r0
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d001      	beq.n	8016d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	e069      	b.n	8016e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	699b      	ldr	r3, [r3, #24]
 8016da4:	f003 0320 	and.w	r3, r3, #32
 8016da8:	2b20      	cmp	r3, #32
 8016daa:	d138      	bne.n	8016e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	699b      	ldr	r3, [r3, #24]
 8016db2:	f003 0304 	and.w	r3, r3, #4
 8016db6:	2b04      	cmp	r3, #4
 8016db8:	d105      	bne.n	8016dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d001      	beq.n	8016dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	e055      	b.n	8016e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	699b      	ldr	r3, [r3, #24]
 8016dcc:	f003 0310 	and.w	r3, r3, #16
 8016dd0:	2b10      	cmp	r3, #16
 8016dd2:	d107      	bne.n	8016de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	2210      	movs	r2, #16
 8016dda:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2204      	movs	r2, #4
 8016de0:	645a      	str	r2, [r3, #68]	; 0x44
 8016de2:	e002      	b.n	8016dea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	2200      	movs	r2, #0
 8016de8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	2220      	movs	r2, #32
 8016df0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	6859      	ldr	r1, [r3, #4]
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681a      	ldr	r2, [r3, #0]
 8016dfc:	4b1f      	ldr	r3, [pc, #124]	; (8016e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8016dfe:	400b      	ands	r3, r1
 8016e00:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	2220      	movs	r2, #32
 8016e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	2200      	movs	r2, #0
 8016e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	e029      	b.n	8016e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016e1e:	f7fd f9a7 	bl	8014170 <HAL_GetTick>
 8016e22:	4602      	mov	r2, r0
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	1ad3      	subs	r3, r2, r3
 8016e28:	68ba      	ldr	r2, [r7, #8]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d302      	bcc.n	8016e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8016e2e:	68bb      	ldr	r3, [r7, #8]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d116      	bne.n	8016e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	699b      	ldr	r3, [r3, #24]
 8016e3a:	f003 0304 	and.w	r3, r3, #4
 8016e3e:	2b04      	cmp	r3, #4
 8016e40:	d00f      	beq.n	8016e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e46:	f043 0220 	orr.w	r2, r3, #32
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	2220      	movs	r2, #32
 8016e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016e5e:	2301      	movs	r3, #1
 8016e60:	e007      	b.n	8016e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	699b      	ldr	r3, [r3, #24]
 8016e68:	f003 0304 	and.w	r3, r3, #4
 8016e6c:	2b04      	cmp	r3, #4
 8016e6e:	d18c      	bne.n	8016d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016e70:	2300      	movs	r3, #0
}
 8016e72:	4618      	mov	r0, r3
 8016e74:	3710      	adds	r7, #16
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}
 8016e7a:	bf00      	nop
 8016e7c:	fe00e800 	.word	0xfe00e800

08016e80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b08a      	sub	sp, #40	; 0x28
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	699b      	ldr	r3, [r3, #24]
 8016e98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8016ea2:	69bb      	ldr	r3, [r7, #24]
 8016ea4:	f003 0310 	and.w	r3, r3, #16
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d068      	beq.n	8016f7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	2210      	movs	r2, #16
 8016eb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016eb4:	e049      	b.n	8016f4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ebc:	d045      	beq.n	8016f4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016ebe:	f7fd f957 	bl	8014170 <HAL_GetTick>
 8016ec2:	4602      	mov	r2, r0
 8016ec4:	69fb      	ldr	r3, [r7, #28]
 8016ec6:	1ad3      	subs	r3, r2, r3
 8016ec8:	68ba      	ldr	r2, [r7, #8]
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d302      	bcc.n	8016ed4 <I2C_IsErrorOccurred+0x54>
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d13a      	bne.n	8016f4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	685b      	ldr	r3, [r3, #4]
 8016eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016ede:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016ee6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	699b      	ldr	r3, [r3, #24]
 8016eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016ef6:	d121      	bne.n	8016f3c <I2C_IsErrorOccurred+0xbc>
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016efe:	d01d      	beq.n	8016f3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8016f00:	7cfb      	ldrb	r3, [r7, #19]
 8016f02:	2b20      	cmp	r3, #32
 8016f04:	d01a      	beq.n	8016f3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	685a      	ldr	r2, [r3, #4]
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016f14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8016f16:	f7fd f92b 	bl	8014170 <HAL_GetTick>
 8016f1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016f1c:	e00e      	b.n	8016f3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8016f1e:	f7fd f927 	bl	8014170 <HAL_GetTick>
 8016f22:	4602      	mov	r2, r0
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	1ad3      	subs	r3, r2, r3
 8016f28:	2b19      	cmp	r3, #25
 8016f2a:	d907      	bls.n	8016f3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8016f2c:	6a3b      	ldr	r3, [r7, #32]
 8016f2e:	f043 0320 	orr.w	r3, r3, #32
 8016f32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8016f34:	2301      	movs	r3, #1
 8016f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8016f3a:	e006      	b.n	8016f4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	699b      	ldr	r3, [r3, #24]
 8016f42:	f003 0320 	and.w	r3, r3, #32
 8016f46:	2b20      	cmp	r3, #32
 8016f48:	d1e9      	bne.n	8016f1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	699b      	ldr	r3, [r3, #24]
 8016f50:	f003 0320 	and.w	r3, r3, #32
 8016f54:	2b20      	cmp	r3, #32
 8016f56:	d003      	beq.n	8016f60 <I2C_IsErrorOccurred+0xe0>
 8016f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d0aa      	beq.n	8016eb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d103      	bne.n	8016f70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	2220      	movs	r2, #32
 8016f6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8016f70:	6a3b      	ldr	r3, [r7, #32]
 8016f72:	f043 0304 	orr.w	r3, r3, #4
 8016f76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8016f78:	2301      	movs	r3, #1
 8016f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	699b      	ldr	r3, [r3, #24]
 8016f84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8016f86:	69bb      	ldr	r3, [r7, #24]
 8016f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d00b      	beq.n	8016fa8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8016f90:	6a3b      	ldr	r3, [r7, #32]
 8016f92:	f043 0301 	orr.w	r3, r3, #1
 8016f96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016fa0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8016fa8:	69bb      	ldr	r3, [r7, #24]
 8016faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d00b      	beq.n	8016fca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8016fb2:	6a3b      	ldr	r3, [r7, #32]
 8016fb4:	f043 0308 	orr.w	r3, r3, #8
 8016fb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016fc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8016fca:	69bb      	ldr	r3, [r7, #24]
 8016fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d00b      	beq.n	8016fec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8016fd4:	6a3b      	ldr	r3, [r7, #32]
 8016fd6:	f043 0302 	orr.w	r3, r3, #2
 8016fda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016fe4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016fe6:	2301      	movs	r3, #1
 8016fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8016fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d01c      	beq.n	801702e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016ff4:	68f8      	ldr	r0, [r7, #12]
 8016ff6:	f7ff fdc3 	bl	8016b80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	6859      	ldr	r1, [r3, #4]
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	681a      	ldr	r2, [r3, #0]
 8017004:	4b0d      	ldr	r3, [pc, #52]	; (801703c <I2C_IsErrorOccurred+0x1bc>)
 8017006:	400b      	ands	r3, r1
 8017008:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801700e:	6a3b      	ldr	r3, [r7, #32]
 8017010:	431a      	orrs	r2, r3
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	2220      	movs	r2, #32
 801701a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	2200      	movs	r2, #0
 8017022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	2200      	movs	r2, #0
 801702a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801702e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8017032:	4618      	mov	r0, r3
 8017034:	3728      	adds	r7, #40	; 0x28
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	fe00e800 	.word	0xfe00e800

08017040 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017040:	b480      	push	{r7}
 8017042:	b087      	sub	sp, #28
 8017044:	af00      	add	r7, sp, #0
 8017046:	60f8      	str	r0, [r7, #12]
 8017048:	607b      	str	r3, [r7, #4]
 801704a:	460b      	mov	r3, r1
 801704c:	817b      	strh	r3, [r7, #10]
 801704e:	4613      	mov	r3, r2
 8017050:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017052:	897b      	ldrh	r3, [r7, #10]
 8017054:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017058:	7a7b      	ldrb	r3, [r7, #9]
 801705a:	041b      	lsls	r3, r3, #16
 801705c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017060:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017066:	6a3b      	ldr	r3, [r7, #32]
 8017068:	4313      	orrs	r3, r2
 801706a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801706e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	685a      	ldr	r2, [r3, #4]
 8017076:	6a3b      	ldr	r3, [r7, #32]
 8017078:	0d5b      	lsrs	r3, r3, #21
 801707a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801707e:	4b08      	ldr	r3, [pc, #32]	; (80170a0 <I2C_TransferConfig+0x60>)
 8017080:	430b      	orrs	r3, r1
 8017082:	43db      	mvns	r3, r3
 8017084:	ea02 0103 	and.w	r1, r2, r3
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	697a      	ldr	r2, [r7, #20]
 801708e:	430a      	orrs	r2, r1
 8017090:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017092:	bf00      	nop
 8017094:	371c      	adds	r7, #28
 8017096:	46bd      	mov	sp, r7
 8017098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709c:	4770      	bx	lr
 801709e:	bf00      	nop
 80170a0:	03ff63ff 	.word	0x03ff63ff

080170a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80170a4:	b480      	push	{r7}
 80170a6:	b083      	sub	sp, #12
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
 80170ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80170b4:	b2db      	uxtb	r3, r3
 80170b6:	2b20      	cmp	r3, #32
 80170b8:	d138      	bne.n	801712c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80170c0:	2b01      	cmp	r3, #1
 80170c2:	d101      	bne.n	80170c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80170c4:	2302      	movs	r3, #2
 80170c6:	e032      	b.n	801712e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	2201      	movs	r2, #1
 80170cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	2224      	movs	r2, #36	; 0x24
 80170d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	681a      	ldr	r2, [r3, #0]
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	f022 0201 	bic.w	r2, r2, #1
 80170e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	681a      	ldr	r2, [r3, #0]
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80170f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	6819      	ldr	r1, [r3, #0]
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	683a      	ldr	r2, [r7, #0]
 8017104:	430a      	orrs	r2, r1
 8017106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	681a      	ldr	r2, [r3, #0]
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	f042 0201 	orr.w	r2, r2, #1
 8017116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	2220      	movs	r2, #32
 801711c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	2200      	movs	r2, #0
 8017124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017128:	2300      	movs	r3, #0
 801712a:	e000      	b.n	801712e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801712c:	2302      	movs	r3, #2
  }
}
 801712e:	4618      	mov	r0, r3
 8017130:	370c      	adds	r7, #12
 8017132:	46bd      	mov	sp, r7
 8017134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017138:	4770      	bx	lr

0801713a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801713a:	b480      	push	{r7}
 801713c:	b085      	sub	sp, #20
 801713e:	af00      	add	r7, sp, #0
 8017140:	6078      	str	r0, [r7, #4]
 8017142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801714a:	b2db      	uxtb	r3, r3
 801714c:	2b20      	cmp	r3, #32
 801714e:	d139      	bne.n	80171c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017156:	2b01      	cmp	r3, #1
 8017158:	d101      	bne.n	801715e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801715a:	2302      	movs	r3, #2
 801715c:	e033      	b.n	80171c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	2201      	movs	r2, #1
 8017162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	2224      	movs	r2, #36	; 0x24
 801716a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	681a      	ldr	r2, [r3, #0]
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	f022 0201 	bic.w	r2, r2, #1
 801717c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801718c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	021b      	lsls	r3, r3, #8
 8017192:	68fa      	ldr	r2, [r7, #12]
 8017194:	4313      	orrs	r3, r2
 8017196:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	68fa      	ldr	r2, [r7, #12]
 801719e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	681a      	ldr	r2, [r3, #0]
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	f042 0201 	orr.w	r2, r2, #1
 80171ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	2220      	movs	r2, #32
 80171b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2200      	movs	r2, #0
 80171bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80171c0:	2300      	movs	r3, #0
 80171c2:	e000      	b.n	80171c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80171c4:	2302      	movs	r3, #2
  }
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3714      	adds	r7, #20
 80171ca:	46bd      	mov	sp, r7
 80171cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d0:	4770      	bx	lr
	...

080171d4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80171d4:	b480      	push	{r7}
 80171d6:	b085      	sub	sp, #20
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80171dc:	2300      	movs	r3, #0
 80171de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80171e0:	4b0b      	ldr	r3, [pc, #44]	; (8017210 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	f003 0301 	and.w	r3, r3, #1
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d002      	beq.n	80171f2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80171ec:	2301      	movs	r3, #1
 80171ee:	73fb      	strb	r3, [r7, #15]
 80171f0:	e007      	b.n	8017202 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80171f2:	4b07      	ldr	r3, [pc, #28]	; (8017210 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	f023 0204 	bic.w	r2, r3, #4
 80171fa:	4905      	ldr	r1, [pc, #20]	; (8017210 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	4313      	orrs	r3, r2
 8017200:	600b      	str	r3, [r1, #0]
  }

  return status;
 8017202:	7bfb      	ldrb	r3, [r7, #15]
}
 8017204:	4618      	mov	r0, r3
 8017206:	3714      	adds	r7, #20
 8017208:	46bd      	mov	sp, r7
 801720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720e:	4770      	bx	lr
 8017210:	40030400 	.word	0x40030400

08017214 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8017214:	b480      	push	{r7}
 8017216:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8017218:	4b05      	ldr	r3, [pc, #20]	; (8017230 <HAL_ICACHE_Enable+0x1c>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	4a04      	ldr	r2, [pc, #16]	; (8017230 <HAL_ICACHE_Enable+0x1c>)
 801721e:	f043 0301 	orr.w	r3, r3, #1
 8017222:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8017224:	2300      	movs	r3, #0
}
 8017226:	4618      	mov	r0, r3
 8017228:	46bd      	mov	sp, r7
 801722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722e:	4770      	bx	lr
 8017230:	40030400 	.word	0x40030400

08017234 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017236:	b08b      	sub	sp, #44	; 0x2c
 8017238:	af06      	add	r7, sp, #24
 801723a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d101      	bne.n	8017246 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017242:	2301      	movs	r3, #1
 8017244:	e0cb      	b.n	80173de <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801724c:	b2db      	uxtb	r3, r3
 801724e:	2b00      	cmp	r3, #0
 8017250:	d106      	bne.n	8017260 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2200      	movs	r2, #0
 8017256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f7fc fc80 	bl	8013b60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	2203      	movs	r2, #3
 8017264:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	4618      	mov	r0, r3
 801726e:	f007 f9c7 	bl	801e600 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017272:	2300      	movs	r3, #0
 8017274:	73fb      	strb	r3, [r7, #15]
 8017276:	e040      	b.n	80172fa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017278:	7bfb      	ldrb	r3, [r7, #15]
 801727a:	6879      	ldr	r1, [r7, #4]
 801727c:	1c5a      	adds	r2, r3, #1
 801727e:	4613      	mov	r3, r2
 8017280:	009b      	lsls	r3, r3, #2
 8017282:	4413      	add	r3, r2
 8017284:	00db      	lsls	r3, r3, #3
 8017286:	440b      	add	r3, r1
 8017288:	3301      	adds	r3, #1
 801728a:	2201      	movs	r2, #1
 801728c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801728e:	7bfb      	ldrb	r3, [r7, #15]
 8017290:	6879      	ldr	r1, [r7, #4]
 8017292:	1c5a      	adds	r2, r3, #1
 8017294:	4613      	mov	r3, r2
 8017296:	009b      	lsls	r3, r3, #2
 8017298:	4413      	add	r3, r2
 801729a:	00db      	lsls	r3, r3, #3
 801729c:	440b      	add	r3, r1
 801729e:	7bfa      	ldrb	r2, [r7, #15]
 80172a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80172a2:	7bfb      	ldrb	r3, [r7, #15]
 80172a4:	6879      	ldr	r1, [r7, #4]
 80172a6:	1c5a      	adds	r2, r3, #1
 80172a8:	4613      	mov	r3, r2
 80172aa:	009b      	lsls	r3, r3, #2
 80172ac:	4413      	add	r3, r2
 80172ae:	00db      	lsls	r3, r3, #3
 80172b0:	440b      	add	r3, r1
 80172b2:	3303      	adds	r3, #3
 80172b4:	2200      	movs	r2, #0
 80172b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80172b8:	7bfa      	ldrb	r2, [r7, #15]
 80172ba:	6879      	ldr	r1, [r7, #4]
 80172bc:	4613      	mov	r3, r2
 80172be:	009b      	lsls	r3, r3, #2
 80172c0:	4413      	add	r3, r2
 80172c2:	00db      	lsls	r3, r3, #3
 80172c4:	440b      	add	r3, r1
 80172c6:	3338      	adds	r3, #56	; 0x38
 80172c8:	2200      	movs	r2, #0
 80172ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80172cc:	7bfa      	ldrb	r2, [r7, #15]
 80172ce:	6879      	ldr	r1, [r7, #4]
 80172d0:	4613      	mov	r3, r2
 80172d2:	009b      	lsls	r3, r3, #2
 80172d4:	4413      	add	r3, r2
 80172d6:	00db      	lsls	r3, r3, #3
 80172d8:	440b      	add	r3, r1
 80172da:	333c      	adds	r3, #60	; 0x3c
 80172dc:	2200      	movs	r2, #0
 80172de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80172e0:	7bfa      	ldrb	r2, [r7, #15]
 80172e2:	6879      	ldr	r1, [r7, #4]
 80172e4:	4613      	mov	r3, r2
 80172e6:	009b      	lsls	r3, r3, #2
 80172e8:	4413      	add	r3, r2
 80172ea:	00db      	lsls	r3, r3, #3
 80172ec:	440b      	add	r3, r1
 80172ee:	3340      	adds	r3, #64	; 0x40
 80172f0:	2200      	movs	r2, #0
 80172f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80172f4:	7bfb      	ldrb	r3, [r7, #15]
 80172f6:	3301      	adds	r3, #1
 80172f8:	73fb      	strb	r3, [r7, #15]
 80172fa:	7bfa      	ldrb	r2, [r7, #15]
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	429a      	cmp	r2, r3
 8017302:	d3b9      	bcc.n	8017278 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017304:	2300      	movs	r3, #0
 8017306:	73fb      	strb	r3, [r7, #15]
 8017308:	e044      	b.n	8017394 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801730a:	7bfa      	ldrb	r2, [r7, #15]
 801730c:	6879      	ldr	r1, [r7, #4]
 801730e:	4613      	mov	r3, r2
 8017310:	009b      	lsls	r3, r3, #2
 8017312:	4413      	add	r3, r2
 8017314:	00db      	lsls	r3, r3, #3
 8017316:	440b      	add	r3, r1
 8017318:	f203 1369 	addw	r3, r3, #361	; 0x169
 801731c:	2200      	movs	r2, #0
 801731e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017320:	7bfa      	ldrb	r2, [r7, #15]
 8017322:	6879      	ldr	r1, [r7, #4]
 8017324:	4613      	mov	r3, r2
 8017326:	009b      	lsls	r3, r3, #2
 8017328:	4413      	add	r3, r2
 801732a:	00db      	lsls	r3, r3, #3
 801732c:	440b      	add	r3, r1
 801732e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017332:	7bfa      	ldrb	r2, [r7, #15]
 8017334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8017336:	7bfa      	ldrb	r2, [r7, #15]
 8017338:	6879      	ldr	r1, [r7, #4]
 801733a:	4613      	mov	r3, r2
 801733c:	009b      	lsls	r3, r3, #2
 801733e:	4413      	add	r3, r2
 8017340:	00db      	lsls	r3, r3, #3
 8017342:	440b      	add	r3, r1
 8017344:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8017348:	2200      	movs	r2, #0
 801734a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801734c:	7bfa      	ldrb	r2, [r7, #15]
 801734e:	6879      	ldr	r1, [r7, #4]
 8017350:	4613      	mov	r3, r2
 8017352:	009b      	lsls	r3, r3, #2
 8017354:	4413      	add	r3, r2
 8017356:	00db      	lsls	r3, r3, #3
 8017358:	440b      	add	r3, r1
 801735a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801735e:	2200      	movs	r2, #0
 8017360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8017362:	7bfa      	ldrb	r2, [r7, #15]
 8017364:	6879      	ldr	r1, [r7, #4]
 8017366:	4613      	mov	r3, r2
 8017368:	009b      	lsls	r3, r3, #2
 801736a:	4413      	add	r3, r2
 801736c:	00db      	lsls	r3, r3, #3
 801736e:	440b      	add	r3, r1
 8017370:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017374:	2200      	movs	r2, #0
 8017376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8017378:	7bfa      	ldrb	r2, [r7, #15]
 801737a:	6879      	ldr	r1, [r7, #4]
 801737c:	4613      	mov	r3, r2
 801737e:	009b      	lsls	r3, r3, #2
 8017380:	4413      	add	r3, r2
 8017382:	00db      	lsls	r3, r3, #3
 8017384:	440b      	add	r3, r1
 8017386:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801738a:	2200      	movs	r2, #0
 801738c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801738e:	7bfb      	ldrb	r3, [r7, #15]
 8017390:	3301      	adds	r3, #1
 8017392:	73fb      	strb	r3, [r7, #15]
 8017394:	7bfa      	ldrb	r2, [r7, #15]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	685b      	ldr	r3, [r3, #4]
 801739a:	429a      	cmp	r2, r3
 801739c:	d3b5      	bcc.n	801730a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	603b      	str	r3, [r7, #0]
 80173a4:	687e      	ldr	r6, [r7, #4]
 80173a6:	466d      	mov	r5, sp
 80173a8:	f106 0410 	add.w	r4, r6, #16
 80173ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80173ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80173b0:	6823      	ldr	r3, [r4, #0]
 80173b2:	602b      	str	r3, [r5, #0]
 80173b4:	1d33      	adds	r3, r6, #4
 80173b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80173b8:	6838      	ldr	r0, [r7, #0]
 80173ba:	f007 f93c 	bl	801e636 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	2200      	movs	r2, #0
 80173c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2201      	movs	r2, #1
 80173ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	69db      	ldr	r3, [r3, #28]
 80173d2:	2b01      	cmp	r3, #1
 80173d4:	d102      	bne.n	80173dc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f000 f805 	bl	80173e6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80173dc:	2300      	movs	r3, #0
}
 80173de:	4618      	mov	r0, r3
 80173e0:	3714      	adds	r7, #20
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080173e6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80173e6:	b480      	push	{r7}
 80173e8:	b085      	sub	sp, #20
 80173ea:	af00      	add	r7, sp, #0
 80173ec:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2201      	movs	r2, #1
 80173f8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	2200      	movs	r2, #0
 8017400:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801740a:	b29b      	uxth	r3, r3
 801740c:	f043 0301 	orr.w	r3, r3, #1
 8017410:	b29a      	uxth	r2, r3
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801741e:	b29b      	uxth	r3, r3
 8017420:	f043 0302 	orr.w	r3, r3, #2
 8017424:	b29a      	uxth	r2, r3
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801742c:	2300      	movs	r3, #0
}
 801742e:	4618      	mov	r0, r3
 8017430:	3714      	adds	r7, #20
 8017432:	46bd      	mov	sp, r7
 8017434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017438:	4770      	bx	lr
	...

0801743c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801743c:	b480      	push	{r7}
 801743e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017440:	4b05      	ldr	r3, [pc, #20]	; (8017458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	4a04      	ldr	r2, [pc, #16]	; (8017458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801744a:	6013      	str	r3, [r2, #0]
}
 801744c:	bf00      	nop
 801744e:	46bd      	mov	sp, r7
 8017450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017454:	4770      	bx	lr
 8017456:	bf00      	nop
 8017458:	40007000 	.word	0x40007000

0801745c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801745c:	b480      	push	{r7}
 801745e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8017460:	4b04      	ldr	r3, [pc, #16]	; (8017474 <HAL_PWREx_GetVoltageRange+0x18>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8017468:	4618      	mov	r0, r3
 801746a:	46bd      	mov	sp, r7
 801746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017470:	4770      	bx	lr
 8017472:	bf00      	nop
 8017474:	40007000 	.word	0x40007000

08017478 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8017480:	4b27      	ldr	r3, [pc, #156]	; (8017520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017488:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 801748a:	f000 f861 	bl	8017550 <HAL_PWREx_SMPS_GetEffectiveMode>
 801748e:	4603      	mov	r3, r0
 8017490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017494:	d101      	bne.n	801749a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8017496:	2301      	movs	r3, #1
 8017498:	e03e      	b.n	8017518 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 801749a:	4b21      	ldr	r3, [pc, #132]	; (8017520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801749c:	68db      	ldr	r3, [r3, #12]
 801749e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80174a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80174a6:	d101      	bne.n	80174ac <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80174a8:	2301      	movs	r3, #1
 80174aa:	e035      	b.n	8017518 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80174ac:	68ba      	ldr	r2, [r7, #8]
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	429a      	cmp	r2, r3
 80174b2:	d101      	bne.n	80174b8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80174b4:	2300      	movs	r3, #0
 80174b6:	e02f      	b.n	8017518 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80174b8:	4b19      	ldr	r3, [pc, #100]	; (8017520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80174c0:	4917      	ldr	r1, [pc, #92]	; (8017520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	4313      	orrs	r3, r2
 80174c6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80174c8:	4b16      	ldr	r3, [pc, #88]	; (8017524 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	095b      	lsrs	r3, r3, #5
 80174ce:	4a16      	ldr	r2, [pc, #88]	; (8017528 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80174d0:	fba2 2303 	umull	r2, r3, r2, r3
 80174d4:	09db      	lsrs	r3, r3, #7
 80174d6:	2232      	movs	r2, #50	; 0x32
 80174d8:	fb02 f303 	mul.w	r3, r2, r3
 80174dc:	4a13      	ldr	r2, [pc, #76]	; (801752c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80174de:	fba2 2303 	umull	r2, r3, r2, r3
 80174e2:	08db      	lsrs	r3, r3, #3
 80174e4:	3301      	adds	r3, #1
 80174e6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80174e8:	e002      	b.n	80174f0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	3b01      	subs	r3, #1
 80174ee:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80174f0:	4b0b      	ldr	r3, [pc, #44]	; (8017520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80174f2:	695b      	ldr	r3, [r3, #20]
 80174f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80174f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80174fc:	d102      	bne.n	8017504 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d1f2      	bne.n	80174ea <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8017504:	4b06      	ldr	r3, [pc, #24]	; (8017520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8017506:	695b      	ldr	r3, [r3, #20]
 8017508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801750c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017510:	d101      	bne.n	8017516 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8017512:	2303      	movs	r3, #3
 8017514:	e000      	b.n	8017518 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8017516:	2300      	movs	r3, #0
}
 8017518:	4618      	mov	r0, r3
 801751a:	3710      	adds	r7, #16
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}
 8017520:	40007000 	.word	0x40007000
 8017524:	20000090 	.word	0x20000090
 8017528:	0a7c5ac5 	.word	0x0a7c5ac5
 801752c:	cccccccd 	.word	0xcccccccd

08017530 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8017530:	b480      	push	{r7}
 8017532:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8017534:	4b05      	ldr	r3, [pc, #20]	; (801754c <HAL_PWREx_EnableVddIO2+0x1c>)
 8017536:	685b      	ldr	r3, [r3, #4]
 8017538:	4a04      	ldr	r2, [pc, #16]	; (801754c <HAL_PWREx_EnableVddIO2+0x1c>)
 801753a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801753e:	6053      	str	r3, [r2, #4]
}
 8017540:	bf00      	nop
 8017542:	46bd      	mov	sp, r7
 8017544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017548:	4770      	bx	lr
 801754a:	bf00      	nop
 801754c:	40007000 	.word	0x40007000

08017550 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8017550:	b480      	push	{r7}
 8017552:	b083      	sub	sp, #12
 8017554:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8017556:	4b0f      	ldr	r3, [pc, #60]	; (8017594 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8017558:	691b      	ldr	r3, [r3, #16]
 801755a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017562:	2b00      	cmp	r3, #0
 8017564:	d003      	beq.n	801756e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8017566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801756a:	607b      	str	r3, [r7, #4]
 801756c:	e00a      	b.n	8017584 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017574:	2b00      	cmp	r3, #0
 8017576:	d103      	bne.n	8017580 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8017578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801757c:	607b      	str	r3, [r7, #4]
 801757e:	e001      	b.n	8017584 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8017580:	2300      	movs	r3, #0
 8017582:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8017584:	687b      	ldr	r3, [r7, #4]
}
 8017586:	4618      	mov	r0, r3
 8017588:	370c      	adds	r7, #12
 801758a:	46bd      	mov	sp, r7
 801758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017590:	4770      	bx	lr
 8017592:	bf00      	nop
 8017594:	40007000 	.word	0x40007000

08017598 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b088      	sub	sp, #32
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d102      	bne.n	80175ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80175a6:	2301      	movs	r3, #1
 80175a8:	f000 bcc2 	b.w	8017f30 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80175ac:	4b99      	ldr	r3, [pc, #612]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80175ae:	689b      	ldr	r3, [r3, #8]
 80175b0:	f003 030c 	and.w	r3, r3, #12
 80175b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80175b6:	4b97      	ldr	r3, [pc, #604]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80175b8:	68db      	ldr	r3, [r3, #12]
 80175ba:	f003 0303 	and.w	r3, r3, #3
 80175be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	f003 0310 	and.w	r3, r3, #16
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	f000 80e9 	beq.w	80177a0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80175ce:	69bb      	ldr	r3, [r7, #24]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d006      	beq.n	80175e2 <HAL_RCC_OscConfig+0x4a>
 80175d4:	69bb      	ldr	r3, [r7, #24]
 80175d6:	2b0c      	cmp	r3, #12
 80175d8:	f040 8083 	bne.w	80176e2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	2b01      	cmp	r3, #1
 80175e0:	d17f      	bne.n	80176e2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80175e2:	4b8c      	ldr	r3, [pc, #560]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	f003 0302 	and.w	r3, r3, #2
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d006      	beq.n	80175fc <HAL_RCC_OscConfig+0x64>
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	69db      	ldr	r3, [r3, #28]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d102      	bne.n	80175fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80175f6:	2301      	movs	r3, #1
 80175f8:	f000 bc9a 	b.w	8017f30 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017600:	4b84      	ldr	r3, [pc, #528]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	f003 0308 	and.w	r3, r3, #8
 8017608:	2b00      	cmp	r3, #0
 801760a:	d004      	beq.n	8017616 <HAL_RCC_OscConfig+0x7e>
 801760c:	4b81      	ldr	r3, [pc, #516]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017614:	e005      	b.n	8017622 <HAL_RCC_OscConfig+0x8a>
 8017616:	4b7f      	ldr	r3, [pc, #508]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801761c:	091b      	lsrs	r3, r3, #4
 801761e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017622:	4293      	cmp	r3, r2
 8017624:	d224      	bcs.n	8017670 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801762a:	4618      	mov	r0, r3
 801762c:	f000 fece 	bl	80183cc <RCC_SetFlashLatencyFromMSIRange>
 8017630:	4603      	mov	r3, r0
 8017632:	2b00      	cmp	r3, #0
 8017634:	d002      	beq.n	801763c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8017636:	2301      	movs	r3, #1
 8017638:	f000 bc7a 	b.w	8017f30 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801763c:	4b75      	ldr	r3, [pc, #468]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	4a74      	ldr	r2, [pc, #464]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017642:	f043 0308 	orr.w	r3, r3, #8
 8017646:	6013      	str	r3, [r2, #0]
 8017648:	4b72      	ldr	r3, [pc, #456]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017654:	496f      	ldr	r1, [pc, #444]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017656:	4313      	orrs	r3, r2
 8017658:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801765a:	4b6e      	ldr	r3, [pc, #440]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801765c:	685b      	ldr	r3, [r3, #4]
 801765e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	6a1b      	ldr	r3, [r3, #32]
 8017666:	021b      	lsls	r3, r3, #8
 8017668:	496a      	ldr	r1, [pc, #424]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801766a:	4313      	orrs	r3, r2
 801766c:	604b      	str	r3, [r1, #4]
 801766e:	e026      	b.n	80176be <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017670:	4b68      	ldr	r3, [pc, #416]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	4a67      	ldr	r2, [pc, #412]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017676:	f043 0308 	orr.w	r3, r3, #8
 801767a:	6013      	str	r3, [r2, #0]
 801767c:	4b65      	ldr	r3, [pc, #404]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017688:	4962      	ldr	r1, [pc, #392]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801768a:	4313      	orrs	r3, r2
 801768c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801768e:	4b61      	ldr	r3, [pc, #388]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017690:	685b      	ldr	r3, [r3, #4]
 8017692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	6a1b      	ldr	r3, [r3, #32]
 801769a:	021b      	lsls	r3, r3, #8
 801769c:	495d      	ldr	r1, [pc, #372]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801769e:	4313      	orrs	r3, r2
 80176a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80176a2:	69bb      	ldr	r3, [r7, #24]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d10a      	bne.n	80176be <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176ac:	4618      	mov	r0, r3
 80176ae:	f000 fe8d 	bl	80183cc <RCC_SetFlashLatencyFromMSIRange>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d002      	beq.n	80176be <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80176b8:	2301      	movs	r3, #1
 80176ba:	f000 bc39 	b.w	8017f30 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80176be:	f000 fe17 	bl	80182f0 <HAL_RCC_GetHCLKFreq>
 80176c2:	4603      	mov	r3, r0
 80176c4:	4a54      	ldr	r2, [pc, #336]	; (8017818 <HAL_RCC_OscConfig+0x280>)
 80176c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80176c8:	4b54      	ldr	r3, [pc, #336]	; (801781c <HAL_RCC_OscConfig+0x284>)
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7fc faa7 	bl	8013c20 <HAL_InitTick>
 80176d2:	4603      	mov	r3, r0
 80176d4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80176d6:	7bfb      	ldrb	r3, [r7, #15]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d060      	beq.n	801779e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80176dc:	7bfb      	ldrb	r3, [r7, #15]
 80176de:	f000 bc27 	b.w	8017f30 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	69db      	ldr	r3, [r3, #28]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d039      	beq.n	801775e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80176ea:	4b4a      	ldr	r3, [pc, #296]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	4a49      	ldr	r2, [pc, #292]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80176f0:	f043 0301 	orr.w	r3, r3, #1
 80176f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80176f6:	f7fc fd3b 	bl	8014170 <HAL_GetTick>
 80176fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80176fc:	e00f      	b.n	801771e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80176fe:	f7fc fd37 	bl	8014170 <HAL_GetTick>
 8017702:	4602      	mov	r2, r0
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	1ad3      	subs	r3, r2, r3
 8017708:	2b02      	cmp	r3, #2
 801770a:	d908      	bls.n	801771e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801770c:	4b41      	ldr	r3, [pc, #260]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	f003 0302 	and.w	r3, r3, #2
 8017714:	2b00      	cmp	r3, #0
 8017716:	d102      	bne.n	801771e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8017718:	2303      	movs	r3, #3
 801771a:	f000 bc09 	b.w	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801771e:	4b3d      	ldr	r3, [pc, #244]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	f003 0302 	and.w	r3, r3, #2
 8017726:	2b00      	cmp	r3, #0
 8017728:	d0e9      	beq.n	80176fe <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801772a:	4b3a      	ldr	r3, [pc, #232]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	4a39      	ldr	r2, [pc, #228]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017730:	f043 0308 	orr.w	r3, r3, #8
 8017734:	6013      	str	r3, [r2, #0]
 8017736:	4b37      	ldr	r3, [pc, #220]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017742:	4934      	ldr	r1, [pc, #208]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017744:	4313      	orrs	r3, r2
 8017746:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017748:	4b32      	ldr	r3, [pc, #200]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801774a:	685b      	ldr	r3, [r3, #4]
 801774c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	6a1b      	ldr	r3, [r3, #32]
 8017754:	021b      	lsls	r3, r3, #8
 8017756:	492f      	ldr	r1, [pc, #188]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017758:	4313      	orrs	r3, r2
 801775a:	604b      	str	r3, [r1, #4]
 801775c:	e020      	b.n	80177a0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801775e:	4b2d      	ldr	r3, [pc, #180]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	4a2c      	ldr	r2, [pc, #176]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017764:	f023 0301 	bic.w	r3, r3, #1
 8017768:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801776a:	f7fc fd01 	bl	8014170 <HAL_GetTick>
 801776e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017770:	e00e      	b.n	8017790 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017772:	f7fc fcfd 	bl	8014170 <HAL_GetTick>
 8017776:	4602      	mov	r2, r0
 8017778:	693b      	ldr	r3, [r7, #16]
 801777a:	1ad3      	subs	r3, r2, r3
 801777c:	2b02      	cmp	r3, #2
 801777e:	d907      	bls.n	8017790 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017780:	4b24      	ldr	r3, [pc, #144]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f003 0302 	and.w	r3, r3, #2
 8017788:	2b00      	cmp	r3, #0
 801778a:	d001      	beq.n	8017790 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 801778c:	2303      	movs	r3, #3
 801778e:	e3cf      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017790:	4b20      	ldr	r3, [pc, #128]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	f003 0302 	and.w	r3, r3, #2
 8017798:	2b00      	cmp	r3, #0
 801779a:	d1ea      	bne.n	8017772 <HAL_RCC_OscConfig+0x1da>
 801779c:	e000      	b.n	80177a0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801779e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	f003 0301 	and.w	r3, r3, #1
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d07e      	beq.n	80178aa <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80177ac:	69bb      	ldr	r3, [r7, #24]
 80177ae:	2b08      	cmp	r3, #8
 80177b0:	d005      	beq.n	80177be <HAL_RCC_OscConfig+0x226>
 80177b2:	69bb      	ldr	r3, [r7, #24]
 80177b4:	2b0c      	cmp	r3, #12
 80177b6:	d10e      	bne.n	80177d6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	2b03      	cmp	r3, #3
 80177bc:	d10b      	bne.n	80177d6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80177be:	4b15      	ldr	r3, [pc, #84]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d06e      	beq.n	80178a8 <HAL_RCC_OscConfig+0x310>
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	685b      	ldr	r3, [r3, #4]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d16a      	bne.n	80178a8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80177d2:	2301      	movs	r3, #1
 80177d4:	e3ac      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	685b      	ldr	r3, [r3, #4]
 80177da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80177de:	d106      	bne.n	80177ee <HAL_RCC_OscConfig+0x256>
 80177e0:	4b0c      	ldr	r3, [pc, #48]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	4a0b      	ldr	r2, [pc, #44]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80177e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80177ea:	6013      	str	r3, [r2, #0]
 80177ec:	e024      	b.n	8017838 <HAL_RCC_OscConfig+0x2a0>
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80177f6:	d113      	bne.n	8017820 <HAL_RCC_OscConfig+0x288>
 80177f8:	4b06      	ldr	r3, [pc, #24]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	4a05      	ldr	r2, [pc, #20]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 80177fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017802:	6013      	str	r3, [r2, #0]
 8017804:	4b03      	ldr	r3, [pc, #12]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	4a02      	ldr	r2, [pc, #8]	; (8017814 <HAL_RCC_OscConfig+0x27c>)
 801780a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801780e:	6013      	str	r3, [r2, #0]
 8017810:	e012      	b.n	8017838 <HAL_RCC_OscConfig+0x2a0>
 8017812:	bf00      	nop
 8017814:	40021000 	.word	0x40021000
 8017818:	20000090 	.word	0x20000090
 801781c:	20000094 	.word	0x20000094
 8017820:	4b8b      	ldr	r3, [pc, #556]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	4a8a      	ldr	r2, [pc, #552]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801782a:	6013      	str	r3, [r2, #0]
 801782c:	4b88      	ldr	r3, [pc, #544]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	4a87      	ldr	r2, [pc, #540]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	685b      	ldr	r3, [r3, #4]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d019      	beq.n	8017874 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017840:	f7fc fc96 	bl	8014170 <HAL_GetTick>
 8017844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017846:	e00e      	b.n	8017866 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017848:	f7fc fc92 	bl	8014170 <HAL_GetTick>
 801784c:	4602      	mov	r2, r0
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	1ad3      	subs	r3, r2, r3
 8017852:	2b64      	cmp	r3, #100	; 0x64
 8017854:	d907      	bls.n	8017866 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017856:	4b7e      	ldr	r3, [pc, #504]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801785e:	2b00      	cmp	r3, #0
 8017860:	d101      	bne.n	8017866 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8017862:	2303      	movs	r3, #3
 8017864:	e364      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017866:	4b7a      	ldr	r3, [pc, #488]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801786e:	2b00      	cmp	r3, #0
 8017870:	d0ea      	beq.n	8017848 <HAL_RCC_OscConfig+0x2b0>
 8017872:	e01a      	b.n	80178aa <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017874:	f7fc fc7c 	bl	8014170 <HAL_GetTick>
 8017878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801787a:	e00e      	b.n	801789a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801787c:	f7fc fc78 	bl	8014170 <HAL_GetTick>
 8017880:	4602      	mov	r2, r0
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	1ad3      	subs	r3, r2, r3
 8017886:	2b64      	cmp	r3, #100	; 0x64
 8017888:	d907      	bls.n	801789a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801788a:	4b71      	ldr	r3, [pc, #452]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017892:	2b00      	cmp	r3, #0
 8017894:	d001      	beq.n	801789a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8017896:	2303      	movs	r3, #3
 8017898:	e34a      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801789a:	4b6d      	ldr	r3, [pc, #436]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d1ea      	bne.n	801787c <HAL_RCC_OscConfig+0x2e4>
 80178a6:	e000      	b.n	80178aa <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80178a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	f003 0302 	and.w	r3, r3, #2
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d06c      	beq.n	8017990 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80178b6:	69bb      	ldr	r3, [r7, #24]
 80178b8:	2b04      	cmp	r3, #4
 80178ba:	d005      	beq.n	80178c8 <HAL_RCC_OscConfig+0x330>
 80178bc:	69bb      	ldr	r3, [r7, #24]
 80178be:	2b0c      	cmp	r3, #12
 80178c0:	d119      	bne.n	80178f6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80178c2:	697b      	ldr	r3, [r7, #20]
 80178c4:	2b02      	cmp	r3, #2
 80178c6:	d116      	bne.n	80178f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80178c8:	4b61      	ldr	r3, [pc, #388]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d005      	beq.n	80178e0 <HAL_RCC_OscConfig+0x348>
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	68db      	ldr	r3, [r3, #12]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d101      	bne.n	80178e0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80178dc:	2301      	movs	r3, #1
 80178de:	e327      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80178e0:	4b5b      	ldr	r3, [pc, #364]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80178e2:	685b      	ldr	r3, [r3, #4]
 80178e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	691b      	ldr	r3, [r3, #16]
 80178ec:	061b      	lsls	r3, r3, #24
 80178ee:	4958      	ldr	r1, [pc, #352]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80178f0:	4313      	orrs	r3, r2
 80178f2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80178f4:	e04c      	b.n	8017990 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	68db      	ldr	r3, [r3, #12]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d029      	beq.n	8017952 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80178fe:	4b54      	ldr	r3, [pc, #336]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	4a53      	ldr	r2, [pc, #332]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801790a:	f7fc fc31 	bl	8014170 <HAL_GetTick>
 801790e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017910:	e00e      	b.n	8017930 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017912:	f7fc fc2d 	bl	8014170 <HAL_GetTick>
 8017916:	4602      	mov	r2, r0
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	1ad3      	subs	r3, r2, r3
 801791c:	2b02      	cmp	r3, #2
 801791e:	d907      	bls.n	8017930 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017920:	4b4b      	ldr	r3, [pc, #300]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017928:	2b00      	cmp	r3, #0
 801792a:	d101      	bne.n	8017930 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 801792c:	2303      	movs	r3, #3
 801792e:	e2ff      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017930:	4b47      	ldr	r3, [pc, #284]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017938:	2b00      	cmp	r3, #0
 801793a:	d0ea      	beq.n	8017912 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801793c:	4b44      	ldr	r3, [pc, #272]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 801793e:	685b      	ldr	r3, [r3, #4]
 8017940:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	691b      	ldr	r3, [r3, #16]
 8017948:	061b      	lsls	r3, r3, #24
 801794a:	4941      	ldr	r1, [pc, #260]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 801794c:	4313      	orrs	r3, r2
 801794e:	604b      	str	r3, [r1, #4]
 8017950:	e01e      	b.n	8017990 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017952:	4b3f      	ldr	r3, [pc, #252]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	4a3e      	ldr	r2, [pc, #248]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801795c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801795e:	f7fc fc07 	bl	8014170 <HAL_GetTick>
 8017962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017964:	e00e      	b.n	8017984 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017966:	f7fc fc03 	bl	8014170 <HAL_GetTick>
 801796a:	4602      	mov	r2, r0
 801796c:	693b      	ldr	r3, [r7, #16]
 801796e:	1ad3      	subs	r3, r2, r3
 8017970:	2b02      	cmp	r3, #2
 8017972:	d907      	bls.n	8017984 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017974:	4b36      	ldr	r3, [pc, #216]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801797c:	2b00      	cmp	r3, #0
 801797e:	d001      	beq.n	8017984 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8017980:	2303      	movs	r3, #3
 8017982:	e2d5      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017984:	4b32      	ldr	r3, [pc, #200]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801798c:	2b00      	cmp	r3, #0
 801798e:	d1ea      	bne.n	8017966 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	f003 0308 	and.w	r3, r3, #8
 8017998:	2b00      	cmp	r3, #0
 801799a:	d062      	beq.n	8017a62 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	695b      	ldr	r3, [r3, #20]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d038      	beq.n	8017a16 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	699b      	ldr	r3, [r3, #24]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d108      	bne.n	80179be <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80179ac:	4b28      	ldr	r3, [pc, #160]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80179ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80179b2:	4a27      	ldr	r2, [pc, #156]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80179b4:	f023 0310 	bic.w	r3, r3, #16
 80179b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80179bc:	e007      	b.n	80179ce <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80179be:	4b24      	ldr	r3, [pc, #144]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80179c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80179c4:	4a22      	ldr	r2, [pc, #136]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80179c6:	f043 0310 	orr.w	r3, r3, #16
 80179ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80179ce:	4b20      	ldr	r3, [pc, #128]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80179d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80179d4:	4a1e      	ldr	r2, [pc, #120]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80179d6:	f043 0301 	orr.w	r3, r3, #1
 80179da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80179de:	f7fc fbc7 	bl	8014170 <HAL_GetTick>
 80179e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80179e4:	e00f      	b.n	8017a06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80179e6:	f7fc fbc3 	bl	8014170 <HAL_GetTick>
 80179ea:	4602      	mov	r2, r0
 80179ec:	693b      	ldr	r3, [r7, #16]
 80179ee:	1ad3      	subs	r3, r2, r3
 80179f0:	2b07      	cmp	r3, #7
 80179f2:	d908      	bls.n	8017a06 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80179f4:	4b16      	ldr	r3, [pc, #88]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 80179f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80179fa:	f003 0302 	and.w	r3, r3, #2
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d101      	bne.n	8017a06 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8017a02:	2303      	movs	r3, #3
 8017a04:	e294      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017a06:	4b12      	ldr	r3, [pc, #72]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017a0c:	f003 0302 	and.w	r3, r3, #2
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d0e8      	beq.n	80179e6 <HAL_RCC_OscConfig+0x44e>
 8017a14:	e025      	b.n	8017a62 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017a16:	4b0e      	ldr	r3, [pc, #56]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017a1c:	4a0c      	ldr	r2, [pc, #48]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017a1e:	f023 0301 	bic.w	r3, r3, #1
 8017a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017a26:	f7fc fba3 	bl	8014170 <HAL_GetTick>
 8017a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017a2c:	e012      	b.n	8017a54 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017a2e:	f7fc fb9f 	bl	8014170 <HAL_GetTick>
 8017a32:	4602      	mov	r2, r0
 8017a34:	693b      	ldr	r3, [r7, #16]
 8017a36:	1ad3      	subs	r3, r2, r3
 8017a38:	2b07      	cmp	r3, #7
 8017a3a:	d90b      	bls.n	8017a54 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017a3c:	4b04      	ldr	r3, [pc, #16]	; (8017a50 <HAL_RCC_OscConfig+0x4b8>)
 8017a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017a42:	f003 0302 	and.w	r3, r3, #2
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d004      	beq.n	8017a54 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8017a4a:	2303      	movs	r3, #3
 8017a4c:	e270      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
 8017a4e:	bf00      	nop
 8017a50:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017a54:	4ba8      	ldr	r3, [pc, #672]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017a5a:	f003 0302 	and.w	r3, r3, #2
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d1e5      	bne.n	8017a2e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f003 0304 	and.w	r3, r3, #4
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	f000 812d 	beq.w	8017cca <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017a70:	2300      	movs	r3, #0
 8017a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8017a74:	4ba0      	ldr	r3, [pc, #640]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d10d      	bne.n	8017a9c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017a80:	4b9d      	ldr	r3, [pc, #628]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a84:	4a9c      	ldr	r2, [pc, #624]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8017a8c:	4b9a      	ldr	r3, [pc, #616]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017a94:	60bb      	str	r3, [r7, #8]
 8017a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017a98:	2301      	movs	r3, #1
 8017a9a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017a9c:	4b97      	ldr	r3, [pc, #604]	; (8017cfc <HAL_RCC_OscConfig+0x764>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d11e      	bne.n	8017ae6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017aa8:	4b94      	ldr	r3, [pc, #592]	; (8017cfc <HAL_RCC_OscConfig+0x764>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	4a93      	ldr	r2, [pc, #588]	; (8017cfc <HAL_RCC_OscConfig+0x764>)
 8017aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017ab4:	f7fc fb5c 	bl	8014170 <HAL_GetTick>
 8017ab8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017aba:	e00e      	b.n	8017ada <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017abc:	f7fc fb58 	bl	8014170 <HAL_GetTick>
 8017ac0:	4602      	mov	r2, r0
 8017ac2:	693b      	ldr	r3, [r7, #16]
 8017ac4:	1ad3      	subs	r3, r2, r3
 8017ac6:	2b02      	cmp	r3, #2
 8017ac8:	d907      	bls.n	8017ada <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017aca:	4b8c      	ldr	r3, [pc, #560]	; (8017cfc <HAL_RCC_OscConfig+0x764>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d101      	bne.n	8017ada <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8017ad6:	2303      	movs	r3, #3
 8017ad8:	e22a      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017ada:	4b88      	ldr	r3, [pc, #544]	; (8017cfc <HAL_RCC_OscConfig+0x764>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d0ea      	beq.n	8017abc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	689b      	ldr	r3, [r3, #8]
 8017aea:	f003 0301 	and.w	r3, r3, #1
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d01f      	beq.n	8017b32 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	689b      	ldr	r3, [r3, #8]
 8017af6:	f003 0304 	and.w	r3, r3, #4
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d010      	beq.n	8017b20 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017afe:	4b7e      	ldr	r3, [pc, #504]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b04:	4a7c      	ldr	r2, [pc, #496]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b06:	f043 0304 	orr.w	r3, r3, #4
 8017b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017b0e:	4b7a      	ldr	r3, [pc, #488]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b14:	4a78      	ldr	r2, [pc, #480]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b16:	f043 0301 	orr.w	r3, r3, #1
 8017b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8017b1e:	e018      	b.n	8017b52 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017b20:	4b75      	ldr	r3, [pc, #468]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b26:	4a74      	ldr	r2, [pc, #464]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b28:	f043 0301 	orr.w	r3, r3, #1
 8017b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8017b30:	e00f      	b.n	8017b52 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017b32:	4b71      	ldr	r3, [pc, #452]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b38:	4a6f      	ldr	r2, [pc, #444]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b3a:	f023 0301 	bic.w	r3, r3, #1
 8017b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017b42:	4b6d      	ldr	r3, [pc, #436]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b48:	4a6b      	ldr	r2, [pc, #428]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b4a:	f023 0304 	bic.w	r3, r3, #4
 8017b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	689b      	ldr	r3, [r3, #8]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d068      	beq.n	8017c2c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017b5a:	f7fc fb09 	bl	8014170 <HAL_GetTick>
 8017b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017b60:	e011      	b.n	8017b86 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017b62:	f7fc fb05 	bl	8014170 <HAL_GetTick>
 8017b66:	4602      	mov	r2, r0
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	1ad3      	subs	r3, r2, r3
 8017b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8017b70:	4293      	cmp	r3, r2
 8017b72:	d908      	bls.n	8017b86 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017b74:	4b60      	ldr	r3, [pc, #384]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b7a:	f003 0302 	and.w	r3, r3, #2
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d101      	bne.n	8017b86 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8017b82:	2303      	movs	r3, #3
 8017b84:	e1d4      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017b86:	4b5c      	ldr	r3, [pc, #368]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b8c:	f003 0302 	and.w	r3, r3, #2
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d0e6      	beq.n	8017b62 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	689b      	ldr	r3, [r3, #8]
 8017b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d022      	beq.n	8017be6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017ba0:	4b55      	ldr	r3, [pc, #340]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ba6:	4a54      	ldr	r2, [pc, #336]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017bb0:	e011      	b.n	8017bd6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017bb2:	f7fc fadd 	bl	8014170 <HAL_GetTick>
 8017bb6:	4602      	mov	r2, r0
 8017bb8:	693b      	ldr	r3, [r7, #16]
 8017bba:	1ad3      	subs	r3, r2, r3
 8017bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8017bc0:	4293      	cmp	r3, r2
 8017bc2:	d908      	bls.n	8017bd6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017bc4:	4b4c      	ldr	r3, [pc, #304]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d101      	bne.n	8017bd6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8017bd2:	2303      	movs	r3, #3
 8017bd4:	e1ac      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017bd6:	4b48      	ldr	r3, [pc, #288]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d0e6      	beq.n	8017bb2 <HAL_RCC_OscConfig+0x61a>
 8017be4:	e068      	b.n	8017cb8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017be6:	4b44      	ldr	r3, [pc, #272]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bec:	4a42      	ldr	r2, [pc, #264]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017bf6:	e011      	b.n	8017c1c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017bf8:	f7fc faba 	bl	8014170 <HAL_GetTick>
 8017bfc:	4602      	mov	r2, r0
 8017bfe:	693b      	ldr	r3, [r7, #16]
 8017c00:	1ad3      	subs	r3, r2, r3
 8017c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8017c06:	4293      	cmp	r3, r2
 8017c08:	d908      	bls.n	8017c1c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017c0a:	4b3b      	ldr	r3, [pc, #236]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d001      	beq.n	8017c1c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8017c18:	2303      	movs	r3, #3
 8017c1a:	e189      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017c1c:	4b36      	ldr	r3, [pc, #216]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d1e6      	bne.n	8017bf8 <HAL_RCC_OscConfig+0x660>
 8017c2a:	e045      	b.n	8017cb8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017c2c:	f7fc faa0 	bl	8014170 <HAL_GetTick>
 8017c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8017c32:	e011      	b.n	8017c58 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017c34:	f7fc fa9c 	bl	8014170 <HAL_GetTick>
 8017c38:	4602      	mov	r2, r0
 8017c3a:	693b      	ldr	r3, [r7, #16]
 8017c3c:	1ad3      	subs	r3, r2, r3
 8017c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8017c42:	4293      	cmp	r3, r2
 8017c44:	d908      	bls.n	8017c58 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8017c46:	4b2c      	ldr	r3, [pc, #176]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c4c:	f003 0302 	and.w	r3, r3, #2
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d001      	beq.n	8017c58 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8017c54:	2303      	movs	r3, #3
 8017c56:	e16b      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8017c58:	4b27      	ldr	r3, [pc, #156]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c5e:	f003 0302 	and.w	r3, r3, #2
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d1e6      	bne.n	8017c34 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8017c66:	4b24      	ldr	r3, [pc, #144]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d021      	beq.n	8017cb8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017c74:	4b20      	ldr	r3, [pc, #128]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c7a:	4a1f      	ldr	r2, [pc, #124]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017c84:	e011      	b.n	8017caa <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017c86:	f7fc fa73 	bl	8014170 <HAL_GetTick>
 8017c8a:	4602      	mov	r2, r0
 8017c8c:	693b      	ldr	r3, [r7, #16]
 8017c8e:	1ad3      	subs	r3, r2, r3
 8017c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8017c94:	4293      	cmp	r3, r2
 8017c96:	d908      	bls.n	8017caa <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017c98:	4b17      	ldr	r3, [pc, #92]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d001      	beq.n	8017caa <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8017ca6:	2303      	movs	r3, #3
 8017ca8:	e142      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017caa:	4b13      	ldr	r3, [pc, #76]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d1e6      	bne.n	8017c86 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017cb8:	7ffb      	ldrb	r3, [r7, #31]
 8017cba:	2b01      	cmp	r3, #1
 8017cbc:	d105      	bne.n	8017cca <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017cbe:	4b0e      	ldr	r3, [pc, #56]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017cc2:	4a0d      	ldr	r2, [pc, #52]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017cc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	f003 0320 	and.w	r3, r3, #32
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d04f      	beq.n	8017d76 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d028      	beq.n	8017d30 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017cde:	4b06      	ldr	r3, [pc, #24]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017ce4:	4a04      	ldr	r2, [pc, #16]	; (8017cf8 <HAL_RCC_OscConfig+0x760>)
 8017ce6:	f043 0301 	orr.w	r3, r3, #1
 8017cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017cee:	f7fc fa3f 	bl	8014170 <HAL_GetTick>
 8017cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8017cf4:	e014      	b.n	8017d20 <HAL_RCC_OscConfig+0x788>
 8017cf6:	bf00      	nop
 8017cf8:	40021000 	.word	0x40021000
 8017cfc:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017d00:	f7fc fa36 	bl	8014170 <HAL_GetTick>
 8017d04:	4602      	mov	r2, r0
 8017d06:	693b      	ldr	r3, [r7, #16]
 8017d08:	1ad3      	subs	r3, r2, r3
 8017d0a:	2b02      	cmp	r3, #2
 8017d0c:	d908      	bls.n	8017d20 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8017d0e:	4b8a      	ldr	r3, [pc, #552]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d14:	f003 0302 	and.w	r3, r3, #2
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d101      	bne.n	8017d20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8017d1c:	2303      	movs	r3, #3
 8017d1e:	e107      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8017d20:	4b85      	ldr	r3, [pc, #532]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d26:	f003 0302 	and.w	r3, r3, #2
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d0e8      	beq.n	8017d00 <HAL_RCC_OscConfig+0x768>
 8017d2e:	e022      	b.n	8017d76 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8017d30:	4b81      	ldr	r3, [pc, #516]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d36:	4a80      	ldr	r2, [pc, #512]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d38:	f023 0301 	bic.w	r3, r3, #1
 8017d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017d40:	f7fc fa16 	bl	8014170 <HAL_GetTick>
 8017d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8017d46:	e00f      	b.n	8017d68 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017d48:	f7fc fa12 	bl	8014170 <HAL_GetTick>
 8017d4c:	4602      	mov	r2, r0
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	1ad3      	subs	r3, r2, r3
 8017d52:	2b02      	cmp	r3, #2
 8017d54:	d908      	bls.n	8017d68 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8017d56:	4b78      	ldr	r3, [pc, #480]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d5c:	f003 0302 	and.w	r3, r3, #2
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d001      	beq.n	8017d68 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8017d64:	2303      	movs	r3, #3
 8017d66:	e0e3      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8017d68:	4b73      	ldr	r3, [pc, #460]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d6e:	f003 0302 	and.w	r3, r3, #2
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d1e8      	bne.n	8017d48 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f000 80d7 	beq.w	8017f2e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017d80:	4b6d      	ldr	r3, [pc, #436]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d82:	689b      	ldr	r3, [r3, #8]
 8017d84:	f003 030c 	and.w	r3, r3, #12
 8017d88:	2b0c      	cmp	r3, #12
 8017d8a:	f000 8091 	beq.w	8017eb0 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d92:	2b02      	cmp	r3, #2
 8017d94:	d166      	bne.n	8017e64 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017d96:	4b68      	ldr	r3, [pc, #416]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4a67      	ldr	r2, [pc, #412]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017da2:	f7fc f9e5 	bl	8014170 <HAL_GetTick>
 8017da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017da8:	e00e      	b.n	8017dc8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017daa:	f7fc f9e1 	bl	8014170 <HAL_GetTick>
 8017dae:	4602      	mov	r2, r0
 8017db0:	693b      	ldr	r3, [r7, #16]
 8017db2:	1ad3      	subs	r3, r2, r3
 8017db4:	2b02      	cmp	r3, #2
 8017db6:	d907      	bls.n	8017dc8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017db8:	4b5f      	ldr	r3, [pc, #380]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d001      	beq.n	8017dc8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8017dc4:	2303      	movs	r3, #3
 8017dc6:	e0b3      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017dc8:	4b5b      	ldr	r3, [pc, #364]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d1ea      	bne.n	8017daa <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017dd4:	4b58      	ldr	r3, [pc, #352]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017dd6:	68da      	ldr	r2, [r3, #12]
 8017dd8:	4b58      	ldr	r3, [pc, #352]	; (8017f3c <HAL_RCC_OscConfig+0x9a4>)
 8017dda:	4013      	ands	r3, r2
 8017ddc:	687a      	ldr	r2, [r7, #4]
 8017dde:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017de0:	687a      	ldr	r2, [r7, #4]
 8017de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017de4:	3a01      	subs	r2, #1
 8017de6:	0112      	lsls	r2, r2, #4
 8017de8:	4311      	orrs	r1, r2
 8017dea:	687a      	ldr	r2, [r7, #4]
 8017dec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017dee:	0212      	lsls	r2, r2, #8
 8017df0:	4311      	orrs	r1, r2
 8017df2:	687a      	ldr	r2, [r7, #4]
 8017df4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017df6:	0852      	lsrs	r2, r2, #1
 8017df8:	3a01      	subs	r2, #1
 8017dfa:	0552      	lsls	r2, r2, #21
 8017dfc:	4311      	orrs	r1, r2
 8017dfe:	687a      	ldr	r2, [r7, #4]
 8017e00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8017e02:	0852      	lsrs	r2, r2, #1
 8017e04:	3a01      	subs	r2, #1
 8017e06:	0652      	lsls	r2, r2, #25
 8017e08:	4311      	orrs	r1, r2
 8017e0a:	687a      	ldr	r2, [r7, #4]
 8017e0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017e0e:	06d2      	lsls	r2, r2, #27
 8017e10:	430a      	orrs	r2, r1
 8017e12:	4949      	ldr	r1, [pc, #292]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e14:	4313      	orrs	r3, r2
 8017e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017e18:	4b47      	ldr	r3, [pc, #284]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	4a46      	ldr	r2, [pc, #280]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017e24:	4b44      	ldr	r3, [pc, #272]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e26:	68db      	ldr	r3, [r3, #12]
 8017e28:	4a43      	ldr	r2, [pc, #268]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017e30:	f7fc f99e 	bl	8014170 <HAL_GetTick>
 8017e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017e36:	e00e      	b.n	8017e56 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017e38:	f7fc f99a 	bl	8014170 <HAL_GetTick>
 8017e3c:	4602      	mov	r2, r0
 8017e3e:	693b      	ldr	r3, [r7, #16]
 8017e40:	1ad3      	subs	r3, r2, r3
 8017e42:	2b02      	cmp	r3, #2
 8017e44:	d907      	bls.n	8017e56 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017e46:	4b3c      	ldr	r3, [pc, #240]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d101      	bne.n	8017e56 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8017e52:	2303      	movs	r3, #3
 8017e54:	e06c      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017e56:	4b38      	ldr	r3, [pc, #224]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d0ea      	beq.n	8017e38 <HAL_RCC_OscConfig+0x8a0>
 8017e62:	e064      	b.n	8017f2e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017e64:	4b34      	ldr	r3, [pc, #208]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	4a33      	ldr	r2, [pc, #204]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017e70:	f7fc f97e 	bl	8014170 <HAL_GetTick>
 8017e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017e76:	e00e      	b.n	8017e96 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017e78:	f7fc f97a 	bl	8014170 <HAL_GetTick>
 8017e7c:	4602      	mov	r2, r0
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	1ad3      	subs	r3, r2, r3
 8017e82:	2b02      	cmp	r3, #2
 8017e84:	d907      	bls.n	8017e96 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017e86:	4b2c      	ldr	r3, [pc, #176]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d001      	beq.n	8017e96 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8017e92:	2303      	movs	r3, #3
 8017e94:	e04c      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017e96:	4b28      	ldr	r3, [pc, #160]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d1ea      	bne.n	8017e78 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8017ea2:	4b25      	ldr	r3, [pc, #148]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017ea4:	68da      	ldr	r2, [r3, #12]
 8017ea6:	4924      	ldr	r1, [pc, #144]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017ea8:	4b25      	ldr	r3, [pc, #148]	; (8017f40 <HAL_RCC_OscConfig+0x9a8>)
 8017eaa:	4013      	ands	r3, r2
 8017eac:	60cb      	str	r3, [r1, #12]
 8017eae:	e03e      	b.n	8017f2e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eb4:	2b01      	cmp	r3, #1
 8017eb6:	d101      	bne.n	8017ebc <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8017eb8:	2301      	movs	r3, #1
 8017eba:	e039      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8017ebc:	4b1e      	ldr	r3, [pc, #120]	; (8017f38 <HAL_RCC_OscConfig+0x9a0>)
 8017ebe:	68db      	ldr	r3, [r3, #12]
 8017ec0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8017ec2:	697b      	ldr	r3, [r7, #20]
 8017ec4:	f003 0203 	and.w	r2, r3, #3
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d12c      	bne.n	8017f2a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8017ed0:	697b      	ldr	r3, [r7, #20]
 8017ed2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017eda:	3b01      	subs	r3, #1
 8017edc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	d123      	bne.n	8017f2a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8017ee2:	697b      	ldr	r3, [r7, #20]
 8017ee4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017eec:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d11b      	bne.n	8017f2a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017efc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8017efe:	429a      	cmp	r2, r3
 8017f00:	d113      	bne.n	8017f2a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8017f02:	697b      	ldr	r3, [r7, #20]
 8017f04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f0c:	085b      	lsrs	r3, r3, #1
 8017f0e:	3b01      	subs	r3, #1
 8017f10:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d109      	bne.n	8017f2a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8017f16:	697b      	ldr	r3, [r7, #20]
 8017f18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f20:	085b      	lsrs	r3, r3, #1
 8017f22:	3b01      	subs	r3, #1
 8017f24:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8017f26:	429a      	cmp	r2, r3
 8017f28:	d001      	beq.n	8017f2e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	e000      	b.n	8017f30 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8017f2e:	2300      	movs	r3, #0
}
 8017f30:	4618      	mov	r0, r3
 8017f32:	3720      	adds	r7, #32
 8017f34:	46bd      	mov	sp, r7
 8017f36:	bd80      	pop	{r7, pc}
 8017f38:	40021000 	.word	0x40021000
 8017f3c:	019f800c 	.word	0x019f800c
 8017f40:	feeefffc 	.word	0xfeeefffc

08017f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b086      	sub	sp, #24
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
 8017f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d101      	bne.n	8017f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8017f58:	2301      	movs	r3, #1
 8017f5a:	e11c      	b.n	8018196 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017f5c:	4b90      	ldr	r3, [pc, #576]	; (80181a0 <HAL_RCC_ClockConfig+0x25c>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f003 030f 	and.w	r3, r3, #15
 8017f64:	683a      	ldr	r2, [r7, #0]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d910      	bls.n	8017f8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017f6a:	4b8d      	ldr	r3, [pc, #564]	; (80181a0 <HAL_RCC_ClockConfig+0x25c>)
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	f023 020f 	bic.w	r2, r3, #15
 8017f72:	498b      	ldr	r1, [pc, #556]	; (80181a0 <HAL_RCC_ClockConfig+0x25c>)
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	4313      	orrs	r3, r2
 8017f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017f7a:	4b89      	ldr	r3, [pc, #548]	; (80181a0 <HAL_RCC_ClockConfig+0x25c>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f003 030f 	and.w	r3, r3, #15
 8017f82:	683a      	ldr	r2, [r7, #0]
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d001      	beq.n	8017f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8017f88:	2301      	movs	r3, #1
 8017f8a:	e104      	b.n	8018196 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	f003 0302 	and.w	r3, r3, #2
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d010      	beq.n	8017fba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	689a      	ldr	r2, [r3, #8]
 8017f9c:	4b81      	ldr	r3, [pc, #516]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8017f9e:	689b      	ldr	r3, [r3, #8]
 8017fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d908      	bls.n	8017fba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017fa8:	4b7e      	ldr	r3, [pc, #504]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8017faa:	689b      	ldr	r3, [r3, #8]
 8017fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	689b      	ldr	r3, [r3, #8]
 8017fb4:	497b      	ldr	r1, [pc, #492]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8017fb6:	4313      	orrs	r3, r2
 8017fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	f003 0301 	and.w	r3, r3, #1
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	f000 8085 	beq.w	80180d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	685b      	ldr	r3, [r3, #4]
 8017fcc:	2b03      	cmp	r3, #3
 8017fce:	d11f      	bne.n	8018010 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017fd0:	4b74      	ldr	r3, [pc, #464]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d101      	bne.n	8017fe0 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8017fdc:	2301      	movs	r3, #1
 8017fde:	e0da      	b.n	8018196 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8017fe0:	f000 fa58 	bl	8018494 <RCC_GetSysClockFreqFromPLLSource>
 8017fe4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	4a6f      	ldr	r2, [pc, #444]	; (80181a8 <HAL_RCC_ClockConfig+0x264>)
 8017fea:	4293      	cmp	r3, r2
 8017fec:	d947      	bls.n	801807e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8017fee:	4b6d      	ldr	r3, [pc, #436]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8017ff0:	689b      	ldr	r3, [r3, #8]
 8017ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d141      	bne.n	801807e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8017ffa:	4b6a      	ldr	r3, [pc, #424]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8017ffc:	689b      	ldr	r3, [r3, #8]
 8017ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8018002:	4a68      	ldr	r2, [pc, #416]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8018004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018008:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801800a:	2380      	movs	r3, #128	; 0x80
 801800c:	617b      	str	r3, [r7, #20]
 801800e:	e036      	b.n	801807e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	685b      	ldr	r3, [r3, #4]
 8018014:	2b02      	cmp	r3, #2
 8018016:	d107      	bne.n	8018028 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8018018:	4b62      	ldr	r3, [pc, #392]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018020:	2b00      	cmp	r3, #0
 8018022:	d115      	bne.n	8018050 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8018024:	2301      	movs	r3, #1
 8018026:	e0b6      	b.n	8018196 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	685b      	ldr	r3, [r3, #4]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d107      	bne.n	8018040 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8018030:	4b5c      	ldr	r3, [pc, #368]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	f003 0302 	and.w	r3, r3, #2
 8018038:	2b00      	cmp	r3, #0
 801803a:	d109      	bne.n	8018050 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 801803c:	2301      	movs	r3, #1
 801803e:	e0aa      	b.n	8018196 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8018040:	4b58      	ldr	r3, [pc, #352]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018048:	2b00      	cmp	r3, #0
 801804a:	d101      	bne.n	8018050 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 801804c:	2301      	movs	r3, #1
 801804e:	e0a2      	b.n	8018196 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8018050:	f000 f8b0 	bl	80181b4 <HAL_RCC_GetSysClockFreq>
 8018054:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	4a53      	ldr	r2, [pc, #332]	; (80181a8 <HAL_RCC_ClockConfig+0x264>)
 801805a:	4293      	cmp	r3, r2
 801805c:	d90f      	bls.n	801807e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 801805e:	4b51      	ldr	r3, [pc, #324]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8018060:	689b      	ldr	r3, [r3, #8]
 8018062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018066:	2b00      	cmp	r3, #0
 8018068:	d109      	bne.n	801807e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801806a:	4b4e      	ldr	r3, [pc, #312]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 801806c:	689b      	ldr	r3, [r3, #8]
 801806e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8018072:	4a4c      	ldr	r2, [pc, #304]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8018074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018078:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801807a:	2380      	movs	r3, #128	; 0x80
 801807c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801807e:	4b49      	ldr	r3, [pc, #292]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8018080:	689b      	ldr	r3, [r3, #8]
 8018082:	f023 0203 	bic.w	r2, r3, #3
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	685b      	ldr	r3, [r3, #4]
 801808a:	4946      	ldr	r1, [pc, #280]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 801808c:	4313      	orrs	r3, r2
 801808e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018090:	f7fc f86e 	bl	8014170 <HAL_GetTick>
 8018094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018096:	e013      	b.n	80180c0 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018098:	f7fc f86a 	bl	8014170 <HAL_GetTick>
 801809c:	4602      	mov	r2, r0
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	1ad3      	subs	r3, r2, r3
 80180a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80180a6:	4293      	cmp	r3, r2
 80180a8:	d90a      	bls.n	80180c0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80180aa:	4b3e      	ldr	r3, [pc, #248]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 80180ac:	689b      	ldr	r3, [r3, #8]
 80180ae:	f003 020c 	and.w	r2, r3, #12
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	685b      	ldr	r3, [r3, #4]
 80180b6:	009b      	lsls	r3, r3, #2
 80180b8:	429a      	cmp	r2, r3
 80180ba:	d001      	beq.n	80180c0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80180bc:	2303      	movs	r3, #3
 80180be:	e06a      	b.n	8018196 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80180c0:	4b38      	ldr	r3, [pc, #224]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 80180c2:	689b      	ldr	r3, [r3, #8]
 80180c4:	f003 020c 	and.w	r2, r3, #12
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	009b      	lsls	r3, r3, #2
 80180ce:	429a      	cmp	r2, r3
 80180d0:	d1e2      	bne.n	8018098 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80180d2:	697b      	ldr	r3, [r7, #20]
 80180d4:	2b80      	cmp	r3, #128	; 0x80
 80180d6:	d105      	bne.n	80180e4 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80180d8:	4b32      	ldr	r3, [pc, #200]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 80180da:	689b      	ldr	r3, [r3, #8]
 80180dc:	4a31      	ldr	r2, [pc, #196]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 80180de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80180e2:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	f003 0302 	and.w	r3, r3, #2
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d010      	beq.n	8018112 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	689a      	ldr	r2, [r3, #8]
 80180f4:	4b2b      	ldr	r3, [pc, #172]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 80180f6:	689b      	ldr	r3, [r3, #8]
 80180f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80180fc:	429a      	cmp	r2, r3
 80180fe:	d208      	bcs.n	8018112 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018100:	4b28      	ldr	r3, [pc, #160]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8018102:	689b      	ldr	r3, [r3, #8]
 8018104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	689b      	ldr	r3, [r3, #8]
 801810c:	4925      	ldr	r1, [pc, #148]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 801810e:	4313      	orrs	r3, r2
 8018110:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8018112:	4b23      	ldr	r3, [pc, #140]	; (80181a0 <HAL_RCC_ClockConfig+0x25c>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	f003 030f 	and.w	r3, r3, #15
 801811a:	683a      	ldr	r2, [r7, #0]
 801811c:	429a      	cmp	r2, r3
 801811e:	d210      	bcs.n	8018142 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018120:	4b1f      	ldr	r3, [pc, #124]	; (80181a0 <HAL_RCC_ClockConfig+0x25c>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	f023 020f 	bic.w	r2, r3, #15
 8018128:	491d      	ldr	r1, [pc, #116]	; (80181a0 <HAL_RCC_ClockConfig+0x25c>)
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	4313      	orrs	r3, r2
 801812e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018130:	4b1b      	ldr	r3, [pc, #108]	; (80181a0 <HAL_RCC_ClockConfig+0x25c>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f003 030f 	and.w	r3, r3, #15
 8018138:	683a      	ldr	r2, [r7, #0]
 801813a:	429a      	cmp	r2, r3
 801813c:	d001      	beq.n	8018142 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 801813e:	2301      	movs	r3, #1
 8018140:	e029      	b.n	8018196 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	f003 0304 	and.w	r3, r3, #4
 801814a:	2b00      	cmp	r3, #0
 801814c:	d008      	beq.n	8018160 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801814e:	4b15      	ldr	r3, [pc, #84]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 8018150:	689b      	ldr	r3, [r3, #8]
 8018152:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	68db      	ldr	r3, [r3, #12]
 801815a:	4912      	ldr	r1, [pc, #72]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 801815c:	4313      	orrs	r3, r2
 801815e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	f003 0308 	and.w	r3, r3, #8
 8018168:	2b00      	cmp	r3, #0
 801816a:	d009      	beq.n	8018180 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801816c:	4b0d      	ldr	r3, [pc, #52]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 801816e:	689b      	ldr	r3, [r3, #8]
 8018170:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	691b      	ldr	r3, [r3, #16]
 8018178:	00db      	lsls	r3, r3, #3
 801817a:	490a      	ldr	r1, [pc, #40]	; (80181a4 <HAL_RCC_ClockConfig+0x260>)
 801817c:	4313      	orrs	r3, r2
 801817e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8018180:	f000 f8b6 	bl	80182f0 <HAL_RCC_GetHCLKFreq>
 8018184:	4603      	mov	r3, r0
 8018186:	4a09      	ldr	r2, [pc, #36]	; (80181ac <HAL_RCC_ClockConfig+0x268>)
 8018188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801818a:	4b09      	ldr	r3, [pc, #36]	; (80181b0 <HAL_RCC_ClockConfig+0x26c>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	4618      	mov	r0, r3
 8018190:	f7fb fd46 	bl	8013c20 <HAL_InitTick>
 8018194:	4603      	mov	r3, r0
}
 8018196:	4618      	mov	r0, r3
 8018198:	3718      	adds	r7, #24
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	40022000 	.word	0x40022000
 80181a4:	40021000 	.word	0x40021000
 80181a8:	04c4b400 	.word	0x04c4b400
 80181ac:	20000090 	.word	0x20000090
 80181b0:	20000094 	.word	0x20000094

080181b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80181b4:	b480      	push	{r7}
 80181b6:	b089      	sub	sp, #36	; 0x24
 80181b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80181ba:	2300      	movs	r3, #0
 80181bc:	61fb      	str	r3, [r7, #28]
 80181be:	2300      	movs	r3, #0
 80181c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80181c2:	4b47      	ldr	r3, [pc, #284]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80181c4:	689b      	ldr	r3, [r3, #8]
 80181c6:	f003 030c 	and.w	r3, r3, #12
 80181ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80181cc:	4b44      	ldr	r3, [pc, #272]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	f003 0303 	and.w	r3, r3, #3
 80181d4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80181d6:	693b      	ldr	r3, [r7, #16]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d005      	beq.n	80181e8 <HAL_RCC_GetSysClockFreq+0x34>
 80181dc:	693b      	ldr	r3, [r7, #16]
 80181de:	2b0c      	cmp	r3, #12
 80181e0:	d121      	bne.n	8018226 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	2b01      	cmp	r3, #1
 80181e6:	d11e      	bne.n	8018226 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80181e8:	4b3d      	ldr	r3, [pc, #244]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	f003 0308 	and.w	r3, r3, #8
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d107      	bne.n	8018204 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80181f4:	4b3a      	ldr	r3, [pc, #232]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80181f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80181fa:	0a1b      	lsrs	r3, r3, #8
 80181fc:	f003 030f 	and.w	r3, r3, #15
 8018200:	61fb      	str	r3, [r7, #28]
 8018202:	e005      	b.n	8018210 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8018204:	4b36      	ldr	r3, [pc, #216]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	091b      	lsrs	r3, r3, #4
 801820a:	f003 030f 	and.w	r3, r3, #15
 801820e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8018210:	4a34      	ldr	r2, [pc, #208]	; (80182e4 <HAL_RCC_GetSysClockFreq+0x130>)
 8018212:	69fb      	ldr	r3, [r7, #28]
 8018214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018218:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801821a:	693b      	ldr	r3, [r7, #16]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d10d      	bne.n	801823c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8018220:	69fb      	ldr	r3, [r7, #28]
 8018222:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8018224:	e00a      	b.n	801823c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8018226:	693b      	ldr	r3, [r7, #16]
 8018228:	2b04      	cmp	r3, #4
 801822a:	d102      	bne.n	8018232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801822c:	4b2e      	ldr	r3, [pc, #184]	; (80182e8 <HAL_RCC_GetSysClockFreq+0x134>)
 801822e:	61bb      	str	r3, [r7, #24]
 8018230:	e004      	b.n	801823c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	2b08      	cmp	r3, #8
 8018236:	d101      	bne.n	801823c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8018238:	4b2c      	ldr	r3, [pc, #176]	; (80182ec <HAL_RCC_GetSysClockFreq+0x138>)
 801823a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801823c:	693b      	ldr	r3, [r7, #16]
 801823e:	2b0c      	cmp	r3, #12
 8018240:	d146      	bne.n	80182d0 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8018242:	4b27      	ldr	r3, [pc, #156]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8018244:	68db      	ldr	r3, [r3, #12]
 8018246:	f003 0303 	and.w	r3, r3, #3
 801824a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801824c:	4b24      	ldr	r3, [pc, #144]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 801824e:	68db      	ldr	r3, [r3, #12]
 8018250:	091b      	lsrs	r3, r3, #4
 8018252:	f003 030f 	and.w	r3, r3, #15
 8018256:	3301      	adds	r3, #1
 8018258:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 801825a:	68bb      	ldr	r3, [r7, #8]
 801825c:	2b02      	cmp	r3, #2
 801825e:	d003      	beq.n	8018268 <HAL_RCC_GetSysClockFreq+0xb4>
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	2b03      	cmp	r3, #3
 8018264:	d00d      	beq.n	8018282 <HAL_RCC_GetSysClockFreq+0xce>
 8018266:	e019      	b.n	801829c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8018268:	4a1f      	ldr	r2, [pc, #124]	; (80182e8 <HAL_RCC_GetSysClockFreq+0x134>)
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018270:	4a1b      	ldr	r2, [pc, #108]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8018272:	68d2      	ldr	r2, [r2, #12]
 8018274:	0a12      	lsrs	r2, r2, #8
 8018276:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801827a:	fb02 f303 	mul.w	r3, r2, r3
 801827e:	617b      	str	r3, [r7, #20]
        break;
 8018280:	e019      	b.n	80182b6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8018282:	4a1a      	ldr	r2, [pc, #104]	; (80182ec <HAL_RCC_GetSysClockFreq+0x138>)
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	fbb2 f3f3 	udiv	r3, r2, r3
 801828a:	4a15      	ldr	r2, [pc, #84]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 801828c:	68d2      	ldr	r2, [r2, #12]
 801828e:	0a12      	lsrs	r2, r2, #8
 8018290:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8018294:	fb02 f303 	mul.w	r3, r2, r3
 8018298:	617b      	str	r3, [r7, #20]
        break;
 801829a:	e00c      	b.n	80182b6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801829c:	69fa      	ldr	r2, [r7, #28]
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80182a4:	4a0e      	ldr	r2, [pc, #56]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80182a6:	68d2      	ldr	r2, [r2, #12]
 80182a8:	0a12      	lsrs	r2, r2, #8
 80182aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80182ae:	fb02 f303 	mul.w	r3, r2, r3
 80182b2:	617b      	str	r3, [r7, #20]
        break;
 80182b4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80182b6:	4b0a      	ldr	r3, [pc, #40]	; (80182e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80182b8:	68db      	ldr	r3, [r3, #12]
 80182ba:	0e5b      	lsrs	r3, r3, #25
 80182bc:	f003 0303 	and.w	r3, r3, #3
 80182c0:	3301      	adds	r3, #1
 80182c2:	005b      	lsls	r3, r3, #1
 80182c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80182c6:	697a      	ldr	r2, [r7, #20]
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80182ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80182d0:	69bb      	ldr	r3, [r7, #24]
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	3724      	adds	r7, #36	; 0x24
 80182d6:	46bd      	mov	sp, r7
 80182d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182dc:	4770      	bx	lr
 80182de:	bf00      	nop
 80182e0:	40021000 	.word	0x40021000
 80182e4:	0802596c 	.word	0x0802596c
 80182e8:	00f42400 	.word	0x00f42400
 80182ec:	007a1200 	.word	0x007a1200

080182f0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80182f4:	f7ff ff5e 	bl	80181b4 <HAL_RCC_GetSysClockFreq>
 80182f8:	4602      	mov	r2, r0
 80182fa:	4b05      	ldr	r3, [pc, #20]	; (8018310 <HAL_RCC_GetHCLKFreq+0x20>)
 80182fc:	689b      	ldr	r3, [r3, #8]
 80182fe:	091b      	lsrs	r3, r3, #4
 8018300:	f003 030f 	and.w	r3, r3, #15
 8018304:	4903      	ldr	r1, [pc, #12]	; (8018314 <HAL_RCC_GetHCLKFreq+0x24>)
 8018306:	5ccb      	ldrb	r3, [r1, r3]
 8018308:	fa22 f303 	lsr.w	r3, r2, r3
}
 801830c:	4618      	mov	r0, r3
 801830e:	bd80      	pop	{r7, pc}
 8018310:	40021000 	.word	0x40021000
 8018314:	08025954 	.word	0x08025954

08018318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801831c:	f7ff ffe8 	bl	80182f0 <HAL_RCC_GetHCLKFreq>
 8018320:	4602      	mov	r2, r0
 8018322:	4b05      	ldr	r3, [pc, #20]	; (8018338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8018324:	689b      	ldr	r3, [r3, #8]
 8018326:	0a1b      	lsrs	r3, r3, #8
 8018328:	f003 0307 	and.w	r3, r3, #7
 801832c:	4903      	ldr	r1, [pc, #12]	; (801833c <HAL_RCC_GetPCLK1Freq+0x24>)
 801832e:	5ccb      	ldrb	r3, [r1, r3]
 8018330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8018334:	4618      	mov	r0, r3
 8018336:	bd80      	pop	{r7, pc}
 8018338:	40021000 	.word	0x40021000
 801833c:	08025964 	.word	0x08025964

08018340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8018344:	f7ff ffd4 	bl	80182f0 <HAL_RCC_GetHCLKFreq>
 8018348:	4602      	mov	r2, r0
 801834a:	4b05      	ldr	r3, [pc, #20]	; (8018360 <HAL_RCC_GetPCLK2Freq+0x20>)
 801834c:	689b      	ldr	r3, [r3, #8]
 801834e:	0adb      	lsrs	r3, r3, #11
 8018350:	f003 0307 	and.w	r3, r3, #7
 8018354:	4903      	ldr	r1, [pc, #12]	; (8018364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8018356:	5ccb      	ldrb	r3, [r1, r3]
 8018358:	fa22 f303 	lsr.w	r3, r2, r3
}
 801835c:	4618      	mov	r0, r3
 801835e:	bd80      	pop	{r7, pc}
 8018360:	40021000 	.word	0x40021000
 8018364:	08025964 	.word	0x08025964

08018368 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8018368:	b480      	push	{r7}
 801836a:	b083      	sub	sp, #12
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
 8018370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	220f      	movs	r2, #15
 8018376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8018378:	4b12      	ldr	r3, [pc, #72]	; (80183c4 <HAL_RCC_GetClockConfig+0x5c>)
 801837a:	689b      	ldr	r3, [r3, #8]
 801837c:	f003 0203 	and.w	r2, r3, #3
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8018384:	4b0f      	ldr	r3, [pc, #60]	; (80183c4 <HAL_RCC_GetClockConfig+0x5c>)
 8018386:	689b      	ldr	r3, [r3, #8]
 8018388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8018390:	4b0c      	ldr	r3, [pc, #48]	; (80183c4 <HAL_RCC_GetClockConfig+0x5c>)
 8018392:	689b      	ldr	r3, [r3, #8]
 8018394:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801839c:	4b09      	ldr	r3, [pc, #36]	; (80183c4 <HAL_RCC_GetClockConfig+0x5c>)
 801839e:	689b      	ldr	r3, [r3, #8]
 80183a0:	08db      	lsrs	r3, r3, #3
 80183a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80183aa:	4b07      	ldr	r3, [pc, #28]	; (80183c8 <HAL_RCC_GetClockConfig+0x60>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	f003 020f 	and.w	r2, r3, #15
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	601a      	str	r2, [r3, #0]
}
 80183b6:	bf00      	nop
 80183b8:	370c      	adds	r7, #12
 80183ba:	46bd      	mov	sp, r7
 80183bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c0:	4770      	bx	lr
 80183c2:	bf00      	nop
 80183c4:	40021000 	.word	0x40021000
 80183c8:	40022000 	.word	0x40022000

080183cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b086      	sub	sp, #24
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80183d4:	2300      	movs	r3, #0
 80183d6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80183d8:	4b2c      	ldr	r3, [pc, #176]	; (801848c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80183da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d003      	beq.n	80183ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80183e4:	f7ff f83a 	bl	801745c <HAL_PWREx_GetVoltageRange>
 80183e8:	6138      	str	r0, [r7, #16]
 80183ea:	e014      	b.n	8018416 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80183ec:	4b27      	ldr	r3, [pc, #156]	; (801848c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80183ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183f0:	4a26      	ldr	r2, [pc, #152]	; (801848c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80183f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80183f6:	6593      	str	r3, [r2, #88]	; 0x58
 80183f8:	4b24      	ldr	r3, [pc, #144]	; (801848c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80183fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018400:	60fb      	str	r3, [r7, #12]
 8018402:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8018404:	f7ff f82a 	bl	801745c <HAL_PWREx_GetVoltageRange>
 8018408:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 801840a:	4b20      	ldr	r3, [pc, #128]	; (801848c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801840e:	4a1f      	ldr	r2, [pc, #124]	; (801848c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8018410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018414:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8018416:	693b      	ldr	r3, [r7, #16]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d003      	beq.n	8018424 <RCC_SetFlashLatencyFromMSIRange+0x58>
 801841c:	693b      	ldr	r3, [r7, #16]
 801841e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018422:	d10b      	bne.n	801843c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	2b80      	cmp	r3, #128	; 0x80
 8018428:	d919      	bls.n	801845e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	2ba0      	cmp	r3, #160	; 0xa0
 801842e:	d902      	bls.n	8018436 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8018430:	2302      	movs	r3, #2
 8018432:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8018434:	e013      	b.n	801845e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8018436:	2301      	movs	r3, #1
 8018438:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 801843a:	e010      	b.n	801845e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	2b80      	cmp	r3, #128	; 0x80
 8018440:	d902      	bls.n	8018448 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8018442:	2303      	movs	r3, #3
 8018444:	617b      	str	r3, [r7, #20]
 8018446:	e00a      	b.n	801845e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2b80      	cmp	r3, #128	; 0x80
 801844c:	d102      	bne.n	8018454 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801844e:	2302      	movs	r3, #2
 8018450:	617b      	str	r3, [r7, #20]
 8018452:	e004      	b.n	801845e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	2b70      	cmp	r3, #112	; 0x70
 8018458:	d101      	bne.n	801845e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801845a:	2301      	movs	r3, #1
 801845c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801845e:	4b0c      	ldr	r3, [pc, #48]	; (8018490 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	f023 020f 	bic.w	r2, r3, #15
 8018466:	490a      	ldr	r1, [pc, #40]	; (8018490 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	4313      	orrs	r3, r2
 801846c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801846e:	4b08      	ldr	r3, [pc, #32]	; (8018490 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	f003 030f 	and.w	r3, r3, #15
 8018476:	697a      	ldr	r2, [r7, #20]
 8018478:	429a      	cmp	r2, r3
 801847a:	d001      	beq.n	8018480 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 801847c:	2301      	movs	r3, #1
 801847e:	e000      	b.n	8018482 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8018480:	2300      	movs	r3, #0
}
 8018482:	4618      	mov	r0, r3
 8018484:	3718      	adds	r7, #24
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}
 801848a:	bf00      	nop
 801848c:	40021000 	.word	0x40021000
 8018490:	40022000 	.word	0x40022000

08018494 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8018494:	b480      	push	{r7}
 8018496:	b087      	sub	sp, #28
 8018498:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801849a:	4b31      	ldr	r3, [pc, #196]	; (8018560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801849c:	68db      	ldr	r3, [r3, #12]
 801849e:	f003 0303 	and.w	r3, r3, #3
 80184a2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80184a4:	4b2e      	ldr	r3, [pc, #184]	; (8018560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80184a6:	68db      	ldr	r3, [r3, #12]
 80184a8:	091b      	lsrs	r3, r3, #4
 80184aa:	f003 030f 	and.w	r3, r3, #15
 80184ae:	3301      	adds	r3, #1
 80184b0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	2b03      	cmp	r3, #3
 80184b6:	d015      	beq.n	80184e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	2b03      	cmp	r3, #3
 80184bc:	d839      	bhi.n	8018532 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	2b01      	cmp	r3, #1
 80184c2:	d01c      	beq.n	80184fe <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	2b02      	cmp	r3, #2
 80184c8:	d133      	bne.n	8018532 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80184ca:	4a26      	ldr	r2, [pc, #152]	; (8018564 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80184d2:	4a23      	ldr	r2, [pc, #140]	; (8018560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80184d4:	68d2      	ldr	r2, [r2, #12]
 80184d6:	0a12      	lsrs	r2, r2, #8
 80184d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80184dc:	fb02 f303 	mul.w	r3, r2, r3
 80184e0:	613b      	str	r3, [r7, #16]
      break;
 80184e2:	e029      	b.n	8018538 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80184e4:	4a20      	ldr	r2, [pc, #128]	; (8018568 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80184ec:	4a1c      	ldr	r2, [pc, #112]	; (8018560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80184ee:	68d2      	ldr	r2, [r2, #12]
 80184f0:	0a12      	lsrs	r2, r2, #8
 80184f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80184f6:	fb02 f303 	mul.w	r3, r2, r3
 80184fa:	613b      	str	r3, [r7, #16]
      break;
 80184fc:	e01c      	b.n	8018538 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80184fe:	4b18      	ldr	r3, [pc, #96]	; (8018560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	f003 0308 	and.w	r3, r3, #8
 8018506:	2b00      	cmp	r3, #0
 8018508:	d107      	bne.n	801851a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801850a:	4b15      	ldr	r3, [pc, #84]	; (8018560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801850c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018510:	0a1b      	lsrs	r3, r3, #8
 8018512:	f003 030f 	and.w	r3, r3, #15
 8018516:	617b      	str	r3, [r7, #20]
 8018518:	e005      	b.n	8018526 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801851a:	4b11      	ldr	r3, [pc, #68]	; (8018560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	091b      	lsrs	r3, r3, #4
 8018520:	f003 030f 	and.w	r3, r3, #15
 8018524:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8018526:	4a11      	ldr	r2, [pc, #68]	; (801856c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801852e:	613b      	str	r3, [r7, #16]
        break;
 8018530:	e002      	b.n	8018538 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	613b      	str	r3, [r7, #16]
      break;
 8018536:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8018538:	4b09      	ldr	r3, [pc, #36]	; (8018560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801853a:	68db      	ldr	r3, [r3, #12]
 801853c:	0e5b      	lsrs	r3, r3, #25
 801853e:	f003 0303 	and.w	r3, r3, #3
 8018542:	3301      	adds	r3, #1
 8018544:	005b      	lsls	r3, r3, #1
 8018546:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8018548:	693a      	ldr	r2, [r7, #16]
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018550:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8018552:	683b      	ldr	r3, [r7, #0]
}
 8018554:	4618      	mov	r0, r3
 8018556:	371c      	adds	r7, #28
 8018558:	46bd      	mov	sp, r7
 801855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855e:	4770      	bx	lr
 8018560:	40021000 	.word	0x40021000
 8018564:	00f42400 	.word	0x00f42400
 8018568:	007a1200 	.word	0x007a1200
 801856c:	0802596c 	.word	0x0802596c

08018570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b088      	sub	sp, #32
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8018578:	2300      	movs	r3, #0
 801857a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801857c:	2300      	movs	r3, #0
 801857e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018588:	2b00      	cmp	r3, #0
 801858a:	d040      	beq.n	801860e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018590:	2b80      	cmp	r3, #128	; 0x80
 8018592:	d02a      	beq.n	80185ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8018594:	2b80      	cmp	r3, #128	; 0x80
 8018596:	d825      	bhi.n	80185e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8018598:	2b60      	cmp	r3, #96	; 0x60
 801859a:	d026      	beq.n	80185ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801859c:	2b60      	cmp	r3, #96	; 0x60
 801859e:	d821      	bhi.n	80185e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80185a0:	2b40      	cmp	r3, #64	; 0x40
 80185a2:	d006      	beq.n	80185b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80185a4:	2b40      	cmp	r3, #64	; 0x40
 80185a6:	d81d      	bhi.n	80185e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d009      	beq.n	80185c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80185ac:	2b20      	cmp	r3, #32
 80185ae:	d010      	beq.n	80185d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80185b0:	e018      	b.n	80185e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80185b2:	4b8f      	ldr	r3, [pc, #572]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80185b4:	68db      	ldr	r3, [r3, #12]
 80185b6:	4a8e      	ldr	r2, [pc, #568]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80185b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80185bc:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80185be:	e015      	b.n	80185ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	3304      	adds	r3, #4
 80185c4:	2100      	movs	r1, #0
 80185c6:	4618      	mov	r0, r3
 80185c8:	f000 fb56 	bl	8018c78 <RCCEx_PLLSAI1_Config>
 80185cc:	4603      	mov	r3, r0
 80185ce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80185d0:	e00c      	b.n	80185ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	3320      	adds	r3, #32
 80185d6:	2100      	movs	r1, #0
 80185d8:	4618      	mov	r0, r3
 80185da:	f000 fc33 	bl	8018e44 <RCCEx_PLLSAI2_Config>
 80185de:	4603      	mov	r3, r0
 80185e0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80185e2:	e003      	b.n	80185ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80185e4:	2301      	movs	r3, #1
 80185e6:	77fb      	strb	r3, [r7, #31]
        break;
 80185e8:	e000      	b.n	80185ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80185ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80185ec:	7ffb      	ldrb	r3, [r7, #31]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d10b      	bne.n	801860a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80185f2:	4b7f      	ldr	r3, [pc, #508]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80185f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80185f8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018600:	497b      	ldr	r1, [pc, #492]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018602:	4313      	orrs	r3, r2
 8018604:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8018608:	e001      	b.n	801860e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801860a:	7ffb      	ldrb	r3, [r7, #31]
 801860c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018616:	2b00      	cmp	r3, #0
 8018618:	d047      	beq.n	80186aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801861e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018622:	d030      	beq.n	8018686 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8018624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018628:	d82a      	bhi.n	8018680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801862a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801862e:	d02a      	beq.n	8018686 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8018630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018634:	d824      	bhi.n	8018680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8018636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801863a:	d008      	beq.n	801864e <HAL_RCCEx_PeriphCLKConfig+0xde>
 801863c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018640:	d81e      	bhi.n	8018680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8018642:	2b00      	cmp	r3, #0
 8018644:	d00a      	beq.n	801865c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8018646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801864a:	d010      	beq.n	801866e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 801864c:	e018      	b.n	8018680 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801864e:	4b68      	ldr	r3, [pc, #416]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018650:	68db      	ldr	r3, [r3, #12]
 8018652:	4a67      	ldr	r2, [pc, #412]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018658:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 801865a:	e015      	b.n	8018688 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	3304      	adds	r3, #4
 8018660:	2100      	movs	r1, #0
 8018662:	4618      	mov	r0, r3
 8018664:	f000 fb08 	bl	8018c78 <RCCEx_PLLSAI1_Config>
 8018668:	4603      	mov	r3, r0
 801866a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 801866c:	e00c      	b.n	8018688 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	3320      	adds	r3, #32
 8018672:	2100      	movs	r1, #0
 8018674:	4618      	mov	r0, r3
 8018676:	f000 fbe5 	bl	8018e44 <RCCEx_PLLSAI2_Config>
 801867a:	4603      	mov	r3, r0
 801867c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 801867e:	e003      	b.n	8018688 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018680:	2301      	movs	r3, #1
 8018682:	77fb      	strb	r3, [r7, #31]
        break;
 8018684:	e000      	b.n	8018688 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8018686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018688:	7ffb      	ldrb	r3, [r7, #31]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d10b      	bne.n	80186a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801868e:	4b58      	ldr	r3, [pc, #352]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801869c:	4954      	ldr	r1, [pc, #336]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801869e:	4313      	orrs	r3, r2
 80186a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80186a4:	e001      	b.n	80186aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80186a6:	7ffb      	ldrb	r3, [r7, #31]
 80186a8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	f000 80ab 	beq.w	801880e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80186b8:	2300      	movs	r3, #0
 80186ba:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80186bc:	4b4c      	ldr	r3, [pc, #304]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80186be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80186c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d10d      	bne.n	80186e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80186c8:	4b49      	ldr	r3, [pc, #292]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80186ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80186cc:	4a48      	ldr	r2, [pc, #288]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80186ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80186d2:	6593      	str	r3, [r2, #88]	; 0x58
 80186d4:	4b46      	ldr	r3, [pc, #280]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80186d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80186d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80186dc:	60fb      	str	r3, [r7, #12]
 80186de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80186e0:	2301      	movs	r3, #1
 80186e2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80186e4:	4b43      	ldr	r3, [pc, #268]	; (80187f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	4a42      	ldr	r2, [pc, #264]	; (80187f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80186ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80186ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80186f0:	f7fb fd3e 	bl	8014170 <HAL_GetTick>
 80186f4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80186f6:	e00f      	b.n	8018718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80186f8:	f7fb fd3a 	bl	8014170 <HAL_GetTick>
 80186fc:	4602      	mov	r2, r0
 80186fe:	693b      	ldr	r3, [r7, #16]
 8018700:	1ad3      	subs	r3, r2, r3
 8018702:	2b02      	cmp	r3, #2
 8018704:	d908      	bls.n	8018718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8018706:	4b3b      	ldr	r3, [pc, #236]	; (80187f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801870e:	2b00      	cmp	r3, #0
 8018710:	d109      	bne.n	8018726 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8018712:	2303      	movs	r3, #3
 8018714:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8018716:	e006      	b.n	8018726 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8018718:	4b36      	ldr	r3, [pc, #216]	; (80187f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018720:	2b00      	cmp	r3, #0
 8018722:	d0e9      	beq.n	80186f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8018724:	e000      	b.n	8018728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8018726:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8018728:	7ffb      	ldrb	r3, [r7, #31]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d164      	bne.n	80187f8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801872e:	4b30      	ldr	r3, [pc, #192]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018738:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801873a:	69bb      	ldr	r3, [r7, #24]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d01f      	beq.n	8018780 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018746:	69ba      	ldr	r2, [r7, #24]
 8018748:	429a      	cmp	r2, r3
 801874a:	d019      	beq.n	8018780 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801874c:	4b28      	ldr	r3, [pc, #160]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801874e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018756:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8018758:	4b25      	ldr	r3, [pc, #148]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801875a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801875e:	4a24      	ldr	r2, [pc, #144]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8018768:	4b21      	ldr	r3, [pc, #132]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801876a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801876e:	4a20      	ldr	r2, [pc, #128]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8018778:	4a1d      	ldr	r2, [pc, #116]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801877a:	69bb      	ldr	r3, [r7, #24]
 801877c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8018780:	69bb      	ldr	r3, [r7, #24]
 8018782:	f003 0301 	and.w	r3, r3, #1
 8018786:	2b00      	cmp	r3, #0
 8018788:	d01f      	beq.n	80187ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801878a:	f7fb fcf1 	bl	8014170 <HAL_GetTick>
 801878e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018790:	e012      	b.n	80187b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018792:	f7fb fced 	bl	8014170 <HAL_GetTick>
 8018796:	4602      	mov	r2, r0
 8018798:	693b      	ldr	r3, [r7, #16]
 801879a:	1ad3      	subs	r3, r2, r3
 801879c:	f241 3288 	movw	r2, #5000	; 0x1388
 80187a0:	4293      	cmp	r3, r2
 80187a2:	d909      	bls.n	80187b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80187a4:	4b12      	ldr	r3, [pc, #72]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80187a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80187aa:	f003 0302 	and.w	r3, r3, #2
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d10a      	bne.n	80187c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80187b2:	2303      	movs	r3, #3
 80187b4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80187b6:	e007      	b.n	80187c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80187b8:	4b0d      	ldr	r3, [pc, #52]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80187ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80187be:	f003 0302 	and.w	r3, r3, #2
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d0e5      	beq.n	8018792 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80187c6:	e000      	b.n	80187ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80187c8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80187ca:	7ffb      	ldrb	r3, [r7, #31]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d10c      	bne.n	80187ea <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80187d0:	4b07      	ldr	r3, [pc, #28]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80187d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80187d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80187e0:	4903      	ldr	r1, [pc, #12]	; (80187f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80187e2:	4313      	orrs	r3, r2
 80187e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80187e8:	e008      	b.n	80187fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80187ea:	7ffb      	ldrb	r3, [r7, #31]
 80187ec:	77bb      	strb	r3, [r7, #30]
 80187ee:	e005      	b.n	80187fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80187f0:	40021000 	.word	0x40021000
 80187f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80187f8:	7ffb      	ldrb	r3, [r7, #31]
 80187fa:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80187fc:	7dfb      	ldrb	r3, [r7, #23]
 80187fe:	2b01      	cmp	r3, #1
 8018800:	d105      	bne.n	801880e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018802:	4b9c      	ldr	r3, [pc, #624]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018806:	4a9b      	ldr	r2, [pc, #620]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801880c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	f003 0301 	and.w	r3, r3, #1
 8018816:	2b00      	cmp	r3, #0
 8018818:	d00a      	beq.n	8018830 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801881a:	4b96      	ldr	r3, [pc, #600]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018820:	f023 0203 	bic.w	r2, r3, #3
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018828:	4992      	ldr	r1, [pc, #584]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801882a:	4313      	orrs	r3, r2
 801882c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	f003 0302 	and.w	r3, r3, #2
 8018838:	2b00      	cmp	r3, #0
 801883a:	d00a      	beq.n	8018852 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801883c:	4b8d      	ldr	r3, [pc, #564]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801883e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018842:	f023 020c 	bic.w	r2, r3, #12
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801884a:	498a      	ldr	r1, [pc, #552]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801884c:	4313      	orrs	r3, r2
 801884e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	f003 0304 	and.w	r3, r3, #4
 801885a:	2b00      	cmp	r3, #0
 801885c:	d00a      	beq.n	8018874 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801885e:	4b85      	ldr	r3, [pc, #532]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018864:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801886c:	4981      	ldr	r1, [pc, #516]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801886e:	4313      	orrs	r3, r2
 8018870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	f003 0308 	and.w	r3, r3, #8
 801887c:	2b00      	cmp	r3, #0
 801887e:	d00a      	beq.n	8018896 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8018880:	4b7c      	ldr	r3, [pc, #496]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018886:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801888e:	4979      	ldr	r1, [pc, #484]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018890:	4313      	orrs	r3, r2
 8018892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	f003 0310 	and.w	r3, r3, #16
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d00a      	beq.n	80188b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80188a2:	4b74      	ldr	r3, [pc, #464]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80188a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80188a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188b0:	4970      	ldr	r1, [pc, #448]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80188b2:	4313      	orrs	r3, r2
 80188b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	f003 0320 	and.w	r3, r3, #32
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d00a      	beq.n	80188da <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80188c4:	4b6b      	ldr	r3, [pc, #428]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80188c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80188ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80188d2:	4968      	ldr	r1, [pc, #416]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80188d4:	4313      	orrs	r3, r2
 80188d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d00a      	beq.n	80188fc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80188e6:	4b63      	ldr	r3, [pc, #396]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80188e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80188ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188f4:	495f      	ldr	r1, [pc, #380]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80188f6:	4313      	orrs	r3, r2
 80188f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018904:	2b00      	cmp	r3, #0
 8018906:	d00a      	beq.n	801891e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8018908:	4b5a      	ldr	r3, [pc, #360]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801890a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801890e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018916:	4957      	ldr	r1, [pc, #348]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018918:	4313      	orrs	r3, r2
 801891a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018926:	2b00      	cmp	r3, #0
 8018928:	d00a      	beq.n	8018940 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 801892a:	4b52      	ldr	r3, [pc, #328]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801892c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018930:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018938:	494e      	ldr	r1, [pc, #312]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801893a:	4313      	orrs	r3, r2
 801893c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018948:	2b00      	cmp	r3, #0
 801894a:	d031      	beq.n	80189b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8018954:	d00e      	beq.n	8018974 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8018956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801895a:	d814      	bhi.n	8018986 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801895c:	2b00      	cmp	r3, #0
 801895e:	d015      	beq.n	801898c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8018960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018964:	d10f      	bne.n	8018986 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018966:	4b43      	ldr	r3, [pc, #268]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018968:	68db      	ldr	r3, [r3, #12]
 801896a:	4a42      	ldr	r2, [pc, #264]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801896c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018970:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8018972:	e00c      	b.n	801898e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	3304      	adds	r3, #4
 8018978:	2100      	movs	r1, #0
 801897a:	4618      	mov	r0, r3
 801897c:	f000 f97c 	bl	8018c78 <RCCEx_PLLSAI1_Config>
 8018980:	4603      	mov	r3, r0
 8018982:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8018984:	e003      	b.n	801898e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8018986:	2301      	movs	r3, #1
 8018988:	77fb      	strb	r3, [r7, #31]
        break;
 801898a:	e000      	b.n	801898e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 801898c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801898e:	7ffb      	ldrb	r3, [r7, #31]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d10b      	bne.n	80189ac <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8018994:	4b37      	ldr	r3, [pc, #220]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801899a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80189a2:	4934      	ldr	r1, [pc, #208]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80189a4:	4313      	orrs	r3, r2
 80189a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80189aa:	e001      	b.n	80189b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80189ac:	7ffb      	ldrb	r3, [r7, #31]
 80189ae:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d00a      	beq.n	80189d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80189bc:	4b2d      	ldr	r3, [pc, #180]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80189be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80189c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189ca:	492a      	ldr	r1, [pc, #168]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80189cc:	4313      	orrs	r3, r2
 80189ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d00a      	beq.n	80189f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80189de:	4b25      	ldr	r3, [pc, #148]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80189e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80189e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189ec:	4921      	ldr	r1, [pc, #132]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80189ee:	4313      	orrs	r3, r2
 80189f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d00a      	beq.n	8018a16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018a00:	4b1c      	ldr	r3, [pc, #112]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018a06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a0e:	4919      	ldr	r1, [pc, #100]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018a10:	4313      	orrs	r3, r2
 8018a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d00a      	beq.n	8018a38 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8018a22:	4b14      	ldr	r3, [pc, #80]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018a28:	f023 0203 	bic.w	r2, r3, #3
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018a30:	4910      	ldr	r1, [pc, #64]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018a32:	4313      	orrs	r3, r2
 8018a34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d02b      	beq.n	8018a9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8018a44:	4b0b      	ldr	r3, [pc, #44]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018a4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a52:	4908      	ldr	r1, [pc, #32]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018a54:	4313      	orrs	r3, r2
 8018a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018a62:	d109      	bne.n	8018a78 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018a64:	4b03      	ldr	r3, [pc, #12]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018a66:	68db      	ldr	r3, [r3, #12]
 8018a68:	4a02      	ldr	r2, [pc, #8]	; (8018a74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018a6e:	60d3      	str	r3, [r2, #12]
 8018a70:	e014      	b.n	8018a9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8018a72:	bf00      	nop
 8018a74:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018a80:	d10c      	bne.n	8018a9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	3304      	adds	r3, #4
 8018a86:	2101      	movs	r1, #1
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f000 f8f5 	bl	8018c78 <RCCEx_PLLSAI1_Config>
 8018a8e:	4603      	mov	r3, r0
 8018a90:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8018a92:	7ffb      	ldrb	r3, [r7, #31]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d001      	beq.n	8018a9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8018a98:	7ffb      	ldrb	r3, [r7, #31]
 8018a9a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d04a      	beq.n	8018b3e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018ab0:	d108      	bne.n	8018ac4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8018ab2:	4b70      	ldr	r3, [pc, #448]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018ab8:	4a6e      	ldr	r2, [pc, #440]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018abe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8018ac2:	e012      	b.n	8018aea <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8018ac4:	4b6b      	ldr	r3, [pc, #428]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018ad2:	4968      	ldr	r1, [pc, #416]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018ad4:	4313      	orrs	r3, r2
 8018ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8018ada:	4b66      	ldr	r3, [pc, #408]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018ae0:	4a64      	ldr	r2, [pc, #400]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8018ae6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018af2:	d10d      	bne.n	8018b10 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	3304      	adds	r3, #4
 8018af8:	2101      	movs	r1, #1
 8018afa:	4618      	mov	r0, r3
 8018afc:	f000 f8bc 	bl	8018c78 <RCCEx_PLLSAI1_Config>
 8018b00:	4603      	mov	r3, r0
 8018b02:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018b04:	7ffb      	ldrb	r3, [r7, #31]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d019      	beq.n	8018b3e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8018b0a:	7ffb      	ldrb	r3, [r7, #31]
 8018b0c:	77bb      	strb	r3, [r7, #30]
 8018b0e:	e016      	b.n	8018b3e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018b18:	d106      	bne.n	8018b28 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018b1a:	4b56      	ldr	r3, [pc, #344]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018b1c:	68db      	ldr	r3, [r3, #12]
 8018b1e:	4a55      	ldr	r2, [pc, #340]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018b24:	60d3      	str	r3, [r2, #12]
 8018b26:	e00a      	b.n	8018b3e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018b30:	d105      	bne.n	8018b3e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8018b32:	4b50      	ldr	r3, [pc, #320]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018b34:	68db      	ldr	r3, [r3, #12]
 8018b36:	4a4f      	ldr	r2, [pc, #316]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018b3c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d028      	beq.n	8018b9c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8018b4a:	4b4a      	ldr	r3, [pc, #296]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018b50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b58:	4946      	ldr	r1, [pc, #280]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018b5a:	4313      	orrs	r3, r2
 8018b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018b68:	d106      	bne.n	8018b78 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018b6a:	4b42      	ldr	r3, [pc, #264]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018b6c:	68db      	ldr	r3, [r3, #12]
 8018b6e:	4a41      	ldr	r2, [pc, #260]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018b74:	60d3      	str	r3, [r2, #12]
 8018b76:	e011      	b.n	8018b9c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018b80:	d10c      	bne.n	8018b9c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	3304      	adds	r3, #4
 8018b86:	2101      	movs	r1, #1
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f000 f875 	bl	8018c78 <RCCEx_PLLSAI1_Config>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018b92:	7ffb      	ldrb	r3, [r7, #31]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d001      	beq.n	8018b9c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8018b98:	7ffb      	ldrb	r3, [r7, #31]
 8018b9a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d01e      	beq.n	8018be6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018ba8:	4b32      	ldr	r3, [pc, #200]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018bb8:	492e      	ldr	r1, [pc, #184]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018bba:	4313      	orrs	r3, r2
 8018bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018bca:	d10c      	bne.n	8018be6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	3304      	adds	r3, #4
 8018bd0:	2102      	movs	r1, #2
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f000 f850 	bl	8018c78 <RCCEx_PLLSAI1_Config>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018bdc:	7ffb      	ldrb	r3, [r7, #31]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d001      	beq.n	8018be6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8018be2:	7ffb      	ldrb	r3, [r7, #31]
 8018be4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d00b      	beq.n	8018c0a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8018bf2:	4b20      	ldr	r3, [pc, #128]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018bf8:	f023 0204 	bic.w	r2, r3, #4
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018c02:	491c      	ldr	r1, [pc, #112]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018c04:	4313      	orrs	r3, r2
 8018c06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d00b      	beq.n	8018c2e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8018c16:	4b17      	ldr	r3, [pc, #92]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018c1c:	f023 0218 	bic.w	r2, r3, #24
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c26:	4913      	ldr	r1, [pc, #76]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018c28:	4313      	orrs	r3, r2
 8018c2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d017      	beq.n	8018c6a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8018c3a:	4b0e      	ldr	r3, [pc, #56]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018c4a:	490a      	ldr	r1, [pc, #40]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018c4c:	4313      	orrs	r3, r2
 8018c4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018c5c:	d105      	bne.n	8018c6a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018c5e:	4b05      	ldr	r3, [pc, #20]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018c60:	68db      	ldr	r3, [r3, #12]
 8018c62:	4a04      	ldr	r2, [pc, #16]	; (8018c74 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018c68:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8018c6a:	7fbb      	ldrb	r3, [r7, #30]
}
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	3720      	adds	r7, #32
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}
 8018c74:	40021000 	.word	0x40021000

08018c78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b084      	sub	sp, #16
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
 8018c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018c82:	2300      	movs	r3, #0
 8018c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	2b03      	cmp	r3, #3
 8018c8c:	d018      	beq.n	8018cc0 <RCCEx_PLLSAI1_Config+0x48>
 8018c8e:	2b03      	cmp	r3, #3
 8018c90:	d81f      	bhi.n	8018cd2 <RCCEx_PLLSAI1_Config+0x5a>
 8018c92:	2b01      	cmp	r3, #1
 8018c94:	d002      	beq.n	8018c9c <RCCEx_PLLSAI1_Config+0x24>
 8018c96:	2b02      	cmp	r3, #2
 8018c98:	d009      	beq.n	8018cae <RCCEx_PLLSAI1_Config+0x36>
 8018c9a:	e01a      	b.n	8018cd2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8018c9c:	4b65      	ldr	r3, [pc, #404]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	f003 0302 	and.w	r3, r3, #2
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d117      	bne.n	8018cd8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8018ca8:	2301      	movs	r3, #1
 8018caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018cac:	e014      	b.n	8018cd8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8018cae:	4b61      	ldr	r3, [pc, #388]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d110      	bne.n	8018cdc <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8018cba:	2301      	movs	r3, #1
 8018cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018cbe:	e00d      	b.n	8018cdc <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8018cc0:	4b5c      	ldr	r3, [pc, #368]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d109      	bne.n	8018ce0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8018ccc:	2301      	movs	r3, #1
 8018cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018cd0:	e006      	b.n	8018ce0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8018cd2:	2301      	movs	r3, #1
 8018cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8018cd6:	e004      	b.n	8018ce2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8018cd8:	bf00      	nop
 8018cda:	e002      	b.n	8018ce2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8018cdc:	bf00      	nop
 8018cde:	e000      	b.n	8018ce2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8018ce0:	bf00      	nop
  }

  if (status == HAL_OK)
 8018ce2:	7bfb      	ldrb	r3, [r7, #15]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	f040 809f 	bne.w	8018e28 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8018cea:	4b52      	ldr	r3, [pc, #328]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	4a51      	ldr	r2, [pc, #324]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018cf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018cf6:	f7fb fa3b 	bl	8014170 <HAL_GetTick>
 8018cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018cfc:	e00f      	b.n	8018d1e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018cfe:	f7fb fa37 	bl	8014170 <HAL_GetTick>
 8018d02:	4602      	mov	r2, r0
 8018d04:	68bb      	ldr	r3, [r7, #8]
 8018d06:	1ad3      	subs	r3, r2, r3
 8018d08:	2b02      	cmp	r3, #2
 8018d0a:	d908      	bls.n	8018d1e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018d0c:	4b49      	ldr	r3, [pc, #292]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d009      	beq.n	8018d2c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8018d18:	2303      	movs	r3, #3
 8018d1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018d1c:	e006      	b.n	8018d2c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018d1e:	4b45      	ldr	r3, [pc, #276]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d1e9      	bne.n	8018cfe <RCCEx_PLLSAI1_Config+0x86>
 8018d2a:	e000      	b.n	8018d2e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8018d2c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8018d2e:	7bfb      	ldrb	r3, [r7, #15]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d179      	bne.n	8018e28 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d116      	bne.n	8018d68 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018d3a:	4b3e      	ldr	r3, [pc, #248]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018d3c:	691a      	ldr	r2, [r3, #16]
 8018d3e:	4b3e      	ldr	r3, [pc, #248]	; (8018e38 <RCCEx_PLLSAI1_Config+0x1c0>)
 8018d40:	4013      	ands	r3, r2
 8018d42:	687a      	ldr	r2, [r7, #4]
 8018d44:	6892      	ldr	r2, [r2, #8]
 8018d46:	0211      	lsls	r1, r2, #8
 8018d48:	687a      	ldr	r2, [r7, #4]
 8018d4a:	68d2      	ldr	r2, [r2, #12]
 8018d4c:	06d2      	lsls	r2, r2, #27
 8018d4e:	4311      	orrs	r1, r2
 8018d50:	687a      	ldr	r2, [r7, #4]
 8018d52:	6852      	ldr	r2, [r2, #4]
 8018d54:	3a01      	subs	r2, #1
 8018d56:	0112      	lsls	r2, r2, #4
 8018d58:	4311      	orrs	r1, r2
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	6812      	ldr	r2, [r2, #0]
 8018d5e:	430a      	orrs	r2, r1
 8018d60:	4934      	ldr	r1, [pc, #208]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018d62:	4313      	orrs	r3, r2
 8018d64:	610b      	str	r3, [r1, #16]
 8018d66:	e033      	b.n	8018dd0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	2b01      	cmp	r3, #1
 8018d6c:	d118      	bne.n	8018da0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018d6e:	4b31      	ldr	r3, [pc, #196]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018d70:	691a      	ldr	r2, [r3, #16]
 8018d72:	4b32      	ldr	r3, [pc, #200]	; (8018e3c <RCCEx_PLLSAI1_Config+0x1c4>)
 8018d74:	4013      	ands	r3, r2
 8018d76:	687a      	ldr	r2, [r7, #4]
 8018d78:	6892      	ldr	r2, [r2, #8]
 8018d7a:	0211      	lsls	r1, r2, #8
 8018d7c:	687a      	ldr	r2, [r7, #4]
 8018d7e:	6912      	ldr	r2, [r2, #16]
 8018d80:	0852      	lsrs	r2, r2, #1
 8018d82:	3a01      	subs	r2, #1
 8018d84:	0552      	lsls	r2, r2, #21
 8018d86:	4311      	orrs	r1, r2
 8018d88:	687a      	ldr	r2, [r7, #4]
 8018d8a:	6852      	ldr	r2, [r2, #4]
 8018d8c:	3a01      	subs	r2, #1
 8018d8e:	0112      	lsls	r2, r2, #4
 8018d90:	4311      	orrs	r1, r2
 8018d92:	687a      	ldr	r2, [r7, #4]
 8018d94:	6812      	ldr	r2, [r2, #0]
 8018d96:	430a      	orrs	r2, r1
 8018d98:	4926      	ldr	r1, [pc, #152]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018d9a:	4313      	orrs	r3, r2
 8018d9c:	610b      	str	r3, [r1, #16]
 8018d9e:	e017      	b.n	8018dd0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018da0:	4b24      	ldr	r3, [pc, #144]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018da2:	691a      	ldr	r2, [r3, #16]
 8018da4:	4b26      	ldr	r3, [pc, #152]	; (8018e40 <RCCEx_PLLSAI1_Config+0x1c8>)
 8018da6:	4013      	ands	r3, r2
 8018da8:	687a      	ldr	r2, [r7, #4]
 8018daa:	6892      	ldr	r2, [r2, #8]
 8018dac:	0211      	lsls	r1, r2, #8
 8018dae:	687a      	ldr	r2, [r7, #4]
 8018db0:	6952      	ldr	r2, [r2, #20]
 8018db2:	0852      	lsrs	r2, r2, #1
 8018db4:	3a01      	subs	r2, #1
 8018db6:	0652      	lsls	r2, r2, #25
 8018db8:	4311      	orrs	r1, r2
 8018dba:	687a      	ldr	r2, [r7, #4]
 8018dbc:	6852      	ldr	r2, [r2, #4]
 8018dbe:	3a01      	subs	r2, #1
 8018dc0:	0112      	lsls	r2, r2, #4
 8018dc2:	4311      	orrs	r1, r2
 8018dc4:	687a      	ldr	r2, [r7, #4]
 8018dc6:	6812      	ldr	r2, [r2, #0]
 8018dc8:	430a      	orrs	r2, r1
 8018dca:	491a      	ldr	r1, [pc, #104]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018dcc:	4313      	orrs	r3, r2
 8018dce:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8018dd0:	4b18      	ldr	r3, [pc, #96]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	4a17      	ldr	r2, [pc, #92]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018dd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018ddc:	f7fb f9c8 	bl	8014170 <HAL_GetTick>
 8018de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018de2:	e00f      	b.n	8018e04 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018de4:	f7fb f9c4 	bl	8014170 <HAL_GetTick>
 8018de8:	4602      	mov	r2, r0
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	1ad3      	subs	r3, r2, r3
 8018dee:	2b02      	cmp	r3, #2
 8018df0:	d908      	bls.n	8018e04 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018df2:	4b10      	ldr	r3, [pc, #64]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d109      	bne.n	8018e12 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8018dfe:	2303      	movs	r3, #3
 8018e00:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8018e02:	e006      	b.n	8018e12 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018e04:	4b0b      	ldr	r3, [pc, #44]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d0e9      	beq.n	8018de4 <RCCEx_PLLSAI1_Config+0x16c>
 8018e10:	e000      	b.n	8018e14 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8018e12:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8018e14:	7bfb      	ldrb	r3, [r7, #15]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d106      	bne.n	8018e28 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8018e1a:	4b06      	ldr	r3, [pc, #24]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018e1c:	691a      	ldr	r2, [r3, #16]
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	699b      	ldr	r3, [r3, #24]
 8018e22:	4904      	ldr	r1, [pc, #16]	; (8018e34 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018e24:	4313      	orrs	r3, r2
 8018e26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8018e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	3710      	adds	r7, #16
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}
 8018e32:	bf00      	nop
 8018e34:	40021000 	.word	0x40021000
 8018e38:	07ff800c 	.word	0x07ff800c
 8018e3c:	ff9f800c 	.word	0xff9f800c
 8018e40:	f9ff800c 	.word	0xf9ff800c

08018e44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b084      	sub	sp, #16
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018e4e:	2300      	movs	r3, #0
 8018e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	2b03      	cmp	r3, #3
 8018e58:	d018      	beq.n	8018e8c <RCCEx_PLLSAI2_Config+0x48>
 8018e5a:	2b03      	cmp	r3, #3
 8018e5c:	d81f      	bhi.n	8018e9e <RCCEx_PLLSAI2_Config+0x5a>
 8018e5e:	2b01      	cmp	r3, #1
 8018e60:	d002      	beq.n	8018e68 <RCCEx_PLLSAI2_Config+0x24>
 8018e62:	2b02      	cmp	r3, #2
 8018e64:	d009      	beq.n	8018e7a <RCCEx_PLLSAI2_Config+0x36>
 8018e66:	e01a      	b.n	8018e9e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8018e68:	4b4a      	ldr	r3, [pc, #296]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	f003 0302 	and.w	r3, r3, #2
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d117      	bne.n	8018ea4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8018e74:	2301      	movs	r3, #1
 8018e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018e78:	e014      	b.n	8018ea4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8018e7a:	4b46      	ldr	r3, [pc, #280]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d110      	bne.n	8018ea8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8018e86:	2301      	movs	r3, #1
 8018e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018e8a:	e00d      	b.n	8018ea8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8018e8c:	4b41      	ldr	r3, [pc, #260]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d109      	bne.n	8018eac <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8018e98:	2301      	movs	r3, #1
 8018e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018e9c:	e006      	b.n	8018eac <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8018e9e:	2301      	movs	r3, #1
 8018ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8018ea2:	e004      	b.n	8018eae <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8018ea4:	bf00      	nop
 8018ea6:	e002      	b.n	8018eae <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8018ea8:	bf00      	nop
 8018eaa:	e000      	b.n	8018eae <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8018eac:	bf00      	nop
  }

  if (status == HAL_OK)
 8018eae:	7bfb      	ldrb	r3, [r7, #15]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d169      	bne.n	8018f88 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8018eb4:	4b37      	ldr	r3, [pc, #220]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	4a36      	ldr	r2, [pc, #216]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018ec0:	f7fb f956 	bl	8014170 <HAL_GetTick>
 8018ec4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8018ec6:	e00f      	b.n	8018ee8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8018ec8:	f7fb f952 	bl	8014170 <HAL_GetTick>
 8018ecc:	4602      	mov	r2, r0
 8018ece:	68bb      	ldr	r3, [r7, #8]
 8018ed0:	1ad3      	subs	r3, r2, r3
 8018ed2:	2b02      	cmp	r3, #2
 8018ed4:	d908      	bls.n	8018ee8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8018ed6:	4b2f      	ldr	r3, [pc, #188]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d009      	beq.n	8018ef6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8018ee2:	2303      	movs	r3, #3
 8018ee4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018ee6:	e006      	b.n	8018ef6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8018ee8:	4b2a      	ldr	r3, [pc, #168]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d1e9      	bne.n	8018ec8 <RCCEx_PLLSAI2_Config+0x84>
 8018ef4:	e000      	b.n	8018ef8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8018ef6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8018ef8:	7bfb      	ldrb	r3, [r7, #15]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d144      	bne.n	8018f88 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8018efe:	683b      	ldr	r3, [r7, #0]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d115      	bne.n	8018f30 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8018f04:	4b23      	ldr	r3, [pc, #140]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018f06:	695a      	ldr	r2, [r3, #20]
 8018f08:	4b23      	ldr	r3, [pc, #140]	; (8018f98 <RCCEx_PLLSAI2_Config+0x154>)
 8018f0a:	4013      	ands	r3, r2
 8018f0c:	687a      	ldr	r2, [r7, #4]
 8018f0e:	6892      	ldr	r2, [r2, #8]
 8018f10:	0211      	lsls	r1, r2, #8
 8018f12:	687a      	ldr	r2, [r7, #4]
 8018f14:	68d2      	ldr	r2, [r2, #12]
 8018f16:	06d2      	lsls	r2, r2, #27
 8018f18:	4311      	orrs	r1, r2
 8018f1a:	687a      	ldr	r2, [r7, #4]
 8018f1c:	6852      	ldr	r2, [r2, #4]
 8018f1e:	3a01      	subs	r2, #1
 8018f20:	0112      	lsls	r2, r2, #4
 8018f22:	4311      	orrs	r1, r2
 8018f24:	687a      	ldr	r2, [r7, #4]
 8018f26:	6812      	ldr	r2, [r2, #0]
 8018f28:	430a      	orrs	r2, r1
 8018f2a:	491a      	ldr	r1, [pc, #104]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018f2c:	4313      	orrs	r3, r2
 8018f2e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8018f30:	4b18      	ldr	r3, [pc, #96]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	4a17      	ldr	r2, [pc, #92]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018f3c:	f7fb f918 	bl	8014170 <HAL_GetTick>
 8018f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018f42:	e00f      	b.n	8018f64 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8018f44:	f7fb f914 	bl	8014170 <HAL_GetTick>
 8018f48:	4602      	mov	r2, r0
 8018f4a:	68bb      	ldr	r3, [r7, #8]
 8018f4c:	1ad3      	subs	r3, r2, r3
 8018f4e:	2b02      	cmp	r3, #2
 8018f50:	d908      	bls.n	8018f64 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018f52:	4b10      	ldr	r3, [pc, #64]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d109      	bne.n	8018f72 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8018f5e:	2303      	movs	r3, #3
 8018f60:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8018f62:	e006      	b.n	8018f72 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018f64:	4b0b      	ldr	r3, [pc, #44]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d0e9      	beq.n	8018f44 <RCCEx_PLLSAI2_Config+0x100>
 8018f70:	e000      	b.n	8018f74 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8018f72:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8018f74:	7bfb      	ldrb	r3, [r7, #15]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d106      	bne.n	8018f88 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8018f7a:	4b06      	ldr	r3, [pc, #24]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018f7c:	695a      	ldr	r2, [r3, #20]
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	691b      	ldr	r3, [r3, #16]
 8018f82:	4904      	ldr	r1, [pc, #16]	; (8018f94 <RCCEx_PLLSAI2_Config+0x150>)
 8018f84:	4313      	orrs	r3, r2
 8018f86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8018f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	3710      	adds	r7, #16
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	bd80      	pop	{r7, pc}
 8018f92:	bf00      	nop
 8018f94:	40021000 	.word	0x40021000
 8018f98:	07ff800c 	.word	0x07ff800c

08018f9c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b084      	sub	sp, #16
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018fa4:	2301      	movs	r3, #1
 8018fa6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d066      	beq.n	801907c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018fb4:	b2db      	uxtb	r3, r3
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d106      	bne.n	8018fc8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	2200      	movs	r2, #0
 8018fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8018fc2:	6878      	ldr	r0, [r7, #4]
 8018fc4:	f7fa fb42 	bl	801364c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2202      	movs	r2, #2
 8018fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	68db      	ldr	r3, [r3, #12]
 8018fd6:	f003 0310 	and.w	r3, r3, #16
 8018fda:	2b10      	cmp	r3, #16
 8018fdc:	d045      	beq.n	801906a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018fde:	4b2a      	ldr	r3, [pc, #168]	; (8019088 <HAL_RTC_Init+0xec>)
 8018fe0:	22ca      	movs	r2, #202	; 0xca
 8018fe2:	625a      	str	r2, [r3, #36]	; 0x24
 8018fe4:	4b28      	ldr	r3, [pc, #160]	; (8019088 <HAL_RTC_Init+0xec>)
 8018fe6:	2253      	movs	r2, #83	; 0x53
 8018fe8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8018fea:	6878      	ldr	r0, [r7, #4]
 8018fec:	f000 f872 	bl	80190d4 <RTC_EnterInitMode>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8018ff4:	7bfb      	ldrb	r3, [r7, #15]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d121      	bne.n	801903e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8018ffa:	4b23      	ldr	r3, [pc, #140]	; (8019088 <HAL_RTC_Init+0xec>)
 8018ffc:	699b      	ldr	r3, [r3, #24]
 8018ffe:	4a22      	ldr	r2, [pc, #136]	; (8019088 <HAL_RTC_Init+0xec>)
 8019000:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8019004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019008:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 801900a:	4b1f      	ldr	r3, [pc, #124]	; (8019088 <HAL_RTC_Init+0xec>)
 801900c:	699a      	ldr	r2, [r3, #24]
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6859      	ldr	r1, [r3, #4]
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	691b      	ldr	r3, [r3, #16]
 8019016:	4319      	orrs	r1, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	699b      	ldr	r3, [r3, #24]
 801901c:	430b      	orrs	r3, r1
 801901e:	491a      	ldr	r1, [pc, #104]	; (8019088 <HAL_RTC_Init+0xec>)
 8019020:	4313      	orrs	r3, r2
 8019022:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	68da      	ldr	r2, [r3, #12]
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	689b      	ldr	r3, [r3, #8]
 801902c:	041b      	lsls	r3, r3, #16
 801902e:	4916      	ldr	r1, [pc, #88]	; (8019088 <HAL_RTC_Init+0xec>)
 8019030:	4313      	orrs	r3, r2
 8019032:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8019034:	6878      	ldr	r0, [r7, #4]
 8019036:	f000 f881 	bl	801913c <RTC_ExitInitMode>
 801903a:	4603      	mov	r3, r0
 801903c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 801903e:	7bfb      	ldrb	r3, [r7, #15]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d10e      	bne.n	8019062 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8019044:	4b10      	ldr	r3, [pc, #64]	; (8019088 <HAL_RTC_Init+0xec>)
 8019046:	699b      	ldr	r3, [r3, #24]
 8019048:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	6a19      	ldr	r1, [r3, #32]
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	69db      	ldr	r3, [r3, #28]
 8019054:	4319      	orrs	r1, r3
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	695b      	ldr	r3, [r3, #20]
 801905a:	430b      	orrs	r3, r1
 801905c:	490a      	ldr	r1, [pc, #40]	; (8019088 <HAL_RTC_Init+0xec>)
 801905e:	4313      	orrs	r3, r2
 8019060:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019062:	4b09      	ldr	r3, [pc, #36]	; (8019088 <HAL_RTC_Init+0xec>)
 8019064:	22ff      	movs	r2, #255	; 0xff
 8019066:	625a      	str	r2, [r3, #36]	; 0x24
 8019068:	e001      	b.n	801906e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 801906a:	2300      	movs	r3, #0
 801906c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801906e:	7bfb      	ldrb	r3, [r7, #15]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d103      	bne.n	801907c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	2201      	movs	r2, #1
 8019078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 801907c:	7bfb      	ldrb	r3, [r7, #15]
}
 801907e:	4618      	mov	r0, r3
 8019080:	3710      	adds	r7, #16
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}
 8019086:	bf00      	nop
 8019088:	40002800 	.word	0x40002800

0801908c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b084      	sub	sp, #16
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8019094:	4b0d      	ldr	r3, [pc, #52]	; (80190cc <HAL_RTC_WaitForSynchro+0x40>)
 8019096:	4a0e      	ldr	r2, [pc, #56]	; (80190d0 <HAL_RTC_WaitForSynchro+0x44>)
 8019098:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801909a:	f7fb f869 	bl	8014170 <HAL_GetTick>
 801909e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80190a0:	e009      	b.n	80190b6 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80190a2:	f7fb f865 	bl	8014170 <HAL_GetTick>
 80190a6:	4602      	mov	r2, r0
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	1ad3      	subs	r3, r2, r3
 80190ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80190b0:	d901      	bls.n	80190b6 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80190b2:	2303      	movs	r3, #3
 80190b4:	e006      	b.n	80190c4 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80190b6:	4b05      	ldr	r3, [pc, #20]	; (80190cc <HAL_RTC_WaitForSynchro+0x40>)
 80190b8:	68db      	ldr	r3, [r3, #12]
 80190ba:	f003 0320 	and.w	r3, r3, #32
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d0ef      	beq.n	80190a2 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80190c2:	2300      	movs	r3, #0
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	3710      	adds	r7, #16
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}
 80190cc:	40002800 	.word	0x40002800
 80190d0:	0001005c 	.word	0x0001005c

080190d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80190dc:	2300      	movs	r3, #0
 80190de:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80190e0:	4b15      	ldr	r3, [pc, #84]	; (8019138 <RTC_EnterInitMode+0x64>)
 80190e2:	68db      	ldr	r3, [r3, #12]
 80190e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d120      	bne.n	801912e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80190ec:	4b12      	ldr	r3, [pc, #72]	; (8019138 <RTC_EnterInitMode+0x64>)
 80190ee:	68db      	ldr	r3, [r3, #12]
 80190f0:	4a11      	ldr	r2, [pc, #68]	; (8019138 <RTC_EnterInitMode+0x64>)
 80190f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190f6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80190f8:	f7fb f83a 	bl	8014170 <HAL_GetTick>
 80190fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80190fe:	e00d      	b.n	801911c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8019100:	f7fb f836 	bl	8014170 <HAL_GetTick>
 8019104:	4602      	mov	r2, r0
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	1ad3      	subs	r3, r2, r3
 801910a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801910e:	d905      	bls.n	801911c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8019110:	2303      	movs	r3, #3
 8019112:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2203      	movs	r2, #3
 8019118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801911c:	4b06      	ldr	r3, [pc, #24]	; (8019138 <RTC_EnterInitMode+0x64>)
 801911e:	68db      	ldr	r3, [r3, #12]
 8019120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019124:	2b00      	cmp	r3, #0
 8019126:	d102      	bne.n	801912e <RTC_EnterInitMode+0x5a>
 8019128:	7bfb      	ldrb	r3, [r7, #15]
 801912a:	2b03      	cmp	r3, #3
 801912c:	d1e8      	bne.n	8019100 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 801912e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019130:	4618      	mov	r0, r3
 8019132:	3710      	adds	r7, #16
 8019134:	46bd      	mov	sp, r7
 8019136:	bd80      	pop	{r7, pc}
 8019138:	40002800 	.word	0x40002800

0801913c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b084      	sub	sp, #16
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019144:	2300      	movs	r3, #0
 8019146:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8019148:	4b1a      	ldr	r3, [pc, #104]	; (80191b4 <RTC_ExitInitMode+0x78>)
 801914a:	68db      	ldr	r3, [r3, #12]
 801914c:	4a19      	ldr	r2, [pc, #100]	; (80191b4 <RTC_ExitInitMode+0x78>)
 801914e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019152:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8019154:	4b17      	ldr	r3, [pc, #92]	; (80191b4 <RTC_ExitInitMode+0x78>)
 8019156:	699b      	ldr	r3, [r3, #24]
 8019158:	f003 0320 	and.w	r3, r3, #32
 801915c:	2b00      	cmp	r3, #0
 801915e:	d10c      	bne.n	801917a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8019160:	6878      	ldr	r0, [r7, #4]
 8019162:	f7ff ff93 	bl	801908c <HAL_RTC_WaitForSynchro>
 8019166:	4603      	mov	r3, r0
 8019168:	2b00      	cmp	r3, #0
 801916a:	d01e      	beq.n	80191aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	2203      	movs	r2, #3
 8019170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8019174:	2303      	movs	r3, #3
 8019176:	73fb      	strb	r3, [r7, #15]
 8019178:	e017      	b.n	80191aa <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801917a:	4b0e      	ldr	r3, [pc, #56]	; (80191b4 <RTC_ExitInitMode+0x78>)
 801917c:	699b      	ldr	r3, [r3, #24]
 801917e:	4a0d      	ldr	r2, [pc, #52]	; (80191b4 <RTC_ExitInitMode+0x78>)
 8019180:	f023 0320 	bic.w	r3, r3, #32
 8019184:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8019186:	6878      	ldr	r0, [r7, #4]
 8019188:	f7ff ff80 	bl	801908c <HAL_RTC_WaitForSynchro>
 801918c:	4603      	mov	r3, r0
 801918e:	2b00      	cmp	r3, #0
 8019190:	d005      	beq.n	801919e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	2203      	movs	r2, #3
 8019196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 801919a:	2303      	movs	r3, #3
 801919c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801919e:	4b05      	ldr	r3, [pc, #20]	; (80191b4 <RTC_ExitInitMode+0x78>)
 80191a0:	699b      	ldr	r3, [r3, #24]
 80191a2:	4a04      	ldr	r2, [pc, #16]	; (80191b4 <RTC_ExitInitMode+0x78>)
 80191a4:	f043 0320 	orr.w	r3, r3, #32
 80191a8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80191aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80191ac:	4618      	mov	r0, r3
 80191ae:	3710      	adds	r7, #16
 80191b0:	46bd      	mov	sp, r7
 80191b2:	bd80      	pop	{r7, pc}
 80191b4:	40002800 	.word	0x40002800

080191b8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80191b8:	b480      	push	{r7}
 80191ba:	b083      	sub	sp, #12
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	681a      	ldr	r2, [r3, #0]
 80191c6:	683b      	ldr	r3, [r7, #0]
 80191c8:	685b      	ldr	r3, [r3, #4]
 80191ca:	490f      	ldr	r1, [pc, #60]	; (8019208 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80191cc:	4313      	orrs	r3, r2
 80191ce:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80191d0:	683b      	ldr	r3, [r7, #0]
 80191d2:	689a      	ldr	r2, [r3, #8]
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	68db      	ldr	r3, [r3, #12]
 80191d8:	490c      	ldr	r1, [pc, #48]	; (801920c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80191da:	4313      	orrs	r3, r2
 80191dc:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80191de:	4b0b      	ldr	r3, [pc, #44]	; (801920c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80191e0:	6a1b      	ldr	r3, [r3, #32]
 80191e2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	6919      	ldr	r1, [r3, #16]
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	695b      	ldr	r3, [r3, #20]
 80191ee:	041b      	lsls	r3, r3, #16
 80191f0:	430b      	orrs	r3, r1
 80191f2:	4906      	ldr	r1, [pc, #24]	; (801920c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80191f4:	4313      	orrs	r3, r2
 80191f6:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80191f8:	2300      	movs	r3, #0
}
 80191fa:	4618      	mov	r0, r3
 80191fc:	370c      	adds	r7, #12
 80191fe:	46bd      	mov	sp, r7
 8019200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019204:	4770      	bx	lr
 8019206:	bf00      	nop
 8019208:	40002800 	.word	0x40002800
 801920c:	40003400 	.word	0x40003400

08019210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b084      	sub	sp, #16
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d101      	bne.n	8019222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801921e:	2301      	movs	r3, #1
 8019220:	e095      	b.n	801934e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019226:	2b00      	cmp	r3, #0
 8019228:	d108      	bne.n	801923c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	685b      	ldr	r3, [r3, #4]
 801922e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019232:	d009      	beq.n	8019248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	2200      	movs	r2, #0
 8019238:	61da      	str	r2, [r3, #28]
 801923a:	e005      	b.n	8019248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	2200      	movs	r2, #0
 8019240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	2200      	movs	r2, #0
 8019246:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	2200      	movs	r2, #0
 801924c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019254:	b2db      	uxtb	r3, r3
 8019256:	2b00      	cmp	r3, #0
 8019258:	d106      	bne.n	8019268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	2200      	movs	r2, #0
 801925e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019262:	6878      	ldr	r0, [r7, #4]
 8019264:	f7fa fa30 	bl	80136c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	2202      	movs	r2, #2
 801926c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	681a      	ldr	r2, [r3, #0]
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801927e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	68db      	ldr	r3, [r3, #12]
 8019284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019288:	d902      	bls.n	8019290 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801928a:	2300      	movs	r3, #0
 801928c:	60fb      	str	r3, [r7, #12]
 801928e:	e002      	b.n	8019296 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8019290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019294:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	68db      	ldr	r3, [r3, #12]
 801929a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801929e:	d007      	beq.n	80192b0 <HAL_SPI_Init+0xa0>
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	68db      	ldr	r3, [r3, #12]
 80192a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80192a8:	d002      	beq.n	80192b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	2200      	movs	r2, #0
 80192ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	685b      	ldr	r3, [r3, #4]
 80192b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	689b      	ldr	r3, [r3, #8]
 80192bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80192c0:	431a      	orrs	r2, r3
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	691b      	ldr	r3, [r3, #16]
 80192c6:	f003 0302 	and.w	r3, r3, #2
 80192ca:	431a      	orrs	r2, r3
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	695b      	ldr	r3, [r3, #20]
 80192d0:	f003 0301 	and.w	r3, r3, #1
 80192d4:	431a      	orrs	r2, r3
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	699b      	ldr	r3, [r3, #24]
 80192da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80192de:	431a      	orrs	r2, r3
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	69db      	ldr	r3, [r3, #28]
 80192e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80192e8:	431a      	orrs	r2, r3
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	6a1b      	ldr	r3, [r3, #32]
 80192ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80192f2:	ea42 0103 	orr.w	r1, r2, r3
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	430a      	orrs	r2, r1
 8019304:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	699b      	ldr	r3, [r3, #24]
 801930a:	0c1b      	lsrs	r3, r3, #16
 801930c:	f003 0204 	and.w	r2, r3, #4
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019314:	f003 0310 	and.w	r3, r3, #16
 8019318:	431a      	orrs	r2, r3
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801931e:	f003 0308 	and.w	r3, r3, #8
 8019322:	431a      	orrs	r2, r3
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	68db      	ldr	r3, [r3, #12]
 8019328:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801932c:	ea42 0103 	orr.w	r1, r2, r3
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	430a      	orrs	r2, r1
 801933c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	2200      	movs	r2, #0
 8019342:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2201      	movs	r2, #1
 8019348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801934c:	2300      	movs	r3, #0
}
 801934e:	4618      	mov	r0, r3
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}

08019356 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019356:	b580      	push	{r7, lr}
 8019358:	b088      	sub	sp, #32
 801935a:	af00      	add	r7, sp, #0
 801935c:	60f8      	str	r0, [r7, #12]
 801935e:	60b9      	str	r1, [r7, #8]
 8019360:	603b      	str	r3, [r7, #0]
 8019362:	4613      	mov	r3, r2
 8019364:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019366:	2300      	movs	r3, #0
 8019368:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8019370:	2b01      	cmp	r3, #1
 8019372:	d101      	bne.n	8019378 <HAL_SPI_Transmit+0x22>
 8019374:	2302      	movs	r3, #2
 8019376:	e158      	b.n	801962a <HAL_SPI_Transmit+0x2d4>
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	2201      	movs	r2, #1
 801937c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019380:	f7fa fef6 	bl	8014170 <HAL_GetTick>
 8019384:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8019386:	88fb      	ldrh	r3, [r7, #6]
 8019388:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019390:	b2db      	uxtb	r3, r3
 8019392:	2b01      	cmp	r3, #1
 8019394:	d002      	beq.n	801939c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8019396:	2302      	movs	r3, #2
 8019398:	77fb      	strb	r3, [r7, #31]
    goto error;
 801939a:	e13d      	b.n	8019618 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d002      	beq.n	80193a8 <HAL_SPI_Transmit+0x52>
 80193a2:	88fb      	ldrh	r3, [r7, #6]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d102      	bne.n	80193ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80193a8:	2301      	movs	r3, #1
 80193aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80193ac:	e134      	b.n	8019618 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	2203      	movs	r2, #3
 80193b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	2200      	movs	r2, #0
 80193ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	68ba      	ldr	r2, [r7, #8]
 80193c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	88fa      	ldrh	r2, [r7, #6]
 80193c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	88fa      	ldrh	r2, [r7, #6]
 80193cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	2200      	movs	r2, #0
 80193d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	2200      	movs	r2, #0
 80193d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	2200      	movs	r2, #0
 80193e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	2200      	movs	r2, #0
 80193e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	2200      	movs	r2, #0
 80193ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	689b      	ldr	r3, [r3, #8]
 80193f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80193f8:	d10f      	bne.n	801941a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	681a      	ldr	r2, [r3, #0]
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	681a      	ldr	r2, [r3, #0]
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019424:	2b40      	cmp	r3, #64	; 0x40
 8019426:	d007      	beq.n	8019438 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	681a      	ldr	r2, [r3, #0]
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	68db      	ldr	r3, [r3, #12]
 801943c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019440:	d94b      	bls.n	80194da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	685b      	ldr	r3, [r3, #4]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d002      	beq.n	8019450 <HAL_SPI_Transmit+0xfa>
 801944a:	8afb      	ldrh	r3, [r7, #22]
 801944c:	2b01      	cmp	r3, #1
 801944e:	d13e      	bne.n	80194ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019454:	881a      	ldrh	r2, [r3, #0]
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019460:	1c9a      	adds	r2, r3, #2
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801946a:	b29b      	uxth	r3, r3
 801946c:	3b01      	subs	r3, #1
 801946e:	b29a      	uxth	r2, r3
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8019474:	e02b      	b.n	80194ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	689b      	ldr	r3, [r3, #8]
 801947c:	f003 0302 	and.w	r3, r3, #2
 8019480:	2b02      	cmp	r3, #2
 8019482:	d112      	bne.n	80194aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019488:	881a      	ldrh	r2, [r3, #0]
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019494:	1c9a      	adds	r2, r3, #2
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801949e:	b29b      	uxth	r3, r3
 80194a0:	3b01      	subs	r3, #1
 80194a2:	b29a      	uxth	r2, r3
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80194a8:	e011      	b.n	80194ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80194aa:	f7fa fe61 	bl	8014170 <HAL_GetTick>
 80194ae:	4602      	mov	r2, r0
 80194b0:	69bb      	ldr	r3, [r7, #24]
 80194b2:	1ad3      	subs	r3, r2, r3
 80194b4:	683a      	ldr	r2, [r7, #0]
 80194b6:	429a      	cmp	r2, r3
 80194b8:	d803      	bhi.n	80194c2 <HAL_SPI_Transmit+0x16c>
 80194ba:	683b      	ldr	r3, [r7, #0]
 80194bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194c0:	d102      	bne.n	80194c8 <HAL_SPI_Transmit+0x172>
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d102      	bne.n	80194ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80194c8:	2303      	movs	r3, #3
 80194ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80194cc:	e0a4      	b.n	8019618 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80194d2:	b29b      	uxth	r3, r3
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d1ce      	bne.n	8019476 <HAL_SPI_Transmit+0x120>
 80194d8:	e07c      	b.n	80195d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	685b      	ldr	r3, [r3, #4]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d002      	beq.n	80194e8 <HAL_SPI_Transmit+0x192>
 80194e2:	8afb      	ldrh	r3, [r7, #22]
 80194e4:	2b01      	cmp	r3, #1
 80194e6:	d170      	bne.n	80195ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80194ec:	b29b      	uxth	r3, r3
 80194ee:	2b01      	cmp	r3, #1
 80194f0:	d912      	bls.n	8019518 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194f6:	881a      	ldrh	r2, [r3, #0]
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019502:	1c9a      	adds	r2, r3, #2
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801950c:	b29b      	uxth	r3, r3
 801950e:	3b02      	subs	r3, #2
 8019510:	b29a      	uxth	r2, r3
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019516:	e058      	b.n	80195ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	330c      	adds	r3, #12
 8019522:	7812      	ldrb	r2, [r2, #0]
 8019524:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801952a:	1c5a      	adds	r2, r3, #1
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019534:	b29b      	uxth	r3, r3
 8019536:	3b01      	subs	r3, #1
 8019538:	b29a      	uxth	r2, r3
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801953e:	e044      	b.n	80195ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	689b      	ldr	r3, [r3, #8]
 8019546:	f003 0302 	and.w	r3, r3, #2
 801954a:	2b02      	cmp	r3, #2
 801954c:	d12b      	bne.n	80195a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019552:	b29b      	uxth	r3, r3
 8019554:	2b01      	cmp	r3, #1
 8019556:	d912      	bls.n	801957e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801955c:	881a      	ldrh	r2, [r3, #0]
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019568:	1c9a      	adds	r2, r3, #2
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019572:	b29b      	uxth	r3, r3
 8019574:	3b02      	subs	r3, #2
 8019576:	b29a      	uxth	r2, r3
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801957c:	e025      	b.n	80195ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	330c      	adds	r3, #12
 8019588:	7812      	ldrb	r2, [r2, #0]
 801958a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019590:	1c5a      	adds	r2, r3, #1
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801959a:	b29b      	uxth	r3, r3
 801959c:	3b01      	subs	r3, #1
 801959e:	b29a      	uxth	r2, r3
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80195a4:	e011      	b.n	80195ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80195a6:	f7fa fde3 	bl	8014170 <HAL_GetTick>
 80195aa:	4602      	mov	r2, r0
 80195ac:	69bb      	ldr	r3, [r7, #24]
 80195ae:	1ad3      	subs	r3, r2, r3
 80195b0:	683a      	ldr	r2, [r7, #0]
 80195b2:	429a      	cmp	r2, r3
 80195b4:	d803      	bhi.n	80195be <HAL_SPI_Transmit+0x268>
 80195b6:	683b      	ldr	r3, [r7, #0]
 80195b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195bc:	d102      	bne.n	80195c4 <HAL_SPI_Transmit+0x26e>
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d102      	bne.n	80195ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80195c4:	2303      	movs	r3, #3
 80195c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80195c8:	e026      	b.n	8019618 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d1b5      	bne.n	8019540 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80195d4:	69ba      	ldr	r2, [r7, #24]
 80195d6:	6839      	ldr	r1, [r7, #0]
 80195d8:	68f8      	ldr	r0, [r7, #12]
 80195da:	f000 fce3 	bl	8019fa4 <SPI_EndRxTxTransaction>
 80195de:	4603      	mov	r3, r0
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d002      	beq.n	80195ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	2220      	movs	r2, #32
 80195e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	689b      	ldr	r3, [r3, #8]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d10a      	bne.n	8019608 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80195f2:	2300      	movs	r3, #0
 80195f4:	613b      	str	r3, [r7, #16]
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	68db      	ldr	r3, [r3, #12]
 80195fc:	613b      	str	r3, [r7, #16]
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	689b      	ldr	r3, [r3, #8]
 8019604:	613b      	str	r3, [r7, #16]
 8019606:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801960c:	2b00      	cmp	r3, #0
 801960e:	d002      	beq.n	8019616 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8019610:	2301      	movs	r3, #1
 8019612:	77fb      	strb	r3, [r7, #31]
 8019614:	e000      	b.n	8019618 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8019616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	2201      	movs	r2, #1
 801961c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	2200      	movs	r2, #0
 8019624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8019628:	7ffb      	ldrb	r3, [r7, #31]
}
 801962a:	4618      	mov	r0, r3
 801962c:	3720      	adds	r7, #32
 801962e:	46bd      	mov	sp, r7
 8019630:	bd80      	pop	{r7, pc}

08019632 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019632:	b580      	push	{r7, lr}
 8019634:	b088      	sub	sp, #32
 8019636:	af02      	add	r7, sp, #8
 8019638:	60f8      	str	r0, [r7, #12]
 801963a:	60b9      	str	r1, [r7, #8]
 801963c:	603b      	str	r3, [r7, #0]
 801963e:	4613      	mov	r3, r2
 8019640:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019642:	2300      	movs	r3, #0
 8019644:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	685b      	ldr	r3, [r3, #4]
 801964a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801964e:	d112      	bne.n	8019676 <HAL_SPI_Receive+0x44>
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	689b      	ldr	r3, [r3, #8]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d10e      	bne.n	8019676 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	2204      	movs	r2, #4
 801965c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8019660:	88fa      	ldrh	r2, [r7, #6]
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	9300      	str	r3, [sp, #0]
 8019666:	4613      	mov	r3, r2
 8019668:	68ba      	ldr	r2, [r7, #8]
 801966a:	68b9      	ldr	r1, [r7, #8]
 801966c:	68f8      	ldr	r0, [r7, #12]
 801966e:	f000 f910 	bl	8019892 <HAL_SPI_TransmitReceive>
 8019672:	4603      	mov	r3, r0
 8019674:	e109      	b.n	801988a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801967c:	2b01      	cmp	r3, #1
 801967e:	d101      	bne.n	8019684 <HAL_SPI_Receive+0x52>
 8019680:	2302      	movs	r3, #2
 8019682:	e102      	b.n	801988a <HAL_SPI_Receive+0x258>
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2201      	movs	r2, #1
 8019688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801968c:	f7fa fd70 	bl	8014170 <HAL_GetTick>
 8019690:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019698:	b2db      	uxtb	r3, r3
 801969a:	2b01      	cmp	r3, #1
 801969c:	d002      	beq.n	80196a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801969e:	2302      	movs	r3, #2
 80196a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80196a2:	e0e9      	b.n	8019878 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80196a4:	68bb      	ldr	r3, [r7, #8]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d002      	beq.n	80196b0 <HAL_SPI_Receive+0x7e>
 80196aa:	88fb      	ldrh	r3, [r7, #6]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d102      	bne.n	80196b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80196b0:	2301      	movs	r3, #1
 80196b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80196b4:	e0e0      	b.n	8019878 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	2204      	movs	r2, #4
 80196ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	2200      	movs	r2, #0
 80196c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	68ba      	ldr	r2, [r7, #8]
 80196c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	88fa      	ldrh	r2, [r7, #6]
 80196ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	88fa      	ldrh	r2, [r7, #6]
 80196d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	2200      	movs	r2, #0
 80196de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	2200      	movs	r2, #0
 80196e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	2200      	movs	r2, #0
 80196ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	2200      	movs	r2, #0
 80196f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	2200      	movs	r2, #0
 80196f6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	68db      	ldr	r3, [r3, #12]
 80196fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019700:	d908      	bls.n	8019714 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	685a      	ldr	r2, [r3, #4]
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019710:	605a      	str	r2, [r3, #4]
 8019712:	e007      	b.n	8019724 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	685a      	ldr	r2, [r3, #4]
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019722:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	689b      	ldr	r3, [r3, #8]
 8019728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801972c:	d10f      	bne.n	801974e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	681a      	ldr	r2, [r3, #0]
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801973c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	681a      	ldr	r2, [r3, #0]
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801974c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019758:	2b40      	cmp	r3, #64	; 0x40
 801975a:	d007      	beq.n	801976c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	681a      	ldr	r2, [r3, #0]
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801976a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	68db      	ldr	r3, [r3, #12]
 8019770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019774:	d867      	bhi.n	8019846 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8019776:	e030      	b.n	80197da <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	689b      	ldr	r3, [r3, #8]
 801977e:	f003 0301 	and.w	r3, r3, #1
 8019782:	2b01      	cmp	r3, #1
 8019784:	d117      	bne.n	80197b6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	f103 020c 	add.w	r2, r3, #12
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019792:	7812      	ldrb	r2, [r2, #0]
 8019794:	b2d2      	uxtb	r2, r2
 8019796:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801979c:	1c5a      	adds	r2, r3, #1
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80197a8:	b29b      	uxth	r3, r3
 80197aa:	3b01      	subs	r3, #1
 80197ac:	b29a      	uxth	r2, r3
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80197b4:	e011      	b.n	80197da <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80197b6:	f7fa fcdb 	bl	8014170 <HAL_GetTick>
 80197ba:	4602      	mov	r2, r0
 80197bc:	693b      	ldr	r3, [r7, #16]
 80197be:	1ad3      	subs	r3, r2, r3
 80197c0:	683a      	ldr	r2, [r7, #0]
 80197c2:	429a      	cmp	r2, r3
 80197c4:	d803      	bhi.n	80197ce <HAL_SPI_Receive+0x19c>
 80197c6:	683b      	ldr	r3, [r7, #0]
 80197c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197cc:	d102      	bne.n	80197d4 <HAL_SPI_Receive+0x1a2>
 80197ce:	683b      	ldr	r3, [r7, #0]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d102      	bne.n	80197da <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80197d4:	2303      	movs	r3, #3
 80197d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80197d8:	e04e      	b.n	8019878 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80197e0:	b29b      	uxth	r3, r3
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d1c8      	bne.n	8019778 <HAL_SPI_Receive+0x146>
 80197e6:	e034      	b.n	8019852 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	689b      	ldr	r3, [r3, #8]
 80197ee:	f003 0301 	and.w	r3, r3, #1
 80197f2:	2b01      	cmp	r3, #1
 80197f4:	d115      	bne.n	8019822 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	68da      	ldr	r2, [r3, #12]
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019800:	b292      	uxth	r2, r2
 8019802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019808:	1c9a      	adds	r2, r3, #2
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019814:	b29b      	uxth	r3, r3
 8019816:	3b01      	subs	r3, #1
 8019818:	b29a      	uxth	r2, r3
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8019820:	e011      	b.n	8019846 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019822:	f7fa fca5 	bl	8014170 <HAL_GetTick>
 8019826:	4602      	mov	r2, r0
 8019828:	693b      	ldr	r3, [r7, #16]
 801982a:	1ad3      	subs	r3, r2, r3
 801982c:	683a      	ldr	r2, [r7, #0]
 801982e:	429a      	cmp	r2, r3
 8019830:	d803      	bhi.n	801983a <HAL_SPI_Receive+0x208>
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019838:	d102      	bne.n	8019840 <HAL_SPI_Receive+0x20e>
 801983a:	683b      	ldr	r3, [r7, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d102      	bne.n	8019846 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8019840:	2303      	movs	r3, #3
 8019842:	75fb      	strb	r3, [r7, #23]
          goto error;
 8019844:	e018      	b.n	8019878 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801984c:	b29b      	uxth	r3, r3
 801984e:	2b00      	cmp	r3, #0
 8019850:	d1ca      	bne.n	80197e8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019852:	693a      	ldr	r2, [r7, #16]
 8019854:	6839      	ldr	r1, [r7, #0]
 8019856:	68f8      	ldr	r0, [r7, #12]
 8019858:	f000 fb4c 	bl	8019ef4 <SPI_EndRxTransaction>
 801985c:	4603      	mov	r3, r0
 801985e:	2b00      	cmp	r3, #0
 8019860:	d002      	beq.n	8019868 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	2220      	movs	r2, #32
 8019866:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801986c:	2b00      	cmp	r3, #0
 801986e:	d002      	beq.n	8019876 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8019870:	2301      	movs	r3, #1
 8019872:	75fb      	strb	r3, [r7, #23]
 8019874:	e000      	b.n	8019878 <HAL_SPI_Receive+0x246>
  }

error :
 8019876:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2201      	movs	r2, #1
 801987c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	2200      	movs	r2, #0
 8019884:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8019888:	7dfb      	ldrb	r3, [r7, #23]
}
 801988a:	4618      	mov	r0, r3
 801988c:	3718      	adds	r7, #24
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}

08019892 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8019892:	b580      	push	{r7, lr}
 8019894:	b08a      	sub	sp, #40	; 0x28
 8019896:	af00      	add	r7, sp, #0
 8019898:	60f8      	str	r0, [r7, #12]
 801989a:	60b9      	str	r1, [r7, #8]
 801989c:	607a      	str	r2, [r7, #4]
 801989e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80198a0:	2301      	movs	r3, #1
 80198a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80198a4:	2300      	movs	r3, #0
 80198a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80198b0:	2b01      	cmp	r3, #1
 80198b2:	d101      	bne.n	80198b8 <HAL_SPI_TransmitReceive+0x26>
 80198b4:	2302      	movs	r3, #2
 80198b6:	e1fb      	b.n	8019cb0 <HAL_SPI_TransmitReceive+0x41e>
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	2201      	movs	r2, #1
 80198bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80198c0:	f7fa fc56 	bl	8014170 <HAL_GetTick>
 80198c4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80198cc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	685b      	ldr	r3, [r3, #4]
 80198d2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80198d4:	887b      	ldrh	r3, [r7, #2]
 80198d6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80198d8:	887b      	ldrh	r3, [r7, #2]
 80198da:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80198dc:	7efb      	ldrb	r3, [r7, #27]
 80198de:	2b01      	cmp	r3, #1
 80198e0:	d00e      	beq.n	8019900 <HAL_SPI_TransmitReceive+0x6e>
 80198e2:	697b      	ldr	r3, [r7, #20]
 80198e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80198e8:	d106      	bne.n	80198f8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	689b      	ldr	r3, [r3, #8]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d102      	bne.n	80198f8 <HAL_SPI_TransmitReceive+0x66>
 80198f2:	7efb      	ldrb	r3, [r7, #27]
 80198f4:	2b04      	cmp	r3, #4
 80198f6:	d003      	beq.n	8019900 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80198f8:	2302      	movs	r3, #2
 80198fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80198fe:	e1cd      	b.n	8019c9c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8019900:	68bb      	ldr	r3, [r7, #8]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d005      	beq.n	8019912 <HAL_SPI_TransmitReceive+0x80>
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d002      	beq.n	8019912 <HAL_SPI_TransmitReceive+0x80>
 801990c:	887b      	ldrh	r3, [r7, #2]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d103      	bne.n	801991a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8019912:	2301      	movs	r3, #1
 8019914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8019918:	e1c0      	b.n	8019c9c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019920:	b2db      	uxtb	r3, r3
 8019922:	2b04      	cmp	r3, #4
 8019924:	d003      	beq.n	801992e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	2205      	movs	r2, #5
 801992a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	2200      	movs	r2, #0
 8019932:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	687a      	ldr	r2, [r7, #4]
 8019938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	887a      	ldrh	r2, [r7, #2]
 801993e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	887a      	ldrh	r2, [r7, #2]
 8019946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	68ba      	ldr	r2, [r7, #8]
 801994e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	887a      	ldrh	r2, [r7, #2]
 8019954:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	887a      	ldrh	r2, [r7, #2]
 801995a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	2200      	movs	r2, #0
 8019960:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	2200      	movs	r2, #0
 8019966:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	68db      	ldr	r3, [r3, #12]
 801996c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019970:	d802      	bhi.n	8019978 <HAL_SPI_TransmitReceive+0xe6>
 8019972:	8a3b      	ldrh	r3, [r7, #16]
 8019974:	2b01      	cmp	r3, #1
 8019976:	d908      	bls.n	801998a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	685a      	ldr	r2, [r3, #4]
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019986:	605a      	str	r2, [r3, #4]
 8019988:	e007      	b.n	801999a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	685a      	ldr	r2, [r3, #4]
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019998:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80199a4:	2b40      	cmp	r3, #64	; 0x40
 80199a6:	d007      	beq.n	80199b8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	681a      	ldr	r2, [r3, #0]
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80199b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	68db      	ldr	r3, [r3, #12]
 80199bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80199c0:	d97c      	bls.n	8019abc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	685b      	ldr	r3, [r3, #4]
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d002      	beq.n	80199d0 <HAL_SPI_TransmitReceive+0x13e>
 80199ca:	8a7b      	ldrh	r3, [r7, #18]
 80199cc:	2b01      	cmp	r3, #1
 80199ce:	d169      	bne.n	8019aa4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80199d4:	881a      	ldrh	r2, [r3, #0]
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80199e0:	1c9a      	adds	r2, r3, #2
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80199ea:	b29b      	uxth	r3, r3
 80199ec:	3b01      	subs	r3, #1
 80199ee:	b29a      	uxth	r2, r3
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80199f4:	e056      	b.n	8019aa4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	689b      	ldr	r3, [r3, #8]
 80199fc:	f003 0302 	and.w	r3, r3, #2
 8019a00:	2b02      	cmp	r3, #2
 8019a02:	d11b      	bne.n	8019a3c <HAL_SPI_TransmitReceive+0x1aa>
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d016      	beq.n	8019a3c <HAL_SPI_TransmitReceive+0x1aa>
 8019a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a10:	2b01      	cmp	r3, #1
 8019a12:	d113      	bne.n	8019a3c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a18:	881a      	ldrh	r2, [r3, #0]
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a24:	1c9a      	adds	r2, r3, #2
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019a2e:	b29b      	uxth	r3, r3
 8019a30:	3b01      	subs	r3, #1
 8019a32:	b29a      	uxth	r2, r3
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	689b      	ldr	r3, [r3, #8]
 8019a42:	f003 0301 	and.w	r3, r3, #1
 8019a46:	2b01      	cmp	r3, #1
 8019a48:	d11c      	bne.n	8019a84 <HAL_SPI_TransmitReceive+0x1f2>
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019a50:	b29b      	uxth	r3, r3
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d016      	beq.n	8019a84 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	68da      	ldr	r2, [r3, #12]
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a60:	b292      	uxth	r2, r2
 8019a62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a68:	1c9a      	adds	r2, r3, #2
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019a74:	b29b      	uxth	r3, r3
 8019a76:	3b01      	subs	r3, #1
 8019a78:	b29a      	uxth	r2, r3
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8019a80:	2301      	movs	r3, #1
 8019a82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8019a84:	f7fa fb74 	bl	8014170 <HAL_GetTick>
 8019a88:	4602      	mov	r2, r0
 8019a8a:	69fb      	ldr	r3, [r7, #28]
 8019a8c:	1ad3      	subs	r3, r2, r3
 8019a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d807      	bhi.n	8019aa4 <HAL_SPI_TransmitReceive+0x212>
 8019a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a9a:	d003      	beq.n	8019aa4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8019a9c:	2303      	movs	r3, #3
 8019a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8019aa2:	e0fb      	b.n	8019c9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019aa8:	b29b      	uxth	r3, r3
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d1a3      	bne.n	80199f6 <HAL_SPI_TransmitReceive+0x164>
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019ab4:	b29b      	uxth	r3, r3
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d19d      	bne.n	80199f6 <HAL_SPI_TransmitReceive+0x164>
 8019aba:	e0df      	b.n	8019c7c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	685b      	ldr	r3, [r3, #4]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d003      	beq.n	8019acc <HAL_SPI_TransmitReceive+0x23a>
 8019ac4:	8a7b      	ldrh	r3, [r7, #18]
 8019ac6:	2b01      	cmp	r3, #1
 8019ac8:	f040 80cb 	bne.w	8019c62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ad0:	b29b      	uxth	r3, r3
 8019ad2:	2b01      	cmp	r3, #1
 8019ad4:	d912      	bls.n	8019afc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ada:	881a      	ldrh	r2, [r3, #0]
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ae6:	1c9a      	adds	r2, r3, #2
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019af0:	b29b      	uxth	r3, r3
 8019af2:	3b02      	subs	r3, #2
 8019af4:	b29a      	uxth	r2, r3
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019afa:	e0b2      	b.n	8019c62 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	330c      	adds	r3, #12
 8019b06:	7812      	ldrb	r2, [r2, #0]
 8019b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b0e:	1c5a      	adds	r2, r3, #1
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019b18:	b29b      	uxth	r3, r3
 8019b1a:	3b01      	subs	r3, #1
 8019b1c:	b29a      	uxth	r2, r3
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019b22:	e09e      	b.n	8019c62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	689b      	ldr	r3, [r3, #8]
 8019b2a:	f003 0302 	and.w	r3, r3, #2
 8019b2e:	2b02      	cmp	r3, #2
 8019b30:	d134      	bne.n	8019b9c <HAL_SPI_TransmitReceive+0x30a>
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019b36:	b29b      	uxth	r3, r3
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d02f      	beq.n	8019b9c <HAL_SPI_TransmitReceive+0x30a>
 8019b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b3e:	2b01      	cmp	r3, #1
 8019b40:	d12c      	bne.n	8019b9c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019b46:	b29b      	uxth	r3, r3
 8019b48:	2b01      	cmp	r3, #1
 8019b4a:	d912      	bls.n	8019b72 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b50:	881a      	ldrh	r2, [r3, #0]
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b5c:	1c9a      	adds	r2, r3, #2
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019b66:	b29b      	uxth	r3, r3
 8019b68:	3b02      	subs	r3, #2
 8019b6a:	b29a      	uxth	r2, r3
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019b70:	e012      	b.n	8019b98 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	330c      	adds	r3, #12
 8019b7c:	7812      	ldrb	r2, [r2, #0]
 8019b7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b84:	1c5a      	adds	r2, r3, #1
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019b8e:	b29b      	uxth	r3, r3
 8019b90:	3b01      	subs	r3, #1
 8019b92:	b29a      	uxth	r2, r3
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	689b      	ldr	r3, [r3, #8]
 8019ba2:	f003 0301 	and.w	r3, r3, #1
 8019ba6:	2b01      	cmp	r3, #1
 8019ba8:	d148      	bne.n	8019c3c <HAL_SPI_TransmitReceive+0x3aa>
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019bb0:	b29b      	uxth	r3, r3
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d042      	beq.n	8019c3c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019bbc:	b29b      	uxth	r3, r3
 8019bbe:	2b01      	cmp	r3, #1
 8019bc0:	d923      	bls.n	8019c0a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	68da      	ldr	r2, [r3, #12]
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bcc:	b292      	uxth	r2, r2
 8019bce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bd4:	1c9a      	adds	r2, r3, #2
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019be0:	b29b      	uxth	r3, r3
 8019be2:	3b02      	subs	r3, #2
 8019be4:	b29a      	uxth	r2, r3
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019bf2:	b29b      	uxth	r3, r3
 8019bf4:	2b01      	cmp	r3, #1
 8019bf6:	d81f      	bhi.n	8019c38 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	685a      	ldr	r2, [r3, #4]
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019c06:	605a      	str	r2, [r3, #4]
 8019c08:	e016      	b.n	8019c38 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	f103 020c 	add.w	r2, r3, #12
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c16:	7812      	ldrb	r2, [r2, #0]
 8019c18:	b2d2      	uxtb	r2, r2
 8019c1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c20:	1c5a      	adds	r2, r3, #1
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019c2c:	b29b      	uxth	r3, r3
 8019c2e:	3b01      	subs	r3, #1
 8019c30:	b29a      	uxth	r2, r3
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8019c38:	2301      	movs	r3, #1
 8019c3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8019c3c:	f7fa fa98 	bl	8014170 <HAL_GetTick>
 8019c40:	4602      	mov	r2, r0
 8019c42:	69fb      	ldr	r3, [r7, #28]
 8019c44:	1ad3      	subs	r3, r2, r3
 8019c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c48:	429a      	cmp	r2, r3
 8019c4a:	d803      	bhi.n	8019c54 <HAL_SPI_TransmitReceive+0x3c2>
 8019c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c52:	d102      	bne.n	8019c5a <HAL_SPI_TransmitReceive+0x3c8>
 8019c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d103      	bne.n	8019c62 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8019c5a:	2303      	movs	r3, #3
 8019c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8019c60:	e01c      	b.n	8019c9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019c66:	b29b      	uxth	r3, r3
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	f47f af5b 	bne.w	8019b24 <HAL_SPI_TransmitReceive+0x292>
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019c74:	b29b      	uxth	r3, r3
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	f47f af54 	bne.w	8019b24 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019c7c:	69fa      	ldr	r2, [r7, #28]
 8019c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019c80:	68f8      	ldr	r0, [r7, #12]
 8019c82:	f000 f98f 	bl	8019fa4 <SPI_EndRxTxTransaction>
 8019c86:	4603      	mov	r3, r0
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d006      	beq.n	8019c9a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8019c8c:	2301      	movs	r3, #1
 8019c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	2220      	movs	r2, #32
 8019c96:	661a      	str	r2, [r3, #96]	; 0x60
 8019c98:	e000      	b.n	8019c9c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8019c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	2201      	movs	r2, #1
 8019ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8019cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	3728      	adds	r7, #40	; 0x28
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	bd80      	pop	{r7, pc}

08019cb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b088      	sub	sp, #32
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	60f8      	str	r0, [r7, #12]
 8019cc0:	60b9      	str	r1, [r7, #8]
 8019cc2:	603b      	str	r3, [r7, #0]
 8019cc4:	4613      	mov	r3, r2
 8019cc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8019cc8:	f7fa fa52 	bl	8014170 <HAL_GetTick>
 8019ccc:	4602      	mov	r2, r0
 8019cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cd0:	1a9b      	subs	r3, r3, r2
 8019cd2:	683a      	ldr	r2, [r7, #0]
 8019cd4:	4413      	add	r3, r2
 8019cd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8019cd8:	f7fa fa4a 	bl	8014170 <HAL_GetTick>
 8019cdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8019cde:	4b39      	ldr	r3, [pc, #228]	; (8019dc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	015b      	lsls	r3, r3, #5
 8019ce4:	0d1b      	lsrs	r3, r3, #20
 8019ce6:	69fa      	ldr	r2, [r7, #28]
 8019ce8:	fb02 f303 	mul.w	r3, r2, r3
 8019cec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8019cee:	e054      	b.n	8019d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8019cf0:	683b      	ldr	r3, [r7, #0]
 8019cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cf6:	d050      	beq.n	8019d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8019cf8:	f7fa fa3a 	bl	8014170 <HAL_GetTick>
 8019cfc:	4602      	mov	r2, r0
 8019cfe:	69bb      	ldr	r3, [r7, #24]
 8019d00:	1ad3      	subs	r3, r2, r3
 8019d02:	69fa      	ldr	r2, [r7, #28]
 8019d04:	429a      	cmp	r2, r3
 8019d06:	d902      	bls.n	8019d0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8019d08:	69fb      	ldr	r3, [r7, #28]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d13d      	bne.n	8019d8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	685a      	ldr	r2, [r3, #4]
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8019d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	685b      	ldr	r3, [r3, #4]
 8019d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019d26:	d111      	bne.n	8019d4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	689b      	ldr	r3, [r3, #8]
 8019d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019d30:	d004      	beq.n	8019d3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	689b      	ldr	r3, [r3, #8]
 8019d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019d3a:	d107      	bne.n	8019d4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	681a      	ldr	r2, [r3, #0]
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019d4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019d54:	d10f      	bne.n	8019d76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	681a      	ldr	r2, [r3, #0]
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8019d64:	601a      	str	r2, [r3, #0]
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	681a      	ldr	r2, [r3, #0]
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8019d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	2201      	movs	r2, #1
 8019d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	2200      	movs	r2, #0
 8019d82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8019d86:	2303      	movs	r3, #3
 8019d88:	e017      	b.n	8019dba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8019d8a:	697b      	ldr	r3, [r7, #20]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d101      	bne.n	8019d94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8019d90:	2300      	movs	r3, #0
 8019d92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8019d94:	697b      	ldr	r3, [r7, #20]
 8019d96:	3b01      	subs	r3, #1
 8019d98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	689a      	ldr	r2, [r3, #8]
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	4013      	ands	r3, r2
 8019da4:	68ba      	ldr	r2, [r7, #8]
 8019da6:	429a      	cmp	r2, r3
 8019da8:	bf0c      	ite	eq
 8019daa:	2301      	moveq	r3, #1
 8019dac:	2300      	movne	r3, #0
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	461a      	mov	r2, r3
 8019db2:	79fb      	ldrb	r3, [r7, #7]
 8019db4:	429a      	cmp	r2, r3
 8019db6:	d19b      	bne.n	8019cf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8019db8:	2300      	movs	r3, #0
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	3720      	adds	r7, #32
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}
 8019dc2:	bf00      	nop
 8019dc4:	20000090 	.word	0x20000090

08019dc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b08a      	sub	sp, #40	; 0x28
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	60f8      	str	r0, [r7, #12]
 8019dd0:	60b9      	str	r1, [r7, #8]
 8019dd2:	607a      	str	r2, [r7, #4]
 8019dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8019dda:	f7fa f9c9 	bl	8014170 <HAL_GetTick>
 8019dde:	4602      	mov	r2, r0
 8019de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019de2:	1a9b      	subs	r3, r3, r2
 8019de4:	683a      	ldr	r2, [r7, #0]
 8019de6:	4413      	add	r3, r2
 8019de8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8019dea:	f7fa f9c1 	bl	8014170 <HAL_GetTick>
 8019dee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	330c      	adds	r3, #12
 8019df6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8019df8:	4b3d      	ldr	r3, [pc, #244]	; (8019ef0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8019dfa:	681a      	ldr	r2, [r3, #0]
 8019dfc:	4613      	mov	r3, r2
 8019dfe:	009b      	lsls	r3, r3, #2
 8019e00:	4413      	add	r3, r2
 8019e02:	00da      	lsls	r2, r3, #3
 8019e04:	1ad3      	subs	r3, r2, r3
 8019e06:	0d1b      	lsrs	r3, r3, #20
 8019e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e0a:	fb02 f303 	mul.w	r3, r2, r3
 8019e0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8019e10:	e060      	b.n	8019ed4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8019e12:	68bb      	ldr	r3, [r7, #8]
 8019e14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8019e18:	d107      	bne.n	8019e2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d104      	bne.n	8019e2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8019e20:	69fb      	ldr	r3, [r7, #28]
 8019e22:	781b      	ldrb	r3, [r3, #0]
 8019e24:	b2db      	uxtb	r3, r3
 8019e26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8019e28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e30:	d050      	beq.n	8019ed4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8019e32:	f7fa f99d 	bl	8014170 <HAL_GetTick>
 8019e36:	4602      	mov	r2, r0
 8019e38:	6a3b      	ldr	r3, [r7, #32]
 8019e3a:	1ad3      	subs	r3, r2, r3
 8019e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e3e:	429a      	cmp	r2, r3
 8019e40:	d902      	bls.n	8019e48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8019e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d13d      	bne.n	8019ec4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	685a      	ldr	r2, [r3, #4]
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8019e56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	685b      	ldr	r3, [r3, #4]
 8019e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019e60:	d111      	bne.n	8019e86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	689b      	ldr	r3, [r3, #8]
 8019e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019e6a:	d004      	beq.n	8019e76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	689b      	ldr	r3, [r3, #8]
 8019e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019e74:	d107      	bne.n	8019e86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	681a      	ldr	r2, [r3, #0]
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019e84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019e8e:	d10f      	bne.n	8019eb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	681a      	ldr	r2, [r3, #0]
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8019e9e:	601a      	str	r2, [r3, #0]
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	681a      	ldr	r2, [r3, #0]
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8019eae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	2201      	movs	r2, #1
 8019eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	2200      	movs	r2, #0
 8019ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8019ec0:	2303      	movs	r3, #3
 8019ec2:	e010      	b.n	8019ee6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8019ec4:	69bb      	ldr	r3, [r7, #24]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d101      	bne.n	8019ece <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8019eca:	2300      	movs	r3, #0
 8019ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8019ece:	69bb      	ldr	r3, [r7, #24]
 8019ed0:	3b01      	subs	r3, #1
 8019ed2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	689a      	ldr	r2, [r3, #8]
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	4013      	ands	r3, r2
 8019ede:	687a      	ldr	r2, [r7, #4]
 8019ee0:	429a      	cmp	r2, r3
 8019ee2:	d196      	bne.n	8019e12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8019ee4:	2300      	movs	r3, #0
}
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	3728      	adds	r7, #40	; 0x28
 8019eea:	46bd      	mov	sp, r7
 8019eec:	bd80      	pop	{r7, pc}
 8019eee:	bf00      	nop
 8019ef0:	20000090 	.word	0x20000090

08019ef4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b086      	sub	sp, #24
 8019ef8:	af02      	add	r7, sp, #8
 8019efa:	60f8      	str	r0, [r7, #12]
 8019efc:	60b9      	str	r1, [r7, #8]
 8019efe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	685b      	ldr	r3, [r3, #4]
 8019f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019f08:	d111      	bne.n	8019f2e <SPI_EndRxTransaction+0x3a>
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	689b      	ldr	r3, [r3, #8]
 8019f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019f12:	d004      	beq.n	8019f1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	689b      	ldr	r3, [r3, #8]
 8019f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f1c:	d107      	bne.n	8019f2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	681a      	ldr	r2, [r3, #0]
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019f2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	9300      	str	r3, [sp, #0]
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	2200      	movs	r2, #0
 8019f36:	2180      	movs	r1, #128	; 0x80
 8019f38:	68f8      	ldr	r0, [r7, #12]
 8019f3a:	f7ff febd 	bl	8019cb8 <SPI_WaitFlagStateUntilTimeout>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d007      	beq.n	8019f54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f48:	f043 0220 	orr.w	r2, r3, #32
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8019f50:	2303      	movs	r3, #3
 8019f52:	e023      	b.n	8019f9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019f5c:	d11d      	bne.n	8019f9a <SPI_EndRxTransaction+0xa6>
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	689b      	ldr	r3, [r3, #8]
 8019f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019f66:	d004      	beq.n	8019f72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	689b      	ldr	r3, [r3, #8]
 8019f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f70:	d113      	bne.n	8019f9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	9300      	str	r3, [sp, #0]
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	2200      	movs	r2, #0
 8019f7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8019f7e:	68f8      	ldr	r0, [r7, #12]
 8019f80:	f7ff ff22 	bl	8019dc8 <SPI_WaitFifoStateUntilTimeout>
 8019f84:	4603      	mov	r3, r0
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d007      	beq.n	8019f9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f8e:	f043 0220 	orr.w	r2, r3, #32
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8019f96:	2303      	movs	r3, #3
 8019f98:	e000      	b.n	8019f9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8019f9a:	2300      	movs	r3, #0
}
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	3710      	adds	r7, #16
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bd80      	pop	{r7, pc}

08019fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8019fa4:	b580      	push	{r7, lr}
 8019fa6:	b086      	sub	sp, #24
 8019fa8:	af02      	add	r7, sp, #8
 8019faa:	60f8      	str	r0, [r7, #12]
 8019fac:	60b9      	str	r1, [r7, #8]
 8019fae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	9300      	str	r3, [sp, #0]
 8019fb4:	68bb      	ldr	r3, [r7, #8]
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8019fbc:	68f8      	ldr	r0, [r7, #12]
 8019fbe:	f7ff ff03 	bl	8019dc8 <SPI_WaitFifoStateUntilTimeout>
 8019fc2:	4603      	mov	r3, r0
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d007      	beq.n	8019fd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019fcc:	f043 0220 	orr.w	r2, r3, #32
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8019fd4:	2303      	movs	r3, #3
 8019fd6:	e027      	b.n	801a028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	9300      	str	r3, [sp, #0]
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	2200      	movs	r2, #0
 8019fe0:	2180      	movs	r1, #128	; 0x80
 8019fe2:	68f8      	ldr	r0, [r7, #12]
 8019fe4:	f7ff fe68 	bl	8019cb8 <SPI_WaitFlagStateUntilTimeout>
 8019fe8:	4603      	mov	r3, r0
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d007      	beq.n	8019ffe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019ff2:	f043 0220 	orr.w	r2, r3, #32
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8019ffa:	2303      	movs	r3, #3
 8019ffc:	e014      	b.n	801a028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	9300      	str	r3, [sp, #0]
 801a002:	68bb      	ldr	r3, [r7, #8]
 801a004:	2200      	movs	r2, #0
 801a006:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801a00a:	68f8      	ldr	r0, [r7, #12]
 801a00c:	f7ff fedc 	bl	8019dc8 <SPI_WaitFifoStateUntilTimeout>
 801a010:	4603      	mov	r3, r0
 801a012:	2b00      	cmp	r3, #0
 801a014:	d007      	beq.n	801a026 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a01a:	f043 0220 	orr.w	r2, r3, #32
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801a022:	2303      	movs	r3, #3
 801a024:	e000      	b.n	801a028 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801a026:	2300      	movs	r3, #0
}
 801a028:	4618      	mov	r0, r3
 801a02a:	3710      	adds	r7, #16
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}

0801a030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b082      	sub	sp, #8
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d101      	bne.n	801a042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a03e:	2301      	movs	r3, #1
 801a040:	e049      	b.n	801a0d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a048:	b2db      	uxtb	r3, r3
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d106      	bne.n	801a05c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	2200      	movs	r2, #0
 801a052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a056:	6878      	ldr	r0, [r7, #4]
 801a058:	f7f9 fc1c 	bl	8013894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2202      	movs	r2, #2
 801a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681a      	ldr	r2, [r3, #0]
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	3304      	adds	r3, #4
 801a06c:	4619      	mov	r1, r3
 801a06e:	4610      	mov	r0, r2
 801a070:	f001 f948 	bl	801b304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	2201      	movs	r2, #1
 801a078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	2201      	movs	r2, #1
 801a080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	2201      	movs	r2, #1
 801a088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	2201      	movs	r2, #1
 801a090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2201      	movs	r2, #1
 801a098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	2201      	movs	r2, #1
 801a0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	2201      	movs	r2, #1
 801a0a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	2201      	movs	r2, #1
 801a0b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	2201      	movs	r2, #1
 801a0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	2201      	movs	r2, #1
 801a0c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	2201      	movs	r2, #1
 801a0c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	2201      	movs	r2, #1
 801a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a0d4:	2300      	movs	r3, #0
}
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	3708      	adds	r7, #8
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	bd80      	pop	{r7, pc}
	...

0801a0e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a0e0:	b480      	push	{r7}
 801a0e2:	b085      	sub	sp, #20
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a0ee:	b2db      	uxtb	r3, r3
 801a0f0:	2b01      	cmp	r3, #1
 801a0f2:	d001      	beq.n	801a0f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a0f4:	2301      	movs	r3, #1
 801a0f6:	e047      	b.n	801a188 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	2202      	movs	r2, #2
 801a0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	4a23      	ldr	r2, [pc, #140]	; (801a194 <HAL_TIM_Base_Start+0xb4>)
 801a106:	4293      	cmp	r3, r2
 801a108:	d01d      	beq.n	801a146 <HAL_TIM_Base_Start+0x66>
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a112:	d018      	beq.n	801a146 <HAL_TIM_Base_Start+0x66>
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	4a1f      	ldr	r2, [pc, #124]	; (801a198 <HAL_TIM_Base_Start+0xb8>)
 801a11a:	4293      	cmp	r3, r2
 801a11c:	d013      	beq.n	801a146 <HAL_TIM_Base_Start+0x66>
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	4a1e      	ldr	r2, [pc, #120]	; (801a19c <HAL_TIM_Base_Start+0xbc>)
 801a124:	4293      	cmp	r3, r2
 801a126:	d00e      	beq.n	801a146 <HAL_TIM_Base_Start+0x66>
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	4a1c      	ldr	r2, [pc, #112]	; (801a1a0 <HAL_TIM_Base_Start+0xc0>)
 801a12e:	4293      	cmp	r3, r2
 801a130:	d009      	beq.n	801a146 <HAL_TIM_Base_Start+0x66>
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	4a1b      	ldr	r2, [pc, #108]	; (801a1a4 <HAL_TIM_Base_Start+0xc4>)
 801a138:	4293      	cmp	r3, r2
 801a13a:	d004      	beq.n	801a146 <HAL_TIM_Base_Start+0x66>
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	4a19      	ldr	r2, [pc, #100]	; (801a1a8 <HAL_TIM_Base_Start+0xc8>)
 801a142:	4293      	cmp	r3, r2
 801a144:	d115      	bne.n	801a172 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	689a      	ldr	r2, [r3, #8]
 801a14c:	4b17      	ldr	r3, [pc, #92]	; (801a1ac <HAL_TIM_Base_Start+0xcc>)
 801a14e:	4013      	ands	r3, r2
 801a150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	2b06      	cmp	r3, #6
 801a156:	d015      	beq.n	801a184 <HAL_TIM_Base_Start+0xa4>
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a15e:	d011      	beq.n	801a184 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	681a      	ldr	r2, [r3, #0]
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	f042 0201 	orr.w	r2, r2, #1
 801a16e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a170:	e008      	b.n	801a184 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	681a      	ldr	r2, [r3, #0]
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	f042 0201 	orr.w	r2, r2, #1
 801a180:	601a      	str	r2, [r3, #0]
 801a182:	e000      	b.n	801a186 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a184:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801a186:	2300      	movs	r3, #0
}
 801a188:	4618      	mov	r0, r3
 801a18a:	3714      	adds	r7, #20
 801a18c:	46bd      	mov	sp, r7
 801a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a192:	4770      	bx	lr
 801a194:	40012c00 	.word	0x40012c00
 801a198:	40000400 	.word	0x40000400
 801a19c:	40000800 	.word	0x40000800
 801a1a0:	40000c00 	.word	0x40000c00
 801a1a4:	40013400 	.word	0x40013400
 801a1a8:	40014000 	.word	0x40014000
 801a1ac:	00010007 	.word	0x00010007

0801a1b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a1b0:	b480      	push	{r7}
 801a1b2:	b085      	sub	sp, #20
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a1be:	b2db      	uxtb	r3, r3
 801a1c0:	2b01      	cmp	r3, #1
 801a1c2:	d001      	beq.n	801a1c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801a1c4:	2301      	movs	r3, #1
 801a1c6:	e04f      	b.n	801a268 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	2202      	movs	r2, #2
 801a1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	68da      	ldr	r2, [r3, #12]
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	f042 0201 	orr.w	r2, r2, #1
 801a1de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	4a23      	ldr	r2, [pc, #140]	; (801a274 <HAL_TIM_Base_Start_IT+0xc4>)
 801a1e6:	4293      	cmp	r3, r2
 801a1e8:	d01d      	beq.n	801a226 <HAL_TIM_Base_Start_IT+0x76>
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a1f2:	d018      	beq.n	801a226 <HAL_TIM_Base_Start_IT+0x76>
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	4a1f      	ldr	r2, [pc, #124]	; (801a278 <HAL_TIM_Base_Start_IT+0xc8>)
 801a1fa:	4293      	cmp	r3, r2
 801a1fc:	d013      	beq.n	801a226 <HAL_TIM_Base_Start_IT+0x76>
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	4a1e      	ldr	r2, [pc, #120]	; (801a27c <HAL_TIM_Base_Start_IT+0xcc>)
 801a204:	4293      	cmp	r3, r2
 801a206:	d00e      	beq.n	801a226 <HAL_TIM_Base_Start_IT+0x76>
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	4a1c      	ldr	r2, [pc, #112]	; (801a280 <HAL_TIM_Base_Start_IT+0xd0>)
 801a20e:	4293      	cmp	r3, r2
 801a210:	d009      	beq.n	801a226 <HAL_TIM_Base_Start_IT+0x76>
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	4a1b      	ldr	r2, [pc, #108]	; (801a284 <HAL_TIM_Base_Start_IT+0xd4>)
 801a218:	4293      	cmp	r3, r2
 801a21a:	d004      	beq.n	801a226 <HAL_TIM_Base_Start_IT+0x76>
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	4a19      	ldr	r2, [pc, #100]	; (801a288 <HAL_TIM_Base_Start_IT+0xd8>)
 801a222:	4293      	cmp	r3, r2
 801a224:	d115      	bne.n	801a252 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	689a      	ldr	r2, [r3, #8]
 801a22c:	4b17      	ldr	r3, [pc, #92]	; (801a28c <HAL_TIM_Base_Start_IT+0xdc>)
 801a22e:	4013      	ands	r3, r2
 801a230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	2b06      	cmp	r3, #6
 801a236:	d015      	beq.n	801a264 <HAL_TIM_Base_Start_IT+0xb4>
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a23e:	d011      	beq.n	801a264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	681a      	ldr	r2, [r3, #0]
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	f042 0201 	orr.w	r2, r2, #1
 801a24e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a250:	e008      	b.n	801a264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	681a      	ldr	r2, [r3, #0]
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	f042 0201 	orr.w	r2, r2, #1
 801a260:	601a      	str	r2, [r3, #0]
 801a262:	e000      	b.n	801a266 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801a266:	2300      	movs	r3, #0
}
 801a268:	4618      	mov	r0, r3
 801a26a:	3714      	adds	r7, #20
 801a26c:	46bd      	mov	sp, r7
 801a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a272:	4770      	bx	lr
 801a274:	40012c00 	.word	0x40012c00
 801a278:	40000400 	.word	0x40000400
 801a27c:	40000800 	.word	0x40000800
 801a280:	40000c00 	.word	0x40000c00
 801a284:	40013400 	.word	0x40013400
 801a288:	40014000 	.word	0x40014000
 801a28c:	00010007 	.word	0x00010007

0801a290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b082      	sub	sp, #8
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d101      	bne.n	801a2a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a29e:	2301      	movs	r3, #1
 801a2a0:	e049      	b.n	801a336 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a2a8:	b2db      	uxtb	r3, r3
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d106      	bne.n	801a2bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	2200      	movs	r2, #0
 801a2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a2b6:	6878      	ldr	r0, [r7, #4]
 801a2b8:	f7f9 fbd4 	bl	8013a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	2202      	movs	r2, #2
 801a2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681a      	ldr	r2, [r3, #0]
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	3304      	adds	r3, #4
 801a2cc:	4619      	mov	r1, r3
 801a2ce:	4610      	mov	r0, r2
 801a2d0:	f001 f818 	bl	801b304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2201      	movs	r2, #1
 801a2d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	2201      	movs	r2, #1
 801a2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	2201      	movs	r2, #1
 801a2e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	2201      	movs	r2, #1
 801a2f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	2201      	movs	r2, #1
 801a2f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	2201      	movs	r2, #1
 801a300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	2201      	movs	r2, #1
 801a308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	2201      	movs	r2, #1
 801a310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	2201      	movs	r2, #1
 801a318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	2201      	movs	r2, #1
 801a320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	2201      	movs	r2, #1
 801a328:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	2201      	movs	r2, #1
 801a330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a334:	2300      	movs	r3, #0
}
 801a336:	4618      	mov	r0, r3
 801a338:	3708      	adds	r7, #8
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd80      	pop	{r7, pc}
	...

0801a340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b084      	sub	sp, #16
 801a344:	af00      	add	r7, sp, #0
 801a346:	6078      	str	r0, [r7, #4]
 801a348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a34a:	683b      	ldr	r3, [r7, #0]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d109      	bne.n	801a364 <HAL_TIM_PWM_Start+0x24>
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a356:	b2db      	uxtb	r3, r3
 801a358:	2b01      	cmp	r3, #1
 801a35a:	bf14      	ite	ne
 801a35c:	2301      	movne	r3, #1
 801a35e:	2300      	moveq	r3, #0
 801a360:	b2db      	uxtb	r3, r3
 801a362:	e03c      	b.n	801a3de <HAL_TIM_PWM_Start+0x9e>
 801a364:	683b      	ldr	r3, [r7, #0]
 801a366:	2b04      	cmp	r3, #4
 801a368:	d109      	bne.n	801a37e <HAL_TIM_PWM_Start+0x3e>
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a370:	b2db      	uxtb	r3, r3
 801a372:	2b01      	cmp	r3, #1
 801a374:	bf14      	ite	ne
 801a376:	2301      	movne	r3, #1
 801a378:	2300      	moveq	r3, #0
 801a37a:	b2db      	uxtb	r3, r3
 801a37c:	e02f      	b.n	801a3de <HAL_TIM_PWM_Start+0x9e>
 801a37e:	683b      	ldr	r3, [r7, #0]
 801a380:	2b08      	cmp	r3, #8
 801a382:	d109      	bne.n	801a398 <HAL_TIM_PWM_Start+0x58>
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a38a:	b2db      	uxtb	r3, r3
 801a38c:	2b01      	cmp	r3, #1
 801a38e:	bf14      	ite	ne
 801a390:	2301      	movne	r3, #1
 801a392:	2300      	moveq	r3, #0
 801a394:	b2db      	uxtb	r3, r3
 801a396:	e022      	b.n	801a3de <HAL_TIM_PWM_Start+0x9e>
 801a398:	683b      	ldr	r3, [r7, #0]
 801a39a:	2b0c      	cmp	r3, #12
 801a39c:	d109      	bne.n	801a3b2 <HAL_TIM_PWM_Start+0x72>
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a3a4:	b2db      	uxtb	r3, r3
 801a3a6:	2b01      	cmp	r3, #1
 801a3a8:	bf14      	ite	ne
 801a3aa:	2301      	movne	r3, #1
 801a3ac:	2300      	moveq	r3, #0
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	e015      	b.n	801a3de <HAL_TIM_PWM_Start+0x9e>
 801a3b2:	683b      	ldr	r3, [r7, #0]
 801a3b4:	2b10      	cmp	r3, #16
 801a3b6:	d109      	bne.n	801a3cc <HAL_TIM_PWM_Start+0x8c>
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a3be:	b2db      	uxtb	r3, r3
 801a3c0:	2b01      	cmp	r3, #1
 801a3c2:	bf14      	ite	ne
 801a3c4:	2301      	movne	r3, #1
 801a3c6:	2300      	moveq	r3, #0
 801a3c8:	b2db      	uxtb	r3, r3
 801a3ca:	e008      	b.n	801a3de <HAL_TIM_PWM_Start+0x9e>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a3d2:	b2db      	uxtb	r3, r3
 801a3d4:	2b01      	cmp	r3, #1
 801a3d6:	bf14      	ite	ne
 801a3d8:	2301      	movne	r3, #1
 801a3da:	2300      	moveq	r3, #0
 801a3dc:	b2db      	uxtb	r3, r3
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d001      	beq.n	801a3e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801a3e2:	2301      	movs	r3, #1
 801a3e4:	e09c      	b.n	801a520 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a3e6:	683b      	ldr	r3, [r7, #0]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d104      	bne.n	801a3f6 <HAL_TIM_PWM_Start+0xb6>
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	2202      	movs	r2, #2
 801a3f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a3f4:	e023      	b.n	801a43e <HAL_TIM_PWM_Start+0xfe>
 801a3f6:	683b      	ldr	r3, [r7, #0]
 801a3f8:	2b04      	cmp	r3, #4
 801a3fa:	d104      	bne.n	801a406 <HAL_TIM_PWM_Start+0xc6>
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	2202      	movs	r2, #2
 801a400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a404:	e01b      	b.n	801a43e <HAL_TIM_PWM_Start+0xfe>
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	2b08      	cmp	r3, #8
 801a40a:	d104      	bne.n	801a416 <HAL_TIM_PWM_Start+0xd6>
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	2202      	movs	r2, #2
 801a410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a414:	e013      	b.n	801a43e <HAL_TIM_PWM_Start+0xfe>
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	2b0c      	cmp	r3, #12
 801a41a:	d104      	bne.n	801a426 <HAL_TIM_PWM_Start+0xe6>
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	2202      	movs	r2, #2
 801a420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a424:	e00b      	b.n	801a43e <HAL_TIM_PWM_Start+0xfe>
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	2b10      	cmp	r3, #16
 801a42a:	d104      	bne.n	801a436 <HAL_TIM_PWM_Start+0xf6>
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	2202      	movs	r2, #2
 801a430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a434:	e003      	b.n	801a43e <HAL_TIM_PWM_Start+0xfe>
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	2202      	movs	r2, #2
 801a43a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	2201      	movs	r2, #1
 801a444:	6839      	ldr	r1, [r7, #0]
 801a446:	4618      	mov	r0, r3
 801a448:	f001 fc8c 	bl	801bd64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	4a35      	ldr	r2, [pc, #212]	; (801a528 <HAL_TIM_PWM_Start+0x1e8>)
 801a452:	4293      	cmp	r3, r2
 801a454:	d013      	beq.n	801a47e <HAL_TIM_PWM_Start+0x13e>
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	4a34      	ldr	r2, [pc, #208]	; (801a52c <HAL_TIM_PWM_Start+0x1ec>)
 801a45c:	4293      	cmp	r3, r2
 801a45e:	d00e      	beq.n	801a47e <HAL_TIM_PWM_Start+0x13e>
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	4a32      	ldr	r2, [pc, #200]	; (801a530 <HAL_TIM_PWM_Start+0x1f0>)
 801a466:	4293      	cmp	r3, r2
 801a468:	d009      	beq.n	801a47e <HAL_TIM_PWM_Start+0x13e>
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	4a31      	ldr	r2, [pc, #196]	; (801a534 <HAL_TIM_PWM_Start+0x1f4>)
 801a470:	4293      	cmp	r3, r2
 801a472:	d004      	beq.n	801a47e <HAL_TIM_PWM_Start+0x13e>
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	4a2f      	ldr	r2, [pc, #188]	; (801a538 <HAL_TIM_PWM_Start+0x1f8>)
 801a47a:	4293      	cmp	r3, r2
 801a47c:	d101      	bne.n	801a482 <HAL_TIM_PWM_Start+0x142>
 801a47e:	2301      	movs	r3, #1
 801a480:	e000      	b.n	801a484 <HAL_TIM_PWM_Start+0x144>
 801a482:	2300      	movs	r3, #0
 801a484:	2b00      	cmp	r3, #0
 801a486:	d007      	beq.n	801a498 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a496:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	4a22      	ldr	r2, [pc, #136]	; (801a528 <HAL_TIM_PWM_Start+0x1e8>)
 801a49e:	4293      	cmp	r3, r2
 801a4a0:	d01d      	beq.n	801a4de <HAL_TIM_PWM_Start+0x19e>
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a4aa:	d018      	beq.n	801a4de <HAL_TIM_PWM_Start+0x19e>
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	4a22      	ldr	r2, [pc, #136]	; (801a53c <HAL_TIM_PWM_Start+0x1fc>)
 801a4b2:	4293      	cmp	r3, r2
 801a4b4:	d013      	beq.n	801a4de <HAL_TIM_PWM_Start+0x19e>
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	4a21      	ldr	r2, [pc, #132]	; (801a540 <HAL_TIM_PWM_Start+0x200>)
 801a4bc:	4293      	cmp	r3, r2
 801a4be:	d00e      	beq.n	801a4de <HAL_TIM_PWM_Start+0x19e>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	4a1f      	ldr	r2, [pc, #124]	; (801a544 <HAL_TIM_PWM_Start+0x204>)
 801a4c6:	4293      	cmp	r3, r2
 801a4c8:	d009      	beq.n	801a4de <HAL_TIM_PWM_Start+0x19e>
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	4a17      	ldr	r2, [pc, #92]	; (801a52c <HAL_TIM_PWM_Start+0x1ec>)
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	d004      	beq.n	801a4de <HAL_TIM_PWM_Start+0x19e>
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	4a15      	ldr	r2, [pc, #84]	; (801a530 <HAL_TIM_PWM_Start+0x1f0>)
 801a4da:	4293      	cmp	r3, r2
 801a4dc:	d115      	bne.n	801a50a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	689a      	ldr	r2, [r3, #8]
 801a4e4:	4b18      	ldr	r3, [pc, #96]	; (801a548 <HAL_TIM_PWM_Start+0x208>)
 801a4e6:	4013      	ands	r3, r2
 801a4e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	2b06      	cmp	r3, #6
 801a4ee:	d015      	beq.n	801a51c <HAL_TIM_PWM_Start+0x1dc>
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4f6:	d011      	beq.n	801a51c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	681a      	ldr	r2, [r3, #0]
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	f042 0201 	orr.w	r2, r2, #1
 801a506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a508:	e008      	b.n	801a51c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	681a      	ldr	r2, [r3, #0]
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	f042 0201 	orr.w	r2, r2, #1
 801a518:	601a      	str	r2, [r3, #0]
 801a51a:	e000      	b.n	801a51e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a51c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801a51e:	2300      	movs	r3, #0
}
 801a520:	4618      	mov	r0, r3
 801a522:	3710      	adds	r7, #16
 801a524:	46bd      	mov	sp, r7
 801a526:	bd80      	pop	{r7, pc}
 801a528:	40012c00 	.word	0x40012c00
 801a52c:	40013400 	.word	0x40013400
 801a530:	40014000 	.word	0x40014000
 801a534:	40014400 	.word	0x40014400
 801a538:	40014800 	.word	0x40014800
 801a53c:	40000400 	.word	0x40000400
 801a540:	40000800 	.word	0x40000800
 801a544:	40000c00 	.word	0x40000c00
 801a548:	00010007 	.word	0x00010007

0801a54c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b082      	sub	sp, #8
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d101      	bne.n	801a55e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801a55a:	2301      	movs	r3, #1
 801a55c:	e049      	b.n	801a5f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a564:	b2db      	uxtb	r3, r3
 801a566:	2b00      	cmp	r3, #0
 801a568:	d106      	bne.n	801a578 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2200      	movs	r2, #0
 801a56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801a572:	6878      	ldr	r0, [r7, #4]
 801a574:	f000 f841 	bl	801a5fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	2202      	movs	r2, #2
 801a57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681a      	ldr	r2, [r3, #0]
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	3304      	adds	r3, #4
 801a588:	4619      	mov	r1, r3
 801a58a:	4610      	mov	r0, r2
 801a58c:	f000 feba 	bl	801b304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	2201      	movs	r2, #1
 801a594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	2201      	movs	r2, #1
 801a59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	2201      	movs	r2, #1
 801a5a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2201      	movs	r2, #1
 801a5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	2201      	movs	r2, #1
 801a5b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	2201      	movs	r2, #1
 801a5bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	2201      	movs	r2, #1
 801a5c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2201      	movs	r2, #1
 801a5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	2201      	movs	r2, #1
 801a5d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	2201      	movs	r2, #1
 801a5dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	2201      	movs	r2, #1
 801a5e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	2201      	movs	r2, #1
 801a5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a5f0:	2300      	movs	r3, #0
}
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	3708      	adds	r7, #8
 801a5f6:	46bd      	mov	sp, r7
 801a5f8:	bd80      	pop	{r7, pc}

0801a5fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801a5fa:	b480      	push	{r7}
 801a5fc:	b083      	sub	sp, #12
 801a5fe:	af00      	add	r7, sp, #0
 801a600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801a602:	bf00      	nop
 801a604:	370c      	adds	r7, #12
 801a606:	46bd      	mov	sp, r7
 801a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60c:	4770      	bx	lr
	...

0801a610 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b084      	sub	sp, #16
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
 801a618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a61a:	2300      	movs	r3, #0
 801a61c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801a61e:	683b      	ldr	r3, [r7, #0]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d104      	bne.n	801a62e <HAL_TIM_IC_Start_IT+0x1e>
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a62a:	b2db      	uxtb	r3, r3
 801a62c:	e023      	b.n	801a676 <HAL_TIM_IC_Start_IT+0x66>
 801a62e:	683b      	ldr	r3, [r7, #0]
 801a630:	2b04      	cmp	r3, #4
 801a632:	d104      	bne.n	801a63e <HAL_TIM_IC_Start_IT+0x2e>
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a63a:	b2db      	uxtb	r3, r3
 801a63c:	e01b      	b.n	801a676 <HAL_TIM_IC_Start_IT+0x66>
 801a63e:	683b      	ldr	r3, [r7, #0]
 801a640:	2b08      	cmp	r3, #8
 801a642:	d104      	bne.n	801a64e <HAL_TIM_IC_Start_IT+0x3e>
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a64a:	b2db      	uxtb	r3, r3
 801a64c:	e013      	b.n	801a676 <HAL_TIM_IC_Start_IT+0x66>
 801a64e:	683b      	ldr	r3, [r7, #0]
 801a650:	2b0c      	cmp	r3, #12
 801a652:	d104      	bne.n	801a65e <HAL_TIM_IC_Start_IT+0x4e>
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a65a:	b2db      	uxtb	r3, r3
 801a65c:	e00b      	b.n	801a676 <HAL_TIM_IC_Start_IT+0x66>
 801a65e:	683b      	ldr	r3, [r7, #0]
 801a660:	2b10      	cmp	r3, #16
 801a662:	d104      	bne.n	801a66e <HAL_TIM_IC_Start_IT+0x5e>
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a66a:	b2db      	uxtb	r3, r3
 801a66c:	e003      	b.n	801a676 <HAL_TIM_IC_Start_IT+0x66>
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a674:	b2db      	uxtb	r3, r3
 801a676:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d104      	bne.n	801a688 <HAL_TIM_IC_Start_IT+0x78>
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a684:	b2db      	uxtb	r3, r3
 801a686:	e013      	b.n	801a6b0 <HAL_TIM_IC_Start_IT+0xa0>
 801a688:	683b      	ldr	r3, [r7, #0]
 801a68a:	2b04      	cmp	r3, #4
 801a68c:	d104      	bne.n	801a698 <HAL_TIM_IC_Start_IT+0x88>
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a694:	b2db      	uxtb	r3, r3
 801a696:	e00b      	b.n	801a6b0 <HAL_TIM_IC_Start_IT+0xa0>
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	2b08      	cmp	r3, #8
 801a69c:	d104      	bne.n	801a6a8 <HAL_TIM_IC_Start_IT+0x98>
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a6a4:	b2db      	uxtb	r3, r3
 801a6a6:	e003      	b.n	801a6b0 <HAL_TIM_IC_Start_IT+0xa0>
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a6ae:	b2db      	uxtb	r3, r3
 801a6b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801a6b2:	7bbb      	ldrb	r3, [r7, #14]
 801a6b4:	2b01      	cmp	r3, #1
 801a6b6:	d102      	bne.n	801a6be <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801a6b8:	7b7b      	ldrb	r3, [r7, #13]
 801a6ba:	2b01      	cmp	r3, #1
 801a6bc:	d001      	beq.n	801a6c2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801a6be:	2301      	movs	r3, #1
 801a6c0:	e0dd      	b.n	801a87e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d104      	bne.n	801a6d2 <HAL_TIM_IC_Start_IT+0xc2>
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	2202      	movs	r2, #2
 801a6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a6d0:	e023      	b.n	801a71a <HAL_TIM_IC_Start_IT+0x10a>
 801a6d2:	683b      	ldr	r3, [r7, #0]
 801a6d4:	2b04      	cmp	r3, #4
 801a6d6:	d104      	bne.n	801a6e2 <HAL_TIM_IC_Start_IT+0xd2>
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2202      	movs	r2, #2
 801a6dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a6e0:	e01b      	b.n	801a71a <HAL_TIM_IC_Start_IT+0x10a>
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	2b08      	cmp	r3, #8
 801a6e6:	d104      	bne.n	801a6f2 <HAL_TIM_IC_Start_IT+0xe2>
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	2202      	movs	r2, #2
 801a6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a6f0:	e013      	b.n	801a71a <HAL_TIM_IC_Start_IT+0x10a>
 801a6f2:	683b      	ldr	r3, [r7, #0]
 801a6f4:	2b0c      	cmp	r3, #12
 801a6f6:	d104      	bne.n	801a702 <HAL_TIM_IC_Start_IT+0xf2>
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	2202      	movs	r2, #2
 801a6fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a700:	e00b      	b.n	801a71a <HAL_TIM_IC_Start_IT+0x10a>
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	2b10      	cmp	r3, #16
 801a706:	d104      	bne.n	801a712 <HAL_TIM_IC_Start_IT+0x102>
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	2202      	movs	r2, #2
 801a70c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a710:	e003      	b.n	801a71a <HAL_TIM_IC_Start_IT+0x10a>
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	2202      	movs	r2, #2
 801a716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a71a:	683b      	ldr	r3, [r7, #0]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d104      	bne.n	801a72a <HAL_TIM_IC_Start_IT+0x11a>
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	2202      	movs	r2, #2
 801a724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a728:	e013      	b.n	801a752 <HAL_TIM_IC_Start_IT+0x142>
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	2b04      	cmp	r3, #4
 801a72e:	d104      	bne.n	801a73a <HAL_TIM_IC_Start_IT+0x12a>
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	2202      	movs	r2, #2
 801a734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a738:	e00b      	b.n	801a752 <HAL_TIM_IC_Start_IT+0x142>
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	2b08      	cmp	r3, #8
 801a73e:	d104      	bne.n	801a74a <HAL_TIM_IC_Start_IT+0x13a>
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	2202      	movs	r2, #2
 801a744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a748:	e003      	b.n	801a752 <HAL_TIM_IC_Start_IT+0x142>
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	2202      	movs	r2, #2
 801a74e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801a752:	683b      	ldr	r3, [r7, #0]
 801a754:	2b0c      	cmp	r3, #12
 801a756:	d841      	bhi.n	801a7dc <HAL_TIM_IC_Start_IT+0x1cc>
 801a758:	a201      	add	r2, pc, #4	; (adr r2, 801a760 <HAL_TIM_IC_Start_IT+0x150>)
 801a75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a75e:	bf00      	nop
 801a760:	0801a795 	.word	0x0801a795
 801a764:	0801a7dd 	.word	0x0801a7dd
 801a768:	0801a7dd 	.word	0x0801a7dd
 801a76c:	0801a7dd 	.word	0x0801a7dd
 801a770:	0801a7a7 	.word	0x0801a7a7
 801a774:	0801a7dd 	.word	0x0801a7dd
 801a778:	0801a7dd 	.word	0x0801a7dd
 801a77c:	0801a7dd 	.word	0x0801a7dd
 801a780:	0801a7b9 	.word	0x0801a7b9
 801a784:	0801a7dd 	.word	0x0801a7dd
 801a788:	0801a7dd 	.word	0x0801a7dd
 801a78c:	0801a7dd 	.word	0x0801a7dd
 801a790:	0801a7cb 	.word	0x0801a7cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	68da      	ldr	r2, [r3, #12]
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	f042 0202 	orr.w	r2, r2, #2
 801a7a2:	60da      	str	r2, [r3, #12]
      break;
 801a7a4:	e01d      	b.n	801a7e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	68da      	ldr	r2, [r3, #12]
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	f042 0204 	orr.w	r2, r2, #4
 801a7b4:	60da      	str	r2, [r3, #12]
      break;
 801a7b6:	e014      	b.n	801a7e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	68da      	ldr	r2, [r3, #12]
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	f042 0208 	orr.w	r2, r2, #8
 801a7c6:	60da      	str	r2, [r3, #12]
      break;
 801a7c8:	e00b      	b.n	801a7e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	68da      	ldr	r2, [r3, #12]
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	f042 0210 	orr.w	r2, r2, #16
 801a7d8:	60da      	str	r2, [r3, #12]
      break;
 801a7da:	e002      	b.n	801a7e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801a7dc:	2301      	movs	r3, #1
 801a7de:	73fb      	strb	r3, [r7, #15]
      break;
 801a7e0:	bf00      	nop
  }

  if (status == HAL_OK)
 801a7e2:	7bfb      	ldrb	r3, [r7, #15]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d149      	bne.n	801a87c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	2201      	movs	r2, #1
 801a7ee:	6839      	ldr	r1, [r7, #0]
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f001 fab7 	bl	801bd64 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	4a23      	ldr	r2, [pc, #140]	; (801a888 <HAL_TIM_IC_Start_IT+0x278>)
 801a7fc:	4293      	cmp	r3, r2
 801a7fe:	d01d      	beq.n	801a83c <HAL_TIM_IC_Start_IT+0x22c>
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a808:	d018      	beq.n	801a83c <HAL_TIM_IC_Start_IT+0x22c>
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	4a1f      	ldr	r2, [pc, #124]	; (801a88c <HAL_TIM_IC_Start_IT+0x27c>)
 801a810:	4293      	cmp	r3, r2
 801a812:	d013      	beq.n	801a83c <HAL_TIM_IC_Start_IT+0x22c>
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	4a1d      	ldr	r2, [pc, #116]	; (801a890 <HAL_TIM_IC_Start_IT+0x280>)
 801a81a:	4293      	cmp	r3, r2
 801a81c:	d00e      	beq.n	801a83c <HAL_TIM_IC_Start_IT+0x22c>
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	4a1c      	ldr	r2, [pc, #112]	; (801a894 <HAL_TIM_IC_Start_IT+0x284>)
 801a824:	4293      	cmp	r3, r2
 801a826:	d009      	beq.n	801a83c <HAL_TIM_IC_Start_IT+0x22c>
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	4a1a      	ldr	r2, [pc, #104]	; (801a898 <HAL_TIM_IC_Start_IT+0x288>)
 801a82e:	4293      	cmp	r3, r2
 801a830:	d004      	beq.n	801a83c <HAL_TIM_IC_Start_IT+0x22c>
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	4a19      	ldr	r2, [pc, #100]	; (801a89c <HAL_TIM_IC_Start_IT+0x28c>)
 801a838:	4293      	cmp	r3, r2
 801a83a:	d115      	bne.n	801a868 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	689a      	ldr	r2, [r3, #8]
 801a842:	4b17      	ldr	r3, [pc, #92]	; (801a8a0 <HAL_TIM_IC_Start_IT+0x290>)
 801a844:	4013      	ands	r3, r2
 801a846:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a848:	68bb      	ldr	r3, [r7, #8]
 801a84a:	2b06      	cmp	r3, #6
 801a84c:	d015      	beq.n	801a87a <HAL_TIM_IC_Start_IT+0x26a>
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a854:	d011      	beq.n	801a87a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	681a      	ldr	r2, [r3, #0]
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	f042 0201 	orr.w	r2, r2, #1
 801a864:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a866:	e008      	b.n	801a87a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	681a      	ldr	r2, [r3, #0]
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	f042 0201 	orr.w	r2, r2, #1
 801a876:	601a      	str	r2, [r3, #0]
 801a878:	e000      	b.n	801a87c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a87a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801a87c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a87e:	4618      	mov	r0, r3
 801a880:	3710      	adds	r7, #16
 801a882:	46bd      	mov	sp, r7
 801a884:	bd80      	pop	{r7, pc}
 801a886:	bf00      	nop
 801a888:	40012c00 	.word	0x40012c00
 801a88c:	40000400 	.word	0x40000400
 801a890:	40000800 	.word	0x40000800
 801a894:	40000c00 	.word	0x40000c00
 801a898:	40013400 	.word	0x40013400
 801a89c:	40014000 	.word	0x40014000
 801a8a0:	00010007 	.word	0x00010007

0801a8a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b086      	sub	sp, #24
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
 801a8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d101      	bne.n	801a8b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	e097      	b.n	801a9e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a8be:	b2db      	uxtb	r3, r3
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d106      	bne.n	801a8d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801a8cc:	6878      	ldr	r0, [r7, #4]
 801a8ce:	f7f9 f87d 	bl	80139cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	2202      	movs	r2, #2
 801a8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	689b      	ldr	r3, [r3, #8]
 801a8e0:	687a      	ldr	r2, [r7, #4]
 801a8e2:	6812      	ldr	r2, [r2, #0]
 801a8e4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 801a8e8:	f023 0307 	bic.w	r3, r3, #7
 801a8ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	681a      	ldr	r2, [r3, #0]
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	3304      	adds	r3, #4
 801a8f6:	4619      	mov	r1, r3
 801a8f8:	4610      	mov	r0, r2
 801a8fa:	f000 fd03 	bl	801b304 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	689b      	ldr	r3, [r3, #8]
 801a904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	699b      	ldr	r3, [r3, #24]
 801a90c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	6a1b      	ldr	r3, [r3, #32]
 801a914:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801a916:	683b      	ldr	r3, [r7, #0]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	697a      	ldr	r2, [r7, #20]
 801a91c:	4313      	orrs	r3, r2
 801a91e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a926:	f023 0303 	bic.w	r3, r3, #3
 801a92a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801a92c:	683b      	ldr	r3, [r7, #0]
 801a92e:	689a      	ldr	r2, [r3, #8]
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	699b      	ldr	r3, [r3, #24]
 801a934:	021b      	lsls	r3, r3, #8
 801a936:	4313      	orrs	r3, r2
 801a938:	693a      	ldr	r2, [r7, #16]
 801a93a:	4313      	orrs	r3, r2
 801a93c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801a93e:	693b      	ldr	r3, [r7, #16]
 801a940:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801a944:	f023 030c 	bic.w	r3, r3, #12
 801a948:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801a94a:	693b      	ldr	r3, [r7, #16]
 801a94c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801a950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801a954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	68da      	ldr	r2, [r3, #12]
 801a95a:	683b      	ldr	r3, [r7, #0]
 801a95c:	69db      	ldr	r3, [r3, #28]
 801a95e:	021b      	lsls	r3, r3, #8
 801a960:	4313      	orrs	r3, r2
 801a962:	693a      	ldr	r2, [r7, #16]
 801a964:	4313      	orrs	r3, r2
 801a966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801a968:	683b      	ldr	r3, [r7, #0]
 801a96a:	691b      	ldr	r3, [r3, #16]
 801a96c:	011a      	lsls	r2, r3, #4
 801a96e:	683b      	ldr	r3, [r7, #0]
 801a970:	6a1b      	ldr	r3, [r3, #32]
 801a972:	031b      	lsls	r3, r3, #12
 801a974:	4313      	orrs	r3, r2
 801a976:	693a      	ldr	r2, [r7, #16]
 801a978:	4313      	orrs	r3, r2
 801a97a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801a982:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801a984:	68fb      	ldr	r3, [r7, #12]
 801a986:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801a98a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801a98c:	683b      	ldr	r3, [r7, #0]
 801a98e:	685a      	ldr	r2, [r3, #4]
 801a990:	683b      	ldr	r3, [r7, #0]
 801a992:	695b      	ldr	r3, [r3, #20]
 801a994:	011b      	lsls	r3, r3, #4
 801a996:	4313      	orrs	r3, r2
 801a998:	68fa      	ldr	r2, [r7, #12]
 801a99a:	4313      	orrs	r3, r2
 801a99c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	697a      	ldr	r2, [r7, #20]
 801a9a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	693a      	ldr	r2, [r7, #16]
 801a9ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	68fa      	ldr	r2, [r7, #12]
 801a9b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	2201      	movs	r2, #1
 801a9ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	2201      	movs	r2, #1
 801a9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	2201      	movs	r2, #1
 801a9ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	2201      	movs	r2, #1
 801a9d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	2201      	movs	r2, #1
 801a9da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	2201      	movs	r2, #1
 801a9e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a9e6:	2300      	movs	r3, #0
}
 801a9e8:	4618      	mov	r0, r3
 801a9ea:	3718      	adds	r7, #24
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}

0801a9f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b084      	sub	sp, #16
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
 801a9f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801aa00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801aa08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aa10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aa18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d110      	bne.n	801aa42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801aa20:	7bfb      	ldrb	r3, [r7, #15]
 801aa22:	2b01      	cmp	r3, #1
 801aa24:	d102      	bne.n	801aa2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 801aa26:	7b7b      	ldrb	r3, [r7, #13]
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	d001      	beq.n	801aa30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 801aa2c:	2301      	movs	r3, #1
 801aa2e:	e069      	b.n	801ab04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	2202      	movs	r2, #2
 801aa34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	2202      	movs	r2, #2
 801aa3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801aa40:	e031      	b.n	801aaa6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801aa42:	683b      	ldr	r3, [r7, #0]
 801aa44:	2b04      	cmp	r3, #4
 801aa46:	d110      	bne.n	801aa6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801aa48:	7bbb      	ldrb	r3, [r7, #14]
 801aa4a:	2b01      	cmp	r3, #1
 801aa4c:	d102      	bne.n	801aa54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801aa4e:	7b3b      	ldrb	r3, [r7, #12]
 801aa50:	2b01      	cmp	r3, #1
 801aa52:	d001      	beq.n	801aa58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 801aa54:	2301      	movs	r3, #1
 801aa56:	e055      	b.n	801ab04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	2202      	movs	r2, #2
 801aa5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	2202      	movs	r2, #2
 801aa64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801aa68:	e01d      	b.n	801aaa6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801aa6a:	7bfb      	ldrb	r3, [r7, #15]
 801aa6c:	2b01      	cmp	r3, #1
 801aa6e:	d108      	bne.n	801aa82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801aa70:	7bbb      	ldrb	r3, [r7, #14]
 801aa72:	2b01      	cmp	r3, #1
 801aa74:	d105      	bne.n	801aa82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801aa76:	7b7b      	ldrb	r3, [r7, #13]
 801aa78:	2b01      	cmp	r3, #1
 801aa7a:	d102      	bne.n	801aa82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801aa7c:	7b3b      	ldrb	r3, [r7, #12]
 801aa7e:	2b01      	cmp	r3, #1
 801aa80:	d001      	beq.n	801aa86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 801aa82:	2301      	movs	r3, #1
 801aa84:	e03e      	b.n	801ab04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	2202      	movs	r2, #2
 801aa8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	2202      	movs	r2, #2
 801aa92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	2202      	movs	r2, #2
 801aa9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	2202      	movs	r2, #2
 801aaa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801aaa6:	683b      	ldr	r3, [r7, #0]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d003      	beq.n	801aab4 <HAL_TIM_Encoder_Start+0xc4>
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	2b04      	cmp	r3, #4
 801aab0:	d008      	beq.n	801aac4 <HAL_TIM_Encoder_Start+0xd4>
 801aab2:	e00f      	b.n	801aad4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	2201      	movs	r2, #1
 801aaba:	2100      	movs	r1, #0
 801aabc:	4618      	mov	r0, r3
 801aabe:	f001 f951 	bl	801bd64 <TIM_CCxChannelCmd>
      break;
 801aac2:	e016      	b.n	801aaf2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	2201      	movs	r2, #1
 801aaca:	2104      	movs	r1, #4
 801aacc:	4618      	mov	r0, r3
 801aace:	f001 f949 	bl	801bd64 <TIM_CCxChannelCmd>
      break;
 801aad2:	e00e      	b.n	801aaf2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	2201      	movs	r2, #1
 801aada:	2100      	movs	r1, #0
 801aadc:	4618      	mov	r0, r3
 801aade:	f001 f941 	bl	801bd64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	2201      	movs	r2, #1
 801aae8:	2104      	movs	r1, #4
 801aaea:	4618      	mov	r0, r3
 801aaec:	f001 f93a 	bl	801bd64 <TIM_CCxChannelCmd>
      break;
 801aaf0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	681a      	ldr	r2, [r3, #0]
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	f042 0201 	orr.w	r2, r2, #1
 801ab00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801ab02:	2300      	movs	r3, #0
}
 801ab04:	4618      	mov	r0, r3
 801ab06:	3710      	adds	r7, #16
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	bd80      	pop	{r7, pc}

0801ab0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b082      	sub	sp, #8
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	691b      	ldr	r3, [r3, #16]
 801ab1a:	f003 0302 	and.w	r3, r3, #2
 801ab1e:	2b02      	cmp	r3, #2
 801ab20:	d122      	bne.n	801ab68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	68db      	ldr	r3, [r3, #12]
 801ab28:	f003 0302 	and.w	r3, r3, #2
 801ab2c:	2b02      	cmp	r3, #2
 801ab2e:	d11b      	bne.n	801ab68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	f06f 0202 	mvn.w	r2, #2
 801ab38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2201      	movs	r2, #1
 801ab3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	699b      	ldr	r3, [r3, #24]
 801ab46:	f003 0303 	and.w	r3, r3, #3
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d003      	beq.n	801ab56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ab4e:	6878      	ldr	r0, [r7, #4]
 801ab50:	f7e9 fcfa 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 801ab54:	e005      	b.n	801ab62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ab56:	6878      	ldr	r0, [r7, #4]
 801ab58:	f000 fbb6 	bl	801b2c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ab5c:	6878      	ldr	r0, [r7, #4]
 801ab5e:	f000 fbbd 	bl	801b2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	2200      	movs	r2, #0
 801ab66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	691b      	ldr	r3, [r3, #16]
 801ab6e:	f003 0304 	and.w	r3, r3, #4
 801ab72:	2b04      	cmp	r3, #4
 801ab74:	d122      	bne.n	801abbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	68db      	ldr	r3, [r3, #12]
 801ab7c:	f003 0304 	and.w	r3, r3, #4
 801ab80:	2b04      	cmp	r3, #4
 801ab82:	d11b      	bne.n	801abbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	f06f 0204 	mvn.w	r2, #4
 801ab8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	2202      	movs	r2, #2
 801ab92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	699b      	ldr	r3, [r3, #24]
 801ab9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d003      	beq.n	801abaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801aba2:	6878      	ldr	r0, [r7, #4]
 801aba4:	f7e9 fcd0 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 801aba8:	e005      	b.n	801abb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801abaa:	6878      	ldr	r0, [r7, #4]
 801abac:	f000 fb8c 	bl	801b2c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801abb0:	6878      	ldr	r0, [r7, #4]
 801abb2:	f000 fb93 	bl	801b2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	2200      	movs	r2, #0
 801abba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	691b      	ldr	r3, [r3, #16]
 801abc2:	f003 0308 	and.w	r3, r3, #8
 801abc6:	2b08      	cmp	r3, #8
 801abc8:	d122      	bne.n	801ac10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	68db      	ldr	r3, [r3, #12]
 801abd0:	f003 0308 	and.w	r3, r3, #8
 801abd4:	2b08      	cmp	r3, #8
 801abd6:	d11b      	bne.n	801ac10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	f06f 0208 	mvn.w	r2, #8
 801abe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	2204      	movs	r2, #4
 801abe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	69db      	ldr	r3, [r3, #28]
 801abee:	f003 0303 	and.w	r3, r3, #3
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d003      	beq.n	801abfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801abf6:	6878      	ldr	r0, [r7, #4]
 801abf8:	f7e9 fca6 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 801abfc:	e005      	b.n	801ac0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801abfe:	6878      	ldr	r0, [r7, #4]
 801ac00:	f000 fb62 	bl	801b2c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ac04:	6878      	ldr	r0, [r7, #4]
 801ac06:	f000 fb69 	bl	801b2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	691b      	ldr	r3, [r3, #16]
 801ac16:	f003 0310 	and.w	r3, r3, #16
 801ac1a:	2b10      	cmp	r3, #16
 801ac1c:	d122      	bne.n	801ac64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	68db      	ldr	r3, [r3, #12]
 801ac24:	f003 0310 	and.w	r3, r3, #16
 801ac28:	2b10      	cmp	r3, #16
 801ac2a:	d11b      	bne.n	801ac64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	f06f 0210 	mvn.w	r2, #16
 801ac34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	2208      	movs	r2, #8
 801ac3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	69db      	ldr	r3, [r3, #28]
 801ac42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d003      	beq.n	801ac52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ac4a:	6878      	ldr	r0, [r7, #4]
 801ac4c:	f7e9 fc7c 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 801ac50:	e005      	b.n	801ac5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ac52:	6878      	ldr	r0, [r7, #4]
 801ac54:	f000 fb38 	bl	801b2c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ac58:	6878      	ldr	r0, [r7, #4]
 801ac5a:	f000 fb3f 	bl	801b2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	2200      	movs	r2, #0
 801ac62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	691b      	ldr	r3, [r3, #16]
 801ac6a:	f003 0301 	and.w	r3, r3, #1
 801ac6e:	2b01      	cmp	r3, #1
 801ac70:	d10e      	bne.n	801ac90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	68db      	ldr	r3, [r3, #12]
 801ac78:	f003 0301 	and.w	r3, r3, #1
 801ac7c:	2b01      	cmp	r3, #1
 801ac7e:	d107      	bne.n	801ac90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	f06f 0201 	mvn.w	r2, #1
 801ac88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801ac8a:	6878      	ldr	r0, [r7, #4]
 801ac8c:	f7f8 fa9e 	bl	80131cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	691b      	ldr	r3, [r3, #16]
 801ac96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ac9a:	2b80      	cmp	r3, #128	; 0x80
 801ac9c:	d10e      	bne.n	801acbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	68db      	ldr	r3, [r3, #12]
 801aca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aca8:	2b80      	cmp	r3, #128	; 0x80
 801acaa:	d107      	bne.n	801acbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801acb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801acb6:	6878      	ldr	r0, [r7, #4]
 801acb8:	f001 f9ac 	bl	801c014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	691b      	ldr	r3, [r3, #16]
 801acc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801acc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801acca:	d10e      	bne.n	801acea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	68db      	ldr	r3, [r3, #12]
 801acd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801acd6:	2b80      	cmp	r3, #128	; 0x80
 801acd8:	d107      	bne.n	801acea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801ace2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801ace4:	6878      	ldr	r0, [r7, #4]
 801ace6:	f001 f99f 	bl	801c028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	691b      	ldr	r3, [r3, #16]
 801acf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801acf4:	2b40      	cmp	r3, #64	; 0x40
 801acf6:	d10e      	bne.n	801ad16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	68db      	ldr	r3, [r3, #12]
 801acfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad02:	2b40      	cmp	r3, #64	; 0x40
 801ad04:	d107      	bne.n	801ad16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ad0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801ad10:	6878      	ldr	r0, [r7, #4]
 801ad12:	f000 faed 	bl	801b2f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	691b      	ldr	r3, [r3, #16]
 801ad1c:	f003 0320 	and.w	r3, r3, #32
 801ad20:	2b20      	cmp	r3, #32
 801ad22:	d10e      	bne.n	801ad42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	68db      	ldr	r3, [r3, #12]
 801ad2a:	f003 0320 	and.w	r3, r3, #32
 801ad2e:	2b20      	cmp	r3, #32
 801ad30:	d107      	bne.n	801ad42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	f06f 0220 	mvn.w	r2, #32
 801ad3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801ad3c:	6878      	ldr	r0, [r7, #4]
 801ad3e:	f001 f95f 	bl	801c000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ad42:	bf00      	nop
 801ad44:	3708      	adds	r7, #8
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd80      	pop	{r7, pc}

0801ad4a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801ad4a:	b580      	push	{r7, lr}
 801ad4c:	b086      	sub	sp, #24
 801ad4e:	af00      	add	r7, sp, #0
 801ad50:	60f8      	str	r0, [r7, #12]
 801ad52:	60b9      	str	r1, [r7, #8]
 801ad54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ad56:	2300      	movs	r3, #0
 801ad58:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ad60:	2b01      	cmp	r3, #1
 801ad62:	d101      	bne.n	801ad68 <HAL_TIM_IC_ConfigChannel+0x1e>
 801ad64:	2302      	movs	r3, #2
 801ad66:	e088      	b.n	801ae7a <HAL_TIM_IC_ConfigChannel+0x130>
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	2201      	movs	r2, #1
 801ad6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d11b      	bne.n	801adae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801ad7e:	68bb      	ldr	r3, [r7, #8]
 801ad80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801ad82:	68bb      	ldr	r3, [r7, #8]
 801ad84:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801ad86:	f000 fe2d 	bl	801b9e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	699a      	ldr	r2, [r3, #24]
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	f022 020c 	bic.w	r2, r2, #12
 801ad98:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	6999      	ldr	r1, [r3, #24]
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	689a      	ldr	r2, [r3, #8]
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	430a      	orrs	r2, r1
 801adaa:	619a      	str	r2, [r3, #24]
 801adac:	e060      	b.n	801ae70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	2b04      	cmp	r3, #4
 801adb2:	d11c      	bne.n	801adee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801adb8:	68bb      	ldr	r3, [r7, #8]
 801adba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801adbc:	68bb      	ldr	r3, [r7, #8]
 801adbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801adc0:	68bb      	ldr	r3, [r7, #8]
 801adc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801adc4:	f000 feab 	bl	801bb1e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801adc8:	68fb      	ldr	r3, [r7, #12]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	699a      	ldr	r2, [r3, #24]
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801add6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	6999      	ldr	r1, [r3, #24]
 801adde:	68bb      	ldr	r3, [r7, #8]
 801ade0:	689b      	ldr	r3, [r3, #8]
 801ade2:	021a      	lsls	r2, r3, #8
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	430a      	orrs	r2, r1
 801adea:	619a      	str	r2, [r3, #24]
 801adec:	e040      	b.n	801ae70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	2b08      	cmp	r3, #8
 801adf2:	d11b      	bne.n	801ae2c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801adf8:	68bb      	ldr	r3, [r7, #8]
 801adfa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801ae00:	68bb      	ldr	r3, [r7, #8]
 801ae02:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801ae04:	f000 fef8 	bl	801bbf8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	69da      	ldr	r2, [r3, #28]
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	f022 020c 	bic.w	r2, r2, #12
 801ae16:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	69d9      	ldr	r1, [r3, #28]
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	689a      	ldr	r2, [r3, #8]
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	430a      	orrs	r2, r1
 801ae28:	61da      	str	r2, [r3, #28]
 801ae2a:	e021      	b.n	801ae70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	2b0c      	cmp	r3, #12
 801ae30:	d11c      	bne.n	801ae6c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801ae42:	f000 ff15 	bl	801bc70 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	69da      	ldr	r2, [r3, #28]
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801ae54:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	69d9      	ldr	r1, [r3, #28]
 801ae5c:	68bb      	ldr	r3, [r7, #8]
 801ae5e:	689b      	ldr	r3, [r3, #8]
 801ae60:	021a      	lsls	r2, r3, #8
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	430a      	orrs	r2, r1
 801ae68:	61da      	str	r2, [r3, #28]
 801ae6a:	e001      	b.n	801ae70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801ae6c:	2301      	movs	r3, #1
 801ae6e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	2200      	movs	r2, #0
 801ae74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801ae78:	7dfb      	ldrb	r3, [r7, #23]
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3718      	adds	r7, #24
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
	...

0801ae84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b086      	sub	sp, #24
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	60f8      	str	r0, [r7, #12]
 801ae8c:	60b9      	str	r1, [r7, #8]
 801ae8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ae90:	2300      	movs	r3, #0
 801ae92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ae9a:	2b01      	cmp	r3, #1
 801ae9c:	d101      	bne.n	801aea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801ae9e:	2302      	movs	r3, #2
 801aea0:	e0ff      	b.n	801b0a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	2201      	movs	r2, #1
 801aea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	2b14      	cmp	r3, #20
 801aeae:	f200 80f0 	bhi.w	801b092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801aeb2:	a201      	add	r2, pc, #4	; (adr r2, 801aeb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801aeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aeb8:	0801af0d 	.word	0x0801af0d
 801aebc:	0801b093 	.word	0x0801b093
 801aec0:	0801b093 	.word	0x0801b093
 801aec4:	0801b093 	.word	0x0801b093
 801aec8:	0801af4d 	.word	0x0801af4d
 801aecc:	0801b093 	.word	0x0801b093
 801aed0:	0801b093 	.word	0x0801b093
 801aed4:	0801b093 	.word	0x0801b093
 801aed8:	0801af8f 	.word	0x0801af8f
 801aedc:	0801b093 	.word	0x0801b093
 801aee0:	0801b093 	.word	0x0801b093
 801aee4:	0801b093 	.word	0x0801b093
 801aee8:	0801afcf 	.word	0x0801afcf
 801aeec:	0801b093 	.word	0x0801b093
 801aef0:	0801b093 	.word	0x0801b093
 801aef4:	0801b093 	.word	0x0801b093
 801aef8:	0801b011 	.word	0x0801b011
 801aefc:	0801b093 	.word	0x0801b093
 801af00:	0801b093 	.word	0x0801b093
 801af04:	0801b093 	.word	0x0801b093
 801af08:	0801b051 	.word	0x0801b051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	68b9      	ldr	r1, [r7, #8]
 801af12:	4618      	mov	r0, r3
 801af14:	f000 fa90 	bl	801b438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	699a      	ldr	r2, [r3, #24]
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	f042 0208 	orr.w	r2, r2, #8
 801af26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	699a      	ldr	r2, [r3, #24]
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	f022 0204 	bic.w	r2, r2, #4
 801af36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	6999      	ldr	r1, [r3, #24]
 801af3e:	68bb      	ldr	r3, [r7, #8]
 801af40:	691a      	ldr	r2, [r3, #16]
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	430a      	orrs	r2, r1
 801af48:	619a      	str	r2, [r3, #24]
      break;
 801af4a:	e0a5      	b.n	801b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	68b9      	ldr	r1, [r7, #8]
 801af52:	4618      	mov	r0, r3
 801af54:	f000 fb00 	bl	801b558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	699a      	ldr	r2, [r3, #24]
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801af66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	699a      	ldr	r2, [r3, #24]
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801af76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	6999      	ldr	r1, [r3, #24]
 801af7e:	68bb      	ldr	r3, [r7, #8]
 801af80:	691b      	ldr	r3, [r3, #16]
 801af82:	021a      	lsls	r2, r3, #8
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	430a      	orrs	r2, r1
 801af8a:	619a      	str	r2, [r3, #24]
      break;
 801af8c:	e084      	b.n	801b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	68b9      	ldr	r1, [r7, #8]
 801af94:	4618      	mov	r0, r3
 801af96:	f000 fb69 	bl	801b66c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	69da      	ldr	r2, [r3, #28]
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	f042 0208 	orr.w	r2, r2, #8
 801afa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	69da      	ldr	r2, [r3, #28]
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	f022 0204 	bic.w	r2, r2, #4
 801afb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	69d9      	ldr	r1, [r3, #28]
 801afc0:	68bb      	ldr	r3, [r7, #8]
 801afc2:	691a      	ldr	r2, [r3, #16]
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	430a      	orrs	r2, r1
 801afca:	61da      	str	r2, [r3, #28]
      break;
 801afcc:	e064      	b.n	801b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	68b9      	ldr	r1, [r7, #8]
 801afd4:	4618      	mov	r0, r3
 801afd6:	f000 fbd1 	bl	801b77c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	69da      	ldr	r2, [r3, #28]
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801afe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	69da      	ldr	r2, [r3, #28]
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801aff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	69d9      	ldr	r1, [r3, #28]
 801b000:	68bb      	ldr	r3, [r7, #8]
 801b002:	691b      	ldr	r3, [r3, #16]
 801b004:	021a      	lsls	r2, r3, #8
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	430a      	orrs	r2, r1
 801b00c:	61da      	str	r2, [r3, #28]
      break;
 801b00e:	e043      	b.n	801b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	68b9      	ldr	r1, [r7, #8]
 801b016:	4618      	mov	r0, r3
 801b018:	f000 fc1a 	bl	801b850 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	f042 0208 	orr.w	r2, r2, #8
 801b02a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	f022 0204 	bic.w	r2, r2, #4
 801b03a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801b042:	68bb      	ldr	r3, [r7, #8]
 801b044:	691a      	ldr	r2, [r3, #16]
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	430a      	orrs	r2, r1
 801b04c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801b04e:	e023      	b.n	801b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	68b9      	ldr	r1, [r7, #8]
 801b056:	4618      	mov	r0, r3
 801b058:	f000 fc5e 	bl	801b918 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b06a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b07a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801b082:	68bb      	ldr	r3, [r7, #8]
 801b084:	691b      	ldr	r3, [r3, #16]
 801b086:	021a      	lsls	r2, r3, #8
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	430a      	orrs	r2, r1
 801b08e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801b090:	e002      	b.n	801b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801b092:	2301      	movs	r3, #1
 801b094:	75fb      	strb	r3, [r7, #23]
      break;
 801b096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	2200      	movs	r2, #0
 801b09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 801b0a2:	4618      	mov	r0, r3
 801b0a4:	3718      	adds	r7, #24
 801b0a6:	46bd      	mov	sp, r7
 801b0a8:	bd80      	pop	{r7, pc}
 801b0aa:	bf00      	nop

0801b0ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b084      	sub	sp, #16
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
 801b0b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b0c0:	2b01      	cmp	r3, #1
 801b0c2:	d101      	bne.n	801b0c8 <HAL_TIM_ConfigClockSource+0x1c>
 801b0c4:	2302      	movs	r3, #2
 801b0c6:	e0b6      	b.n	801b236 <HAL_TIM_ConfigClockSource+0x18a>
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	2201      	movs	r2, #1
 801b0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	2202      	movs	r2, #2
 801b0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	689b      	ldr	r3, [r3, #8]
 801b0de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801b0e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b0ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b0ec:	68bb      	ldr	r3, [r7, #8]
 801b0ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b0f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	68ba      	ldr	r2, [r7, #8]
 801b0fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b104:	d03e      	beq.n	801b184 <HAL_TIM_ConfigClockSource+0xd8>
 801b106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b10a:	f200 8087 	bhi.w	801b21c <HAL_TIM_ConfigClockSource+0x170>
 801b10e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b112:	f000 8086 	beq.w	801b222 <HAL_TIM_ConfigClockSource+0x176>
 801b116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b11a:	d87f      	bhi.n	801b21c <HAL_TIM_ConfigClockSource+0x170>
 801b11c:	2b70      	cmp	r3, #112	; 0x70
 801b11e:	d01a      	beq.n	801b156 <HAL_TIM_ConfigClockSource+0xaa>
 801b120:	2b70      	cmp	r3, #112	; 0x70
 801b122:	d87b      	bhi.n	801b21c <HAL_TIM_ConfigClockSource+0x170>
 801b124:	2b60      	cmp	r3, #96	; 0x60
 801b126:	d050      	beq.n	801b1ca <HAL_TIM_ConfigClockSource+0x11e>
 801b128:	2b60      	cmp	r3, #96	; 0x60
 801b12a:	d877      	bhi.n	801b21c <HAL_TIM_ConfigClockSource+0x170>
 801b12c:	2b50      	cmp	r3, #80	; 0x50
 801b12e:	d03c      	beq.n	801b1aa <HAL_TIM_ConfigClockSource+0xfe>
 801b130:	2b50      	cmp	r3, #80	; 0x50
 801b132:	d873      	bhi.n	801b21c <HAL_TIM_ConfigClockSource+0x170>
 801b134:	2b40      	cmp	r3, #64	; 0x40
 801b136:	d058      	beq.n	801b1ea <HAL_TIM_ConfigClockSource+0x13e>
 801b138:	2b40      	cmp	r3, #64	; 0x40
 801b13a:	d86f      	bhi.n	801b21c <HAL_TIM_ConfigClockSource+0x170>
 801b13c:	2b30      	cmp	r3, #48	; 0x30
 801b13e:	d064      	beq.n	801b20a <HAL_TIM_ConfigClockSource+0x15e>
 801b140:	2b30      	cmp	r3, #48	; 0x30
 801b142:	d86b      	bhi.n	801b21c <HAL_TIM_ConfigClockSource+0x170>
 801b144:	2b20      	cmp	r3, #32
 801b146:	d060      	beq.n	801b20a <HAL_TIM_ConfigClockSource+0x15e>
 801b148:	2b20      	cmp	r3, #32
 801b14a:	d867      	bhi.n	801b21c <HAL_TIM_ConfigClockSource+0x170>
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d05c      	beq.n	801b20a <HAL_TIM_ConfigClockSource+0x15e>
 801b150:	2b10      	cmp	r3, #16
 801b152:	d05a      	beq.n	801b20a <HAL_TIM_ConfigClockSource+0x15e>
 801b154:	e062      	b.n	801b21c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801b15a:	683b      	ldr	r3, [r7, #0]
 801b15c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801b15e:	683b      	ldr	r3, [r7, #0]
 801b160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801b162:	683b      	ldr	r3, [r7, #0]
 801b164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801b166:	f000 fddd 	bl	801bd24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	689b      	ldr	r3, [r3, #8]
 801b170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b172:	68bb      	ldr	r3, [r7, #8]
 801b174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	68ba      	ldr	r2, [r7, #8]
 801b180:	609a      	str	r2, [r3, #8]
      break;
 801b182:	e04f      	b.n	801b224 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801b188:	683b      	ldr	r3, [r7, #0]
 801b18a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801b18c:	683b      	ldr	r3, [r7, #0]
 801b18e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801b190:	683b      	ldr	r3, [r7, #0]
 801b192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801b194:	f000 fdc6 	bl	801bd24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	689a      	ldr	r2, [r3, #8]
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b1a6:	609a      	str	r2, [r3, #8]
      break;
 801b1a8:	e03c      	b.n	801b224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801b1ae:	683b      	ldr	r3, [r7, #0]
 801b1b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801b1b2:	683b      	ldr	r3, [r7, #0]
 801b1b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b1b6:	461a      	mov	r2, r3
 801b1b8:	f000 fc82 	bl	801bac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	2150      	movs	r1, #80	; 0x50
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	f000 fd91 	bl	801bcea <TIM_ITRx_SetConfig>
      break;
 801b1c8:	e02c      	b.n	801b224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801b1ce:	683b      	ldr	r3, [r7, #0]
 801b1d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801b1d2:	683b      	ldr	r3, [r7, #0]
 801b1d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801b1d6:	461a      	mov	r2, r3
 801b1d8:	f000 fcde 	bl	801bb98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	2160      	movs	r1, #96	; 0x60
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	f000 fd81 	bl	801bcea <TIM_ITRx_SetConfig>
      break;
 801b1e8:	e01c      	b.n	801b224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801b1ee:	683b      	ldr	r3, [r7, #0]
 801b1f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b1f6:	461a      	mov	r2, r3
 801b1f8:	f000 fc62 	bl	801bac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	2140      	movs	r1, #64	; 0x40
 801b202:	4618      	mov	r0, r3
 801b204:	f000 fd71 	bl	801bcea <TIM_ITRx_SetConfig>
      break;
 801b208:	e00c      	b.n	801b224 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	681a      	ldr	r2, [r3, #0]
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	4619      	mov	r1, r3
 801b214:	4610      	mov	r0, r2
 801b216:	f000 fd68 	bl	801bcea <TIM_ITRx_SetConfig>
      break;
 801b21a:	e003      	b.n	801b224 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801b21c:	2301      	movs	r3, #1
 801b21e:	73fb      	strb	r3, [r7, #15]
      break;
 801b220:	e000      	b.n	801b224 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801b222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	2201      	movs	r2, #1
 801b228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	2200      	movs	r2, #0
 801b230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b234:	7bfb      	ldrb	r3, [r7, #15]
}
 801b236:	4618      	mov	r0, r3
 801b238:	3710      	adds	r7, #16
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bd80      	pop	{r7, pc}
	...

0801b240 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b240:	b480      	push	{r7}
 801b242:	b085      	sub	sp, #20
 801b244:	af00      	add	r7, sp, #0
 801b246:	6078      	str	r0, [r7, #4]
 801b248:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801b24a:	2300      	movs	r3, #0
 801b24c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801b24e:	683b      	ldr	r3, [r7, #0]
 801b250:	2b0c      	cmp	r3, #12
 801b252:	d831      	bhi.n	801b2b8 <HAL_TIM_ReadCapturedValue+0x78>
 801b254:	a201      	add	r2, pc, #4	; (adr r2, 801b25c <HAL_TIM_ReadCapturedValue+0x1c>)
 801b256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b25a:	bf00      	nop
 801b25c:	0801b291 	.word	0x0801b291
 801b260:	0801b2b9 	.word	0x0801b2b9
 801b264:	0801b2b9 	.word	0x0801b2b9
 801b268:	0801b2b9 	.word	0x0801b2b9
 801b26c:	0801b29b 	.word	0x0801b29b
 801b270:	0801b2b9 	.word	0x0801b2b9
 801b274:	0801b2b9 	.word	0x0801b2b9
 801b278:	0801b2b9 	.word	0x0801b2b9
 801b27c:	0801b2a5 	.word	0x0801b2a5
 801b280:	0801b2b9 	.word	0x0801b2b9
 801b284:	0801b2b9 	.word	0x0801b2b9
 801b288:	0801b2b9 	.word	0x0801b2b9
 801b28c:	0801b2af 	.word	0x0801b2af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b296:	60fb      	str	r3, [r7, #12]

      break;
 801b298:	e00f      	b.n	801b2ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2a0:	60fb      	str	r3, [r7, #12]

      break;
 801b2a2:	e00a      	b.n	801b2ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2aa:	60fb      	str	r3, [r7, #12]

      break;
 801b2ac:	e005      	b.n	801b2ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2b4:	60fb      	str	r3, [r7, #12]

      break;
 801b2b6:	e000      	b.n	801b2ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801b2b8:	bf00      	nop
  }

  return tmpreg;
 801b2ba:	68fb      	ldr	r3, [r7, #12]
}
 801b2bc:	4618      	mov	r0, r3
 801b2be:	3714      	adds	r7, #20
 801b2c0:	46bd      	mov	sp, r7
 801b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c6:	4770      	bx	lr

0801b2c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b2c8:	b480      	push	{r7}
 801b2ca:	b083      	sub	sp, #12
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b2d0:	bf00      	nop
 801b2d2:	370c      	adds	r7, #12
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2da:	4770      	bx	lr

0801b2dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b2dc:	b480      	push	{r7}
 801b2de:	b083      	sub	sp, #12
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b2e4:	bf00      	nop
 801b2e6:	370c      	adds	r7, #12
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ee:	4770      	bx	lr

0801b2f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b2f0:	b480      	push	{r7}
 801b2f2:	b083      	sub	sp, #12
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b2f8:	bf00      	nop
 801b2fa:	370c      	adds	r7, #12
 801b2fc:	46bd      	mov	sp, r7
 801b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b302:	4770      	bx	lr

0801b304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801b304:	b480      	push	{r7}
 801b306:	b085      	sub	sp, #20
 801b308:	af00      	add	r7, sp, #0
 801b30a:	6078      	str	r0, [r7, #4]
 801b30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	4a40      	ldr	r2, [pc, #256]	; (801b418 <TIM_Base_SetConfig+0x114>)
 801b318:	4293      	cmp	r3, r2
 801b31a:	d013      	beq.n	801b344 <TIM_Base_SetConfig+0x40>
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b322:	d00f      	beq.n	801b344 <TIM_Base_SetConfig+0x40>
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	4a3d      	ldr	r2, [pc, #244]	; (801b41c <TIM_Base_SetConfig+0x118>)
 801b328:	4293      	cmp	r3, r2
 801b32a:	d00b      	beq.n	801b344 <TIM_Base_SetConfig+0x40>
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	4a3c      	ldr	r2, [pc, #240]	; (801b420 <TIM_Base_SetConfig+0x11c>)
 801b330:	4293      	cmp	r3, r2
 801b332:	d007      	beq.n	801b344 <TIM_Base_SetConfig+0x40>
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	4a3b      	ldr	r2, [pc, #236]	; (801b424 <TIM_Base_SetConfig+0x120>)
 801b338:	4293      	cmp	r3, r2
 801b33a:	d003      	beq.n	801b344 <TIM_Base_SetConfig+0x40>
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	4a3a      	ldr	r2, [pc, #232]	; (801b428 <TIM_Base_SetConfig+0x124>)
 801b340:	4293      	cmp	r3, r2
 801b342:	d108      	bne.n	801b356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b34a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	685b      	ldr	r3, [r3, #4]
 801b350:	68fa      	ldr	r2, [r7, #12]
 801b352:	4313      	orrs	r3, r2
 801b354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	4a2f      	ldr	r2, [pc, #188]	; (801b418 <TIM_Base_SetConfig+0x114>)
 801b35a:	4293      	cmp	r3, r2
 801b35c:	d01f      	beq.n	801b39e <TIM_Base_SetConfig+0x9a>
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b364:	d01b      	beq.n	801b39e <TIM_Base_SetConfig+0x9a>
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	4a2c      	ldr	r2, [pc, #176]	; (801b41c <TIM_Base_SetConfig+0x118>)
 801b36a:	4293      	cmp	r3, r2
 801b36c:	d017      	beq.n	801b39e <TIM_Base_SetConfig+0x9a>
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	4a2b      	ldr	r2, [pc, #172]	; (801b420 <TIM_Base_SetConfig+0x11c>)
 801b372:	4293      	cmp	r3, r2
 801b374:	d013      	beq.n	801b39e <TIM_Base_SetConfig+0x9a>
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	4a2a      	ldr	r2, [pc, #168]	; (801b424 <TIM_Base_SetConfig+0x120>)
 801b37a:	4293      	cmp	r3, r2
 801b37c:	d00f      	beq.n	801b39e <TIM_Base_SetConfig+0x9a>
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	4a29      	ldr	r2, [pc, #164]	; (801b428 <TIM_Base_SetConfig+0x124>)
 801b382:	4293      	cmp	r3, r2
 801b384:	d00b      	beq.n	801b39e <TIM_Base_SetConfig+0x9a>
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	4a28      	ldr	r2, [pc, #160]	; (801b42c <TIM_Base_SetConfig+0x128>)
 801b38a:	4293      	cmp	r3, r2
 801b38c:	d007      	beq.n	801b39e <TIM_Base_SetConfig+0x9a>
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	4a27      	ldr	r2, [pc, #156]	; (801b430 <TIM_Base_SetConfig+0x12c>)
 801b392:	4293      	cmp	r3, r2
 801b394:	d003      	beq.n	801b39e <TIM_Base_SetConfig+0x9a>
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	4a26      	ldr	r2, [pc, #152]	; (801b434 <TIM_Base_SetConfig+0x130>)
 801b39a:	4293      	cmp	r3, r2
 801b39c:	d108      	bne.n	801b3b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b3a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b3a6:	683b      	ldr	r3, [r7, #0]
 801b3a8:	68db      	ldr	r3, [r3, #12]
 801b3aa:	68fa      	ldr	r2, [r7, #12]
 801b3ac:	4313      	orrs	r3, r2
 801b3ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	695b      	ldr	r3, [r3, #20]
 801b3ba:	4313      	orrs	r3, r2
 801b3bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	68fa      	ldr	r2, [r7, #12]
 801b3c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b3c4:	683b      	ldr	r3, [r7, #0]
 801b3c6:	689a      	ldr	r2, [r3, #8]
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b3cc:	683b      	ldr	r3, [r7, #0]
 801b3ce:	681a      	ldr	r2, [r3, #0]
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	4a10      	ldr	r2, [pc, #64]	; (801b418 <TIM_Base_SetConfig+0x114>)
 801b3d8:	4293      	cmp	r3, r2
 801b3da:	d00f      	beq.n	801b3fc <TIM_Base_SetConfig+0xf8>
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	4a12      	ldr	r2, [pc, #72]	; (801b428 <TIM_Base_SetConfig+0x124>)
 801b3e0:	4293      	cmp	r3, r2
 801b3e2:	d00b      	beq.n	801b3fc <TIM_Base_SetConfig+0xf8>
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	4a11      	ldr	r2, [pc, #68]	; (801b42c <TIM_Base_SetConfig+0x128>)
 801b3e8:	4293      	cmp	r3, r2
 801b3ea:	d007      	beq.n	801b3fc <TIM_Base_SetConfig+0xf8>
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	4a10      	ldr	r2, [pc, #64]	; (801b430 <TIM_Base_SetConfig+0x12c>)
 801b3f0:	4293      	cmp	r3, r2
 801b3f2:	d003      	beq.n	801b3fc <TIM_Base_SetConfig+0xf8>
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	4a0f      	ldr	r2, [pc, #60]	; (801b434 <TIM_Base_SetConfig+0x130>)
 801b3f8:	4293      	cmp	r3, r2
 801b3fa:	d103      	bne.n	801b404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b3fc:	683b      	ldr	r3, [r7, #0]
 801b3fe:	691a      	ldr	r2, [r3, #16]
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	2201      	movs	r2, #1
 801b408:	615a      	str	r2, [r3, #20]
}
 801b40a:	bf00      	nop
 801b40c:	3714      	adds	r7, #20
 801b40e:	46bd      	mov	sp, r7
 801b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b414:	4770      	bx	lr
 801b416:	bf00      	nop
 801b418:	40012c00 	.word	0x40012c00
 801b41c:	40000400 	.word	0x40000400
 801b420:	40000800 	.word	0x40000800
 801b424:	40000c00 	.word	0x40000c00
 801b428:	40013400 	.word	0x40013400
 801b42c:	40014000 	.word	0x40014000
 801b430:	40014400 	.word	0x40014400
 801b434:	40014800 	.word	0x40014800

0801b438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b438:	b480      	push	{r7}
 801b43a:	b087      	sub	sp, #28
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
 801b440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	6a1b      	ldr	r3, [r3, #32]
 801b446:	f023 0201 	bic.w	r2, r3, #1
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	6a1b      	ldr	r3, [r3, #32]
 801b452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	685b      	ldr	r3, [r3, #4]
 801b458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	699b      	ldr	r3, [r3, #24]
 801b45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	f023 0303 	bic.w	r3, r3, #3
 801b472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b474:	683b      	ldr	r3, [r7, #0]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	68fa      	ldr	r2, [r7, #12]
 801b47a:	4313      	orrs	r3, r2
 801b47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b47e:	697b      	ldr	r3, [r7, #20]
 801b480:	f023 0302 	bic.w	r3, r3, #2
 801b484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b486:	683b      	ldr	r3, [r7, #0]
 801b488:	689b      	ldr	r3, [r3, #8]
 801b48a:	697a      	ldr	r2, [r7, #20]
 801b48c:	4313      	orrs	r3, r2
 801b48e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	4a2c      	ldr	r2, [pc, #176]	; (801b544 <TIM_OC1_SetConfig+0x10c>)
 801b494:	4293      	cmp	r3, r2
 801b496:	d00f      	beq.n	801b4b8 <TIM_OC1_SetConfig+0x80>
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	4a2b      	ldr	r2, [pc, #172]	; (801b548 <TIM_OC1_SetConfig+0x110>)
 801b49c:	4293      	cmp	r3, r2
 801b49e:	d00b      	beq.n	801b4b8 <TIM_OC1_SetConfig+0x80>
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	4a2a      	ldr	r2, [pc, #168]	; (801b54c <TIM_OC1_SetConfig+0x114>)
 801b4a4:	4293      	cmp	r3, r2
 801b4a6:	d007      	beq.n	801b4b8 <TIM_OC1_SetConfig+0x80>
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	4a29      	ldr	r2, [pc, #164]	; (801b550 <TIM_OC1_SetConfig+0x118>)
 801b4ac:	4293      	cmp	r3, r2
 801b4ae:	d003      	beq.n	801b4b8 <TIM_OC1_SetConfig+0x80>
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	4a28      	ldr	r2, [pc, #160]	; (801b554 <TIM_OC1_SetConfig+0x11c>)
 801b4b4:	4293      	cmp	r3, r2
 801b4b6:	d10c      	bne.n	801b4d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b4b8:	697b      	ldr	r3, [r7, #20]
 801b4ba:	f023 0308 	bic.w	r3, r3, #8
 801b4be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b4c0:	683b      	ldr	r3, [r7, #0]
 801b4c2:	68db      	ldr	r3, [r3, #12]
 801b4c4:	697a      	ldr	r2, [r7, #20]
 801b4c6:	4313      	orrs	r3, r2
 801b4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b4ca:	697b      	ldr	r3, [r7, #20]
 801b4cc:	f023 0304 	bic.w	r3, r3, #4
 801b4d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	4a1b      	ldr	r2, [pc, #108]	; (801b544 <TIM_OC1_SetConfig+0x10c>)
 801b4d6:	4293      	cmp	r3, r2
 801b4d8:	d00f      	beq.n	801b4fa <TIM_OC1_SetConfig+0xc2>
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	4a1a      	ldr	r2, [pc, #104]	; (801b548 <TIM_OC1_SetConfig+0x110>)
 801b4de:	4293      	cmp	r3, r2
 801b4e0:	d00b      	beq.n	801b4fa <TIM_OC1_SetConfig+0xc2>
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	4a19      	ldr	r2, [pc, #100]	; (801b54c <TIM_OC1_SetConfig+0x114>)
 801b4e6:	4293      	cmp	r3, r2
 801b4e8:	d007      	beq.n	801b4fa <TIM_OC1_SetConfig+0xc2>
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	4a18      	ldr	r2, [pc, #96]	; (801b550 <TIM_OC1_SetConfig+0x118>)
 801b4ee:	4293      	cmp	r3, r2
 801b4f0:	d003      	beq.n	801b4fa <TIM_OC1_SetConfig+0xc2>
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	4a17      	ldr	r2, [pc, #92]	; (801b554 <TIM_OC1_SetConfig+0x11c>)
 801b4f6:	4293      	cmp	r3, r2
 801b4f8:	d111      	bne.n	801b51e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b4fa:	693b      	ldr	r3, [r7, #16]
 801b4fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b502:	693b      	ldr	r3, [r7, #16]
 801b504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b50a:	683b      	ldr	r3, [r7, #0]
 801b50c:	695b      	ldr	r3, [r3, #20]
 801b50e:	693a      	ldr	r2, [r7, #16]
 801b510:	4313      	orrs	r3, r2
 801b512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b514:	683b      	ldr	r3, [r7, #0]
 801b516:	699b      	ldr	r3, [r3, #24]
 801b518:	693a      	ldr	r2, [r7, #16]
 801b51a:	4313      	orrs	r3, r2
 801b51c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	693a      	ldr	r2, [r7, #16]
 801b522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	68fa      	ldr	r2, [r7, #12]
 801b528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b52a:	683b      	ldr	r3, [r7, #0]
 801b52c:	685a      	ldr	r2, [r3, #4]
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	697a      	ldr	r2, [r7, #20]
 801b536:	621a      	str	r2, [r3, #32]
}
 801b538:	bf00      	nop
 801b53a:	371c      	adds	r7, #28
 801b53c:	46bd      	mov	sp, r7
 801b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b542:	4770      	bx	lr
 801b544:	40012c00 	.word	0x40012c00
 801b548:	40013400 	.word	0x40013400
 801b54c:	40014000 	.word	0x40014000
 801b550:	40014400 	.word	0x40014400
 801b554:	40014800 	.word	0x40014800

0801b558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b558:	b480      	push	{r7}
 801b55a:	b087      	sub	sp, #28
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	6078      	str	r0, [r7, #4]
 801b560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6a1b      	ldr	r3, [r3, #32]
 801b566:	f023 0210 	bic.w	r2, r3, #16
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	6a1b      	ldr	r3, [r3, #32]
 801b572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	685b      	ldr	r3, [r3, #4]
 801b578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	699b      	ldr	r3, [r3, #24]
 801b57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b594:	683b      	ldr	r3, [r7, #0]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	021b      	lsls	r3, r3, #8
 801b59a:	68fa      	ldr	r2, [r7, #12]
 801b59c:	4313      	orrs	r3, r2
 801b59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b5a0:	697b      	ldr	r3, [r7, #20]
 801b5a2:	f023 0320 	bic.w	r3, r3, #32
 801b5a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b5a8:	683b      	ldr	r3, [r7, #0]
 801b5aa:	689b      	ldr	r3, [r3, #8]
 801b5ac:	011b      	lsls	r3, r3, #4
 801b5ae:	697a      	ldr	r2, [r7, #20]
 801b5b0:	4313      	orrs	r3, r2
 801b5b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	4a28      	ldr	r2, [pc, #160]	; (801b658 <TIM_OC2_SetConfig+0x100>)
 801b5b8:	4293      	cmp	r3, r2
 801b5ba:	d003      	beq.n	801b5c4 <TIM_OC2_SetConfig+0x6c>
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	4a27      	ldr	r2, [pc, #156]	; (801b65c <TIM_OC2_SetConfig+0x104>)
 801b5c0:	4293      	cmp	r3, r2
 801b5c2:	d10d      	bne.n	801b5e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b5c4:	697b      	ldr	r3, [r7, #20]
 801b5c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b5ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b5cc:	683b      	ldr	r3, [r7, #0]
 801b5ce:	68db      	ldr	r3, [r3, #12]
 801b5d0:	011b      	lsls	r3, r3, #4
 801b5d2:	697a      	ldr	r2, [r7, #20]
 801b5d4:	4313      	orrs	r3, r2
 801b5d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b5de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	4a1d      	ldr	r2, [pc, #116]	; (801b658 <TIM_OC2_SetConfig+0x100>)
 801b5e4:	4293      	cmp	r3, r2
 801b5e6:	d00f      	beq.n	801b608 <TIM_OC2_SetConfig+0xb0>
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	4a1c      	ldr	r2, [pc, #112]	; (801b65c <TIM_OC2_SetConfig+0x104>)
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	d00b      	beq.n	801b608 <TIM_OC2_SetConfig+0xb0>
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	4a1b      	ldr	r2, [pc, #108]	; (801b660 <TIM_OC2_SetConfig+0x108>)
 801b5f4:	4293      	cmp	r3, r2
 801b5f6:	d007      	beq.n	801b608 <TIM_OC2_SetConfig+0xb0>
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	4a1a      	ldr	r2, [pc, #104]	; (801b664 <TIM_OC2_SetConfig+0x10c>)
 801b5fc:	4293      	cmp	r3, r2
 801b5fe:	d003      	beq.n	801b608 <TIM_OC2_SetConfig+0xb0>
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	4a19      	ldr	r2, [pc, #100]	; (801b668 <TIM_OC2_SetConfig+0x110>)
 801b604:	4293      	cmp	r3, r2
 801b606:	d113      	bne.n	801b630 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b60e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b610:	693b      	ldr	r3, [r7, #16]
 801b612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b618:	683b      	ldr	r3, [r7, #0]
 801b61a:	695b      	ldr	r3, [r3, #20]
 801b61c:	009b      	lsls	r3, r3, #2
 801b61e:	693a      	ldr	r2, [r7, #16]
 801b620:	4313      	orrs	r3, r2
 801b622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b624:	683b      	ldr	r3, [r7, #0]
 801b626:	699b      	ldr	r3, [r3, #24]
 801b628:	009b      	lsls	r3, r3, #2
 801b62a:	693a      	ldr	r2, [r7, #16]
 801b62c:	4313      	orrs	r3, r2
 801b62e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	693a      	ldr	r2, [r7, #16]
 801b634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	68fa      	ldr	r2, [r7, #12]
 801b63a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b63c:	683b      	ldr	r3, [r7, #0]
 801b63e:	685a      	ldr	r2, [r3, #4]
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	697a      	ldr	r2, [r7, #20]
 801b648:	621a      	str	r2, [r3, #32]
}
 801b64a:	bf00      	nop
 801b64c:	371c      	adds	r7, #28
 801b64e:	46bd      	mov	sp, r7
 801b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b654:	4770      	bx	lr
 801b656:	bf00      	nop
 801b658:	40012c00 	.word	0x40012c00
 801b65c:	40013400 	.word	0x40013400
 801b660:	40014000 	.word	0x40014000
 801b664:	40014400 	.word	0x40014400
 801b668:	40014800 	.word	0x40014800

0801b66c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b66c:	b480      	push	{r7}
 801b66e:	b087      	sub	sp, #28
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
 801b674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	6a1b      	ldr	r3, [r3, #32]
 801b67a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	6a1b      	ldr	r3, [r3, #32]
 801b686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	685b      	ldr	r3, [r3, #4]
 801b68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	69db      	ldr	r3, [r3, #28]
 801b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	f023 0303 	bic.w	r3, r3, #3
 801b6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b6a8:	683b      	ldr	r3, [r7, #0]
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	68fa      	ldr	r2, [r7, #12]
 801b6ae:	4313      	orrs	r3, r2
 801b6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b6b2:	697b      	ldr	r3, [r7, #20]
 801b6b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b6b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	689b      	ldr	r3, [r3, #8]
 801b6be:	021b      	lsls	r3, r3, #8
 801b6c0:	697a      	ldr	r2, [r7, #20]
 801b6c2:	4313      	orrs	r3, r2
 801b6c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	4a27      	ldr	r2, [pc, #156]	; (801b768 <TIM_OC3_SetConfig+0xfc>)
 801b6ca:	4293      	cmp	r3, r2
 801b6cc:	d003      	beq.n	801b6d6 <TIM_OC3_SetConfig+0x6a>
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	4a26      	ldr	r2, [pc, #152]	; (801b76c <TIM_OC3_SetConfig+0x100>)
 801b6d2:	4293      	cmp	r3, r2
 801b6d4:	d10d      	bne.n	801b6f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b6d6:	697b      	ldr	r3, [r7, #20]
 801b6d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b6dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	68db      	ldr	r3, [r3, #12]
 801b6e2:	021b      	lsls	r3, r3, #8
 801b6e4:	697a      	ldr	r2, [r7, #20]
 801b6e6:	4313      	orrs	r3, r2
 801b6e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b6ea:	697b      	ldr	r3, [r7, #20]
 801b6ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b6f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	4a1c      	ldr	r2, [pc, #112]	; (801b768 <TIM_OC3_SetConfig+0xfc>)
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	d00f      	beq.n	801b71a <TIM_OC3_SetConfig+0xae>
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	4a1b      	ldr	r2, [pc, #108]	; (801b76c <TIM_OC3_SetConfig+0x100>)
 801b6fe:	4293      	cmp	r3, r2
 801b700:	d00b      	beq.n	801b71a <TIM_OC3_SetConfig+0xae>
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	4a1a      	ldr	r2, [pc, #104]	; (801b770 <TIM_OC3_SetConfig+0x104>)
 801b706:	4293      	cmp	r3, r2
 801b708:	d007      	beq.n	801b71a <TIM_OC3_SetConfig+0xae>
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	4a19      	ldr	r2, [pc, #100]	; (801b774 <TIM_OC3_SetConfig+0x108>)
 801b70e:	4293      	cmp	r3, r2
 801b710:	d003      	beq.n	801b71a <TIM_OC3_SetConfig+0xae>
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	4a18      	ldr	r2, [pc, #96]	; (801b778 <TIM_OC3_SetConfig+0x10c>)
 801b716:	4293      	cmp	r3, r2
 801b718:	d113      	bne.n	801b742 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b71a:	693b      	ldr	r3, [r7, #16]
 801b71c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b722:	693b      	ldr	r3, [r7, #16]
 801b724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b72a:	683b      	ldr	r3, [r7, #0]
 801b72c:	695b      	ldr	r3, [r3, #20]
 801b72e:	011b      	lsls	r3, r3, #4
 801b730:	693a      	ldr	r2, [r7, #16]
 801b732:	4313      	orrs	r3, r2
 801b734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b736:	683b      	ldr	r3, [r7, #0]
 801b738:	699b      	ldr	r3, [r3, #24]
 801b73a:	011b      	lsls	r3, r3, #4
 801b73c:	693a      	ldr	r2, [r7, #16]
 801b73e:	4313      	orrs	r3, r2
 801b740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	693a      	ldr	r2, [r7, #16]
 801b746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	68fa      	ldr	r2, [r7, #12]
 801b74c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b74e:	683b      	ldr	r3, [r7, #0]
 801b750:	685a      	ldr	r2, [r3, #4]
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	697a      	ldr	r2, [r7, #20]
 801b75a:	621a      	str	r2, [r3, #32]
}
 801b75c:	bf00      	nop
 801b75e:	371c      	adds	r7, #28
 801b760:	46bd      	mov	sp, r7
 801b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b766:	4770      	bx	lr
 801b768:	40012c00 	.word	0x40012c00
 801b76c:	40013400 	.word	0x40013400
 801b770:	40014000 	.word	0x40014000
 801b774:	40014400 	.word	0x40014400
 801b778:	40014800 	.word	0x40014800

0801b77c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b77c:	b480      	push	{r7}
 801b77e:	b087      	sub	sp, #28
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
 801b784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	6a1b      	ldr	r3, [r3, #32]
 801b78a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	6a1b      	ldr	r3, [r3, #32]
 801b796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	685b      	ldr	r3, [r3, #4]
 801b79c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	69db      	ldr	r3, [r3, #28]
 801b7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b7b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b7b8:	683b      	ldr	r3, [r7, #0]
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	021b      	lsls	r3, r3, #8
 801b7be:	68fa      	ldr	r2, [r7, #12]
 801b7c0:	4313      	orrs	r3, r2
 801b7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b7c4:	693b      	ldr	r3, [r7, #16]
 801b7c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b7ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	689b      	ldr	r3, [r3, #8]
 801b7d0:	031b      	lsls	r3, r3, #12
 801b7d2:	693a      	ldr	r2, [r7, #16]
 801b7d4:	4313      	orrs	r3, r2
 801b7d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	4a18      	ldr	r2, [pc, #96]	; (801b83c <TIM_OC4_SetConfig+0xc0>)
 801b7dc:	4293      	cmp	r3, r2
 801b7de:	d00f      	beq.n	801b800 <TIM_OC4_SetConfig+0x84>
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	4a17      	ldr	r2, [pc, #92]	; (801b840 <TIM_OC4_SetConfig+0xc4>)
 801b7e4:	4293      	cmp	r3, r2
 801b7e6:	d00b      	beq.n	801b800 <TIM_OC4_SetConfig+0x84>
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	4a16      	ldr	r2, [pc, #88]	; (801b844 <TIM_OC4_SetConfig+0xc8>)
 801b7ec:	4293      	cmp	r3, r2
 801b7ee:	d007      	beq.n	801b800 <TIM_OC4_SetConfig+0x84>
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	4a15      	ldr	r2, [pc, #84]	; (801b848 <TIM_OC4_SetConfig+0xcc>)
 801b7f4:	4293      	cmp	r3, r2
 801b7f6:	d003      	beq.n	801b800 <TIM_OC4_SetConfig+0x84>
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	4a14      	ldr	r2, [pc, #80]	; (801b84c <TIM_OC4_SetConfig+0xd0>)
 801b7fc:	4293      	cmp	r3, r2
 801b7fe:	d109      	bne.n	801b814 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b808:	683b      	ldr	r3, [r7, #0]
 801b80a:	695b      	ldr	r3, [r3, #20]
 801b80c:	019b      	lsls	r3, r3, #6
 801b80e:	697a      	ldr	r2, [r7, #20]
 801b810:	4313      	orrs	r3, r2
 801b812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	697a      	ldr	r2, [r7, #20]
 801b818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	68fa      	ldr	r2, [r7, #12]
 801b81e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	685a      	ldr	r2, [r3, #4]
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	693a      	ldr	r2, [r7, #16]
 801b82c:	621a      	str	r2, [r3, #32]
}
 801b82e:	bf00      	nop
 801b830:	371c      	adds	r7, #28
 801b832:	46bd      	mov	sp, r7
 801b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b838:	4770      	bx	lr
 801b83a:	bf00      	nop
 801b83c:	40012c00 	.word	0x40012c00
 801b840:	40013400 	.word	0x40013400
 801b844:	40014000 	.word	0x40014000
 801b848:	40014400 	.word	0x40014400
 801b84c:	40014800 	.word	0x40014800

0801b850 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801b850:	b480      	push	{r7}
 801b852:	b087      	sub	sp, #28
 801b854:	af00      	add	r7, sp, #0
 801b856:	6078      	str	r0, [r7, #4]
 801b858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	6a1b      	ldr	r3, [r3, #32]
 801b85e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	6a1b      	ldr	r3, [r3, #32]
 801b86a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	685b      	ldr	r3, [r3, #4]
 801b870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b87e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b884:	683b      	ldr	r3, [r7, #0]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	68fa      	ldr	r2, [r7, #12]
 801b88a:	4313      	orrs	r3, r2
 801b88c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801b88e:	693b      	ldr	r3, [r7, #16]
 801b890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801b894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801b896:	683b      	ldr	r3, [r7, #0]
 801b898:	689b      	ldr	r3, [r3, #8]
 801b89a:	041b      	lsls	r3, r3, #16
 801b89c:	693a      	ldr	r2, [r7, #16]
 801b89e:	4313      	orrs	r3, r2
 801b8a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	4a17      	ldr	r2, [pc, #92]	; (801b904 <TIM_OC5_SetConfig+0xb4>)
 801b8a6:	4293      	cmp	r3, r2
 801b8a8:	d00f      	beq.n	801b8ca <TIM_OC5_SetConfig+0x7a>
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	4a16      	ldr	r2, [pc, #88]	; (801b908 <TIM_OC5_SetConfig+0xb8>)
 801b8ae:	4293      	cmp	r3, r2
 801b8b0:	d00b      	beq.n	801b8ca <TIM_OC5_SetConfig+0x7a>
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	4a15      	ldr	r2, [pc, #84]	; (801b90c <TIM_OC5_SetConfig+0xbc>)
 801b8b6:	4293      	cmp	r3, r2
 801b8b8:	d007      	beq.n	801b8ca <TIM_OC5_SetConfig+0x7a>
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	4a14      	ldr	r2, [pc, #80]	; (801b910 <TIM_OC5_SetConfig+0xc0>)
 801b8be:	4293      	cmp	r3, r2
 801b8c0:	d003      	beq.n	801b8ca <TIM_OC5_SetConfig+0x7a>
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	4a13      	ldr	r2, [pc, #76]	; (801b914 <TIM_OC5_SetConfig+0xc4>)
 801b8c6:	4293      	cmp	r3, r2
 801b8c8:	d109      	bne.n	801b8de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801b8ca:	697b      	ldr	r3, [r7, #20]
 801b8cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b8d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801b8d2:	683b      	ldr	r3, [r7, #0]
 801b8d4:	695b      	ldr	r3, [r3, #20]
 801b8d6:	021b      	lsls	r3, r3, #8
 801b8d8:	697a      	ldr	r2, [r7, #20]
 801b8da:	4313      	orrs	r3, r2
 801b8dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	697a      	ldr	r2, [r7, #20]
 801b8e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	68fa      	ldr	r2, [r7, #12]
 801b8e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801b8ea:	683b      	ldr	r3, [r7, #0]
 801b8ec:	685a      	ldr	r2, [r3, #4]
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	693a      	ldr	r2, [r7, #16]
 801b8f6:	621a      	str	r2, [r3, #32]
}
 801b8f8:	bf00      	nop
 801b8fa:	371c      	adds	r7, #28
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b902:	4770      	bx	lr
 801b904:	40012c00 	.word	0x40012c00
 801b908:	40013400 	.word	0x40013400
 801b90c:	40014000 	.word	0x40014000
 801b910:	40014400 	.word	0x40014400
 801b914:	40014800 	.word	0x40014800

0801b918 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801b918:	b480      	push	{r7}
 801b91a:	b087      	sub	sp, #28
 801b91c:	af00      	add	r7, sp, #0
 801b91e:	6078      	str	r0, [r7, #4]
 801b920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	6a1b      	ldr	r3, [r3, #32]
 801b926:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	6a1b      	ldr	r3, [r3, #32]
 801b932:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	685b      	ldr	r3, [r3, #4]
 801b938:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b94a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b94c:	683b      	ldr	r3, [r7, #0]
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	021b      	lsls	r3, r3, #8
 801b952:	68fa      	ldr	r2, [r7, #12]
 801b954:	4313      	orrs	r3, r2
 801b956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801b958:	693b      	ldr	r3, [r7, #16]
 801b95a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801b95e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801b960:	683b      	ldr	r3, [r7, #0]
 801b962:	689b      	ldr	r3, [r3, #8]
 801b964:	051b      	lsls	r3, r3, #20
 801b966:	693a      	ldr	r2, [r7, #16]
 801b968:	4313      	orrs	r3, r2
 801b96a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	4a18      	ldr	r2, [pc, #96]	; (801b9d0 <TIM_OC6_SetConfig+0xb8>)
 801b970:	4293      	cmp	r3, r2
 801b972:	d00f      	beq.n	801b994 <TIM_OC6_SetConfig+0x7c>
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	4a17      	ldr	r2, [pc, #92]	; (801b9d4 <TIM_OC6_SetConfig+0xbc>)
 801b978:	4293      	cmp	r3, r2
 801b97a:	d00b      	beq.n	801b994 <TIM_OC6_SetConfig+0x7c>
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	4a16      	ldr	r2, [pc, #88]	; (801b9d8 <TIM_OC6_SetConfig+0xc0>)
 801b980:	4293      	cmp	r3, r2
 801b982:	d007      	beq.n	801b994 <TIM_OC6_SetConfig+0x7c>
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	4a15      	ldr	r2, [pc, #84]	; (801b9dc <TIM_OC6_SetConfig+0xc4>)
 801b988:	4293      	cmp	r3, r2
 801b98a:	d003      	beq.n	801b994 <TIM_OC6_SetConfig+0x7c>
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	4a14      	ldr	r2, [pc, #80]	; (801b9e0 <TIM_OC6_SetConfig+0xc8>)
 801b990:	4293      	cmp	r3, r2
 801b992:	d109      	bne.n	801b9a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801b994:	697b      	ldr	r3, [r7, #20]
 801b996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b99a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801b99c:	683b      	ldr	r3, [r7, #0]
 801b99e:	695b      	ldr	r3, [r3, #20]
 801b9a0:	029b      	lsls	r3, r3, #10
 801b9a2:	697a      	ldr	r2, [r7, #20]
 801b9a4:	4313      	orrs	r3, r2
 801b9a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	697a      	ldr	r2, [r7, #20]
 801b9ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	68fa      	ldr	r2, [r7, #12]
 801b9b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	685a      	ldr	r2, [r3, #4]
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	693a      	ldr	r2, [r7, #16]
 801b9c0:	621a      	str	r2, [r3, #32]
}
 801b9c2:	bf00      	nop
 801b9c4:	371c      	adds	r7, #28
 801b9c6:	46bd      	mov	sp, r7
 801b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9cc:	4770      	bx	lr
 801b9ce:	bf00      	nop
 801b9d0:	40012c00 	.word	0x40012c00
 801b9d4:	40013400 	.word	0x40013400
 801b9d8:	40014000 	.word	0x40014000
 801b9dc:	40014400 	.word	0x40014400
 801b9e0:	40014800 	.word	0x40014800

0801b9e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801b9e4:	b480      	push	{r7}
 801b9e6:	b087      	sub	sp, #28
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	60f8      	str	r0, [r7, #12]
 801b9ec:	60b9      	str	r1, [r7, #8]
 801b9ee:	607a      	str	r2, [r7, #4]
 801b9f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	6a1b      	ldr	r3, [r3, #32]
 801b9f6:	f023 0201 	bic.w	r2, r3, #1
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	699b      	ldr	r3, [r3, #24]
 801ba02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801ba04:	68fb      	ldr	r3, [r7, #12]
 801ba06:	6a1b      	ldr	r3, [r3, #32]
 801ba08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	4a26      	ldr	r2, [pc, #152]	; (801baa8 <TIM_TI1_SetConfig+0xc4>)
 801ba0e:	4293      	cmp	r3, r2
 801ba10:	d017      	beq.n	801ba42 <TIM_TI1_SetConfig+0x5e>
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ba18:	d013      	beq.n	801ba42 <TIM_TI1_SetConfig+0x5e>
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	4a23      	ldr	r2, [pc, #140]	; (801baac <TIM_TI1_SetConfig+0xc8>)
 801ba1e:	4293      	cmp	r3, r2
 801ba20:	d00f      	beq.n	801ba42 <TIM_TI1_SetConfig+0x5e>
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	4a22      	ldr	r2, [pc, #136]	; (801bab0 <TIM_TI1_SetConfig+0xcc>)
 801ba26:	4293      	cmp	r3, r2
 801ba28:	d00b      	beq.n	801ba42 <TIM_TI1_SetConfig+0x5e>
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	4a21      	ldr	r2, [pc, #132]	; (801bab4 <TIM_TI1_SetConfig+0xd0>)
 801ba2e:	4293      	cmp	r3, r2
 801ba30:	d007      	beq.n	801ba42 <TIM_TI1_SetConfig+0x5e>
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	4a20      	ldr	r2, [pc, #128]	; (801bab8 <TIM_TI1_SetConfig+0xd4>)
 801ba36:	4293      	cmp	r3, r2
 801ba38:	d003      	beq.n	801ba42 <TIM_TI1_SetConfig+0x5e>
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	4a1f      	ldr	r2, [pc, #124]	; (801babc <TIM_TI1_SetConfig+0xd8>)
 801ba3e:	4293      	cmp	r3, r2
 801ba40:	d101      	bne.n	801ba46 <TIM_TI1_SetConfig+0x62>
 801ba42:	2301      	movs	r3, #1
 801ba44:	e000      	b.n	801ba48 <TIM_TI1_SetConfig+0x64>
 801ba46:	2300      	movs	r3, #0
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d008      	beq.n	801ba5e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801ba4c:	697b      	ldr	r3, [r7, #20]
 801ba4e:	f023 0303 	bic.w	r3, r3, #3
 801ba52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801ba54:	697a      	ldr	r2, [r7, #20]
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	4313      	orrs	r3, r2
 801ba5a:	617b      	str	r3, [r7, #20]
 801ba5c:	e003      	b.n	801ba66 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801ba5e:	697b      	ldr	r3, [r7, #20]
 801ba60:	f043 0301 	orr.w	r3, r3, #1
 801ba64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ba66:	697b      	ldr	r3, [r7, #20]
 801ba68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ba6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801ba6e:	683b      	ldr	r3, [r7, #0]
 801ba70:	011b      	lsls	r3, r3, #4
 801ba72:	b2db      	uxtb	r3, r3
 801ba74:	697a      	ldr	r2, [r7, #20]
 801ba76:	4313      	orrs	r3, r2
 801ba78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ba7a:	693b      	ldr	r3, [r7, #16]
 801ba7c:	f023 030a 	bic.w	r3, r3, #10
 801ba80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	f003 030a 	and.w	r3, r3, #10
 801ba88:	693a      	ldr	r2, [r7, #16]
 801ba8a:	4313      	orrs	r3, r2
 801ba8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	697a      	ldr	r2, [r7, #20]
 801ba92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	693a      	ldr	r2, [r7, #16]
 801ba98:	621a      	str	r2, [r3, #32]
}
 801ba9a:	bf00      	nop
 801ba9c:	371c      	adds	r7, #28
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa4:	4770      	bx	lr
 801baa6:	bf00      	nop
 801baa8:	40012c00 	.word	0x40012c00
 801baac:	40000400 	.word	0x40000400
 801bab0:	40000800 	.word	0x40000800
 801bab4:	40000c00 	.word	0x40000c00
 801bab8:	40013400 	.word	0x40013400
 801babc:	40014000 	.word	0x40014000

0801bac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801bac0:	b480      	push	{r7}
 801bac2:	b087      	sub	sp, #28
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	60f8      	str	r0, [r7, #12]
 801bac8:	60b9      	str	r1, [r7, #8]
 801baca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	6a1b      	ldr	r3, [r3, #32]
 801bad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	6a1b      	ldr	r3, [r3, #32]
 801bad6:	f023 0201 	bic.w	r2, r3, #1
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	699b      	ldr	r3, [r3, #24]
 801bae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801bae4:	693b      	ldr	r3, [r7, #16]
 801bae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801baea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	011b      	lsls	r3, r3, #4
 801baf0:	693a      	ldr	r2, [r7, #16]
 801baf2:	4313      	orrs	r3, r2
 801baf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	f023 030a 	bic.w	r3, r3, #10
 801bafc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801bafe:	697a      	ldr	r2, [r7, #20]
 801bb00:	68bb      	ldr	r3, [r7, #8]
 801bb02:	4313      	orrs	r3, r2
 801bb04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	693a      	ldr	r2, [r7, #16]
 801bb0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	697a      	ldr	r2, [r7, #20]
 801bb10:	621a      	str	r2, [r3, #32]
}
 801bb12:	bf00      	nop
 801bb14:	371c      	adds	r7, #28
 801bb16:	46bd      	mov	sp, r7
 801bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb1c:	4770      	bx	lr

0801bb1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801bb1e:	b480      	push	{r7}
 801bb20:	b087      	sub	sp, #28
 801bb22:	af00      	add	r7, sp, #0
 801bb24:	60f8      	str	r0, [r7, #12]
 801bb26:	60b9      	str	r1, [r7, #8]
 801bb28:	607a      	str	r2, [r7, #4]
 801bb2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	6a1b      	ldr	r3, [r3, #32]
 801bb30:	f023 0210 	bic.w	r2, r3, #16
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	699b      	ldr	r3, [r3, #24]
 801bb3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	6a1b      	ldr	r3, [r3, #32]
 801bb42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801bb44:	697b      	ldr	r3, [r7, #20]
 801bb46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bb4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	021b      	lsls	r3, r3, #8
 801bb50:	697a      	ldr	r2, [r7, #20]
 801bb52:	4313      	orrs	r3, r2
 801bb54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801bb56:	697b      	ldr	r3, [r7, #20]
 801bb58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801bb5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801bb5e:	683b      	ldr	r3, [r7, #0]
 801bb60:	031b      	lsls	r3, r3, #12
 801bb62:	b29b      	uxth	r3, r3
 801bb64:	697a      	ldr	r2, [r7, #20]
 801bb66:	4313      	orrs	r3, r2
 801bb68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801bb6a:	693b      	ldr	r3, [r7, #16]
 801bb6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801bb70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801bb72:	68bb      	ldr	r3, [r7, #8]
 801bb74:	011b      	lsls	r3, r3, #4
 801bb76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801bb7a:	693a      	ldr	r2, [r7, #16]
 801bb7c:	4313      	orrs	r3, r2
 801bb7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	697a      	ldr	r2, [r7, #20]
 801bb84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	693a      	ldr	r2, [r7, #16]
 801bb8a:	621a      	str	r2, [r3, #32]
}
 801bb8c:	bf00      	nop
 801bb8e:	371c      	adds	r7, #28
 801bb90:	46bd      	mov	sp, r7
 801bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb96:	4770      	bx	lr

0801bb98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801bb98:	b480      	push	{r7}
 801bb9a:	b087      	sub	sp, #28
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	60f8      	str	r0, [r7, #12]
 801bba0:	60b9      	str	r1, [r7, #8]
 801bba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	6a1b      	ldr	r3, [r3, #32]
 801bba8:	f023 0210 	bic.w	r2, r3, #16
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	699b      	ldr	r3, [r3, #24]
 801bbb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	6a1b      	ldr	r3, [r3, #32]
 801bbba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801bbbc:	697b      	ldr	r3, [r7, #20]
 801bbbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801bbc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	031b      	lsls	r3, r3, #12
 801bbc8:	697a      	ldr	r2, [r7, #20]
 801bbca:	4313      	orrs	r3, r2
 801bbcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801bbce:	693b      	ldr	r3, [r7, #16]
 801bbd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801bbd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801bbd6:	68bb      	ldr	r3, [r7, #8]
 801bbd8:	011b      	lsls	r3, r3, #4
 801bbda:	693a      	ldr	r2, [r7, #16]
 801bbdc:	4313      	orrs	r3, r2
 801bbde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	697a      	ldr	r2, [r7, #20]
 801bbe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	693a      	ldr	r2, [r7, #16]
 801bbea:	621a      	str	r2, [r3, #32]
}
 801bbec:	bf00      	nop
 801bbee:	371c      	adds	r7, #28
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf6:	4770      	bx	lr

0801bbf8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801bbf8:	b480      	push	{r7}
 801bbfa:	b087      	sub	sp, #28
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	60f8      	str	r0, [r7, #12]
 801bc00:	60b9      	str	r1, [r7, #8]
 801bc02:	607a      	str	r2, [r7, #4]
 801bc04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	6a1b      	ldr	r3, [r3, #32]
 801bc0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	69db      	ldr	r3, [r3, #28]
 801bc16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	6a1b      	ldr	r3, [r3, #32]
 801bc1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801bc1e:	697b      	ldr	r3, [r7, #20]
 801bc20:	f023 0303 	bic.w	r3, r3, #3
 801bc24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801bc26:	697a      	ldr	r2, [r7, #20]
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	4313      	orrs	r3, r2
 801bc2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801bc2e:	697b      	ldr	r3, [r7, #20]
 801bc30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801bc34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801bc36:	683b      	ldr	r3, [r7, #0]
 801bc38:	011b      	lsls	r3, r3, #4
 801bc3a:	b2db      	uxtb	r3, r3
 801bc3c:	697a      	ldr	r2, [r7, #20]
 801bc3e:	4313      	orrs	r3, r2
 801bc40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801bc42:	693b      	ldr	r3, [r7, #16]
 801bc44:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801bc48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801bc4a:	68bb      	ldr	r3, [r7, #8]
 801bc4c:	021b      	lsls	r3, r3, #8
 801bc4e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801bc52:	693a      	ldr	r2, [r7, #16]
 801bc54:	4313      	orrs	r3, r2
 801bc56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	697a      	ldr	r2, [r7, #20]
 801bc5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	693a      	ldr	r2, [r7, #16]
 801bc62:	621a      	str	r2, [r3, #32]
}
 801bc64:	bf00      	nop
 801bc66:	371c      	adds	r7, #28
 801bc68:	46bd      	mov	sp, r7
 801bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc6e:	4770      	bx	lr

0801bc70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801bc70:	b480      	push	{r7}
 801bc72:	b087      	sub	sp, #28
 801bc74:	af00      	add	r7, sp, #0
 801bc76:	60f8      	str	r0, [r7, #12]
 801bc78:	60b9      	str	r1, [r7, #8]
 801bc7a:	607a      	str	r2, [r7, #4]
 801bc7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801bc7e:	68fb      	ldr	r3, [r7, #12]
 801bc80:	6a1b      	ldr	r3, [r3, #32]
 801bc82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801bc86:	68fb      	ldr	r3, [r7, #12]
 801bc88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	69db      	ldr	r3, [r3, #28]
 801bc8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	6a1b      	ldr	r3, [r3, #32]
 801bc94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801bc96:	697b      	ldr	r3, [r7, #20]
 801bc98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bc9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	021b      	lsls	r3, r3, #8
 801bca2:	697a      	ldr	r2, [r7, #20]
 801bca4:	4313      	orrs	r3, r2
 801bca6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801bcae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	031b      	lsls	r3, r3, #12
 801bcb4:	b29b      	uxth	r3, r3
 801bcb6:	697a      	ldr	r2, [r7, #20]
 801bcb8:	4313      	orrs	r3, r2
 801bcba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801bcbc:	693b      	ldr	r3, [r7, #16]
 801bcbe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801bcc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801bcc4:	68bb      	ldr	r3, [r7, #8]
 801bcc6:	031b      	lsls	r3, r3, #12
 801bcc8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801bccc:	693a      	ldr	r2, [r7, #16]
 801bcce:	4313      	orrs	r3, r2
 801bcd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801bcd2:	68fb      	ldr	r3, [r7, #12]
 801bcd4:	697a      	ldr	r2, [r7, #20]
 801bcd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	693a      	ldr	r2, [r7, #16]
 801bcdc:	621a      	str	r2, [r3, #32]
}
 801bcde:	bf00      	nop
 801bce0:	371c      	adds	r7, #28
 801bce2:	46bd      	mov	sp, r7
 801bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce8:	4770      	bx	lr

0801bcea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801bcea:	b480      	push	{r7}
 801bcec:	b085      	sub	sp, #20
 801bcee:	af00      	add	r7, sp, #0
 801bcf0:	6078      	str	r0, [r7, #4]
 801bcf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	689b      	ldr	r3, [r3, #8]
 801bcf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801bd00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801bd06:	683a      	ldr	r2, [r7, #0]
 801bd08:	68fb      	ldr	r3, [r7, #12]
 801bd0a:	4313      	orrs	r3, r2
 801bd0c:	f043 0307 	orr.w	r3, r3, #7
 801bd10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	68fa      	ldr	r2, [r7, #12]
 801bd16:	609a      	str	r2, [r3, #8]
}
 801bd18:	bf00      	nop
 801bd1a:	3714      	adds	r7, #20
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd22:	4770      	bx	lr

0801bd24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801bd24:	b480      	push	{r7}
 801bd26:	b087      	sub	sp, #28
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	60f8      	str	r0, [r7, #12]
 801bd2c:	60b9      	str	r1, [r7, #8]
 801bd2e:	607a      	str	r2, [r7, #4]
 801bd30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	689b      	ldr	r3, [r3, #8]
 801bd36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801bd3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801bd40:	683b      	ldr	r3, [r7, #0]
 801bd42:	021a      	lsls	r2, r3, #8
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	431a      	orrs	r2, r3
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	4313      	orrs	r3, r2
 801bd4c:	697a      	ldr	r2, [r7, #20]
 801bd4e:	4313      	orrs	r3, r2
 801bd50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	697a      	ldr	r2, [r7, #20]
 801bd56:	609a      	str	r2, [r3, #8]
}
 801bd58:	bf00      	nop
 801bd5a:	371c      	adds	r7, #28
 801bd5c:	46bd      	mov	sp, r7
 801bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd62:	4770      	bx	lr

0801bd64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801bd64:	b480      	push	{r7}
 801bd66:	b087      	sub	sp, #28
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	60f8      	str	r0, [r7, #12]
 801bd6c:	60b9      	str	r1, [r7, #8]
 801bd6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801bd70:	68bb      	ldr	r3, [r7, #8]
 801bd72:	f003 031f 	and.w	r3, r3, #31
 801bd76:	2201      	movs	r2, #1
 801bd78:	fa02 f303 	lsl.w	r3, r2, r3
 801bd7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	6a1a      	ldr	r2, [r3, #32]
 801bd82:	697b      	ldr	r3, [r7, #20]
 801bd84:	43db      	mvns	r3, r3
 801bd86:	401a      	ands	r2, r3
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	6a1a      	ldr	r2, [r3, #32]
 801bd90:	68bb      	ldr	r3, [r7, #8]
 801bd92:	f003 031f 	and.w	r3, r3, #31
 801bd96:	6879      	ldr	r1, [r7, #4]
 801bd98:	fa01 f303 	lsl.w	r3, r1, r3
 801bd9c:	431a      	orrs	r2, r3
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	621a      	str	r2, [r3, #32]
}
 801bda2:	bf00      	nop
 801bda4:	371c      	adds	r7, #28
 801bda6:	46bd      	mov	sp, r7
 801bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdac:	4770      	bx	lr
	...

0801bdb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801bdb0:	b480      	push	{r7}
 801bdb2:	b085      	sub	sp, #20
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
 801bdb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bdc0:	2b01      	cmp	r3, #1
 801bdc2:	d101      	bne.n	801bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801bdc4:	2302      	movs	r3, #2
 801bdc6:	e068      	b.n	801be9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	2201      	movs	r2, #1
 801bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	2202      	movs	r2, #2
 801bdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	685b      	ldr	r3, [r3, #4]
 801bdde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	689b      	ldr	r3, [r3, #8]
 801bde6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	4a2e      	ldr	r2, [pc, #184]	; (801bea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801bdee:	4293      	cmp	r3, r2
 801bdf0:	d004      	beq.n	801bdfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	4a2d      	ldr	r2, [pc, #180]	; (801beac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801bdf8:	4293      	cmp	r3, r2
 801bdfa:	d108      	bne.n	801be0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801be02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801be04:	683b      	ldr	r3, [r7, #0]
 801be06:	685b      	ldr	r3, [r3, #4]
 801be08:	68fa      	ldr	r2, [r7, #12]
 801be0a:	4313      	orrs	r3, r2
 801be0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801be14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	68fa      	ldr	r2, [r7, #12]
 801be1c:	4313      	orrs	r3, r2
 801be1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	68fa      	ldr	r2, [r7, #12]
 801be26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	4a1e      	ldr	r2, [pc, #120]	; (801bea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801be2e:	4293      	cmp	r3, r2
 801be30:	d01d      	beq.n	801be6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801be3a:	d018      	beq.n	801be6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	4a1b      	ldr	r2, [pc, #108]	; (801beb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801be42:	4293      	cmp	r3, r2
 801be44:	d013      	beq.n	801be6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	4a1a      	ldr	r2, [pc, #104]	; (801beb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801be4c:	4293      	cmp	r3, r2
 801be4e:	d00e      	beq.n	801be6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	4a18      	ldr	r2, [pc, #96]	; (801beb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801be56:	4293      	cmp	r3, r2
 801be58:	d009      	beq.n	801be6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	4a13      	ldr	r2, [pc, #76]	; (801beac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801be60:	4293      	cmp	r3, r2
 801be62:	d004      	beq.n	801be6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	4a14      	ldr	r2, [pc, #80]	; (801bebc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801be6a:	4293      	cmp	r3, r2
 801be6c:	d10c      	bne.n	801be88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801be6e:	68bb      	ldr	r3, [r7, #8]
 801be70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801be74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801be76:	683b      	ldr	r3, [r7, #0]
 801be78:	689b      	ldr	r3, [r3, #8]
 801be7a:	68ba      	ldr	r2, [r7, #8]
 801be7c:	4313      	orrs	r3, r2
 801be7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	68ba      	ldr	r2, [r7, #8]
 801be86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	2201      	movs	r2, #1
 801be8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	2200      	movs	r2, #0
 801be94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801be98:	2300      	movs	r3, #0
}
 801be9a:	4618      	mov	r0, r3
 801be9c:	3714      	adds	r7, #20
 801be9e:	46bd      	mov	sp, r7
 801bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea4:	4770      	bx	lr
 801bea6:	bf00      	nop
 801bea8:	40012c00 	.word	0x40012c00
 801beac:	40013400 	.word	0x40013400
 801beb0:	40000400 	.word	0x40000400
 801beb4:	40000800 	.word	0x40000800
 801beb8:	40000c00 	.word	0x40000c00
 801bebc:	40014000 	.word	0x40014000

0801bec0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801bec0:	b480      	push	{r7}
 801bec2:	b085      	sub	sp, #20
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	6078      	str	r0, [r7, #4]
 801bec8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801beca:	2300      	movs	r3, #0
 801becc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bed4:	2b01      	cmp	r3, #1
 801bed6:	d101      	bne.n	801bedc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801bed8:	2302      	movs	r3, #2
 801beda:	e087      	b.n	801bfec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	2201      	movs	r2, #1
 801bee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801beea:	683b      	ldr	r3, [r7, #0]
 801beec:	68db      	ldr	r3, [r3, #12]
 801beee:	4313      	orrs	r3, r2
 801bef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801bef8:	683b      	ldr	r3, [r7, #0]
 801befa:	689b      	ldr	r3, [r3, #8]
 801befc:	4313      	orrs	r3, r2
 801befe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801bf06:	683b      	ldr	r3, [r7, #0]
 801bf08:	685b      	ldr	r3, [r3, #4]
 801bf0a:	4313      	orrs	r3, r2
 801bf0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801bf14:	683b      	ldr	r3, [r7, #0]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	4313      	orrs	r3, r2
 801bf1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801bf22:	683b      	ldr	r3, [r7, #0]
 801bf24:	691b      	ldr	r3, [r3, #16]
 801bf26:	4313      	orrs	r3, r2
 801bf28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801bf2a:	68fb      	ldr	r3, [r7, #12]
 801bf2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801bf30:	683b      	ldr	r3, [r7, #0]
 801bf32:	695b      	ldr	r3, [r3, #20]
 801bf34:	4313      	orrs	r3, r2
 801bf36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801bf3e:	683b      	ldr	r3, [r7, #0]
 801bf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf42:	4313      	orrs	r3, r2
 801bf44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801bf4c:	683b      	ldr	r3, [r7, #0]
 801bf4e:	699b      	ldr	r3, [r3, #24]
 801bf50:	041b      	lsls	r3, r3, #16
 801bf52:	4313      	orrs	r3, r2
 801bf54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	4a27      	ldr	r2, [pc, #156]	; (801bff8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801bf5c:	4293      	cmp	r3, r2
 801bf5e:	d004      	beq.n	801bf6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	4a25      	ldr	r2, [pc, #148]	; (801bffc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801bf66:	4293      	cmp	r3, r2
 801bf68:	d106      	bne.n	801bf78 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801bf70:	683b      	ldr	r3, [r7, #0]
 801bf72:	69db      	ldr	r3, [r3, #28]
 801bf74:	4313      	orrs	r3, r2
 801bf76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	4a1e      	ldr	r2, [pc, #120]	; (801bff8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801bf7e:	4293      	cmp	r3, r2
 801bf80:	d004      	beq.n	801bf8c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	4a1d      	ldr	r2, [pc, #116]	; (801bffc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801bf88:	4293      	cmp	r3, r2
 801bf8a:	d126      	bne.n	801bfda <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801bf8c:	68fb      	ldr	r3, [r7, #12]
 801bf8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801bf92:	683b      	ldr	r3, [r7, #0]
 801bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf96:	051b      	lsls	r3, r3, #20
 801bf98:	4313      	orrs	r3, r2
 801bf9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801bf9c:	68fb      	ldr	r3, [r7, #12]
 801bf9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	6a1b      	ldr	r3, [r3, #32]
 801bfa6:	4313      	orrs	r3, r2
 801bfa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801bfaa:	68fb      	ldr	r3, [r7, #12]
 801bfac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801bfb0:	683b      	ldr	r3, [r7, #0]
 801bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfb4:	4313      	orrs	r3, r2
 801bfb6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	4a0e      	ldr	r2, [pc, #56]	; (801bff8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801bfbe:	4293      	cmp	r3, r2
 801bfc0:	d004      	beq.n	801bfcc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	4a0d      	ldr	r2, [pc, #52]	; (801bffc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801bfc8:	4293      	cmp	r3, r2
 801bfca:	d106      	bne.n	801bfda <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801bfd2:	683b      	ldr	r3, [r7, #0]
 801bfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bfd6:	4313      	orrs	r3, r2
 801bfd8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	68fa      	ldr	r2, [r7, #12]
 801bfe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	2200      	movs	r2, #0
 801bfe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801bfea:	2300      	movs	r3, #0
}
 801bfec:	4618      	mov	r0, r3
 801bfee:	3714      	adds	r7, #20
 801bff0:	46bd      	mov	sp, r7
 801bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bff6:	4770      	bx	lr
 801bff8:	40012c00 	.word	0x40012c00
 801bffc:	40013400 	.word	0x40013400

0801c000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801c000:	b480      	push	{r7}
 801c002:	b083      	sub	sp, #12
 801c004:	af00      	add	r7, sp, #0
 801c006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801c008:	bf00      	nop
 801c00a:	370c      	adds	r7, #12
 801c00c:	46bd      	mov	sp, r7
 801c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c012:	4770      	bx	lr

0801c014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801c014:	b480      	push	{r7}
 801c016:	b083      	sub	sp, #12
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801c01c:	bf00      	nop
 801c01e:	370c      	adds	r7, #12
 801c020:	46bd      	mov	sp, r7
 801c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c026:	4770      	bx	lr

0801c028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801c028:	b480      	push	{r7}
 801c02a:	b083      	sub	sp, #12
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801c030:	bf00      	nop
 801c032:	370c      	adds	r7, #12
 801c034:	46bd      	mov	sp, r7
 801c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03a:	4770      	bx	lr

0801c03c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b082      	sub	sp, #8
 801c040:	af00      	add	r7, sp, #0
 801c042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d101      	bne.n	801c04e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c04a:	2301      	movs	r3, #1
 801c04c:	e042      	b.n	801c0d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c054:	2b00      	cmp	r3, #0
 801c056:	d106      	bne.n	801c066 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	2200      	movs	r2, #0
 801c05c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801c060:	6878      	ldr	r0, [r7, #4]
 801c062:	f7f7 fa01 	bl	8013468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	2224      	movs	r2, #36	; 0x24
 801c06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	681a      	ldr	r2, [r3, #0]
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	f022 0201 	bic.w	r2, r2, #1
 801c07c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801c07e:	6878      	ldr	r0, [r7, #4]
 801c080:	f000 fc4a 	bl	801c918 <UART_SetConfig>
 801c084:	4603      	mov	r3, r0
 801c086:	2b01      	cmp	r3, #1
 801c088:	d101      	bne.n	801c08e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801c08a:	2301      	movs	r3, #1
 801c08c:	e022      	b.n	801c0d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c092:	2b00      	cmp	r3, #0
 801c094:	d002      	beq.n	801c09c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801c096:	6878      	ldr	r0, [r7, #4]
 801c098:	f000 ff3e 	bl	801cf18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	685a      	ldr	r2, [r3, #4]
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801c0aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	689a      	ldr	r2, [r3, #8]
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801c0ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	681a      	ldr	r2, [r3, #0]
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	f042 0201 	orr.w	r2, r2, #1
 801c0ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801c0cc:	6878      	ldr	r0, [r7, #4]
 801c0ce:	f000 ffc5 	bl	801d05c <UART_CheckIdleState>
 801c0d2:	4603      	mov	r3, r0
}
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	3708      	adds	r7, #8
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	bd80      	pop	{r7, pc}

0801c0dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b08a      	sub	sp, #40	; 0x28
 801c0e0:	af02      	add	r7, sp, #8
 801c0e2:	60f8      	str	r0, [r7, #12]
 801c0e4:	60b9      	str	r1, [r7, #8]
 801c0e6:	603b      	str	r3, [r7, #0]
 801c0e8:	4613      	mov	r3, r2
 801c0ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c0f2:	2b20      	cmp	r3, #32
 801c0f4:	d17b      	bne.n	801c1ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801c0f6:	68bb      	ldr	r3, [r7, #8]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d002      	beq.n	801c102 <HAL_UART_Transmit+0x26>
 801c0fc:	88fb      	ldrh	r3, [r7, #6]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d101      	bne.n	801c106 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801c102:	2301      	movs	r3, #1
 801c104:	e074      	b.n	801c1f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c106:	68fb      	ldr	r3, [r7, #12]
 801c108:	2200      	movs	r2, #0
 801c10a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	2221      	movs	r2, #33	; 0x21
 801c112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801c116:	f7f8 f82b 	bl	8014170 <HAL_GetTick>
 801c11a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	88fa      	ldrh	r2, [r7, #6]
 801c120:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	88fa      	ldrh	r2, [r7, #6]
 801c128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	689b      	ldr	r3, [r3, #8]
 801c130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c134:	d108      	bne.n	801c148 <HAL_UART_Transmit+0x6c>
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	691b      	ldr	r3, [r3, #16]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d104      	bne.n	801c148 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801c13e:	2300      	movs	r3, #0
 801c140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801c142:	68bb      	ldr	r3, [r7, #8]
 801c144:	61bb      	str	r3, [r7, #24]
 801c146:	e003      	b.n	801c150 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801c148:	68bb      	ldr	r3, [r7, #8]
 801c14a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801c14c:	2300      	movs	r3, #0
 801c14e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801c150:	e030      	b.n	801c1b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c152:	683b      	ldr	r3, [r7, #0]
 801c154:	9300      	str	r3, [sp, #0]
 801c156:	697b      	ldr	r3, [r7, #20]
 801c158:	2200      	movs	r2, #0
 801c15a:	2180      	movs	r1, #128	; 0x80
 801c15c:	68f8      	ldr	r0, [r7, #12]
 801c15e:	f001 f827 	bl	801d1b0 <UART_WaitOnFlagUntilTimeout>
 801c162:	4603      	mov	r3, r0
 801c164:	2b00      	cmp	r3, #0
 801c166:	d005      	beq.n	801c174 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	2220      	movs	r2, #32
 801c16c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801c170:	2303      	movs	r3, #3
 801c172:	e03d      	b.n	801c1f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801c174:	69fb      	ldr	r3, [r7, #28]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d10b      	bne.n	801c192 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801c17a:	69bb      	ldr	r3, [r7, #24]
 801c17c:	881b      	ldrh	r3, [r3, #0]
 801c17e:	461a      	mov	r2, r3
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c188:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801c18a:	69bb      	ldr	r3, [r7, #24]
 801c18c:	3302      	adds	r3, #2
 801c18e:	61bb      	str	r3, [r7, #24]
 801c190:	e007      	b.n	801c1a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801c192:	69fb      	ldr	r3, [r7, #28]
 801c194:	781a      	ldrb	r2, [r3, #0]
 801c196:	68fb      	ldr	r3, [r7, #12]
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801c19c:	69fb      	ldr	r3, [r7, #28]
 801c19e:	3301      	adds	r3, #1
 801c1a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801c1a8:	b29b      	uxth	r3, r3
 801c1aa:	3b01      	subs	r3, #1
 801c1ac:	b29a      	uxth	r2, r3
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801c1ba:	b29b      	uxth	r3, r3
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d1c8      	bne.n	801c152 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c1c0:	683b      	ldr	r3, [r7, #0]
 801c1c2:	9300      	str	r3, [sp, #0]
 801c1c4:	697b      	ldr	r3, [r7, #20]
 801c1c6:	2200      	movs	r2, #0
 801c1c8:	2140      	movs	r1, #64	; 0x40
 801c1ca:	68f8      	ldr	r0, [r7, #12]
 801c1cc:	f000 fff0 	bl	801d1b0 <UART_WaitOnFlagUntilTimeout>
 801c1d0:	4603      	mov	r3, r0
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d005      	beq.n	801c1e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	2220      	movs	r2, #32
 801c1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801c1de:	2303      	movs	r3, #3
 801c1e0:	e006      	b.n	801c1f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	2220      	movs	r2, #32
 801c1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801c1ea:	2300      	movs	r3, #0
 801c1ec:	e000      	b.n	801c1f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801c1ee:	2302      	movs	r3, #2
  }
}
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	3720      	adds	r7, #32
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	bd80      	pop	{r7, pc}

0801c1f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c1f8:	b580      	push	{r7, lr}
 801c1fa:	b08a      	sub	sp, #40	; 0x28
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	60f8      	str	r0, [r7, #12]
 801c200:	60b9      	str	r1, [r7, #8]
 801c202:	4613      	mov	r3, r2
 801c204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c20c:	2b20      	cmp	r3, #32
 801c20e:	d137      	bne.n	801c280 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801c210:	68bb      	ldr	r3, [r7, #8]
 801c212:	2b00      	cmp	r3, #0
 801c214:	d002      	beq.n	801c21c <HAL_UART_Receive_IT+0x24>
 801c216:	88fb      	ldrh	r3, [r7, #6]
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d101      	bne.n	801c220 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801c21c:	2301      	movs	r3, #1
 801c21e:	e030      	b.n	801c282 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	2200      	movs	r2, #0
 801c224:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	4a18      	ldr	r2, [pc, #96]	; (801c28c <HAL_UART_Receive_IT+0x94>)
 801c22c:	4293      	cmp	r3, r2
 801c22e:	d01f      	beq.n	801c270 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	685b      	ldr	r3, [r3, #4]
 801c236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d018      	beq.n	801c270 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c244:	697b      	ldr	r3, [r7, #20]
 801c246:	e853 3f00 	ldrex	r3, [r3]
 801c24a:	613b      	str	r3, [r7, #16]
   return(result);
 801c24c:	693b      	ldr	r3, [r7, #16]
 801c24e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801c252:	627b      	str	r3, [r7, #36]	; 0x24
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	461a      	mov	r2, r3
 801c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c25c:	623b      	str	r3, [r7, #32]
 801c25e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c260:	69f9      	ldr	r1, [r7, #28]
 801c262:	6a3a      	ldr	r2, [r7, #32]
 801c264:	e841 2300 	strex	r3, r2, [r1]
 801c268:	61bb      	str	r3, [r7, #24]
   return(result);
 801c26a:	69bb      	ldr	r3, [r7, #24]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d1e6      	bne.n	801c23e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801c270:	88fb      	ldrh	r3, [r7, #6]
 801c272:	461a      	mov	r2, r3
 801c274:	68b9      	ldr	r1, [r7, #8]
 801c276:	68f8      	ldr	r0, [r7, #12]
 801c278:	f001 f802 	bl	801d280 <UART_Start_Receive_IT>
 801c27c:	4603      	mov	r3, r0
 801c27e:	e000      	b.n	801c282 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c280:	2302      	movs	r3, #2
  }
}
 801c282:	4618      	mov	r0, r3
 801c284:	3728      	adds	r7, #40	; 0x28
 801c286:	46bd      	mov	sp, r7
 801c288:	bd80      	pop	{r7, pc}
 801c28a:	bf00      	nop
 801c28c:	40008000 	.word	0x40008000

0801c290 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c290:	b580      	push	{r7, lr}
 801c292:	b0ba      	sub	sp, #232	; 0xe8
 801c294:	af00      	add	r7, sp, #0
 801c296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	69db      	ldr	r3, [r3, #28]
 801c29e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	689b      	ldr	r3, [r3, #8]
 801c2b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801c2b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801c2ba:	f640 030f 	movw	r3, #2063	; 0x80f
 801c2be:	4013      	ands	r3, r2
 801c2c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801c2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d11b      	bne.n	801c304 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801c2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c2d0:	f003 0320 	and.w	r3, r3, #32
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d015      	beq.n	801c304 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801c2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c2dc:	f003 0320 	and.w	r3, r3, #32
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d105      	bne.n	801c2f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801c2e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c2e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d009      	beq.n	801c304 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	f000 82e3 	beq.w	801c8c0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c2fe:	6878      	ldr	r0, [r7, #4]
 801c300:	4798      	blx	r3
      }
      return;
 801c302:	e2dd      	b.n	801c8c0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801c304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c308:	2b00      	cmp	r3, #0
 801c30a:	f000 8123 	beq.w	801c554 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801c30e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c312:	4b8d      	ldr	r3, [pc, #564]	; (801c548 <HAL_UART_IRQHandler+0x2b8>)
 801c314:	4013      	ands	r3, r2
 801c316:	2b00      	cmp	r3, #0
 801c318:	d106      	bne.n	801c328 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801c31a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801c31e:	4b8b      	ldr	r3, [pc, #556]	; (801c54c <HAL_UART_IRQHandler+0x2bc>)
 801c320:	4013      	ands	r3, r2
 801c322:	2b00      	cmp	r3, #0
 801c324:	f000 8116 	beq.w	801c554 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801c328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c32c:	f003 0301 	and.w	r3, r3, #1
 801c330:	2b00      	cmp	r3, #0
 801c332:	d011      	beq.n	801c358 <HAL_UART_IRQHandler+0xc8>
 801c334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d00b      	beq.n	801c358 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	2201      	movs	r2, #1
 801c346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c34e:	f043 0201 	orr.w	r2, r3, #1
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c35c:	f003 0302 	and.w	r3, r3, #2
 801c360:	2b00      	cmp	r3, #0
 801c362:	d011      	beq.n	801c388 <HAL_UART_IRQHandler+0xf8>
 801c364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c368:	f003 0301 	and.w	r3, r3, #1
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d00b      	beq.n	801c388 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	2202      	movs	r2, #2
 801c376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c37e:	f043 0204 	orr.w	r2, r3, #4
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c38c:	f003 0304 	and.w	r3, r3, #4
 801c390:	2b00      	cmp	r3, #0
 801c392:	d011      	beq.n	801c3b8 <HAL_UART_IRQHandler+0x128>
 801c394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c398:	f003 0301 	and.w	r3, r3, #1
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d00b      	beq.n	801c3b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	2204      	movs	r2, #4
 801c3a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c3ae:	f043 0202 	orr.w	r2, r3, #2
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801c3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c3bc:	f003 0308 	and.w	r3, r3, #8
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d017      	beq.n	801c3f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801c3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c3c8:	f003 0320 	and.w	r3, r3, #32
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d105      	bne.n	801c3dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801c3d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c3d4:	4b5c      	ldr	r3, [pc, #368]	; (801c548 <HAL_UART_IRQHandler+0x2b8>)
 801c3d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d00b      	beq.n	801c3f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	2208      	movs	r2, #8
 801c3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c3ea:	f043 0208 	orr.w	r2, r3, #8
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801c3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c3f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d012      	beq.n	801c426 <HAL_UART_IRQHandler+0x196>
 801c400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d00c      	beq.n	801c426 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c41c:	f043 0220 	orr.w	r2, r3, #32
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	f000 8249 	beq.w	801c8c4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801c432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c436:	f003 0320 	and.w	r3, r3, #32
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d013      	beq.n	801c466 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801c43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c442:	f003 0320 	and.w	r3, r3, #32
 801c446:	2b00      	cmp	r3, #0
 801c448:	d105      	bne.n	801c456 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801c44a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c44e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c452:	2b00      	cmp	r3, #0
 801c454:	d007      	beq.n	801c466 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d003      	beq.n	801c466 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c462:	6878      	ldr	r0, [r7, #4]
 801c464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c46c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	689b      	ldr	r3, [r3, #8]
 801c476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c47a:	2b40      	cmp	r3, #64	; 0x40
 801c47c:	d005      	beq.n	801c48a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801c47e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c482:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c486:	2b00      	cmp	r3, #0
 801c488:	d054      	beq.n	801c534 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c48a:	6878      	ldr	r0, [r7, #4]
 801c48c:	f001 f81a 	bl	801d4c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	689b      	ldr	r3, [r3, #8]
 801c496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c49a:	2b40      	cmp	r3, #64	; 0x40
 801c49c:	d146      	bne.n	801c52c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	3308      	adds	r3, #8
 801c4a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c4ac:	e853 3f00 	ldrex	r3, [r3]
 801c4b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801c4b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c4b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c4bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	3308      	adds	r3, #8
 801c4c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c4ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801c4ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c4d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c4da:	e841 2300 	strex	r3, r2, [r1]
 801c4de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801c4e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d1d9      	bne.n	801c49e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d017      	beq.n	801c524 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c4fa:	4a15      	ldr	r2, [pc, #84]	; (801c550 <HAL_UART_IRQHandler+0x2c0>)
 801c4fc:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c504:	4618      	mov	r0, r3
 801c506:	f7f9 fce0 	bl	8015eca <HAL_DMA_Abort_IT>
 801c50a:	4603      	mov	r3, r0
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d019      	beq.n	801c544 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c518:	687a      	ldr	r2, [r7, #4]
 801c51a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801c51e:	4610      	mov	r0, r2
 801c520:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c522:	e00f      	b.n	801c544 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c524:	6878      	ldr	r0, [r7, #4]
 801c526:	f000 f9e1 	bl	801c8ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c52a:	e00b      	b.n	801c544 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c52c:	6878      	ldr	r0, [r7, #4]
 801c52e:	f000 f9dd 	bl	801c8ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c532:	e007      	b.n	801c544 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c534:	6878      	ldr	r0, [r7, #4]
 801c536:	f000 f9d9 	bl	801c8ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	2200      	movs	r2, #0
 801c53e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801c542:	e1bf      	b.n	801c8c4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c544:	bf00      	nop
    return;
 801c546:	e1bd      	b.n	801c8c4 <HAL_UART_IRQHandler+0x634>
 801c548:	10000001 	.word	0x10000001
 801c54c:	04000120 	.word	0x04000120
 801c550:	0801d591 	.word	0x0801d591

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c558:	2b01      	cmp	r3, #1
 801c55a:	f040 8153 	bne.w	801c804 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801c55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c562:	f003 0310 	and.w	r3, r3, #16
 801c566:	2b00      	cmp	r3, #0
 801c568:	f000 814c 	beq.w	801c804 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801c56c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c570:	f003 0310 	and.w	r3, r3, #16
 801c574:	2b00      	cmp	r3, #0
 801c576:	f000 8145 	beq.w	801c804 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	681b      	ldr	r3, [r3, #0]
 801c57e:	2210      	movs	r2, #16
 801c580:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	689b      	ldr	r3, [r3, #8]
 801c588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c58c:	2b40      	cmp	r3, #64	; 0x40
 801c58e:	f040 80bb 	bne.w	801c708 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	685b      	ldr	r3, [r3, #4]
 801c59c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801c5a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	f000 818f 	beq.w	801c8c8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c5b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c5b4:	429a      	cmp	r2, r3
 801c5b6:	f080 8187 	bcs.w	801c8c8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c5c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	f003 0320 	and.w	r3, r3, #32
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	f040 8087 	bne.w	801c6e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c5e4:	e853 3f00 	ldrex	r3, [r3]
 801c5e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801c5ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c5f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c5f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	461a      	mov	r2, r3
 801c5fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801c602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c606:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c60a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c60e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c612:	e841 2300 	strex	r3, r2, [r1]
 801c616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801c61a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d1da      	bne.n	801c5d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	3308      	adds	r3, #8
 801c628:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c62c:	e853 3f00 	ldrex	r3, [r3]
 801c630:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801c632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c634:	f023 0301 	bic.w	r3, r3, #1
 801c638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	3308      	adds	r3, #8
 801c642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c646:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801c64a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c64c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c64e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c652:	e841 2300 	strex	r3, r2, [r1]
 801c656:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801c658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d1e1      	bne.n	801c622 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	3308      	adds	r3, #8
 801c664:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c668:	e853 3f00 	ldrex	r3, [r3]
 801c66c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801c66e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	3308      	adds	r3, #8
 801c67e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801c682:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c684:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c686:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c688:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c68a:	e841 2300 	strex	r3, r2, [r1]
 801c68e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801c690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c692:	2b00      	cmp	r3, #0
 801c694:	d1e3      	bne.n	801c65e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	2220      	movs	r2, #32
 801c69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	2200      	movs	r2, #0
 801c6a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c6ac:	e853 3f00 	ldrex	r3, [r3]
 801c6b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c6b4:	f023 0310 	bic.w	r3, r3, #16
 801c6b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	461a      	mov	r2, r3
 801c6c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801c6c6:	65bb      	str	r3, [r7, #88]	; 0x58
 801c6c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c6cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c6ce:	e841 2300 	strex	r3, r2, [r1]
 801c6d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c6d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d1e4      	bne.n	801c6a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f7f9 fb96 	bl	8015e12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	2202      	movs	r2, #2
 801c6ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c6f8:	b29b      	uxth	r3, r3
 801c6fa:	1ad3      	subs	r3, r2, r3
 801c6fc:	b29b      	uxth	r3, r3
 801c6fe:	4619      	mov	r1, r3
 801c700:	6878      	ldr	r0, [r7, #4]
 801c702:	f000 f8fd 	bl	801c900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c706:	e0df      	b.n	801c8c8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c714:	b29b      	uxth	r3, r3
 801c716:	1ad3      	subs	r3, r2, r3
 801c718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c722:	b29b      	uxth	r3, r3
 801c724:	2b00      	cmp	r3, #0
 801c726:	f000 80d1 	beq.w	801c8cc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801c72a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c72e:	2b00      	cmp	r3, #0
 801c730:	f000 80cc 	beq.w	801c8cc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c73c:	e853 3f00 	ldrex	r3, [r3]
 801c740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	461a      	mov	r2, r3
 801c752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c756:	647b      	str	r3, [r7, #68]	; 0x44
 801c758:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c75a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c75c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c75e:	e841 2300 	strex	r3, r2, [r1]
 801c762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c766:	2b00      	cmp	r3, #0
 801c768:	d1e4      	bne.n	801c734 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	3308      	adds	r3, #8
 801c770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c774:	e853 3f00 	ldrex	r3, [r3]
 801c778:	623b      	str	r3, [r7, #32]
   return(result);
 801c77a:	6a3b      	ldr	r3, [r7, #32]
 801c77c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c780:	f023 0301 	bic.w	r3, r3, #1
 801c784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	3308      	adds	r3, #8
 801c78e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c792:	633a      	str	r2, [r7, #48]	; 0x30
 801c794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c79a:	e841 2300 	strex	r3, r2, [r1]
 801c79e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d1e1      	bne.n	801c76a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	2220      	movs	r2, #32
 801c7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7c0:	693b      	ldr	r3, [r7, #16]
 801c7c2:	e853 3f00 	ldrex	r3, [r3]
 801c7c6:	60fb      	str	r3, [r7, #12]
   return(result);
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	f023 0310 	bic.w	r3, r3, #16
 801c7ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	461a      	mov	r2, r3
 801c7d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c7dc:	61fb      	str	r3, [r7, #28]
 801c7de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7e0:	69b9      	ldr	r1, [r7, #24]
 801c7e2:	69fa      	ldr	r2, [r7, #28]
 801c7e4:	e841 2300 	strex	r3, r2, [r1]
 801c7e8:	617b      	str	r3, [r7, #20]
   return(result);
 801c7ea:	697b      	ldr	r3, [r7, #20]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d1e4      	bne.n	801c7ba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	2202      	movs	r2, #2
 801c7f4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c7f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c7fa:	4619      	mov	r1, r3
 801c7fc:	6878      	ldr	r0, [r7, #4]
 801c7fe:	f000 f87f 	bl	801c900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c802:	e063      	b.n	801c8cc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801c804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d00e      	beq.n	801c82e <HAL_UART_IRQHandler+0x59e>
 801c810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d008      	beq.n	801c82e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801c824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801c826:	6878      	ldr	r0, [r7, #4]
 801c828:	f001 fc10 	bl	801e04c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c82c:	e051      	b.n	801c8d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801c82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c836:	2b00      	cmp	r3, #0
 801c838:	d014      	beq.n	801c864 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801c83a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c842:	2b00      	cmp	r3, #0
 801c844:	d105      	bne.n	801c852 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801c846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c84a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d008      	beq.n	801c864 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c856:	2b00      	cmp	r3, #0
 801c858:	d03a      	beq.n	801c8d0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c85e:	6878      	ldr	r0, [r7, #4]
 801c860:	4798      	blx	r3
    }
    return;
 801c862:	e035      	b.n	801c8d0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801c864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d009      	beq.n	801c884 <HAL_UART_IRQHandler+0x5f4>
 801c870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d003      	beq.n	801c884 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801c87c:	6878      	ldr	r0, [r7, #4]
 801c87e:	f000 fe9d 	bl	801d5bc <UART_EndTransmit_IT>
    return;
 801c882:	e026      	b.n	801c8d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801c884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d009      	beq.n	801c8a4 <HAL_UART_IRQHandler+0x614>
 801c890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c894:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d003      	beq.n	801c8a4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801c89c:	6878      	ldr	r0, [r7, #4]
 801c89e:	f001 fbe9 	bl	801e074 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c8a2:	e016      	b.n	801c8d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801c8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c8a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d010      	beq.n	801c8d2 <HAL_UART_IRQHandler+0x642>
 801c8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	da0c      	bge.n	801c8d2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	f001 fbd1 	bl	801e060 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c8be:	e008      	b.n	801c8d2 <HAL_UART_IRQHandler+0x642>
      return;
 801c8c0:	bf00      	nop
 801c8c2:	e006      	b.n	801c8d2 <HAL_UART_IRQHandler+0x642>
    return;
 801c8c4:	bf00      	nop
 801c8c6:	e004      	b.n	801c8d2 <HAL_UART_IRQHandler+0x642>
      return;
 801c8c8:	bf00      	nop
 801c8ca:	e002      	b.n	801c8d2 <HAL_UART_IRQHandler+0x642>
      return;
 801c8cc:	bf00      	nop
 801c8ce:	e000      	b.n	801c8d2 <HAL_UART_IRQHandler+0x642>
    return;
 801c8d0:	bf00      	nop
  }
}
 801c8d2:	37e8      	adds	r7, #232	; 0xe8
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c8d8:	b480      	push	{r7}
 801c8da:	b083      	sub	sp, #12
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801c8e0:	bf00      	nop
 801c8e2:	370c      	adds	r7, #12
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ea:	4770      	bx	lr

0801c8ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c8ec:	b480      	push	{r7}
 801c8ee:	b083      	sub	sp, #12
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801c8f4:	bf00      	nop
 801c8f6:	370c      	adds	r7, #12
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8fe:	4770      	bx	lr

0801c900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801c900:	b480      	push	{r7}
 801c902:	b083      	sub	sp, #12
 801c904:	af00      	add	r7, sp, #0
 801c906:	6078      	str	r0, [r7, #4]
 801c908:	460b      	mov	r3, r1
 801c90a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801c90c:	bf00      	nop
 801c90e:	370c      	adds	r7, #12
 801c910:	46bd      	mov	sp, r7
 801c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c916:	4770      	bx	lr

0801c918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c91c:	b08c      	sub	sp, #48	; 0x30
 801c91e:	af00      	add	r7, sp, #0
 801c920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801c922:	2300      	movs	r3, #0
 801c924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801c928:	697b      	ldr	r3, [r7, #20]
 801c92a:	689a      	ldr	r2, [r3, #8]
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	691b      	ldr	r3, [r3, #16]
 801c930:	431a      	orrs	r2, r3
 801c932:	697b      	ldr	r3, [r7, #20]
 801c934:	695b      	ldr	r3, [r3, #20]
 801c936:	431a      	orrs	r2, r3
 801c938:	697b      	ldr	r3, [r7, #20]
 801c93a:	69db      	ldr	r3, [r3, #28]
 801c93c:	4313      	orrs	r3, r2
 801c93e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801c940:	697b      	ldr	r3, [r7, #20]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	681a      	ldr	r2, [r3, #0]
 801c946:	4baa      	ldr	r3, [pc, #680]	; (801cbf0 <UART_SetConfig+0x2d8>)
 801c948:	4013      	ands	r3, r2
 801c94a:	697a      	ldr	r2, [r7, #20]
 801c94c:	6812      	ldr	r2, [r2, #0]
 801c94e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c950:	430b      	orrs	r3, r1
 801c952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c954:	697b      	ldr	r3, [r7, #20]
 801c956:	681b      	ldr	r3, [r3, #0]
 801c958:	685b      	ldr	r3, [r3, #4]
 801c95a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801c95e:	697b      	ldr	r3, [r7, #20]
 801c960:	68da      	ldr	r2, [r3, #12]
 801c962:	697b      	ldr	r3, [r7, #20]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	430a      	orrs	r2, r1
 801c968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801c96a:	697b      	ldr	r3, [r7, #20]
 801c96c:	699b      	ldr	r3, [r3, #24]
 801c96e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801c970:	697b      	ldr	r3, [r7, #20]
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	4a9f      	ldr	r2, [pc, #636]	; (801cbf4 <UART_SetConfig+0x2dc>)
 801c976:	4293      	cmp	r3, r2
 801c978:	d004      	beq.n	801c984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801c97a:	697b      	ldr	r3, [r7, #20]
 801c97c:	6a1b      	ldr	r3, [r3, #32]
 801c97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c980:	4313      	orrs	r3, r2
 801c982:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801c984:	697b      	ldr	r3, [r7, #20]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	689b      	ldr	r3, [r3, #8]
 801c98a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801c98e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801c992:	697a      	ldr	r2, [r7, #20]
 801c994:	6812      	ldr	r2, [r2, #0]
 801c996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c998:	430b      	orrs	r3, r1
 801c99a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801c99c:	697b      	ldr	r3, [r7, #20]
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9a2:	f023 010f 	bic.w	r1, r3, #15
 801c9a6:	697b      	ldr	r3, [r7, #20]
 801c9a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c9aa:	697b      	ldr	r3, [r7, #20]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	430a      	orrs	r2, r1
 801c9b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c9b2:	697b      	ldr	r3, [r7, #20]
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	4a90      	ldr	r2, [pc, #576]	; (801cbf8 <UART_SetConfig+0x2e0>)
 801c9b8:	4293      	cmp	r3, r2
 801c9ba:	d125      	bne.n	801ca08 <UART_SetConfig+0xf0>
 801c9bc:	4b8f      	ldr	r3, [pc, #572]	; (801cbfc <UART_SetConfig+0x2e4>)
 801c9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c9c2:	f003 0303 	and.w	r3, r3, #3
 801c9c6:	2b03      	cmp	r3, #3
 801c9c8:	d81a      	bhi.n	801ca00 <UART_SetConfig+0xe8>
 801c9ca:	a201      	add	r2, pc, #4	; (adr r2, 801c9d0 <UART_SetConfig+0xb8>)
 801c9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c9d0:	0801c9e1 	.word	0x0801c9e1
 801c9d4:	0801c9f1 	.word	0x0801c9f1
 801c9d8:	0801c9e9 	.word	0x0801c9e9
 801c9dc:	0801c9f9 	.word	0x0801c9f9
 801c9e0:	2301      	movs	r3, #1
 801c9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c9e6:	e116      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801c9e8:	2302      	movs	r3, #2
 801c9ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c9ee:	e112      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801c9f0:	2304      	movs	r3, #4
 801c9f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c9f6:	e10e      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801c9f8:	2308      	movs	r3, #8
 801c9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c9fe:	e10a      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801ca00:	2310      	movs	r3, #16
 801ca02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ca06:	e106      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801ca08:	697b      	ldr	r3, [r7, #20]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	4a7c      	ldr	r2, [pc, #496]	; (801cc00 <UART_SetConfig+0x2e8>)
 801ca0e:	4293      	cmp	r3, r2
 801ca10:	d138      	bne.n	801ca84 <UART_SetConfig+0x16c>
 801ca12:	4b7a      	ldr	r3, [pc, #488]	; (801cbfc <UART_SetConfig+0x2e4>)
 801ca14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca18:	f003 030c 	and.w	r3, r3, #12
 801ca1c:	2b0c      	cmp	r3, #12
 801ca1e:	d82d      	bhi.n	801ca7c <UART_SetConfig+0x164>
 801ca20:	a201      	add	r2, pc, #4	; (adr r2, 801ca28 <UART_SetConfig+0x110>)
 801ca22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca26:	bf00      	nop
 801ca28:	0801ca5d 	.word	0x0801ca5d
 801ca2c:	0801ca7d 	.word	0x0801ca7d
 801ca30:	0801ca7d 	.word	0x0801ca7d
 801ca34:	0801ca7d 	.word	0x0801ca7d
 801ca38:	0801ca6d 	.word	0x0801ca6d
 801ca3c:	0801ca7d 	.word	0x0801ca7d
 801ca40:	0801ca7d 	.word	0x0801ca7d
 801ca44:	0801ca7d 	.word	0x0801ca7d
 801ca48:	0801ca65 	.word	0x0801ca65
 801ca4c:	0801ca7d 	.word	0x0801ca7d
 801ca50:	0801ca7d 	.word	0x0801ca7d
 801ca54:	0801ca7d 	.word	0x0801ca7d
 801ca58:	0801ca75 	.word	0x0801ca75
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ca62:	e0d8      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801ca64:	2302      	movs	r3, #2
 801ca66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ca6a:	e0d4      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801ca6c:	2304      	movs	r3, #4
 801ca6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ca72:	e0d0      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801ca74:	2308      	movs	r3, #8
 801ca76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ca7a:	e0cc      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801ca7c:	2310      	movs	r3, #16
 801ca7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ca82:	e0c8      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801ca84:	697b      	ldr	r3, [r7, #20]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	4a5e      	ldr	r2, [pc, #376]	; (801cc04 <UART_SetConfig+0x2ec>)
 801ca8a:	4293      	cmp	r3, r2
 801ca8c:	d125      	bne.n	801cada <UART_SetConfig+0x1c2>
 801ca8e:	4b5b      	ldr	r3, [pc, #364]	; (801cbfc <UART_SetConfig+0x2e4>)
 801ca90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ca98:	2b30      	cmp	r3, #48	; 0x30
 801ca9a:	d016      	beq.n	801caca <UART_SetConfig+0x1b2>
 801ca9c:	2b30      	cmp	r3, #48	; 0x30
 801ca9e:	d818      	bhi.n	801cad2 <UART_SetConfig+0x1ba>
 801caa0:	2b20      	cmp	r3, #32
 801caa2:	d00a      	beq.n	801caba <UART_SetConfig+0x1a2>
 801caa4:	2b20      	cmp	r3, #32
 801caa6:	d814      	bhi.n	801cad2 <UART_SetConfig+0x1ba>
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d002      	beq.n	801cab2 <UART_SetConfig+0x19a>
 801caac:	2b10      	cmp	r3, #16
 801caae:	d008      	beq.n	801cac2 <UART_SetConfig+0x1aa>
 801cab0:	e00f      	b.n	801cad2 <UART_SetConfig+0x1ba>
 801cab2:	2300      	movs	r3, #0
 801cab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cab8:	e0ad      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801caba:	2302      	movs	r3, #2
 801cabc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cac0:	e0a9      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cac2:	2304      	movs	r3, #4
 801cac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cac8:	e0a5      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801caca:	2308      	movs	r3, #8
 801cacc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cad0:	e0a1      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cad2:	2310      	movs	r3, #16
 801cad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cad8:	e09d      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cada:	697b      	ldr	r3, [r7, #20]
 801cadc:	681b      	ldr	r3, [r3, #0]
 801cade:	4a4a      	ldr	r2, [pc, #296]	; (801cc08 <UART_SetConfig+0x2f0>)
 801cae0:	4293      	cmp	r3, r2
 801cae2:	d125      	bne.n	801cb30 <UART_SetConfig+0x218>
 801cae4:	4b45      	ldr	r3, [pc, #276]	; (801cbfc <UART_SetConfig+0x2e4>)
 801cae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801caea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801caee:	2bc0      	cmp	r3, #192	; 0xc0
 801caf0:	d016      	beq.n	801cb20 <UART_SetConfig+0x208>
 801caf2:	2bc0      	cmp	r3, #192	; 0xc0
 801caf4:	d818      	bhi.n	801cb28 <UART_SetConfig+0x210>
 801caf6:	2b80      	cmp	r3, #128	; 0x80
 801caf8:	d00a      	beq.n	801cb10 <UART_SetConfig+0x1f8>
 801cafa:	2b80      	cmp	r3, #128	; 0x80
 801cafc:	d814      	bhi.n	801cb28 <UART_SetConfig+0x210>
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d002      	beq.n	801cb08 <UART_SetConfig+0x1f0>
 801cb02:	2b40      	cmp	r3, #64	; 0x40
 801cb04:	d008      	beq.n	801cb18 <UART_SetConfig+0x200>
 801cb06:	e00f      	b.n	801cb28 <UART_SetConfig+0x210>
 801cb08:	2300      	movs	r3, #0
 801cb0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb0e:	e082      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb10:	2302      	movs	r3, #2
 801cb12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb16:	e07e      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb18:	2304      	movs	r3, #4
 801cb1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb1e:	e07a      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb20:	2308      	movs	r3, #8
 801cb22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb26:	e076      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb28:	2310      	movs	r3, #16
 801cb2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb2e:	e072      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb30:	697b      	ldr	r3, [r7, #20]
 801cb32:	681b      	ldr	r3, [r3, #0]
 801cb34:	4a35      	ldr	r2, [pc, #212]	; (801cc0c <UART_SetConfig+0x2f4>)
 801cb36:	4293      	cmp	r3, r2
 801cb38:	d12a      	bne.n	801cb90 <UART_SetConfig+0x278>
 801cb3a:	4b30      	ldr	r3, [pc, #192]	; (801cbfc <UART_SetConfig+0x2e4>)
 801cb3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cb44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cb48:	d01a      	beq.n	801cb80 <UART_SetConfig+0x268>
 801cb4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cb4e:	d81b      	bhi.n	801cb88 <UART_SetConfig+0x270>
 801cb50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb54:	d00c      	beq.n	801cb70 <UART_SetConfig+0x258>
 801cb56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb5a:	d815      	bhi.n	801cb88 <UART_SetConfig+0x270>
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d003      	beq.n	801cb68 <UART_SetConfig+0x250>
 801cb60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb64:	d008      	beq.n	801cb78 <UART_SetConfig+0x260>
 801cb66:	e00f      	b.n	801cb88 <UART_SetConfig+0x270>
 801cb68:	2300      	movs	r3, #0
 801cb6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb6e:	e052      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb70:	2302      	movs	r3, #2
 801cb72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb76:	e04e      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb78:	2304      	movs	r3, #4
 801cb7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb7e:	e04a      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb80:	2308      	movs	r3, #8
 801cb82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb86:	e046      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb88:	2310      	movs	r3, #16
 801cb8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cb8e:	e042      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cb90:	697b      	ldr	r3, [r7, #20]
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	4a17      	ldr	r2, [pc, #92]	; (801cbf4 <UART_SetConfig+0x2dc>)
 801cb96:	4293      	cmp	r3, r2
 801cb98:	d13a      	bne.n	801cc10 <UART_SetConfig+0x2f8>
 801cb9a:	4b18      	ldr	r3, [pc, #96]	; (801cbfc <UART_SetConfig+0x2e4>)
 801cb9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801cba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cba8:	d01a      	beq.n	801cbe0 <UART_SetConfig+0x2c8>
 801cbaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cbae:	d81b      	bhi.n	801cbe8 <UART_SetConfig+0x2d0>
 801cbb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cbb4:	d00c      	beq.n	801cbd0 <UART_SetConfig+0x2b8>
 801cbb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cbba:	d815      	bhi.n	801cbe8 <UART_SetConfig+0x2d0>
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d003      	beq.n	801cbc8 <UART_SetConfig+0x2b0>
 801cbc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cbc4:	d008      	beq.n	801cbd8 <UART_SetConfig+0x2c0>
 801cbc6:	e00f      	b.n	801cbe8 <UART_SetConfig+0x2d0>
 801cbc8:	2300      	movs	r3, #0
 801cbca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cbce:	e022      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cbd0:	2302      	movs	r3, #2
 801cbd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cbd6:	e01e      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cbd8:	2304      	movs	r3, #4
 801cbda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cbde:	e01a      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cbe0:	2308      	movs	r3, #8
 801cbe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cbe6:	e016      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cbe8:	2310      	movs	r3, #16
 801cbea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cbee:	e012      	b.n	801cc16 <UART_SetConfig+0x2fe>
 801cbf0:	cfff69f3 	.word	0xcfff69f3
 801cbf4:	40008000 	.word	0x40008000
 801cbf8:	40013800 	.word	0x40013800
 801cbfc:	40021000 	.word	0x40021000
 801cc00:	40004400 	.word	0x40004400
 801cc04:	40004800 	.word	0x40004800
 801cc08:	40004c00 	.word	0x40004c00
 801cc0c:	40005000 	.word	0x40005000
 801cc10:	2310      	movs	r3, #16
 801cc12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801cc16:	697b      	ldr	r3, [r7, #20]
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	4ab0      	ldr	r2, [pc, #704]	; (801cedc <UART_SetConfig+0x5c4>)
 801cc1c:	4293      	cmp	r3, r2
 801cc1e:	f040 809b 	bne.w	801cd58 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801cc22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801cc26:	2b08      	cmp	r3, #8
 801cc28:	d827      	bhi.n	801cc7a <UART_SetConfig+0x362>
 801cc2a:	a201      	add	r2, pc, #4	; (adr r2, 801cc30 <UART_SetConfig+0x318>)
 801cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc30:	0801cc55 	.word	0x0801cc55
 801cc34:	0801cc5d 	.word	0x0801cc5d
 801cc38:	0801cc65 	.word	0x0801cc65
 801cc3c:	0801cc7b 	.word	0x0801cc7b
 801cc40:	0801cc6b 	.word	0x0801cc6b
 801cc44:	0801cc7b 	.word	0x0801cc7b
 801cc48:	0801cc7b 	.word	0x0801cc7b
 801cc4c:	0801cc7b 	.word	0x0801cc7b
 801cc50:	0801cc73 	.word	0x0801cc73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801cc54:	f7fb fb60 	bl	8018318 <HAL_RCC_GetPCLK1Freq>
 801cc58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801cc5a:	e014      	b.n	801cc86 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801cc5c:	f7fb fb70 	bl	8018340 <HAL_RCC_GetPCLK2Freq>
 801cc60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801cc62:	e010      	b.n	801cc86 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801cc64:	4b9e      	ldr	r3, [pc, #632]	; (801cee0 <UART_SetConfig+0x5c8>)
 801cc66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801cc68:	e00d      	b.n	801cc86 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801cc6a:	f7fb faa3 	bl	80181b4 <HAL_RCC_GetSysClockFreq>
 801cc6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801cc70:	e009      	b.n	801cc86 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cc72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cc76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801cc78:	e005      	b.n	801cc86 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 801cc7a:	2300      	movs	r3, #0
 801cc7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801cc7e:	2301      	movs	r3, #1
 801cc80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801cc84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	f000 8130 	beq.w	801ceee <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801cc8e:	697b      	ldr	r3, [r7, #20]
 801cc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc92:	4a94      	ldr	r2, [pc, #592]	; (801cee4 <UART_SetConfig+0x5cc>)
 801cc94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801cc98:	461a      	mov	r2, r3
 801cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc9c:	fbb3 f3f2 	udiv	r3, r3, r2
 801cca0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801cca2:	697b      	ldr	r3, [r7, #20]
 801cca4:	685a      	ldr	r2, [r3, #4]
 801cca6:	4613      	mov	r3, r2
 801cca8:	005b      	lsls	r3, r3, #1
 801ccaa:	4413      	add	r3, r2
 801ccac:	69ba      	ldr	r2, [r7, #24]
 801ccae:	429a      	cmp	r2, r3
 801ccb0:	d305      	bcc.n	801ccbe <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801ccb2:	697b      	ldr	r3, [r7, #20]
 801ccb4:	685b      	ldr	r3, [r3, #4]
 801ccb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801ccb8:	69ba      	ldr	r2, [r7, #24]
 801ccba:	429a      	cmp	r2, r3
 801ccbc:	d903      	bls.n	801ccc6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 801ccbe:	2301      	movs	r3, #1
 801ccc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801ccc4:	e113      	b.n	801ceee <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ccc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccc8:	2200      	movs	r2, #0
 801ccca:	60bb      	str	r3, [r7, #8]
 801cccc:	60fa      	str	r2, [r7, #12]
 801ccce:	697b      	ldr	r3, [r7, #20]
 801ccd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccd2:	4a84      	ldr	r2, [pc, #528]	; (801cee4 <UART_SetConfig+0x5cc>)
 801ccd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ccd8:	b29b      	uxth	r3, r3
 801ccda:	2200      	movs	r2, #0
 801ccdc:	603b      	str	r3, [r7, #0]
 801ccde:	607a      	str	r2, [r7, #4]
 801cce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cce4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801cce8:	f7e3 ffc0 	bl	8000c6c <__aeabi_uldivmod>
 801ccec:	4602      	mov	r2, r0
 801ccee:	460b      	mov	r3, r1
 801ccf0:	4610      	mov	r0, r2
 801ccf2:	4619      	mov	r1, r3
 801ccf4:	f04f 0200 	mov.w	r2, #0
 801ccf8:	f04f 0300 	mov.w	r3, #0
 801ccfc:	020b      	lsls	r3, r1, #8
 801ccfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801cd02:	0202      	lsls	r2, r0, #8
 801cd04:	6979      	ldr	r1, [r7, #20]
 801cd06:	6849      	ldr	r1, [r1, #4]
 801cd08:	0849      	lsrs	r1, r1, #1
 801cd0a:	2000      	movs	r0, #0
 801cd0c:	460c      	mov	r4, r1
 801cd0e:	4605      	mov	r5, r0
 801cd10:	eb12 0804 	adds.w	r8, r2, r4
 801cd14:	eb43 0905 	adc.w	r9, r3, r5
 801cd18:	697b      	ldr	r3, [r7, #20]
 801cd1a:	685b      	ldr	r3, [r3, #4]
 801cd1c:	2200      	movs	r2, #0
 801cd1e:	469a      	mov	sl, r3
 801cd20:	4693      	mov	fp, r2
 801cd22:	4652      	mov	r2, sl
 801cd24:	465b      	mov	r3, fp
 801cd26:	4640      	mov	r0, r8
 801cd28:	4649      	mov	r1, r9
 801cd2a:	f7e3 ff9f 	bl	8000c6c <__aeabi_uldivmod>
 801cd2e:	4602      	mov	r2, r0
 801cd30:	460b      	mov	r3, r1
 801cd32:	4613      	mov	r3, r2
 801cd34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801cd36:	6a3b      	ldr	r3, [r7, #32]
 801cd38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cd3c:	d308      	bcc.n	801cd50 <UART_SetConfig+0x438>
 801cd3e:	6a3b      	ldr	r3, [r7, #32]
 801cd40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cd44:	d204      	bcs.n	801cd50 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 801cd46:	697b      	ldr	r3, [r7, #20]
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	6a3a      	ldr	r2, [r7, #32]
 801cd4c:	60da      	str	r2, [r3, #12]
 801cd4e:	e0ce      	b.n	801ceee <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 801cd50:	2301      	movs	r3, #1
 801cd52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801cd56:	e0ca      	b.n	801ceee <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801cd58:	697b      	ldr	r3, [r7, #20]
 801cd5a:	69db      	ldr	r3, [r3, #28]
 801cd5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cd60:	d166      	bne.n	801ce30 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 801cd62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801cd66:	2b08      	cmp	r3, #8
 801cd68:	d827      	bhi.n	801cdba <UART_SetConfig+0x4a2>
 801cd6a:	a201      	add	r2, pc, #4	; (adr r2, 801cd70 <UART_SetConfig+0x458>)
 801cd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd70:	0801cd95 	.word	0x0801cd95
 801cd74:	0801cd9d 	.word	0x0801cd9d
 801cd78:	0801cda5 	.word	0x0801cda5
 801cd7c:	0801cdbb 	.word	0x0801cdbb
 801cd80:	0801cdab 	.word	0x0801cdab
 801cd84:	0801cdbb 	.word	0x0801cdbb
 801cd88:	0801cdbb 	.word	0x0801cdbb
 801cd8c:	0801cdbb 	.word	0x0801cdbb
 801cd90:	0801cdb3 	.word	0x0801cdb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801cd94:	f7fb fac0 	bl	8018318 <HAL_RCC_GetPCLK1Freq>
 801cd98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801cd9a:	e014      	b.n	801cdc6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801cd9c:	f7fb fad0 	bl	8018340 <HAL_RCC_GetPCLK2Freq>
 801cda0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801cda2:	e010      	b.n	801cdc6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801cda4:	4b4e      	ldr	r3, [pc, #312]	; (801cee0 <UART_SetConfig+0x5c8>)
 801cda6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801cda8:	e00d      	b.n	801cdc6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801cdaa:	f7fb fa03 	bl	80181b4 <HAL_RCC_GetSysClockFreq>
 801cdae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801cdb0:	e009      	b.n	801cdc6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cdb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cdb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801cdb8:	e005      	b.n	801cdc6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 801cdba:	2300      	movs	r3, #0
 801cdbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801cdbe:	2301      	movs	r3, #1
 801cdc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801cdc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	f000 8090 	beq.w	801ceee <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdd2:	4a44      	ldr	r2, [pc, #272]	; (801cee4 <UART_SetConfig+0x5cc>)
 801cdd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801cdd8:	461a      	mov	r2, r3
 801cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cddc:	fbb3 f3f2 	udiv	r3, r3, r2
 801cde0:	005a      	lsls	r2, r3, #1
 801cde2:	697b      	ldr	r3, [r7, #20]
 801cde4:	685b      	ldr	r3, [r3, #4]
 801cde6:	085b      	lsrs	r3, r3, #1
 801cde8:	441a      	add	r2, r3
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	685b      	ldr	r3, [r3, #4]
 801cdee:	fbb2 f3f3 	udiv	r3, r2, r3
 801cdf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801cdf4:	6a3b      	ldr	r3, [r7, #32]
 801cdf6:	2b0f      	cmp	r3, #15
 801cdf8:	d916      	bls.n	801ce28 <UART_SetConfig+0x510>
 801cdfa:	6a3b      	ldr	r3, [r7, #32]
 801cdfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ce00:	d212      	bcs.n	801ce28 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801ce02:	6a3b      	ldr	r3, [r7, #32]
 801ce04:	b29b      	uxth	r3, r3
 801ce06:	f023 030f 	bic.w	r3, r3, #15
 801ce0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ce0c:	6a3b      	ldr	r3, [r7, #32]
 801ce0e:	085b      	lsrs	r3, r3, #1
 801ce10:	b29b      	uxth	r3, r3
 801ce12:	f003 0307 	and.w	r3, r3, #7
 801ce16:	b29a      	uxth	r2, r3
 801ce18:	8bfb      	ldrh	r3, [r7, #30]
 801ce1a:	4313      	orrs	r3, r2
 801ce1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801ce1e:	697b      	ldr	r3, [r7, #20]
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	8bfa      	ldrh	r2, [r7, #30]
 801ce24:	60da      	str	r2, [r3, #12]
 801ce26:	e062      	b.n	801ceee <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 801ce28:	2301      	movs	r3, #1
 801ce2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801ce2e:	e05e      	b.n	801ceee <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 801ce30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ce34:	2b08      	cmp	r3, #8
 801ce36:	d828      	bhi.n	801ce8a <UART_SetConfig+0x572>
 801ce38:	a201      	add	r2, pc, #4	; (adr r2, 801ce40 <UART_SetConfig+0x528>)
 801ce3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce3e:	bf00      	nop
 801ce40:	0801ce65 	.word	0x0801ce65
 801ce44:	0801ce6d 	.word	0x0801ce6d
 801ce48:	0801ce75 	.word	0x0801ce75
 801ce4c:	0801ce8b 	.word	0x0801ce8b
 801ce50:	0801ce7b 	.word	0x0801ce7b
 801ce54:	0801ce8b 	.word	0x0801ce8b
 801ce58:	0801ce8b 	.word	0x0801ce8b
 801ce5c:	0801ce8b 	.word	0x0801ce8b
 801ce60:	0801ce83 	.word	0x0801ce83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ce64:	f7fb fa58 	bl	8018318 <HAL_RCC_GetPCLK1Freq>
 801ce68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ce6a:	e014      	b.n	801ce96 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ce6c:	f7fb fa68 	bl	8018340 <HAL_RCC_GetPCLK2Freq>
 801ce70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ce72:	e010      	b.n	801ce96 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801ce74:	4b1a      	ldr	r3, [pc, #104]	; (801cee0 <UART_SetConfig+0x5c8>)
 801ce76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ce78:	e00d      	b.n	801ce96 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ce7a:	f7fb f99b 	bl	80181b4 <HAL_RCC_GetSysClockFreq>
 801ce7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ce80:	e009      	b.n	801ce96 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ce82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ce86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ce88:	e005      	b.n	801ce96 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801ce8e:	2301      	movs	r3, #1
 801ce90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801ce94:	bf00      	nop
    }

    if (pclk != 0U)
 801ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d028      	beq.n	801ceee <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ce9c:	697b      	ldr	r3, [r7, #20]
 801ce9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cea0:	4a10      	ldr	r2, [pc, #64]	; (801cee4 <UART_SetConfig+0x5cc>)
 801cea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801cea6:	461a      	mov	r2, r3
 801cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceaa:	fbb3 f2f2 	udiv	r2, r3, r2
 801ceae:	697b      	ldr	r3, [r7, #20]
 801ceb0:	685b      	ldr	r3, [r3, #4]
 801ceb2:	085b      	lsrs	r3, r3, #1
 801ceb4:	441a      	add	r2, r3
 801ceb6:	697b      	ldr	r3, [r7, #20]
 801ceb8:	685b      	ldr	r3, [r3, #4]
 801ceba:	fbb2 f3f3 	udiv	r3, r2, r3
 801cebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801cec0:	6a3b      	ldr	r3, [r7, #32]
 801cec2:	2b0f      	cmp	r3, #15
 801cec4:	d910      	bls.n	801cee8 <UART_SetConfig+0x5d0>
 801cec6:	6a3b      	ldr	r3, [r7, #32]
 801cec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cecc:	d20c      	bcs.n	801cee8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801cece:	6a3b      	ldr	r3, [r7, #32]
 801ced0:	b29a      	uxth	r2, r3
 801ced2:	697b      	ldr	r3, [r7, #20]
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	60da      	str	r2, [r3, #12]
 801ced8:	e009      	b.n	801ceee <UART_SetConfig+0x5d6>
 801ceda:	bf00      	nop
 801cedc:	40008000 	.word	0x40008000
 801cee0:	00f42400 	.word	0x00f42400
 801cee4:	080259ac 	.word	0x080259ac
      }
      else
      {
        ret = HAL_ERROR;
 801cee8:	2301      	movs	r3, #1
 801ceea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801ceee:	697b      	ldr	r3, [r7, #20]
 801cef0:	2201      	movs	r2, #1
 801cef2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801cef6:	697b      	ldr	r3, [r7, #20]
 801cef8:	2201      	movs	r2, #1
 801cefa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801cefe:	697b      	ldr	r3, [r7, #20]
 801cf00:	2200      	movs	r2, #0
 801cf02:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801cf04:	697b      	ldr	r3, [r7, #20]
 801cf06:	2200      	movs	r2, #0
 801cf08:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801cf0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801cf0e:	4618      	mov	r0, r3
 801cf10:	3730      	adds	r7, #48	; 0x30
 801cf12:	46bd      	mov	sp, r7
 801cf14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801cf18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801cf18:	b480      	push	{r7}
 801cf1a:	b083      	sub	sp, #12
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf24:	f003 0301 	and.w	r3, r3, #1
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d00a      	beq.n	801cf42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	685b      	ldr	r3, [r3, #4]
 801cf32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	430a      	orrs	r2, r1
 801cf40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf46:	f003 0302 	and.w	r3, r3, #2
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d00a      	beq.n	801cf64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	685b      	ldr	r3, [r3, #4]
 801cf54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	430a      	orrs	r2, r1
 801cf62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf68:	f003 0304 	and.w	r3, r3, #4
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d00a      	beq.n	801cf86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	685b      	ldr	r3, [r3, #4]
 801cf76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	430a      	orrs	r2, r1
 801cf84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf8a:	f003 0308 	and.w	r3, r3, #8
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d00a      	beq.n	801cfa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	685b      	ldr	r3, [r3, #4]
 801cf98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	430a      	orrs	r2, r1
 801cfa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfac:	f003 0310 	and.w	r3, r3, #16
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d00a      	beq.n	801cfca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	689b      	ldr	r3, [r3, #8]
 801cfba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	430a      	orrs	r2, r1
 801cfc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfce:	f003 0320 	and.w	r3, r3, #32
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d00a      	beq.n	801cfec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	689b      	ldr	r3, [r3, #8]
 801cfdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	430a      	orrs	r2, r1
 801cfea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	d01a      	beq.n	801d02e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	685b      	ldr	r3, [r3, #4]
 801cffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	430a      	orrs	r2, r1
 801d00c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d016:	d10a      	bne.n	801d02e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	685b      	ldr	r3, [r3, #4]
 801d01e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	430a      	orrs	r2, r1
 801d02c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d036:	2b00      	cmp	r3, #0
 801d038:	d00a      	beq.n	801d050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	685b      	ldr	r3, [r3, #4]
 801d040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	430a      	orrs	r2, r1
 801d04e:	605a      	str	r2, [r3, #4]
  }
}
 801d050:	bf00      	nop
 801d052:	370c      	adds	r7, #12
 801d054:	46bd      	mov	sp, r7
 801d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d05a:	4770      	bx	lr

0801d05c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d05c:	b580      	push	{r7, lr}
 801d05e:	b098      	sub	sp, #96	; 0x60
 801d060:	af02      	add	r7, sp, #8
 801d062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	2200      	movs	r2, #0
 801d068:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d06c:	f7f7 f880 	bl	8014170 <HAL_GetTick>
 801d070:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	f003 0308 	and.w	r3, r3, #8
 801d07c:	2b08      	cmp	r3, #8
 801d07e:	d12f      	bne.n	801d0e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801d084:	9300      	str	r3, [sp, #0]
 801d086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d088:	2200      	movs	r2, #0
 801d08a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d08e:	6878      	ldr	r0, [r7, #4]
 801d090:	f000 f88e 	bl	801d1b0 <UART_WaitOnFlagUntilTimeout>
 801d094:	4603      	mov	r3, r0
 801d096:	2b00      	cmp	r3, #0
 801d098:	d022      	beq.n	801d0e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0a2:	e853 3f00 	ldrex	r3, [r3]
 801d0a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801d0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d0ae:	653b      	str	r3, [r7, #80]	; 0x50
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	461a      	mov	r2, r3
 801d0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d0b8:	647b      	str	r3, [r7, #68]	; 0x44
 801d0ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d0bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d0be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d0c0:	e841 2300 	strex	r3, r2, [r1]
 801d0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801d0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d1e6      	bne.n	801d09a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	2220      	movs	r2, #32
 801d0d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	2200      	movs	r2, #0
 801d0d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d0dc:	2303      	movs	r3, #3
 801d0de:	e063      	b.n	801d1a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	f003 0304 	and.w	r3, r3, #4
 801d0ea:	2b04      	cmp	r3, #4
 801d0ec:	d149      	bne.n	801d182 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d0ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801d0f2:	9300      	str	r3, [sp, #0]
 801d0f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d0f6:	2200      	movs	r2, #0
 801d0f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801d0fc:	6878      	ldr	r0, [r7, #4]
 801d0fe:	f000 f857 	bl	801d1b0 <UART_WaitOnFlagUntilTimeout>
 801d102:	4603      	mov	r3, r0
 801d104:	2b00      	cmp	r3, #0
 801d106:	d03c      	beq.n	801d182 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d110:	e853 3f00 	ldrex	r3, [r3]
 801d114:	623b      	str	r3, [r7, #32]
   return(result);
 801d116:	6a3b      	ldr	r3, [r7, #32]
 801d118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801d11c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	461a      	mov	r2, r3
 801d124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d126:	633b      	str	r3, [r7, #48]	; 0x30
 801d128:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d12a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d12e:	e841 2300 	strex	r3, r2, [r1]
 801d132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d136:	2b00      	cmp	r3, #0
 801d138:	d1e6      	bne.n	801d108 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	3308      	adds	r3, #8
 801d140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d142:	693b      	ldr	r3, [r7, #16]
 801d144:	e853 3f00 	ldrex	r3, [r3]
 801d148:	60fb      	str	r3, [r7, #12]
   return(result);
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	f023 0301 	bic.w	r3, r3, #1
 801d150:	64bb      	str	r3, [r7, #72]	; 0x48
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	3308      	adds	r3, #8
 801d158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d15a:	61fa      	str	r2, [r7, #28]
 801d15c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d15e:	69b9      	ldr	r1, [r7, #24]
 801d160:	69fa      	ldr	r2, [r7, #28]
 801d162:	e841 2300 	strex	r3, r2, [r1]
 801d166:	617b      	str	r3, [r7, #20]
   return(result);
 801d168:	697b      	ldr	r3, [r7, #20]
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d1e5      	bne.n	801d13a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	2220      	movs	r2, #32
 801d172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	2200      	movs	r2, #0
 801d17a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d17e:	2303      	movs	r3, #3
 801d180:	e012      	b.n	801d1a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	2220      	movs	r2, #32
 801d186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	2220      	movs	r2, #32
 801d18e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	2200      	movs	r2, #0
 801d196:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	2200      	movs	r2, #0
 801d19c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	2200      	movs	r2, #0
 801d1a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d1a6:	2300      	movs	r3, #0
}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	3758      	adds	r7, #88	; 0x58
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}

0801d1b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801d1b0:	b580      	push	{r7, lr}
 801d1b2:	b084      	sub	sp, #16
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	60f8      	str	r0, [r7, #12]
 801d1b8:	60b9      	str	r1, [r7, #8]
 801d1ba:	603b      	str	r3, [r7, #0]
 801d1bc:	4613      	mov	r3, r2
 801d1be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d1c0:	e049      	b.n	801d256 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d1c2:	69bb      	ldr	r3, [r7, #24]
 801d1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d1c8:	d045      	beq.n	801d256 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d1ca:	f7f6 ffd1 	bl	8014170 <HAL_GetTick>
 801d1ce:	4602      	mov	r2, r0
 801d1d0:	683b      	ldr	r3, [r7, #0]
 801d1d2:	1ad3      	subs	r3, r2, r3
 801d1d4:	69ba      	ldr	r2, [r7, #24]
 801d1d6:	429a      	cmp	r2, r3
 801d1d8:	d302      	bcc.n	801d1e0 <UART_WaitOnFlagUntilTimeout+0x30>
 801d1da:	69bb      	ldr	r3, [r7, #24]
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d101      	bne.n	801d1e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801d1e0:	2303      	movs	r3, #3
 801d1e2:	e048      	b.n	801d276 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	f003 0304 	and.w	r3, r3, #4
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d031      	beq.n	801d256 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	69db      	ldr	r3, [r3, #28]
 801d1f8:	f003 0308 	and.w	r3, r3, #8
 801d1fc:	2b08      	cmp	r3, #8
 801d1fe:	d110      	bne.n	801d222 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	2208      	movs	r2, #8
 801d206:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801d208:	68f8      	ldr	r0, [r7, #12]
 801d20a:	f000 f95b 	bl	801d4c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	2208      	movs	r2, #8
 801d212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	2200      	movs	r2, #0
 801d21a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801d21e:	2301      	movs	r3, #1
 801d220:	e029      	b.n	801d276 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	69db      	ldr	r3, [r3, #28]
 801d228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d22c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d230:	d111      	bne.n	801d256 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d23a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801d23c:	68f8      	ldr	r0, [r7, #12]
 801d23e:	f000 f941 	bl	801d4c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801d242:	68fb      	ldr	r3, [r7, #12]
 801d244:	2220      	movs	r2, #32
 801d246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	2200      	movs	r2, #0
 801d24e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801d252:	2303      	movs	r3, #3
 801d254:	e00f      	b.n	801d276 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	69da      	ldr	r2, [r3, #28]
 801d25c:	68bb      	ldr	r3, [r7, #8]
 801d25e:	4013      	ands	r3, r2
 801d260:	68ba      	ldr	r2, [r7, #8]
 801d262:	429a      	cmp	r2, r3
 801d264:	bf0c      	ite	eq
 801d266:	2301      	moveq	r3, #1
 801d268:	2300      	movne	r3, #0
 801d26a:	b2db      	uxtb	r3, r3
 801d26c:	461a      	mov	r2, r3
 801d26e:	79fb      	ldrb	r3, [r7, #7]
 801d270:	429a      	cmp	r2, r3
 801d272:	d0a6      	beq.n	801d1c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801d274:	2300      	movs	r3, #0
}
 801d276:	4618      	mov	r0, r3
 801d278:	3710      	adds	r7, #16
 801d27a:	46bd      	mov	sp, r7
 801d27c:	bd80      	pop	{r7, pc}
	...

0801d280 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d280:	b480      	push	{r7}
 801d282:	b0a3      	sub	sp, #140	; 0x8c
 801d284:	af00      	add	r7, sp, #0
 801d286:	60f8      	str	r0, [r7, #12]
 801d288:	60b9      	str	r1, [r7, #8]
 801d28a:	4613      	mov	r3, r2
 801d28c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	68ba      	ldr	r2, [r7, #8]
 801d292:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	88fa      	ldrh	r2, [r7, #6]
 801d298:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	88fa      	ldrh	r2, [r7, #6]
 801d2a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801d2a4:	68fb      	ldr	r3, [r7, #12]
 801d2a6:	2200      	movs	r2, #0
 801d2a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	689b      	ldr	r3, [r3, #8]
 801d2ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2b2:	d10e      	bne.n	801d2d2 <UART_Start_Receive_IT+0x52>
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	691b      	ldr	r3, [r3, #16]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d105      	bne.n	801d2c8 <UART_Start_Receive_IT+0x48>
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	f240 12ff 	movw	r2, #511	; 0x1ff
 801d2c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d2c6:	e02d      	b.n	801d324 <UART_Start_Receive_IT+0xa4>
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	22ff      	movs	r2, #255	; 0xff
 801d2cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d2d0:	e028      	b.n	801d324 <UART_Start_Receive_IT+0xa4>
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	689b      	ldr	r3, [r3, #8]
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d10d      	bne.n	801d2f6 <UART_Start_Receive_IT+0x76>
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	691b      	ldr	r3, [r3, #16]
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d104      	bne.n	801d2ec <UART_Start_Receive_IT+0x6c>
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	22ff      	movs	r2, #255	; 0xff
 801d2e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d2ea:	e01b      	b.n	801d324 <UART_Start_Receive_IT+0xa4>
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	227f      	movs	r2, #127	; 0x7f
 801d2f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d2f4:	e016      	b.n	801d324 <UART_Start_Receive_IT+0xa4>
 801d2f6:	68fb      	ldr	r3, [r7, #12]
 801d2f8:	689b      	ldr	r3, [r3, #8]
 801d2fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d2fe:	d10d      	bne.n	801d31c <UART_Start_Receive_IT+0x9c>
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	691b      	ldr	r3, [r3, #16]
 801d304:	2b00      	cmp	r3, #0
 801d306:	d104      	bne.n	801d312 <UART_Start_Receive_IT+0x92>
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	227f      	movs	r2, #127	; 0x7f
 801d30c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d310:	e008      	b.n	801d324 <UART_Start_Receive_IT+0xa4>
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	223f      	movs	r2, #63	; 0x3f
 801d316:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d31a:	e003      	b.n	801d324 <UART_Start_Receive_IT+0xa4>
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	2200      	movs	r2, #0
 801d320:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	2200      	movs	r2, #0
 801d328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	2222      	movs	r2, #34	; 0x22
 801d330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	3308      	adds	r3, #8
 801d33a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d33c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d33e:	e853 3f00 	ldrex	r3, [r3]
 801d342:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801d344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d346:	f043 0301 	orr.w	r3, r3, #1
 801d34a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	3308      	adds	r3, #8
 801d354:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d358:	673a      	str	r2, [r7, #112]	; 0x70
 801d35a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d35c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801d35e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d360:	e841 2300 	strex	r3, r2, [r1]
 801d364:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801d366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d1e3      	bne.n	801d334 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d374:	d14f      	bne.n	801d416 <UART_Start_Receive_IT+0x196>
 801d376:	68fb      	ldr	r3, [r7, #12]
 801d378:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d37c:	88fa      	ldrh	r2, [r7, #6]
 801d37e:	429a      	cmp	r2, r3
 801d380:	d349      	bcc.n	801d416 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	689b      	ldr	r3, [r3, #8]
 801d386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d38a:	d107      	bne.n	801d39c <UART_Start_Receive_IT+0x11c>
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	691b      	ldr	r3, [r3, #16]
 801d390:	2b00      	cmp	r3, #0
 801d392:	d103      	bne.n	801d39c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	4a47      	ldr	r2, [pc, #284]	; (801d4b4 <UART_Start_Receive_IT+0x234>)
 801d398:	675a      	str	r2, [r3, #116]	; 0x74
 801d39a:	e002      	b.n	801d3a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	4a46      	ldr	r2, [pc, #280]	; (801d4b8 <UART_Start_Receive_IT+0x238>)
 801d3a0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801d3a2:	68fb      	ldr	r3, [r7, #12]
 801d3a4:	691b      	ldr	r3, [r3, #16]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d01a      	beq.n	801d3e0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d3b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d3b2:	e853 3f00 	ldrex	r3, [r3]
 801d3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801d3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d3ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d3be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	461a      	mov	r2, r3
 801d3c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d3ce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d3d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d3d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d3d4:	e841 2300 	strex	r3, r2, [r1]
 801d3d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801d3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d1e4      	bne.n	801d3aa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	3308      	adds	r3, #8
 801d3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d3ea:	e853 3f00 	ldrex	r3, [r3]
 801d3ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d3f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	3308      	adds	r3, #8
 801d3fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801d400:	64ba      	str	r2, [r7, #72]	; 0x48
 801d402:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d404:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d408:	e841 2300 	strex	r3, r2, [r1]
 801d40c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801d40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d410:	2b00      	cmp	r3, #0
 801d412:	d1e5      	bne.n	801d3e0 <UART_Start_Receive_IT+0x160>
 801d414:	e046      	b.n	801d4a4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	689b      	ldr	r3, [r3, #8]
 801d41a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d41e:	d107      	bne.n	801d430 <UART_Start_Receive_IT+0x1b0>
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	691b      	ldr	r3, [r3, #16]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d103      	bne.n	801d430 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	4a24      	ldr	r2, [pc, #144]	; (801d4bc <UART_Start_Receive_IT+0x23c>)
 801d42c:	675a      	str	r2, [r3, #116]	; 0x74
 801d42e:	e002      	b.n	801d436 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	4a23      	ldr	r2, [pc, #140]	; (801d4c0 <UART_Start_Receive_IT+0x240>)
 801d434:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	691b      	ldr	r3, [r3, #16]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d019      	beq.n	801d472 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d446:	e853 3f00 	ldrex	r3, [r3]
 801d44a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d44e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801d452:	677b      	str	r3, [r7, #116]	; 0x74
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	461a      	mov	r2, r3
 801d45a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d45c:	637b      	str	r3, [r7, #52]	; 0x34
 801d45e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d464:	e841 2300 	strex	r3, r2, [r1]
 801d468:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d1e6      	bne.n	801d43e <UART_Start_Receive_IT+0x1be>
 801d470:	e018      	b.n	801d4a4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801d472:	68fb      	ldr	r3, [r7, #12]
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d478:	697b      	ldr	r3, [r7, #20]
 801d47a:	e853 3f00 	ldrex	r3, [r3]
 801d47e:	613b      	str	r3, [r7, #16]
   return(result);
 801d480:	693b      	ldr	r3, [r7, #16]
 801d482:	f043 0320 	orr.w	r3, r3, #32
 801d486:	67bb      	str	r3, [r7, #120]	; 0x78
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	461a      	mov	r2, r3
 801d48e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d490:	623b      	str	r3, [r7, #32]
 801d492:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d494:	69f9      	ldr	r1, [r7, #28]
 801d496:	6a3a      	ldr	r2, [r7, #32]
 801d498:	e841 2300 	strex	r3, r2, [r1]
 801d49c:	61bb      	str	r3, [r7, #24]
   return(result);
 801d49e:	69bb      	ldr	r3, [r7, #24]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d1e6      	bne.n	801d472 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801d4a4:	2300      	movs	r3, #0
}
 801d4a6:	4618      	mov	r0, r3
 801d4a8:	378c      	adds	r7, #140	; 0x8c
 801d4aa:	46bd      	mov	sp, r7
 801d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4b0:	4770      	bx	lr
 801d4b2:	bf00      	nop
 801d4b4:	0801dce5 	.word	0x0801dce5
 801d4b8:	0801d985 	.word	0x0801d985
 801d4bc:	0801d7cd 	.word	0x0801d7cd
 801d4c0:	0801d615 	.word	0x0801d615

0801d4c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801d4c4:	b480      	push	{r7}
 801d4c6:	b095      	sub	sp, #84	; 0x54
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4d4:	e853 3f00 	ldrex	r3, [r3]
 801d4d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801d4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	461a      	mov	r2, r3
 801d4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d4ea:	643b      	str	r3, [r7, #64]	; 0x40
 801d4ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d4ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d4f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d4f2:	e841 2300 	strex	r3, r2, [r1]
 801d4f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d1e6      	bne.n	801d4cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	3308      	adds	r3, #8
 801d504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d506:	6a3b      	ldr	r3, [r7, #32]
 801d508:	e853 3f00 	ldrex	r3, [r3]
 801d50c:	61fb      	str	r3, [r7, #28]
   return(result);
 801d50e:	69fb      	ldr	r3, [r7, #28]
 801d510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d514:	f023 0301 	bic.w	r3, r3, #1
 801d518:	64bb      	str	r3, [r7, #72]	; 0x48
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	3308      	adds	r3, #8
 801d520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d522:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d52a:	e841 2300 	strex	r3, r2, [r1]
 801d52e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d532:	2b00      	cmp	r3, #0
 801d534:	d1e3      	bne.n	801d4fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d53a:	2b01      	cmp	r3, #1
 801d53c:	d118      	bne.n	801d570 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	e853 3f00 	ldrex	r3, [r3]
 801d54a:	60bb      	str	r3, [r7, #8]
   return(result);
 801d54c:	68bb      	ldr	r3, [r7, #8]
 801d54e:	f023 0310 	bic.w	r3, r3, #16
 801d552:	647b      	str	r3, [r7, #68]	; 0x44
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	461a      	mov	r2, r3
 801d55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d55c:	61bb      	str	r3, [r7, #24]
 801d55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d560:	6979      	ldr	r1, [r7, #20]
 801d562:	69ba      	ldr	r2, [r7, #24]
 801d564:	e841 2300 	strex	r3, r2, [r1]
 801d568:	613b      	str	r3, [r7, #16]
   return(result);
 801d56a:	693b      	ldr	r3, [r7, #16]
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d1e6      	bne.n	801d53e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	2220      	movs	r2, #32
 801d574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	2200      	movs	r2, #0
 801d57c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	2200      	movs	r2, #0
 801d582:	675a      	str	r2, [r3, #116]	; 0x74
}
 801d584:	bf00      	nop
 801d586:	3754      	adds	r7, #84	; 0x54
 801d588:	46bd      	mov	sp, r7
 801d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d58e:	4770      	bx	lr

0801d590 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801d590:	b580      	push	{r7, lr}
 801d592:	b084      	sub	sp, #16
 801d594:	af00      	add	r7, sp, #0
 801d596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d59c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	2200      	movs	r2, #0
 801d5a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801d5ae:	68f8      	ldr	r0, [r7, #12]
 801d5b0:	f7ff f99c 	bl	801c8ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d5b4:	bf00      	nop
 801d5b6:	3710      	adds	r7, #16
 801d5b8:	46bd      	mov	sp, r7
 801d5ba:	bd80      	pop	{r7, pc}

0801d5bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b088      	sub	sp, #32
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	e853 3f00 	ldrex	r3, [r3]
 801d5d0:	60bb      	str	r3, [r7, #8]
   return(result);
 801d5d2:	68bb      	ldr	r3, [r7, #8]
 801d5d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d5d8:	61fb      	str	r3, [r7, #28]
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	461a      	mov	r2, r3
 801d5e0:	69fb      	ldr	r3, [r7, #28]
 801d5e2:	61bb      	str	r3, [r7, #24]
 801d5e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d5e6:	6979      	ldr	r1, [r7, #20]
 801d5e8:	69ba      	ldr	r2, [r7, #24]
 801d5ea:	e841 2300 	strex	r3, r2, [r1]
 801d5ee:	613b      	str	r3, [r7, #16]
   return(result);
 801d5f0:	693b      	ldr	r3, [r7, #16]
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d1e6      	bne.n	801d5c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	2220      	movs	r2, #32
 801d5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	2200      	movs	r2, #0
 801d602:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801d604:	6878      	ldr	r0, [r7, #4]
 801d606:	f7ff f967 	bl	801c8d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d60a:	bf00      	nop
 801d60c:	3720      	adds	r7, #32
 801d60e:	46bd      	mov	sp, r7
 801d610:	bd80      	pop	{r7, pc}
	...

0801d614 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801d614:	b580      	push	{r7, lr}
 801d616:	b09c      	sub	sp, #112	; 0x70
 801d618:	af00      	add	r7, sp, #0
 801d61a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d622:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d62c:	2b22      	cmp	r3, #34	; 0x22
 801d62e:	f040 80be 	bne.w	801d7ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d638:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801d63c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801d640:	b2d9      	uxtb	r1, r3
 801d642:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801d646:	b2da      	uxtb	r2, r3
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d64c:	400a      	ands	r2, r1
 801d64e:	b2d2      	uxtb	r2, r2
 801d650:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d656:	1c5a      	adds	r2, r3, #1
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d662:	b29b      	uxth	r3, r3
 801d664:	3b01      	subs	r3, #1
 801d666:	b29a      	uxth	r2, r3
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d674:	b29b      	uxth	r3, r3
 801d676:	2b00      	cmp	r3, #0
 801d678:	f040 80a1 	bne.w	801d7be <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d684:	e853 3f00 	ldrex	r3, [r3]
 801d688:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801d68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d68c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801d690:	66bb      	str	r3, [r7, #104]	; 0x68
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	461a      	mov	r2, r3
 801d698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d69a:	65bb      	str	r3, [r7, #88]	; 0x58
 801d69c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d69e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d6a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d6a2:	e841 2300 	strex	r3, r2, [r1]
 801d6a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801d6a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d1e6      	bne.n	801d67c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	3308      	adds	r3, #8
 801d6b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6b8:	e853 3f00 	ldrex	r3, [r3]
 801d6bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801d6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6c0:	f023 0301 	bic.w	r3, r3, #1
 801d6c4:	667b      	str	r3, [r7, #100]	; 0x64
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	3308      	adds	r3, #8
 801d6cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d6ce:	647a      	str	r2, [r7, #68]	; 0x44
 801d6d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d6d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d6d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d6d6:	e841 2300 	strex	r3, r2, [r1]
 801d6da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801d6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d1e5      	bne.n	801d6ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	2220      	movs	r2, #32
 801d6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	4a33      	ldr	r2, [pc, #204]	; (801d7c8 <UART_RxISR_8BIT+0x1b4>)
 801d6fc:	4293      	cmp	r3, r2
 801d6fe:	d01f      	beq.n	801d740 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	685b      	ldr	r3, [r3, #4]
 801d706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d018      	beq.n	801d740 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d716:	e853 3f00 	ldrex	r3, [r3]
 801d71a:	623b      	str	r3, [r7, #32]
   return(result);
 801d71c:	6a3b      	ldr	r3, [r7, #32]
 801d71e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d722:	663b      	str	r3, [r7, #96]	; 0x60
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	461a      	mov	r2, r3
 801d72a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d72c:	633b      	str	r3, [r7, #48]	; 0x30
 801d72e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d730:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d734:	e841 2300 	strex	r3, r2, [r1]
 801d738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801d73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d1e6      	bne.n	801d70e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d744:	2b01      	cmp	r3, #1
 801d746:	d12e      	bne.n	801d7a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	2200      	movs	r2, #0
 801d74c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d754:	693b      	ldr	r3, [r7, #16]
 801d756:	e853 3f00 	ldrex	r3, [r3]
 801d75a:	60fb      	str	r3, [r7, #12]
   return(result);
 801d75c:	68fb      	ldr	r3, [r7, #12]
 801d75e:	f023 0310 	bic.w	r3, r3, #16
 801d762:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	681b      	ldr	r3, [r3, #0]
 801d768:	461a      	mov	r2, r3
 801d76a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d76c:	61fb      	str	r3, [r7, #28]
 801d76e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d770:	69b9      	ldr	r1, [r7, #24]
 801d772:	69fa      	ldr	r2, [r7, #28]
 801d774:	e841 2300 	strex	r3, r2, [r1]
 801d778:	617b      	str	r3, [r7, #20]
   return(result);
 801d77a:	697b      	ldr	r3, [r7, #20]
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d1e6      	bne.n	801d74e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	69db      	ldr	r3, [r3, #28]
 801d786:	f003 0310 	and.w	r3, r3, #16
 801d78a:	2b10      	cmp	r3, #16
 801d78c:	d103      	bne.n	801d796 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	681b      	ldr	r3, [r3, #0]
 801d792:	2210      	movs	r2, #16
 801d794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d79c:	4619      	mov	r1, r3
 801d79e:	6878      	ldr	r0, [r7, #4]
 801d7a0:	f7ff f8ae 	bl	801c900 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d7a4:	e00b      	b.n	801d7be <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801d7a6:	6878      	ldr	r0, [r7, #4]
 801d7a8:	f7e6 fe32 	bl	8004410 <HAL_UART_RxCpltCallback>
}
 801d7ac:	e007      	b.n	801d7be <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	699a      	ldr	r2, [r3, #24]
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	f042 0208 	orr.w	r2, r2, #8
 801d7bc:	619a      	str	r2, [r3, #24]
}
 801d7be:	bf00      	nop
 801d7c0:	3770      	adds	r7, #112	; 0x70
 801d7c2:	46bd      	mov	sp, r7
 801d7c4:	bd80      	pop	{r7, pc}
 801d7c6:	bf00      	nop
 801d7c8:	40008000 	.word	0x40008000

0801d7cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801d7cc:	b580      	push	{r7, lr}
 801d7ce:	b09c      	sub	sp, #112	; 0x70
 801d7d0:	af00      	add	r7, sp, #0
 801d7d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d7da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d7e4:	2b22      	cmp	r3, #34	; 0x22
 801d7e6:	f040 80be 	bne.w	801d966 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d7f8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801d7fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801d7fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801d802:	4013      	ands	r3, r2
 801d804:	b29a      	uxth	r2, r3
 801d806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d808:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d80e:	1c9a      	adds	r2, r3, #2
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d81a:	b29b      	uxth	r3, r3
 801d81c:	3b01      	subs	r3, #1
 801d81e:	b29a      	uxth	r2, r3
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d82c:	b29b      	uxth	r3, r3
 801d82e:	2b00      	cmp	r3, #0
 801d830:	f040 80a1 	bne.w	801d976 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	681b      	ldr	r3, [r3, #0]
 801d838:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d83c:	e853 3f00 	ldrex	r3, [r3]
 801d840:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801d842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801d848:	667b      	str	r3, [r7, #100]	; 0x64
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	461a      	mov	r2, r3
 801d850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d852:	657b      	str	r3, [r7, #84]	; 0x54
 801d854:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d856:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801d858:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d85a:	e841 2300 	strex	r3, r2, [r1]
 801d85e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801d860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d862:	2b00      	cmp	r3, #0
 801d864:	d1e6      	bne.n	801d834 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	3308      	adds	r3, #8
 801d86c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d870:	e853 3f00 	ldrex	r3, [r3]
 801d874:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d878:	f023 0301 	bic.w	r3, r3, #1
 801d87c:	663b      	str	r3, [r7, #96]	; 0x60
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	3308      	adds	r3, #8
 801d884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d886:	643a      	str	r2, [r7, #64]	; 0x40
 801d888:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d88a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d88c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d88e:	e841 2300 	strex	r3, r2, [r1]
 801d892:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d896:	2b00      	cmp	r3, #0
 801d898:	d1e5      	bne.n	801d866 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	2220      	movs	r2, #32
 801d89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	2200      	movs	r2, #0
 801d8a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	2200      	movs	r2, #0
 801d8ac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	4a33      	ldr	r2, [pc, #204]	; (801d980 <UART_RxISR_16BIT+0x1b4>)
 801d8b4:	4293      	cmp	r3, r2
 801d8b6:	d01f      	beq.n	801d8f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	681b      	ldr	r3, [r3, #0]
 801d8bc:	685b      	ldr	r3, [r3, #4]
 801d8be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d018      	beq.n	801d8f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	681b      	ldr	r3, [r3, #0]
 801d8ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d8cc:	6a3b      	ldr	r3, [r7, #32]
 801d8ce:	e853 3f00 	ldrex	r3, [r3]
 801d8d2:	61fb      	str	r3, [r7, #28]
   return(result);
 801d8d4:	69fb      	ldr	r3, [r7, #28]
 801d8d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d8da:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	461a      	mov	r2, r3
 801d8e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d8e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d8e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d8ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d8ec:	e841 2300 	strex	r3, r2, [r1]
 801d8f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d1e6      	bne.n	801d8c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d8fc:	2b01      	cmp	r3, #1
 801d8fe:	d12e      	bne.n	801d95e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	2200      	movs	r2, #0
 801d904:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	681b      	ldr	r3, [r3, #0]
 801d90a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	e853 3f00 	ldrex	r3, [r3]
 801d912:	60bb      	str	r3, [r7, #8]
   return(result);
 801d914:	68bb      	ldr	r3, [r7, #8]
 801d916:	f023 0310 	bic.w	r3, r3, #16
 801d91a:	65bb      	str	r3, [r7, #88]	; 0x58
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	461a      	mov	r2, r3
 801d922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d924:	61bb      	str	r3, [r7, #24]
 801d926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d928:	6979      	ldr	r1, [r7, #20]
 801d92a:	69ba      	ldr	r2, [r7, #24]
 801d92c:	e841 2300 	strex	r3, r2, [r1]
 801d930:	613b      	str	r3, [r7, #16]
   return(result);
 801d932:	693b      	ldr	r3, [r7, #16]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d1e6      	bne.n	801d906 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	69db      	ldr	r3, [r3, #28]
 801d93e:	f003 0310 	and.w	r3, r3, #16
 801d942:	2b10      	cmp	r3, #16
 801d944:	d103      	bne.n	801d94e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	2210      	movs	r2, #16
 801d94c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d954:	4619      	mov	r1, r3
 801d956:	6878      	ldr	r0, [r7, #4]
 801d958:	f7fe ffd2 	bl	801c900 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d95c:	e00b      	b.n	801d976 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801d95e:	6878      	ldr	r0, [r7, #4]
 801d960:	f7e6 fd56 	bl	8004410 <HAL_UART_RxCpltCallback>
}
 801d964:	e007      	b.n	801d976 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	699a      	ldr	r2, [r3, #24]
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	f042 0208 	orr.w	r2, r2, #8
 801d974:	619a      	str	r2, [r3, #24]
}
 801d976:	bf00      	nop
 801d978:	3770      	adds	r7, #112	; 0x70
 801d97a:	46bd      	mov	sp, r7
 801d97c:	bd80      	pop	{r7, pc}
 801d97e:	bf00      	nop
 801d980:	40008000 	.word	0x40008000

0801d984 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b0ac      	sub	sp, #176	; 0xb0
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d992:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	69db      	ldr	r3, [r3, #28]
 801d99c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	681b      	ldr	r3, [r3, #0]
 801d9ae:	689b      	ldr	r3, [r3, #8]
 801d9b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d9ba:	2b22      	cmp	r3, #34	; 0x22
 801d9bc:	f040 8182 	bne.w	801dcc4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d9c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801d9ca:	e125      	b.n	801dc18 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801d9d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801d9da:	b2d9      	uxtb	r1, r3
 801d9dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801d9e0:	b2da      	uxtb	r2, r3
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d9e6:	400a      	ands	r2, r1
 801d9e8:	b2d2      	uxtb	r2, r2
 801d9ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d9f0:	1c5a      	adds	r2, r3, #1
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d9fc:	b29b      	uxth	r3, r3
 801d9fe:	3b01      	subs	r3, #1
 801da00:	b29a      	uxth	r2, r3
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	69db      	ldr	r3, [r3, #28]
 801da0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801da12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801da16:	f003 0307 	and.w	r3, r3, #7
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d053      	beq.n	801dac6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801da1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801da22:	f003 0301 	and.w	r3, r3, #1
 801da26:	2b00      	cmp	r3, #0
 801da28:	d011      	beq.n	801da4e <UART_RxISR_8BIT_FIFOEN+0xca>
 801da2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801da2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da32:	2b00      	cmp	r3, #0
 801da34:	d00b      	beq.n	801da4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	2201      	movs	r2, #1
 801da3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801da44:	f043 0201 	orr.w	r2, r3, #1
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801da4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801da52:	f003 0302 	and.w	r3, r3, #2
 801da56:	2b00      	cmp	r3, #0
 801da58:	d011      	beq.n	801da7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801da5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801da5e:	f003 0301 	and.w	r3, r3, #1
 801da62:	2b00      	cmp	r3, #0
 801da64:	d00b      	beq.n	801da7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	2202      	movs	r2, #2
 801da6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801da74:	f043 0204 	orr.w	r2, r3, #4
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801da7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801da82:	f003 0304 	and.w	r3, r3, #4
 801da86:	2b00      	cmp	r3, #0
 801da88:	d011      	beq.n	801daae <UART_RxISR_8BIT_FIFOEN+0x12a>
 801da8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801da8e:	f003 0301 	and.w	r3, r3, #1
 801da92:	2b00      	cmp	r3, #0
 801da94:	d00b      	beq.n	801daae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	2204      	movs	r2, #4
 801da9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801daa4:	f043 0202 	orr.w	r2, r3, #2
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d006      	beq.n	801dac6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801dab8:	6878      	ldr	r0, [r7, #4]
 801daba:	f7fe ff17 	bl	801c8ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	2200      	movs	r2, #0
 801dac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801dacc:	b29b      	uxth	r3, r3
 801dace:	2b00      	cmp	r3, #0
 801dad0:	f040 80a2 	bne.w	801dc18 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dadc:	e853 3f00 	ldrex	r3, [r3]
 801dae0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801dae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801dae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	461a      	mov	r2, r3
 801daf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801daf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 801daf8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dafa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801dafc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801dafe:	e841 2300 	strex	r3, r2, [r1]
 801db02:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801db04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db06:	2b00      	cmp	r3, #0
 801db08:	d1e4      	bne.n	801dad4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	3308      	adds	r3, #8
 801db10:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801db14:	e853 3f00 	ldrex	r3, [r3]
 801db18:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801db1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801db1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801db20:	f023 0301 	bic.w	r3, r3, #1
 801db24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	3308      	adds	r3, #8
 801db2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801db32:	66ba      	str	r2, [r7, #104]	; 0x68
 801db34:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db36:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801db38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801db3a:	e841 2300 	strex	r3, r2, [r1]
 801db3e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801db40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db42:	2b00      	cmp	r3, #0
 801db44:	d1e1      	bne.n	801db0a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	2220      	movs	r2, #32
 801db4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	2200      	movs	r2, #0
 801db52:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	2200      	movs	r2, #0
 801db58:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	4a5f      	ldr	r2, [pc, #380]	; (801dcdc <UART_RxISR_8BIT_FIFOEN+0x358>)
 801db60:	4293      	cmp	r3, r2
 801db62:	d021      	beq.n	801dba8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	685b      	ldr	r3, [r3, #4]
 801db6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d01a      	beq.n	801dba8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db7a:	e853 3f00 	ldrex	r3, [r3]
 801db7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801db80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801db86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	461a      	mov	r2, r3
 801db90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801db94:	657b      	str	r3, [r7, #84]	; 0x54
 801db96:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801db9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801db9c:	e841 2300 	strex	r3, r2, [r1]
 801dba0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801dba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d1e4      	bne.n	801db72 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dbac:	2b01      	cmp	r3, #1
 801dbae:	d130      	bne.n	801dc12 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	2200      	movs	r2, #0
 801dbb4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dbb6:	687b      	ldr	r3, [r7, #4]
 801dbb8:	681b      	ldr	r3, [r3, #0]
 801dbba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbbe:	e853 3f00 	ldrex	r3, [r3]
 801dbc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbc6:	f023 0310 	bic.w	r3, r3, #16
 801dbca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	681b      	ldr	r3, [r3, #0]
 801dbd2:	461a      	mov	r2, r3
 801dbd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dbd8:	643b      	str	r3, [r7, #64]	; 0x40
 801dbda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dbdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dbde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dbe0:	e841 2300 	strex	r3, r2, [r1]
 801dbe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801dbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d1e4      	bne.n	801dbb6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	69db      	ldr	r3, [r3, #28]
 801dbf2:	f003 0310 	and.w	r3, r3, #16
 801dbf6:	2b10      	cmp	r3, #16
 801dbf8:	d103      	bne.n	801dc02 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	2210      	movs	r2, #16
 801dc00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801dc08:	4619      	mov	r1, r3
 801dc0a:	6878      	ldr	r0, [r7, #4]
 801dc0c:	f7fe fe78 	bl	801c900 <HAL_UARTEx_RxEventCallback>
 801dc10:	e002      	b.n	801dc18 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801dc12:	6878      	ldr	r0, [r7, #4]
 801dc14:	f7e6 fbfc 	bl	8004410 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801dc18:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d006      	beq.n	801dc2e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 801dc20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801dc24:	f003 0320 	and.w	r3, r3, #32
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	f47f aecf 	bne.w	801d9cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801dc34:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801dc38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d049      	beq.n	801dcd4 <UART_RxISR_8BIT_FIFOEN+0x350>
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801dc46:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801dc4a:	429a      	cmp	r2, r3
 801dc4c:	d242      	bcs.n	801dcd4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	3308      	adds	r3, #8
 801dc54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dc56:	6a3b      	ldr	r3, [r7, #32]
 801dc58:	e853 3f00 	ldrex	r3, [r3]
 801dc5c:	61fb      	str	r3, [r7, #28]
   return(result);
 801dc5e:	69fb      	ldr	r3, [r7, #28]
 801dc60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801dc64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	3308      	adds	r3, #8
 801dc6e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801dc72:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dc74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dc76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dc78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc7a:	e841 2300 	strex	r3, r2, [r1]
 801dc7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	d1e3      	bne.n	801dc4e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	4a15      	ldr	r2, [pc, #84]	; (801dce0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801dc8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dc92:	68fb      	ldr	r3, [r7, #12]
 801dc94:	e853 3f00 	ldrex	r3, [r3]
 801dc98:	60bb      	str	r3, [r7, #8]
   return(result);
 801dc9a:	68bb      	ldr	r3, [r7, #8]
 801dc9c:	f043 0320 	orr.w	r3, r3, #32
 801dca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	461a      	mov	r2, r3
 801dcaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801dcae:	61bb      	str	r3, [r7, #24]
 801dcb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dcb2:	6979      	ldr	r1, [r7, #20]
 801dcb4:	69ba      	ldr	r2, [r7, #24]
 801dcb6:	e841 2300 	strex	r3, r2, [r1]
 801dcba:	613b      	str	r3, [r7, #16]
   return(result);
 801dcbc:	693b      	ldr	r3, [r7, #16]
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d1e4      	bne.n	801dc8c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801dcc2:	e007      	b.n	801dcd4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	699a      	ldr	r2, [r3, #24]
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	f042 0208 	orr.w	r2, r2, #8
 801dcd2:	619a      	str	r2, [r3, #24]
}
 801dcd4:	bf00      	nop
 801dcd6:	37b0      	adds	r7, #176	; 0xb0
 801dcd8:	46bd      	mov	sp, r7
 801dcda:	bd80      	pop	{r7, pc}
 801dcdc:	40008000 	.word	0x40008000
 801dce0:	0801d615 	.word	0x0801d615

0801dce4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b0ae      	sub	sp, #184	; 0xb8
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801dcf2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	69db      	ldr	r3, [r3, #28]
 801dcfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	689b      	ldr	r3, [r3, #8]
 801dd10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dd1a:	2b22      	cmp	r3, #34	; 0x22
 801dd1c:	f040 8186 	bne.w	801e02c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801dd26:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801dd2a:	e129      	b.n	801df80 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd32:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dd3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801dd3e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801dd42:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801dd46:	4013      	ands	r3, r2
 801dd48:	b29a      	uxth	r2, r3
 801dd4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801dd4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dd54:	1c9a      	adds	r2, r3, #2
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801dd60:	b29b      	uxth	r3, r3
 801dd62:	3b01      	subs	r3, #1
 801dd64:	b29a      	uxth	r2, r3
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	69db      	ldr	r3, [r3, #28]
 801dd72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801dd76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801dd7a:	f003 0307 	and.w	r3, r3, #7
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d053      	beq.n	801de2a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801dd82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801dd86:	f003 0301 	and.w	r3, r3, #1
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d011      	beq.n	801ddb2 <UART_RxISR_16BIT_FIFOEN+0xce>
 801dd8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801dd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	d00b      	beq.n	801ddb2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	2201      	movs	r2, #1
 801dda0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dda8:	f043 0201 	orr.w	r2, r3, #1
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ddb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ddb6:	f003 0302 	and.w	r3, r3, #2
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d011      	beq.n	801dde2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801ddbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ddc2:	f003 0301 	and.w	r3, r3, #1
 801ddc6:	2b00      	cmp	r3, #0
 801ddc8:	d00b      	beq.n	801dde2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ddca:	687b      	ldr	r3, [r7, #4]
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	2202      	movs	r2, #2
 801ddd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ddd8:	f043 0204 	orr.w	r2, r3, #4
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801dde2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801dde6:	f003 0304 	and.w	r3, r3, #4
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d011      	beq.n	801de12 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801ddee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ddf2:	f003 0301 	and.w	r3, r3, #1
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d00b      	beq.n	801de12 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	2204      	movs	r2, #4
 801de00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de08:	f043 0202 	orr.w	r2, r3, #2
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d006      	beq.n	801de2a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801de1c:	6878      	ldr	r0, [r7, #4]
 801de1e:	f7fe fd65 	bl	801c8ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	2200      	movs	r2, #0
 801de26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801de30:	b29b      	uxth	r3, r3
 801de32:	2b00      	cmp	r3, #0
 801de34:	f040 80a4 	bne.w	801df80 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801de3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801de40:	e853 3f00 	ldrex	r3, [r3]
 801de44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801de46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801de4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	461a      	mov	r2, r3
 801de56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801de5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801de5e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801de60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801de62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801de66:	e841 2300 	strex	r3, r2, [r1]
 801de6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801de6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801de6e:	2b00      	cmp	r3, #0
 801de70:	d1e2      	bne.n	801de38 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	681b      	ldr	r3, [r3, #0]
 801de76:	3308      	adds	r3, #8
 801de78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801de7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801de7c:	e853 3f00 	ldrex	r3, [r3]
 801de80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801de82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801de88:	f023 0301 	bic.w	r3, r3, #1
 801de8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	3308      	adds	r3, #8
 801de96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801de9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801de9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801de9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801dea0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801dea2:	e841 2300 	strex	r3, r2, [r1]
 801dea6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801dea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d1e1      	bne.n	801de72 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	2220      	movs	r2, #32
 801deb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	2200      	movs	r2, #0
 801deba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	2200      	movs	r2, #0
 801dec0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	4a5f      	ldr	r2, [pc, #380]	; (801e044 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801dec8:	4293      	cmp	r3, r2
 801deca:	d021      	beq.n	801df10 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	685b      	ldr	r3, [r3, #4]
 801ded2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	d01a      	beq.n	801df10 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dee2:	e853 3f00 	ldrex	r3, [r3]
 801dee6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801dee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801deea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801deee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	681b      	ldr	r3, [r3, #0]
 801def6:	461a      	mov	r2, r3
 801def8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801defc:	65bb      	str	r3, [r7, #88]	; 0x58
 801defe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801df00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801df02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801df04:	e841 2300 	strex	r3, r2, [r1]
 801df08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801df0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d1e4      	bne.n	801deda <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df14:	2b01      	cmp	r3, #1
 801df16:	d130      	bne.n	801df7a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	2200      	movs	r2, #0
 801df1c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801df24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df26:	e853 3f00 	ldrex	r3, [r3]
 801df2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801df2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df2e:	f023 0310 	bic.w	r3, r3, #16
 801df32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	461a      	mov	r2, r3
 801df3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801df40:	647b      	str	r3, [r7, #68]	; 0x44
 801df42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801df44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801df46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801df48:	e841 2300 	strex	r3, r2, [r1]
 801df4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801df50:	2b00      	cmp	r3, #0
 801df52:	d1e4      	bne.n	801df1e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	69db      	ldr	r3, [r3, #28]
 801df5a:	f003 0310 	and.w	r3, r3, #16
 801df5e:	2b10      	cmp	r3, #16
 801df60:	d103      	bne.n	801df6a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	2210      	movs	r2, #16
 801df68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801df70:	4619      	mov	r1, r3
 801df72:	6878      	ldr	r0, [r7, #4]
 801df74:	f7fe fcc4 	bl	801c900 <HAL_UARTEx_RxEventCallback>
 801df78:	e002      	b.n	801df80 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801df7a:	6878      	ldr	r0, [r7, #4]
 801df7c:	f7e6 fa48 	bl	8004410 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801df80:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801df84:	2b00      	cmp	r3, #0
 801df86:	d006      	beq.n	801df96 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 801df88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801df8c:	f003 0320 	and.w	r3, r3, #32
 801df90:	2b00      	cmp	r3, #0
 801df92:	f47f aecb 	bne.w	801dd2c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801df9c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801dfa0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d049      	beq.n	801e03c <UART_RxISR_16BIT_FIFOEN+0x358>
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801dfae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801dfb2:	429a      	cmp	r2, r3
 801dfb4:	d242      	bcs.n	801e03c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	3308      	adds	r3, #8
 801dfbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfc0:	e853 3f00 	ldrex	r3, [r3]
 801dfc4:	623b      	str	r3, [r7, #32]
   return(result);
 801dfc6:	6a3b      	ldr	r3, [r7, #32]
 801dfc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801dfcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	681b      	ldr	r3, [r3, #0]
 801dfd4:	3308      	adds	r3, #8
 801dfd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801dfda:	633a      	str	r2, [r7, #48]	; 0x30
 801dfdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dfde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dfe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dfe2:	e841 2300 	strex	r3, r2, [r1]
 801dfe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d1e3      	bne.n	801dfb6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	4a15      	ldr	r2, [pc, #84]	; (801e048 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801dff2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dffa:	693b      	ldr	r3, [r7, #16]
 801dffc:	e853 3f00 	ldrex	r3, [r3]
 801e000:	60fb      	str	r3, [r7, #12]
   return(result);
 801e002:	68fb      	ldr	r3, [r7, #12]
 801e004:	f043 0320 	orr.w	r3, r3, #32
 801e008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	461a      	mov	r2, r3
 801e012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801e016:	61fb      	str	r3, [r7, #28]
 801e018:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e01a:	69b9      	ldr	r1, [r7, #24]
 801e01c:	69fa      	ldr	r2, [r7, #28]
 801e01e:	e841 2300 	strex	r3, r2, [r1]
 801e022:	617b      	str	r3, [r7, #20]
   return(result);
 801e024:	697b      	ldr	r3, [r7, #20]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d1e4      	bne.n	801dff4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e02a:	e007      	b.n	801e03c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	699a      	ldr	r2, [r3, #24]
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	f042 0208 	orr.w	r2, r2, #8
 801e03a:	619a      	str	r2, [r3, #24]
}
 801e03c:	bf00      	nop
 801e03e:	37b8      	adds	r7, #184	; 0xb8
 801e040:	46bd      	mov	sp, r7
 801e042:	bd80      	pop	{r7, pc}
 801e044:	40008000 	.word	0x40008000
 801e048:	0801d7cd 	.word	0x0801d7cd

0801e04c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e04c:	b480      	push	{r7}
 801e04e:	b083      	sub	sp, #12
 801e050:	af00      	add	r7, sp, #0
 801e052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e054:	bf00      	nop
 801e056:	370c      	adds	r7, #12
 801e058:	46bd      	mov	sp, r7
 801e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05e:	4770      	bx	lr

0801e060 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801e060:	b480      	push	{r7}
 801e062:	b083      	sub	sp, #12
 801e064:	af00      	add	r7, sp, #0
 801e066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801e068:	bf00      	nop
 801e06a:	370c      	adds	r7, #12
 801e06c:	46bd      	mov	sp, r7
 801e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e072:	4770      	bx	lr

0801e074 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801e074:	b480      	push	{r7}
 801e076:	b083      	sub	sp, #12
 801e078:	af00      	add	r7, sp, #0
 801e07a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801e07c:	bf00      	nop
 801e07e:	370c      	adds	r7, #12
 801e080:	46bd      	mov	sp, r7
 801e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e086:	4770      	bx	lr

0801e088 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801e088:	b480      	push	{r7}
 801e08a:	b085      	sub	sp, #20
 801e08c:	af00      	add	r7, sp, #0
 801e08e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801e096:	2b01      	cmp	r3, #1
 801e098:	d101      	bne.n	801e09e <HAL_UARTEx_DisableFifoMode+0x16>
 801e09a:	2302      	movs	r3, #2
 801e09c:	e027      	b.n	801e0ee <HAL_UARTEx_DisableFifoMode+0x66>
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	2201      	movs	r2, #1
 801e0a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	2224      	movs	r2, #36	; 0x24
 801e0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	681b      	ldr	r3, [r3, #0]
 801e0b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	681a      	ldr	r2, [r3, #0]
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	681b      	ldr	r3, [r3, #0]
 801e0c0:	f022 0201 	bic.w	r2, r2, #1
 801e0c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801e0c6:	68fb      	ldr	r3, [r7, #12]
 801e0c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801e0cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	2200      	movs	r2, #0
 801e0d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	68fa      	ldr	r2, [r7, #12]
 801e0da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	2220      	movs	r2, #32
 801e0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	2200      	movs	r2, #0
 801e0e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801e0ec:	2300      	movs	r3, #0
}
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	3714      	adds	r7, #20
 801e0f2:	46bd      	mov	sp, r7
 801e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0f8:	4770      	bx	lr

0801e0fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801e0fa:	b580      	push	{r7, lr}
 801e0fc:	b084      	sub	sp, #16
 801e0fe:	af00      	add	r7, sp, #0
 801e100:	6078      	str	r0, [r7, #4]
 801e102:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801e10a:	2b01      	cmp	r3, #1
 801e10c:	d101      	bne.n	801e112 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801e10e:	2302      	movs	r3, #2
 801e110:	e02d      	b.n	801e16e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	2201      	movs	r2, #1
 801e116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	2224      	movs	r2, #36	; 0x24
 801e11e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	681b      	ldr	r3, [r3, #0]
 801e128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	681a      	ldr	r2, [r3, #0]
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	f022 0201 	bic.w	r2, r2, #1
 801e138:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	689b      	ldr	r3, [r3, #8]
 801e140:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	683a      	ldr	r2, [r7, #0]
 801e14a:	430a      	orrs	r2, r1
 801e14c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801e14e:	6878      	ldr	r0, [r7, #4]
 801e150:	f000 f850 	bl	801e1f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	68fa      	ldr	r2, [r7, #12]
 801e15a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	2220      	movs	r2, #32
 801e160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	2200      	movs	r2, #0
 801e168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801e16c:	2300      	movs	r3, #0
}
 801e16e:	4618      	mov	r0, r3
 801e170:	3710      	adds	r7, #16
 801e172:	46bd      	mov	sp, r7
 801e174:	bd80      	pop	{r7, pc}

0801e176 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801e176:	b580      	push	{r7, lr}
 801e178:	b084      	sub	sp, #16
 801e17a:	af00      	add	r7, sp, #0
 801e17c:	6078      	str	r0, [r7, #4]
 801e17e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801e186:	2b01      	cmp	r3, #1
 801e188:	d101      	bne.n	801e18e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801e18a:	2302      	movs	r3, #2
 801e18c:	e02d      	b.n	801e1ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	2201      	movs	r2, #1
 801e192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	2224      	movs	r2, #36	; 0x24
 801e19a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	681a      	ldr	r2, [r3, #0]
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	f022 0201 	bic.w	r2, r2, #1
 801e1b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	689b      	ldr	r3, [r3, #8]
 801e1bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	683a      	ldr	r2, [r7, #0]
 801e1c6:	430a      	orrs	r2, r1
 801e1c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801e1ca:	6878      	ldr	r0, [r7, #4]
 801e1cc:	f000 f812 	bl	801e1f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	681b      	ldr	r3, [r3, #0]
 801e1d4:	68fa      	ldr	r2, [r7, #12]
 801e1d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	2220      	movs	r2, #32
 801e1dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	2200      	movs	r2, #0
 801e1e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801e1e8:	2300      	movs	r3, #0
}
 801e1ea:	4618      	mov	r0, r3
 801e1ec:	3710      	adds	r7, #16
 801e1ee:	46bd      	mov	sp, r7
 801e1f0:	bd80      	pop	{r7, pc}
	...

0801e1f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801e1f4:	b480      	push	{r7}
 801e1f6:	b085      	sub	sp, #20
 801e1f8:	af00      	add	r7, sp, #0
 801e1fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e200:	2b00      	cmp	r3, #0
 801e202:	d108      	bne.n	801e216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	2201      	movs	r2, #1
 801e208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	2201      	movs	r2, #1
 801e210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801e214:	e031      	b.n	801e27a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801e216:	2308      	movs	r3, #8
 801e218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801e21a:	2308      	movs	r3, #8
 801e21c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	681b      	ldr	r3, [r3, #0]
 801e222:	689b      	ldr	r3, [r3, #8]
 801e224:	0e5b      	lsrs	r3, r3, #25
 801e226:	b2db      	uxtb	r3, r3
 801e228:	f003 0307 	and.w	r3, r3, #7
 801e22c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	689b      	ldr	r3, [r3, #8]
 801e234:	0f5b      	lsrs	r3, r3, #29
 801e236:	b2db      	uxtb	r3, r3
 801e238:	f003 0307 	and.w	r3, r3, #7
 801e23c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801e23e:	7bbb      	ldrb	r3, [r7, #14]
 801e240:	7b3a      	ldrb	r2, [r7, #12]
 801e242:	4911      	ldr	r1, [pc, #68]	; (801e288 <UARTEx_SetNbDataToProcess+0x94>)
 801e244:	5c8a      	ldrb	r2, [r1, r2]
 801e246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801e24a:	7b3a      	ldrb	r2, [r7, #12]
 801e24c:	490f      	ldr	r1, [pc, #60]	; (801e28c <UARTEx_SetNbDataToProcess+0x98>)
 801e24e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801e250:	fb93 f3f2 	sdiv	r3, r3, r2
 801e254:	b29a      	uxth	r2, r3
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801e25c:	7bfb      	ldrb	r3, [r7, #15]
 801e25e:	7b7a      	ldrb	r2, [r7, #13]
 801e260:	4909      	ldr	r1, [pc, #36]	; (801e288 <UARTEx_SetNbDataToProcess+0x94>)
 801e262:	5c8a      	ldrb	r2, [r1, r2]
 801e264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801e268:	7b7a      	ldrb	r2, [r7, #13]
 801e26a:	4908      	ldr	r1, [pc, #32]	; (801e28c <UARTEx_SetNbDataToProcess+0x98>)
 801e26c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801e26e:	fb93 f3f2 	sdiv	r3, r3, r2
 801e272:	b29a      	uxth	r2, r3
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801e27a:	bf00      	nop
 801e27c:	3714      	adds	r7, #20
 801e27e:	46bd      	mov	sp, r7
 801e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e284:	4770      	bx	lr
 801e286:	bf00      	nop
 801e288:	080259c4 	.word	0x080259c4
 801e28c:	080259cc 	.word	0x080259cc

0801e290 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801e290:	b480      	push	{r7}
 801e292:	b08b      	sub	sp, #44	; 0x2c
 801e294:	af00      	add	r7, sp, #0
 801e296:	60f8      	str	r0, [r7, #12]
 801e298:	60b9      	str	r1, [r7, #8]
 801e29a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	681a      	ldr	r2, [r3, #0]
 801e2a0:	68bb      	ldr	r3, [r7, #8]
 801e2a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e2a4:	697b      	ldr	r3, [r7, #20]
 801e2a6:	fa93 f3a3 	rbit	r3, r3
 801e2aa:	613b      	str	r3, [r7, #16]
  return result;
 801e2ac:	693b      	ldr	r3, [r7, #16]
 801e2ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e2b0:	69bb      	ldr	r3, [r7, #24]
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d101      	bne.n	801e2ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801e2b6:	2320      	movs	r3, #32
 801e2b8:	e003      	b.n	801e2c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801e2ba:	69bb      	ldr	r3, [r7, #24]
 801e2bc:	fab3 f383 	clz	r3, r3
 801e2c0:	b2db      	uxtb	r3, r3
 801e2c2:	005b      	lsls	r3, r3, #1
 801e2c4:	2103      	movs	r1, #3
 801e2c6:	fa01 f303 	lsl.w	r3, r1, r3
 801e2ca:	43db      	mvns	r3, r3
 801e2cc:	401a      	ands	r2, r3
 801e2ce:	68bb      	ldr	r3, [r7, #8]
 801e2d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e2d2:	6a3b      	ldr	r3, [r7, #32]
 801e2d4:	fa93 f3a3 	rbit	r3, r3
 801e2d8:	61fb      	str	r3, [r7, #28]
  return result;
 801e2da:	69fb      	ldr	r3, [r7, #28]
 801e2dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d101      	bne.n	801e2e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801e2e4:	2320      	movs	r3, #32
 801e2e6:	e003      	b.n	801e2f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2ea:	fab3 f383 	clz	r3, r3
 801e2ee:	b2db      	uxtb	r3, r3
 801e2f0:	005b      	lsls	r3, r3, #1
 801e2f2:	6879      	ldr	r1, [r7, #4]
 801e2f4:	fa01 f303 	lsl.w	r3, r1, r3
 801e2f8:	431a      	orrs	r2, r3
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	601a      	str	r2, [r3, #0]
}
 801e2fe:	bf00      	nop
 801e300:	372c      	adds	r7, #44	; 0x2c
 801e302:	46bd      	mov	sp, r7
 801e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e308:	4770      	bx	lr

0801e30a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 801e30a:	b480      	push	{r7}
 801e30c:	b085      	sub	sp, #20
 801e30e:	af00      	add	r7, sp, #0
 801e310:	60f8      	str	r0, [r7, #12]
 801e312:	60b9      	str	r1, [r7, #8]
 801e314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801e316:	68fb      	ldr	r3, [r7, #12]
 801e318:	685a      	ldr	r2, [r3, #4]
 801e31a:	68bb      	ldr	r3, [r7, #8]
 801e31c:	43db      	mvns	r3, r3
 801e31e:	401a      	ands	r2, r3
 801e320:	68bb      	ldr	r3, [r7, #8]
 801e322:	6879      	ldr	r1, [r7, #4]
 801e324:	fb01 f303 	mul.w	r3, r1, r3
 801e328:	431a      	orrs	r2, r3
 801e32a:	68fb      	ldr	r3, [r7, #12]
 801e32c:	605a      	str	r2, [r3, #4]
}
 801e32e:	bf00      	nop
 801e330:	3714      	adds	r7, #20
 801e332:	46bd      	mov	sp, r7
 801e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e338:	4770      	bx	lr

0801e33a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801e33a:	b480      	push	{r7}
 801e33c:	b08b      	sub	sp, #44	; 0x2c
 801e33e:	af00      	add	r7, sp, #0
 801e340:	60f8      	str	r0, [r7, #12]
 801e342:	60b9      	str	r1, [r7, #8]
 801e344:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	689a      	ldr	r2, [r3, #8]
 801e34a:	68bb      	ldr	r3, [r7, #8]
 801e34c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e34e:	697b      	ldr	r3, [r7, #20]
 801e350:	fa93 f3a3 	rbit	r3, r3
 801e354:	613b      	str	r3, [r7, #16]
  return result;
 801e356:	693b      	ldr	r3, [r7, #16]
 801e358:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e35a:	69bb      	ldr	r3, [r7, #24]
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	d101      	bne.n	801e364 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801e360:	2320      	movs	r3, #32
 801e362:	e003      	b.n	801e36c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801e364:	69bb      	ldr	r3, [r7, #24]
 801e366:	fab3 f383 	clz	r3, r3
 801e36a:	b2db      	uxtb	r3, r3
 801e36c:	005b      	lsls	r3, r3, #1
 801e36e:	2103      	movs	r1, #3
 801e370:	fa01 f303 	lsl.w	r3, r1, r3
 801e374:	43db      	mvns	r3, r3
 801e376:	401a      	ands	r2, r3
 801e378:	68bb      	ldr	r3, [r7, #8]
 801e37a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e37c:	6a3b      	ldr	r3, [r7, #32]
 801e37e:	fa93 f3a3 	rbit	r3, r3
 801e382:	61fb      	str	r3, [r7, #28]
  return result;
 801e384:	69fb      	ldr	r3, [r7, #28]
 801e386:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	d101      	bne.n	801e392 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801e38e:	2320      	movs	r3, #32
 801e390:	e003      	b.n	801e39a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e394:	fab3 f383 	clz	r3, r3
 801e398:	b2db      	uxtb	r3, r3
 801e39a:	005b      	lsls	r3, r3, #1
 801e39c:	6879      	ldr	r1, [r7, #4]
 801e39e:	fa01 f303 	lsl.w	r3, r1, r3
 801e3a2:	431a      	orrs	r2, r3
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 801e3a8:	bf00      	nop
 801e3aa:	372c      	adds	r7, #44	; 0x2c
 801e3ac:	46bd      	mov	sp, r7
 801e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3b2:	4770      	bx	lr

0801e3b4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 801e3b4:	b480      	push	{r7}
 801e3b6:	b08b      	sub	sp, #44	; 0x2c
 801e3b8:	af00      	add	r7, sp, #0
 801e3ba:	60f8      	str	r0, [r7, #12]
 801e3bc:	60b9      	str	r1, [r7, #8]
 801e3be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801e3c0:	68fb      	ldr	r3, [r7, #12]
 801e3c2:	68da      	ldr	r2, [r3, #12]
 801e3c4:	68bb      	ldr	r3, [r7, #8]
 801e3c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e3c8:	697b      	ldr	r3, [r7, #20]
 801e3ca:	fa93 f3a3 	rbit	r3, r3
 801e3ce:	613b      	str	r3, [r7, #16]
  return result;
 801e3d0:	693b      	ldr	r3, [r7, #16]
 801e3d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e3d4:	69bb      	ldr	r3, [r7, #24]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d101      	bne.n	801e3de <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801e3da:	2320      	movs	r3, #32
 801e3dc:	e003      	b.n	801e3e6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801e3de:	69bb      	ldr	r3, [r7, #24]
 801e3e0:	fab3 f383 	clz	r3, r3
 801e3e4:	b2db      	uxtb	r3, r3
 801e3e6:	005b      	lsls	r3, r3, #1
 801e3e8:	2103      	movs	r1, #3
 801e3ea:	fa01 f303 	lsl.w	r3, r1, r3
 801e3ee:	43db      	mvns	r3, r3
 801e3f0:	401a      	ands	r2, r3
 801e3f2:	68bb      	ldr	r3, [r7, #8]
 801e3f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e3f6:	6a3b      	ldr	r3, [r7, #32]
 801e3f8:	fa93 f3a3 	rbit	r3, r3
 801e3fc:	61fb      	str	r3, [r7, #28]
  return result;
 801e3fe:	69fb      	ldr	r3, [r7, #28]
 801e400:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e404:	2b00      	cmp	r3, #0
 801e406:	d101      	bne.n	801e40c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801e408:	2320      	movs	r3, #32
 801e40a:	e003      	b.n	801e414 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e40e:	fab3 f383 	clz	r3, r3
 801e412:	b2db      	uxtb	r3, r3
 801e414:	005b      	lsls	r3, r3, #1
 801e416:	6879      	ldr	r1, [r7, #4]
 801e418:	fa01 f303 	lsl.w	r3, r1, r3
 801e41c:	431a      	orrs	r2, r3
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	60da      	str	r2, [r3, #12]
}
 801e422:	bf00      	nop
 801e424:	372c      	adds	r7, #44	; 0x2c
 801e426:	46bd      	mov	sp, r7
 801e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e42c:	4770      	bx	lr

0801e42e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801e42e:	b480      	push	{r7}
 801e430:	b08b      	sub	sp, #44	; 0x2c
 801e432:	af00      	add	r7, sp, #0
 801e434:	60f8      	str	r0, [r7, #12]
 801e436:	60b9      	str	r1, [r7, #8]
 801e438:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	6a1a      	ldr	r2, [r3, #32]
 801e43e:	68bb      	ldr	r3, [r7, #8]
 801e440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e442:	697b      	ldr	r3, [r7, #20]
 801e444:	fa93 f3a3 	rbit	r3, r3
 801e448:	613b      	str	r3, [r7, #16]
  return result;
 801e44a:	693b      	ldr	r3, [r7, #16]
 801e44c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e44e:	69bb      	ldr	r3, [r7, #24]
 801e450:	2b00      	cmp	r3, #0
 801e452:	d101      	bne.n	801e458 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801e454:	2320      	movs	r3, #32
 801e456:	e003      	b.n	801e460 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801e458:	69bb      	ldr	r3, [r7, #24]
 801e45a:	fab3 f383 	clz	r3, r3
 801e45e:	b2db      	uxtb	r3, r3
 801e460:	009b      	lsls	r3, r3, #2
 801e462:	210f      	movs	r1, #15
 801e464:	fa01 f303 	lsl.w	r3, r1, r3
 801e468:	43db      	mvns	r3, r3
 801e46a:	401a      	ands	r2, r3
 801e46c:	68bb      	ldr	r3, [r7, #8]
 801e46e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e470:	6a3b      	ldr	r3, [r7, #32]
 801e472:	fa93 f3a3 	rbit	r3, r3
 801e476:	61fb      	str	r3, [r7, #28]
  return result;
 801e478:	69fb      	ldr	r3, [r7, #28]
 801e47a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d101      	bne.n	801e486 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801e482:	2320      	movs	r3, #32
 801e484:	e003      	b.n	801e48e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e488:	fab3 f383 	clz	r3, r3
 801e48c:	b2db      	uxtb	r3, r3
 801e48e:	009b      	lsls	r3, r3, #2
 801e490:	6879      	ldr	r1, [r7, #4]
 801e492:	fa01 f303 	lsl.w	r3, r1, r3
 801e496:	431a      	orrs	r2, r3
 801e498:	68fb      	ldr	r3, [r7, #12]
 801e49a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 801e49c:	bf00      	nop
 801e49e:	372c      	adds	r7, #44	; 0x2c
 801e4a0:	46bd      	mov	sp, r7
 801e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4a6:	4770      	bx	lr

0801e4a8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801e4a8:	b480      	push	{r7}
 801e4aa:	b08b      	sub	sp, #44	; 0x2c
 801e4ac:	af00      	add	r7, sp, #0
 801e4ae:	60f8      	str	r0, [r7, #12]
 801e4b0:	60b9      	str	r1, [r7, #8]
 801e4b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e4b8:	68bb      	ldr	r3, [r7, #8]
 801e4ba:	0a1b      	lsrs	r3, r3, #8
 801e4bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e4be:	697b      	ldr	r3, [r7, #20]
 801e4c0:	fa93 f3a3 	rbit	r3, r3
 801e4c4:	613b      	str	r3, [r7, #16]
  return result;
 801e4c6:	693b      	ldr	r3, [r7, #16]
 801e4c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e4ca:	69bb      	ldr	r3, [r7, #24]
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d101      	bne.n	801e4d4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 801e4d0:	2320      	movs	r3, #32
 801e4d2:	e003      	b.n	801e4dc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801e4d4:	69bb      	ldr	r3, [r7, #24]
 801e4d6:	fab3 f383 	clz	r3, r3
 801e4da:	b2db      	uxtb	r3, r3
 801e4dc:	009b      	lsls	r3, r3, #2
 801e4de:	210f      	movs	r1, #15
 801e4e0:	fa01 f303 	lsl.w	r3, r1, r3
 801e4e4:	43db      	mvns	r3, r3
 801e4e6:	401a      	ands	r2, r3
 801e4e8:	68bb      	ldr	r3, [r7, #8]
 801e4ea:	0a1b      	lsrs	r3, r3, #8
 801e4ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e4ee:	6a3b      	ldr	r3, [r7, #32]
 801e4f0:	fa93 f3a3 	rbit	r3, r3
 801e4f4:	61fb      	str	r3, [r7, #28]
  return result;
 801e4f6:	69fb      	ldr	r3, [r7, #28]
 801e4f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d101      	bne.n	801e504 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801e500:	2320      	movs	r3, #32
 801e502:	e003      	b.n	801e50c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e506:	fab3 f383 	clz	r3, r3
 801e50a:	b2db      	uxtb	r3, r3
 801e50c:	009b      	lsls	r3, r3, #2
 801e50e:	6879      	ldr	r1, [r7, #4]
 801e510:	fa01 f303 	lsl.w	r3, r1, r3
 801e514:	431a      	orrs	r2, r3
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 801e51a:	bf00      	nop
 801e51c:	372c      	adds	r7, #44	; 0x2c
 801e51e:	46bd      	mov	sp, r7
 801e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e524:	4770      	bx	lr

0801e526 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801e526:	b580      	push	{r7, lr}
 801e528:	b088      	sub	sp, #32
 801e52a:	af00      	add	r7, sp, #0
 801e52c:	6078      	str	r0, [r7, #4]
 801e52e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801e530:	683b      	ldr	r3, [r7, #0]
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e536:	693b      	ldr	r3, [r7, #16]
 801e538:	fa93 f3a3 	rbit	r3, r3
 801e53c:	60fb      	str	r3, [r7, #12]
  return result;
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801e542:	697b      	ldr	r3, [r7, #20]
 801e544:	2b00      	cmp	r3, #0
 801e546:	d101      	bne.n	801e54c <LL_GPIO_Init+0x26>
    return 32U;
 801e548:	2320      	movs	r3, #32
 801e54a:	e003      	b.n	801e554 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801e54c:	697b      	ldr	r3, [r7, #20]
 801e54e:	fab3 f383 	clz	r3, r3
 801e552:	b2db      	uxtb	r3, r3
 801e554:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801e556:	e047      	b.n	801e5e8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 801e558:	683b      	ldr	r3, [r7, #0]
 801e55a:	681a      	ldr	r2, [r3, #0]
 801e55c:	2101      	movs	r1, #1
 801e55e:	69fb      	ldr	r3, [r7, #28]
 801e560:	fa01 f303 	lsl.w	r3, r1, r3
 801e564:	4013      	ands	r3, r2
 801e566:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 801e568:	69bb      	ldr	r3, [r7, #24]
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d039      	beq.n	801e5e2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801e56e:	683b      	ldr	r3, [r7, #0]
 801e570:	685b      	ldr	r3, [r3, #4]
 801e572:	2b01      	cmp	r3, #1
 801e574:	d003      	beq.n	801e57e <LL_GPIO_Init+0x58>
 801e576:	683b      	ldr	r3, [r7, #0]
 801e578:	685b      	ldr	r3, [r3, #4]
 801e57a:	2b02      	cmp	r3, #2
 801e57c:	d10d      	bne.n	801e59a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801e57e:	683b      	ldr	r3, [r7, #0]
 801e580:	689b      	ldr	r3, [r3, #8]
 801e582:	461a      	mov	r2, r3
 801e584:	69b9      	ldr	r1, [r7, #24]
 801e586:	6878      	ldr	r0, [r7, #4]
 801e588:	f7ff fed7 	bl	801e33a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 801e58c:	683b      	ldr	r3, [r7, #0]
 801e58e:	68db      	ldr	r3, [r3, #12]
 801e590:	461a      	mov	r2, r3
 801e592:	69b9      	ldr	r1, [r7, #24]
 801e594:	6878      	ldr	r0, [r7, #4]
 801e596:	f7ff feb8 	bl	801e30a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801e59a:	683b      	ldr	r3, [r7, #0]
 801e59c:	691b      	ldr	r3, [r3, #16]
 801e59e:	461a      	mov	r2, r3
 801e5a0:	69b9      	ldr	r1, [r7, #24]
 801e5a2:	6878      	ldr	r0, [r7, #4]
 801e5a4:	f7ff ff06 	bl	801e3b4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801e5a8:	683b      	ldr	r3, [r7, #0]
 801e5aa:	685b      	ldr	r3, [r3, #4]
 801e5ac:	2b02      	cmp	r3, #2
 801e5ae:	d111      	bne.n	801e5d4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801e5b0:	69bb      	ldr	r3, [r7, #24]
 801e5b2:	2bff      	cmp	r3, #255	; 0xff
 801e5b4:	d807      	bhi.n	801e5c6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801e5b6:	683b      	ldr	r3, [r7, #0]
 801e5b8:	695b      	ldr	r3, [r3, #20]
 801e5ba:	461a      	mov	r2, r3
 801e5bc:	69b9      	ldr	r1, [r7, #24]
 801e5be:	6878      	ldr	r0, [r7, #4]
 801e5c0:	f7ff ff35 	bl	801e42e <LL_GPIO_SetAFPin_0_7>
 801e5c4:	e006      	b.n	801e5d4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801e5c6:	683b      	ldr	r3, [r7, #0]
 801e5c8:	695b      	ldr	r3, [r3, #20]
 801e5ca:	461a      	mov	r2, r3
 801e5cc:	69b9      	ldr	r1, [r7, #24]
 801e5ce:	6878      	ldr	r0, [r7, #4]
 801e5d0:	f7ff ff6a 	bl	801e4a8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801e5d4:	683b      	ldr	r3, [r7, #0]
 801e5d6:	685b      	ldr	r3, [r3, #4]
 801e5d8:	461a      	mov	r2, r3
 801e5da:	69b9      	ldr	r1, [r7, #24]
 801e5dc:	6878      	ldr	r0, [r7, #4]
 801e5de:	f7ff fe57 	bl	801e290 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801e5e2:	69fb      	ldr	r3, [r7, #28]
 801e5e4:	3301      	adds	r3, #1
 801e5e6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801e5e8:	683b      	ldr	r3, [r7, #0]
 801e5ea:	681a      	ldr	r2, [r3, #0]
 801e5ec:	69fb      	ldr	r3, [r7, #28]
 801e5ee:	fa22 f303 	lsr.w	r3, r2, r3
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	d1b0      	bne.n	801e558 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801e5f6:	2300      	movs	r3, #0
}
 801e5f8:	4618      	mov	r0, r3
 801e5fa:	3720      	adds	r7, #32
 801e5fc:	46bd      	mov	sp, r7
 801e5fe:	bd80      	pop	{r7, pc}

0801e600 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801e600:	b480      	push	{r7}
 801e602:	b085      	sub	sp, #20
 801e604:	af00      	add	r7, sp, #0
 801e606:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e608:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801e60c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801e614:	b29a      	uxth	r2, r3
 801e616:	68fb      	ldr	r3, [r7, #12]
 801e618:	b29b      	uxth	r3, r3
 801e61a:	43db      	mvns	r3, r3
 801e61c:	b29b      	uxth	r3, r3
 801e61e:	4013      	ands	r3, r2
 801e620:	b29a      	uxth	r2, r3
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801e628:	2300      	movs	r3, #0
}
 801e62a:	4618      	mov	r0, r3
 801e62c:	3714      	adds	r7, #20
 801e62e:	46bd      	mov	sp, r7
 801e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e634:	4770      	bx	lr

0801e636 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801e636:	b084      	sub	sp, #16
 801e638:	b480      	push	{r7}
 801e63a:	b083      	sub	sp, #12
 801e63c:	af00      	add	r7, sp, #0
 801e63e:	6078      	str	r0, [r7, #4]
 801e640:	f107 0014 	add.w	r0, r7, #20
 801e644:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	2201      	movs	r2, #1
 801e64c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	2200      	movs	r2, #0
 801e654:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	2200      	movs	r2, #0
 801e65c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	2200      	movs	r2, #0
 801e664:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801e668:	2300      	movs	r3, #0
}
 801e66a:	4618      	mov	r0, r3
 801e66c:	370c      	adds	r7, #12
 801e66e:	46bd      	mov	sp, r7
 801e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e674:	b004      	add	sp, #16
 801e676:	4770      	bx	lr

0801e678 <__NVIC_SetPriority>:
{
 801e678:	b480      	push	{r7}
 801e67a:	b083      	sub	sp, #12
 801e67c:	af00      	add	r7, sp, #0
 801e67e:	4603      	mov	r3, r0
 801e680:	6039      	str	r1, [r7, #0]
 801e682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801e684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e688:	2b00      	cmp	r3, #0
 801e68a:	db0a      	blt.n	801e6a2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801e68c:	683b      	ldr	r3, [r7, #0]
 801e68e:	b2da      	uxtb	r2, r3
 801e690:	490c      	ldr	r1, [pc, #48]	; (801e6c4 <__NVIC_SetPriority+0x4c>)
 801e692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e696:	0152      	lsls	r2, r2, #5
 801e698:	b2d2      	uxtb	r2, r2
 801e69a:	440b      	add	r3, r1
 801e69c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801e6a0:	e00a      	b.n	801e6b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801e6a2:	683b      	ldr	r3, [r7, #0]
 801e6a4:	b2da      	uxtb	r2, r3
 801e6a6:	4908      	ldr	r1, [pc, #32]	; (801e6c8 <__NVIC_SetPriority+0x50>)
 801e6a8:	79fb      	ldrb	r3, [r7, #7]
 801e6aa:	f003 030f 	and.w	r3, r3, #15
 801e6ae:	3b04      	subs	r3, #4
 801e6b0:	0152      	lsls	r2, r2, #5
 801e6b2:	b2d2      	uxtb	r2, r2
 801e6b4:	440b      	add	r3, r1
 801e6b6:	761a      	strb	r2, [r3, #24]
}
 801e6b8:	bf00      	nop
 801e6ba:	370c      	adds	r7, #12
 801e6bc:	46bd      	mov	sp, r7
 801e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6c2:	4770      	bx	lr
 801e6c4:	e000e100 	.word	0xe000e100
 801e6c8:	e000ed00 	.word	0xe000ed00

0801e6cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801e6cc:	b580      	push	{r7, lr}
 801e6ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801e6d0:	4b05      	ldr	r3, [pc, #20]	; (801e6e8 <SysTick_Handler+0x1c>)
 801e6d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801e6d4:	f001 fbe0 	bl	801fe98 <xTaskGetSchedulerState>
 801e6d8:	4603      	mov	r3, r0
 801e6da:	2b01      	cmp	r3, #1
 801e6dc:	d001      	beq.n	801e6e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801e6de:	f002 f835 	bl	802074c <xPortSysTickHandler>
  }
}
 801e6e2:	bf00      	nop
 801e6e4:	bd80      	pop	{r7, pc}
 801e6e6:	bf00      	nop
 801e6e8:	e000e010 	.word	0xe000e010

0801e6ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801e6ec:	b580      	push	{r7, lr}
 801e6ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801e6f0:	2100      	movs	r1, #0
 801e6f2:	f06f 0004 	mvn.w	r0, #4
 801e6f6:	f7ff ffbf 	bl	801e678 <__NVIC_SetPriority>
#endif
}
 801e6fa:	bf00      	nop
 801e6fc:	bd80      	pop	{r7, pc}
	...

0801e700 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801e700:	b480      	push	{r7}
 801e702:	b083      	sub	sp, #12
 801e704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e706:	f3ef 8305 	mrs	r3, IPSR
 801e70a:	603b      	str	r3, [r7, #0]
  return(result);
 801e70c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d003      	beq.n	801e71a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801e712:	f06f 0305 	mvn.w	r3, #5
 801e716:	607b      	str	r3, [r7, #4]
 801e718:	e00c      	b.n	801e734 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801e71a:	4b0a      	ldr	r3, [pc, #40]	; (801e744 <osKernelInitialize+0x44>)
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d105      	bne.n	801e72e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801e722:	4b08      	ldr	r3, [pc, #32]	; (801e744 <osKernelInitialize+0x44>)
 801e724:	2201      	movs	r2, #1
 801e726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801e728:	2300      	movs	r3, #0
 801e72a:	607b      	str	r3, [r7, #4]
 801e72c:	e002      	b.n	801e734 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801e72e:	f04f 33ff 	mov.w	r3, #4294967295
 801e732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801e734:	687b      	ldr	r3, [r7, #4]
}
 801e736:	4618      	mov	r0, r3
 801e738:	370c      	adds	r7, #12
 801e73a:	46bd      	mov	sp, r7
 801e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e740:	4770      	bx	lr
 801e742:	bf00      	nop
 801e744:	20000fd0 	.word	0x20000fd0

0801e748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801e748:	b580      	push	{r7, lr}
 801e74a:	b082      	sub	sp, #8
 801e74c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e74e:	f3ef 8305 	mrs	r3, IPSR
 801e752:	603b      	str	r3, [r7, #0]
  return(result);
 801e754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e756:	2b00      	cmp	r3, #0
 801e758:	d003      	beq.n	801e762 <osKernelStart+0x1a>
    stat = osErrorISR;
 801e75a:	f06f 0305 	mvn.w	r3, #5
 801e75e:	607b      	str	r3, [r7, #4]
 801e760:	e010      	b.n	801e784 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801e762:	4b0b      	ldr	r3, [pc, #44]	; (801e790 <osKernelStart+0x48>)
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	2b01      	cmp	r3, #1
 801e768:	d109      	bne.n	801e77e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801e76a:	f7ff ffbf 	bl	801e6ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801e76e:	4b08      	ldr	r3, [pc, #32]	; (801e790 <osKernelStart+0x48>)
 801e770:	2202      	movs	r2, #2
 801e772:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801e774:	f000 ffb2 	bl	801f6dc <vTaskStartScheduler>
      stat = osOK;
 801e778:	2300      	movs	r3, #0
 801e77a:	607b      	str	r3, [r7, #4]
 801e77c:	e002      	b.n	801e784 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801e77e:	f04f 33ff 	mov.w	r3, #4294967295
 801e782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801e784:	687b      	ldr	r3, [r7, #4]
}
 801e786:	4618      	mov	r0, r3
 801e788:	3708      	adds	r7, #8
 801e78a:	46bd      	mov	sp, r7
 801e78c:	bd80      	pop	{r7, pc}
 801e78e:	bf00      	nop
 801e790:	20000fd0 	.word	0x20000fd0

0801e794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801e794:	b580      	push	{r7, lr}
 801e796:	b08e      	sub	sp, #56	; 0x38
 801e798:	af04      	add	r7, sp, #16
 801e79a:	60f8      	str	r0, [r7, #12]
 801e79c:	60b9      	str	r1, [r7, #8]
 801e79e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801e7a0:	2300      	movs	r3, #0
 801e7a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e7a4:	f3ef 8305 	mrs	r3, IPSR
 801e7a8:	617b      	str	r3, [r7, #20]
  return(result);
 801e7aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d17e      	bne.n	801e8ae <osThreadNew+0x11a>
 801e7b0:	68fb      	ldr	r3, [r7, #12]
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d07b      	beq.n	801e8ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801e7b6:	2380      	movs	r3, #128	; 0x80
 801e7b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801e7ba:	2318      	movs	r3, #24
 801e7bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801e7be:	2300      	movs	r3, #0
 801e7c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801e7c2:	f04f 33ff 	mov.w	r3, #4294967295
 801e7c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d045      	beq.n	801e85a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	d002      	beq.n	801e7dc <osThreadNew+0x48>
        name = attr->name;
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	699b      	ldr	r3, [r3, #24]
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	d002      	beq.n	801e7ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	699b      	ldr	r3, [r3, #24]
 801e7e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801e7ea:	69fb      	ldr	r3, [r7, #28]
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d008      	beq.n	801e802 <osThreadNew+0x6e>
 801e7f0:	69fb      	ldr	r3, [r7, #28]
 801e7f2:	2b38      	cmp	r3, #56	; 0x38
 801e7f4:	d805      	bhi.n	801e802 <osThreadNew+0x6e>
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	685b      	ldr	r3, [r3, #4]
 801e7fa:	f003 0301 	and.w	r3, r3, #1
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	d001      	beq.n	801e806 <osThreadNew+0x72>
        return (NULL);
 801e802:	2300      	movs	r3, #0
 801e804:	e054      	b.n	801e8b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	695b      	ldr	r3, [r3, #20]
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d003      	beq.n	801e816 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	695b      	ldr	r3, [r3, #20]
 801e812:	089b      	lsrs	r3, r3, #2
 801e814:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	689b      	ldr	r3, [r3, #8]
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	d00e      	beq.n	801e83c <osThreadNew+0xa8>
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	68db      	ldr	r3, [r3, #12]
 801e822:	2b5b      	cmp	r3, #91	; 0x5b
 801e824:	d90a      	bls.n	801e83c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d006      	beq.n	801e83c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	695b      	ldr	r3, [r3, #20]
 801e832:	2b00      	cmp	r3, #0
 801e834:	d002      	beq.n	801e83c <osThreadNew+0xa8>
        mem = 1;
 801e836:	2301      	movs	r3, #1
 801e838:	61bb      	str	r3, [r7, #24]
 801e83a:	e010      	b.n	801e85e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	689b      	ldr	r3, [r3, #8]
 801e840:	2b00      	cmp	r3, #0
 801e842:	d10c      	bne.n	801e85e <osThreadNew+0xca>
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	68db      	ldr	r3, [r3, #12]
 801e848:	2b00      	cmp	r3, #0
 801e84a:	d108      	bne.n	801e85e <osThreadNew+0xca>
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	691b      	ldr	r3, [r3, #16]
 801e850:	2b00      	cmp	r3, #0
 801e852:	d104      	bne.n	801e85e <osThreadNew+0xca>
          mem = 0;
 801e854:	2300      	movs	r3, #0
 801e856:	61bb      	str	r3, [r7, #24]
 801e858:	e001      	b.n	801e85e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801e85a:	2300      	movs	r3, #0
 801e85c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801e85e:	69bb      	ldr	r3, [r7, #24]
 801e860:	2b01      	cmp	r3, #1
 801e862:	d110      	bne.n	801e886 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801e868:	687a      	ldr	r2, [r7, #4]
 801e86a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e86c:	9202      	str	r2, [sp, #8]
 801e86e:	9301      	str	r3, [sp, #4]
 801e870:	69fb      	ldr	r3, [r7, #28]
 801e872:	9300      	str	r3, [sp, #0]
 801e874:	68bb      	ldr	r3, [r7, #8]
 801e876:	6a3a      	ldr	r2, [r7, #32]
 801e878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e87a:	68f8      	ldr	r0, [r7, #12]
 801e87c:	f000 fd30 	bl	801f2e0 <xTaskCreateStatic>
 801e880:	4603      	mov	r3, r0
 801e882:	613b      	str	r3, [r7, #16]
 801e884:	e013      	b.n	801e8ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801e886:	69bb      	ldr	r3, [r7, #24]
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d110      	bne.n	801e8ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801e88c:	6a3b      	ldr	r3, [r7, #32]
 801e88e:	b29a      	uxth	r2, r3
 801e890:	f107 0310 	add.w	r3, r7, #16
 801e894:	9301      	str	r3, [sp, #4]
 801e896:	69fb      	ldr	r3, [r7, #28]
 801e898:	9300      	str	r3, [sp, #0]
 801e89a:	68bb      	ldr	r3, [r7, #8]
 801e89c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e89e:	68f8      	ldr	r0, [r7, #12]
 801e8a0:	f000 fd63 	bl	801f36a <xTaskCreate>
 801e8a4:	4603      	mov	r3, r0
 801e8a6:	2b01      	cmp	r3, #1
 801e8a8:	d001      	beq.n	801e8ae <osThreadNew+0x11a>
            hTask = NULL;
 801e8aa:	2300      	movs	r3, #0
 801e8ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801e8ae:	693b      	ldr	r3, [r7, #16]
}
 801e8b0:	4618      	mov	r0, r3
 801e8b2:	3728      	adds	r7, #40	; 0x28
 801e8b4:	46bd      	mov	sp, r7
 801e8b6:	bd80      	pop	{r7, pc}

0801e8b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801e8b8:	b480      	push	{r7}
 801e8ba:	b085      	sub	sp, #20
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	60f8      	str	r0, [r7, #12]
 801e8c0:	60b9      	str	r1, [r7, #8]
 801e8c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	4a07      	ldr	r2, [pc, #28]	; (801e8e4 <vApplicationGetIdleTaskMemory+0x2c>)
 801e8c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801e8ca:	68bb      	ldr	r3, [r7, #8]
 801e8cc:	4a06      	ldr	r2, [pc, #24]	; (801e8e8 <vApplicationGetIdleTaskMemory+0x30>)
 801e8ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	2280      	movs	r2, #128	; 0x80
 801e8d4:	601a      	str	r2, [r3, #0]
}
 801e8d6:	bf00      	nop
 801e8d8:	3714      	adds	r7, #20
 801e8da:	46bd      	mov	sp, r7
 801e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8e0:	4770      	bx	lr
 801e8e2:	bf00      	nop
 801e8e4:	20000fd4 	.word	0x20000fd4
 801e8e8:	20001030 	.word	0x20001030

0801e8ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801e8ec:	b480      	push	{r7}
 801e8ee:	b085      	sub	sp, #20
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	60f8      	str	r0, [r7, #12]
 801e8f4:	60b9      	str	r1, [r7, #8]
 801e8f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	4a07      	ldr	r2, [pc, #28]	; (801e918 <vApplicationGetTimerTaskMemory+0x2c>)
 801e8fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801e8fe:	68bb      	ldr	r3, [r7, #8]
 801e900:	4a06      	ldr	r2, [pc, #24]	; (801e91c <vApplicationGetTimerTaskMemory+0x30>)
 801e902:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e90a:	601a      	str	r2, [r3, #0]
}
 801e90c:	bf00      	nop
 801e90e:	3714      	adds	r7, #20
 801e910:	46bd      	mov	sp, r7
 801e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e916:	4770      	bx	lr
 801e918:	20001230 	.word	0x20001230
 801e91c:	2000128c 	.word	0x2000128c

0801e920 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801e920:	b480      	push	{r7}
 801e922:	b083      	sub	sp, #12
 801e924:	af00      	add	r7, sp, #0
 801e926:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	f103 0208 	add.w	r2, r3, #8
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	f04f 32ff 	mov.w	r2, #4294967295
 801e938:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	f103 0208 	add.w	r2, r3, #8
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	f103 0208 	add.w	r2, r3, #8
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	2200      	movs	r2, #0
 801e952:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801e954:	bf00      	nop
 801e956:	370c      	adds	r7, #12
 801e958:	46bd      	mov	sp, r7
 801e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e95e:	4770      	bx	lr

0801e960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801e960:	b480      	push	{r7}
 801e962:	b083      	sub	sp, #12
 801e964:	af00      	add	r7, sp, #0
 801e966:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	2200      	movs	r2, #0
 801e96c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801e96e:	bf00      	nop
 801e970:	370c      	adds	r7, #12
 801e972:	46bd      	mov	sp, r7
 801e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e978:	4770      	bx	lr

0801e97a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e97a:	b480      	push	{r7}
 801e97c:	b085      	sub	sp, #20
 801e97e:	af00      	add	r7, sp, #0
 801e980:	6078      	str	r0, [r7, #4]
 801e982:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	685b      	ldr	r3, [r3, #4]
 801e988:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801e98a:	683b      	ldr	r3, [r7, #0]
 801e98c:	68fa      	ldr	r2, [r7, #12]
 801e98e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	689a      	ldr	r2, [r3, #8]
 801e994:	683b      	ldr	r3, [r7, #0]
 801e996:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801e998:	68fb      	ldr	r3, [r7, #12]
 801e99a:	689b      	ldr	r3, [r3, #8]
 801e99c:	683a      	ldr	r2, [r7, #0]
 801e99e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801e9a0:	68fb      	ldr	r3, [r7, #12]
 801e9a2:	683a      	ldr	r2, [r7, #0]
 801e9a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801e9a6:	683b      	ldr	r3, [r7, #0]
 801e9a8:	687a      	ldr	r2, [r7, #4]
 801e9aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	1c5a      	adds	r2, r3, #1
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	601a      	str	r2, [r3, #0]
}
 801e9b6:	bf00      	nop
 801e9b8:	3714      	adds	r7, #20
 801e9ba:	46bd      	mov	sp, r7
 801e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9c0:	4770      	bx	lr

0801e9c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e9c2:	b480      	push	{r7}
 801e9c4:	b085      	sub	sp, #20
 801e9c6:	af00      	add	r7, sp, #0
 801e9c8:	6078      	str	r0, [r7, #4]
 801e9ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801e9cc:	683b      	ldr	r3, [r7, #0]
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801e9d2:	68bb      	ldr	r3, [r7, #8]
 801e9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e9d8:	d103      	bne.n	801e9e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	691b      	ldr	r3, [r3, #16]
 801e9de:	60fb      	str	r3, [r7, #12]
 801e9e0:	e00c      	b.n	801e9fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	3308      	adds	r3, #8
 801e9e6:	60fb      	str	r3, [r7, #12]
 801e9e8:	e002      	b.n	801e9f0 <vListInsert+0x2e>
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	685b      	ldr	r3, [r3, #4]
 801e9ee:	60fb      	str	r3, [r7, #12]
 801e9f0:	68fb      	ldr	r3, [r7, #12]
 801e9f2:	685b      	ldr	r3, [r3, #4]
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	68ba      	ldr	r2, [r7, #8]
 801e9f8:	429a      	cmp	r2, r3
 801e9fa:	d2f6      	bcs.n	801e9ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801e9fc:	68fb      	ldr	r3, [r7, #12]
 801e9fe:	685a      	ldr	r2, [r3, #4]
 801ea00:	683b      	ldr	r3, [r7, #0]
 801ea02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801ea04:	683b      	ldr	r3, [r7, #0]
 801ea06:	685b      	ldr	r3, [r3, #4]
 801ea08:	683a      	ldr	r2, [r7, #0]
 801ea0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801ea0c:	683b      	ldr	r3, [r7, #0]
 801ea0e:	68fa      	ldr	r2, [r7, #12]
 801ea10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	683a      	ldr	r2, [r7, #0]
 801ea16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801ea18:	683b      	ldr	r3, [r7, #0]
 801ea1a:	687a      	ldr	r2, [r7, #4]
 801ea1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	1c5a      	adds	r2, r3, #1
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	601a      	str	r2, [r3, #0]
}
 801ea28:	bf00      	nop
 801ea2a:	3714      	adds	r7, #20
 801ea2c:	46bd      	mov	sp, r7
 801ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea32:	4770      	bx	lr

0801ea34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801ea34:	b480      	push	{r7}
 801ea36:	b085      	sub	sp, #20
 801ea38:	af00      	add	r7, sp, #0
 801ea3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	691b      	ldr	r3, [r3, #16]
 801ea40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	685b      	ldr	r3, [r3, #4]
 801ea46:	687a      	ldr	r2, [r7, #4]
 801ea48:	6892      	ldr	r2, [r2, #8]
 801ea4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	689b      	ldr	r3, [r3, #8]
 801ea50:	687a      	ldr	r2, [r7, #4]
 801ea52:	6852      	ldr	r2, [r2, #4]
 801ea54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	685b      	ldr	r3, [r3, #4]
 801ea5a:	687a      	ldr	r2, [r7, #4]
 801ea5c:	429a      	cmp	r2, r3
 801ea5e:	d103      	bne.n	801ea68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	689a      	ldr	r2, [r3, #8]
 801ea64:	68fb      	ldr	r3, [r7, #12]
 801ea66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801ea6e:	68fb      	ldr	r3, [r7, #12]
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	1e5a      	subs	r2, r3, #1
 801ea74:	68fb      	ldr	r3, [r7, #12]
 801ea76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801ea78:	68fb      	ldr	r3, [r7, #12]
 801ea7a:	681b      	ldr	r3, [r3, #0]
}
 801ea7c:	4618      	mov	r0, r3
 801ea7e:	3714      	adds	r7, #20
 801ea80:	46bd      	mov	sp, r7
 801ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea86:	4770      	bx	lr

0801ea88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801ea88:	b580      	push	{r7, lr}
 801ea8a:	b084      	sub	sp, #16
 801ea8c:	af00      	add	r7, sp, #0
 801ea8e:	6078      	str	r0, [r7, #4]
 801ea90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801ea96:	68fb      	ldr	r3, [r7, #12]
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	d102      	bne.n	801eaa2 <xQueueGenericReset+0x1a>
 801ea9c:	f001 ff5c 	bl	8020958 <ulSetInterruptMask>
 801eaa0:	e7fe      	b.n	801eaa0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 801eaa2:	f001 fe27 	bl	80206f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801eaa6:	68fb      	ldr	r3, [r7, #12]
 801eaa8:	681a      	ldr	r2, [r3, #0]
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eaae:	68f9      	ldr	r1, [r7, #12]
 801eab0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801eab2:	fb01 f303 	mul.w	r3, r1, r3
 801eab6:	441a      	add	r2, r3
 801eab8:	68fb      	ldr	r3, [r7, #12]
 801eaba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801eabc:	68fb      	ldr	r3, [r7, #12]
 801eabe:	2200      	movs	r2, #0
 801eac0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	681a      	ldr	r2, [r3, #0]
 801eac6:	68fb      	ldr	r3, [r7, #12]
 801eac8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801eaca:	68fb      	ldr	r3, [r7, #12]
 801eacc:	681a      	ldr	r2, [r3, #0]
 801eace:	68fb      	ldr	r3, [r7, #12]
 801ead0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ead2:	3b01      	subs	r3, #1
 801ead4:	68f9      	ldr	r1, [r7, #12]
 801ead6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ead8:	fb01 f303 	mul.w	r3, r1, r3
 801eadc:	441a      	add	r2, r3
 801eade:	68fb      	ldr	r3, [r7, #12]
 801eae0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801eae2:	68fb      	ldr	r3, [r7, #12]
 801eae4:	22ff      	movs	r2, #255	; 0xff
 801eae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801eaea:	68fb      	ldr	r3, [r7, #12]
 801eaec:	22ff      	movs	r2, #255	; 0xff
 801eaee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801eaf2:	683b      	ldr	r3, [r7, #0]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d10e      	bne.n	801eb16 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801eaf8:	68fb      	ldr	r3, [r7, #12]
 801eafa:	691b      	ldr	r3, [r3, #16]
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d014      	beq.n	801eb2a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	3310      	adds	r3, #16
 801eb04:	4618      	mov	r0, r3
 801eb06:	f001 f831 	bl	801fb6c <xTaskRemoveFromEventList>
 801eb0a:	4603      	mov	r3, r0
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d00c      	beq.n	801eb2a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801eb10:	f001 fdde 	bl	80206d0 <vPortYield>
 801eb14:	e009      	b.n	801eb2a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	3310      	adds	r3, #16
 801eb1a:	4618      	mov	r0, r3
 801eb1c:	f7ff ff00 	bl	801e920 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	3324      	adds	r3, #36	; 0x24
 801eb24:	4618      	mov	r0, r3
 801eb26:	f7ff fefb 	bl	801e920 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801eb2a:	f001 fdf5 	bl	8020718 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801eb2e:	2301      	movs	r3, #1
}
 801eb30:	4618      	mov	r0, r3
 801eb32:	3710      	adds	r7, #16
 801eb34:	46bd      	mov	sp, r7
 801eb36:	bd80      	pop	{r7, pc}

0801eb38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801eb38:	b580      	push	{r7, lr}
 801eb3a:	b088      	sub	sp, #32
 801eb3c:	af02      	add	r7, sp, #8
 801eb3e:	60f8      	str	r0, [r7, #12]
 801eb40:	60b9      	str	r1, [r7, #8]
 801eb42:	607a      	str	r2, [r7, #4]
 801eb44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801eb46:	68fb      	ldr	r3, [r7, #12]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d102      	bne.n	801eb52 <xQueueGenericCreateStatic+0x1a>
 801eb4c:	f001 ff04 	bl	8020958 <ulSetInterruptMask>
 801eb50:	e7fe      	b.n	801eb50 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801eb52:	683b      	ldr	r3, [r7, #0]
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d102      	bne.n	801eb5e <xQueueGenericCreateStatic+0x26>
 801eb58:	f001 fefe 	bl	8020958 <ulSetInterruptMask>
 801eb5c:	e7fe      	b.n	801eb5c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d002      	beq.n	801eb6a <xQueueGenericCreateStatic+0x32>
 801eb64:	68bb      	ldr	r3, [r7, #8]
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d001      	beq.n	801eb6e <xQueueGenericCreateStatic+0x36>
 801eb6a:	2301      	movs	r3, #1
 801eb6c:	e000      	b.n	801eb70 <xQueueGenericCreateStatic+0x38>
 801eb6e:	2300      	movs	r3, #0
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d102      	bne.n	801eb7a <xQueueGenericCreateStatic+0x42>
 801eb74:	f001 fef0 	bl	8020958 <ulSetInterruptMask>
 801eb78:	e7fe      	b.n	801eb78 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d102      	bne.n	801eb86 <xQueueGenericCreateStatic+0x4e>
 801eb80:	68bb      	ldr	r3, [r7, #8]
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d101      	bne.n	801eb8a <xQueueGenericCreateStatic+0x52>
 801eb86:	2301      	movs	r3, #1
 801eb88:	e000      	b.n	801eb8c <xQueueGenericCreateStatic+0x54>
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d102      	bne.n	801eb96 <xQueueGenericCreateStatic+0x5e>
 801eb90:	f001 fee2 	bl	8020958 <ulSetInterruptMask>
 801eb94:	e7fe      	b.n	801eb94 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801eb96:	2350      	movs	r3, #80	; 0x50
 801eb98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801eb9a:	693b      	ldr	r3, [r7, #16]
 801eb9c:	2b50      	cmp	r3, #80	; 0x50
 801eb9e:	d002      	beq.n	801eba6 <xQueueGenericCreateStatic+0x6e>
 801eba0:	f001 feda 	bl	8020958 <ulSetInterruptMask>
 801eba4:	e7fe      	b.n	801eba4 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801eba6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801eba8:	683b      	ldr	r3, [r7, #0]
 801ebaa:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801ebac:	697b      	ldr	r3, [r7, #20]
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	d00d      	beq.n	801ebce <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801ebb2:	697b      	ldr	r3, [r7, #20]
 801ebb4:	2201      	movs	r2, #1
 801ebb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ebba:	f897 2020 	ldrb.w	r2, [r7, #32]
 801ebbe:	697b      	ldr	r3, [r7, #20]
 801ebc0:	9300      	str	r3, [sp, #0]
 801ebc2:	4613      	mov	r3, r2
 801ebc4:	687a      	ldr	r2, [r7, #4]
 801ebc6:	68b9      	ldr	r1, [r7, #8]
 801ebc8:	68f8      	ldr	r0, [r7, #12]
 801ebca:	f000 f805 	bl	801ebd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ebce:	697b      	ldr	r3, [r7, #20]
	}
 801ebd0:	4618      	mov	r0, r3
 801ebd2:	3718      	adds	r7, #24
 801ebd4:	46bd      	mov	sp, r7
 801ebd6:	bd80      	pop	{r7, pc}

0801ebd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801ebd8:	b580      	push	{r7, lr}
 801ebda:	b084      	sub	sp, #16
 801ebdc:	af00      	add	r7, sp, #0
 801ebde:	60f8      	str	r0, [r7, #12]
 801ebe0:	60b9      	str	r1, [r7, #8]
 801ebe2:	607a      	str	r2, [r7, #4]
 801ebe4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801ebe6:	68bb      	ldr	r3, [r7, #8]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d103      	bne.n	801ebf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801ebec:	69bb      	ldr	r3, [r7, #24]
 801ebee:	69ba      	ldr	r2, [r7, #24]
 801ebf0:	601a      	str	r2, [r3, #0]
 801ebf2:	e002      	b.n	801ebfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ebf4:	69bb      	ldr	r3, [r7, #24]
 801ebf6:	687a      	ldr	r2, [r7, #4]
 801ebf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801ebfa:	69bb      	ldr	r3, [r7, #24]
 801ebfc:	68fa      	ldr	r2, [r7, #12]
 801ebfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801ec00:	69bb      	ldr	r3, [r7, #24]
 801ec02:	68ba      	ldr	r2, [r7, #8]
 801ec04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801ec06:	2101      	movs	r1, #1
 801ec08:	69b8      	ldr	r0, [r7, #24]
 801ec0a:	f7ff ff3d 	bl	801ea88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801ec0e:	69bb      	ldr	r3, [r7, #24]
 801ec10:	78fa      	ldrb	r2, [r7, #3]
 801ec12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801ec16:	bf00      	nop
 801ec18:	3710      	adds	r7, #16
 801ec1a:	46bd      	mov	sp, r7
 801ec1c:	bd80      	pop	{r7, pc}

0801ec1e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801ec1e:	b580      	push	{r7, lr}
 801ec20:	b08a      	sub	sp, #40	; 0x28
 801ec22:	af00      	add	r7, sp, #0
 801ec24:	60f8      	str	r0, [r7, #12]
 801ec26:	60b9      	str	r1, [r7, #8]
 801ec28:	607a      	str	r2, [r7, #4]
 801ec2a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801ec2c:	2300      	movs	r3, #0
 801ec2e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ec30:	68fb      	ldr	r3, [r7, #12]
 801ec32:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801ec34:	6a3b      	ldr	r3, [r7, #32]
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	d102      	bne.n	801ec40 <xQueueGenericSend+0x22>
 801ec3a:	f001 fe8d 	bl	8020958 <ulSetInterruptMask>
 801ec3e:	e7fe      	b.n	801ec3e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ec40:	68bb      	ldr	r3, [r7, #8]
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	d103      	bne.n	801ec4e <xQueueGenericSend+0x30>
 801ec46:	6a3b      	ldr	r3, [r7, #32]
 801ec48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d101      	bne.n	801ec52 <xQueueGenericSend+0x34>
 801ec4e:	2301      	movs	r3, #1
 801ec50:	e000      	b.n	801ec54 <xQueueGenericSend+0x36>
 801ec52:	2300      	movs	r3, #0
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d102      	bne.n	801ec5e <xQueueGenericSend+0x40>
 801ec58:	f001 fe7e 	bl	8020958 <ulSetInterruptMask>
 801ec5c:	e7fe      	b.n	801ec5c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801ec5e:	683b      	ldr	r3, [r7, #0]
 801ec60:	2b02      	cmp	r3, #2
 801ec62:	d103      	bne.n	801ec6c <xQueueGenericSend+0x4e>
 801ec64:	6a3b      	ldr	r3, [r7, #32]
 801ec66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ec68:	2b01      	cmp	r3, #1
 801ec6a:	d101      	bne.n	801ec70 <xQueueGenericSend+0x52>
 801ec6c:	2301      	movs	r3, #1
 801ec6e:	e000      	b.n	801ec72 <xQueueGenericSend+0x54>
 801ec70:	2300      	movs	r3, #0
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	d102      	bne.n	801ec7c <xQueueGenericSend+0x5e>
 801ec76:	f001 fe6f 	bl	8020958 <ulSetInterruptMask>
 801ec7a:	e7fe      	b.n	801ec7a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ec7c:	f001 f90c 	bl	801fe98 <xTaskGetSchedulerState>
 801ec80:	4603      	mov	r3, r0
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	d102      	bne.n	801ec8c <xQueueGenericSend+0x6e>
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d101      	bne.n	801ec90 <xQueueGenericSend+0x72>
 801ec8c:	2301      	movs	r3, #1
 801ec8e:	e000      	b.n	801ec92 <xQueueGenericSend+0x74>
 801ec90:	2300      	movs	r3, #0
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d102      	bne.n	801ec9c <xQueueGenericSend+0x7e>
 801ec96:	f001 fe5f 	bl	8020958 <ulSetInterruptMask>
 801ec9a:	e7fe      	b.n	801ec9a <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ec9c:	f001 fd2a 	bl	80206f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801eca0:	6a3b      	ldr	r3, [r7, #32]
 801eca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eca4:	6a3b      	ldr	r3, [r7, #32]
 801eca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eca8:	429a      	cmp	r2, r3
 801ecaa:	d302      	bcc.n	801ecb2 <xQueueGenericSend+0x94>
 801ecac:	683b      	ldr	r3, [r7, #0]
 801ecae:	2b02      	cmp	r3, #2
 801ecb0:	d11d      	bne.n	801ecee <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ecb2:	683a      	ldr	r2, [r7, #0]
 801ecb4:	68b9      	ldr	r1, [r7, #8]
 801ecb6:	6a38      	ldr	r0, [r7, #32]
 801ecb8:	f000 f9a4 	bl	801f004 <prvCopyDataToQueue>
 801ecbc:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ecbe:	6a3b      	ldr	r3, [r7, #32]
 801ecc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d00a      	beq.n	801ecdc <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ecc6:	6a3b      	ldr	r3, [r7, #32]
 801ecc8:	3324      	adds	r3, #36	; 0x24
 801ecca:	4618      	mov	r0, r3
 801eccc:	f000 ff4e 	bl	801fb6c <xTaskRemoveFromEventList>
 801ecd0:	4603      	mov	r3, r0
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d007      	beq.n	801ece6 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801ecd6:	f001 fcfb 	bl	80206d0 <vPortYield>
 801ecda:	e004      	b.n	801ece6 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801ecdc:	69fb      	ldr	r3, [r7, #28]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d001      	beq.n	801ece6 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801ece2:	f001 fcf5 	bl	80206d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801ece6:	f001 fd17 	bl	8020718 <vPortExitCritical>
				return pdPASS;
 801ecea:	2301      	movs	r3, #1
 801ecec:	e05c      	b.n	801eda8 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d103      	bne.n	801ecfc <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ecf4:	f001 fd10 	bl	8020718 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	e055      	b.n	801eda8 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d106      	bne.n	801ed10 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ed02:	f107 0314 	add.w	r3, r7, #20
 801ed06:	4618      	mov	r0, r3
 801ed08:	f000 ff8c 	bl	801fc24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ed0c:	2301      	movs	r3, #1
 801ed0e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ed10:	f001 fd02 	bl	8020718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ed14:	f000 fd38 	bl	801f788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ed18:	f001 fcec 	bl	80206f4 <vPortEnterCritical>
 801ed1c:	6a3b      	ldr	r3, [r7, #32]
 801ed1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ed22:	b25b      	sxtb	r3, r3
 801ed24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ed28:	d103      	bne.n	801ed32 <xQueueGenericSend+0x114>
 801ed2a:	6a3b      	ldr	r3, [r7, #32]
 801ed2c:	2200      	movs	r2, #0
 801ed2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ed32:	6a3b      	ldr	r3, [r7, #32]
 801ed34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ed38:	b25b      	sxtb	r3, r3
 801ed3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ed3e:	d103      	bne.n	801ed48 <xQueueGenericSend+0x12a>
 801ed40:	6a3b      	ldr	r3, [r7, #32]
 801ed42:	2200      	movs	r2, #0
 801ed44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ed48:	f001 fce6 	bl	8020718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ed4c:	1d3a      	adds	r2, r7, #4
 801ed4e:	f107 0314 	add.w	r3, r7, #20
 801ed52:	4611      	mov	r1, r2
 801ed54:	4618      	mov	r0, r3
 801ed56:	f000 ff7b 	bl	801fc50 <xTaskCheckForTimeOut>
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d11d      	bne.n	801ed9c <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801ed60:	6a38      	ldr	r0, [r7, #32]
 801ed62:	f000 fa47 	bl	801f1f4 <prvIsQueueFull>
 801ed66:	4603      	mov	r3, r0
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d011      	beq.n	801ed90 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801ed6c:	6a3b      	ldr	r3, [r7, #32]
 801ed6e:	3310      	adds	r3, #16
 801ed70:	687a      	ldr	r2, [r7, #4]
 801ed72:	4611      	mov	r1, r2
 801ed74:	4618      	mov	r0, r3
 801ed76:	f000 feb9 	bl	801faec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801ed7a:	6a38      	ldr	r0, [r7, #32]
 801ed7c:	f000 f9d2 	bl	801f124 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801ed80:	f000 fd10 	bl	801f7a4 <xTaskResumeAll>
 801ed84:	4603      	mov	r3, r0
 801ed86:	2b00      	cmp	r3, #0
 801ed88:	d188      	bne.n	801ec9c <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801ed8a:	f001 fca1 	bl	80206d0 <vPortYield>
 801ed8e:	e785      	b.n	801ec9c <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801ed90:	6a38      	ldr	r0, [r7, #32]
 801ed92:	f000 f9c7 	bl	801f124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ed96:	f000 fd05 	bl	801f7a4 <xTaskResumeAll>
 801ed9a:	e77f      	b.n	801ec9c <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801ed9c:	6a38      	ldr	r0, [r7, #32]
 801ed9e:	f000 f9c1 	bl	801f124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801eda2:	f000 fcff 	bl	801f7a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801eda6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801eda8:	4618      	mov	r0, r3
 801edaa:	3728      	adds	r7, #40	; 0x28
 801edac:	46bd      	mov	sp, r7
 801edae:	bd80      	pop	{r7, pc}

0801edb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801edb0:	b580      	push	{r7, lr}
 801edb2:	b08a      	sub	sp, #40	; 0x28
 801edb4:	af00      	add	r7, sp, #0
 801edb6:	60f8      	str	r0, [r7, #12]
 801edb8:	60b9      	str	r1, [r7, #8]
 801edba:	607a      	str	r2, [r7, #4]
 801edbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801edc2:	6a3b      	ldr	r3, [r7, #32]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d102      	bne.n	801edce <xQueueGenericSendFromISR+0x1e>
 801edc8:	f001 fdc6 	bl	8020958 <ulSetInterruptMask>
 801edcc:	e7fe      	b.n	801edcc <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801edce:	68bb      	ldr	r3, [r7, #8]
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	d103      	bne.n	801eddc <xQueueGenericSendFromISR+0x2c>
 801edd4:	6a3b      	ldr	r3, [r7, #32]
 801edd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d101      	bne.n	801ede0 <xQueueGenericSendFromISR+0x30>
 801eddc:	2301      	movs	r3, #1
 801edde:	e000      	b.n	801ede2 <xQueueGenericSendFromISR+0x32>
 801ede0:	2300      	movs	r3, #0
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d102      	bne.n	801edec <xQueueGenericSendFromISR+0x3c>
 801ede6:	f001 fdb7 	bl	8020958 <ulSetInterruptMask>
 801edea:	e7fe      	b.n	801edea <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801edec:	683b      	ldr	r3, [r7, #0]
 801edee:	2b02      	cmp	r3, #2
 801edf0:	d103      	bne.n	801edfa <xQueueGenericSendFromISR+0x4a>
 801edf2:	6a3b      	ldr	r3, [r7, #32]
 801edf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801edf6:	2b01      	cmp	r3, #1
 801edf8:	d101      	bne.n	801edfe <xQueueGenericSendFromISR+0x4e>
 801edfa:	2301      	movs	r3, #1
 801edfc:	e000      	b.n	801ee00 <xQueueGenericSendFromISR+0x50>
 801edfe:	2300      	movs	r3, #0
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d102      	bne.n	801ee0a <xQueueGenericSendFromISR+0x5a>
 801ee04:	f001 fda8 	bl	8020958 <ulSetInterruptMask>
 801ee08:	e7fe      	b.n	801ee08 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801ee0a:	f001 fda5 	bl	8020958 <ulSetInterruptMask>
 801ee0e:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801ee10:	6a3b      	ldr	r3, [r7, #32]
 801ee12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ee14:	6a3b      	ldr	r3, [r7, #32]
 801ee16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ee18:	429a      	cmp	r2, r3
 801ee1a:	d302      	bcc.n	801ee22 <xQueueGenericSendFromISR+0x72>
 801ee1c:	683b      	ldr	r3, [r7, #0]
 801ee1e:	2b02      	cmp	r3, #2
 801ee20:	d12d      	bne.n	801ee7e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801ee22:	6a3b      	ldr	r3, [r7, #32]
 801ee24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ee28:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ee2a:	6a3b      	ldr	r3, [r7, #32]
 801ee2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee2e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ee30:	683a      	ldr	r2, [r7, #0]
 801ee32:	68b9      	ldr	r1, [r7, #8]
 801ee34:	6a38      	ldr	r0, [r7, #32]
 801ee36:	f000 f8e5 	bl	801f004 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801ee3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ee3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee42:	d112      	bne.n	801ee6a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ee44:	6a3b      	ldr	r3, [r7, #32]
 801ee46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d015      	beq.n	801ee78 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ee4c:	6a3b      	ldr	r3, [r7, #32]
 801ee4e:	3324      	adds	r3, #36	; 0x24
 801ee50:	4618      	mov	r0, r3
 801ee52:	f000 fe8b 	bl	801fb6c <xTaskRemoveFromEventList>
 801ee56:	4603      	mov	r3, r0
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	d00d      	beq.n	801ee78 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d00a      	beq.n	801ee78 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	2201      	movs	r2, #1
 801ee66:	601a      	str	r2, [r3, #0]
 801ee68:	e006      	b.n	801ee78 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801ee6a:	7efb      	ldrb	r3, [r7, #27]
 801ee6c:	3301      	adds	r3, #1
 801ee6e:	b2db      	uxtb	r3, r3
 801ee70:	b25a      	sxtb	r2, r3
 801ee72:	6a3b      	ldr	r3, [r7, #32]
 801ee74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801ee78:	2301      	movs	r3, #1
 801ee7a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 801ee7c:	e001      	b.n	801ee82 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801ee7e:	2300      	movs	r3, #0
 801ee80:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801ee82:	69f8      	ldr	r0, [r7, #28]
 801ee84:	f001 fd75 	bl	8020972 <vClearInterruptMask>

	return xReturn;
 801ee88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ee8a:	4618      	mov	r0, r3
 801ee8c:	3728      	adds	r7, #40	; 0x28
 801ee8e:	46bd      	mov	sp, r7
 801ee90:	bd80      	pop	{r7, pc}

0801ee92 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801ee92:	b580      	push	{r7, lr}
 801ee94:	b08a      	sub	sp, #40	; 0x28
 801ee96:	af00      	add	r7, sp, #0
 801ee98:	60f8      	str	r0, [r7, #12]
 801ee9a:	60b9      	str	r1, [r7, #8]
 801ee9c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801ee9e:	2300      	movs	r3, #0
 801eea0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801eea6:	6a3b      	ldr	r3, [r7, #32]
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	d102      	bne.n	801eeb2 <xQueueReceive+0x20>
 801eeac:	f001 fd54 	bl	8020958 <ulSetInterruptMask>
 801eeb0:	e7fe      	b.n	801eeb0 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801eeb2:	68bb      	ldr	r3, [r7, #8]
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d103      	bne.n	801eec0 <xQueueReceive+0x2e>
 801eeb8:	6a3b      	ldr	r3, [r7, #32]
 801eeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	d101      	bne.n	801eec4 <xQueueReceive+0x32>
 801eec0:	2301      	movs	r3, #1
 801eec2:	e000      	b.n	801eec6 <xQueueReceive+0x34>
 801eec4:	2300      	movs	r3, #0
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d102      	bne.n	801eed0 <xQueueReceive+0x3e>
 801eeca:	f001 fd45 	bl	8020958 <ulSetInterruptMask>
 801eece:	e7fe      	b.n	801eece <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801eed0:	f000 ffe2 	bl	801fe98 <xTaskGetSchedulerState>
 801eed4:	4603      	mov	r3, r0
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	d102      	bne.n	801eee0 <xQueueReceive+0x4e>
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	2b00      	cmp	r3, #0
 801eede:	d101      	bne.n	801eee4 <xQueueReceive+0x52>
 801eee0:	2301      	movs	r3, #1
 801eee2:	e000      	b.n	801eee6 <xQueueReceive+0x54>
 801eee4:	2300      	movs	r3, #0
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	d102      	bne.n	801eef0 <xQueueReceive+0x5e>
 801eeea:	f001 fd35 	bl	8020958 <ulSetInterruptMask>
 801eeee:	e7fe      	b.n	801eeee <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801eef0:	f001 fc00 	bl	80206f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801eef4:	6a3b      	ldr	r3, [r7, #32]
 801eef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eef8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801eefa:	69fb      	ldr	r3, [r7, #28]
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	d019      	beq.n	801ef34 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801ef00:	68b9      	ldr	r1, [r7, #8]
 801ef02:	6a38      	ldr	r0, [r7, #32]
 801ef04:	f000 f8e8 	bl	801f0d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801ef08:	69fb      	ldr	r3, [r7, #28]
 801ef0a:	1e5a      	subs	r2, r3, #1
 801ef0c:	6a3b      	ldr	r3, [r7, #32]
 801ef0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ef10:	6a3b      	ldr	r3, [r7, #32]
 801ef12:	691b      	ldr	r3, [r3, #16]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d009      	beq.n	801ef2c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ef18:	6a3b      	ldr	r3, [r7, #32]
 801ef1a:	3310      	adds	r3, #16
 801ef1c:	4618      	mov	r0, r3
 801ef1e:	f000 fe25 	bl	801fb6c <xTaskRemoveFromEventList>
 801ef22:	4603      	mov	r3, r0
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d001      	beq.n	801ef2c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801ef28:	f001 fbd2 	bl	80206d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801ef2c:	f001 fbf4 	bl	8020718 <vPortExitCritical>
				return pdPASS;
 801ef30:	2301      	movs	r3, #1
 801ef32:	e063      	b.n	801effc <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d103      	bne.n	801ef42 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ef3a:	f001 fbed 	bl	8020718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ef3e:	2300      	movs	r3, #0
 801ef40:	e05c      	b.n	801effc <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d106      	bne.n	801ef56 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ef48:	f107 0314 	add.w	r3, r7, #20
 801ef4c:	4618      	mov	r0, r3
 801ef4e:	f000 fe69 	bl	801fc24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ef52:	2301      	movs	r3, #1
 801ef54:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ef56:	f001 fbdf 	bl	8020718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ef5a:	f000 fc15 	bl	801f788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ef5e:	f001 fbc9 	bl	80206f4 <vPortEnterCritical>
 801ef62:	6a3b      	ldr	r3, [r7, #32]
 801ef64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ef68:	b25b      	sxtb	r3, r3
 801ef6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef6e:	d103      	bne.n	801ef78 <xQueueReceive+0xe6>
 801ef70:	6a3b      	ldr	r3, [r7, #32]
 801ef72:	2200      	movs	r2, #0
 801ef74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ef78:	6a3b      	ldr	r3, [r7, #32]
 801ef7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ef7e:	b25b      	sxtb	r3, r3
 801ef80:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef84:	d103      	bne.n	801ef8e <xQueueReceive+0xfc>
 801ef86:	6a3b      	ldr	r3, [r7, #32]
 801ef88:	2200      	movs	r2, #0
 801ef8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ef8e:	f001 fbc3 	bl	8020718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ef92:	1d3a      	adds	r2, r7, #4
 801ef94:	f107 0314 	add.w	r3, r7, #20
 801ef98:	4611      	mov	r1, r2
 801ef9a:	4618      	mov	r0, r3
 801ef9c:	f000 fe58 	bl	801fc50 <xTaskCheckForTimeOut>
 801efa0:	4603      	mov	r3, r0
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d11d      	bne.n	801efe2 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801efa6:	6a38      	ldr	r0, [r7, #32]
 801efa8:	f000 f90e 	bl	801f1c8 <prvIsQueueEmpty>
 801efac:	4603      	mov	r3, r0
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d011      	beq.n	801efd6 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801efb2:	6a3b      	ldr	r3, [r7, #32]
 801efb4:	3324      	adds	r3, #36	; 0x24
 801efb6:	687a      	ldr	r2, [r7, #4]
 801efb8:	4611      	mov	r1, r2
 801efba:	4618      	mov	r0, r3
 801efbc:	f000 fd96 	bl	801faec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801efc0:	6a38      	ldr	r0, [r7, #32]
 801efc2:	f000 f8af 	bl	801f124 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801efc6:	f000 fbed 	bl	801f7a4 <xTaskResumeAll>
 801efca:	4603      	mov	r3, r0
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d18f      	bne.n	801eef0 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 801efd0:	f001 fb7e 	bl	80206d0 <vPortYield>
 801efd4:	e78c      	b.n	801eef0 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801efd6:	6a38      	ldr	r0, [r7, #32]
 801efd8:	f000 f8a4 	bl	801f124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801efdc:	f000 fbe2 	bl	801f7a4 <xTaskResumeAll>
 801efe0:	e786      	b.n	801eef0 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801efe2:	6a38      	ldr	r0, [r7, #32]
 801efe4:	f000 f89e 	bl	801f124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801efe8:	f000 fbdc 	bl	801f7a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801efec:	6a38      	ldr	r0, [r7, #32]
 801efee:	f000 f8eb 	bl	801f1c8 <prvIsQueueEmpty>
 801eff2:	4603      	mov	r3, r0
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	f43f af7b 	beq.w	801eef0 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801effa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801effc:	4618      	mov	r0, r3
 801effe:	3728      	adds	r7, #40	; 0x28
 801f000:	46bd      	mov	sp, r7
 801f002:	bd80      	pop	{r7, pc}

0801f004 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801f004:	b580      	push	{r7, lr}
 801f006:	b086      	sub	sp, #24
 801f008:	af00      	add	r7, sp, #0
 801f00a:	60f8      	str	r0, [r7, #12]
 801f00c:	60b9      	str	r1, [r7, #8]
 801f00e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801f010:	2300      	movs	r3, #0
 801f012:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f014:	68fb      	ldr	r3, [r7, #12]
 801f016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f018:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801f01a:	68fb      	ldr	r3, [r7, #12]
 801f01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d10d      	bne.n	801f03e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f022:	68fb      	ldr	r3, [r7, #12]
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	2b00      	cmp	r3, #0
 801f028:	d14d      	bne.n	801f0c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801f02a:	68fb      	ldr	r3, [r7, #12]
 801f02c:	689b      	ldr	r3, [r3, #8]
 801f02e:	4618      	mov	r0, r3
 801f030:	f000 ff50 	bl	801fed4 <xTaskPriorityDisinherit>
 801f034:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	2200      	movs	r2, #0
 801f03a:	609a      	str	r2, [r3, #8]
 801f03c:	e043      	b.n	801f0c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	2b00      	cmp	r3, #0
 801f042:	d119      	bne.n	801f078 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	6858      	ldr	r0, [r3, #4]
 801f048:	68fb      	ldr	r3, [r7, #12]
 801f04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f04c:	461a      	mov	r2, r3
 801f04e:	68b9      	ldr	r1, [r7, #8]
 801f050:	f005 f963 	bl	802431a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f054:	68fb      	ldr	r3, [r7, #12]
 801f056:	685a      	ldr	r2, [r3, #4]
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f05c:	441a      	add	r2, r3
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f062:	68fb      	ldr	r3, [r7, #12]
 801f064:	685a      	ldr	r2, [r3, #4]
 801f066:	68fb      	ldr	r3, [r7, #12]
 801f068:	689b      	ldr	r3, [r3, #8]
 801f06a:	429a      	cmp	r2, r3
 801f06c:	d32b      	bcc.n	801f0c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801f06e:	68fb      	ldr	r3, [r7, #12]
 801f070:	681a      	ldr	r2, [r3, #0]
 801f072:	68fb      	ldr	r3, [r7, #12]
 801f074:	605a      	str	r2, [r3, #4]
 801f076:	e026      	b.n	801f0c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	68d8      	ldr	r0, [r3, #12]
 801f07c:	68fb      	ldr	r3, [r7, #12]
 801f07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f080:	461a      	mov	r2, r3
 801f082:	68b9      	ldr	r1, [r7, #8]
 801f084:	f005 f949 	bl	802431a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801f088:	68fb      	ldr	r3, [r7, #12]
 801f08a:	68da      	ldr	r2, [r3, #12]
 801f08c:	68fb      	ldr	r3, [r7, #12]
 801f08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f090:	425b      	negs	r3, r3
 801f092:	441a      	add	r2, r3
 801f094:	68fb      	ldr	r3, [r7, #12]
 801f096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f098:	68fb      	ldr	r3, [r7, #12]
 801f09a:	68da      	ldr	r2, [r3, #12]
 801f09c:	68fb      	ldr	r3, [r7, #12]
 801f09e:	681b      	ldr	r3, [r3, #0]
 801f0a0:	429a      	cmp	r2, r3
 801f0a2:	d207      	bcs.n	801f0b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801f0a4:	68fb      	ldr	r3, [r7, #12]
 801f0a6:	689a      	ldr	r2, [r3, #8]
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f0ac:	425b      	negs	r3, r3
 801f0ae:	441a      	add	r2, r3
 801f0b0:	68fb      	ldr	r3, [r7, #12]
 801f0b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	2b02      	cmp	r3, #2
 801f0b8:	d105      	bne.n	801f0c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f0ba:	693b      	ldr	r3, [r7, #16]
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d002      	beq.n	801f0c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801f0c0:	693b      	ldr	r3, [r7, #16]
 801f0c2:	3b01      	subs	r3, #1
 801f0c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801f0c6:	693b      	ldr	r3, [r7, #16]
 801f0c8:	1c5a      	adds	r2, r3, #1
 801f0ca:	68fb      	ldr	r3, [r7, #12]
 801f0cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801f0ce:	697b      	ldr	r3, [r7, #20]
}
 801f0d0:	4618      	mov	r0, r3
 801f0d2:	3718      	adds	r7, #24
 801f0d4:	46bd      	mov	sp, r7
 801f0d6:	bd80      	pop	{r7, pc}

0801f0d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801f0d8:	b580      	push	{r7, lr}
 801f0da:	b082      	sub	sp, #8
 801f0dc:	af00      	add	r7, sp, #0
 801f0de:	6078      	str	r0, [r7, #4]
 801f0e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d018      	beq.n	801f11c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	68da      	ldr	r2, [r3, #12]
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f0f2:	441a      	add	r2, r3
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	68da      	ldr	r2, [r3, #12]
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	689b      	ldr	r3, [r3, #8]
 801f100:	429a      	cmp	r2, r3
 801f102:	d303      	bcc.n	801f10c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	681a      	ldr	r2, [r3, #0]
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	68d9      	ldr	r1, [r3, #12]
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f114:	461a      	mov	r2, r3
 801f116:	6838      	ldr	r0, [r7, #0]
 801f118:	f005 f8ff 	bl	802431a <memcpy>
	}
}
 801f11c:	bf00      	nop
 801f11e:	3708      	adds	r7, #8
 801f120:	46bd      	mov	sp, r7
 801f122:	bd80      	pop	{r7, pc}

0801f124 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801f124:	b580      	push	{r7, lr}
 801f126:	b084      	sub	sp, #16
 801f128:	af00      	add	r7, sp, #0
 801f12a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801f12c:	f001 fae2 	bl	80206f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f136:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f138:	e011      	b.n	801f15e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f13e:	2b00      	cmp	r3, #0
 801f140:	d012      	beq.n	801f168 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	3324      	adds	r3, #36	; 0x24
 801f146:	4618      	mov	r0, r3
 801f148:	f000 fd10 	bl	801fb6c <xTaskRemoveFromEventList>
 801f14c:	4603      	mov	r3, r0
 801f14e:	2b00      	cmp	r3, #0
 801f150:	d001      	beq.n	801f156 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801f152:	f000 fdcf 	bl	801fcf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801f156:	7bfb      	ldrb	r3, [r7, #15]
 801f158:	3b01      	subs	r3, #1
 801f15a:	b2db      	uxtb	r3, r3
 801f15c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f15e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f162:	2b00      	cmp	r3, #0
 801f164:	dce9      	bgt.n	801f13a <prvUnlockQueue+0x16>
 801f166:	e000      	b.n	801f16a <prvUnlockQueue+0x46>
					break;
 801f168:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	22ff      	movs	r2, #255	; 0xff
 801f16e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801f172:	f001 fad1 	bl	8020718 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801f176:	f001 fabd 	bl	80206f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f180:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f182:	e011      	b.n	801f1a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	691b      	ldr	r3, [r3, #16]
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d012      	beq.n	801f1b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	3310      	adds	r3, #16
 801f190:	4618      	mov	r0, r3
 801f192:	f000 fceb 	bl	801fb6c <xTaskRemoveFromEventList>
 801f196:	4603      	mov	r3, r0
 801f198:	2b00      	cmp	r3, #0
 801f19a:	d001      	beq.n	801f1a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801f19c:	f000 fdaa 	bl	801fcf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801f1a0:	7bbb      	ldrb	r3, [r7, #14]
 801f1a2:	3b01      	subs	r3, #1
 801f1a4:	b2db      	uxtb	r3, r3
 801f1a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f1a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	dce9      	bgt.n	801f184 <prvUnlockQueue+0x60>
 801f1b0:	e000      	b.n	801f1b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801f1b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	22ff      	movs	r2, #255	; 0xff
 801f1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801f1bc:	f001 faac 	bl	8020718 <vPortExitCritical>
}
 801f1c0:	bf00      	nop
 801f1c2:	3710      	adds	r7, #16
 801f1c4:	46bd      	mov	sp, r7
 801f1c6:	bd80      	pop	{r7, pc}

0801f1c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801f1c8:	b580      	push	{r7, lr}
 801f1ca:	b084      	sub	sp, #16
 801f1cc:	af00      	add	r7, sp, #0
 801f1ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f1d0:	f001 fa90 	bl	80206f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f1d8:	2b00      	cmp	r3, #0
 801f1da:	d102      	bne.n	801f1e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801f1dc:	2301      	movs	r3, #1
 801f1de:	60fb      	str	r3, [r7, #12]
 801f1e0:	e001      	b.n	801f1e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801f1e2:	2300      	movs	r3, #0
 801f1e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801f1e6:	f001 fa97 	bl	8020718 <vPortExitCritical>

	return xReturn;
 801f1ea:	68fb      	ldr	r3, [r7, #12]
}
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	3710      	adds	r7, #16
 801f1f0:	46bd      	mov	sp, r7
 801f1f2:	bd80      	pop	{r7, pc}

0801f1f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801f1f4:	b580      	push	{r7, lr}
 801f1f6:	b084      	sub	sp, #16
 801f1f8:	af00      	add	r7, sp, #0
 801f1fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f1fc:	f001 fa7a 	bl	80206f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f208:	429a      	cmp	r2, r3
 801f20a:	d102      	bne.n	801f212 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801f20c:	2301      	movs	r3, #1
 801f20e:	60fb      	str	r3, [r7, #12]
 801f210:	e001      	b.n	801f216 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801f212:	2300      	movs	r3, #0
 801f214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801f216:	f001 fa7f 	bl	8020718 <vPortExitCritical>

	return xReturn;
 801f21a:	68fb      	ldr	r3, [r7, #12]
}
 801f21c:	4618      	mov	r0, r3
 801f21e:	3710      	adds	r7, #16
 801f220:	46bd      	mov	sp, r7
 801f222:	bd80      	pop	{r7, pc}

0801f224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801f224:	b480      	push	{r7}
 801f226:	b085      	sub	sp, #20
 801f228:	af00      	add	r7, sp, #0
 801f22a:	6078      	str	r0, [r7, #4]
 801f22c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801f22e:	2300      	movs	r3, #0
 801f230:	60fb      	str	r3, [r7, #12]
 801f232:	e014      	b.n	801f25e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801f234:	4a0f      	ldr	r2, [pc, #60]	; (801f274 <vQueueAddToRegistry+0x50>)
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d10b      	bne.n	801f258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801f240:	490c      	ldr	r1, [pc, #48]	; (801f274 <vQueueAddToRegistry+0x50>)
 801f242:	68fb      	ldr	r3, [r7, #12]
 801f244:	683a      	ldr	r2, [r7, #0]
 801f246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801f24a:	4a0a      	ldr	r2, [pc, #40]	; (801f274 <vQueueAddToRegistry+0x50>)
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	00db      	lsls	r3, r3, #3
 801f250:	4413      	add	r3, r2
 801f252:	687a      	ldr	r2, [r7, #4]
 801f254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801f256:	e006      	b.n	801f266 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801f258:	68fb      	ldr	r3, [r7, #12]
 801f25a:	3301      	adds	r3, #1
 801f25c:	60fb      	str	r3, [r7, #12]
 801f25e:	68fb      	ldr	r3, [r7, #12]
 801f260:	2b07      	cmp	r3, #7
 801f262:	d9e7      	bls.n	801f234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801f264:	bf00      	nop
 801f266:	bf00      	nop
 801f268:	3714      	adds	r7, #20
 801f26a:	46bd      	mov	sp, r7
 801f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f270:	4770      	bx	lr
 801f272:	bf00      	nop
 801f274:	2000168c 	.word	0x2000168c

0801f278 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801f278:	b580      	push	{r7, lr}
 801f27a:	b086      	sub	sp, #24
 801f27c:	af00      	add	r7, sp, #0
 801f27e:	60f8      	str	r0, [r7, #12]
 801f280:	60b9      	str	r1, [r7, #8]
 801f282:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801f284:	68fb      	ldr	r3, [r7, #12]
 801f286:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801f288:	f001 fa34 	bl	80206f4 <vPortEnterCritical>
 801f28c:	697b      	ldr	r3, [r7, #20]
 801f28e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f292:	b25b      	sxtb	r3, r3
 801f294:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f298:	d103      	bne.n	801f2a2 <vQueueWaitForMessageRestricted+0x2a>
 801f29a:	697b      	ldr	r3, [r7, #20]
 801f29c:	2200      	movs	r2, #0
 801f29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f2a2:	697b      	ldr	r3, [r7, #20]
 801f2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f2a8:	b25b      	sxtb	r3, r3
 801f2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f2ae:	d103      	bne.n	801f2b8 <vQueueWaitForMessageRestricted+0x40>
 801f2b0:	697b      	ldr	r3, [r7, #20]
 801f2b2:	2200      	movs	r2, #0
 801f2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f2b8:	f001 fa2e 	bl	8020718 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801f2bc:	697b      	ldr	r3, [r7, #20]
 801f2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	d106      	bne.n	801f2d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801f2c4:	697b      	ldr	r3, [r7, #20]
 801f2c6:	3324      	adds	r3, #36	; 0x24
 801f2c8:	687a      	ldr	r2, [r7, #4]
 801f2ca:	68b9      	ldr	r1, [r7, #8]
 801f2cc:	4618      	mov	r0, r3
 801f2ce:	f000 fc29 	bl	801fb24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801f2d2:	6978      	ldr	r0, [r7, #20]
 801f2d4:	f7ff ff26 	bl	801f124 <prvUnlockQueue>
	}
 801f2d8:	bf00      	nop
 801f2da:	3718      	adds	r7, #24
 801f2dc:	46bd      	mov	sp, r7
 801f2de:	bd80      	pop	{r7, pc}

0801f2e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801f2e0:	b580      	push	{r7, lr}
 801f2e2:	b08c      	sub	sp, #48	; 0x30
 801f2e4:	af04      	add	r7, sp, #16
 801f2e6:	60f8      	str	r0, [r7, #12]
 801f2e8:	60b9      	str	r1, [r7, #8]
 801f2ea:	607a      	str	r2, [r7, #4]
 801f2ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801f2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	d102      	bne.n	801f2fa <xTaskCreateStatic+0x1a>
 801f2f4:	f001 fb30 	bl	8020958 <ulSetInterruptMask>
 801f2f8:	e7fe      	b.n	801f2f8 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 801f2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d102      	bne.n	801f306 <xTaskCreateStatic+0x26>
 801f300:	f001 fb2a 	bl	8020958 <ulSetInterruptMask>
 801f304:	e7fe      	b.n	801f304 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801f306:	235c      	movs	r3, #92	; 0x5c
 801f308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801f30a:	697b      	ldr	r3, [r7, #20]
 801f30c:	2b5c      	cmp	r3, #92	; 0x5c
 801f30e:	d002      	beq.n	801f316 <xTaskCreateStatic+0x36>
 801f310:	f001 fb22 	bl	8020958 <ulSetInterruptMask>
 801f314:	e7fe      	b.n	801f314 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801f316:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d01e      	beq.n	801f35c <xTaskCreateStatic+0x7c>
 801f31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f320:	2b00      	cmp	r3, #0
 801f322:	d01b      	beq.n	801f35c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801f324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f326:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801f328:	69fb      	ldr	r3, [r7, #28]
 801f32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f32c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801f32e:	69fb      	ldr	r3, [r7, #28]
 801f330:	2202      	movs	r2, #2
 801f332:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801f336:	2300      	movs	r3, #0
 801f338:	9303      	str	r3, [sp, #12]
 801f33a:	69fb      	ldr	r3, [r7, #28]
 801f33c:	9302      	str	r3, [sp, #8]
 801f33e:	f107 0318 	add.w	r3, r7, #24
 801f342:	9301      	str	r3, [sp, #4]
 801f344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f346:	9300      	str	r3, [sp, #0]
 801f348:	683b      	ldr	r3, [r7, #0]
 801f34a:	687a      	ldr	r2, [r7, #4]
 801f34c:	68b9      	ldr	r1, [r7, #8]
 801f34e:	68f8      	ldr	r0, [r7, #12]
 801f350:	f000 f850 	bl	801f3f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f354:	69f8      	ldr	r0, [r7, #28]
 801f356:	f000 f8d7 	bl	801f508 <prvAddNewTaskToReadyList>
 801f35a:	e001      	b.n	801f360 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 801f35c:	2300      	movs	r3, #0
 801f35e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801f360:	69bb      	ldr	r3, [r7, #24]
	}
 801f362:	4618      	mov	r0, r3
 801f364:	3720      	adds	r7, #32
 801f366:	46bd      	mov	sp, r7
 801f368:	bd80      	pop	{r7, pc}

0801f36a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801f36a:	b580      	push	{r7, lr}
 801f36c:	b08c      	sub	sp, #48	; 0x30
 801f36e:	af04      	add	r7, sp, #16
 801f370:	60f8      	str	r0, [r7, #12]
 801f372:	60b9      	str	r1, [r7, #8]
 801f374:	603b      	str	r3, [r7, #0]
 801f376:	4613      	mov	r3, r2
 801f378:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801f37a:	88fb      	ldrh	r3, [r7, #6]
 801f37c:	009b      	lsls	r3, r3, #2
 801f37e:	4618      	mov	r0, r3
 801f380:	f001 fb4a 	bl	8020a18 <pvPortMalloc>
 801f384:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801f386:	697b      	ldr	r3, [r7, #20]
 801f388:	2b00      	cmp	r3, #0
 801f38a:	d00e      	beq.n	801f3aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801f38c:	205c      	movs	r0, #92	; 0x5c
 801f38e:	f001 fb43 	bl	8020a18 <pvPortMalloc>
 801f392:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801f394:	69fb      	ldr	r3, [r7, #28]
 801f396:	2b00      	cmp	r3, #0
 801f398:	d003      	beq.n	801f3a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801f39a:	69fb      	ldr	r3, [r7, #28]
 801f39c:	697a      	ldr	r2, [r7, #20]
 801f39e:	631a      	str	r2, [r3, #48]	; 0x30
 801f3a0:	e005      	b.n	801f3ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801f3a2:	6978      	ldr	r0, [r7, #20]
 801f3a4:	f001 fbec 	bl	8020b80 <vPortFree>
 801f3a8:	e001      	b.n	801f3ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801f3aa:	2300      	movs	r3, #0
 801f3ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801f3ae:	69fb      	ldr	r3, [r7, #28]
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d017      	beq.n	801f3e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801f3b4:	69fb      	ldr	r3, [r7, #28]
 801f3b6:	2200      	movs	r2, #0
 801f3b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801f3bc:	88fa      	ldrh	r2, [r7, #6]
 801f3be:	2300      	movs	r3, #0
 801f3c0:	9303      	str	r3, [sp, #12]
 801f3c2:	69fb      	ldr	r3, [r7, #28]
 801f3c4:	9302      	str	r3, [sp, #8]
 801f3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3c8:	9301      	str	r3, [sp, #4]
 801f3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3cc:	9300      	str	r3, [sp, #0]
 801f3ce:	683b      	ldr	r3, [r7, #0]
 801f3d0:	68b9      	ldr	r1, [r7, #8]
 801f3d2:	68f8      	ldr	r0, [r7, #12]
 801f3d4:	f000 f80e 	bl	801f3f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f3d8:	69f8      	ldr	r0, [r7, #28]
 801f3da:	f000 f895 	bl	801f508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801f3de:	2301      	movs	r3, #1
 801f3e0:	61bb      	str	r3, [r7, #24]
 801f3e2:	e002      	b.n	801f3ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801f3e4:	f04f 33ff 	mov.w	r3, #4294967295
 801f3e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801f3ea:	69bb      	ldr	r3, [r7, #24]
	}
 801f3ec:	4618      	mov	r0, r3
 801f3ee:	3720      	adds	r7, #32
 801f3f0:	46bd      	mov	sp, r7
 801f3f2:	bd80      	pop	{r7, pc}

0801f3f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801f3f4:	b580      	push	{r7, lr}
 801f3f6:	b086      	sub	sp, #24
 801f3f8:	af00      	add	r7, sp, #0
 801f3fa:	60f8      	str	r0, [r7, #12]
 801f3fc:	60b9      	str	r1, [r7, #8]
 801f3fe:	607a      	str	r2, [r7, #4]
 801f400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801f402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f404:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	009b      	lsls	r3, r3, #2
 801f40a:	461a      	mov	r2, r3
 801f40c:	21a5      	movs	r1, #165	; 0xa5
 801f40e:	f004 feb4 	bl	802417a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801f412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f41c:	3b01      	subs	r3, #1
 801f41e:	009b      	lsls	r3, r3, #2
 801f420:	4413      	add	r3, r2
 801f422:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801f424:	693b      	ldr	r3, [r7, #16]
 801f426:	f023 0307 	bic.w	r3, r3, #7
 801f42a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801f42c:	693b      	ldr	r3, [r7, #16]
 801f42e:	f003 0307 	and.w	r3, r3, #7
 801f432:	2b00      	cmp	r3, #0
 801f434:	d002      	beq.n	801f43c <prvInitialiseNewTask+0x48>
 801f436:	f001 fa8f 	bl	8020958 <ulSetInterruptMask>
 801f43a:	e7fe      	b.n	801f43a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801f43c:	68bb      	ldr	r3, [r7, #8]
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d01f      	beq.n	801f482 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f442:	2300      	movs	r3, #0
 801f444:	617b      	str	r3, [r7, #20]
 801f446:	e012      	b.n	801f46e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801f448:	68ba      	ldr	r2, [r7, #8]
 801f44a:	697b      	ldr	r3, [r7, #20]
 801f44c:	4413      	add	r3, r2
 801f44e:	7819      	ldrb	r1, [r3, #0]
 801f450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f452:	697b      	ldr	r3, [r7, #20]
 801f454:	4413      	add	r3, r2
 801f456:	3334      	adds	r3, #52	; 0x34
 801f458:	460a      	mov	r2, r1
 801f45a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801f45c:	68ba      	ldr	r2, [r7, #8]
 801f45e:	697b      	ldr	r3, [r7, #20]
 801f460:	4413      	add	r3, r2
 801f462:	781b      	ldrb	r3, [r3, #0]
 801f464:	2b00      	cmp	r3, #0
 801f466:	d006      	beq.n	801f476 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f468:	697b      	ldr	r3, [r7, #20]
 801f46a:	3301      	adds	r3, #1
 801f46c:	617b      	str	r3, [r7, #20]
 801f46e:	697b      	ldr	r3, [r7, #20]
 801f470:	2b0f      	cmp	r3, #15
 801f472:	d9e9      	bls.n	801f448 <prvInitialiseNewTask+0x54>
 801f474:	e000      	b.n	801f478 <prvInitialiseNewTask+0x84>
			{
				break;
 801f476:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f47a:	2200      	movs	r2, #0
 801f47c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801f480:	e003      	b.n	801f48a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801f482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f484:	2200      	movs	r2, #0
 801f486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801f48a:	6a3b      	ldr	r3, [r7, #32]
 801f48c:	2b37      	cmp	r3, #55	; 0x37
 801f48e:	d901      	bls.n	801f494 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801f490:	2337      	movs	r3, #55	; 0x37
 801f492:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f496:	6a3a      	ldr	r2, [r7, #32]
 801f498:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801f49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f49c:	6a3a      	ldr	r2, [r7, #32]
 801f49e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4a2:	2200      	movs	r2, #0
 801f4a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801f4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4a8:	3304      	adds	r3, #4
 801f4aa:	4618      	mov	r0, r3
 801f4ac:	f7ff fa58 	bl	801e960 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801f4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4b2:	3318      	adds	r3, #24
 801f4b4:	4618      	mov	r0, r3
 801f4b6:	f7ff fa53 	bl	801e960 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801f4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f4be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f4c0:	6a3b      	ldr	r3, [r7, #32]
 801f4c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801f4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f4ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801f4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4d8:	2200      	movs	r2, #0
 801f4da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801f4e2:	683b      	ldr	r3, [r7, #0]
 801f4e4:	68fa      	ldr	r2, [r7, #12]
 801f4e6:	6938      	ldr	r0, [r7, #16]
 801f4e8:	f001 f960 	bl	80207ac <pxPortInitialiseStack>
 801f4ec:	4602      	mov	r2, r0
 801f4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	d002      	beq.n	801f4fe <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f4fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f4fe:	bf00      	nop
 801f500:	3718      	adds	r7, #24
 801f502:	46bd      	mov	sp, r7
 801f504:	bd80      	pop	{r7, pc}
	...

0801f508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801f508:	b580      	push	{r7, lr}
 801f50a:	b082      	sub	sp, #8
 801f50c:	af00      	add	r7, sp, #0
 801f50e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801f510:	f001 f8f0 	bl	80206f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801f514:	4b2a      	ldr	r3, [pc, #168]	; (801f5c0 <prvAddNewTaskToReadyList+0xb8>)
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	3301      	adds	r3, #1
 801f51a:	4a29      	ldr	r2, [pc, #164]	; (801f5c0 <prvAddNewTaskToReadyList+0xb8>)
 801f51c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801f51e:	4b29      	ldr	r3, [pc, #164]	; (801f5c4 <prvAddNewTaskToReadyList+0xbc>)
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	2b00      	cmp	r3, #0
 801f524:	d109      	bne.n	801f53a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801f526:	4a27      	ldr	r2, [pc, #156]	; (801f5c4 <prvAddNewTaskToReadyList+0xbc>)
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801f52c:	4b24      	ldr	r3, [pc, #144]	; (801f5c0 <prvAddNewTaskToReadyList+0xb8>)
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	2b01      	cmp	r3, #1
 801f532:	d110      	bne.n	801f556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801f534:	f000 fbfa 	bl	801fd2c <prvInitialiseTaskLists>
 801f538:	e00d      	b.n	801f556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801f53a:	4b23      	ldr	r3, [pc, #140]	; (801f5c8 <prvAddNewTaskToReadyList+0xc0>)
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d109      	bne.n	801f556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801f542:	4b20      	ldr	r3, [pc, #128]	; (801f5c4 <prvAddNewTaskToReadyList+0xbc>)
 801f544:	681b      	ldr	r3, [r3, #0]
 801f546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f54c:	429a      	cmp	r2, r3
 801f54e:	d802      	bhi.n	801f556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801f550:	4a1c      	ldr	r2, [pc, #112]	; (801f5c4 <prvAddNewTaskToReadyList+0xbc>)
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801f556:	4b1d      	ldr	r3, [pc, #116]	; (801f5cc <prvAddNewTaskToReadyList+0xc4>)
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	3301      	adds	r3, #1
 801f55c:	4a1b      	ldr	r2, [pc, #108]	; (801f5cc <prvAddNewTaskToReadyList+0xc4>)
 801f55e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801f560:	4b1a      	ldr	r3, [pc, #104]	; (801f5cc <prvAddNewTaskToReadyList+0xc4>)
 801f562:	681a      	ldr	r2, [r3, #0]
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f56c:	4b18      	ldr	r3, [pc, #96]	; (801f5d0 <prvAddNewTaskToReadyList+0xc8>)
 801f56e:	681b      	ldr	r3, [r3, #0]
 801f570:	429a      	cmp	r2, r3
 801f572:	d903      	bls.n	801f57c <prvAddNewTaskToReadyList+0x74>
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f578:	4a15      	ldr	r2, [pc, #84]	; (801f5d0 <prvAddNewTaskToReadyList+0xc8>)
 801f57a:	6013      	str	r3, [r2, #0]
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f580:	4613      	mov	r3, r2
 801f582:	009b      	lsls	r3, r3, #2
 801f584:	4413      	add	r3, r2
 801f586:	009b      	lsls	r3, r3, #2
 801f588:	4a12      	ldr	r2, [pc, #72]	; (801f5d4 <prvAddNewTaskToReadyList+0xcc>)
 801f58a:	441a      	add	r2, r3
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	3304      	adds	r3, #4
 801f590:	4619      	mov	r1, r3
 801f592:	4610      	mov	r0, r2
 801f594:	f7ff f9f1 	bl	801e97a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801f598:	f001 f8be 	bl	8020718 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801f59c:	4b0a      	ldr	r3, [pc, #40]	; (801f5c8 <prvAddNewTaskToReadyList+0xc0>)
 801f59e:	681b      	ldr	r3, [r3, #0]
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	d008      	beq.n	801f5b6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801f5a4:	4b07      	ldr	r3, [pc, #28]	; (801f5c4 <prvAddNewTaskToReadyList+0xbc>)
 801f5a6:	681b      	ldr	r3, [r3, #0]
 801f5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f5ae:	429a      	cmp	r2, r3
 801f5b0:	d201      	bcs.n	801f5b6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801f5b2:	f001 f88d 	bl	80206d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f5b6:	bf00      	nop
 801f5b8:	3708      	adds	r7, #8
 801f5ba:	46bd      	mov	sp, r7
 801f5bc:	bd80      	pop	{r7, pc}
 801f5be:	bf00      	nop
 801f5c0:	20001ba0 	.word	0x20001ba0
 801f5c4:	200016cc 	.word	0x200016cc
 801f5c8:	20001bac 	.word	0x20001bac
 801f5cc:	20001bbc 	.word	0x20001bbc
 801f5d0:	20001ba8 	.word	0x20001ba8
 801f5d4:	200016d0 	.word	0x200016d0

0801f5d8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801f5d8:	b580      	push	{r7, lr}
 801f5da:	b086      	sub	sp, #24
 801f5dc:	af00      	add	r7, sp, #0
 801f5de:	6078      	str	r0, [r7, #4]
 801f5e0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801f5e2:	2300      	movs	r3, #0
 801f5e4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	d102      	bne.n	801f5f2 <vTaskDelayUntil+0x1a>
 801f5ec:	f001 f9b4 	bl	8020958 <ulSetInterruptMask>
 801f5f0:	e7fe      	b.n	801f5f0 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 801f5f2:	683b      	ldr	r3, [r7, #0]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d102      	bne.n	801f5fe <vTaskDelayUntil+0x26>
 801f5f8:	f001 f9ae 	bl	8020958 <ulSetInterruptMask>
 801f5fc:	e7fe      	b.n	801f5fc <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 801f5fe:	4b23      	ldr	r3, [pc, #140]	; (801f68c <vTaskDelayUntil+0xb4>)
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	2b00      	cmp	r3, #0
 801f604:	d002      	beq.n	801f60c <vTaskDelayUntil+0x34>
 801f606:	f001 f9a7 	bl	8020958 <ulSetInterruptMask>
 801f60a:	e7fe      	b.n	801f60a <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 801f60c:	f000 f8bc 	bl	801f788 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801f610:	4b1f      	ldr	r3, [pc, #124]	; (801f690 <vTaskDelayUntil+0xb8>)
 801f612:	681b      	ldr	r3, [r3, #0]
 801f614:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	683a      	ldr	r2, [r7, #0]
 801f61c:	4413      	add	r3, r2
 801f61e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	693a      	ldr	r2, [r7, #16]
 801f626:	429a      	cmp	r2, r3
 801f628:	d20b      	bcs.n	801f642 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	681b      	ldr	r3, [r3, #0]
 801f62e:	68fa      	ldr	r2, [r7, #12]
 801f630:	429a      	cmp	r2, r3
 801f632:	d211      	bcs.n	801f658 <vTaskDelayUntil+0x80>
 801f634:	68fa      	ldr	r2, [r7, #12]
 801f636:	693b      	ldr	r3, [r7, #16]
 801f638:	429a      	cmp	r2, r3
 801f63a:	d90d      	bls.n	801f658 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801f63c:	2301      	movs	r3, #1
 801f63e:	617b      	str	r3, [r7, #20]
 801f640:	e00a      	b.n	801f658 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	681b      	ldr	r3, [r3, #0]
 801f646:	68fa      	ldr	r2, [r7, #12]
 801f648:	429a      	cmp	r2, r3
 801f64a:	d303      	bcc.n	801f654 <vTaskDelayUntil+0x7c>
 801f64c:	68fa      	ldr	r2, [r7, #12]
 801f64e:	693b      	ldr	r3, [r7, #16]
 801f650:	429a      	cmp	r2, r3
 801f652:	d901      	bls.n	801f658 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801f654:	2301      	movs	r3, #1
 801f656:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	68fa      	ldr	r2, [r7, #12]
 801f65c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801f65e:	697b      	ldr	r3, [r7, #20]
 801f660:	2b00      	cmp	r3, #0
 801f662:	d006      	beq.n	801f672 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801f664:	68fa      	ldr	r2, [r7, #12]
 801f666:	693b      	ldr	r3, [r7, #16]
 801f668:	1ad3      	subs	r3, r2, r3
 801f66a:	2100      	movs	r1, #0
 801f66c:	4618      	mov	r0, r3
 801f66e:	f000 fc8f 	bl	801ff90 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801f672:	f000 f897 	bl	801f7a4 <xTaskResumeAll>
 801f676:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801f678:	68bb      	ldr	r3, [r7, #8]
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d101      	bne.n	801f682 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 801f67e:	f001 f827 	bl	80206d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f682:	bf00      	nop
 801f684:	3718      	adds	r7, #24
 801f686:	46bd      	mov	sp, r7
 801f688:	bd80      	pop	{r7, pc}
 801f68a:	bf00      	nop
 801f68c:	20001bc8 	.word	0x20001bc8
 801f690:	20001ba4 	.word	0x20001ba4

0801f694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801f694:	b580      	push	{r7, lr}
 801f696:	b084      	sub	sp, #16
 801f698:	af00      	add	r7, sp, #0
 801f69a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801f69c:	2300      	movs	r3, #0
 801f69e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d00f      	beq.n	801f6c6 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801f6a6:	4b0c      	ldr	r3, [pc, #48]	; (801f6d8 <vTaskDelay+0x44>)
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d002      	beq.n	801f6b4 <vTaskDelay+0x20>
 801f6ae:	f001 f953 	bl	8020958 <ulSetInterruptMask>
 801f6b2:	e7fe      	b.n	801f6b2 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 801f6b4:	f000 f868 	bl	801f788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801f6b8:	2100      	movs	r1, #0
 801f6ba:	6878      	ldr	r0, [r7, #4]
 801f6bc:	f000 fc68 	bl	801ff90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801f6c0:	f000 f870 	bl	801f7a4 <xTaskResumeAll>
 801f6c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801f6c6:	68fb      	ldr	r3, [r7, #12]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d101      	bne.n	801f6d0 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 801f6cc:	f001 f800 	bl	80206d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f6d0:	bf00      	nop
 801f6d2:	3710      	adds	r7, #16
 801f6d4:	46bd      	mov	sp, r7
 801f6d6:	bd80      	pop	{r7, pc}
 801f6d8:	20001bc8 	.word	0x20001bc8

0801f6dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801f6dc:	b580      	push	{r7, lr}
 801f6de:	b088      	sub	sp, #32
 801f6e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801f6e2:	2300      	movs	r3, #0
 801f6e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801f6e6:	2300      	movs	r3, #0
 801f6e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801f6ea:	463a      	mov	r2, r7
 801f6ec:	1d39      	adds	r1, r7, #4
 801f6ee:	f107 0308 	add.w	r3, r7, #8
 801f6f2:	4618      	mov	r0, r3
 801f6f4:	f7ff f8e0 	bl	801e8b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801f6f8:	6839      	ldr	r1, [r7, #0]
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	68ba      	ldr	r2, [r7, #8]
 801f6fe:	9202      	str	r2, [sp, #8]
 801f700:	9301      	str	r3, [sp, #4]
 801f702:	2300      	movs	r3, #0
 801f704:	9300      	str	r3, [sp, #0]
 801f706:	2300      	movs	r3, #0
 801f708:	460a      	mov	r2, r1
 801f70a:	4919      	ldr	r1, [pc, #100]	; (801f770 <vTaskStartScheduler+0x94>)
 801f70c:	4819      	ldr	r0, [pc, #100]	; (801f774 <vTaskStartScheduler+0x98>)
 801f70e:	f7ff fde7 	bl	801f2e0 <xTaskCreateStatic>
 801f712:	4603      	mov	r3, r0
 801f714:	4a18      	ldr	r2, [pc, #96]	; (801f778 <vTaskStartScheduler+0x9c>)
 801f716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801f718:	4b17      	ldr	r3, [pc, #92]	; (801f778 <vTaskStartScheduler+0x9c>)
 801f71a:	681b      	ldr	r3, [r3, #0]
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	d002      	beq.n	801f726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801f720:	2301      	movs	r3, #1
 801f722:	60fb      	str	r3, [r7, #12]
 801f724:	e001      	b.n	801f72a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801f726:	2300      	movs	r3, #0
 801f728:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801f72a:	68fb      	ldr	r3, [r7, #12]
 801f72c:	2b01      	cmp	r3, #1
 801f72e:	d102      	bne.n	801f736 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801f730:	f000 fc82 	bl	8020038 <xTimerCreateTimerTask>
 801f734:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801f736:	68fb      	ldr	r3, [r7, #12]
 801f738:	2b01      	cmp	r3, #1
 801f73a:	d10e      	bne.n	801f75a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801f73c:	f001 f90c 	bl	8020958 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801f740:	4b0e      	ldr	r3, [pc, #56]	; (801f77c <vTaskStartScheduler+0xa0>)
 801f742:	f04f 32ff 	mov.w	r2, #4294967295
 801f746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801f748:	4b0d      	ldr	r3, [pc, #52]	; (801f780 <vTaskStartScheduler+0xa4>)
 801f74a:	2201      	movs	r2, #1
 801f74c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801f74e:	4b0d      	ldr	r3, [pc, #52]	; (801f784 <vTaskStartScheduler+0xa8>)
 801f750:	2200      	movs	r2, #0
 801f752:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801f754:	f001 f8b4 	bl	80208c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801f758:	e006      	b.n	801f768 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801f75a:	68fb      	ldr	r3, [r7, #12]
 801f75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f760:	d102      	bne.n	801f768 <vTaskStartScheduler+0x8c>
 801f762:	f001 f8f9 	bl	8020958 <ulSetInterruptMask>
 801f766:	e7fe      	b.n	801f766 <vTaskStartScheduler+0x8a>
}
 801f768:	bf00      	nop
 801f76a:	3710      	adds	r7, #16
 801f76c:	46bd      	mov	sp, r7
 801f76e:	bd80      	pop	{r7, pc}
 801f770:	0802589c 	.word	0x0802589c
 801f774:	0801fd0d 	.word	0x0801fd0d
 801f778:	20001bc4 	.word	0x20001bc4
 801f77c:	20001bc0 	.word	0x20001bc0
 801f780:	20001bac 	.word	0x20001bac
 801f784:	20001ba4 	.word	0x20001ba4

0801f788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801f788:	b480      	push	{r7}
 801f78a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801f78c:	4b04      	ldr	r3, [pc, #16]	; (801f7a0 <vTaskSuspendAll+0x18>)
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	3301      	adds	r3, #1
 801f792:	4a03      	ldr	r2, [pc, #12]	; (801f7a0 <vTaskSuspendAll+0x18>)
 801f794:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801f796:	bf00      	nop
 801f798:	46bd      	mov	sp, r7
 801f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f79e:	4770      	bx	lr
 801f7a0:	20001bc8 	.word	0x20001bc8

0801f7a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801f7a4:	b580      	push	{r7, lr}
 801f7a6:	b084      	sub	sp, #16
 801f7a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801f7aa:	2300      	movs	r3, #0
 801f7ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801f7ae:	2300      	movs	r3, #0
 801f7b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801f7b2:	4b3b      	ldr	r3, [pc, #236]	; (801f8a0 <xTaskResumeAll+0xfc>)
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	d102      	bne.n	801f7c0 <xTaskResumeAll+0x1c>
 801f7ba:	f001 f8cd 	bl	8020958 <ulSetInterruptMask>
 801f7be:	e7fe      	b.n	801f7be <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801f7c0:	f000 ff98 	bl	80206f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801f7c4:	4b36      	ldr	r3, [pc, #216]	; (801f8a0 <xTaskResumeAll+0xfc>)
 801f7c6:	681b      	ldr	r3, [r3, #0]
 801f7c8:	3b01      	subs	r3, #1
 801f7ca:	4a35      	ldr	r2, [pc, #212]	; (801f8a0 <xTaskResumeAll+0xfc>)
 801f7cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f7ce:	4b34      	ldr	r3, [pc, #208]	; (801f8a0 <xTaskResumeAll+0xfc>)
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d15c      	bne.n	801f890 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801f7d6:	4b33      	ldr	r3, [pc, #204]	; (801f8a4 <xTaskResumeAll+0x100>)
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	d058      	beq.n	801f890 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801f7de:	e02f      	b.n	801f840 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f7e0:	4b31      	ldr	r3, [pc, #196]	; (801f8a8 <xTaskResumeAll+0x104>)
 801f7e2:	68db      	ldr	r3, [r3, #12]
 801f7e4:	68db      	ldr	r3, [r3, #12]
 801f7e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f7e8:	68fb      	ldr	r3, [r7, #12]
 801f7ea:	3318      	adds	r3, #24
 801f7ec:	4618      	mov	r0, r3
 801f7ee:	f7ff f921 	bl	801ea34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f7f2:	68fb      	ldr	r3, [r7, #12]
 801f7f4:	3304      	adds	r3, #4
 801f7f6:	4618      	mov	r0, r3
 801f7f8:	f7ff f91c 	bl	801ea34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801f7fc:	68fb      	ldr	r3, [r7, #12]
 801f7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f800:	4b2a      	ldr	r3, [pc, #168]	; (801f8ac <xTaskResumeAll+0x108>)
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	429a      	cmp	r2, r3
 801f806:	d903      	bls.n	801f810 <xTaskResumeAll+0x6c>
 801f808:	68fb      	ldr	r3, [r7, #12]
 801f80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f80c:	4a27      	ldr	r2, [pc, #156]	; (801f8ac <xTaskResumeAll+0x108>)
 801f80e:	6013      	str	r3, [r2, #0]
 801f810:	68fb      	ldr	r3, [r7, #12]
 801f812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f814:	4613      	mov	r3, r2
 801f816:	009b      	lsls	r3, r3, #2
 801f818:	4413      	add	r3, r2
 801f81a:	009b      	lsls	r3, r3, #2
 801f81c:	4a24      	ldr	r2, [pc, #144]	; (801f8b0 <xTaskResumeAll+0x10c>)
 801f81e:	441a      	add	r2, r3
 801f820:	68fb      	ldr	r3, [r7, #12]
 801f822:	3304      	adds	r3, #4
 801f824:	4619      	mov	r1, r3
 801f826:	4610      	mov	r0, r2
 801f828:	f7ff f8a7 	bl	801e97a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f82c:	68fb      	ldr	r3, [r7, #12]
 801f82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f830:	4b20      	ldr	r3, [pc, #128]	; (801f8b4 <xTaskResumeAll+0x110>)
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f836:	429a      	cmp	r2, r3
 801f838:	d302      	bcc.n	801f840 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801f83a:	4b1f      	ldr	r3, [pc, #124]	; (801f8b8 <xTaskResumeAll+0x114>)
 801f83c:	2201      	movs	r2, #1
 801f83e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801f840:	4b19      	ldr	r3, [pc, #100]	; (801f8a8 <xTaskResumeAll+0x104>)
 801f842:	681b      	ldr	r3, [r3, #0]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d1cb      	bne.n	801f7e0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801f848:	68fb      	ldr	r3, [r7, #12]
 801f84a:	2b00      	cmp	r3, #0
 801f84c:	d001      	beq.n	801f852 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801f84e:	f000 fb03 	bl	801fe58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801f852:	4b1a      	ldr	r3, [pc, #104]	; (801f8bc <xTaskResumeAll+0x118>)
 801f854:	681b      	ldr	r3, [r3, #0]
 801f856:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	d010      	beq.n	801f880 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801f85e:	f000 f83f 	bl	801f8e0 <xTaskIncrementTick>
 801f862:	4603      	mov	r3, r0
 801f864:	2b00      	cmp	r3, #0
 801f866:	d002      	beq.n	801f86e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 801f868:	4b13      	ldr	r3, [pc, #76]	; (801f8b8 <xTaskResumeAll+0x114>)
 801f86a:	2201      	movs	r2, #1
 801f86c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	3b01      	subs	r3, #1
 801f872:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	2b00      	cmp	r3, #0
 801f878:	d1f1      	bne.n	801f85e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801f87a:	4b10      	ldr	r3, [pc, #64]	; (801f8bc <xTaskResumeAll+0x118>)
 801f87c:	2200      	movs	r2, #0
 801f87e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801f880:	4b0d      	ldr	r3, [pc, #52]	; (801f8b8 <xTaskResumeAll+0x114>)
 801f882:	681b      	ldr	r3, [r3, #0]
 801f884:	2b00      	cmp	r3, #0
 801f886:	d003      	beq.n	801f890 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801f888:	2301      	movs	r3, #1
 801f88a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801f88c:	f000 ff20 	bl	80206d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801f890:	f000 ff42 	bl	8020718 <vPortExitCritical>

	return xAlreadyYielded;
 801f894:	68bb      	ldr	r3, [r7, #8]
}
 801f896:	4618      	mov	r0, r3
 801f898:	3710      	adds	r7, #16
 801f89a:	46bd      	mov	sp, r7
 801f89c:	bd80      	pop	{r7, pc}
 801f89e:	bf00      	nop
 801f8a0:	20001bc8 	.word	0x20001bc8
 801f8a4:	20001ba0 	.word	0x20001ba0
 801f8a8:	20001b60 	.word	0x20001b60
 801f8ac:	20001ba8 	.word	0x20001ba8
 801f8b0:	200016d0 	.word	0x200016d0
 801f8b4:	200016cc 	.word	0x200016cc
 801f8b8:	20001bb4 	.word	0x20001bb4
 801f8bc:	20001bb0 	.word	0x20001bb0

0801f8c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801f8c0:	b480      	push	{r7}
 801f8c2:	b083      	sub	sp, #12
 801f8c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801f8c6:	4b05      	ldr	r3, [pc, #20]	; (801f8dc <xTaskGetTickCount+0x1c>)
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801f8cc:	687b      	ldr	r3, [r7, #4]
}
 801f8ce:	4618      	mov	r0, r3
 801f8d0:	370c      	adds	r7, #12
 801f8d2:	46bd      	mov	sp, r7
 801f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8d8:	4770      	bx	lr
 801f8da:	bf00      	nop
 801f8dc:	20001ba4 	.word	0x20001ba4

0801f8e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801f8e0:	b580      	push	{r7, lr}
 801f8e2:	b086      	sub	sp, #24
 801f8e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801f8e6:	2300      	movs	r3, #0
 801f8e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f8ea:	4b4b      	ldr	r3, [pc, #300]	; (801fa18 <xTaskIncrementTick+0x138>)
 801f8ec:	681b      	ldr	r3, [r3, #0]
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	f040 8087 	bne.w	801fa02 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801f8f4:	4b49      	ldr	r3, [pc, #292]	; (801fa1c <xTaskIncrementTick+0x13c>)
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	3301      	adds	r3, #1
 801f8fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801f8fc:	4a47      	ldr	r2, [pc, #284]	; (801fa1c <xTaskIncrementTick+0x13c>)
 801f8fe:	693b      	ldr	r3, [r7, #16]
 801f900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801f902:	693b      	ldr	r3, [r7, #16]
 801f904:	2b00      	cmp	r3, #0
 801f906:	d118      	bne.n	801f93a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 801f908:	4b45      	ldr	r3, [pc, #276]	; (801fa20 <xTaskIncrementTick+0x140>)
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	681b      	ldr	r3, [r3, #0]
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d002      	beq.n	801f918 <xTaskIncrementTick+0x38>
 801f912:	f001 f821 	bl	8020958 <ulSetInterruptMask>
 801f916:	e7fe      	b.n	801f916 <xTaskIncrementTick+0x36>
 801f918:	4b41      	ldr	r3, [pc, #260]	; (801fa20 <xTaskIncrementTick+0x140>)
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	60fb      	str	r3, [r7, #12]
 801f91e:	4b41      	ldr	r3, [pc, #260]	; (801fa24 <xTaskIncrementTick+0x144>)
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	4a3f      	ldr	r2, [pc, #252]	; (801fa20 <xTaskIncrementTick+0x140>)
 801f924:	6013      	str	r3, [r2, #0]
 801f926:	4a3f      	ldr	r2, [pc, #252]	; (801fa24 <xTaskIncrementTick+0x144>)
 801f928:	68fb      	ldr	r3, [r7, #12]
 801f92a:	6013      	str	r3, [r2, #0]
 801f92c:	4b3e      	ldr	r3, [pc, #248]	; (801fa28 <xTaskIncrementTick+0x148>)
 801f92e:	681b      	ldr	r3, [r3, #0]
 801f930:	3301      	adds	r3, #1
 801f932:	4a3d      	ldr	r2, [pc, #244]	; (801fa28 <xTaskIncrementTick+0x148>)
 801f934:	6013      	str	r3, [r2, #0]
 801f936:	f000 fa8f 	bl	801fe58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801f93a:	4b3c      	ldr	r3, [pc, #240]	; (801fa2c <xTaskIncrementTick+0x14c>)
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	693a      	ldr	r2, [r7, #16]
 801f940:	429a      	cmp	r2, r3
 801f942:	d349      	bcc.n	801f9d8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f944:	4b36      	ldr	r3, [pc, #216]	; (801fa20 <xTaskIncrementTick+0x140>)
 801f946:	681b      	ldr	r3, [r3, #0]
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	d104      	bne.n	801f958 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f94e:	4b37      	ldr	r3, [pc, #220]	; (801fa2c <xTaskIncrementTick+0x14c>)
 801f950:	f04f 32ff 	mov.w	r2, #4294967295
 801f954:	601a      	str	r2, [r3, #0]
					break;
 801f956:	e03f      	b.n	801f9d8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f958:	4b31      	ldr	r3, [pc, #196]	; (801fa20 <xTaskIncrementTick+0x140>)
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	68db      	ldr	r3, [r3, #12]
 801f95e:	68db      	ldr	r3, [r3, #12]
 801f960:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801f962:	68bb      	ldr	r3, [r7, #8]
 801f964:	685b      	ldr	r3, [r3, #4]
 801f966:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801f968:	693a      	ldr	r2, [r7, #16]
 801f96a:	687b      	ldr	r3, [r7, #4]
 801f96c:	429a      	cmp	r2, r3
 801f96e:	d203      	bcs.n	801f978 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801f970:	4a2e      	ldr	r2, [pc, #184]	; (801fa2c <xTaskIncrementTick+0x14c>)
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801f976:	e02f      	b.n	801f9d8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f978:	68bb      	ldr	r3, [r7, #8]
 801f97a:	3304      	adds	r3, #4
 801f97c:	4618      	mov	r0, r3
 801f97e:	f7ff f859 	bl	801ea34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801f982:	68bb      	ldr	r3, [r7, #8]
 801f984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f986:	2b00      	cmp	r3, #0
 801f988:	d004      	beq.n	801f994 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f98a:	68bb      	ldr	r3, [r7, #8]
 801f98c:	3318      	adds	r3, #24
 801f98e:	4618      	mov	r0, r3
 801f990:	f7ff f850 	bl	801ea34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801f994:	68bb      	ldr	r3, [r7, #8]
 801f996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f998:	4b25      	ldr	r3, [pc, #148]	; (801fa30 <xTaskIncrementTick+0x150>)
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	429a      	cmp	r2, r3
 801f99e:	d903      	bls.n	801f9a8 <xTaskIncrementTick+0xc8>
 801f9a0:	68bb      	ldr	r3, [r7, #8]
 801f9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f9a4:	4a22      	ldr	r2, [pc, #136]	; (801fa30 <xTaskIncrementTick+0x150>)
 801f9a6:	6013      	str	r3, [r2, #0]
 801f9a8:	68bb      	ldr	r3, [r7, #8]
 801f9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f9ac:	4613      	mov	r3, r2
 801f9ae:	009b      	lsls	r3, r3, #2
 801f9b0:	4413      	add	r3, r2
 801f9b2:	009b      	lsls	r3, r3, #2
 801f9b4:	4a1f      	ldr	r2, [pc, #124]	; (801fa34 <xTaskIncrementTick+0x154>)
 801f9b6:	441a      	add	r2, r3
 801f9b8:	68bb      	ldr	r3, [r7, #8]
 801f9ba:	3304      	adds	r3, #4
 801f9bc:	4619      	mov	r1, r3
 801f9be:	4610      	mov	r0, r2
 801f9c0:	f7fe ffdb 	bl	801e97a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f9c4:	68bb      	ldr	r3, [r7, #8]
 801f9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f9c8:	4b1b      	ldr	r3, [pc, #108]	; (801fa38 <xTaskIncrementTick+0x158>)
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f9ce:	429a      	cmp	r2, r3
 801f9d0:	d3b8      	bcc.n	801f944 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801f9d2:	2301      	movs	r3, #1
 801f9d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f9d6:	e7b5      	b.n	801f944 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801f9d8:	4b17      	ldr	r3, [pc, #92]	; (801fa38 <xTaskIncrementTick+0x158>)
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f9de:	4915      	ldr	r1, [pc, #84]	; (801fa34 <xTaskIncrementTick+0x154>)
 801f9e0:	4613      	mov	r3, r2
 801f9e2:	009b      	lsls	r3, r3, #2
 801f9e4:	4413      	add	r3, r2
 801f9e6:	009b      	lsls	r3, r3, #2
 801f9e8:	440b      	add	r3, r1
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	2b01      	cmp	r3, #1
 801f9ee:	d901      	bls.n	801f9f4 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 801f9f0:	2301      	movs	r3, #1
 801f9f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801f9f4:	4b11      	ldr	r3, [pc, #68]	; (801fa3c <xTaskIncrementTick+0x15c>)
 801f9f6:	681b      	ldr	r3, [r3, #0]
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	d007      	beq.n	801fa0c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801f9fc:	2301      	movs	r3, #1
 801f9fe:	617b      	str	r3, [r7, #20]
 801fa00:	e004      	b.n	801fa0c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801fa02:	4b0f      	ldr	r3, [pc, #60]	; (801fa40 <xTaskIncrementTick+0x160>)
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	3301      	adds	r3, #1
 801fa08:	4a0d      	ldr	r2, [pc, #52]	; (801fa40 <xTaskIncrementTick+0x160>)
 801fa0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801fa0c:	697b      	ldr	r3, [r7, #20]
}
 801fa0e:	4618      	mov	r0, r3
 801fa10:	3718      	adds	r7, #24
 801fa12:	46bd      	mov	sp, r7
 801fa14:	bd80      	pop	{r7, pc}
 801fa16:	bf00      	nop
 801fa18:	20001bc8 	.word	0x20001bc8
 801fa1c:	20001ba4 	.word	0x20001ba4
 801fa20:	20001b58 	.word	0x20001b58
 801fa24:	20001b5c 	.word	0x20001b5c
 801fa28:	20001bb8 	.word	0x20001bb8
 801fa2c:	20001bc0 	.word	0x20001bc0
 801fa30:	20001ba8 	.word	0x20001ba8
 801fa34:	200016d0 	.word	0x200016d0
 801fa38:	200016cc 	.word	0x200016cc
 801fa3c:	20001bb4 	.word	0x20001bb4
 801fa40:	20001bb0 	.word	0x20001bb0

0801fa44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801fa44:	b580      	push	{r7, lr}
 801fa46:	b082      	sub	sp, #8
 801fa48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801fa4a:	4b23      	ldr	r3, [pc, #140]	; (801fad8 <vTaskSwitchContext+0x94>)
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d003      	beq.n	801fa5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801fa52:	4b22      	ldr	r3, [pc, #136]	; (801fadc <vTaskSwitchContext+0x98>)
 801fa54:	2201      	movs	r2, #1
 801fa56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801fa58:	e039      	b.n	801face <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 801fa5a:	4b20      	ldr	r3, [pc, #128]	; (801fadc <vTaskSwitchContext+0x98>)
 801fa5c:	2200      	movs	r2, #0
 801fa5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fa60:	4b1f      	ldr	r3, [pc, #124]	; (801fae0 <vTaskSwitchContext+0x9c>)
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	607b      	str	r3, [r7, #4]
 801fa66:	e008      	b.n	801fa7a <vTaskSwitchContext+0x36>
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	d102      	bne.n	801fa74 <vTaskSwitchContext+0x30>
 801fa6e:	f000 ff73 	bl	8020958 <ulSetInterruptMask>
 801fa72:	e7fe      	b.n	801fa72 <vTaskSwitchContext+0x2e>
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	3b01      	subs	r3, #1
 801fa78:	607b      	str	r3, [r7, #4]
 801fa7a:	491a      	ldr	r1, [pc, #104]	; (801fae4 <vTaskSwitchContext+0xa0>)
 801fa7c:	687a      	ldr	r2, [r7, #4]
 801fa7e:	4613      	mov	r3, r2
 801fa80:	009b      	lsls	r3, r3, #2
 801fa82:	4413      	add	r3, r2
 801fa84:	009b      	lsls	r3, r3, #2
 801fa86:	440b      	add	r3, r1
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	d0ec      	beq.n	801fa68 <vTaskSwitchContext+0x24>
 801fa8e:	687a      	ldr	r2, [r7, #4]
 801fa90:	4613      	mov	r3, r2
 801fa92:	009b      	lsls	r3, r3, #2
 801fa94:	4413      	add	r3, r2
 801fa96:	009b      	lsls	r3, r3, #2
 801fa98:	4a12      	ldr	r2, [pc, #72]	; (801fae4 <vTaskSwitchContext+0xa0>)
 801fa9a:	4413      	add	r3, r2
 801fa9c:	603b      	str	r3, [r7, #0]
 801fa9e:	683b      	ldr	r3, [r7, #0]
 801faa0:	685b      	ldr	r3, [r3, #4]
 801faa2:	685a      	ldr	r2, [r3, #4]
 801faa4:	683b      	ldr	r3, [r7, #0]
 801faa6:	605a      	str	r2, [r3, #4]
 801faa8:	683b      	ldr	r3, [r7, #0]
 801faaa:	685a      	ldr	r2, [r3, #4]
 801faac:	683b      	ldr	r3, [r7, #0]
 801faae:	3308      	adds	r3, #8
 801fab0:	429a      	cmp	r2, r3
 801fab2:	d104      	bne.n	801fabe <vTaskSwitchContext+0x7a>
 801fab4:	683b      	ldr	r3, [r7, #0]
 801fab6:	685b      	ldr	r3, [r3, #4]
 801fab8:	685a      	ldr	r2, [r3, #4]
 801faba:	683b      	ldr	r3, [r7, #0]
 801fabc:	605a      	str	r2, [r3, #4]
 801fabe:	683b      	ldr	r3, [r7, #0]
 801fac0:	685b      	ldr	r3, [r3, #4]
 801fac2:	68db      	ldr	r3, [r3, #12]
 801fac4:	4a08      	ldr	r2, [pc, #32]	; (801fae8 <vTaskSwitchContext+0xa4>)
 801fac6:	6013      	str	r3, [r2, #0]
 801fac8:	4a05      	ldr	r2, [pc, #20]	; (801fae0 <vTaskSwitchContext+0x9c>)
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	6013      	str	r3, [r2, #0]
}
 801face:	bf00      	nop
 801fad0:	3708      	adds	r7, #8
 801fad2:	46bd      	mov	sp, r7
 801fad4:	bd80      	pop	{r7, pc}
 801fad6:	bf00      	nop
 801fad8:	20001bc8 	.word	0x20001bc8
 801fadc:	20001bb4 	.word	0x20001bb4
 801fae0:	20001ba8 	.word	0x20001ba8
 801fae4:	200016d0 	.word	0x200016d0
 801fae8:	200016cc 	.word	0x200016cc

0801faec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801faec:	b580      	push	{r7, lr}
 801faee:	b082      	sub	sp, #8
 801faf0:	af00      	add	r7, sp, #0
 801faf2:	6078      	str	r0, [r7, #4]
 801faf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d102      	bne.n	801fb02 <vTaskPlaceOnEventList+0x16>
 801fafc:	f000 ff2c 	bl	8020958 <ulSetInterruptMask>
 801fb00:	e7fe      	b.n	801fb00 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801fb02:	4b07      	ldr	r3, [pc, #28]	; (801fb20 <vTaskPlaceOnEventList+0x34>)
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	3318      	adds	r3, #24
 801fb08:	4619      	mov	r1, r3
 801fb0a:	6878      	ldr	r0, [r7, #4]
 801fb0c:	f7fe ff59 	bl	801e9c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801fb10:	2101      	movs	r1, #1
 801fb12:	6838      	ldr	r0, [r7, #0]
 801fb14:	f000 fa3c 	bl	801ff90 <prvAddCurrentTaskToDelayedList>
}
 801fb18:	bf00      	nop
 801fb1a:	3708      	adds	r7, #8
 801fb1c:	46bd      	mov	sp, r7
 801fb1e:	bd80      	pop	{r7, pc}
 801fb20:	200016cc 	.word	0x200016cc

0801fb24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801fb24:	b580      	push	{r7, lr}
 801fb26:	b084      	sub	sp, #16
 801fb28:	af00      	add	r7, sp, #0
 801fb2a:	60f8      	str	r0, [r7, #12]
 801fb2c:	60b9      	str	r1, [r7, #8]
 801fb2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801fb30:	68fb      	ldr	r3, [r7, #12]
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d102      	bne.n	801fb3c <vTaskPlaceOnEventListRestricted+0x18>
 801fb36:	f000 ff0f 	bl	8020958 <ulSetInterruptMask>
 801fb3a:	e7fe      	b.n	801fb3a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801fb3c:	4b0a      	ldr	r3, [pc, #40]	; (801fb68 <vTaskPlaceOnEventListRestricted+0x44>)
 801fb3e:	681b      	ldr	r3, [r3, #0]
 801fb40:	3318      	adds	r3, #24
 801fb42:	4619      	mov	r1, r3
 801fb44:	68f8      	ldr	r0, [r7, #12]
 801fb46:	f7fe ff18 	bl	801e97a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	2b00      	cmp	r3, #0
 801fb4e:	d002      	beq.n	801fb56 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 801fb50:	f04f 33ff 	mov.w	r3, #4294967295
 801fb54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801fb56:	6879      	ldr	r1, [r7, #4]
 801fb58:	68b8      	ldr	r0, [r7, #8]
 801fb5a:	f000 fa19 	bl	801ff90 <prvAddCurrentTaskToDelayedList>
	}
 801fb5e:	bf00      	nop
 801fb60:	3710      	adds	r7, #16
 801fb62:	46bd      	mov	sp, r7
 801fb64:	bd80      	pop	{r7, pc}
 801fb66:	bf00      	nop
 801fb68:	200016cc 	.word	0x200016cc

0801fb6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801fb6c:	b580      	push	{r7, lr}
 801fb6e:	b084      	sub	sp, #16
 801fb70:	af00      	add	r7, sp, #0
 801fb72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	68db      	ldr	r3, [r3, #12]
 801fb78:	68db      	ldr	r3, [r3, #12]
 801fb7a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801fb7c:	68bb      	ldr	r3, [r7, #8]
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d102      	bne.n	801fb88 <xTaskRemoveFromEventList+0x1c>
 801fb82:	f000 fee9 	bl	8020958 <ulSetInterruptMask>
 801fb86:	e7fe      	b.n	801fb86 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801fb88:	68bb      	ldr	r3, [r7, #8]
 801fb8a:	3318      	adds	r3, #24
 801fb8c:	4618      	mov	r0, r3
 801fb8e:	f7fe ff51 	bl	801ea34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fb92:	4b1e      	ldr	r3, [pc, #120]	; (801fc0c <xTaskRemoveFromEventList+0xa0>)
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	d11d      	bne.n	801fbd6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801fb9a:	68bb      	ldr	r3, [r7, #8]
 801fb9c:	3304      	adds	r3, #4
 801fb9e:	4618      	mov	r0, r3
 801fba0:	f7fe ff48 	bl	801ea34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801fba4:	68bb      	ldr	r3, [r7, #8]
 801fba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fba8:	4b19      	ldr	r3, [pc, #100]	; (801fc10 <xTaskRemoveFromEventList+0xa4>)
 801fbaa:	681b      	ldr	r3, [r3, #0]
 801fbac:	429a      	cmp	r2, r3
 801fbae:	d903      	bls.n	801fbb8 <xTaskRemoveFromEventList+0x4c>
 801fbb0:	68bb      	ldr	r3, [r7, #8]
 801fbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fbb4:	4a16      	ldr	r2, [pc, #88]	; (801fc10 <xTaskRemoveFromEventList+0xa4>)
 801fbb6:	6013      	str	r3, [r2, #0]
 801fbb8:	68bb      	ldr	r3, [r7, #8]
 801fbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fbbc:	4613      	mov	r3, r2
 801fbbe:	009b      	lsls	r3, r3, #2
 801fbc0:	4413      	add	r3, r2
 801fbc2:	009b      	lsls	r3, r3, #2
 801fbc4:	4a13      	ldr	r2, [pc, #76]	; (801fc14 <xTaskRemoveFromEventList+0xa8>)
 801fbc6:	441a      	add	r2, r3
 801fbc8:	68bb      	ldr	r3, [r7, #8]
 801fbca:	3304      	adds	r3, #4
 801fbcc:	4619      	mov	r1, r3
 801fbce:	4610      	mov	r0, r2
 801fbd0:	f7fe fed3 	bl	801e97a <vListInsertEnd>
 801fbd4:	e005      	b.n	801fbe2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801fbd6:	68bb      	ldr	r3, [r7, #8]
 801fbd8:	3318      	adds	r3, #24
 801fbda:	4619      	mov	r1, r3
 801fbdc:	480e      	ldr	r0, [pc, #56]	; (801fc18 <xTaskRemoveFromEventList+0xac>)
 801fbde:	f7fe fecc 	bl	801e97a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801fbe2:	68bb      	ldr	r3, [r7, #8]
 801fbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fbe6:	4b0d      	ldr	r3, [pc, #52]	; (801fc1c <xTaskRemoveFromEventList+0xb0>)
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fbec:	429a      	cmp	r2, r3
 801fbee:	d905      	bls.n	801fbfc <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801fbf0:	2301      	movs	r3, #1
 801fbf2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801fbf4:	4b0a      	ldr	r3, [pc, #40]	; (801fc20 <xTaskRemoveFromEventList+0xb4>)
 801fbf6:	2201      	movs	r2, #1
 801fbf8:	601a      	str	r2, [r3, #0]
 801fbfa:	e001      	b.n	801fc00 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 801fbfc:	2300      	movs	r3, #0
 801fbfe:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801fc00:	68fb      	ldr	r3, [r7, #12]
}
 801fc02:	4618      	mov	r0, r3
 801fc04:	3710      	adds	r7, #16
 801fc06:	46bd      	mov	sp, r7
 801fc08:	bd80      	pop	{r7, pc}
 801fc0a:	bf00      	nop
 801fc0c:	20001bc8 	.word	0x20001bc8
 801fc10:	20001ba8 	.word	0x20001ba8
 801fc14:	200016d0 	.word	0x200016d0
 801fc18:	20001b60 	.word	0x20001b60
 801fc1c:	200016cc 	.word	0x200016cc
 801fc20:	20001bb4 	.word	0x20001bb4

0801fc24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801fc24:	b480      	push	{r7}
 801fc26:	b083      	sub	sp, #12
 801fc28:	af00      	add	r7, sp, #0
 801fc2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801fc2c:	4b06      	ldr	r3, [pc, #24]	; (801fc48 <vTaskInternalSetTimeOutState+0x24>)
 801fc2e:	681a      	ldr	r2, [r3, #0]
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801fc34:	4b05      	ldr	r3, [pc, #20]	; (801fc4c <vTaskInternalSetTimeOutState+0x28>)
 801fc36:	681a      	ldr	r2, [r3, #0]
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	605a      	str	r2, [r3, #4]
}
 801fc3c:	bf00      	nop
 801fc3e:	370c      	adds	r7, #12
 801fc40:	46bd      	mov	sp, r7
 801fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc46:	4770      	bx	lr
 801fc48:	20001bb8 	.word	0x20001bb8
 801fc4c:	20001ba4 	.word	0x20001ba4

0801fc50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801fc50:	b580      	push	{r7, lr}
 801fc52:	b086      	sub	sp, #24
 801fc54:	af00      	add	r7, sp, #0
 801fc56:	6078      	str	r0, [r7, #4]
 801fc58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	d102      	bne.n	801fc66 <xTaskCheckForTimeOut+0x16>
 801fc60:	f000 fe7a 	bl	8020958 <ulSetInterruptMask>
 801fc64:	e7fe      	b.n	801fc64 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 801fc66:	683b      	ldr	r3, [r7, #0]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d102      	bne.n	801fc72 <xTaskCheckForTimeOut+0x22>
 801fc6c:	f000 fe74 	bl	8020958 <ulSetInterruptMask>
 801fc70:	e7fe      	b.n	801fc70 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 801fc72:	f000 fd3f 	bl	80206f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801fc76:	4b1d      	ldr	r3, [pc, #116]	; (801fcec <xTaskCheckForTimeOut+0x9c>)
 801fc78:	681b      	ldr	r3, [r3, #0]
 801fc7a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	685b      	ldr	r3, [r3, #4]
 801fc80:	693a      	ldr	r2, [r7, #16]
 801fc82:	1ad3      	subs	r3, r2, r3
 801fc84:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801fc86:	683b      	ldr	r3, [r7, #0]
 801fc88:	681b      	ldr	r3, [r3, #0]
 801fc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc8e:	d102      	bne.n	801fc96 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801fc90:	2300      	movs	r3, #0
 801fc92:	617b      	str	r3, [r7, #20]
 801fc94:	e023      	b.n	801fcde <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	681a      	ldr	r2, [r3, #0]
 801fc9a:	4b15      	ldr	r3, [pc, #84]	; (801fcf0 <xTaskCheckForTimeOut+0xa0>)
 801fc9c:	681b      	ldr	r3, [r3, #0]
 801fc9e:	429a      	cmp	r2, r3
 801fca0:	d007      	beq.n	801fcb2 <xTaskCheckForTimeOut+0x62>
 801fca2:	687b      	ldr	r3, [r7, #4]
 801fca4:	685b      	ldr	r3, [r3, #4]
 801fca6:	693a      	ldr	r2, [r7, #16]
 801fca8:	429a      	cmp	r2, r3
 801fcaa:	d302      	bcc.n	801fcb2 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801fcac:	2301      	movs	r3, #1
 801fcae:	617b      	str	r3, [r7, #20]
 801fcb0:	e015      	b.n	801fcde <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801fcb2:	683b      	ldr	r3, [r7, #0]
 801fcb4:	681b      	ldr	r3, [r3, #0]
 801fcb6:	68fa      	ldr	r2, [r7, #12]
 801fcb8:	429a      	cmp	r2, r3
 801fcba:	d20b      	bcs.n	801fcd4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801fcbc:	683b      	ldr	r3, [r7, #0]
 801fcbe:	681a      	ldr	r2, [r3, #0]
 801fcc0:	68fb      	ldr	r3, [r7, #12]
 801fcc2:	1ad2      	subs	r2, r2, r3
 801fcc4:	683b      	ldr	r3, [r7, #0]
 801fcc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801fcc8:	6878      	ldr	r0, [r7, #4]
 801fcca:	f7ff ffab 	bl	801fc24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801fcce:	2300      	movs	r3, #0
 801fcd0:	617b      	str	r3, [r7, #20]
 801fcd2:	e004      	b.n	801fcde <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	2200      	movs	r2, #0
 801fcd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801fcda:	2301      	movs	r3, #1
 801fcdc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801fcde:	f000 fd1b 	bl	8020718 <vPortExitCritical>

	return xReturn;
 801fce2:	697b      	ldr	r3, [r7, #20]
}
 801fce4:	4618      	mov	r0, r3
 801fce6:	3718      	adds	r7, #24
 801fce8:	46bd      	mov	sp, r7
 801fcea:	bd80      	pop	{r7, pc}
 801fcec:	20001ba4 	.word	0x20001ba4
 801fcf0:	20001bb8 	.word	0x20001bb8

0801fcf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801fcf4:	b480      	push	{r7}
 801fcf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801fcf8:	4b03      	ldr	r3, [pc, #12]	; (801fd08 <vTaskMissedYield+0x14>)
 801fcfa:	2201      	movs	r2, #1
 801fcfc:	601a      	str	r2, [r3, #0]
}
 801fcfe:	bf00      	nop
 801fd00:	46bd      	mov	sp, r7
 801fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd06:	4770      	bx	lr
 801fd08:	20001bb4 	.word	0x20001bb4

0801fd0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801fd0c:	b580      	push	{r7, lr}
 801fd0e:	b082      	sub	sp, #8
 801fd10:	af00      	add	r7, sp, #0
 801fd12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801fd14:	f000 f84a 	bl	801fdac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801fd18:	4b03      	ldr	r3, [pc, #12]	; (801fd28 <prvIdleTask+0x1c>)
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	2b01      	cmp	r3, #1
 801fd1e:	d9f9      	bls.n	801fd14 <prvIdleTask+0x8>
			{
				taskYIELD();
 801fd20:	f000 fcd6 	bl	80206d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 801fd24:	e7f6      	b.n	801fd14 <prvIdleTask+0x8>
 801fd26:	bf00      	nop
 801fd28:	200016d0 	.word	0x200016d0

0801fd2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801fd2c:	b580      	push	{r7, lr}
 801fd2e:	b082      	sub	sp, #8
 801fd30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801fd32:	2300      	movs	r3, #0
 801fd34:	607b      	str	r3, [r7, #4]
 801fd36:	e00c      	b.n	801fd52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801fd38:	687a      	ldr	r2, [r7, #4]
 801fd3a:	4613      	mov	r3, r2
 801fd3c:	009b      	lsls	r3, r3, #2
 801fd3e:	4413      	add	r3, r2
 801fd40:	009b      	lsls	r3, r3, #2
 801fd42:	4a12      	ldr	r2, [pc, #72]	; (801fd8c <prvInitialiseTaskLists+0x60>)
 801fd44:	4413      	add	r3, r2
 801fd46:	4618      	mov	r0, r3
 801fd48:	f7fe fdea 	bl	801e920 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	3301      	adds	r3, #1
 801fd50:	607b      	str	r3, [r7, #4]
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	2b37      	cmp	r3, #55	; 0x37
 801fd56:	d9ef      	bls.n	801fd38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801fd58:	480d      	ldr	r0, [pc, #52]	; (801fd90 <prvInitialiseTaskLists+0x64>)
 801fd5a:	f7fe fde1 	bl	801e920 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801fd5e:	480d      	ldr	r0, [pc, #52]	; (801fd94 <prvInitialiseTaskLists+0x68>)
 801fd60:	f7fe fdde 	bl	801e920 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801fd64:	480c      	ldr	r0, [pc, #48]	; (801fd98 <prvInitialiseTaskLists+0x6c>)
 801fd66:	f7fe fddb 	bl	801e920 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801fd6a:	480c      	ldr	r0, [pc, #48]	; (801fd9c <prvInitialiseTaskLists+0x70>)
 801fd6c:	f7fe fdd8 	bl	801e920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801fd70:	480b      	ldr	r0, [pc, #44]	; (801fda0 <prvInitialiseTaskLists+0x74>)
 801fd72:	f7fe fdd5 	bl	801e920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801fd76:	4b0b      	ldr	r3, [pc, #44]	; (801fda4 <prvInitialiseTaskLists+0x78>)
 801fd78:	4a05      	ldr	r2, [pc, #20]	; (801fd90 <prvInitialiseTaskLists+0x64>)
 801fd7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801fd7c:	4b0a      	ldr	r3, [pc, #40]	; (801fda8 <prvInitialiseTaskLists+0x7c>)
 801fd7e:	4a05      	ldr	r2, [pc, #20]	; (801fd94 <prvInitialiseTaskLists+0x68>)
 801fd80:	601a      	str	r2, [r3, #0]
}
 801fd82:	bf00      	nop
 801fd84:	3708      	adds	r7, #8
 801fd86:	46bd      	mov	sp, r7
 801fd88:	bd80      	pop	{r7, pc}
 801fd8a:	bf00      	nop
 801fd8c:	200016d0 	.word	0x200016d0
 801fd90:	20001b30 	.word	0x20001b30
 801fd94:	20001b44 	.word	0x20001b44
 801fd98:	20001b60 	.word	0x20001b60
 801fd9c:	20001b74 	.word	0x20001b74
 801fda0:	20001b8c 	.word	0x20001b8c
 801fda4:	20001b58 	.word	0x20001b58
 801fda8:	20001b5c 	.word	0x20001b5c

0801fdac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801fdac:	b580      	push	{r7, lr}
 801fdae:	b082      	sub	sp, #8
 801fdb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801fdb2:	e019      	b.n	801fde8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801fdb4:	f000 fc9e 	bl	80206f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fdb8:	4b10      	ldr	r3, [pc, #64]	; (801fdfc <prvCheckTasksWaitingTermination+0x50>)
 801fdba:	68db      	ldr	r3, [r3, #12]
 801fdbc:	68db      	ldr	r3, [r3, #12]
 801fdbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	3304      	adds	r3, #4
 801fdc4:	4618      	mov	r0, r3
 801fdc6:	f7fe fe35 	bl	801ea34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801fdca:	4b0d      	ldr	r3, [pc, #52]	; (801fe00 <prvCheckTasksWaitingTermination+0x54>)
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	3b01      	subs	r3, #1
 801fdd0:	4a0b      	ldr	r2, [pc, #44]	; (801fe00 <prvCheckTasksWaitingTermination+0x54>)
 801fdd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801fdd4:	4b0b      	ldr	r3, [pc, #44]	; (801fe04 <prvCheckTasksWaitingTermination+0x58>)
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	3b01      	subs	r3, #1
 801fdda:	4a0a      	ldr	r2, [pc, #40]	; (801fe04 <prvCheckTasksWaitingTermination+0x58>)
 801fddc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801fdde:	f000 fc9b 	bl	8020718 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801fde2:	6878      	ldr	r0, [r7, #4]
 801fde4:	f000 f810 	bl	801fe08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801fde8:	4b06      	ldr	r3, [pc, #24]	; (801fe04 <prvCheckTasksWaitingTermination+0x58>)
 801fdea:	681b      	ldr	r3, [r3, #0]
 801fdec:	2b00      	cmp	r3, #0
 801fdee:	d1e1      	bne.n	801fdb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801fdf0:	bf00      	nop
 801fdf2:	bf00      	nop
 801fdf4:	3708      	adds	r7, #8
 801fdf6:	46bd      	mov	sp, r7
 801fdf8:	bd80      	pop	{r7, pc}
 801fdfa:	bf00      	nop
 801fdfc:	20001b74 	.word	0x20001b74
 801fe00:	20001ba0 	.word	0x20001ba0
 801fe04:	20001b88 	.word	0x20001b88

0801fe08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801fe08:	b580      	push	{r7, lr}
 801fe0a:	b082      	sub	sp, #8
 801fe0c:	af00      	add	r7, sp, #0
 801fe0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801fe16:	2b00      	cmp	r3, #0
 801fe18:	d108      	bne.n	801fe2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fe1e:	4618      	mov	r0, r3
 801fe20:	f000 feae 	bl	8020b80 <vPortFree>
				vPortFree( pxTCB );
 801fe24:	6878      	ldr	r0, [r7, #4]
 801fe26:	f000 feab 	bl	8020b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801fe2a:	e010      	b.n	801fe4e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801fe32:	2b01      	cmp	r3, #1
 801fe34:	d103      	bne.n	801fe3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801fe36:	6878      	ldr	r0, [r7, #4]
 801fe38:	f000 fea2 	bl	8020b80 <vPortFree>
	}
 801fe3c:	e007      	b.n	801fe4e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801fe44:	2b02      	cmp	r3, #2
 801fe46:	d002      	beq.n	801fe4e <prvDeleteTCB+0x46>
 801fe48:	f000 fd86 	bl	8020958 <ulSetInterruptMask>
 801fe4c:	e7fe      	b.n	801fe4c <prvDeleteTCB+0x44>
	}
 801fe4e:	bf00      	nop
 801fe50:	3708      	adds	r7, #8
 801fe52:	46bd      	mov	sp, r7
 801fe54:	bd80      	pop	{r7, pc}
	...

0801fe58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801fe58:	b480      	push	{r7}
 801fe5a:	b083      	sub	sp, #12
 801fe5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fe5e:	4b0c      	ldr	r3, [pc, #48]	; (801fe90 <prvResetNextTaskUnblockTime+0x38>)
 801fe60:	681b      	ldr	r3, [r3, #0]
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d104      	bne.n	801fe72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801fe68:	4b0a      	ldr	r3, [pc, #40]	; (801fe94 <prvResetNextTaskUnblockTime+0x3c>)
 801fe6a:	f04f 32ff 	mov.w	r2, #4294967295
 801fe6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801fe70:	e008      	b.n	801fe84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fe72:	4b07      	ldr	r3, [pc, #28]	; (801fe90 <prvResetNextTaskUnblockTime+0x38>)
 801fe74:	681b      	ldr	r3, [r3, #0]
 801fe76:	68db      	ldr	r3, [r3, #12]
 801fe78:	68db      	ldr	r3, [r3, #12]
 801fe7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	685b      	ldr	r3, [r3, #4]
 801fe80:	4a04      	ldr	r2, [pc, #16]	; (801fe94 <prvResetNextTaskUnblockTime+0x3c>)
 801fe82:	6013      	str	r3, [r2, #0]
}
 801fe84:	bf00      	nop
 801fe86:	370c      	adds	r7, #12
 801fe88:	46bd      	mov	sp, r7
 801fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe8e:	4770      	bx	lr
 801fe90:	20001b58 	.word	0x20001b58
 801fe94:	20001bc0 	.word	0x20001bc0

0801fe98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801fe98:	b480      	push	{r7}
 801fe9a:	b083      	sub	sp, #12
 801fe9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801fe9e:	4b0b      	ldr	r3, [pc, #44]	; (801fecc <xTaskGetSchedulerState+0x34>)
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d102      	bne.n	801feac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801fea6:	2301      	movs	r3, #1
 801fea8:	607b      	str	r3, [r7, #4]
 801feaa:	e008      	b.n	801febe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801feac:	4b08      	ldr	r3, [pc, #32]	; (801fed0 <xTaskGetSchedulerState+0x38>)
 801feae:	681b      	ldr	r3, [r3, #0]
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	d102      	bne.n	801feba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801feb4:	2302      	movs	r3, #2
 801feb6:	607b      	str	r3, [r7, #4]
 801feb8:	e001      	b.n	801febe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801feba:	2300      	movs	r3, #0
 801febc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801febe:	687b      	ldr	r3, [r7, #4]
	}
 801fec0:	4618      	mov	r0, r3
 801fec2:	370c      	adds	r7, #12
 801fec4:	46bd      	mov	sp, r7
 801fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feca:	4770      	bx	lr
 801fecc:	20001bac 	.word	0x20001bac
 801fed0:	20001bc8 	.word	0x20001bc8

0801fed4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801fed4:	b580      	push	{r7, lr}
 801fed6:	b084      	sub	sp, #16
 801fed8:	af00      	add	r7, sp, #0
 801feda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801fee0:	2300      	movs	r3, #0
 801fee2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801fee4:	687b      	ldr	r3, [r7, #4]
 801fee6:	2b00      	cmp	r3, #0
 801fee8:	d046      	beq.n	801ff78 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801feea:	4b26      	ldr	r3, [pc, #152]	; (801ff84 <xTaskPriorityDisinherit+0xb0>)
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	68ba      	ldr	r2, [r7, #8]
 801fef0:	429a      	cmp	r2, r3
 801fef2:	d002      	beq.n	801fefa <xTaskPriorityDisinherit+0x26>
 801fef4:	f000 fd30 	bl	8020958 <ulSetInterruptMask>
 801fef8:	e7fe      	b.n	801fef8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801fefa:	68bb      	ldr	r3, [r7, #8]
 801fefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fefe:	2b00      	cmp	r3, #0
 801ff00:	d102      	bne.n	801ff08 <xTaskPriorityDisinherit+0x34>
 801ff02:	f000 fd29 	bl	8020958 <ulSetInterruptMask>
 801ff06:	e7fe      	b.n	801ff06 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 801ff08:	68bb      	ldr	r3, [r7, #8]
 801ff0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ff0c:	1e5a      	subs	r2, r3, #1
 801ff0e:	68bb      	ldr	r3, [r7, #8]
 801ff10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801ff12:	68bb      	ldr	r3, [r7, #8]
 801ff14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ff16:	68bb      	ldr	r3, [r7, #8]
 801ff18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ff1a:	429a      	cmp	r2, r3
 801ff1c:	d02c      	beq.n	801ff78 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801ff1e:	68bb      	ldr	r3, [r7, #8]
 801ff20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ff22:	2b00      	cmp	r3, #0
 801ff24:	d128      	bne.n	801ff78 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ff26:	68bb      	ldr	r3, [r7, #8]
 801ff28:	3304      	adds	r3, #4
 801ff2a:	4618      	mov	r0, r3
 801ff2c:	f7fe fd82 	bl	801ea34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ff30:	68bb      	ldr	r3, [r7, #8]
 801ff32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ff34:	68bb      	ldr	r3, [r7, #8]
 801ff36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ff38:	68bb      	ldr	r3, [r7, #8]
 801ff3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ff40:	68bb      	ldr	r3, [r7, #8]
 801ff42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ff44:	68bb      	ldr	r3, [r7, #8]
 801ff46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ff48:	4b0f      	ldr	r3, [pc, #60]	; (801ff88 <xTaskPriorityDisinherit+0xb4>)
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	429a      	cmp	r2, r3
 801ff4e:	d903      	bls.n	801ff58 <xTaskPriorityDisinherit+0x84>
 801ff50:	68bb      	ldr	r3, [r7, #8]
 801ff52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff54:	4a0c      	ldr	r2, [pc, #48]	; (801ff88 <xTaskPriorityDisinherit+0xb4>)
 801ff56:	6013      	str	r3, [r2, #0]
 801ff58:	68bb      	ldr	r3, [r7, #8]
 801ff5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ff5c:	4613      	mov	r3, r2
 801ff5e:	009b      	lsls	r3, r3, #2
 801ff60:	4413      	add	r3, r2
 801ff62:	009b      	lsls	r3, r3, #2
 801ff64:	4a09      	ldr	r2, [pc, #36]	; (801ff8c <xTaskPriorityDisinherit+0xb8>)
 801ff66:	441a      	add	r2, r3
 801ff68:	68bb      	ldr	r3, [r7, #8]
 801ff6a:	3304      	adds	r3, #4
 801ff6c:	4619      	mov	r1, r3
 801ff6e:	4610      	mov	r0, r2
 801ff70:	f7fe fd03 	bl	801e97a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801ff74:	2301      	movs	r3, #1
 801ff76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ff78:	68fb      	ldr	r3, [r7, #12]
	}
 801ff7a:	4618      	mov	r0, r3
 801ff7c:	3710      	adds	r7, #16
 801ff7e:	46bd      	mov	sp, r7
 801ff80:	bd80      	pop	{r7, pc}
 801ff82:	bf00      	nop
 801ff84:	200016cc 	.word	0x200016cc
 801ff88:	20001ba8 	.word	0x20001ba8
 801ff8c:	200016d0 	.word	0x200016d0

0801ff90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801ff90:	b580      	push	{r7, lr}
 801ff92:	b084      	sub	sp, #16
 801ff94:	af00      	add	r7, sp, #0
 801ff96:	6078      	str	r0, [r7, #4]
 801ff98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801ff9a:	4b21      	ldr	r3, [pc, #132]	; (8020020 <prvAddCurrentTaskToDelayedList+0x90>)
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ffa0:	4b20      	ldr	r3, [pc, #128]	; (8020024 <prvAddCurrentTaskToDelayedList+0x94>)
 801ffa2:	681b      	ldr	r3, [r3, #0]
 801ffa4:	3304      	adds	r3, #4
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	f7fe fd44 	bl	801ea34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ffb2:	d10a      	bne.n	801ffca <prvAddCurrentTaskToDelayedList+0x3a>
 801ffb4:	683b      	ldr	r3, [r7, #0]
 801ffb6:	2b00      	cmp	r3, #0
 801ffb8:	d007      	beq.n	801ffca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ffba:	4b1a      	ldr	r3, [pc, #104]	; (8020024 <prvAddCurrentTaskToDelayedList+0x94>)
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	3304      	adds	r3, #4
 801ffc0:	4619      	mov	r1, r3
 801ffc2:	4819      	ldr	r0, [pc, #100]	; (8020028 <prvAddCurrentTaskToDelayedList+0x98>)
 801ffc4:	f7fe fcd9 	bl	801e97a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801ffc8:	e026      	b.n	8020018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801ffca:	68fa      	ldr	r2, [r7, #12]
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	4413      	add	r3, r2
 801ffd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801ffd2:	4b14      	ldr	r3, [pc, #80]	; (8020024 <prvAddCurrentTaskToDelayedList+0x94>)
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	68ba      	ldr	r2, [r7, #8]
 801ffd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801ffda:	68ba      	ldr	r2, [r7, #8]
 801ffdc:	68fb      	ldr	r3, [r7, #12]
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	d209      	bcs.n	801fff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ffe2:	4b12      	ldr	r3, [pc, #72]	; (802002c <prvAddCurrentTaskToDelayedList+0x9c>)
 801ffe4:	681a      	ldr	r2, [r3, #0]
 801ffe6:	4b0f      	ldr	r3, [pc, #60]	; (8020024 <prvAddCurrentTaskToDelayedList+0x94>)
 801ffe8:	681b      	ldr	r3, [r3, #0]
 801ffea:	3304      	adds	r3, #4
 801ffec:	4619      	mov	r1, r3
 801ffee:	4610      	mov	r0, r2
 801fff0:	f7fe fce7 	bl	801e9c2 <vListInsert>
}
 801fff4:	e010      	b.n	8020018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801fff6:	4b0e      	ldr	r3, [pc, #56]	; (8020030 <prvAddCurrentTaskToDelayedList+0xa0>)
 801fff8:	681a      	ldr	r2, [r3, #0]
 801fffa:	4b0a      	ldr	r3, [pc, #40]	; (8020024 <prvAddCurrentTaskToDelayedList+0x94>)
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	3304      	adds	r3, #4
 8020000:	4619      	mov	r1, r3
 8020002:	4610      	mov	r0, r2
 8020004:	f7fe fcdd 	bl	801e9c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8020008:	4b0a      	ldr	r3, [pc, #40]	; (8020034 <prvAddCurrentTaskToDelayedList+0xa4>)
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	68ba      	ldr	r2, [r7, #8]
 802000e:	429a      	cmp	r2, r3
 8020010:	d202      	bcs.n	8020018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8020012:	4a08      	ldr	r2, [pc, #32]	; (8020034 <prvAddCurrentTaskToDelayedList+0xa4>)
 8020014:	68bb      	ldr	r3, [r7, #8]
 8020016:	6013      	str	r3, [r2, #0]
}
 8020018:	bf00      	nop
 802001a:	3710      	adds	r7, #16
 802001c:	46bd      	mov	sp, r7
 802001e:	bd80      	pop	{r7, pc}
 8020020:	20001ba4 	.word	0x20001ba4
 8020024:	200016cc 	.word	0x200016cc
 8020028:	20001b8c 	.word	0x20001b8c
 802002c:	20001b5c 	.word	0x20001b5c
 8020030:	20001b58 	.word	0x20001b58
 8020034:	20001bc0 	.word	0x20001bc0

08020038 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8020038:	b580      	push	{r7, lr}
 802003a:	b088      	sub	sp, #32
 802003c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802003e:	2300      	movs	r3, #0
 8020040:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8020042:	f000 fac7 	bl	80205d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8020046:	4b18      	ldr	r3, [pc, #96]	; (80200a8 <xTimerCreateTimerTask+0x70>)
 8020048:	681b      	ldr	r3, [r3, #0]
 802004a:	2b00      	cmp	r3, #0
 802004c:	d020      	beq.n	8020090 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802004e:	2300      	movs	r3, #0
 8020050:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8020052:	2300      	movs	r3, #0
 8020054:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8020056:	463a      	mov	r2, r7
 8020058:	1d39      	adds	r1, r7, #4
 802005a:	f107 0308 	add.w	r3, r7, #8
 802005e:	4618      	mov	r0, r3
 8020060:	f7fe fc44 	bl	801e8ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8020064:	6839      	ldr	r1, [r7, #0]
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	68ba      	ldr	r2, [r7, #8]
 802006a:	9202      	str	r2, [sp, #8]
 802006c:	9301      	str	r3, [sp, #4]
 802006e:	2302      	movs	r3, #2
 8020070:	9300      	str	r3, [sp, #0]
 8020072:	2300      	movs	r3, #0
 8020074:	460a      	mov	r2, r1
 8020076:	490d      	ldr	r1, [pc, #52]	; (80200ac <xTimerCreateTimerTask+0x74>)
 8020078:	480d      	ldr	r0, [pc, #52]	; (80200b0 <xTimerCreateTimerTask+0x78>)
 802007a:	f7ff f931 	bl	801f2e0 <xTaskCreateStatic>
 802007e:	4603      	mov	r3, r0
 8020080:	4a0c      	ldr	r2, [pc, #48]	; (80200b4 <xTimerCreateTimerTask+0x7c>)
 8020082:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8020084:	4b0b      	ldr	r3, [pc, #44]	; (80200b4 <xTimerCreateTimerTask+0x7c>)
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	2b00      	cmp	r3, #0
 802008a:	d001      	beq.n	8020090 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 802008c:	2301      	movs	r3, #1
 802008e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8020090:	68fb      	ldr	r3, [r7, #12]
 8020092:	2b00      	cmp	r3, #0
 8020094:	d102      	bne.n	802009c <xTimerCreateTimerTask+0x64>
 8020096:	f000 fc5f 	bl	8020958 <ulSetInterruptMask>
 802009a:	e7fe      	b.n	802009a <xTimerCreateTimerTask+0x62>
	return xReturn;
 802009c:	68fb      	ldr	r3, [r7, #12]
}
 802009e:	4618      	mov	r0, r3
 80200a0:	3710      	adds	r7, #16
 80200a2:	46bd      	mov	sp, r7
 80200a4:	bd80      	pop	{r7, pc}
 80200a6:	bf00      	nop
 80200a8:	20001bfc 	.word	0x20001bfc
 80200ac:	080258a4 	.word	0x080258a4
 80200b0:	080201cd 	.word	0x080201cd
 80200b4:	20001c00 	.word	0x20001c00

080200b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80200b8:	b580      	push	{r7, lr}
 80200ba:	b08a      	sub	sp, #40	; 0x28
 80200bc:	af00      	add	r7, sp, #0
 80200be:	60f8      	str	r0, [r7, #12]
 80200c0:	60b9      	str	r1, [r7, #8]
 80200c2:	607a      	str	r2, [r7, #4]
 80200c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80200c6:	2300      	movs	r3, #0
 80200c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80200ca:	68fb      	ldr	r3, [r7, #12]
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d102      	bne.n	80200d6 <xTimerGenericCommand+0x1e>
 80200d0:	f000 fc42 	bl	8020958 <ulSetInterruptMask>
 80200d4:	e7fe      	b.n	80200d4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80200d6:	4b1a      	ldr	r3, [pc, #104]	; (8020140 <xTimerGenericCommand+0x88>)
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	2b00      	cmp	r3, #0
 80200dc:	d02a      	beq.n	8020134 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80200de:	68bb      	ldr	r3, [r7, #8]
 80200e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80200e6:	68fb      	ldr	r3, [r7, #12]
 80200e8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80200ea:	68bb      	ldr	r3, [r7, #8]
 80200ec:	2b05      	cmp	r3, #5
 80200ee:	dc18      	bgt.n	8020122 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80200f0:	f7ff fed2 	bl	801fe98 <xTaskGetSchedulerState>
 80200f4:	4603      	mov	r3, r0
 80200f6:	2b02      	cmp	r3, #2
 80200f8:	d109      	bne.n	802010e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80200fa:	4b11      	ldr	r3, [pc, #68]	; (8020140 <xTimerGenericCommand+0x88>)
 80200fc:	6818      	ldr	r0, [r3, #0]
 80200fe:	f107 0114 	add.w	r1, r7, #20
 8020102:	2300      	movs	r3, #0
 8020104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020106:	f7fe fd8a 	bl	801ec1e <xQueueGenericSend>
 802010a:	6278      	str	r0, [r7, #36]	; 0x24
 802010c:	e012      	b.n	8020134 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 802010e:	4b0c      	ldr	r3, [pc, #48]	; (8020140 <xTimerGenericCommand+0x88>)
 8020110:	6818      	ldr	r0, [r3, #0]
 8020112:	f107 0114 	add.w	r1, r7, #20
 8020116:	2300      	movs	r3, #0
 8020118:	2200      	movs	r2, #0
 802011a:	f7fe fd80 	bl	801ec1e <xQueueGenericSend>
 802011e:	6278      	str	r0, [r7, #36]	; 0x24
 8020120:	e008      	b.n	8020134 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8020122:	4b07      	ldr	r3, [pc, #28]	; (8020140 <xTimerGenericCommand+0x88>)
 8020124:	6818      	ldr	r0, [r3, #0]
 8020126:	f107 0114 	add.w	r1, r7, #20
 802012a:	2300      	movs	r3, #0
 802012c:	683a      	ldr	r2, [r7, #0]
 802012e:	f7fe fe3f 	bl	801edb0 <xQueueGenericSendFromISR>
 8020132:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8020134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020136:	4618      	mov	r0, r3
 8020138:	3728      	adds	r7, #40	; 0x28
 802013a:	46bd      	mov	sp, r7
 802013c:	bd80      	pop	{r7, pc}
 802013e:	bf00      	nop
 8020140:	20001bfc 	.word	0x20001bfc

08020144 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8020144:	b580      	push	{r7, lr}
 8020146:	b086      	sub	sp, #24
 8020148:	af02      	add	r7, sp, #8
 802014a:	6078      	str	r0, [r7, #4]
 802014c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802014e:	4b1e      	ldr	r3, [pc, #120]	; (80201c8 <prvProcessExpiredTimer+0x84>)
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	68db      	ldr	r3, [r3, #12]
 8020154:	68db      	ldr	r3, [r3, #12]
 8020156:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	3304      	adds	r3, #4
 802015c:	4618      	mov	r0, r3
 802015e:	f7fe fc69 	bl	801ea34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020168:	f003 0304 	and.w	r3, r3, #4
 802016c:	2b00      	cmp	r3, #0
 802016e:	d01a      	beq.n	80201a6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8020170:	68fb      	ldr	r3, [r7, #12]
 8020172:	699a      	ldr	r2, [r3, #24]
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	18d1      	adds	r1, r2, r3
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	683a      	ldr	r2, [r7, #0]
 802017c:	68f8      	ldr	r0, [r7, #12]
 802017e:	f000 f8c1 	bl	8020304 <prvInsertTimerInActiveList>
 8020182:	4603      	mov	r3, r0
 8020184:	2b00      	cmp	r3, #0
 8020186:	d017      	beq.n	80201b8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020188:	2300      	movs	r3, #0
 802018a:	9300      	str	r3, [sp, #0]
 802018c:	2300      	movs	r3, #0
 802018e:	687a      	ldr	r2, [r7, #4]
 8020190:	2100      	movs	r1, #0
 8020192:	68f8      	ldr	r0, [r7, #12]
 8020194:	f7ff ff90 	bl	80200b8 <xTimerGenericCommand>
 8020198:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 802019a:	68bb      	ldr	r3, [r7, #8]
 802019c:	2b00      	cmp	r3, #0
 802019e:	d10b      	bne.n	80201b8 <prvProcessExpiredTimer+0x74>
 80201a0:	f000 fbda 	bl	8020958 <ulSetInterruptMask>
 80201a4:	e7fe      	b.n	80201a4 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80201a6:	68fb      	ldr	r3, [r7, #12]
 80201a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80201ac:	f023 0301 	bic.w	r3, r3, #1
 80201b0:	b2da      	uxtb	r2, r3
 80201b2:	68fb      	ldr	r3, [r7, #12]
 80201b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80201b8:	68fb      	ldr	r3, [r7, #12]
 80201ba:	6a1b      	ldr	r3, [r3, #32]
 80201bc:	68f8      	ldr	r0, [r7, #12]
 80201be:	4798      	blx	r3
}
 80201c0:	bf00      	nop
 80201c2:	3710      	adds	r7, #16
 80201c4:	46bd      	mov	sp, r7
 80201c6:	bd80      	pop	{r7, pc}
 80201c8:	20001bf4 	.word	0x20001bf4

080201cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80201cc:	b580      	push	{r7, lr}
 80201ce:	b084      	sub	sp, #16
 80201d0:	af00      	add	r7, sp, #0
 80201d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80201d4:	f107 0308 	add.w	r3, r7, #8
 80201d8:	4618      	mov	r0, r3
 80201da:	f000 f84f 	bl	802027c <prvGetNextExpireTime>
 80201de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80201e0:	68bb      	ldr	r3, [r7, #8]
 80201e2:	4619      	mov	r1, r3
 80201e4:	68f8      	ldr	r0, [r7, #12]
 80201e6:	f000 f803 	bl	80201f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80201ea:	f000 f8cd 	bl	8020388 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80201ee:	e7f1      	b.n	80201d4 <prvTimerTask+0x8>

080201f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80201f0:	b580      	push	{r7, lr}
 80201f2:	b084      	sub	sp, #16
 80201f4:	af00      	add	r7, sp, #0
 80201f6:	6078      	str	r0, [r7, #4]
 80201f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80201fa:	f7ff fac5 	bl	801f788 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80201fe:	f107 0308 	add.w	r3, r7, #8
 8020202:	4618      	mov	r0, r3
 8020204:	f000 f85e 	bl	80202c4 <prvSampleTimeNow>
 8020208:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802020a:	68bb      	ldr	r3, [r7, #8]
 802020c:	2b00      	cmp	r3, #0
 802020e:	d12a      	bne.n	8020266 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8020210:	683b      	ldr	r3, [r7, #0]
 8020212:	2b00      	cmp	r3, #0
 8020214:	d10a      	bne.n	802022c <prvProcessTimerOrBlockTask+0x3c>
 8020216:	687a      	ldr	r2, [r7, #4]
 8020218:	68fb      	ldr	r3, [r7, #12]
 802021a:	429a      	cmp	r2, r3
 802021c:	d806      	bhi.n	802022c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802021e:	f7ff fac1 	bl	801f7a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8020222:	68f9      	ldr	r1, [r7, #12]
 8020224:	6878      	ldr	r0, [r7, #4]
 8020226:	f7ff ff8d 	bl	8020144 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 802022a:	e01e      	b.n	802026a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 802022c:	683b      	ldr	r3, [r7, #0]
 802022e:	2b00      	cmp	r3, #0
 8020230:	d008      	beq.n	8020244 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8020232:	4b10      	ldr	r3, [pc, #64]	; (8020274 <prvProcessTimerOrBlockTask+0x84>)
 8020234:	681b      	ldr	r3, [r3, #0]
 8020236:	681b      	ldr	r3, [r3, #0]
 8020238:	2b00      	cmp	r3, #0
 802023a:	d101      	bne.n	8020240 <prvProcessTimerOrBlockTask+0x50>
 802023c:	2301      	movs	r3, #1
 802023e:	e000      	b.n	8020242 <prvProcessTimerOrBlockTask+0x52>
 8020240:	2300      	movs	r3, #0
 8020242:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8020244:	4b0c      	ldr	r3, [pc, #48]	; (8020278 <prvProcessTimerOrBlockTask+0x88>)
 8020246:	6818      	ldr	r0, [r3, #0]
 8020248:	687a      	ldr	r2, [r7, #4]
 802024a:	68fb      	ldr	r3, [r7, #12]
 802024c:	1ad3      	subs	r3, r2, r3
 802024e:	683a      	ldr	r2, [r7, #0]
 8020250:	4619      	mov	r1, r3
 8020252:	f7ff f811 	bl	801f278 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8020256:	f7ff faa5 	bl	801f7a4 <xTaskResumeAll>
 802025a:	4603      	mov	r3, r0
 802025c:	2b00      	cmp	r3, #0
 802025e:	d104      	bne.n	802026a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8020260:	f000 fa36 	bl	80206d0 <vPortYield>
}
 8020264:	e001      	b.n	802026a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8020266:	f7ff fa9d 	bl	801f7a4 <xTaskResumeAll>
}
 802026a:	bf00      	nop
 802026c:	3710      	adds	r7, #16
 802026e:	46bd      	mov	sp, r7
 8020270:	bd80      	pop	{r7, pc}
 8020272:	bf00      	nop
 8020274:	20001bf8 	.word	0x20001bf8
 8020278:	20001bfc 	.word	0x20001bfc

0802027c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 802027c:	b480      	push	{r7}
 802027e:	b085      	sub	sp, #20
 8020280:	af00      	add	r7, sp, #0
 8020282:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8020284:	4b0e      	ldr	r3, [pc, #56]	; (80202c0 <prvGetNextExpireTime+0x44>)
 8020286:	681b      	ldr	r3, [r3, #0]
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	2b00      	cmp	r3, #0
 802028c:	d101      	bne.n	8020292 <prvGetNextExpireTime+0x16>
 802028e:	2201      	movs	r2, #1
 8020290:	e000      	b.n	8020294 <prvGetNextExpireTime+0x18>
 8020292:	2200      	movs	r2, #0
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8020298:	687b      	ldr	r3, [r7, #4]
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	2b00      	cmp	r3, #0
 802029e:	d105      	bne.n	80202ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80202a0:	4b07      	ldr	r3, [pc, #28]	; (80202c0 <prvGetNextExpireTime+0x44>)
 80202a2:	681b      	ldr	r3, [r3, #0]
 80202a4:	68db      	ldr	r3, [r3, #12]
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	60fb      	str	r3, [r7, #12]
 80202aa:	e001      	b.n	80202b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80202ac:	2300      	movs	r3, #0
 80202ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80202b0:	68fb      	ldr	r3, [r7, #12]
}
 80202b2:	4618      	mov	r0, r3
 80202b4:	3714      	adds	r7, #20
 80202b6:	46bd      	mov	sp, r7
 80202b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202bc:	4770      	bx	lr
 80202be:	bf00      	nop
 80202c0:	20001bf4 	.word	0x20001bf4

080202c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80202c4:	b580      	push	{r7, lr}
 80202c6:	b084      	sub	sp, #16
 80202c8:	af00      	add	r7, sp, #0
 80202ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80202cc:	f7ff faf8 	bl	801f8c0 <xTaskGetTickCount>
 80202d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80202d2:	4b0b      	ldr	r3, [pc, #44]	; (8020300 <prvSampleTimeNow+0x3c>)
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	68fa      	ldr	r2, [r7, #12]
 80202d8:	429a      	cmp	r2, r3
 80202da:	d205      	bcs.n	80202e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80202dc:	f000 f91e 	bl	802051c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	2201      	movs	r2, #1
 80202e4:	601a      	str	r2, [r3, #0]
 80202e6:	e002      	b.n	80202ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	2200      	movs	r2, #0
 80202ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80202ee:	4a04      	ldr	r2, [pc, #16]	; (8020300 <prvSampleTimeNow+0x3c>)
 80202f0:	68fb      	ldr	r3, [r7, #12]
 80202f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80202f4:	68fb      	ldr	r3, [r7, #12]
}
 80202f6:	4618      	mov	r0, r3
 80202f8:	3710      	adds	r7, #16
 80202fa:	46bd      	mov	sp, r7
 80202fc:	bd80      	pop	{r7, pc}
 80202fe:	bf00      	nop
 8020300:	20001c04 	.word	0x20001c04

08020304 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8020304:	b580      	push	{r7, lr}
 8020306:	b086      	sub	sp, #24
 8020308:	af00      	add	r7, sp, #0
 802030a:	60f8      	str	r0, [r7, #12]
 802030c:	60b9      	str	r1, [r7, #8]
 802030e:	607a      	str	r2, [r7, #4]
 8020310:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8020312:	2300      	movs	r3, #0
 8020314:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	68ba      	ldr	r2, [r7, #8]
 802031a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802031c:	68fb      	ldr	r3, [r7, #12]
 802031e:	68fa      	ldr	r2, [r7, #12]
 8020320:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8020322:	68ba      	ldr	r2, [r7, #8]
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	429a      	cmp	r2, r3
 8020328:	d812      	bhi.n	8020350 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802032a:	687a      	ldr	r2, [r7, #4]
 802032c:	683b      	ldr	r3, [r7, #0]
 802032e:	1ad2      	subs	r2, r2, r3
 8020330:	68fb      	ldr	r3, [r7, #12]
 8020332:	699b      	ldr	r3, [r3, #24]
 8020334:	429a      	cmp	r2, r3
 8020336:	d302      	bcc.n	802033e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8020338:	2301      	movs	r3, #1
 802033a:	617b      	str	r3, [r7, #20]
 802033c:	e01b      	b.n	8020376 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802033e:	4b10      	ldr	r3, [pc, #64]	; (8020380 <prvInsertTimerInActiveList+0x7c>)
 8020340:	681a      	ldr	r2, [r3, #0]
 8020342:	68fb      	ldr	r3, [r7, #12]
 8020344:	3304      	adds	r3, #4
 8020346:	4619      	mov	r1, r3
 8020348:	4610      	mov	r0, r2
 802034a:	f7fe fb3a 	bl	801e9c2 <vListInsert>
 802034e:	e012      	b.n	8020376 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8020350:	687a      	ldr	r2, [r7, #4]
 8020352:	683b      	ldr	r3, [r7, #0]
 8020354:	429a      	cmp	r2, r3
 8020356:	d206      	bcs.n	8020366 <prvInsertTimerInActiveList+0x62>
 8020358:	68ba      	ldr	r2, [r7, #8]
 802035a:	683b      	ldr	r3, [r7, #0]
 802035c:	429a      	cmp	r2, r3
 802035e:	d302      	bcc.n	8020366 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8020360:	2301      	movs	r3, #1
 8020362:	617b      	str	r3, [r7, #20]
 8020364:	e007      	b.n	8020376 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8020366:	4b07      	ldr	r3, [pc, #28]	; (8020384 <prvInsertTimerInActiveList+0x80>)
 8020368:	681a      	ldr	r2, [r3, #0]
 802036a:	68fb      	ldr	r3, [r7, #12]
 802036c:	3304      	adds	r3, #4
 802036e:	4619      	mov	r1, r3
 8020370:	4610      	mov	r0, r2
 8020372:	f7fe fb26 	bl	801e9c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8020376:	697b      	ldr	r3, [r7, #20]
}
 8020378:	4618      	mov	r0, r3
 802037a:	3718      	adds	r7, #24
 802037c:	46bd      	mov	sp, r7
 802037e:	bd80      	pop	{r7, pc}
 8020380:	20001bf8 	.word	0x20001bf8
 8020384:	20001bf4 	.word	0x20001bf4

08020388 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8020388:	b580      	push	{r7, lr}
 802038a:	b08c      	sub	sp, #48	; 0x30
 802038c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802038e:	e0b2      	b.n	80204f6 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8020390:	68bb      	ldr	r3, [r7, #8]
 8020392:	2b00      	cmp	r3, #0
 8020394:	da11      	bge.n	80203ba <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8020396:	f107 0308 	add.w	r3, r7, #8
 802039a:	3304      	adds	r3, #4
 802039c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802039e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d102      	bne.n	80203aa <prvProcessReceivedCommands+0x22>
 80203a4:	f000 fad8 	bl	8020958 <ulSetInterruptMask>
 80203a8:	e7fe      	b.n	80203a8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80203aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203ac:	681b      	ldr	r3, [r3, #0]
 80203ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80203b0:	6850      	ldr	r0, [r2, #4]
 80203b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80203b4:	6892      	ldr	r2, [r2, #8]
 80203b6:	4611      	mov	r1, r2
 80203b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80203ba:	68bb      	ldr	r3, [r7, #8]
 80203bc:	2b00      	cmp	r3, #0
 80203be:	f2c0 809a 	blt.w	80204f6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80203c2:	693b      	ldr	r3, [r7, #16]
 80203c4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80203c6:	6a3b      	ldr	r3, [r7, #32]
 80203c8:	695b      	ldr	r3, [r3, #20]
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d004      	beq.n	80203d8 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80203ce:	6a3b      	ldr	r3, [r7, #32]
 80203d0:	3304      	adds	r3, #4
 80203d2:	4618      	mov	r0, r3
 80203d4:	f7fe fb2e 	bl	801ea34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80203d8:	1d3b      	adds	r3, r7, #4
 80203da:	4618      	mov	r0, r3
 80203dc:	f7ff ff72 	bl	80202c4 <prvSampleTimeNow>
 80203e0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80203e2:	68bb      	ldr	r3, [r7, #8]
 80203e4:	2b09      	cmp	r3, #9
 80203e6:	f200 8085 	bhi.w	80204f4 <prvProcessReceivedCommands+0x16c>
 80203ea:	a201      	add	r2, pc, #4	; (adr r2, 80203f0 <prvProcessReceivedCommands+0x68>)
 80203ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203f0:	08020419 	.word	0x08020419
 80203f4:	08020419 	.word	0x08020419
 80203f8:	08020419 	.word	0x08020419
 80203fc:	0802047d 	.word	0x0802047d
 8020400:	08020491 	.word	0x08020491
 8020404:	080204cb 	.word	0x080204cb
 8020408:	08020419 	.word	0x08020419
 802040c:	08020419 	.word	0x08020419
 8020410:	0802047d 	.word	0x0802047d
 8020414:	08020491 	.word	0x08020491
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8020418:	6a3b      	ldr	r3, [r7, #32]
 802041a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802041e:	f043 0301 	orr.w	r3, r3, #1
 8020422:	b2da      	uxtb	r2, r3
 8020424:	6a3b      	ldr	r3, [r7, #32]
 8020426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802042a:	68fa      	ldr	r2, [r7, #12]
 802042c:	6a3b      	ldr	r3, [r7, #32]
 802042e:	699b      	ldr	r3, [r3, #24]
 8020430:	18d1      	adds	r1, r2, r3
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	69fa      	ldr	r2, [r7, #28]
 8020436:	6a38      	ldr	r0, [r7, #32]
 8020438:	f7ff ff64 	bl	8020304 <prvInsertTimerInActiveList>
 802043c:	4603      	mov	r3, r0
 802043e:	2b00      	cmp	r3, #0
 8020440:	d059      	beq.n	80204f6 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020442:	6a3b      	ldr	r3, [r7, #32]
 8020444:	6a1b      	ldr	r3, [r3, #32]
 8020446:	6a38      	ldr	r0, [r7, #32]
 8020448:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802044a:	6a3b      	ldr	r3, [r7, #32]
 802044c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020450:	f003 0304 	and.w	r3, r3, #4
 8020454:	2b00      	cmp	r3, #0
 8020456:	d04e      	beq.n	80204f6 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8020458:	68fa      	ldr	r2, [r7, #12]
 802045a:	6a3b      	ldr	r3, [r7, #32]
 802045c:	699b      	ldr	r3, [r3, #24]
 802045e:	441a      	add	r2, r3
 8020460:	2300      	movs	r3, #0
 8020462:	9300      	str	r3, [sp, #0]
 8020464:	2300      	movs	r3, #0
 8020466:	2100      	movs	r1, #0
 8020468:	6a38      	ldr	r0, [r7, #32]
 802046a:	f7ff fe25 	bl	80200b8 <xTimerGenericCommand>
 802046e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8020470:	69bb      	ldr	r3, [r7, #24]
 8020472:	2b00      	cmp	r3, #0
 8020474:	d13f      	bne.n	80204f6 <prvProcessReceivedCommands+0x16e>
 8020476:	f000 fa6f 	bl	8020958 <ulSetInterruptMask>
 802047a:	e7fe      	b.n	802047a <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802047c:	6a3b      	ldr	r3, [r7, #32]
 802047e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020482:	f023 0301 	bic.w	r3, r3, #1
 8020486:	b2da      	uxtb	r2, r3
 8020488:	6a3b      	ldr	r3, [r7, #32]
 802048a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802048e:	e032      	b.n	80204f6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8020490:	6a3b      	ldr	r3, [r7, #32]
 8020492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020496:	f043 0301 	orr.w	r3, r3, #1
 802049a:	b2da      	uxtb	r2, r3
 802049c:	6a3b      	ldr	r3, [r7, #32]
 802049e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80204a2:	68fa      	ldr	r2, [r7, #12]
 80204a4:	6a3b      	ldr	r3, [r7, #32]
 80204a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80204a8:	6a3b      	ldr	r3, [r7, #32]
 80204aa:	699b      	ldr	r3, [r3, #24]
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d102      	bne.n	80204b6 <prvProcessReceivedCommands+0x12e>
 80204b0:	f000 fa52 	bl	8020958 <ulSetInterruptMask>
 80204b4:	e7fe      	b.n	80204b4 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80204b6:	6a3b      	ldr	r3, [r7, #32]
 80204b8:	699a      	ldr	r2, [r3, #24]
 80204ba:	69fb      	ldr	r3, [r7, #28]
 80204bc:	18d1      	adds	r1, r2, r3
 80204be:	69fb      	ldr	r3, [r7, #28]
 80204c0:	69fa      	ldr	r2, [r7, #28]
 80204c2:	6a38      	ldr	r0, [r7, #32]
 80204c4:	f7ff ff1e 	bl	8020304 <prvInsertTimerInActiveList>
					break;
 80204c8:	e015      	b.n	80204f6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80204ca:	6a3b      	ldr	r3, [r7, #32]
 80204cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80204d0:	f003 0302 	and.w	r3, r3, #2
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d103      	bne.n	80204e0 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 80204d8:	6a38      	ldr	r0, [r7, #32]
 80204da:	f000 fb51 	bl	8020b80 <vPortFree>
 80204de:	e00a      	b.n	80204f6 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80204e0:	6a3b      	ldr	r3, [r7, #32]
 80204e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80204e6:	f023 0301 	bic.w	r3, r3, #1
 80204ea:	b2da      	uxtb	r2, r3
 80204ec:	6a3b      	ldr	r3, [r7, #32]
 80204ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80204f2:	e000      	b.n	80204f6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80204f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80204f6:	4b08      	ldr	r3, [pc, #32]	; (8020518 <prvProcessReceivedCommands+0x190>)
 80204f8:	681b      	ldr	r3, [r3, #0]
 80204fa:	f107 0108 	add.w	r1, r7, #8
 80204fe:	2200      	movs	r2, #0
 8020500:	4618      	mov	r0, r3
 8020502:	f7fe fcc6 	bl	801ee92 <xQueueReceive>
 8020506:	4603      	mov	r3, r0
 8020508:	2b00      	cmp	r3, #0
 802050a:	f47f af41 	bne.w	8020390 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 802050e:	bf00      	nop
 8020510:	bf00      	nop
 8020512:	3728      	adds	r7, #40	; 0x28
 8020514:	46bd      	mov	sp, r7
 8020516:	bd80      	pop	{r7, pc}
 8020518:	20001bfc 	.word	0x20001bfc

0802051c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802051c:	b580      	push	{r7, lr}
 802051e:	b088      	sub	sp, #32
 8020520:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8020522:	e040      	b.n	80205a6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020524:	4b29      	ldr	r3, [pc, #164]	; (80205cc <prvSwitchTimerLists+0xb0>)
 8020526:	681b      	ldr	r3, [r3, #0]
 8020528:	68db      	ldr	r3, [r3, #12]
 802052a:	681b      	ldr	r3, [r3, #0]
 802052c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802052e:	4b27      	ldr	r3, [pc, #156]	; (80205cc <prvSwitchTimerLists+0xb0>)
 8020530:	681b      	ldr	r3, [r3, #0]
 8020532:	68db      	ldr	r3, [r3, #12]
 8020534:	68db      	ldr	r3, [r3, #12]
 8020536:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	3304      	adds	r3, #4
 802053c:	4618      	mov	r0, r3
 802053e:	f7fe fa79 	bl	801ea34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020542:	68fb      	ldr	r3, [r7, #12]
 8020544:	6a1b      	ldr	r3, [r3, #32]
 8020546:	68f8      	ldr	r0, [r7, #12]
 8020548:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802054a:	68fb      	ldr	r3, [r7, #12]
 802054c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020550:	f003 0304 	and.w	r3, r3, #4
 8020554:	2b00      	cmp	r3, #0
 8020556:	d026      	beq.n	80205a6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8020558:	68fb      	ldr	r3, [r7, #12]
 802055a:	699b      	ldr	r3, [r3, #24]
 802055c:	693a      	ldr	r2, [r7, #16]
 802055e:	4413      	add	r3, r2
 8020560:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8020562:	68ba      	ldr	r2, [r7, #8]
 8020564:	693b      	ldr	r3, [r7, #16]
 8020566:	429a      	cmp	r2, r3
 8020568:	d90e      	bls.n	8020588 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802056a:	68fb      	ldr	r3, [r7, #12]
 802056c:	68ba      	ldr	r2, [r7, #8]
 802056e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8020570:	68fb      	ldr	r3, [r7, #12]
 8020572:	68fa      	ldr	r2, [r7, #12]
 8020574:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8020576:	4b15      	ldr	r3, [pc, #84]	; (80205cc <prvSwitchTimerLists+0xb0>)
 8020578:	681a      	ldr	r2, [r3, #0]
 802057a:	68fb      	ldr	r3, [r7, #12]
 802057c:	3304      	adds	r3, #4
 802057e:	4619      	mov	r1, r3
 8020580:	4610      	mov	r0, r2
 8020582:	f7fe fa1e 	bl	801e9c2 <vListInsert>
 8020586:	e00e      	b.n	80205a6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020588:	2300      	movs	r3, #0
 802058a:	9300      	str	r3, [sp, #0]
 802058c:	2300      	movs	r3, #0
 802058e:	693a      	ldr	r2, [r7, #16]
 8020590:	2100      	movs	r1, #0
 8020592:	68f8      	ldr	r0, [r7, #12]
 8020594:	f7ff fd90 	bl	80200b8 <xTimerGenericCommand>
 8020598:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	2b00      	cmp	r3, #0
 802059e:	d102      	bne.n	80205a6 <prvSwitchTimerLists+0x8a>
 80205a0:	f000 f9da 	bl	8020958 <ulSetInterruptMask>
 80205a4:	e7fe      	b.n	80205a4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80205a6:	4b09      	ldr	r3, [pc, #36]	; (80205cc <prvSwitchTimerLists+0xb0>)
 80205a8:	681b      	ldr	r3, [r3, #0]
 80205aa:	681b      	ldr	r3, [r3, #0]
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d1b9      	bne.n	8020524 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80205b0:	4b06      	ldr	r3, [pc, #24]	; (80205cc <prvSwitchTimerLists+0xb0>)
 80205b2:	681b      	ldr	r3, [r3, #0]
 80205b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80205b6:	4b06      	ldr	r3, [pc, #24]	; (80205d0 <prvSwitchTimerLists+0xb4>)
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	4a04      	ldr	r2, [pc, #16]	; (80205cc <prvSwitchTimerLists+0xb0>)
 80205bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80205be:	4a04      	ldr	r2, [pc, #16]	; (80205d0 <prvSwitchTimerLists+0xb4>)
 80205c0:	697b      	ldr	r3, [r7, #20]
 80205c2:	6013      	str	r3, [r2, #0]
}
 80205c4:	bf00      	nop
 80205c6:	3718      	adds	r7, #24
 80205c8:	46bd      	mov	sp, r7
 80205ca:	bd80      	pop	{r7, pc}
 80205cc:	20001bf4 	.word	0x20001bf4
 80205d0:	20001bf8 	.word	0x20001bf8

080205d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80205d4:	b580      	push	{r7, lr}
 80205d6:	b082      	sub	sp, #8
 80205d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80205da:	f000 f88b 	bl	80206f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80205de:	4b15      	ldr	r3, [pc, #84]	; (8020634 <prvCheckForValidListAndQueue+0x60>)
 80205e0:	681b      	ldr	r3, [r3, #0]
 80205e2:	2b00      	cmp	r3, #0
 80205e4:	d120      	bne.n	8020628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80205e6:	4814      	ldr	r0, [pc, #80]	; (8020638 <prvCheckForValidListAndQueue+0x64>)
 80205e8:	f7fe f99a 	bl	801e920 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80205ec:	4813      	ldr	r0, [pc, #76]	; (802063c <prvCheckForValidListAndQueue+0x68>)
 80205ee:	f7fe f997 	bl	801e920 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80205f2:	4b13      	ldr	r3, [pc, #76]	; (8020640 <prvCheckForValidListAndQueue+0x6c>)
 80205f4:	4a10      	ldr	r2, [pc, #64]	; (8020638 <prvCheckForValidListAndQueue+0x64>)
 80205f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80205f8:	4b12      	ldr	r3, [pc, #72]	; (8020644 <prvCheckForValidListAndQueue+0x70>)
 80205fa:	4a10      	ldr	r2, [pc, #64]	; (802063c <prvCheckForValidListAndQueue+0x68>)
 80205fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80205fe:	2300      	movs	r3, #0
 8020600:	9300      	str	r3, [sp, #0]
 8020602:	4b11      	ldr	r3, [pc, #68]	; (8020648 <prvCheckForValidListAndQueue+0x74>)
 8020604:	4a11      	ldr	r2, [pc, #68]	; (802064c <prvCheckForValidListAndQueue+0x78>)
 8020606:	2110      	movs	r1, #16
 8020608:	200a      	movs	r0, #10
 802060a:	f7fe fa95 	bl	801eb38 <xQueueGenericCreateStatic>
 802060e:	4603      	mov	r3, r0
 8020610:	4a08      	ldr	r2, [pc, #32]	; (8020634 <prvCheckForValidListAndQueue+0x60>)
 8020612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8020614:	4b07      	ldr	r3, [pc, #28]	; (8020634 <prvCheckForValidListAndQueue+0x60>)
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	2b00      	cmp	r3, #0
 802061a:	d005      	beq.n	8020628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802061c:	4b05      	ldr	r3, [pc, #20]	; (8020634 <prvCheckForValidListAndQueue+0x60>)
 802061e:	681b      	ldr	r3, [r3, #0]
 8020620:	490b      	ldr	r1, [pc, #44]	; (8020650 <prvCheckForValidListAndQueue+0x7c>)
 8020622:	4618      	mov	r0, r3
 8020624:	f7fe fdfe 	bl	801f224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8020628:	f000 f876 	bl	8020718 <vPortExitCritical>
}
 802062c:	bf00      	nop
 802062e:	46bd      	mov	sp, r7
 8020630:	bd80      	pop	{r7, pc}
 8020632:	bf00      	nop
 8020634:	20001bfc 	.word	0x20001bfc
 8020638:	20001bcc 	.word	0x20001bcc
 802063c:	20001be0 	.word	0x20001be0
 8020640:	20001bf4 	.word	0x20001bf4
 8020644:	20001bf8 	.word	0x20001bf8
 8020648:	20001ca8 	.word	0x20001ca8
 802064c:	20001c08 	.word	0x20001c08
 8020650:	080258ac 	.word	0x080258ac

08020654 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8020654:	b480      	push	{r7}
 8020656:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8020658:	4b0b      	ldr	r3, [pc, #44]	; (8020688 <vPortSetupTimerInterrupt+0x34>)
 802065a:	2200      	movs	r2, #0
 802065c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 802065e:	4b0b      	ldr	r3, [pc, #44]	; (802068c <vPortSetupTimerInterrupt+0x38>)
 8020660:	2200      	movs	r2, #0
 8020662:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8020664:	4b0a      	ldr	r3, [pc, #40]	; (8020690 <vPortSetupTimerInterrupt+0x3c>)
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	4a0a      	ldr	r2, [pc, #40]	; (8020694 <vPortSetupTimerInterrupt+0x40>)
 802066a:	fba2 2303 	umull	r2, r3, r2, r3
 802066e:	099b      	lsrs	r3, r3, #6
 8020670:	4a09      	ldr	r2, [pc, #36]	; (8020698 <vPortSetupTimerInterrupt+0x44>)
 8020672:	3b01      	subs	r3, #1
 8020674:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8020676:	4b04      	ldr	r3, [pc, #16]	; (8020688 <vPortSetupTimerInterrupt+0x34>)
 8020678:	2207      	movs	r2, #7
 802067a:	601a      	str	r2, [r3, #0]
}
 802067c:	bf00      	nop
 802067e:	46bd      	mov	sp, r7
 8020680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020684:	4770      	bx	lr
 8020686:	bf00      	nop
 8020688:	e000e010 	.word	0xe000e010
 802068c:	e000e018 	.word	0xe000e018
 8020690:	20000090 	.word	0x20000090
 8020694:	10624dd3 	.word	0x10624dd3
 8020698:	e000e014 	.word	0xe000e014

0802069c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802069c:	b580      	push	{r7, lr}
 802069e:	b082      	sub	sp, #8
 80206a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80206a2:	2300      	movs	r3, #0
 80206a4:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 80206a6:	4b09      	ldr	r3, [pc, #36]	; (80206cc <prvTaskExitError+0x30>)
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80206ae:	d002      	beq.n	80206b6 <prvTaskExitError+0x1a>
 80206b0:	f000 f952 	bl	8020958 <ulSetInterruptMask>
 80206b4:	e7fe      	b.n	80206b4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 80206b6:	f000 f94f 	bl	8020958 <ulSetInterruptMask>

	while( ulDummy == 0 )
 80206ba:	bf00      	nop
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d0fc      	beq.n	80206bc <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 80206c2:	bf00      	nop
 80206c4:	bf00      	nop
 80206c6:	3708      	adds	r7, #8
 80206c8:	46bd      	mov	sp, r7
 80206ca:	bd80      	pop	{r7, pc}
 80206cc:	2000009c 	.word	0x2000009c

080206d0 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80206d0:	b480      	push	{r7}
 80206d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80206d4:	4b06      	ldr	r3, [pc, #24]	; (80206f0 <vPortYield+0x20>)
 80206d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80206da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80206dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80206e0:	f3bf 8f6f 	isb	sy
}
 80206e4:	bf00      	nop
 80206e6:	46bd      	mov	sp, r7
 80206e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206ec:	4770      	bx	lr
 80206ee:	bf00      	nop
 80206f0:	e000ed04 	.word	0xe000ed04

080206f4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80206f4:	b580      	push	{r7, lr}
 80206f6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80206f8:	f000 f92e 	bl	8020958 <ulSetInterruptMask>
	ulCriticalNesting++;
 80206fc:	4b05      	ldr	r3, [pc, #20]	; (8020714 <vPortEnterCritical+0x20>)
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	3301      	adds	r3, #1
 8020702:	4a04      	ldr	r2, [pc, #16]	; (8020714 <vPortEnterCritical+0x20>)
 8020704:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8020706:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 802070a:	f3bf 8f6f 	isb	sy
}
 802070e:	bf00      	nop
 8020710:	bd80      	pop	{r7, pc}
 8020712:	bf00      	nop
 8020714:	2000009c 	.word	0x2000009c

08020718 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8020718:	b580      	push	{r7, lr}
 802071a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 802071c:	4b0a      	ldr	r3, [pc, #40]	; (8020748 <vPortExitCritical+0x30>)
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	2b00      	cmp	r3, #0
 8020722:	d102      	bne.n	802072a <vPortExitCritical+0x12>
 8020724:	f000 f918 	bl	8020958 <ulSetInterruptMask>
 8020728:	e7fe      	b.n	8020728 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 802072a:	4b07      	ldr	r3, [pc, #28]	; (8020748 <vPortExitCritical+0x30>)
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	3b01      	subs	r3, #1
 8020730:	4a05      	ldr	r2, [pc, #20]	; (8020748 <vPortExitCritical+0x30>)
 8020732:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8020734:	4b04      	ldr	r3, [pc, #16]	; (8020748 <vPortExitCritical+0x30>)
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	2b00      	cmp	r3, #0
 802073a:	d102      	bne.n	8020742 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 802073c:	2000      	movs	r0, #0
 802073e:	f000 f918 	bl	8020972 <vClearInterruptMask>
	}
}
 8020742:	bf00      	nop
 8020744:	bd80      	pop	{r7, pc}
 8020746:	bf00      	nop
 8020748:	2000009c 	.word	0x2000009c

0802074c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 802074c:	b580      	push	{r7, lr}
 802074e:	b082      	sub	sp, #8
 8020750:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8020752:	f000 f901 	bl	8020958 <ulSetInterruptMask>
 8020756:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8020758:	f7ff f8c2 	bl	801f8e0 <xTaskIncrementTick>
 802075c:	4603      	mov	r3, r0
 802075e:	2b00      	cmp	r3, #0
 8020760:	d003      	beq.n	802076a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8020762:	4b05      	ldr	r3, [pc, #20]	; (8020778 <xPortSysTickHandler+0x2c>)
 8020764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020768:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 802076a:	6878      	ldr	r0, [r7, #4]
 802076c:	f000 f901 	bl	8020972 <vClearInterruptMask>
}
 8020770:	bf00      	nop
 8020772:	3708      	adds	r7, #8
 8020774:	46bd      	mov	sp, r7
 8020776:	bd80      	pop	{r7, pc}
 8020778:	e000ed04 	.word	0xe000ed04

0802077c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 802077c:	b580      	push	{r7, lr}
 802077e:	b084      	sub	sp, #16
 8020780:	af00      	add	r7, sp, #0
 8020782:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	699b      	ldr	r3, [r3, #24]
 8020788:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 802078a:	68fb      	ldr	r3, [r7, #12]
 802078c:	3b02      	subs	r3, #2
 802078e:	781b      	ldrb	r3, [r3, #0]
 8020790:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8020792:	7afb      	ldrb	r3, [r7, #11]
 8020794:	2b02      	cmp	r3, #2
 8020796:	d102      	bne.n	802079e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8020798:	f000 f8b2 	bl	8020900 <vRestoreContextOfFirstTask>
		}
		break;
 802079c:	e002      	b.n	80207a4 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 802079e:	f000 f8db 	bl	8020958 <ulSetInterruptMask>
 80207a2:	e7fe      	b.n	80207a2 <vPortSVCHandler_C+0x26>
		}
	}
}
 80207a4:	bf00      	nop
 80207a6:	3710      	adds	r7, #16
 80207a8:	46bd      	mov	sp, r7
 80207aa:	bd80      	pop	{r7, pc}

080207ac <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 80207ac:	b480      	push	{r7}
 80207ae:	b085      	sub	sp, #20
 80207b0:	af00      	add	r7, sp, #0
 80207b2:	60f8      	str	r0, [r7, #12]
 80207b4:	60b9      	str	r1, [r7, #8]
 80207b6:	607a      	str	r2, [r7, #4]
 80207b8:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80207ba:	68fb      	ldr	r3, [r7, #12]
 80207bc:	3b04      	subs	r3, #4
 80207be:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 80207c0:	68fb      	ldr	r3, [r7, #12]
 80207c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80207c6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80207c8:	68fb      	ldr	r3, [r7, #12]
 80207ca:	3b04      	subs	r3, #4
 80207cc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 80207ce:	687a      	ldr	r2, [r7, #4]
 80207d0:	68fb      	ldr	r3, [r7, #12]
 80207d2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	3b04      	subs	r3, #4
 80207d8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80207da:	4a38      	ldr	r2, [pc, #224]	; (80208bc <pxPortInitialiseStack+0x110>)
 80207dc:	68fb      	ldr	r3, [r7, #12]
 80207de:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80207e0:	68fb      	ldr	r3, [r7, #12]
 80207e2:	3b04      	subs	r3, #4
 80207e4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 80207e6:	68fb      	ldr	r3, [r7, #12]
 80207e8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80207ec:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80207ee:	68fb      	ldr	r3, [r7, #12]
 80207f0:	3b04      	subs	r3, #4
 80207f2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 80207f4:	68fb      	ldr	r3, [r7, #12]
 80207f6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80207fa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80207fc:	68fb      	ldr	r3, [r7, #12]
 80207fe:	3b04      	subs	r3, #4
 8020800:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8020802:	68fb      	ldr	r3, [r7, #12]
 8020804:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8020808:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 802080a:	68fb      	ldr	r3, [r7, #12]
 802080c:	3b04      	subs	r3, #4
 802080e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8020810:	68fb      	ldr	r3, [r7, #12]
 8020812:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8020816:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020818:	68fb      	ldr	r3, [r7, #12]
 802081a:	3b04      	subs	r3, #4
 802081c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 802081e:	683a      	ldr	r2, [r7, #0]
 8020820:	68fb      	ldr	r3, [r7, #12]
 8020822:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020824:	68fb      	ldr	r3, [r7, #12]
 8020826:	3b04      	subs	r3, #4
 8020828:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 802082a:	68fb      	ldr	r3, [r7, #12]
 802082c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8020830:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020832:	68fb      	ldr	r3, [r7, #12]
 8020834:	3b04      	subs	r3, #4
 8020836:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8020838:	68fb      	ldr	r3, [r7, #12]
 802083a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 802083e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020840:	68fb      	ldr	r3, [r7, #12]
 8020842:	3b04      	subs	r3, #4
 8020844:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8020846:	68fb      	ldr	r3, [r7, #12]
 8020848:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 802084c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 802084e:	68fb      	ldr	r3, [r7, #12]
 8020850:	3b04      	subs	r3, #4
 8020852:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 802085a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 802085c:	68fb      	ldr	r3, [r7, #12]
 802085e:	3b04      	subs	r3, #4
 8020860:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8020862:	68fb      	ldr	r3, [r7, #12]
 8020864:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8020868:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 802086a:	68fb      	ldr	r3, [r7, #12]
 802086c:	3b04      	subs	r3, #4
 802086e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8020870:	68fb      	ldr	r3, [r7, #12]
 8020872:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8020876:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020878:	68fb      	ldr	r3, [r7, #12]
 802087a:	3b04      	subs	r3, #4
 802087c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 802087e:	68fb      	ldr	r3, [r7, #12]
 8020880:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8020884:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020886:	68fb      	ldr	r3, [r7, #12]
 8020888:	3b04      	subs	r3, #4
 802088a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 802088c:	68fb      	ldr	r3, [r7, #12]
 802088e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8020892:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020894:	68fb      	ldr	r3, [r7, #12]
 8020896:	3b04      	subs	r3, #4
 8020898:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 802089a:	68fb      	ldr	r3, [r7, #12]
 802089c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 80208a0:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 80208a2:	68fb      	ldr	r3, [r7, #12]
 80208a4:	3b04      	subs	r3, #4
 80208a6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 80208a8:	68ba      	ldr	r2, [r7, #8]
 80208aa:	68fb      	ldr	r3, [r7, #12]
 80208ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 80208ae:	68fb      	ldr	r3, [r7, #12]
}
 80208b0:	4618      	mov	r0, r3
 80208b2:	3714      	adds	r7, #20
 80208b4:	46bd      	mov	sp, r7
 80208b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ba:	4770      	bx	lr
 80208bc:	0802069d 	.word	0x0802069d

080208c0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 80208c0:	b580      	push	{r7, lr}
 80208c2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80208c4:	4b0c      	ldr	r3, [pc, #48]	; (80208f8 <xPortStartScheduler+0x38>)
 80208c6:	681b      	ldr	r3, [r3, #0]
 80208c8:	4a0b      	ldr	r2, [pc, #44]	; (80208f8 <xPortStartScheduler+0x38>)
 80208ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80208ce:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80208d0:	4b09      	ldr	r3, [pc, #36]	; (80208f8 <xPortStartScheduler+0x38>)
 80208d2:	681b      	ldr	r3, [r3, #0]
 80208d4:	4a08      	ldr	r2, [pc, #32]	; (80208f8 <xPortStartScheduler+0x38>)
 80208d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80208da:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 80208dc:	f7ff feba 	bl	8020654 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 80208e0:	4b06      	ldr	r3, [pc, #24]	; (80208fc <xPortStartScheduler+0x3c>)
 80208e2:	2200      	movs	r2, #0
 80208e4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 80208e6:	f000 f823 	bl	8020930 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 80208ea:	f7ff f8ab 	bl	801fa44 <vTaskSwitchContext>
	prvTaskExitError();
 80208ee:	f7ff fed5 	bl	802069c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 80208f2:	2300      	movs	r3, #0
}
 80208f4:	4618      	mov	r0, r3
 80208f6:	bd80      	pop	{r7, pc}
 80208f8:	e000ed20 	.word	0xe000ed20
 80208fc:	2000009c 	.word	0x2000009c

08020900 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020900:	4a07      	ldr	r2, [pc, #28]	; (8020920 <pxCurrentTCBConst2>)
 8020902:	6811      	ldr	r1, [r2, #0]
 8020904:	6808      	ldr	r0, [r1, #0]
 8020906:	c806      	ldmia	r0!, {r1, r2}
 8020908:	f381 880b 	msr	PSPLIM, r1
 802090c:	2102      	movs	r1, #2
 802090e:	f381 8814 	msr	CONTROL, r1
 8020912:	3020      	adds	r0, #32
 8020914:	f380 8809 	msr	PSP, r0
 8020918:	f3bf 8f6f 	isb	sy
 802091c:	4710      	bx	r2
 802091e:	bf00      	nop

08020920 <pxCurrentTCBConst2>:
 8020920:	200016cc 	.word	0x200016cc
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8020924:	bf00      	nop
 8020926:	bf00      	nop
	...

08020930 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020930:	4807      	ldr	r0, [pc, #28]	; (8020950 <xVTORConst>)
 8020932:	6800      	ldr	r0, [r0, #0]
 8020934:	6800      	ldr	r0, [r0, #0]
 8020936:	f380 8808 	msr	MSP, r0
 802093a:	b662      	cpsie	i
 802093c:	b661      	cpsie	f
 802093e:	f3bf 8f4f 	dsb	sy
 8020942:	f3bf 8f6f 	isb	sy
 8020946:	df02      	svc	2
 8020948:	bf00      	nop
 802094a:	bf00      	nop
 802094c:	f3af 8000 	nop.w

08020950 <xVTORConst>:
 8020950:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8020954:	bf00      	nop
 8020956:	bf00      	nop

08020958 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020958:	f3ef 8011 	mrs	r0, BASEPRI
 802095c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8020960:	f381 8811 	msr	BASEPRI, r1
 8020964:	f3bf 8f4f 	dsb	sy
 8020968:	f3bf 8f6f 	isb	sy
 802096c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 802096e:	bf00      	nop
 8020970:	4618      	mov	r0, r3

08020972 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020972:	f380 8811 	msr	BASEPRI, r0
 8020976:	f3bf 8f4f 	dsb	sy
 802097a:	f3bf 8f6f 	isb	sy
 802097e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8020980:	bf00      	nop
	...

08020990 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020990:	f3ef 8009 	mrs	r0, PSP
 8020994:	f3ef 820b 	mrs	r2, PSPLIM
 8020998:	4673      	mov	r3, lr
 802099a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 802099e:	4a10      	ldr	r2, [pc, #64]	; (80209e0 <pxCurrentTCBConst>)
 80209a0:	6811      	ldr	r1, [r2, #0]
 80209a2:	6008      	str	r0, [r1, #0]
 80209a4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 80209a8:	f380 8811 	msr	BASEPRI, r0
 80209ac:	f3bf 8f4f 	dsb	sy
 80209b0:	f3bf 8f6f 	isb	sy
 80209b4:	f7ff f846 	bl	801fa44 <vTaskSwitchContext>
 80209b8:	f04f 0000 	mov.w	r0, #0
 80209bc:	f380 8811 	msr	BASEPRI, r0
 80209c0:	4a07      	ldr	r2, [pc, #28]	; (80209e0 <pxCurrentTCBConst>)
 80209c2:	6811      	ldr	r1, [r2, #0]
 80209c4:	6808      	ldr	r0, [r1, #0]
 80209c6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80209ca:	f382 880b 	msr	PSPLIM, r2
 80209ce:	f380 8809 	msr	PSP, r0
 80209d2:	4718      	bx	r3
 80209d4:	f3af 8000 	nop.w
 80209d8:	f3af 8000 	nop.w
 80209dc:	f3af 8000 	nop.w

080209e0 <pxCurrentTCBConst>:
 80209e0:	200016cc 	.word	0x200016cc
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 80209e4:	bf00      	nop
 80209e6:	bf00      	nop
	...

080209f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80209f0:	f01e 0f04 	tst.w	lr, #4
 80209f4:	bf0c      	ite	eq
 80209f6:	f3ef 8008 	mrseq	r0, MSP
 80209fa:	f3ef 8009 	mrsne	r0, PSP
 80209fe:	4904      	ldr	r1, [pc, #16]	; (8020a10 <svchandler_address_const>)
 8020a00:	4708      	bx	r1
 8020a02:	bf00      	nop
 8020a04:	f3af 8000 	nop.w
 8020a08:	f3af 8000 	nop.w
 8020a0c:	f3af 8000 	nop.w

08020a10 <svchandler_address_const>:
 8020a10:	0802077d 	.word	0x0802077d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8020a14:	bf00      	nop
 8020a16:	bf00      	nop

08020a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8020a18:	b580      	push	{r7, lr}
 8020a1a:	b086      	sub	sp, #24
 8020a1c:	af00      	add	r7, sp, #0
 8020a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8020a20:	2300      	movs	r3, #0
 8020a22:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8020a24:	f7fe feb0 	bl	801f788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8020a28:	4b4f      	ldr	r3, [pc, #316]	; (8020b68 <pvPortMalloc+0x150>)
 8020a2a:	681b      	ldr	r3, [r3, #0]
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d101      	bne.n	8020a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8020a30:	f000 f8f8 	bl	8020c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8020a34:	4b4d      	ldr	r3, [pc, #308]	; (8020b6c <pvPortMalloc+0x154>)
 8020a36:	681a      	ldr	r2, [r3, #0]
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	4013      	ands	r3, r2
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	f040 8083 	bne.w	8020b48 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	d015      	beq.n	8020a74 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8020a48:	2208      	movs	r2, #8
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	4413      	add	r3, r2
 8020a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8020a50:	687b      	ldr	r3, [r7, #4]
 8020a52:	f003 0307 	and.w	r3, r3, #7
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	d00c      	beq.n	8020a74 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8020a5a:	687b      	ldr	r3, [r7, #4]
 8020a5c:	f023 0307 	bic.w	r3, r3, #7
 8020a60:	3308      	adds	r3, #8
 8020a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	f003 0307 	and.w	r3, r3, #7
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	d002      	beq.n	8020a74 <pvPortMalloc+0x5c>
 8020a6e:	f7ff ff73 	bl	8020958 <ulSetInterruptMask>
 8020a72:	e7fe      	b.n	8020a72 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8020a74:	687b      	ldr	r3, [r7, #4]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d066      	beq.n	8020b48 <pvPortMalloc+0x130>
 8020a7a:	4b3d      	ldr	r3, [pc, #244]	; (8020b70 <pvPortMalloc+0x158>)
 8020a7c:	681b      	ldr	r3, [r3, #0]
 8020a7e:	687a      	ldr	r2, [r7, #4]
 8020a80:	429a      	cmp	r2, r3
 8020a82:	d861      	bhi.n	8020b48 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8020a84:	4b3b      	ldr	r3, [pc, #236]	; (8020b74 <pvPortMalloc+0x15c>)
 8020a86:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8020a88:	4b3a      	ldr	r3, [pc, #232]	; (8020b74 <pvPortMalloc+0x15c>)
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8020a8e:	e004      	b.n	8020a9a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8020a90:	697b      	ldr	r3, [r7, #20]
 8020a92:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8020a94:	697b      	ldr	r3, [r7, #20]
 8020a96:	681b      	ldr	r3, [r3, #0]
 8020a98:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8020a9a:	697b      	ldr	r3, [r7, #20]
 8020a9c:	685b      	ldr	r3, [r3, #4]
 8020a9e:	687a      	ldr	r2, [r7, #4]
 8020aa0:	429a      	cmp	r2, r3
 8020aa2:	d903      	bls.n	8020aac <pvPortMalloc+0x94>
 8020aa4:	697b      	ldr	r3, [r7, #20]
 8020aa6:	681b      	ldr	r3, [r3, #0]
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	d1f1      	bne.n	8020a90 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8020aac:	4b2e      	ldr	r3, [pc, #184]	; (8020b68 <pvPortMalloc+0x150>)
 8020aae:	681b      	ldr	r3, [r3, #0]
 8020ab0:	697a      	ldr	r2, [r7, #20]
 8020ab2:	429a      	cmp	r2, r3
 8020ab4:	d048      	beq.n	8020b48 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8020ab6:	693b      	ldr	r3, [r7, #16]
 8020ab8:	681b      	ldr	r3, [r3, #0]
 8020aba:	2208      	movs	r2, #8
 8020abc:	4413      	add	r3, r2
 8020abe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8020ac0:	697b      	ldr	r3, [r7, #20]
 8020ac2:	681a      	ldr	r2, [r3, #0]
 8020ac4:	693b      	ldr	r3, [r7, #16]
 8020ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8020ac8:	697b      	ldr	r3, [r7, #20]
 8020aca:	685a      	ldr	r2, [r3, #4]
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	1ad2      	subs	r2, r2, r3
 8020ad0:	2308      	movs	r3, #8
 8020ad2:	005b      	lsls	r3, r3, #1
 8020ad4:	429a      	cmp	r2, r3
 8020ad6:	d917      	bls.n	8020b08 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8020ad8:	697a      	ldr	r2, [r7, #20]
 8020ada:	687b      	ldr	r3, [r7, #4]
 8020adc:	4413      	add	r3, r2
 8020ade:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020ae0:	68bb      	ldr	r3, [r7, #8]
 8020ae2:	f003 0307 	and.w	r3, r3, #7
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d002      	beq.n	8020af0 <pvPortMalloc+0xd8>
 8020aea:	f7ff ff35 	bl	8020958 <ulSetInterruptMask>
 8020aee:	e7fe      	b.n	8020aee <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8020af0:	697b      	ldr	r3, [r7, #20]
 8020af2:	685a      	ldr	r2, [r3, #4]
 8020af4:	687b      	ldr	r3, [r7, #4]
 8020af6:	1ad2      	subs	r2, r2, r3
 8020af8:	68bb      	ldr	r3, [r7, #8]
 8020afa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8020afc:	697b      	ldr	r3, [r7, #20]
 8020afe:	687a      	ldr	r2, [r7, #4]
 8020b00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8020b02:	68b8      	ldr	r0, [r7, #8]
 8020b04:	f000 f8f0 	bl	8020ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8020b08:	4b19      	ldr	r3, [pc, #100]	; (8020b70 <pvPortMalloc+0x158>)
 8020b0a:	681a      	ldr	r2, [r3, #0]
 8020b0c:	697b      	ldr	r3, [r7, #20]
 8020b0e:	685b      	ldr	r3, [r3, #4]
 8020b10:	1ad3      	subs	r3, r2, r3
 8020b12:	4a17      	ldr	r2, [pc, #92]	; (8020b70 <pvPortMalloc+0x158>)
 8020b14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8020b16:	4b16      	ldr	r3, [pc, #88]	; (8020b70 <pvPortMalloc+0x158>)
 8020b18:	681a      	ldr	r2, [r3, #0]
 8020b1a:	4b17      	ldr	r3, [pc, #92]	; (8020b78 <pvPortMalloc+0x160>)
 8020b1c:	681b      	ldr	r3, [r3, #0]
 8020b1e:	429a      	cmp	r2, r3
 8020b20:	d203      	bcs.n	8020b2a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8020b22:	4b13      	ldr	r3, [pc, #76]	; (8020b70 <pvPortMalloc+0x158>)
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	4a14      	ldr	r2, [pc, #80]	; (8020b78 <pvPortMalloc+0x160>)
 8020b28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8020b2a:	697b      	ldr	r3, [r7, #20]
 8020b2c:	685a      	ldr	r2, [r3, #4]
 8020b2e:	4b0f      	ldr	r3, [pc, #60]	; (8020b6c <pvPortMalloc+0x154>)
 8020b30:	681b      	ldr	r3, [r3, #0]
 8020b32:	431a      	orrs	r2, r3
 8020b34:	697b      	ldr	r3, [r7, #20]
 8020b36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8020b38:	697b      	ldr	r3, [r7, #20]
 8020b3a:	2200      	movs	r2, #0
 8020b3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8020b3e:	4b0f      	ldr	r3, [pc, #60]	; (8020b7c <pvPortMalloc+0x164>)
 8020b40:	681b      	ldr	r3, [r3, #0]
 8020b42:	3301      	adds	r3, #1
 8020b44:	4a0d      	ldr	r2, [pc, #52]	; (8020b7c <pvPortMalloc+0x164>)
 8020b46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8020b48:	f7fe fe2c 	bl	801f7a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8020b4c:	68fb      	ldr	r3, [r7, #12]
 8020b4e:	f003 0307 	and.w	r3, r3, #7
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d002      	beq.n	8020b5c <pvPortMalloc+0x144>
 8020b56:	f7ff feff 	bl	8020958 <ulSetInterruptMask>
 8020b5a:	e7fe      	b.n	8020b5a <pvPortMalloc+0x142>
	return pvReturn;
 8020b5c:	68fb      	ldr	r3, [r7, #12]
}
 8020b5e:	4618      	mov	r0, r3
 8020b60:	3718      	adds	r7, #24
 8020b62:	46bd      	mov	sp, r7
 8020b64:	bd80      	pop	{r7, pc}
 8020b66:	bf00      	nop
 8020b68:	20005d00 	.word	0x20005d00
 8020b6c:	20005d14 	.word	0x20005d14
 8020b70:	20005d04 	.word	0x20005d04
 8020b74:	20005cf8 	.word	0x20005cf8
 8020b78:	20005d08 	.word	0x20005d08
 8020b7c:	20005d0c 	.word	0x20005d0c

08020b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8020b80:	b580      	push	{r7, lr}
 8020b82:	b084      	sub	sp, #16
 8020b84:	af00      	add	r7, sp, #0
 8020b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d03d      	beq.n	8020c0e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8020b92:	2308      	movs	r3, #8
 8020b94:	425b      	negs	r3, r3
 8020b96:	68fa      	ldr	r2, [r7, #12]
 8020b98:	4413      	add	r3, r2
 8020b9a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8020ba0:	68bb      	ldr	r3, [r7, #8]
 8020ba2:	685a      	ldr	r2, [r3, #4]
 8020ba4:	4b1c      	ldr	r3, [pc, #112]	; (8020c18 <vPortFree+0x98>)
 8020ba6:	681b      	ldr	r3, [r3, #0]
 8020ba8:	4013      	ands	r3, r2
 8020baa:	2b00      	cmp	r3, #0
 8020bac:	d102      	bne.n	8020bb4 <vPortFree+0x34>
 8020bae:	f7ff fed3 	bl	8020958 <ulSetInterruptMask>
 8020bb2:	e7fe      	b.n	8020bb2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8020bb4:	68bb      	ldr	r3, [r7, #8]
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d002      	beq.n	8020bc2 <vPortFree+0x42>
 8020bbc:	f7ff fecc 	bl	8020958 <ulSetInterruptMask>
 8020bc0:	e7fe      	b.n	8020bc0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8020bc2:	68bb      	ldr	r3, [r7, #8]
 8020bc4:	685a      	ldr	r2, [r3, #4]
 8020bc6:	4b14      	ldr	r3, [pc, #80]	; (8020c18 <vPortFree+0x98>)
 8020bc8:	681b      	ldr	r3, [r3, #0]
 8020bca:	4013      	ands	r3, r2
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d01e      	beq.n	8020c0e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8020bd0:	68bb      	ldr	r3, [r7, #8]
 8020bd2:	681b      	ldr	r3, [r3, #0]
 8020bd4:	2b00      	cmp	r3, #0
 8020bd6:	d11a      	bne.n	8020c0e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8020bd8:	68bb      	ldr	r3, [r7, #8]
 8020bda:	685a      	ldr	r2, [r3, #4]
 8020bdc:	4b0e      	ldr	r3, [pc, #56]	; (8020c18 <vPortFree+0x98>)
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	43db      	mvns	r3, r3
 8020be2:	401a      	ands	r2, r3
 8020be4:	68bb      	ldr	r3, [r7, #8]
 8020be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8020be8:	f7fe fdce 	bl	801f788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8020bec:	68bb      	ldr	r3, [r7, #8]
 8020bee:	685a      	ldr	r2, [r3, #4]
 8020bf0:	4b0a      	ldr	r3, [pc, #40]	; (8020c1c <vPortFree+0x9c>)
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	4413      	add	r3, r2
 8020bf6:	4a09      	ldr	r2, [pc, #36]	; (8020c1c <vPortFree+0x9c>)
 8020bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8020bfa:	68b8      	ldr	r0, [r7, #8]
 8020bfc:	f000 f874 	bl	8020ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8020c00:	4b07      	ldr	r3, [pc, #28]	; (8020c20 <vPortFree+0xa0>)
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	3301      	adds	r3, #1
 8020c06:	4a06      	ldr	r2, [pc, #24]	; (8020c20 <vPortFree+0xa0>)
 8020c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8020c0a:	f7fe fdcb 	bl	801f7a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8020c0e:	bf00      	nop
 8020c10:	3710      	adds	r7, #16
 8020c12:	46bd      	mov	sp, r7
 8020c14:	bd80      	pop	{r7, pc}
 8020c16:	bf00      	nop
 8020c18:	20005d14 	.word	0x20005d14
 8020c1c:	20005d04 	.word	0x20005d04
 8020c20:	20005d10 	.word	0x20005d10

08020c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8020c24:	b480      	push	{r7}
 8020c26:	b085      	sub	sp, #20
 8020c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8020c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8020c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8020c30:	4b27      	ldr	r3, [pc, #156]	; (8020cd0 <prvHeapInit+0xac>)
 8020c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8020c34:	68fb      	ldr	r3, [r7, #12]
 8020c36:	f003 0307 	and.w	r3, r3, #7
 8020c3a:	2b00      	cmp	r3, #0
 8020c3c:	d00c      	beq.n	8020c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8020c3e:	68fb      	ldr	r3, [r7, #12]
 8020c40:	3307      	adds	r3, #7
 8020c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8020c44:	68fb      	ldr	r3, [r7, #12]
 8020c46:	f023 0307 	bic.w	r3, r3, #7
 8020c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8020c4c:	68ba      	ldr	r2, [r7, #8]
 8020c4e:	68fb      	ldr	r3, [r7, #12]
 8020c50:	1ad3      	subs	r3, r2, r3
 8020c52:	4a1f      	ldr	r2, [pc, #124]	; (8020cd0 <prvHeapInit+0xac>)
 8020c54:	4413      	add	r3, r2
 8020c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8020c58:	68fb      	ldr	r3, [r7, #12]
 8020c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8020c5c:	4a1d      	ldr	r2, [pc, #116]	; (8020cd4 <prvHeapInit+0xb0>)
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8020c62:	4b1c      	ldr	r3, [pc, #112]	; (8020cd4 <prvHeapInit+0xb0>)
 8020c64:	2200      	movs	r2, #0
 8020c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8020c68:	687b      	ldr	r3, [r7, #4]
 8020c6a:	68ba      	ldr	r2, [r7, #8]
 8020c6c:	4413      	add	r3, r2
 8020c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8020c70:	2208      	movs	r2, #8
 8020c72:	68fb      	ldr	r3, [r7, #12]
 8020c74:	1a9b      	subs	r3, r3, r2
 8020c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8020c78:	68fb      	ldr	r3, [r7, #12]
 8020c7a:	f023 0307 	bic.w	r3, r3, #7
 8020c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8020c80:	68fb      	ldr	r3, [r7, #12]
 8020c82:	4a15      	ldr	r2, [pc, #84]	; (8020cd8 <prvHeapInit+0xb4>)
 8020c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8020c86:	4b14      	ldr	r3, [pc, #80]	; (8020cd8 <prvHeapInit+0xb4>)
 8020c88:	681b      	ldr	r3, [r3, #0]
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8020c8e:	4b12      	ldr	r3, [pc, #72]	; (8020cd8 <prvHeapInit+0xb4>)
 8020c90:	681b      	ldr	r3, [r3, #0]
 8020c92:	2200      	movs	r2, #0
 8020c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8020c9a:	683b      	ldr	r3, [r7, #0]
 8020c9c:	68fa      	ldr	r2, [r7, #12]
 8020c9e:	1ad2      	subs	r2, r2, r3
 8020ca0:	683b      	ldr	r3, [r7, #0]
 8020ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8020ca4:	4b0c      	ldr	r3, [pc, #48]	; (8020cd8 <prvHeapInit+0xb4>)
 8020ca6:	681a      	ldr	r2, [r3, #0]
 8020ca8:	683b      	ldr	r3, [r7, #0]
 8020caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020cac:	683b      	ldr	r3, [r7, #0]
 8020cae:	685b      	ldr	r3, [r3, #4]
 8020cb0:	4a0a      	ldr	r2, [pc, #40]	; (8020cdc <prvHeapInit+0xb8>)
 8020cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020cb4:	683b      	ldr	r3, [r7, #0]
 8020cb6:	685b      	ldr	r3, [r3, #4]
 8020cb8:	4a09      	ldr	r2, [pc, #36]	; (8020ce0 <prvHeapInit+0xbc>)
 8020cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8020cbc:	4b09      	ldr	r3, [pc, #36]	; (8020ce4 <prvHeapInit+0xc0>)
 8020cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020cc2:	601a      	str	r2, [r3, #0]
}
 8020cc4:	bf00      	nop
 8020cc6:	3714      	adds	r7, #20
 8020cc8:	46bd      	mov	sp, r7
 8020cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cce:	4770      	bx	lr
 8020cd0:	20001cf8 	.word	0x20001cf8
 8020cd4:	20005cf8 	.word	0x20005cf8
 8020cd8:	20005d00 	.word	0x20005d00
 8020cdc:	20005d08 	.word	0x20005d08
 8020ce0:	20005d04 	.word	0x20005d04
 8020ce4:	20005d14 	.word	0x20005d14

08020ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8020ce8:	b480      	push	{r7}
 8020cea:	b085      	sub	sp, #20
 8020cec:	af00      	add	r7, sp, #0
 8020cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8020cf0:	4b28      	ldr	r3, [pc, #160]	; (8020d94 <prvInsertBlockIntoFreeList+0xac>)
 8020cf2:	60fb      	str	r3, [r7, #12]
 8020cf4:	e002      	b.n	8020cfc <prvInsertBlockIntoFreeList+0x14>
 8020cf6:	68fb      	ldr	r3, [r7, #12]
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	60fb      	str	r3, [r7, #12]
 8020cfc:	68fb      	ldr	r3, [r7, #12]
 8020cfe:	681b      	ldr	r3, [r3, #0]
 8020d00:	687a      	ldr	r2, [r7, #4]
 8020d02:	429a      	cmp	r2, r3
 8020d04:	d8f7      	bhi.n	8020cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8020d06:	68fb      	ldr	r3, [r7, #12]
 8020d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8020d0a:	68fb      	ldr	r3, [r7, #12]
 8020d0c:	685b      	ldr	r3, [r3, #4]
 8020d0e:	68ba      	ldr	r2, [r7, #8]
 8020d10:	4413      	add	r3, r2
 8020d12:	687a      	ldr	r2, [r7, #4]
 8020d14:	429a      	cmp	r2, r3
 8020d16:	d108      	bne.n	8020d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8020d18:	68fb      	ldr	r3, [r7, #12]
 8020d1a:	685a      	ldr	r2, [r3, #4]
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	685b      	ldr	r3, [r3, #4]
 8020d20:	441a      	add	r2, r3
 8020d22:	68fb      	ldr	r3, [r7, #12]
 8020d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8020d26:	68fb      	ldr	r3, [r7, #12]
 8020d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	685b      	ldr	r3, [r3, #4]
 8020d32:	68ba      	ldr	r2, [r7, #8]
 8020d34:	441a      	add	r2, r3
 8020d36:	68fb      	ldr	r3, [r7, #12]
 8020d38:	681b      	ldr	r3, [r3, #0]
 8020d3a:	429a      	cmp	r2, r3
 8020d3c:	d118      	bne.n	8020d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8020d3e:	68fb      	ldr	r3, [r7, #12]
 8020d40:	681a      	ldr	r2, [r3, #0]
 8020d42:	4b15      	ldr	r3, [pc, #84]	; (8020d98 <prvInsertBlockIntoFreeList+0xb0>)
 8020d44:	681b      	ldr	r3, [r3, #0]
 8020d46:	429a      	cmp	r2, r3
 8020d48:	d00d      	beq.n	8020d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	685a      	ldr	r2, [r3, #4]
 8020d4e:	68fb      	ldr	r3, [r7, #12]
 8020d50:	681b      	ldr	r3, [r3, #0]
 8020d52:	685b      	ldr	r3, [r3, #4]
 8020d54:	441a      	add	r2, r3
 8020d56:	687b      	ldr	r3, [r7, #4]
 8020d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	681b      	ldr	r3, [r3, #0]
 8020d5e:	681a      	ldr	r2, [r3, #0]
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	601a      	str	r2, [r3, #0]
 8020d64:	e008      	b.n	8020d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8020d66:	4b0c      	ldr	r3, [pc, #48]	; (8020d98 <prvInsertBlockIntoFreeList+0xb0>)
 8020d68:	681a      	ldr	r2, [r3, #0]
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	601a      	str	r2, [r3, #0]
 8020d6e:	e003      	b.n	8020d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8020d70:	68fb      	ldr	r3, [r7, #12]
 8020d72:	681a      	ldr	r2, [r3, #0]
 8020d74:	687b      	ldr	r3, [r7, #4]
 8020d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8020d78:	68fa      	ldr	r2, [r7, #12]
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	429a      	cmp	r2, r3
 8020d7e:	d002      	beq.n	8020d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8020d80:	68fb      	ldr	r3, [r7, #12]
 8020d82:	687a      	ldr	r2, [r7, #4]
 8020d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8020d86:	bf00      	nop
 8020d88:	3714      	adds	r7, #20
 8020d8a:	46bd      	mov	sp, r7
 8020d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d90:	4770      	bx	lr
 8020d92:	bf00      	nop
 8020d94:	20005cf8 	.word	0x20005cf8
 8020d98:	20005d00 	.word	0x20005d00

08020d9c <_ZdlPv>:
 8020d9c:	f002 bfae 	b.w	8023cfc <free>

08020da0 <_ZdlPvj>:
 8020da0:	f7ff bffc 	b.w	8020d9c <_ZdlPv>

08020da4 <_Znwj>:
 8020da4:	2801      	cmp	r0, #1
 8020da6:	bf38      	it	cc
 8020da8:	2001      	movcc	r0, #1
 8020daa:	b510      	push	{r4, lr}
 8020dac:	4604      	mov	r4, r0
 8020dae:	4620      	mov	r0, r4
 8020db0:	f002 ff9c 	bl	8023cec <malloc>
 8020db4:	b100      	cbz	r0, 8020db8 <_Znwj+0x14>
 8020db6:	bd10      	pop	{r4, pc}
 8020db8:	f000 f812 	bl	8020de0 <_ZSt15get_new_handlerv>
 8020dbc:	b908      	cbnz	r0, 8020dc2 <_Znwj+0x1e>
 8020dbe:	f002 ff8e 	bl	8023cde <abort>
 8020dc2:	4780      	blx	r0
 8020dc4:	e7f3      	b.n	8020dae <_Znwj+0xa>

08020dc6 <_ZNSaIcEC1Ev>:
 8020dc6:	4770      	bx	lr

08020dc8 <_ZNSaIcEC1ERKS_>:
 8020dc8:	4770      	bx	lr

08020dca <_ZNSaIcED1Ev>:
 8020dca:	4770      	bx	lr

08020dcc <_ZSt17__throw_bad_allocv>:
 8020dcc:	b508      	push	{r3, lr}
 8020dce:	f002 ff86 	bl	8023cde <abort>

08020dd2 <_ZSt28__throw_bad_array_new_lengthv>:
 8020dd2:	b508      	push	{r3, lr}
 8020dd4:	f002 ff83 	bl	8023cde <abort>

08020dd8 <_ZSt20__throw_length_errorPKc>:
 8020dd8:	b508      	push	{r3, lr}
 8020dda:	f002 ff80 	bl	8023cde <abort>
	...

08020de0 <_ZSt15get_new_handlerv>:
 8020de0:	4b01      	ldr	r3, [pc, #4]	; (8020de8 <_ZSt15get_new_handlerv+0x8>)
 8020de2:	e8d3 0faf 	lda	r0, [r3]
 8020de6:	4770      	bx	lr
 8020de8:	20005d18 	.word	0x20005d18

08020dec <fmod>:
 8020dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020dee:	ec57 6b10 	vmov	r6, r7, d0
 8020df2:	ec55 4b11 	vmov	r4, r5, d1
 8020df6:	ed2d 8b02 	vpush	{d8}
 8020dfa:	f000 fc77 	bl	80216ec <__ieee754_fmod>
 8020dfe:	4622      	mov	r2, r4
 8020e00:	462b      	mov	r3, r5
 8020e02:	4630      	mov	r0, r6
 8020e04:	4639      	mov	r1, r7
 8020e06:	eeb0 8a40 	vmov.f32	s16, s0
 8020e0a:	eef0 8a60 	vmov.f32	s17, s1
 8020e0e:	f7df fe7f 	bl	8000b10 <__aeabi_dcmpun>
 8020e12:	b990      	cbnz	r0, 8020e3a <fmod+0x4e>
 8020e14:	2200      	movs	r2, #0
 8020e16:	2300      	movs	r3, #0
 8020e18:	4620      	mov	r0, r4
 8020e1a:	4629      	mov	r1, r5
 8020e1c:	f7df fe46 	bl	8000aac <__aeabi_dcmpeq>
 8020e20:	b158      	cbz	r0, 8020e3a <fmod+0x4e>
 8020e22:	f003 fa4d 	bl	80242c0 <__errno>
 8020e26:	2321      	movs	r3, #33	; 0x21
 8020e28:	2200      	movs	r2, #0
 8020e2a:	6003      	str	r3, [r0, #0]
 8020e2c:	2300      	movs	r3, #0
 8020e2e:	4610      	mov	r0, r2
 8020e30:	4619      	mov	r1, r3
 8020e32:	f7df fcfd 	bl	8000830 <__aeabi_ddiv>
 8020e36:	ec41 0b18 	vmov	d8, r0, r1
 8020e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8020e3e:	eef0 0a68 	vmov.f32	s1, s17
 8020e42:	ecbd 8b02 	vpop	{d8}
 8020e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020e48 <pow>:
 8020e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e4a:	ec55 4b11 	vmov	r4, r5, d1
 8020e4e:	ed2d 8b02 	vpush	{d8}
 8020e52:	eeb0 8a40 	vmov.f32	s16, s0
 8020e56:	eef0 8a60 	vmov.f32	s17, s1
 8020e5a:	f000 fd55 	bl	8021908 <__ieee754_pow>
 8020e5e:	4622      	mov	r2, r4
 8020e60:	462b      	mov	r3, r5
 8020e62:	4620      	mov	r0, r4
 8020e64:	4629      	mov	r1, r5
 8020e66:	ec57 6b10 	vmov	r6, r7, d0
 8020e6a:	f7df fe51 	bl	8000b10 <__aeabi_dcmpun>
 8020e6e:	2800      	cmp	r0, #0
 8020e70:	d13b      	bne.n	8020eea <pow+0xa2>
 8020e72:	2200      	movs	r2, #0
 8020e74:	2300      	movs	r3, #0
 8020e76:	ec51 0b18 	vmov	r0, r1, d8
 8020e7a:	f7df fe17 	bl	8000aac <__aeabi_dcmpeq>
 8020e7e:	b1b8      	cbz	r0, 8020eb0 <pow+0x68>
 8020e80:	2200      	movs	r2, #0
 8020e82:	2300      	movs	r3, #0
 8020e84:	4620      	mov	r0, r4
 8020e86:	4629      	mov	r1, r5
 8020e88:	f7df fe10 	bl	8000aac <__aeabi_dcmpeq>
 8020e8c:	2800      	cmp	r0, #0
 8020e8e:	d146      	bne.n	8020f1e <pow+0xd6>
 8020e90:	ec45 4b10 	vmov	d0, r4, r5
 8020e94:	f000 f934 	bl	8021100 <finite>
 8020e98:	b338      	cbz	r0, 8020eea <pow+0xa2>
 8020e9a:	2200      	movs	r2, #0
 8020e9c:	2300      	movs	r3, #0
 8020e9e:	4620      	mov	r0, r4
 8020ea0:	4629      	mov	r1, r5
 8020ea2:	f7df fe0d 	bl	8000ac0 <__aeabi_dcmplt>
 8020ea6:	b300      	cbz	r0, 8020eea <pow+0xa2>
 8020ea8:	f003 fa0a 	bl	80242c0 <__errno>
 8020eac:	2322      	movs	r3, #34	; 0x22
 8020eae:	e01b      	b.n	8020ee8 <pow+0xa0>
 8020eb0:	ec47 6b10 	vmov	d0, r6, r7
 8020eb4:	f000 f924 	bl	8021100 <finite>
 8020eb8:	b9e0      	cbnz	r0, 8020ef4 <pow+0xac>
 8020eba:	eeb0 0a48 	vmov.f32	s0, s16
 8020ebe:	eef0 0a68 	vmov.f32	s1, s17
 8020ec2:	f000 f91d 	bl	8021100 <finite>
 8020ec6:	b1a8      	cbz	r0, 8020ef4 <pow+0xac>
 8020ec8:	ec45 4b10 	vmov	d0, r4, r5
 8020ecc:	f000 f918 	bl	8021100 <finite>
 8020ed0:	b180      	cbz	r0, 8020ef4 <pow+0xac>
 8020ed2:	4632      	mov	r2, r6
 8020ed4:	463b      	mov	r3, r7
 8020ed6:	4630      	mov	r0, r6
 8020ed8:	4639      	mov	r1, r7
 8020eda:	f7df fe19 	bl	8000b10 <__aeabi_dcmpun>
 8020ede:	2800      	cmp	r0, #0
 8020ee0:	d0e2      	beq.n	8020ea8 <pow+0x60>
 8020ee2:	f003 f9ed 	bl	80242c0 <__errno>
 8020ee6:	2321      	movs	r3, #33	; 0x21
 8020ee8:	6003      	str	r3, [r0, #0]
 8020eea:	ecbd 8b02 	vpop	{d8}
 8020eee:	ec47 6b10 	vmov	d0, r6, r7
 8020ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ef4:	2200      	movs	r2, #0
 8020ef6:	2300      	movs	r3, #0
 8020ef8:	4630      	mov	r0, r6
 8020efa:	4639      	mov	r1, r7
 8020efc:	f7df fdd6 	bl	8000aac <__aeabi_dcmpeq>
 8020f00:	2800      	cmp	r0, #0
 8020f02:	d0f2      	beq.n	8020eea <pow+0xa2>
 8020f04:	eeb0 0a48 	vmov.f32	s0, s16
 8020f08:	eef0 0a68 	vmov.f32	s1, s17
 8020f0c:	f000 f8f8 	bl	8021100 <finite>
 8020f10:	2800      	cmp	r0, #0
 8020f12:	d0ea      	beq.n	8020eea <pow+0xa2>
 8020f14:	ec45 4b10 	vmov	d0, r4, r5
 8020f18:	f000 f8f2 	bl	8021100 <finite>
 8020f1c:	e7c3      	b.n	8020ea6 <pow+0x5e>
 8020f1e:	2600      	movs	r6, #0
 8020f20:	4f00      	ldr	r7, [pc, #0]	; (8020f24 <pow+0xdc>)
 8020f22:	e7e2      	b.n	8020eea <pow+0xa2>
 8020f24:	3ff00000 	.word	0x3ff00000

08020f28 <sqrt>:
 8020f28:	b538      	push	{r3, r4, r5, lr}
 8020f2a:	ec55 4b10 	vmov	r4, r5, d0
 8020f2e:	ed2d 8b02 	vpush	{d8}
 8020f32:	f000 f8f1 	bl	8021118 <__ieee754_sqrt>
 8020f36:	4622      	mov	r2, r4
 8020f38:	462b      	mov	r3, r5
 8020f3a:	4620      	mov	r0, r4
 8020f3c:	4629      	mov	r1, r5
 8020f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8020f42:	eef0 8a60 	vmov.f32	s17, s1
 8020f46:	f7df fde3 	bl	8000b10 <__aeabi_dcmpun>
 8020f4a:	b990      	cbnz	r0, 8020f72 <sqrt+0x4a>
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	2300      	movs	r3, #0
 8020f50:	4620      	mov	r0, r4
 8020f52:	4629      	mov	r1, r5
 8020f54:	f7df fdb4 	bl	8000ac0 <__aeabi_dcmplt>
 8020f58:	b158      	cbz	r0, 8020f72 <sqrt+0x4a>
 8020f5a:	f003 f9b1 	bl	80242c0 <__errno>
 8020f5e:	2321      	movs	r3, #33	; 0x21
 8020f60:	2200      	movs	r2, #0
 8020f62:	6003      	str	r3, [r0, #0]
 8020f64:	2300      	movs	r3, #0
 8020f66:	4610      	mov	r0, r2
 8020f68:	4619      	mov	r1, r3
 8020f6a:	f7df fc61 	bl	8000830 <__aeabi_ddiv>
 8020f6e:	ec41 0b18 	vmov	d8, r0, r1
 8020f72:	eeb0 0a48 	vmov.f32	s0, s16
 8020f76:	eef0 0a68 	vmov.f32	s1, s17
 8020f7a:	ecbd 8b02 	vpop	{d8}
 8020f7e:	bd38      	pop	{r3, r4, r5, pc}

08020f80 <tan>:
 8020f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020f82:	ec53 2b10 	vmov	r2, r3, d0
 8020f86:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020f8a:	4815      	ldr	r0, [pc, #84]	; (8020fe0 <tan+0x60>)
 8020f8c:	4281      	cmp	r1, r0
 8020f8e:	dc07      	bgt.n	8020fa0 <tan+0x20>
 8020f90:	2001      	movs	r0, #1
 8020f92:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8020fd8 <tan+0x58>
 8020f96:	b005      	add	sp, #20
 8020f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8020f9c:	f000 b99c 	b.w	80212d8 <__kernel_tan>
 8020fa0:	4810      	ldr	r0, [pc, #64]	; (8020fe4 <tan+0x64>)
 8020fa2:	4281      	cmp	r1, r0
 8020fa4:	dd09      	ble.n	8020fba <tan+0x3a>
 8020fa6:	ee10 0a10 	vmov	r0, s0
 8020faa:	4619      	mov	r1, r3
 8020fac:	f7df f95e 	bl	800026c <__aeabi_dsub>
 8020fb0:	ec41 0b10 	vmov	d0, r0, r1
 8020fb4:	b005      	add	sp, #20
 8020fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8020fba:	4668      	mov	r0, sp
 8020fbc:	f001 f9d4 	bl	8022368 <__ieee754_rem_pio2>
 8020fc0:	0040      	lsls	r0, r0, #1
 8020fc2:	f000 0002 	and.w	r0, r0, #2
 8020fc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020fca:	ed9d 0b00 	vldr	d0, [sp]
 8020fce:	f1c0 0001 	rsb	r0, r0, #1
 8020fd2:	f000 f981 	bl	80212d8 <__kernel_tan>
 8020fd6:	e7ed      	b.n	8020fb4 <tan+0x34>
	...
 8020fe0:	3fe921fb 	.word	0x3fe921fb
 8020fe4:	7fefffff 	.word	0x7fefffff

08020fe8 <atan2f>:
 8020fe8:	f001 bc74 	b.w	80228d4 <__ieee754_atan2f>

08020fec <cosf>:
 8020fec:	ee10 3a10 	vmov	r3, s0
 8020ff0:	b507      	push	{r0, r1, r2, lr}
 8020ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020ff6:	4a1d      	ldr	r2, [pc, #116]	; (802106c <cosf+0x80>)
 8020ff8:	4293      	cmp	r3, r2
 8020ffa:	dc06      	bgt.n	802100a <cosf+0x1e>
 8020ffc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8021070 <cosf+0x84>
 8021000:	b003      	add	sp, #12
 8021002:	f85d eb04 	ldr.w	lr, [sp], #4
 8021006:	f001 bbbf 	b.w	8022788 <__kernel_cosf>
 802100a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802100e:	db04      	blt.n	802101a <cosf+0x2e>
 8021010:	ee30 0a40 	vsub.f32	s0, s0, s0
 8021014:	b003      	add	sp, #12
 8021016:	f85d fb04 	ldr.w	pc, [sp], #4
 802101a:	4668      	mov	r0, sp
 802101c:	f001 fcf8 	bl	8022a10 <__ieee754_rem_pio2f>
 8021020:	f000 0003 	and.w	r0, r0, #3
 8021024:	2801      	cmp	r0, #1
 8021026:	d009      	beq.n	802103c <cosf+0x50>
 8021028:	2802      	cmp	r0, #2
 802102a:	d010      	beq.n	802104e <cosf+0x62>
 802102c:	b9b0      	cbnz	r0, 802105c <cosf+0x70>
 802102e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021032:	ed9d 0a00 	vldr	s0, [sp]
 8021036:	f001 fba7 	bl	8022788 <__kernel_cosf>
 802103a:	e7eb      	b.n	8021014 <cosf+0x28>
 802103c:	eddd 0a01 	vldr	s1, [sp, #4]
 8021040:	ed9d 0a00 	vldr	s0, [sp]
 8021044:	f001 fbfe 	bl	8022844 <__kernel_sinf>
 8021048:	eeb1 0a40 	vneg.f32	s0, s0
 802104c:	e7e2      	b.n	8021014 <cosf+0x28>
 802104e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021052:	ed9d 0a00 	vldr	s0, [sp]
 8021056:	f001 fb97 	bl	8022788 <__kernel_cosf>
 802105a:	e7f5      	b.n	8021048 <cosf+0x5c>
 802105c:	2001      	movs	r0, #1
 802105e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021062:	ed9d 0a00 	vldr	s0, [sp]
 8021066:	f001 fbed 	bl	8022844 <__kernel_sinf>
 802106a:	e7d3      	b.n	8021014 <cosf+0x28>
 802106c:	3f490fd8 	.word	0x3f490fd8
 8021070:	00000000 	.word	0x00000000

08021074 <sinf>:
 8021074:	ee10 3a10 	vmov	r3, s0
 8021078:	b507      	push	{r0, r1, r2, lr}
 802107a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802107e:	4a1e      	ldr	r2, [pc, #120]	; (80210f8 <sinf+0x84>)
 8021080:	4293      	cmp	r3, r2
 8021082:	dc07      	bgt.n	8021094 <sinf+0x20>
 8021084:	2000      	movs	r0, #0
 8021086:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80210fc <sinf+0x88>
 802108a:	b003      	add	sp, #12
 802108c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021090:	f001 bbd8 	b.w	8022844 <__kernel_sinf>
 8021094:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021098:	db04      	blt.n	80210a4 <sinf+0x30>
 802109a:	ee30 0a40 	vsub.f32	s0, s0, s0
 802109e:	b003      	add	sp, #12
 80210a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80210a4:	4668      	mov	r0, sp
 80210a6:	f001 fcb3 	bl	8022a10 <__ieee754_rem_pio2f>
 80210aa:	f000 0003 	and.w	r0, r0, #3
 80210ae:	2801      	cmp	r0, #1
 80210b0:	d00a      	beq.n	80210c8 <sinf+0x54>
 80210b2:	2802      	cmp	r0, #2
 80210b4:	d00f      	beq.n	80210d6 <sinf+0x62>
 80210b6:	b9c0      	cbnz	r0, 80210ea <sinf+0x76>
 80210b8:	2001      	movs	r0, #1
 80210ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80210be:	ed9d 0a00 	vldr	s0, [sp]
 80210c2:	f001 fbbf 	bl	8022844 <__kernel_sinf>
 80210c6:	e7ea      	b.n	802109e <sinf+0x2a>
 80210c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80210cc:	ed9d 0a00 	vldr	s0, [sp]
 80210d0:	f001 fb5a 	bl	8022788 <__kernel_cosf>
 80210d4:	e7e3      	b.n	802109e <sinf+0x2a>
 80210d6:	2001      	movs	r0, #1
 80210d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80210dc:	ed9d 0a00 	vldr	s0, [sp]
 80210e0:	f001 fbb0 	bl	8022844 <__kernel_sinf>
 80210e4:	eeb1 0a40 	vneg.f32	s0, s0
 80210e8:	e7d9      	b.n	802109e <sinf+0x2a>
 80210ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80210ee:	ed9d 0a00 	vldr	s0, [sp]
 80210f2:	f001 fb49 	bl	8022788 <__kernel_cosf>
 80210f6:	e7f5      	b.n	80210e4 <sinf+0x70>
 80210f8:	3f490fd8 	.word	0x3f490fd8
 80210fc:	00000000 	.word	0x00000000

08021100 <finite>:
 8021100:	b082      	sub	sp, #8
 8021102:	ed8d 0b00 	vstr	d0, [sp]
 8021106:	9801      	ldr	r0, [sp, #4]
 8021108:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802110c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021110:	0fc0      	lsrs	r0, r0, #31
 8021112:	b002      	add	sp, #8
 8021114:	4770      	bx	lr
	...

08021118 <__ieee754_sqrt>:
 8021118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802111c:	4e6b      	ldr	r6, [pc, #428]	; (80212cc <__ieee754_sqrt+0x1b4>)
 802111e:	ee10 0a10 	vmov	r0, s0
 8021122:	ee10 2a10 	vmov	r2, s0
 8021126:	ec55 4b10 	vmov	r4, r5, d0
 802112a:	43ae      	bics	r6, r5
 802112c:	4629      	mov	r1, r5
 802112e:	462b      	mov	r3, r5
 8021130:	d10d      	bne.n	802114e <__ieee754_sqrt+0x36>
 8021132:	f7df fa53 	bl	80005dc <__aeabi_dmul>
 8021136:	4602      	mov	r2, r0
 8021138:	460b      	mov	r3, r1
 802113a:	4620      	mov	r0, r4
 802113c:	4629      	mov	r1, r5
 802113e:	f7df f897 	bl	8000270 <__adddf3>
 8021142:	4604      	mov	r4, r0
 8021144:	460d      	mov	r5, r1
 8021146:	ec45 4b10 	vmov	d0, r4, r5
 802114a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802114e:	2d00      	cmp	r5, #0
 8021150:	dc0b      	bgt.n	802116a <__ieee754_sqrt+0x52>
 8021152:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021156:	4326      	orrs	r6, r4
 8021158:	d0f5      	beq.n	8021146 <__ieee754_sqrt+0x2e>
 802115a:	b135      	cbz	r5, 802116a <__ieee754_sqrt+0x52>
 802115c:	f7df f886 	bl	800026c <__aeabi_dsub>
 8021160:	4602      	mov	r2, r0
 8021162:	460b      	mov	r3, r1
 8021164:	f7df fb64 	bl	8000830 <__aeabi_ddiv>
 8021168:	e7eb      	b.n	8021142 <__ieee754_sqrt+0x2a>
 802116a:	1509      	asrs	r1, r1, #20
 802116c:	f000 8091 	beq.w	8021292 <__ieee754_sqrt+0x17a>
 8021170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021174:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8021178:	07c9      	lsls	r1, r1, #31
 802117a:	f04f 0500 	mov.w	r5, #0
 802117e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021182:	ea4f 0666 	mov.w	r6, r6, asr #1
 8021186:	f04f 0e16 	mov.w	lr, #22
 802118a:	46ac      	mov	ip, r5
 802118c:	bf58      	it	pl
 802118e:	005b      	lslpl	r3, r3, #1
 8021190:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021194:	bf5c      	itt	pl
 8021196:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 802119a:	0052      	lslpl	r2, r2, #1
 802119c:	005b      	lsls	r3, r3, #1
 802119e:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80211a2:	0052      	lsls	r2, r2, #1
 80211a4:	eb0c 0001 	add.w	r0, ip, r1
 80211a8:	4298      	cmp	r0, r3
 80211aa:	bfde      	ittt	le
 80211ac:	1a1b      	suble	r3, r3, r0
 80211ae:	eb00 0c01 	addle.w	ip, r0, r1
 80211b2:	186d      	addle	r5, r5, r1
 80211b4:	f1be 0e01 	subs.w	lr, lr, #1
 80211b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80211bc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80211c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80211c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80211c8:	d1ec      	bne.n	80211a4 <__ieee754_sqrt+0x8c>
 80211ca:	4674      	mov	r4, lr
 80211cc:	2720      	movs	r7, #32
 80211ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80211d2:	4563      	cmp	r3, ip
 80211d4:	eb01 000e 	add.w	r0, r1, lr
 80211d8:	dc02      	bgt.n	80211e0 <__ieee754_sqrt+0xc8>
 80211da:	d114      	bne.n	8021206 <__ieee754_sqrt+0xee>
 80211dc:	4290      	cmp	r0, r2
 80211de:	d812      	bhi.n	8021206 <__ieee754_sqrt+0xee>
 80211e0:	2800      	cmp	r0, #0
 80211e2:	eb00 0e01 	add.w	lr, r0, r1
 80211e6:	da59      	bge.n	802129c <__ieee754_sqrt+0x184>
 80211e8:	f1be 0f00 	cmp.w	lr, #0
 80211ec:	db56      	blt.n	802129c <__ieee754_sqrt+0x184>
 80211ee:	f10c 0801 	add.w	r8, ip, #1
 80211f2:	eba3 030c 	sub.w	r3, r3, ip
 80211f6:	4290      	cmp	r0, r2
 80211f8:	440c      	add	r4, r1
 80211fa:	eba2 0200 	sub.w	r2, r2, r0
 80211fe:	bf88      	it	hi
 8021200:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8021204:	46c4      	mov	ip, r8
 8021206:	005b      	lsls	r3, r3, #1
 8021208:	3f01      	subs	r7, #1
 802120a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802120e:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8021212:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021216:	d1dc      	bne.n	80211d2 <__ieee754_sqrt+0xba>
 8021218:	4313      	orrs	r3, r2
 802121a:	d01b      	beq.n	8021254 <__ieee754_sqrt+0x13c>
 802121c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80212d0 <__ieee754_sqrt+0x1b8>
 8021220:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80212d4 <__ieee754_sqrt+0x1bc>
 8021224:	e9da 0100 	ldrd	r0, r1, [sl]
 8021228:	e9db 2300 	ldrd	r2, r3, [fp]
 802122c:	e9da 8900 	ldrd	r8, r9, [sl]
 8021230:	f7df f81c 	bl	800026c <__aeabi_dsub>
 8021234:	4602      	mov	r2, r0
 8021236:	460b      	mov	r3, r1
 8021238:	4640      	mov	r0, r8
 802123a:	4649      	mov	r1, r9
 802123c:	f7df fc4a 	bl	8000ad4 <__aeabi_dcmple>
 8021240:	b140      	cbz	r0, 8021254 <__ieee754_sqrt+0x13c>
 8021242:	f1b4 3fff 	cmp.w	r4, #4294967295
 8021246:	e9da 0100 	ldrd	r0, r1, [sl]
 802124a:	e9db 2300 	ldrd	r2, r3, [fp]
 802124e:	d127      	bne.n	80212a0 <__ieee754_sqrt+0x188>
 8021250:	3501      	adds	r5, #1
 8021252:	463c      	mov	r4, r7
 8021254:	106a      	asrs	r2, r5, #1
 8021256:	07e9      	lsls	r1, r5, #31
 8021258:	ea4f 0354 	mov.w	r3, r4, lsr #1
 802125c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8021260:	bf48      	it	mi
 8021262:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8021266:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 802126a:	461c      	mov	r4, r3
 802126c:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8021270:	e769      	b.n	8021146 <__ieee754_sqrt+0x2e>
 8021272:	0ad3      	lsrs	r3, r2, #11
 8021274:	3815      	subs	r0, #21
 8021276:	0552      	lsls	r2, r2, #21
 8021278:	2b00      	cmp	r3, #0
 802127a:	d0fa      	beq.n	8021272 <__ieee754_sqrt+0x15a>
 802127c:	02dc      	lsls	r4, r3, #11
 802127e:	d50a      	bpl.n	8021296 <__ieee754_sqrt+0x17e>
 8021280:	f1c1 0420 	rsb	r4, r1, #32
 8021284:	1e4d      	subs	r5, r1, #1
 8021286:	fa22 f404 	lsr.w	r4, r2, r4
 802128a:	408a      	lsls	r2, r1
 802128c:	1b41      	subs	r1, r0, r5
 802128e:	4323      	orrs	r3, r4
 8021290:	e76e      	b.n	8021170 <__ieee754_sqrt+0x58>
 8021292:	4608      	mov	r0, r1
 8021294:	e7f0      	b.n	8021278 <__ieee754_sqrt+0x160>
 8021296:	005b      	lsls	r3, r3, #1
 8021298:	3101      	adds	r1, #1
 802129a:	e7ef      	b.n	802127c <__ieee754_sqrt+0x164>
 802129c:	46e0      	mov	r8, ip
 802129e:	e7a8      	b.n	80211f2 <__ieee754_sqrt+0xda>
 80212a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80212a4:	f7de ffe4 	bl	8000270 <__adddf3>
 80212a8:	4602      	mov	r2, r0
 80212aa:	460b      	mov	r3, r1
 80212ac:	4640      	mov	r0, r8
 80212ae:	4649      	mov	r1, r9
 80212b0:	f7df fc06 	bl	8000ac0 <__aeabi_dcmplt>
 80212b4:	b128      	cbz	r0, 80212c2 <__ieee754_sqrt+0x1aa>
 80212b6:	1ca0      	adds	r0, r4, #2
 80212b8:	f104 0402 	add.w	r4, r4, #2
 80212bc:	bf08      	it	eq
 80212be:	3501      	addeq	r5, #1
 80212c0:	e7c8      	b.n	8021254 <__ieee754_sqrt+0x13c>
 80212c2:	3401      	adds	r4, #1
 80212c4:	f024 0401 	bic.w	r4, r4, #1
 80212c8:	e7c4      	b.n	8021254 <__ieee754_sqrt+0x13c>
 80212ca:	bf00      	nop
 80212cc:	7ff00000 	.word	0x7ff00000
 80212d0:	200000a0 	.word	0x200000a0
 80212d4:	200000a8 	.word	0x200000a8

080212d8 <__kernel_tan>:
 80212d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212dc:	ec5b ab10 	vmov	sl, fp, d0
 80212e0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80212e4:	4be0      	ldr	r3, [pc, #896]	; (8021668 <__kernel_tan+0x390>)
 80212e6:	4606      	mov	r6, r0
 80212e8:	429f      	cmp	r7, r3
 80212ea:	ed2d 8b06 	vpush	{d8-d10}
 80212ee:	b083      	sub	sp, #12
 80212f0:	ec59 8b11 	vmov	r8, r9, d1
 80212f4:	f8cd b000 	str.w	fp, [sp]
 80212f8:	dc61      	bgt.n	80213be <__kernel_tan+0xe6>
 80212fa:	ee10 0a10 	vmov	r0, s0
 80212fe:	4659      	mov	r1, fp
 8021300:	f7df fc1c 	bl	8000b3c <__aeabi_d2iz>
 8021304:	4605      	mov	r5, r0
 8021306:	2800      	cmp	r0, #0
 8021308:	f040 8083 	bne.w	8021412 <__kernel_tan+0x13a>
 802130c:	1c73      	adds	r3, r6, #1
 802130e:	4652      	mov	r2, sl
 8021310:	4313      	orrs	r3, r2
 8021312:	433b      	orrs	r3, r7
 8021314:	d112      	bne.n	802133c <__kernel_tan+0x64>
 8021316:	ec4b ab10 	vmov	d0, sl, fp
 802131a:	f001 fa2b 	bl	8022774 <fabs>
 802131e:	2000      	movs	r0, #0
 8021320:	49d2      	ldr	r1, [pc, #840]	; (802166c <__kernel_tan+0x394>)
 8021322:	ec53 2b10 	vmov	r2, r3, d0
 8021326:	f7df fa83 	bl	8000830 <__aeabi_ddiv>
 802132a:	4682      	mov	sl, r0
 802132c:	468b      	mov	fp, r1
 802132e:	ec4b ab10 	vmov	d0, sl, fp
 8021332:	b003      	add	sp, #12
 8021334:	ecbd 8b06 	vpop	{d8-d10}
 8021338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802133c:	2e01      	cmp	r6, #1
 802133e:	d0f6      	beq.n	802132e <__kernel_tan+0x56>
 8021340:	4642      	mov	r2, r8
 8021342:	464b      	mov	r3, r9
 8021344:	4650      	mov	r0, sl
 8021346:	4659      	mov	r1, fp
 8021348:	f7de ff92 	bl	8000270 <__adddf3>
 802134c:	4602      	mov	r2, r0
 802134e:	460b      	mov	r3, r1
 8021350:	460f      	mov	r7, r1
 8021352:	2000      	movs	r0, #0
 8021354:	49c6      	ldr	r1, [pc, #792]	; (8021670 <__kernel_tan+0x398>)
 8021356:	f7df fa6b 	bl	8000830 <__aeabi_ddiv>
 802135a:	462e      	mov	r6, r5
 802135c:	462c      	mov	r4, r5
 802135e:	e9cd 0100 	strd	r0, r1, [sp]
 8021362:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021366:	4630      	mov	r0, r6
 8021368:	4652      	mov	r2, sl
 802136a:	461d      	mov	r5, r3
 802136c:	4639      	mov	r1, r7
 802136e:	465b      	mov	r3, fp
 8021370:	f7de ff7c 	bl	800026c <__aeabi_dsub>
 8021374:	4602      	mov	r2, r0
 8021376:	460b      	mov	r3, r1
 8021378:	4640      	mov	r0, r8
 802137a:	4649      	mov	r1, r9
 802137c:	f7de ff76 	bl	800026c <__aeabi_dsub>
 8021380:	4632      	mov	r2, r6
 8021382:	462b      	mov	r3, r5
 8021384:	f7df f92a 	bl	80005dc <__aeabi_dmul>
 8021388:	4632      	mov	r2, r6
 802138a:	4680      	mov	r8, r0
 802138c:	4689      	mov	r9, r1
 802138e:	462b      	mov	r3, r5
 8021390:	4630      	mov	r0, r6
 8021392:	4639      	mov	r1, r7
 8021394:	f7df f922 	bl	80005dc <__aeabi_dmul>
 8021398:	2200      	movs	r2, #0
 802139a:	4bb4      	ldr	r3, [pc, #720]	; (802166c <__kernel_tan+0x394>)
 802139c:	f7de ff68 	bl	8000270 <__adddf3>
 80213a0:	4602      	mov	r2, r0
 80213a2:	460b      	mov	r3, r1
 80213a4:	4640      	mov	r0, r8
 80213a6:	4649      	mov	r1, r9
 80213a8:	f7de ff62 	bl	8000270 <__adddf3>
 80213ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80213b0:	f7df f914 	bl	80005dc <__aeabi_dmul>
 80213b4:	4622      	mov	r2, r4
 80213b6:	462b      	mov	r3, r5
 80213b8:	f7de ff5a 	bl	8000270 <__adddf3>
 80213bc:	e7b5      	b.n	802132a <__kernel_tan+0x52>
 80213be:	4bad      	ldr	r3, [pc, #692]	; (8021674 <__kernel_tan+0x39c>)
 80213c0:	429f      	cmp	r7, r3
 80213c2:	dd26      	ble.n	8021412 <__kernel_tan+0x13a>
 80213c4:	9b00      	ldr	r3, [sp, #0]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	da09      	bge.n	80213de <__kernel_tan+0x106>
 80213ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80213ce:	ee10 aa10 	vmov	sl, s0
 80213d2:	ee11 8a10 	vmov	r8, s2
 80213d6:	469b      	mov	fp, r3
 80213d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80213dc:	4699      	mov	r9, r3
 80213de:	4652      	mov	r2, sl
 80213e0:	465b      	mov	r3, fp
 80213e2:	a183      	add	r1, pc, #524	; (adr r1, 80215f0 <__kernel_tan+0x318>)
 80213e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80213e8:	f7de ff40 	bl	800026c <__aeabi_dsub>
 80213ec:	4604      	mov	r4, r0
 80213ee:	460d      	mov	r5, r1
 80213f0:	4642      	mov	r2, r8
 80213f2:	464b      	mov	r3, r9
 80213f4:	f04f 0800 	mov.w	r8, #0
 80213f8:	f04f 0900 	mov.w	r9, #0
 80213fc:	a17e      	add	r1, pc, #504	; (adr r1, 80215f8 <__kernel_tan+0x320>)
 80213fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021402:	f7de ff33 	bl	800026c <__aeabi_dsub>
 8021406:	4622      	mov	r2, r4
 8021408:	462b      	mov	r3, r5
 802140a:	f7de ff31 	bl	8000270 <__adddf3>
 802140e:	4682      	mov	sl, r0
 8021410:	468b      	mov	fp, r1
 8021412:	4652      	mov	r2, sl
 8021414:	465b      	mov	r3, fp
 8021416:	4650      	mov	r0, sl
 8021418:	4659      	mov	r1, fp
 802141a:	f7df f8df 	bl	80005dc <__aeabi_dmul>
 802141e:	4602      	mov	r2, r0
 8021420:	460b      	mov	r3, r1
 8021422:	ec43 2b18 	vmov	d8, r2, r3
 8021426:	f7df f8d9 	bl	80005dc <__aeabi_dmul>
 802142a:	4604      	mov	r4, r0
 802142c:	460d      	mov	r5, r1
 802142e:	4650      	mov	r0, sl
 8021430:	4659      	mov	r1, fp
 8021432:	ec53 2b18 	vmov	r2, r3, d8
 8021436:	f7df f8d1 	bl	80005dc <__aeabi_dmul>
 802143a:	a371      	add	r3, pc, #452	; (adr r3, 8021600 <__kernel_tan+0x328>)
 802143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021440:	ec41 0b19 	vmov	d9, r0, r1
 8021444:	4620      	mov	r0, r4
 8021446:	4629      	mov	r1, r5
 8021448:	f7df f8c8 	bl	80005dc <__aeabi_dmul>
 802144c:	a36e      	add	r3, pc, #440	; (adr r3, 8021608 <__kernel_tan+0x330>)
 802144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021452:	f7de ff0d 	bl	8000270 <__adddf3>
 8021456:	4622      	mov	r2, r4
 8021458:	462b      	mov	r3, r5
 802145a:	f7df f8bf 	bl	80005dc <__aeabi_dmul>
 802145e:	a36c      	add	r3, pc, #432	; (adr r3, 8021610 <__kernel_tan+0x338>)
 8021460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021464:	f7de ff04 	bl	8000270 <__adddf3>
 8021468:	4622      	mov	r2, r4
 802146a:	462b      	mov	r3, r5
 802146c:	f7df f8b6 	bl	80005dc <__aeabi_dmul>
 8021470:	a369      	add	r3, pc, #420	; (adr r3, 8021618 <__kernel_tan+0x340>)
 8021472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021476:	f7de fefb 	bl	8000270 <__adddf3>
 802147a:	4622      	mov	r2, r4
 802147c:	462b      	mov	r3, r5
 802147e:	f7df f8ad 	bl	80005dc <__aeabi_dmul>
 8021482:	a367      	add	r3, pc, #412	; (adr r3, 8021620 <__kernel_tan+0x348>)
 8021484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021488:	f7de fef2 	bl	8000270 <__adddf3>
 802148c:	4622      	mov	r2, r4
 802148e:	462b      	mov	r3, r5
 8021490:	f7df f8a4 	bl	80005dc <__aeabi_dmul>
 8021494:	a364      	add	r3, pc, #400	; (adr r3, 8021628 <__kernel_tan+0x350>)
 8021496:	e9d3 2300 	ldrd	r2, r3, [r3]
 802149a:	f7de fee9 	bl	8000270 <__adddf3>
 802149e:	ec53 2b18 	vmov	r2, r3, d8
 80214a2:	f7df f89b 	bl	80005dc <__aeabi_dmul>
 80214a6:	a362      	add	r3, pc, #392	; (adr r3, 8021630 <__kernel_tan+0x358>)
 80214a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214ac:	ec41 0b1a 	vmov	d10, r0, r1
 80214b0:	4620      	mov	r0, r4
 80214b2:	4629      	mov	r1, r5
 80214b4:	f7df f892 	bl	80005dc <__aeabi_dmul>
 80214b8:	a35f      	add	r3, pc, #380	; (adr r3, 8021638 <__kernel_tan+0x360>)
 80214ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214be:	f7de fed7 	bl	8000270 <__adddf3>
 80214c2:	4622      	mov	r2, r4
 80214c4:	462b      	mov	r3, r5
 80214c6:	f7df f889 	bl	80005dc <__aeabi_dmul>
 80214ca:	a35d      	add	r3, pc, #372	; (adr r3, 8021640 <__kernel_tan+0x368>)
 80214cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214d0:	f7de fece 	bl	8000270 <__adddf3>
 80214d4:	4622      	mov	r2, r4
 80214d6:	462b      	mov	r3, r5
 80214d8:	f7df f880 	bl	80005dc <__aeabi_dmul>
 80214dc:	a35a      	add	r3, pc, #360	; (adr r3, 8021648 <__kernel_tan+0x370>)
 80214de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214e2:	f7de fec5 	bl	8000270 <__adddf3>
 80214e6:	4622      	mov	r2, r4
 80214e8:	462b      	mov	r3, r5
 80214ea:	f7df f877 	bl	80005dc <__aeabi_dmul>
 80214ee:	a358      	add	r3, pc, #352	; (adr r3, 8021650 <__kernel_tan+0x378>)
 80214f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214f4:	f7de febc 	bl	8000270 <__adddf3>
 80214f8:	4622      	mov	r2, r4
 80214fa:	462b      	mov	r3, r5
 80214fc:	f7df f86e 	bl	80005dc <__aeabi_dmul>
 8021500:	a355      	add	r3, pc, #340	; (adr r3, 8021658 <__kernel_tan+0x380>)
 8021502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021506:	f7de feb3 	bl	8000270 <__adddf3>
 802150a:	4602      	mov	r2, r0
 802150c:	460b      	mov	r3, r1
 802150e:	ec51 0b1a 	vmov	r0, r1, d10
 8021512:	f7de fead 	bl	8000270 <__adddf3>
 8021516:	ec53 2b19 	vmov	r2, r3, d9
 802151a:	f7df f85f 	bl	80005dc <__aeabi_dmul>
 802151e:	4642      	mov	r2, r8
 8021520:	464b      	mov	r3, r9
 8021522:	f7de fea5 	bl	8000270 <__adddf3>
 8021526:	ec53 2b18 	vmov	r2, r3, d8
 802152a:	f7df f857 	bl	80005dc <__aeabi_dmul>
 802152e:	4642      	mov	r2, r8
 8021530:	464b      	mov	r3, r9
 8021532:	f7de fe9d 	bl	8000270 <__adddf3>
 8021536:	4604      	mov	r4, r0
 8021538:	460d      	mov	r5, r1
 802153a:	a349      	add	r3, pc, #292	; (adr r3, 8021660 <__kernel_tan+0x388>)
 802153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021540:	ec51 0b19 	vmov	r0, r1, d9
 8021544:	f7df f84a 	bl	80005dc <__aeabi_dmul>
 8021548:	4622      	mov	r2, r4
 802154a:	462b      	mov	r3, r5
 802154c:	f7de fe90 	bl	8000270 <__adddf3>
 8021550:	460b      	mov	r3, r1
 8021552:	4602      	mov	r2, r0
 8021554:	ec41 0b18 	vmov	d8, r0, r1
 8021558:	4650      	mov	r0, sl
 802155a:	4659      	mov	r1, fp
 802155c:	f7de fe88 	bl	8000270 <__adddf3>
 8021560:	4b44      	ldr	r3, [pc, #272]	; (8021674 <__kernel_tan+0x39c>)
 8021562:	4604      	mov	r4, r0
 8021564:	460d      	mov	r5, r1
 8021566:	429f      	cmp	r7, r3
 8021568:	f340 8086 	ble.w	8021678 <__kernel_tan+0x3a0>
 802156c:	4630      	mov	r0, r6
 802156e:	f7de ffcb 	bl	8000508 <__aeabi_i2d>
 8021572:	4622      	mov	r2, r4
 8021574:	4680      	mov	r8, r0
 8021576:	4689      	mov	r9, r1
 8021578:	462b      	mov	r3, r5
 802157a:	4620      	mov	r0, r4
 802157c:	4629      	mov	r1, r5
 802157e:	f7df f82d 	bl	80005dc <__aeabi_dmul>
 8021582:	4606      	mov	r6, r0
 8021584:	460f      	mov	r7, r1
 8021586:	4642      	mov	r2, r8
 8021588:	464b      	mov	r3, r9
 802158a:	4620      	mov	r0, r4
 802158c:	4629      	mov	r1, r5
 802158e:	f7de fe6f 	bl	8000270 <__adddf3>
 8021592:	4602      	mov	r2, r0
 8021594:	460b      	mov	r3, r1
 8021596:	4630      	mov	r0, r6
 8021598:	4639      	mov	r1, r7
 802159a:	f7df f949 	bl	8000830 <__aeabi_ddiv>
 802159e:	ec53 2b18 	vmov	r2, r3, d8
 80215a2:	f7de fe63 	bl	800026c <__aeabi_dsub>
 80215a6:	4602      	mov	r2, r0
 80215a8:	460b      	mov	r3, r1
 80215aa:	4650      	mov	r0, sl
 80215ac:	4659      	mov	r1, fp
 80215ae:	f7de fe5d 	bl	800026c <__aeabi_dsub>
 80215b2:	4602      	mov	r2, r0
 80215b4:	460b      	mov	r3, r1
 80215b6:	f7de fe5b 	bl	8000270 <__adddf3>
 80215ba:	4602      	mov	r2, r0
 80215bc:	460b      	mov	r3, r1
 80215be:	4640      	mov	r0, r8
 80215c0:	4649      	mov	r1, r9
 80215c2:	f7de fe53 	bl	800026c <__aeabi_dsub>
 80215c6:	9b00      	ldr	r3, [sp, #0]
 80215c8:	4604      	mov	r4, r0
 80215ca:	460d      	mov	r5, r1
 80215cc:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80215d0:	f00a 0a02 	and.w	sl, sl, #2
 80215d4:	f1ca 0001 	rsb	r0, sl, #1
 80215d8:	f7de ff96 	bl	8000508 <__aeabi_i2d>
 80215dc:	4602      	mov	r2, r0
 80215de:	460b      	mov	r3, r1
 80215e0:	4620      	mov	r0, r4
 80215e2:	4629      	mov	r1, r5
 80215e4:	f7de fffa 	bl	80005dc <__aeabi_dmul>
 80215e8:	e69f      	b.n	802132a <__kernel_tan+0x52>
 80215ea:	bf00      	nop
 80215ec:	f3af 8000 	nop.w
 80215f0:	54442d18 	.word	0x54442d18
 80215f4:	3fe921fb 	.word	0x3fe921fb
 80215f8:	33145c07 	.word	0x33145c07
 80215fc:	3c81a626 	.word	0x3c81a626
 8021600:	74bf7ad4 	.word	0x74bf7ad4
 8021604:	3efb2a70 	.word	0x3efb2a70
 8021608:	32f0a7e9 	.word	0x32f0a7e9
 802160c:	3f12b80f 	.word	0x3f12b80f
 8021610:	1a8d1068 	.word	0x1a8d1068
 8021614:	3f3026f7 	.word	0x3f3026f7
 8021618:	fee08315 	.word	0xfee08315
 802161c:	3f57dbc8 	.word	0x3f57dbc8
 8021620:	e96e8493 	.word	0xe96e8493
 8021624:	3f8226e3 	.word	0x3f8226e3
 8021628:	1bb341fe 	.word	0x1bb341fe
 802162c:	3faba1ba 	.word	0x3faba1ba
 8021630:	db605373 	.word	0xdb605373
 8021634:	bef375cb 	.word	0xbef375cb
 8021638:	a03792a6 	.word	0xa03792a6
 802163c:	3f147e88 	.word	0x3f147e88
 8021640:	f2f26501 	.word	0xf2f26501
 8021644:	3f4344d8 	.word	0x3f4344d8
 8021648:	c9560328 	.word	0xc9560328
 802164c:	3f6d6d22 	.word	0x3f6d6d22
 8021650:	8406d637 	.word	0x8406d637
 8021654:	3f9664f4 	.word	0x3f9664f4
 8021658:	1110fe7a 	.word	0x1110fe7a
 802165c:	3fc11111 	.word	0x3fc11111
 8021660:	55555563 	.word	0x55555563
 8021664:	3fd55555 	.word	0x3fd55555
 8021668:	3e2fffff 	.word	0x3e2fffff
 802166c:	3ff00000 	.word	0x3ff00000
 8021670:	bff00000 	.word	0xbff00000
 8021674:	3fe59427 	.word	0x3fe59427
 8021678:	2e01      	cmp	r6, #1
 802167a:	d02f      	beq.n	80216dc <__kernel_tan+0x404>
 802167c:	2600      	movs	r6, #0
 802167e:	460f      	mov	r7, r1
 8021680:	4602      	mov	r2, r0
 8021682:	460b      	mov	r3, r1
 8021684:	4689      	mov	r9, r1
 8021686:	2000      	movs	r0, #0
 8021688:	4916      	ldr	r1, [pc, #88]	; (80216e4 <__kernel_tan+0x40c>)
 802168a:	46b0      	mov	r8, r6
 802168c:	f7df f8d0 	bl	8000830 <__aeabi_ddiv>
 8021690:	4652      	mov	r2, sl
 8021692:	465b      	mov	r3, fp
 8021694:	e9cd 0100 	strd	r0, r1, [sp]
 8021698:	e9dd 4500 	ldrd	r4, r5, [sp]
 802169c:	4630      	mov	r0, r6
 802169e:	4639      	mov	r1, r7
 80216a0:	f7de fde4 	bl	800026c <__aeabi_dsub>
 80216a4:	4602      	mov	r2, r0
 80216a6:	460b      	mov	r3, r1
 80216a8:	4634      	mov	r4, r6
 80216aa:	ec51 0b18 	vmov	r0, r1, d8
 80216ae:	f7de fddd 	bl	800026c <__aeabi_dsub>
 80216b2:	4632      	mov	r2, r6
 80216b4:	462b      	mov	r3, r5
 80216b6:	f7de ff91 	bl	80005dc <__aeabi_dmul>
 80216ba:	4642      	mov	r2, r8
 80216bc:	4606      	mov	r6, r0
 80216be:	460f      	mov	r7, r1
 80216c0:	462b      	mov	r3, r5
 80216c2:	4640      	mov	r0, r8
 80216c4:	4649      	mov	r1, r9
 80216c6:	f7de ff89 	bl	80005dc <__aeabi_dmul>
 80216ca:	2200      	movs	r2, #0
 80216cc:	4b06      	ldr	r3, [pc, #24]	; (80216e8 <__kernel_tan+0x410>)
 80216ce:	f7de fdcf 	bl	8000270 <__adddf3>
 80216d2:	4602      	mov	r2, r0
 80216d4:	460b      	mov	r3, r1
 80216d6:	4630      	mov	r0, r6
 80216d8:	4639      	mov	r1, r7
 80216da:	e665      	b.n	80213a8 <__kernel_tan+0xd0>
 80216dc:	4682      	mov	sl, r0
 80216de:	468b      	mov	fp, r1
 80216e0:	e625      	b.n	802132e <__kernel_tan+0x56>
 80216e2:	bf00      	nop
 80216e4:	bff00000 	.word	0xbff00000
 80216e8:	3ff00000 	.word	0x3ff00000

080216ec <__ieee754_fmod>:
 80216ec:	ec53 2b11 	vmov	r2, r3, d1
 80216f0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80216f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216f8:	ea5c 0402 	orrs.w	r4, ip, r2
 80216fc:	461e      	mov	r6, r3
 80216fe:	ee11 7a10 	vmov	r7, s2
 8021702:	ee11 ea10 	vmov	lr, s2
 8021706:	ec51 0b10 	vmov	r0, r1, d0
 802170a:	d00c      	beq.n	8021726 <__ieee754_fmod+0x3a>
 802170c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8021710:	4c77      	ldr	r4, [pc, #476]	; (80218f0 <__ieee754_fmod+0x204>)
 8021712:	4689      	mov	r9, r1
 8021714:	45a0      	cmp	r8, r4
 8021716:	dc06      	bgt.n	8021726 <__ieee754_fmod+0x3a>
 8021718:	4254      	negs	r4, r2
 802171a:	4d76      	ldr	r5, [pc, #472]	; (80218f4 <__ieee754_fmod+0x208>)
 802171c:	4314      	orrs	r4, r2
 802171e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8021722:	42ac      	cmp	r4, r5
 8021724:	d909      	bls.n	802173a <__ieee754_fmod+0x4e>
 8021726:	f7de ff59 	bl	80005dc <__aeabi_dmul>
 802172a:	4602      	mov	r2, r0
 802172c:	460b      	mov	r3, r1
 802172e:	f7df f87f 	bl	8000830 <__aeabi_ddiv>
 8021732:	ec41 0b10 	vmov	d0, r0, r1
 8021736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802173a:	45e0      	cmp	r8, ip
 802173c:	ee10 aa10 	vmov	sl, s0
 8021740:	ee10 4a10 	vmov	r4, s0
 8021744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8021748:	dc09      	bgt.n	802175e <__ieee754_fmod+0x72>
 802174a:	dbf2      	blt.n	8021732 <__ieee754_fmod+0x46>
 802174c:	4290      	cmp	r0, r2
 802174e:	d3f0      	bcc.n	8021732 <__ieee754_fmod+0x46>
 8021750:	d105      	bne.n	802175e <__ieee754_fmod+0x72>
 8021752:	4b69      	ldr	r3, [pc, #420]	; (80218f8 <__ieee754_fmod+0x20c>)
 8021754:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8021758:	e9d3 0100 	ldrd	r0, r1, [r3]
 802175c:	e7e9      	b.n	8021732 <__ieee754_fmod+0x46>
 802175e:	4a65      	ldr	r2, [pc, #404]	; (80218f4 <__ieee754_fmod+0x208>)
 8021760:	ea19 0f02 	tst.w	r9, r2
 8021764:	d148      	bne.n	80217f8 <__ieee754_fmod+0x10c>
 8021766:	f1b8 0f00 	cmp.w	r8, #0
 802176a:	d13d      	bne.n	80217e8 <__ieee754_fmod+0xfc>
 802176c:	4653      	mov	r3, sl
 802176e:	4963      	ldr	r1, [pc, #396]	; (80218fc <__ieee754_fmod+0x210>)
 8021770:	2b00      	cmp	r3, #0
 8021772:	dc36      	bgt.n	80217e2 <__ieee754_fmod+0xf6>
 8021774:	4216      	tst	r6, r2
 8021776:	d14f      	bne.n	8021818 <__ieee754_fmod+0x12c>
 8021778:	f1bc 0f00 	cmp.w	ip, #0
 802177c:	d144      	bne.n	8021808 <__ieee754_fmod+0x11c>
 802177e:	463b      	mov	r3, r7
 8021780:	4a5e      	ldr	r2, [pc, #376]	; (80218fc <__ieee754_fmod+0x210>)
 8021782:	2b00      	cmp	r3, #0
 8021784:	dc3d      	bgt.n	8021802 <__ieee754_fmod+0x116>
 8021786:	485e      	ldr	r0, [pc, #376]	; (8021900 <__ieee754_fmod+0x214>)
 8021788:	4281      	cmp	r1, r0
 802178a:	db4a      	blt.n	8021822 <__ieee754_fmod+0x136>
 802178c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021794:	485a      	ldr	r0, [pc, #360]	; (8021900 <__ieee754_fmod+0x214>)
 8021796:	4282      	cmp	r2, r0
 8021798:	db57      	blt.n	802184a <__ieee754_fmod+0x15e>
 802179a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 802179e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80217a2:	1a89      	subs	r1, r1, r2
 80217a4:	1b98      	subs	r0, r3, r6
 80217a6:	eba4 070e 	sub.w	r7, r4, lr
 80217aa:	2900      	cmp	r1, #0
 80217ac:	d162      	bne.n	8021874 <__ieee754_fmod+0x188>
 80217ae:	4574      	cmp	r4, lr
 80217b0:	bf38      	it	cc
 80217b2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80217b6:	2800      	cmp	r0, #0
 80217b8:	bfa4      	itt	ge
 80217ba:	463c      	movge	r4, r7
 80217bc:	4603      	movge	r3, r0
 80217be:	ea53 0104 	orrs.w	r1, r3, r4
 80217c2:	d0c6      	beq.n	8021752 <__ieee754_fmod+0x66>
 80217c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80217c8:	db69      	blt.n	802189e <__ieee754_fmod+0x1b2>
 80217ca:	494d      	ldr	r1, [pc, #308]	; (8021900 <__ieee754_fmod+0x214>)
 80217cc:	428a      	cmp	r2, r1
 80217ce:	db6c      	blt.n	80218aa <__ieee754_fmod+0x1be>
 80217d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80217d4:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80217d8:	4620      	mov	r0, r4
 80217da:	432b      	orrs	r3, r5
 80217dc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80217e0:	e7a7      	b.n	8021732 <__ieee754_fmod+0x46>
 80217e2:	3901      	subs	r1, #1
 80217e4:	005b      	lsls	r3, r3, #1
 80217e6:	e7c3      	b.n	8021770 <__ieee754_fmod+0x84>
 80217e8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80217ec:	4944      	ldr	r1, [pc, #272]	; (8021900 <__ieee754_fmod+0x214>)
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	ddc0      	ble.n	8021774 <__ieee754_fmod+0x88>
 80217f2:	3901      	subs	r1, #1
 80217f4:	005b      	lsls	r3, r3, #1
 80217f6:	e7fa      	b.n	80217ee <__ieee754_fmod+0x102>
 80217f8:	ea4f 5128 	mov.w	r1, r8, asr #20
 80217fc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8021800:	e7b8      	b.n	8021774 <__ieee754_fmod+0x88>
 8021802:	3a01      	subs	r2, #1
 8021804:	005b      	lsls	r3, r3, #1
 8021806:	e7bc      	b.n	8021782 <__ieee754_fmod+0x96>
 8021808:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 802180c:	4a3c      	ldr	r2, [pc, #240]	; (8021900 <__ieee754_fmod+0x214>)
 802180e:	2b00      	cmp	r3, #0
 8021810:	ddb9      	ble.n	8021786 <__ieee754_fmod+0x9a>
 8021812:	3a01      	subs	r2, #1
 8021814:	005b      	lsls	r3, r3, #1
 8021816:	e7fa      	b.n	802180e <__ieee754_fmod+0x122>
 8021818:	ea4f 522c 	mov.w	r2, ip, asr #20
 802181c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021820:	e7b1      	b.n	8021786 <__ieee754_fmod+0x9a>
 8021822:	1a40      	subs	r0, r0, r1
 8021824:	281f      	cmp	r0, #31
 8021826:	dc0a      	bgt.n	802183e <__ieee754_fmod+0x152>
 8021828:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 802182c:	fa08 f800 	lsl.w	r8, r8, r0
 8021830:	fa0a f400 	lsl.w	r4, sl, r0
 8021834:	fa2a f303 	lsr.w	r3, sl, r3
 8021838:	ea43 0308 	orr.w	r3, r3, r8
 802183c:	e7aa      	b.n	8021794 <__ieee754_fmod+0xa8>
 802183e:	4b31      	ldr	r3, [pc, #196]	; (8021904 <__ieee754_fmod+0x218>)
 8021840:	2400      	movs	r4, #0
 8021842:	1a5b      	subs	r3, r3, r1
 8021844:	fa0a f303 	lsl.w	r3, sl, r3
 8021848:	e7a4      	b.n	8021794 <__ieee754_fmod+0xa8>
 802184a:	1a80      	subs	r0, r0, r2
 802184c:	281f      	cmp	r0, #31
 802184e:	dc0a      	bgt.n	8021866 <__ieee754_fmod+0x17a>
 8021850:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8021854:	fa0c fc00 	lsl.w	ip, ip, r0
 8021858:	fa07 fe00 	lsl.w	lr, r7, r0
 802185c:	fa27 f606 	lsr.w	r6, r7, r6
 8021860:	ea46 060c 	orr.w	r6, r6, ip
 8021864:	e79d      	b.n	80217a2 <__ieee754_fmod+0xb6>
 8021866:	4e27      	ldr	r6, [pc, #156]	; (8021904 <__ieee754_fmod+0x218>)
 8021868:	f04f 0e00 	mov.w	lr, #0
 802186c:	1ab6      	subs	r6, r6, r2
 802186e:	fa07 f606 	lsl.w	r6, r7, r6
 8021872:	e796      	b.n	80217a2 <__ieee754_fmod+0xb6>
 8021874:	4574      	cmp	r4, lr
 8021876:	bf38      	it	cc
 8021878:	f100 30ff 	addcc.w	r0, r0, #4294967295
 802187c:	2800      	cmp	r0, #0
 802187e:	da05      	bge.n	802188c <__ieee754_fmod+0x1a0>
 8021880:	0fe0      	lsrs	r0, r4, #31
 8021882:	0064      	lsls	r4, r4, #1
 8021884:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021888:	3901      	subs	r1, #1
 802188a:	e78b      	b.n	80217a4 <__ieee754_fmod+0xb8>
 802188c:	ea50 0307 	orrs.w	r3, r0, r7
 8021890:	f43f af5f 	beq.w	8021752 <__ieee754_fmod+0x66>
 8021894:	0ffb      	lsrs	r3, r7, #31
 8021896:	007c      	lsls	r4, r7, #1
 8021898:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802189c:	e7f4      	b.n	8021888 <__ieee754_fmod+0x19c>
 802189e:	0fe1      	lsrs	r1, r4, #31
 80218a0:	3a01      	subs	r2, #1
 80218a2:	0064      	lsls	r4, r4, #1
 80218a4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80218a8:	e78c      	b.n	80217c4 <__ieee754_fmod+0xd8>
 80218aa:	1a89      	subs	r1, r1, r2
 80218ac:	2914      	cmp	r1, #20
 80218ae:	dc0a      	bgt.n	80218c6 <__ieee754_fmod+0x1da>
 80218b0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80218b4:	40cc      	lsrs	r4, r1
 80218b6:	fa03 f202 	lsl.w	r2, r3, r2
 80218ba:	410b      	asrs	r3, r1
 80218bc:	4322      	orrs	r2, r4
 80218be:	ea43 0105 	orr.w	r1, r3, r5
 80218c2:	4610      	mov	r0, r2
 80218c4:	e735      	b.n	8021732 <__ieee754_fmod+0x46>
 80218c6:	291f      	cmp	r1, #31
 80218c8:	dc07      	bgt.n	80218da <__ieee754_fmod+0x1ee>
 80218ca:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80218ce:	40cc      	lsrs	r4, r1
 80218d0:	fa03 f202 	lsl.w	r2, r3, r2
 80218d4:	4322      	orrs	r2, r4
 80218d6:	462b      	mov	r3, r5
 80218d8:	e7f1      	b.n	80218be <__ieee754_fmod+0x1d2>
 80218da:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80218de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80218e2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80218e6:	32e2      	adds	r2, #226	; 0xe2
 80218e8:	fa43 f202 	asr.w	r2, r3, r2
 80218ec:	e7f3      	b.n	80218d6 <__ieee754_fmod+0x1ea>
 80218ee:	bf00      	nop
 80218f0:	7fefffff 	.word	0x7fefffff
 80218f4:	7ff00000 	.word	0x7ff00000
 80218f8:	080259d8 	.word	0x080259d8
 80218fc:	fffffbed 	.word	0xfffffbed
 8021900:	fffffc02 	.word	0xfffffc02
 8021904:	fffffbe2 	.word	0xfffffbe2

08021908 <__ieee754_pow>:
 8021908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802190c:	ed2d 8b06 	vpush	{d8-d10}
 8021910:	b089      	sub	sp, #36	; 0x24
 8021912:	ed8d 1b00 	vstr	d1, [sp]
 8021916:	e9dd 2900 	ldrd	r2, r9, [sp]
 802191a:	ec57 6b10 	vmov	r6, r7, d0
 802191e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8021922:	ea58 0102 	orrs.w	r1, r8, r2
 8021926:	d115      	bne.n	8021954 <__ieee754_pow+0x4c>
 8021928:	19b3      	adds	r3, r6, r6
 802192a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802192e:	4152      	adcs	r2, r2
 8021930:	4299      	cmp	r1, r3
 8021932:	4b89      	ldr	r3, [pc, #548]	; (8021b58 <__ieee754_pow+0x250>)
 8021934:	4193      	sbcs	r3, r2
 8021936:	f080 84d2 	bcs.w	80222de <__ieee754_pow+0x9d6>
 802193a:	4630      	mov	r0, r6
 802193c:	4639      	mov	r1, r7
 802193e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021942:	f7de fc95 	bl	8000270 <__adddf3>
 8021946:	ec41 0b10 	vmov	d0, r0, r1
 802194a:	b009      	add	sp, #36	; 0x24
 802194c:	ecbd 8b06 	vpop	{d8-d10}
 8021950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021954:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8021958:	4b80      	ldr	r3, [pc, #512]	; (8021b5c <__ieee754_pow+0x254>)
 802195a:	463d      	mov	r5, r7
 802195c:	ee10 aa10 	vmov	sl, s0
 8021960:	429c      	cmp	r4, r3
 8021962:	dc06      	bgt.n	8021972 <__ieee754_pow+0x6a>
 8021964:	d101      	bne.n	802196a <__ieee754_pow+0x62>
 8021966:	2e00      	cmp	r6, #0
 8021968:	d1e7      	bne.n	802193a <__ieee754_pow+0x32>
 802196a:	4598      	cmp	r8, r3
 802196c:	dc01      	bgt.n	8021972 <__ieee754_pow+0x6a>
 802196e:	d10f      	bne.n	8021990 <__ieee754_pow+0x88>
 8021970:	b172      	cbz	r2, 8021990 <__ieee754_pow+0x88>
 8021972:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8021976:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802197a:	ea55 050a 	orrs.w	r5, r5, sl
 802197e:	d1dc      	bne.n	802193a <__ieee754_pow+0x32>
 8021980:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021984:	18db      	adds	r3, r3, r3
 8021986:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802198a:	4152      	adcs	r2, r2
 802198c:	429d      	cmp	r5, r3
 802198e:	e7d0      	b.n	8021932 <__ieee754_pow+0x2a>
 8021990:	2d00      	cmp	r5, #0
 8021992:	da3b      	bge.n	8021a0c <__ieee754_pow+0x104>
 8021994:	4b72      	ldr	r3, [pc, #456]	; (8021b60 <__ieee754_pow+0x258>)
 8021996:	4598      	cmp	r8, r3
 8021998:	dc51      	bgt.n	8021a3e <__ieee754_pow+0x136>
 802199a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802199e:	4598      	cmp	r8, r3
 80219a0:	f340 84ac 	ble.w	80222fc <__ieee754_pow+0x9f4>
 80219a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80219a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80219ac:	2b14      	cmp	r3, #20
 80219ae:	dd0f      	ble.n	80219d0 <__ieee754_pow+0xc8>
 80219b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80219b4:	fa22 f103 	lsr.w	r1, r2, r3
 80219b8:	fa01 f303 	lsl.w	r3, r1, r3
 80219bc:	4293      	cmp	r3, r2
 80219be:	f040 849d 	bne.w	80222fc <__ieee754_pow+0x9f4>
 80219c2:	f001 0101 	and.w	r1, r1, #1
 80219c6:	f1c1 0302 	rsb	r3, r1, #2
 80219ca:	9304      	str	r3, [sp, #16]
 80219cc:	b182      	cbz	r2, 80219f0 <__ieee754_pow+0xe8>
 80219ce:	e05f      	b.n	8021a90 <__ieee754_pow+0x188>
 80219d0:	2a00      	cmp	r2, #0
 80219d2:	d15b      	bne.n	8021a8c <__ieee754_pow+0x184>
 80219d4:	f1c3 0314 	rsb	r3, r3, #20
 80219d8:	fa48 f103 	asr.w	r1, r8, r3
 80219dc:	fa01 f303 	lsl.w	r3, r1, r3
 80219e0:	4543      	cmp	r3, r8
 80219e2:	f040 8488 	bne.w	80222f6 <__ieee754_pow+0x9ee>
 80219e6:	f001 0101 	and.w	r1, r1, #1
 80219ea:	f1c1 0302 	rsb	r3, r1, #2
 80219ee:	9304      	str	r3, [sp, #16]
 80219f0:	4b5c      	ldr	r3, [pc, #368]	; (8021b64 <__ieee754_pow+0x25c>)
 80219f2:	4598      	cmp	r8, r3
 80219f4:	d132      	bne.n	8021a5c <__ieee754_pow+0x154>
 80219f6:	f1b9 0f00 	cmp.w	r9, #0
 80219fa:	f280 8478 	bge.w	80222ee <__ieee754_pow+0x9e6>
 80219fe:	4632      	mov	r2, r6
 8021a00:	463b      	mov	r3, r7
 8021a02:	2000      	movs	r0, #0
 8021a04:	4957      	ldr	r1, [pc, #348]	; (8021b64 <__ieee754_pow+0x25c>)
 8021a06:	f7de ff13 	bl	8000830 <__aeabi_ddiv>
 8021a0a:	e79c      	b.n	8021946 <__ieee754_pow+0x3e>
 8021a0c:	2300      	movs	r3, #0
 8021a0e:	9304      	str	r3, [sp, #16]
 8021a10:	2a00      	cmp	r2, #0
 8021a12:	d13d      	bne.n	8021a90 <__ieee754_pow+0x188>
 8021a14:	4b51      	ldr	r3, [pc, #324]	; (8021b5c <__ieee754_pow+0x254>)
 8021a16:	4598      	cmp	r8, r3
 8021a18:	d1ea      	bne.n	80219f0 <__ieee754_pow+0xe8>
 8021a1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8021a1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021a22:	ea53 030a 	orrs.w	r3, r3, sl
 8021a26:	f000 845a 	beq.w	80222de <__ieee754_pow+0x9d6>
 8021a2a:	4b4f      	ldr	r3, [pc, #316]	; (8021b68 <__ieee754_pow+0x260>)
 8021a2c:	429c      	cmp	r4, r3
 8021a2e:	dd08      	ble.n	8021a42 <__ieee754_pow+0x13a>
 8021a30:	f1b9 0f00 	cmp.w	r9, #0
 8021a34:	f2c0 8457 	blt.w	80222e6 <__ieee754_pow+0x9de>
 8021a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021a3c:	e783      	b.n	8021946 <__ieee754_pow+0x3e>
 8021a3e:	2302      	movs	r3, #2
 8021a40:	e7e5      	b.n	8021a0e <__ieee754_pow+0x106>
 8021a42:	f1b9 0f00 	cmp.w	r9, #0
 8021a46:	f04f 0000 	mov.w	r0, #0
 8021a4a:	f04f 0100 	mov.w	r1, #0
 8021a4e:	f6bf af7a 	bge.w	8021946 <__ieee754_pow+0x3e>
 8021a52:	e9dd 0300 	ldrd	r0, r3, [sp]
 8021a56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8021a5a:	e774      	b.n	8021946 <__ieee754_pow+0x3e>
 8021a5c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8021a60:	d106      	bne.n	8021a70 <__ieee754_pow+0x168>
 8021a62:	4632      	mov	r2, r6
 8021a64:	463b      	mov	r3, r7
 8021a66:	4630      	mov	r0, r6
 8021a68:	4639      	mov	r1, r7
 8021a6a:	f7de fdb7 	bl	80005dc <__aeabi_dmul>
 8021a6e:	e76a      	b.n	8021946 <__ieee754_pow+0x3e>
 8021a70:	4b3e      	ldr	r3, [pc, #248]	; (8021b6c <__ieee754_pow+0x264>)
 8021a72:	4599      	cmp	r9, r3
 8021a74:	d10c      	bne.n	8021a90 <__ieee754_pow+0x188>
 8021a76:	2d00      	cmp	r5, #0
 8021a78:	db0a      	blt.n	8021a90 <__ieee754_pow+0x188>
 8021a7a:	ec47 6b10 	vmov	d0, r6, r7
 8021a7e:	b009      	add	sp, #36	; 0x24
 8021a80:	ecbd 8b06 	vpop	{d8-d10}
 8021a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a88:	f7ff bb46 	b.w	8021118 <__ieee754_sqrt>
 8021a8c:	2300      	movs	r3, #0
 8021a8e:	9304      	str	r3, [sp, #16]
 8021a90:	ec47 6b10 	vmov	d0, r6, r7
 8021a94:	f000 fe6e 	bl	8022774 <fabs>
 8021a98:	ec51 0b10 	vmov	r0, r1, d0
 8021a9c:	f1ba 0f00 	cmp.w	sl, #0
 8021aa0:	d129      	bne.n	8021af6 <__ieee754_pow+0x1ee>
 8021aa2:	b124      	cbz	r4, 8021aae <__ieee754_pow+0x1a6>
 8021aa4:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8021aa8:	4b2e      	ldr	r3, [pc, #184]	; (8021b64 <__ieee754_pow+0x25c>)
 8021aaa:	429a      	cmp	r2, r3
 8021aac:	d123      	bne.n	8021af6 <__ieee754_pow+0x1ee>
 8021aae:	f1b9 0f00 	cmp.w	r9, #0
 8021ab2:	da05      	bge.n	8021ac0 <__ieee754_pow+0x1b8>
 8021ab4:	4602      	mov	r2, r0
 8021ab6:	460b      	mov	r3, r1
 8021ab8:	2000      	movs	r0, #0
 8021aba:	492a      	ldr	r1, [pc, #168]	; (8021b64 <__ieee754_pow+0x25c>)
 8021abc:	f7de feb8 	bl	8000830 <__aeabi_ddiv>
 8021ac0:	2d00      	cmp	r5, #0
 8021ac2:	f6bf af40 	bge.w	8021946 <__ieee754_pow+0x3e>
 8021ac6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8021aca:	9b04      	ldr	r3, [sp, #16]
 8021acc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021ad0:	431c      	orrs	r4, r3
 8021ad2:	d108      	bne.n	8021ae6 <__ieee754_pow+0x1de>
 8021ad4:	4602      	mov	r2, r0
 8021ad6:	460b      	mov	r3, r1
 8021ad8:	4610      	mov	r0, r2
 8021ada:	4619      	mov	r1, r3
 8021adc:	f7de fbc6 	bl	800026c <__aeabi_dsub>
 8021ae0:	4602      	mov	r2, r0
 8021ae2:	460b      	mov	r3, r1
 8021ae4:	e78f      	b.n	8021a06 <__ieee754_pow+0xfe>
 8021ae6:	9b04      	ldr	r3, [sp, #16]
 8021ae8:	2b01      	cmp	r3, #1
 8021aea:	f47f af2c 	bne.w	8021946 <__ieee754_pow+0x3e>
 8021aee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021af2:	4619      	mov	r1, r3
 8021af4:	e727      	b.n	8021946 <__ieee754_pow+0x3e>
 8021af6:	0feb      	lsrs	r3, r5, #31
 8021af8:	3b01      	subs	r3, #1
 8021afa:	9306      	str	r3, [sp, #24]
 8021afc:	9a06      	ldr	r2, [sp, #24]
 8021afe:	9b04      	ldr	r3, [sp, #16]
 8021b00:	4313      	orrs	r3, r2
 8021b02:	d102      	bne.n	8021b0a <__ieee754_pow+0x202>
 8021b04:	4632      	mov	r2, r6
 8021b06:	463b      	mov	r3, r7
 8021b08:	e7e6      	b.n	8021ad8 <__ieee754_pow+0x1d0>
 8021b0a:	4b19      	ldr	r3, [pc, #100]	; (8021b70 <__ieee754_pow+0x268>)
 8021b0c:	4598      	cmp	r8, r3
 8021b0e:	f340 80fb 	ble.w	8021d08 <__ieee754_pow+0x400>
 8021b12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8021b16:	4598      	cmp	r8, r3
 8021b18:	4b13      	ldr	r3, [pc, #76]	; (8021b68 <__ieee754_pow+0x260>)
 8021b1a:	dd0c      	ble.n	8021b36 <__ieee754_pow+0x22e>
 8021b1c:	429c      	cmp	r4, r3
 8021b1e:	dc0f      	bgt.n	8021b40 <__ieee754_pow+0x238>
 8021b20:	f1b9 0f00 	cmp.w	r9, #0
 8021b24:	da0f      	bge.n	8021b46 <__ieee754_pow+0x23e>
 8021b26:	2000      	movs	r0, #0
 8021b28:	b009      	add	sp, #36	; 0x24
 8021b2a:	ecbd 8b06 	vpop	{d8-d10}
 8021b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b32:	f001 ba1a 	b.w	8022f6a <__math_oflow>
 8021b36:	429c      	cmp	r4, r3
 8021b38:	dbf2      	blt.n	8021b20 <__ieee754_pow+0x218>
 8021b3a:	4b0a      	ldr	r3, [pc, #40]	; (8021b64 <__ieee754_pow+0x25c>)
 8021b3c:	429c      	cmp	r4, r3
 8021b3e:	dd19      	ble.n	8021b74 <__ieee754_pow+0x26c>
 8021b40:	f1b9 0f00 	cmp.w	r9, #0
 8021b44:	dcef      	bgt.n	8021b26 <__ieee754_pow+0x21e>
 8021b46:	2000      	movs	r0, #0
 8021b48:	b009      	add	sp, #36	; 0x24
 8021b4a:	ecbd 8b06 	vpop	{d8-d10}
 8021b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b52:	f001 ba01 	b.w	8022f58 <__math_uflow>
 8021b56:	bf00      	nop
 8021b58:	fff00000 	.word	0xfff00000
 8021b5c:	7ff00000 	.word	0x7ff00000
 8021b60:	433fffff 	.word	0x433fffff
 8021b64:	3ff00000 	.word	0x3ff00000
 8021b68:	3fefffff 	.word	0x3fefffff
 8021b6c:	3fe00000 	.word	0x3fe00000
 8021b70:	41e00000 	.word	0x41e00000
 8021b74:	2200      	movs	r2, #0
 8021b76:	4b60      	ldr	r3, [pc, #384]	; (8021cf8 <__ieee754_pow+0x3f0>)
 8021b78:	f7de fb78 	bl	800026c <__aeabi_dsub>
 8021b7c:	4604      	mov	r4, r0
 8021b7e:	460d      	mov	r5, r1
 8021b80:	a353      	add	r3, pc, #332	; (adr r3, 8021cd0 <__ieee754_pow+0x3c8>)
 8021b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b86:	f7de fd29 	bl	80005dc <__aeabi_dmul>
 8021b8a:	4606      	mov	r6, r0
 8021b8c:	460f      	mov	r7, r1
 8021b8e:	4620      	mov	r0, r4
 8021b90:	4629      	mov	r1, r5
 8021b92:	a351      	add	r3, pc, #324	; (adr r3, 8021cd8 <__ieee754_pow+0x3d0>)
 8021b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b98:	f7de fd20 	bl	80005dc <__aeabi_dmul>
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	4682      	mov	sl, r0
 8021ba0:	468b      	mov	fp, r1
 8021ba2:	4b56      	ldr	r3, [pc, #344]	; (8021cfc <__ieee754_pow+0x3f4>)
 8021ba4:	4620      	mov	r0, r4
 8021ba6:	4629      	mov	r1, r5
 8021ba8:	f7de fd18 	bl	80005dc <__aeabi_dmul>
 8021bac:	4602      	mov	r2, r0
 8021bae:	460b      	mov	r3, r1
 8021bb0:	a14b      	add	r1, pc, #300	; (adr r1, 8021ce0 <__ieee754_pow+0x3d8>)
 8021bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021bb6:	f7de fb59 	bl	800026c <__aeabi_dsub>
 8021bba:	4622      	mov	r2, r4
 8021bbc:	462b      	mov	r3, r5
 8021bbe:	f7de fd0d 	bl	80005dc <__aeabi_dmul>
 8021bc2:	4602      	mov	r2, r0
 8021bc4:	460b      	mov	r3, r1
 8021bc6:	2000      	movs	r0, #0
 8021bc8:	494d      	ldr	r1, [pc, #308]	; (8021d00 <__ieee754_pow+0x3f8>)
 8021bca:	f7de fb4f 	bl	800026c <__aeabi_dsub>
 8021bce:	4680      	mov	r8, r0
 8021bd0:	4689      	mov	r9, r1
 8021bd2:	4622      	mov	r2, r4
 8021bd4:	462b      	mov	r3, r5
 8021bd6:	4620      	mov	r0, r4
 8021bd8:	4629      	mov	r1, r5
 8021bda:	f7de fcff 	bl	80005dc <__aeabi_dmul>
 8021bde:	4602      	mov	r2, r0
 8021be0:	460b      	mov	r3, r1
 8021be2:	4640      	mov	r0, r8
 8021be4:	4649      	mov	r1, r9
 8021be6:	f7de fcf9 	bl	80005dc <__aeabi_dmul>
 8021bea:	a33f      	add	r3, pc, #252	; (adr r3, 8021ce8 <__ieee754_pow+0x3e0>)
 8021bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bf0:	f7de fcf4 	bl	80005dc <__aeabi_dmul>
 8021bf4:	4602      	mov	r2, r0
 8021bf6:	460b      	mov	r3, r1
 8021bf8:	4650      	mov	r0, sl
 8021bfa:	4659      	mov	r1, fp
 8021bfc:	f7de fb36 	bl	800026c <__aeabi_dsub>
 8021c00:	4602      	mov	r2, r0
 8021c02:	460b      	mov	r3, r1
 8021c04:	4680      	mov	r8, r0
 8021c06:	4689      	mov	r9, r1
 8021c08:	4630      	mov	r0, r6
 8021c0a:	4639      	mov	r1, r7
 8021c0c:	f7de fb30 	bl	8000270 <__adddf3>
 8021c10:	2000      	movs	r0, #0
 8021c12:	4632      	mov	r2, r6
 8021c14:	463b      	mov	r3, r7
 8021c16:	4604      	mov	r4, r0
 8021c18:	460d      	mov	r5, r1
 8021c1a:	f7de fb27 	bl	800026c <__aeabi_dsub>
 8021c1e:	4602      	mov	r2, r0
 8021c20:	460b      	mov	r3, r1
 8021c22:	4640      	mov	r0, r8
 8021c24:	4649      	mov	r1, r9
 8021c26:	f7de fb21 	bl	800026c <__aeabi_dsub>
 8021c2a:	9b04      	ldr	r3, [sp, #16]
 8021c2c:	9a06      	ldr	r2, [sp, #24]
 8021c2e:	4682      	mov	sl, r0
 8021c30:	3b01      	subs	r3, #1
 8021c32:	468b      	mov	fp, r1
 8021c34:	4313      	orrs	r3, r2
 8021c36:	f040 81e7 	bne.w	8022008 <__ieee754_pow+0x700>
 8021c3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8021cf0 <__ieee754_pow+0x3e8>
 8021c3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8021c42:	2600      	movs	r6, #0
 8021c44:	eeb0 8a47 	vmov.f32	s16, s14
 8021c48:	eef0 8a67 	vmov.f32	s17, s15
 8021c4c:	463b      	mov	r3, r7
 8021c4e:	4632      	mov	r2, r6
 8021c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021c54:	f7de fb0a 	bl	800026c <__aeabi_dsub>
 8021c58:	4622      	mov	r2, r4
 8021c5a:	462b      	mov	r3, r5
 8021c5c:	f7de fcbe 	bl	80005dc <__aeabi_dmul>
 8021c60:	4680      	mov	r8, r0
 8021c62:	4689      	mov	r9, r1
 8021c64:	4650      	mov	r0, sl
 8021c66:	4659      	mov	r1, fp
 8021c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021c6c:	f7de fcb6 	bl	80005dc <__aeabi_dmul>
 8021c70:	4602      	mov	r2, r0
 8021c72:	460b      	mov	r3, r1
 8021c74:	4640      	mov	r0, r8
 8021c76:	4649      	mov	r1, r9
 8021c78:	f7de fafa 	bl	8000270 <__adddf3>
 8021c7c:	4680      	mov	r8, r0
 8021c7e:	4689      	mov	r9, r1
 8021c80:	4632      	mov	r2, r6
 8021c82:	463b      	mov	r3, r7
 8021c84:	4620      	mov	r0, r4
 8021c86:	4629      	mov	r1, r5
 8021c88:	f7de fca8 	bl	80005dc <__aeabi_dmul>
 8021c8c:	460b      	mov	r3, r1
 8021c8e:	4604      	mov	r4, r0
 8021c90:	460d      	mov	r5, r1
 8021c92:	4602      	mov	r2, r0
 8021c94:	4649      	mov	r1, r9
 8021c96:	4640      	mov	r0, r8
 8021c98:	f7de faea 	bl	8000270 <__adddf3>
 8021c9c:	4b19      	ldr	r3, [pc, #100]	; (8021d04 <__ieee754_pow+0x3fc>)
 8021c9e:	4606      	mov	r6, r0
 8021ca0:	460f      	mov	r7, r1
 8021ca2:	4299      	cmp	r1, r3
 8021ca4:	468b      	mov	fp, r1
 8021ca6:	ec45 4b19 	vmov	d9, r4, r5
 8021caa:	f340 82f1 	ble.w	8022290 <__ieee754_pow+0x988>
 8021cae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8021cb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8021cb6:	4303      	orrs	r3, r0
 8021cb8:	f000 81e4 	beq.w	8022084 <__ieee754_pow+0x77c>
 8021cbc:	2200      	movs	r2, #0
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	ec51 0b18 	vmov	r0, r1, d8
 8021cc4:	f7de fefc 	bl	8000ac0 <__aeabi_dcmplt>
 8021cc8:	3800      	subs	r0, #0
 8021cca:	bf18      	it	ne
 8021ccc:	2001      	movne	r0, #1
 8021cce:	e72b      	b.n	8021b28 <__ieee754_pow+0x220>
 8021cd0:	60000000 	.word	0x60000000
 8021cd4:	3ff71547 	.word	0x3ff71547
 8021cd8:	f85ddf44 	.word	0xf85ddf44
 8021cdc:	3e54ae0b 	.word	0x3e54ae0b
 8021ce0:	55555555 	.word	0x55555555
 8021ce4:	3fd55555 	.word	0x3fd55555
 8021ce8:	652b82fe 	.word	0x652b82fe
 8021cec:	3ff71547 	.word	0x3ff71547
 8021cf0:	00000000 	.word	0x00000000
 8021cf4:	bff00000 	.word	0xbff00000
 8021cf8:	3ff00000 	.word	0x3ff00000
 8021cfc:	3fd00000 	.word	0x3fd00000
 8021d00:	3fe00000 	.word	0x3fe00000
 8021d04:	408fffff 	.word	0x408fffff
 8021d08:	4bd5      	ldr	r3, [pc, #852]	; (8022060 <__ieee754_pow+0x758>)
 8021d0a:	2200      	movs	r2, #0
 8021d0c:	402b      	ands	r3, r5
 8021d0e:	b92b      	cbnz	r3, 8021d1c <__ieee754_pow+0x414>
 8021d10:	4bd4      	ldr	r3, [pc, #848]	; (8022064 <__ieee754_pow+0x75c>)
 8021d12:	f7de fc63 	bl	80005dc <__aeabi_dmul>
 8021d16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8021d1a:	460c      	mov	r4, r1
 8021d1c:	1523      	asrs	r3, r4, #20
 8021d1e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8021d22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021d26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8021d2a:	4413      	add	r3, r2
 8021d2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8021d30:	9305      	str	r3, [sp, #20]
 8021d32:	4bcd      	ldr	r3, [pc, #820]	; (8022068 <__ieee754_pow+0x760>)
 8021d34:	429c      	cmp	r4, r3
 8021d36:	dd08      	ble.n	8021d4a <__ieee754_pow+0x442>
 8021d38:	4bcc      	ldr	r3, [pc, #816]	; (802206c <__ieee754_pow+0x764>)
 8021d3a:	429c      	cmp	r4, r3
 8021d3c:	f340 8162 	ble.w	8022004 <__ieee754_pow+0x6fc>
 8021d40:	9b05      	ldr	r3, [sp, #20]
 8021d42:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8021d46:	3301      	adds	r3, #1
 8021d48:	9305      	str	r3, [sp, #20]
 8021d4a:	2400      	movs	r4, #0
 8021d4c:	00e3      	lsls	r3, r4, #3
 8021d4e:	4682      	mov	sl, r0
 8021d50:	4629      	mov	r1, r5
 8021d52:	46ab      	mov	fp, r5
 8021d54:	9307      	str	r3, [sp, #28]
 8021d56:	4bc6      	ldr	r3, [pc, #792]	; (8022070 <__ieee754_pow+0x768>)
 8021d58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021d5c:	ed93 7b00 	vldr	d7, [r3]
 8021d60:	eeb0 9a47 	vmov.f32	s18, s14
 8021d64:	eef0 9a67 	vmov.f32	s19, s15
 8021d68:	ec53 2b17 	vmov	r2, r3, d7
 8021d6c:	f7de fa7e 	bl	800026c <__aeabi_dsub>
 8021d70:	4652      	mov	r2, sl
 8021d72:	4606      	mov	r6, r0
 8021d74:	460f      	mov	r7, r1
 8021d76:	462b      	mov	r3, r5
 8021d78:	106d      	asrs	r5, r5, #1
 8021d7a:	ec51 0b19 	vmov	r0, r1, d9
 8021d7e:	f7de fa77 	bl	8000270 <__adddf3>
 8021d82:	4602      	mov	r2, r0
 8021d84:	460b      	mov	r3, r1
 8021d86:	2000      	movs	r0, #0
 8021d88:	49ba      	ldr	r1, [pc, #744]	; (8022074 <__ieee754_pow+0x76c>)
 8021d8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8021d8e:	f7de fd4f 	bl	8000830 <__aeabi_ddiv>
 8021d92:	4602      	mov	r2, r0
 8021d94:	460b      	mov	r3, r1
 8021d96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8021d9a:	ec41 0b1a 	vmov	d10, r0, r1
 8021d9e:	4630      	mov	r0, r6
 8021da0:	4639      	mov	r1, r7
 8021da2:	f7de fc1b 	bl	80005dc <__aeabi_dmul>
 8021da6:	2300      	movs	r3, #0
 8021da8:	2200      	movs	r2, #0
 8021daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021dae:	9302      	str	r3, [sp, #8]
 8021db0:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8021db4:	4614      	mov	r4, r2
 8021db6:	461d      	mov	r5, r3
 8021db8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8021dbc:	ec41 0b18 	vmov	d8, r0, r1
 8021dc0:	4640      	mov	r0, r8
 8021dc2:	4649      	mov	r1, r9
 8021dc4:	f7de fc0a 	bl	80005dc <__aeabi_dmul>
 8021dc8:	4602      	mov	r2, r0
 8021dca:	460b      	mov	r3, r1
 8021dcc:	4630      	mov	r0, r6
 8021dce:	4639      	mov	r1, r7
 8021dd0:	f7de fa4c 	bl	800026c <__aeabi_dsub>
 8021dd4:	4606      	mov	r6, r0
 8021dd6:	460f      	mov	r7, r1
 8021dd8:	4620      	mov	r0, r4
 8021dda:	4629      	mov	r1, r5
 8021ddc:	ec53 2b19 	vmov	r2, r3, d9
 8021de0:	f7de fa44 	bl	800026c <__aeabi_dsub>
 8021de4:	4602      	mov	r2, r0
 8021de6:	460b      	mov	r3, r1
 8021de8:	4650      	mov	r0, sl
 8021dea:	4659      	mov	r1, fp
 8021dec:	f7de fa3e 	bl	800026c <__aeabi_dsub>
 8021df0:	4642      	mov	r2, r8
 8021df2:	464b      	mov	r3, r9
 8021df4:	f7de fbf2 	bl	80005dc <__aeabi_dmul>
 8021df8:	4602      	mov	r2, r0
 8021dfa:	460b      	mov	r3, r1
 8021dfc:	4630      	mov	r0, r6
 8021dfe:	4639      	mov	r1, r7
 8021e00:	f7de fa34 	bl	800026c <__aeabi_dsub>
 8021e04:	ec53 2b1a 	vmov	r2, r3, d10
 8021e08:	f7de fbe8 	bl	80005dc <__aeabi_dmul>
 8021e0c:	ec53 2b18 	vmov	r2, r3, d8
 8021e10:	ec41 0b19 	vmov	d9, r0, r1
 8021e14:	ec51 0b18 	vmov	r0, r1, d8
 8021e18:	f7de fbe0 	bl	80005dc <__aeabi_dmul>
 8021e1c:	4604      	mov	r4, r0
 8021e1e:	460d      	mov	r5, r1
 8021e20:	a37b      	add	r3, pc, #492	; (adr r3, 8022010 <__ieee754_pow+0x708>)
 8021e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e26:	f7de fbd9 	bl	80005dc <__aeabi_dmul>
 8021e2a:	a37b      	add	r3, pc, #492	; (adr r3, 8022018 <__ieee754_pow+0x710>)
 8021e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e30:	f7de fa1e 	bl	8000270 <__adddf3>
 8021e34:	4622      	mov	r2, r4
 8021e36:	462b      	mov	r3, r5
 8021e38:	f7de fbd0 	bl	80005dc <__aeabi_dmul>
 8021e3c:	a378      	add	r3, pc, #480	; (adr r3, 8022020 <__ieee754_pow+0x718>)
 8021e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e42:	f7de fa15 	bl	8000270 <__adddf3>
 8021e46:	4622      	mov	r2, r4
 8021e48:	462b      	mov	r3, r5
 8021e4a:	f7de fbc7 	bl	80005dc <__aeabi_dmul>
 8021e4e:	a376      	add	r3, pc, #472	; (adr r3, 8022028 <__ieee754_pow+0x720>)
 8021e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e54:	f7de fa0c 	bl	8000270 <__adddf3>
 8021e58:	4622      	mov	r2, r4
 8021e5a:	462b      	mov	r3, r5
 8021e5c:	f7de fbbe 	bl	80005dc <__aeabi_dmul>
 8021e60:	a373      	add	r3, pc, #460	; (adr r3, 8022030 <__ieee754_pow+0x728>)
 8021e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e66:	f7de fa03 	bl	8000270 <__adddf3>
 8021e6a:	4622      	mov	r2, r4
 8021e6c:	462b      	mov	r3, r5
 8021e6e:	f7de fbb5 	bl	80005dc <__aeabi_dmul>
 8021e72:	a371      	add	r3, pc, #452	; (adr r3, 8022038 <__ieee754_pow+0x730>)
 8021e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e78:	f7de f9fa 	bl	8000270 <__adddf3>
 8021e7c:	4606      	mov	r6, r0
 8021e7e:	460f      	mov	r7, r1
 8021e80:	4622      	mov	r2, r4
 8021e82:	462b      	mov	r3, r5
 8021e84:	4620      	mov	r0, r4
 8021e86:	4629      	mov	r1, r5
 8021e88:	f7de fba8 	bl	80005dc <__aeabi_dmul>
 8021e8c:	4602      	mov	r2, r0
 8021e8e:	460b      	mov	r3, r1
 8021e90:	4630      	mov	r0, r6
 8021e92:	4639      	mov	r1, r7
 8021e94:	f7de fba2 	bl	80005dc <__aeabi_dmul>
 8021e98:	4642      	mov	r2, r8
 8021e9a:	4604      	mov	r4, r0
 8021e9c:	460d      	mov	r5, r1
 8021e9e:	464b      	mov	r3, r9
 8021ea0:	ec51 0b18 	vmov	r0, r1, d8
 8021ea4:	f7de f9e4 	bl	8000270 <__adddf3>
 8021ea8:	ec53 2b19 	vmov	r2, r3, d9
 8021eac:	f7de fb96 	bl	80005dc <__aeabi_dmul>
 8021eb0:	4622      	mov	r2, r4
 8021eb2:	462b      	mov	r3, r5
 8021eb4:	f7de f9dc 	bl	8000270 <__adddf3>
 8021eb8:	4642      	mov	r2, r8
 8021eba:	4682      	mov	sl, r0
 8021ebc:	468b      	mov	fp, r1
 8021ebe:	464b      	mov	r3, r9
 8021ec0:	4640      	mov	r0, r8
 8021ec2:	4649      	mov	r1, r9
 8021ec4:	f7de fb8a 	bl	80005dc <__aeabi_dmul>
 8021ec8:	2200      	movs	r2, #0
 8021eca:	4b6b      	ldr	r3, [pc, #428]	; (8022078 <__ieee754_pow+0x770>)
 8021ecc:	4606      	mov	r6, r0
 8021ece:	460f      	mov	r7, r1
 8021ed0:	f7de f9ce 	bl	8000270 <__adddf3>
 8021ed4:	4652      	mov	r2, sl
 8021ed6:	465b      	mov	r3, fp
 8021ed8:	f7de f9ca 	bl	8000270 <__adddf3>
 8021edc:	2000      	movs	r0, #0
 8021ede:	460d      	mov	r5, r1
 8021ee0:	460b      	mov	r3, r1
 8021ee2:	4604      	mov	r4, r0
 8021ee4:	4602      	mov	r2, r0
 8021ee6:	4649      	mov	r1, r9
 8021ee8:	4640      	mov	r0, r8
 8021eea:	f7de fb77 	bl	80005dc <__aeabi_dmul>
 8021eee:	2200      	movs	r2, #0
 8021ef0:	4680      	mov	r8, r0
 8021ef2:	4689      	mov	r9, r1
 8021ef4:	4b60      	ldr	r3, [pc, #384]	; (8022078 <__ieee754_pow+0x770>)
 8021ef6:	4620      	mov	r0, r4
 8021ef8:	4629      	mov	r1, r5
 8021efa:	f7de f9b7 	bl	800026c <__aeabi_dsub>
 8021efe:	4632      	mov	r2, r6
 8021f00:	463b      	mov	r3, r7
 8021f02:	f7de f9b3 	bl	800026c <__aeabi_dsub>
 8021f06:	4602      	mov	r2, r0
 8021f08:	460b      	mov	r3, r1
 8021f0a:	4650      	mov	r0, sl
 8021f0c:	4659      	mov	r1, fp
 8021f0e:	f7de f9ad 	bl	800026c <__aeabi_dsub>
 8021f12:	ec53 2b18 	vmov	r2, r3, d8
 8021f16:	f7de fb61 	bl	80005dc <__aeabi_dmul>
 8021f1a:	4606      	mov	r6, r0
 8021f1c:	460f      	mov	r7, r1
 8021f1e:	4622      	mov	r2, r4
 8021f20:	462b      	mov	r3, r5
 8021f22:	ec51 0b19 	vmov	r0, r1, d9
 8021f26:	f7de fb59 	bl	80005dc <__aeabi_dmul>
 8021f2a:	4602      	mov	r2, r0
 8021f2c:	460b      	mov	r3, r1
 8021f2e:	4630      	mov	r0, r6
 8021f30:	4639      	mov	r1, r7
 8021f32:	f7de f99d 	bl	8000270 <__adddf3>
 8021f36:	4606      	mov	r6, r0
 8021f38:	460f      	mov	r7, r1
 8021f3a:	4602      	mov	r2, r0
 8021f3c:	460b      	mov	r3, r1
 8021f3e:	4640      	mov	r0, r8
 8021f40:	4649      	mov	r1, r9
 8021f42:	f7de f995 	bl	8000270 <__adddf3>
 8021f46:	2000      	movs	r0, #0
 8021f48:	460d      	mov	r5, r1
 8021f4a:	4604      	mov	r4, r0
 8021f4c:	a33c      	add	r3, pc, #240	; (adr r3, 8022040 <__ieee754_pow+0x738>)
 8021f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f52:	f7de fb43 	bl	80005dc <__aeabi_dmul>
 8021f56:	4642      	mov	r2, r8
 8021f58:	464b      	mov	r3, r9
 8021f5a:	ec41 0b18 	vmov	d8, r0, r1
 8021f5e:	4620      	mov	r0, r4
 8021f60:	4629      	mov	r1, r5
 8021f62:	f7de f983 	bl	800026c <__aeabi_dsub>
 8021f66:	4602      	mov	r2, r0
 8021f68:	460b      	mov	r3, r1
 8021f6a:	4630      	mov	r0, r6
 8021f6c:	4639      	mov	r1, r7
 8021f6e:	f7de f97d 	bl	800026c <__aeabi_dsub>
 8021f72:	a335      	add	r3, pc, #212	; (adr r3, 8022048 <__ieee754_pow+0x740>)
 8021f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f78:	f7de fb30 	bl	80005dc <__aeabi_dmul>
 8021f7c:	4606      	mov	r6, r0
 8021f7e:	460f      	mov	r7, r1
 8021f80:	4620      	mov	r0, r4
 8021f82:	4629      	mov	r1, r5
 8021f84:	a332      	add	r3, pc, #200	; (adr r3, 8022050 <__ieee754_pow+0x748>)
 8021f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f8a:	f7de fb27 	bl	80005dc <__aeabi_dmul>
 8021f8e:	4602      	mov	r2, r0
 8021f90:	460b      	mov	r3, r1
 8021f92:	4630      	mov	r0, r6
 8021f94:	4639      	mov	r1, r7
 8021f96:	f7de f96b 	bl	8000270 <__adddf3>
 8021f9a:	9a07      	ldr	r2, [sp, #28]
 8021f9c:	4b37      	ldr	r3, [pc, #220]	; (802207c <__ieee754_pow+0x774>)
 8021f9e:	4413      	add	r3, r2
 8021fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fa4:	f7de f964 	bl	8000270 <__adddf3>
 8021fa8:	4682      	mov	sl, r0
 8021faa:	9805      	ldr	r0, [sp, #20]
 8021fac:	468b      	mov	fp, r1
 8021fae:	f7de faab 	bl	8000508 <__aeabi_i2d>
 8021fb2:	9a07      	ldr	r2, [sp, #28]
 8021fb4:	4b32      	ldr	r3, [pc, #200]	; (8022080 <__ieee754_pow+0x778>)
 8021fb6:	4606      	mov	r6, r0
 8021fb8:	460f      	mov	r7, r1
 8021fba:	4413      	add	r3, r2
 8021fbc:	4652      	mov	r2, sl
 8021fbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021fc2:	ec51 0b18 	vmov	r0, r1, d8
 8021fc6:	465b      	mov	r3, fp
 8021fc8:	f7de f952 	bl	8000270 <__adddf3>
 8021fcc:	4642      	mov	r2, r8
 8021fce:	464b      	mov	r3, r9
 8021fd0:	f7de f94e 	bl	8000270 <__adddf3>
 8021fd4:	4632      	mov	r2, r6
 8021fd6:	463b      	mov	r3, r7
 8021fd8:	f7de f94a 	bl	8000270 <__adddf3>
 8021fdc:	2000      	movs	r0, #0
 8021fde:	4632      	mov	r2, r6
 8021fe0:	463b      	mov	r3, r7
 8021fe2:	4604      	mov	r4, r0
 8021fe4:	460d      	mov	r5, r1
 8021fe6:	f7de f941 	bl	800026c <__aeabi_dsub>
 8021fea:	4642      	mov	r2, r8
 8021fec:	464b      	mov	r3, r9
 8021fee:	f7de f93d 	bl	800026c <__aeabi_dsub>
 8021ff2:	ec53 2b18 	vmov	r2, r3, d8
 8021ff6:	f7de f939 	bl	800026c <__aeabi_dsub>
 8021ffa:	4602      	mov	r2, r0
 8021ffc:	460b      	mov	r3, r1
 8021ffe:	4650      	mov	r0, sl
 8022000:	4659      	mov	r1, fp
 8022002:	e610      	b.n	8021c26 <__ieee754_pow+0x31e>
 8022004:	2401      	movs	r4, #1
 8022006:	e6a1      	b.n	8021d4c <__ieee754_pow+0x444>
 8022008:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8022058 <__ieee754_pow+0x750>
 802200c:	e617      	b.n	8021c3e <__ieee754_pow+0x336>
 802200e:	bf00      	nop
 8022010:	4a454eef 	.word	0x4a454eef
 8022014:	3fca7e28 	.word	0x3fca7e28
 8022018:	93c9db65 	.word	0x93c9db65
 802201c:	3fcd864a 	.word	0x3fcd864a
 8022020:	a91d4101 	.word	0xa91d4101
 8022024:	3fd17460 	.word	0x3fd17460
 8022028:	518f264d 	.word	0x518f264d
 802202c:	3fd55555 	.word	0x3fd55555
 8022030:	db6fabff 	.word	0xdb6fabff
 8022034:	3fdb6db6 	.word	0x3fdb6db6
 8022038:	33333303 	.word	0x33333303
 802203c:	3fe33333 	.word	0x3fe33333
 8022040:	e0000000 	.word	0xe0000000
 8022044:	3feec709 	.word	0x3feec709
 8022048:	dc3a03fd 	.word	0xdc3a03fd
 802204c:	3feec709 	.word	0x3feec709
 8022050:	145b01f5 	.word	0x145b01f5
 8022054:	be3e2fe0 	.word	0xbe3e2fe0
 8022058:	00000000 	.word	0x00000000
 802205c:	3ff00000 	.word	0x3ff00000
 8022060:	7ff00000 	.word	0x7ff00000
 8022064:	43400000 	.word	0x43400000
 8022068:	0003988e 	.word	0x0003988e
 802206c:	000bb679 	.word	0x000bb679
 8022070:	080259e8 	.word	0x080259e8
 8022074:	3ff00000 	.word	0x3ff00000
 8022078:	40080000 	.word	0x40080000
 802207c:	08025a08 	.word	0x08025a08
 8022080:	080259f8 	.word	0x080259f8
 8022084:	a3b5      	add	r3, pc, #724	; (adr r3, 802235c <__ieee754_pow+0xa54>)
 8022086:	e9d3 2300 	ldrd	r2, r3, [r3]
 802208a:	4640      	mov	r0, r8
 802208c:	4649      	mov	r1, r9
 802208e:	f7de f8ef 	bl	8000270 <__adddf3>
 8022092:	4622      	mov	r2, r4
 8022094:	462b      	mov	r3, r5
 8022096:	ec41 0b1a 	vmov	d10, r0, r1
 802209a:	4630      	mov	r0, r6
 802209c:	4639      	mov	r1, r7
 802209e:	f7de f8e5 	bl	800026c <__aeabi_dsub>
 80220a2:	4602      	mov	r2, r0
 80220a4:	460b      	mov	r3, r1
 80220a6:	ec51 0b1a 	vmov	r0, r1, d10
 80220aa:	f7de fd27 	bl	8000afc <__aeabi_dcmpgt>
 80220ae:	2800      	cmp	r0, #0
 80220b0:	f47f ae04 	bne.w	8021cbc <__ieee754_pow+0x3b4>
 80220b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80220b8:	4aa3      	ldr	r2, [pc, #652]	; (8022348 <__ieee754_pow+0xa40>)
 80220ba:	4293      	cmp	r3, r2
 80220bc:	f340 8108 	ble.w	80222d0 <__ieee754_pow+0x9c8>
 80220c0:	151b      	asrs	r3, r3, #20
 80220c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80220c6:	48a1      	ldr	r0, [pc, #644]	; (802234c <__ieee754_pow+0xa44>)
 80220c8:	f1bb 0f00 	cmp.w	fp, #0
 80220cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80220d0:	f04f 0200 	mov.w	r2, #0
 80220d4:	fa4a fa03 	asr.w	sl, sl, r3
 80220d8:	44da      	add	sl, fp
 80220da:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80220de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80220e2:	fa40 f001 	asr.w	r0, r0, r1
 80220e6:	f1c1 0114 	rsb	r1, r1, #20
 80220ea:	ea00 030a 	and.w	r3, r0, sl
 80220ee:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80220f2:	4620      	mov	r0, r4
 80220f4:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80220f8:	fa4a fa01 	asr.w	sl, sl, r1
 80220fc:	4629      	mov	r1, r5
 80220fe:	bfb8      	it	lt
 8022100:	f1ca 0a00 	rsblt	sl, sl, #0
 8022104:	f7de f8b2 	bl	800026c <__aeabi_dsub>
 8022108:	ec41 0b19 	vmov	d9, r0, r1
 802210c:	4642      	mov	r2, r8
 802210e:	464b      	mov	r3, r9
 8022110:	ec51 0b19 	vmov	r0, r1, d9
 8022114:	f7de f8ac 	bl	8000270 <__adddf3>
 8022118:	2000      	movs	r0, #0
 802211a:	460d      	mov	r5, r1
 802211c:	4604      	mov	r4, r0
 802211e:	a37a      	add	r3, pc, #488	; (adr r3, 8022308 <__ieee754_pow+0xa00>)
 8022120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022124:	f7de fa5a 	bl	80005dc <__aeabi_dmul>
 8022128:	4606      	mov	r6, r0
 802212a:	460f      	mov	r7, r1
 802212c:	4620      	mov	r0, r4
 802212e:	4629      	mov	r1, r5
 8022130:	ec53 2b19 	vmov	r2, r3, d9
 8022134:	f7de f89a 	bl	800026c <__aeabi_dsub>
 8022138:	4602      	mov	r2, r0
 802213a:	460b      	mov	r3, r1
 802213c:	4640      	mov	r0, r8
 802213e:	4649      	mov	r1, r9
 8022140:	f7de f894 	bl	800026c <__aeabi_dsub>
 8022144:	a372      	add	r3, pc, #456	; (adr r3, 8022310 <__ieee754_pow+0xa08>)
 8022146:	e9d3 2300 	ldrd	r2, r3, [r3]
 802214a:	f7de fa47 	bl	80005dc <__aeabi_dmul>
 802214e:	4680      	mov	r8, r0
 8022150:	4689      	mov	r9, r1
 8022152:	4620      	mov	r0, r4
 8022154:	4629      	mov	r1, r5
 8022156:	a370      	add	r3, pc, #448	; (adr r3, 8022318 <__ieee754_pow+0xa10>)
 8022158:	e9d3 2300 	ldrd	r2, r3, [r3]
 802215c:	f7de fa3e 	bl	80005dc <__aeabi_dmul>
 8022160:	4602      	mov	r2, r0
 8022162:	460b      	mov	r3, r1
 8022164:	4640      	mov	r0, r8
 8022166:	4649      	mov	r1, r9
 8022168:	f7de f882 	bl	8000270 <__adddf3>
 802216c:	4604      	mov	r4, r0
 802216e:	460d      	mov	r5, r1
 8022170:	4602      	mov	r2, r0
 8022172:	460b      	mov	r3, r1
 8022174:	4630      	mov	r0, r6
 8022176:	4639      	mov	r1, r7
 8022178:	f7de f87a 	bl	8000270 <__adddf3>
 802217c:	4632      	mov	r2, r6
 802217e:	4680      	mov	r8, r0
 8022180:	4689      	mov	r9, r1
 8022182:	463b      	mov	r3, r7
 8022184:	f7de f872 	bl	800026c <__aeabi_dsub>
 8022188:	4602      	mov	r2, r0
 802218a:	460b      	mov	r3, r1
 802218c:	4620      	mov	r0, r4
 802218e:	4629      	mov	r1, r5
 8022190:	f7de f86c 	bl	800026c <__aeabi_dsub>
 8022194:	4642      	mov	r2, r8
 8022196:	4606      	mov	r6, r0
 8022198:	460f      	mov	r7, r1
 802219a:	464b      	mov	r3, r9
 802219c:	4640      	mov	r0, r8
 802219e:	4649      	mov	r1, r9
 80221a0:	f7de fa1c 	bl	80005dc <__aeabi_dmul>
 80221a4:	4604      	mov	r4, r0
 80221a6:	460d      	mov	r5, r1
 80221a8:	a35d      	add	r3, pc, #372	; (adr r3, 8022320 <__ieee754_pow+0xa18>)
 80221aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ae:	f7de fa15 	bl	80005dc <__aeabi_dmul>
 80221b2:	a35d      	add	r3, pc, #372	; (adr r3, 8022328 <__ieee754_pow+0xa20>)
 80221b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221b8:	f7de f858 	bl	800026c <__aeabi_dsub>
 80221bc:	4622      	mov	r2, r4
 80221be:	462b      	mov	r3, r5
 80221c0:	f7de fa0c 	bl	80005dc <__aeabi_dmul>
 80221c4:	a35a      	add	r3, pc, #360	; (adr r3, 8022330 <__ieee754_pow+0xa28>)
 80221c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ca:	f7de f851 	bl	8000270 <__adddf3>
 80221ce:	4622      	mov	r2, r4
 80221d0:	462b      	mov	r3, r5
 80221d2:	f7de fa03 	bl	80005dc <__aeabi_dmul>
 80221d6:	a358      	add	r3, pc, #352	; (adr r3, 8022338 <__ieee754_pow+0xa30>)
 80221d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221dc:	f7de f846 	bl	800026c <__aeabi_dsub>
 80221e0:	4622      	mov	r2, r4
 80221e2:	462b      	mov	r3, r5
 80221e4:	f7de f9fa 	bl	80005dc <__aeabi_dmul>
 80221e8:	a355      	add	r3, pc, #340	; (adr r3, 8022340 <__ieee754_pow+0xa38>)
 80221ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ee:	f7de f83f 	bl	8000270 <__adddf3>
 80221f2:	4622      	mov	r2, r4
 80221f4:	462b      	mov	r3, r5
 80221f6:	f7de f9f1 	bl	80005dc <__aeabi_dmul>
 80221fa:	4602      	mov	r2, r0
 80221fc:	460b      	mov	r3, r1
 80221fe:	4640      	mov	r0, r8
 8022200:	4649      	mov	r1, r9
 8022202:	f7de f833 	bl	800026c <__aeabi_dsub>
 8022206:	4604      	mov	r4, r0
 8022208:	460d      	mov	r5, r1
 802220a:	4602      	mov	r2, r0
 802220c:	460b      	mov	r3, r1
 802220e:	4640      	mov	r0, r8
 8022210:	4649      	mov	r1, r9
 8022212:	f7de f9e3 	bl	80005dc <__aeabi_dmul>
 8022216:	2200      	movs	r2, #0
 8022218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802221c:	ec41 0b19 	vmov	d9, r0, r1
 8022220:	4620      	mov	r0, r4
 8022222:	4629      	mov	r1, r5
 8022224:	f7de f822 	bl	800026c <__aeabi_dsub>
 8022228:	4602      	mov	r2, r0
 802222a:	460b      	mov	r3, r1
 802222c:	ec51 0b19 	vmov	r0, r1, d9
 8022230:	f7de fafe 	bl	8000830 <__aeabi_ddiv>
 8022234:	4632      	mov	r2, r6
 8022236:	4604      	mov	r4, r0
 8022238:	460d      	mov	r5, r1
 802223a:	463b      	mov	r3, r7
 802223c:	4640      	mov	r0, r8
 802223e:	4649      	mov	r1, r9
 8022240:	f7de f9cc 	bl	80005dc <__aeabi_dmul>
 8022244:	4632      	mov	r2, r6
 8022246:	463b      	mov	r3, r7
 8022248:	f7de f812 	bl	8000270 <__adddf3>
 802224c:	4602      	mov	r2, r0
 802224e:	460b      	mov	r3, r1
 8022250:	4620      	mov	r0, r4
 8022252:	4629      	mov	r1, r5
 8022254:	f7de f80a 	bl	800026c <__aeabi_dsub>
 8022258:	4642      	mov	r2, r8
 802225a:	464b      	mov	r3, r9
 802225c:	f7de f806 	bl	800026c <__aeabi_dsub>
 8022260:	460b      	mov	r3, r1
 8022262:	4602      	mov	r2, r0
 8022264:	493a      	ldr	r1, [pc, #232]	; (8022350 <__ieee754_pow+0xa48>)
 8022266:	2000      	movs	r0, #0
 8022268:	f7de f800 	bl	800026c <__aeabi_dsub>
 802226c:	ec41 0b10 	vmov	d0, r0, r1
 8022270:	ee10 3a90 	vmov	r3, s1
 8022274:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8022278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802227c:	da2b      	bge.n	80222d6 <__ieee754_pow+0x9ce>
 802227e:	4650      	mov	r0, sl
 8022280:	f000 fdce 	bl	8022e20 <scalbn>
 8022284:	ec51 0b10 	vmov	r0, r1, d0
 8022288:	ec53 2b18 	vmov	r2, r3, d8
 802228c:	f7ff bbed 	b.w	8021a6a <__ieee754_pow+0x162>
 8022290:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8022294:	4b2f      	ldr	r3, [pc, #188]	; (8022354 <__ieee754_pow+0xa4c>)
 8022296:	429e      	cmp	r6, r3
 8022298:	f77f af0c 	ble.w	80220b4 <__ieee754_pow+0x7ac>
 802229c:	4b2e      	ldr	r3, [pc, #184]	; (8022358 <__ieee754_pow+0xa50>)
 802229e:	440b      	add	r3, r1
 80222a0:	4303      	orrs	r3, r0
 80222a2:	d009      	beq.n	80222b8 <__ieee754_pow+0x9b0>
 80222a4:	2200      	movs	r2, #0
 80222a6:	2300      	movs	r3, #0
 80222a8:	ec51 0b18 	vmov	r0, r1, d8
 80222ac:	f7de fc08 	bl	8000ac0 <__aeabi_dcmplt>
 80222b0:	3800      	subs	r0, #0
 80222b2:	bf18      	it	ne
 80222b4:	2001      	movne	r0, #1
 80222b6:	e447      	b.n	8021b48 <__ieee754_pow+0x240>
 80222b8:	4622      	mov	r2, r4
 80222ba:	462b      	mov	r3, r5
 80222bc:	f7dd ffd6 	bl	800026c <__aeabi_dsub>
 80222c0:	4642      	mov	r2, r8
 80222c2:	464b      	mov	r3, r9
 80222c4:	f7de fc10 	bl	8000ae8 <__aeabi_dcmpge>
 80222c8:	2800      	cmp	r0, #0
 80222ca:	f43f aef3 	beq.w	80220b4 <__ieee754_pow+0x7ac>
 80222ce:	e7e9      	b.n	80222a4 <__ieee754_pow+0x99c>
 80222d0:	f04f 0a00 	mov.w	sl, #0
 80222d4:	e71a      	b.n	802210c <__ieee754_pow+0x804>
 80222d6:	ec51 0b10 	vmov	r0, r1, d0
 80222da:	4619      	mov	r1, r3
 80222dc:	e7d4      	b.n	8022288 <__ieee754_pow+0x980>
 80222de:	2000      	movs	r0, #0
 80222e0:	491b      	ldr	r1, [pc, #108]	; (8022350 <__ieee754_pow+0xa48>)
 80222e2:	f7ff bb30 	b.w	8021946 <__ieee754_pow+0x3e>
 80222e6:	2000      	movs	r0, #0
 80222e8:	2100      	movs	r1, #0
 80222ea:	f7ff bb2c 	b.w	8021946 <__ieee754_pow+0x3e>
 80222ee:	4630      	mov	r0, r6
 80222f0:	4639      	mov	r1, r7
 80222f2:	f7ff bb28 	b.w	8021946 <__ieee754_pow+0x3e>
 80222f6:	9204      	str	r2, [sp, #16]
 80222f8:	f7ff bb7a 	b.w	80219f0 <__ieee754_pow+0xe8>
 80222fc:	2300      	movs	r3, #0
 80222fe:	f7ff bb64 	b.w	80219ca <__ieee754_pow+0xc2>
 8022302:	bf00      	nop
 8022304:	f3af 8000 	nop.w
 8022308:	00000000 	.word	0x00000000
 802230c:	3fe62e43 	.word	0x3fe62e43
 8022310:	fefa39ef 	.word	0xfefa39ef
 8022314:	3fe62e42 	.word	0x3fe62e42
 8022318:	0ca86c39 	.word	0x0ca86c39
 802231c:	be205c61 	.word	0xbe205c61
 8022320:	72bea4d0 	.word	0x72bea4d0
 8022324:	3e663769 	.word	0x3e663769
 8022328:	c5d26bf1 	.word	0xc5d26bf1
 802232c:	3ebbbd41 	.word	0x3ebbbd41
 8022330:	af25de2c 	.word	0xaf25de2c
 8022334:	3f11566a 	.word	0x3f11566a
 8022338:	16bebd93 	.word	0x16bebd93
 802233c:	3f66c16c 	.word	0x3f66c16c
 8022340:	5555553e 	.word	0x5555553e
 8022344:	3fc55555 	.word	0x3fc55555
 8022348:	3fe00000 	.word	0x3fe00000
 802234c:	fff00000 	.word	0xfff00000
 8022350:	3ff00000 	.word	0x3ff00000
 8022354:	4090cbff 	.word	0x4090cbff
 8022358:	3f6f3400 	.word	0x3f6f3400
 802235c:	652b82fe 	.word	0x652b82fe
 8022360:	3c971547 	.word	0x3c971547
 8022364:	00000000 	.word	0x00000000

08022368 <__ieee754_rem_pio2>:
 8022368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802236c:	ec55 4b10 	vmov	r4, r5, d0
 8022370:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8022374:	4bca      	ldr	r3, [pc, #808]	; (80226a0 <__ieee754_rem_pio2+0x338>)
 8022376:	4682      	mov	sl, r0
 8022378:	4598      	cmp	r8, r3
 802237a:	ed2d 8b02 	vpush	{d8}
 802237e:	b08b      	sub	sp, #44	; 0x2c
 8022380:	9502      	str	r5, [sp, #8]
 8022382:	dc08      	bgt.n	8022396 <__ieee754_rem_pio2+0x2e>
 8022384:	2200      	movs	r2, #0
 8022386:	2300      	movs	r3, #0
 8022388:	ed80 0b00 	vstr	d0, [r0]
 802238c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8022390:	f04f 0b00 	mov.w	fp, #0
 8022394:	e028      	b.n	80223e8 <__ieee754_rem_pio2+0x80>
 8022396:	4bc3      	ldr	r3, [pc, #780]	; (80226a4 <__ieee754_rem_pio2+0x33c>)
 8022398:	4598      	cmp	r8, r3
 802239a:	dc78      	bgt.n	802248e <__ieee754_rem_pio2+0x126>
 802239c:	9b02      	ldr	r3, [sp, #8]
 802239e:	ee10 0a10 	vmov	r0, s0
 80223a2:	4ec1      	ldr	r6, [pc, #772]	; (80226a8 <__ieee754_rem_pio2+0x340>)
 80223a4:	4629      	mov	r1, r5
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	a3af      	add	r3, pc, #700	; (adr r3, 8022668 <__ieee754_rem_pio2+0x300>)
 80223aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223ae:	dd39      	ble.n	8022424 <__ieee754_rem_pio2+0xbc>
 80223b0:	f7dd ff5c 	bl	800026c <__aeabi_dsub>
 80223b4:	45b0      	cmp	r8, r6
 80223b6:	4604      	mov	r4, r0
 80223b8:	460d      	mov	r5, r1
 80223ba:	d01b      	beq.n	80223f4 <__ieee754_rem_pio2+0x8c>
 80223bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8022670 <__ieee754_rem_pio2+0x308>)
 80223be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223c2:	f7dd ff53 	bl	800026c <__aeabi_dsub>
 80223c6:	4602      	mov	r2, r0
 80223c8:	460b      	mov	r3, r1
 80223ca:	4620      	mov	r0, r4
 80223cc:	4629      	mov	r1, r5
 80223ce:	e9ca 2300 	strd	r2, r3, [sl]
 80223d2:	f7dd ff4b 	bl	800026c <__aeabi_dsub>
 80223d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8022670 <__ieee754_rem_pio2+0x308>)
 80223d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223dc:	f04f 0b01 	mov.w	fp, #1
 80223e0:	f7dd ff44 	bl	800026c <__aeabi_dsub>
 80223e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80223e8:	4658      	mov	r0, fp
 80223ea:	b00b      	add	sp, #44	; 0x2c
 80223ec:	ecbd 8b02 	vpop	{d8}
 80223f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8022678 <__ieee754_rem_pio2+0x310>)
 80223f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223fa:	f7dd ff37 	bl	800026c <__aeabi_dsub>
 80223fe:	4604      	mov	r4, r0
 8022400:	460d      	mov	r5, r1
 8022402:	a39f      	add	r3, pc, #636	; (adr r3, 8022680 <__ieee754_rem_pio2+0x318>)
 8022404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022408:	f7dd ff30 	bl	800026c <__aeabi_dsub>
 802240c:	4602      	mov	r2, r0
 802240e:	460b      	mov	r3, r1
 8022410:	4620      	mov	r0, r4
 8022412:	4629      	mov	r1, r5
 8022414:	e9ca 2300 	strd	r2, r3, [sl]
 8022418:	f7dd ff28 	bl	800026c <__aeabi_dsub>
 802241c:	a398      	add	r3, pc, #608	; (adr r3, 8022680 <__ieee754_rem_pio2+0x318>)
 802241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022422:	e7db      	b.n	80223dc <__ieee754_rem_pio2+0x74>
 8022424:	f7dd ff24 	bl	8000270 <__adddf3>
 8022428:	45b0      	cmp	r8, r6
 802242a:	4604      	mov	r4, r0
 802242c:	460d      	mov	r5, r1
 802242e:	d016      	beq.n	802245e <__ieee754_rem_pio2+0xf6>
 8022430:	a38f      	add	r3, pc, #572	; (adr r3, 8022670 <__ieee754_rem_pio2+0x308>)
 8022432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022436:	f7dd ff1b 	bl	8000270 <__adddf3>
 802243a:	4602      	mov	r2, r0
 802243c:	460b      	mov	r3, r1
 802243e:	4620      	mov	r0, r4
 8022440:	4629      	mov	r1, r5
 8022442:	e9ca 2300 	strd	r2, r3, [sl]
 8022446:	f7dd ff11 	bl	800026c <__aeabi_dsub>
 802244a:	a389      	add	r3, pc, #548	; (adr r3, 8022670 <__ieee754_rem_pio2+0x308>)
 802244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022450:	f7dd ff0e 	bl	8000270 <__adddf3>
 8022454:	f04f 3bff 	mov.w	fp, #4294967295
 8022458:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802245c:	e7c4      	b.n	80223e8 <__ieee754_rem_pio2+0x80>
 802245e:	a386      	add	r3, pc, #536	; (adr r3, 8022678 <__ieee754_rem_pio2+0x310>)
 8022460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022464:	f7dd ff04 	bl	8000270 <__adddf3>
 8022468:	4604      	mov	r4, r0
 802246a:	460d      	mov	r5, r1
 802246c:	a384      	add	r3, pc, #528	; (adr r3, 8022680 <__ieee754_rem_pio2+0x318>)
 802246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022472:	f7dd fefd 	bl	8000270 <__adddf3>
 8022476:	4602      	mov	r2, r0
 8022478:	460b      	mov	r3, r1
 802247a:	4620      	mov	r0, r4
 802247c:	4629      	mov	r1, r5
 802247e:	e9ca 2300 	strd	r2, r3, [sl]
 8022482:	f7dd fef3 	bl	800026c <__aeabi_dsub>
 8022486:	a37e      	add	r3, pc, #504	; (adr r3, 8022680 <__ieee754_rem_pio2+0x318>)
 8022488:	e9d3 2300 	ldrd	r2, r3, [r3]
 802248c:	e7e0      	b.n	8022450 <__ieee754_rem_pio2+0xe8>
 802248e:	4b87      	ldr	r3, [pc, #540]	; (80226ac <__ieee754_rem_pio2+0x344>)
 8022490:	4598      	cmp	r8, r3
 8022492:	f300 80d8 	bgt.w	8022646 <__ieee754_rem_pio2+0x2de>
 8022496:	f000 f96d 	bl	8022774 <fabs>
 802249a:	ee10 0a10 	vmov	r0, s0
 802249e:	ec55 4b10 	vmov	r4, r5, d0
 80224a2:	a379      	add	r3, pc, #484	; (adr r3, 8022688 <__ieee754_rem_pio2+0x320>)
 80224a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224a8:	4629      	mov	r1, r5
 80224aa:	f7de f897 	bl	80005dc <__aeabi_dmul>
 80224ae:	2200      	movs	r2, #0
 80224b0:	4b7f      	ldr	r3, [pc, #508]	; (80226b0 <__ieee754_rem_pio2+0x348>)
 80224b2:	f7dd fedd 	bl	8000270 <__adddf3>
 80224b6:	f7de fb41 	bl	8000b3c <__aeabi_d2iz>
 80224ba:	4683      	mov	fp, r0
 80224bc:	f7de f824 	bl	8000508 <__aeabi_i2d>
 80224c0:	4602      	mov	r2, r0
 80224c2:	460b      	mov	r3, r1
 80224c4:	ec43 2b18 	vmov	d8, r2, r3
 80224c8:	a367      	add	r3, pc, #412	; (adr r3, 8022668 <__ieee754_rem_pio2+0x300>)
 80224ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224ce:	f7de f885 	bl	80005dc <__aeabi_dmul>
 80224d2:	4602      	mov	r2, r0
 80224d4:	460b      	mov	r3, r1
 80224d6:	4620      	mov	r0, r4
 80224d8:	4629      	mov	r1, r5
 80224da:	f7dd fec7 	bl	800026c <__aeabi_dsub>
 80224de:	4606      	mov	r6, r0
 80224e0:	460f      	mov	r7, r1
 80224e2:	a363      	add	r3, pc, #396	; (adr r3, 8022670 <__ieee754_rem_pio2+0x308>)
 80224e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224e8:	ec51 0b18 	vmov	r0, r1, d8
 80224ec:	f7de f876 	bl	80005dc <__aeabi_dmul>
 80224f0:	f1bb 0f1f 	cmp.w	fp, #31
 80224f4:	4604      	mov	r4, r0
 80224f6:	460d      	mov	r5, r1
 80224f8:	dc0d      	bgt.n	8022516 <__ieee754_rem_pio2+0x1ae>
 80224fa:	f10b 32ff 	add.w	r2, fp, #4294967295
 80224fe:	4b6d      	ldr	r3, [pc, #436]	; (80226b4 <__ieee754_rem_pio2+0x34c>)
 8022500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022504:	4543      	cmp	r3, r8
 8022506:	d006      	beq.n	8022516 <__ieee754_rem_pio2+0x1ae>
 8022508:	4622      	mov	r2, r4
 802250a:	462b      	mov	r3, r5
 802250c:	4630      	mov	r0, r6
 802250e:	4639      	mov	r1, r7
 8022510:	f7dd feac 	bl	800026c <__aeabi_dsub>
 8022514:	e00e      	b.n	8022534 <__ieee754_rem_pio2+0x1cc>
 8022516:	462b      	mov	r3, r5
 8022518:	4622      	mov	r2, r4
 802251a:	4630      	mov	r0, r6
 802251c:	4639      	mov	r1, r7
 802251e:	f7dd fea5 	bl	800026c <__aeabi_dsub>
 8022522:	ea4f 5328 	mov.w	r3, r8, asr #20
 8022526:	9303      	str	r3, [sp, #12]
 8022528:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802252c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8022530:	2b10      	cmp	r3, #16
 8022532:	dc02      	bgt.n	802253a <__ieee754_rem_pio2+0x1d2>
 8022534:	e9ca 0100 	strd	r0, r1, [sl]
 8022538:	e039      	b.n	80225ae <__ieee754_rem_pio2+0x246>
 802253a:	a34f      	add	r3, pc, #316	; (adr r3, 8022678 <__ieee754_rem_pio2+0x310>)
 802253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022540:	ec51 0b18 	vmov	r0, r1, d8
 8022544:	f7de f84a 	bl	80005dc <__aeabi_dmul>
 8022548:	4604      	mov	r4, r0
 802254a:	460d      	mov	r5, r1
 802254c:	4602      	mov	r2, r0
 802254e:	460b      	mov	r3, r1
 8022550:	4630      	mov	r0, r6
 8022552:	4639      	mov	r1, r7
 8022554:	f7dd fe8a 	bl	800026c <__aeabi_dsub>
 8022558:	4602      	mov	r2, r0
 802255a:	460b      	mov	r3, r1
 802255c:	4680      	mov	r8, r0
 802255e:	4689      	mov	r9, r1
 8022560:	4630      	mov	r0, r6
 8022562:	4639      	mov	r1, r7
 8022564:	f7dd fe82 	bl	800026c <__aeabi_dsub>
 8022568:	4622      	mov	r2, r4
 802256a:	462b      	mov	r3, r5
 802256c:	f7dd fe7e 	bl	800026c <__aeabi_dsub>
 8022570:	4604      	mov	r4, r0
 8022572:	460d      	mov	r5, r1
 8022574:	a342      	add	r3, pc, #264	; (adr r3, 8022680 <__ieee754_rem_pio2+0x318>)
 8022576:	e9d3 2300 	ldrd	r2, r3, [r3]
 802257a:	ec51 0b18 	vmov	r0, r1, d8
 802257e:	f7de f82d 	bl	80005dc <__aeabi_dmul>
 8022582:	4622      	mov	r2, r4
 8022584:	462b      	mov	r3, r5
 8022586:	f7dd fe71 	bl	800026c <__aeabi_dsub>
 802258a:	4602      	mov	r2, r0
 802258c:	460b      	mov	r3, r1
 802258e:	4604      	mov	r4, r0
 8022590:	460d      	mov	r5, r1
 8022592:	4640      	mov	r0, r8
 8022594:	4649      	mov	r1, r9
 8022596:	f7dd fe69 	bl	800026c <__aeabi_dsub>
 802259a:	9a03      	ldr	r2, [sp, #12]
 802259c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80225a0:	1ad3      	subs	r3, r2, r3
 80225a2:	2b31      	cmp	r3, #49	; 0x31
 80225a4:	dc24      	bgt.n	80225f0 <__ieee754_rem_pio2+0x288>
 80225a6:	4646      	mov	r6, r8
 80225a8:	464f      	mov	r7, r9
 80225aa:	e9ca 0100 	strd	r0, r1, [sl]
 80225ae:	e9da 8900 	ldrd	r8, r9, [sl]
 80225b2:	4630      	mov	r0, r6
 80225b4:	4639      	mov	r1, r7
 80225b6:	4642      	mov	r2, r8
 80225b8:	464b      	mov	r3, r9
 80225ba:	f7dd fe57 	bl	800026c <__aeabi_dsub>
 80225be:	462b      	mov	r3, r5
 80225c0:	4622      	mov	r2, r4
 80225c2:	f7dd fe53 	bl	800026c <__aeabi_dsub>
 80225c6:	9b02      	ldr	r3, [sp, #8]
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80225ce:	f6bf af0b 	bge.w	80223e8 <__ieee754_rem_pio2+0x80>
 80225d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80225d6:	f8ca 8000 	str.w	r8, [sl]
 80225da:	f8ca 0008 	str.w	r0, [sl, #8]
 80225de:	f8ca 3004 	str.w	r3, [sl, #4]
 80225e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80225e6:	f8ca 300c 	str.w	r3, [sl, #12]
 80225ea:	f1cb 0b00 	rsb	fp, fp, #0
 80225ee:	e6fb      	b.n	80223e8 <__ieee754_rem_pio2+0x80>
 80225f0:	a327      	add	r3, pc, #156	; (adr r3, 8022690 <__ieee754_rem_pio2+0x328>)
 80225f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225f6:	ec51 0b18 	vmov	r0, r1, d8
 80225fa:	f7dd ffef 	bl	80005dc <__aeabi_dmul>
 80225fe:	4604      	mov	r4, r0
 8022600:	460d      	mov	r5, r1
 8022602:	4602      	mov	r2, r0
 8022604:	460b      	mov	r3, r1
 8022606:	4640      	mov	r0, r8
 8022608:	4649      	mov	r1, r9
 802260a:	f7dd fe2f 	bl	800026c <__aeabi_dsub>
 802260e:	4602      	mov	r2, r0
 8022610:	460b      	mov	r3, r1
 8022612:	4606      	mov	r6, r0
 8022614:	460f      	mov	r7, r1
 8022616:	4640      	mov	r0, r8
 8022618:	4649      	mov	r1, r9
 802261a:	f7dd fe27 	bl	800026c <__aeabi_dsub>
 802261e:	4622      	mov	r2, r4
 8022620:	462b      	mov	r3, r5
 8022622:	f7dd fe23 	bl	800026c <__aeabi_dsub>
 8022626:	4604      	mov	r4, r0
 8022628:	460d      	mov	r5, r1
 802262a:	a31b      	add	r3, pc, #108	; (adr r3, 8022698 <__ieee754_rem_pio2+0x330>)
 802262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022630:	ec51 0b18 	vmov	r0, r1, d8
 8022634:	f7dd ffd2 	bl	80005dc <__aeabi_dmul>
 8022638:	4622      	mov	r2, r4
 802263a:	462b      	mov	r3, r5
 802263c:	f7dd fe16 	bl	800026c <__aeabi_dsub>
 8022640:	4604      	mov	r4, r0
 8022642:	460d      	mov	r5, r1
 8022644:	e760      	b.n	8022508 <__ieee754_rem_pio2+0x1a0>
 8022646:	4b1c      	ldr	r3, [pc, #112]	; (80226b8 <__ieee754_rem_pio2+0x350>)
 8022648:	4598      	cmp	r8, r3
 802264a:	dd37      	ble.n	80226bc <__ieee754_rem_pio2+0x354>
 802264c:	ee10 2a10 	vmov	r2, s0
 8022650:	462b      	mov	r3, r5
 8022652:	4620      	mov	r0, r4
 8022654:	4629      	mov	r1, r5
 8022656:	f7dd fe09 	bl	800026c <__aeabi_dsub>
 802265a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802265e:	e9ca 0100 	strd	r0, r1, [sl]
 8022662:	e695      	b.n	8022390 <__ieee754_rem_pio2+0x28>
 8022664:	f3af 8000 	nop.w
 8022668:	54400000 	.word	0x54400000
 802266c:	3ff921fb 	.word	0x3ff921fb
 8022670:	1a626331 	.word	0x1a626331
 8022674:	3dd0b461 	.word	0x3dd0b461
 8022678:	1a600000 	.word	0x1a600000
 802267c:	3dd0b461 	.word	0x3dd0b461
 8022680:	2e037073 	.word	0x2e037073
 8022684:	3ba3198a 	.word	0x3ba3198a
 8022688:	6dc9c883 	.word	0x6dc9c883
 802268c:	3fe45f30 	.word	0x3fe45f30
 8022690:	2e000000 	.word	0x2e000000
 8022694:	3ba3198a 	.word	0x3ba3198a
 8022698:	252049c1 	.word	0x252049c1
 802269c:	397b839a 	.word	0x397b839a
 80226a0:	3fe921fb 	.word	0x3fe921fb
 80226a4:	4002d97b 	.word	0x4002d97b
 80226a8:	3ff921fb 	.word	0x3ff921fb
 80226ac:	413921fb 	.word	0x413921fb
 80226b0:	3fe00000 	.word	0x3fe00000
 80226b4:	08025a18 	.word	0x08025a18
 80226b8:	7fefffff 	.word	0x7fefffff
 80226bc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80226c0:	4620      	mov	r0, r4
 80226c2:	2703      	movs	r7, #3
 80226c4:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80226c8:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80226cc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80226d0:	460d      	mov	r5, r1
 80226d2:	f7de fa33 	bl	8000b3c <__aeabi_d2iz>
 80226d6:	f7dd ff17 	bl	8000508 <__aeabi_i2d>
 80226da:	4602      	mov	r2, r0
 80226dc:	460b      	mov	r3, r1
 80226de:	4620      	mov	r0, r4
 80226e0:	4629      	mov	r1, r5
 80226e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80226e6:	f7dd fdc1 	bl	800026c <__aeabi_dsub>
 80226ea:	2200      	movs	r2, #0
 80226ec:	4b1f      	ldr	r3, [pc, #124]	; (802276c <__ieee754_rem_pio2+0x404>)
 80226ee:	f7dd ff75 	bl	80005dc <__aeabi_dmul>
 80226f2:	460d      	mov	r5, r1
 80226f4:	4604      	mov	r4, r0
 80226f6:	f7de fa21 	bl	8000b3c <__aeabi_d2iz>
 80226fa:	f7dd ff05 	bl	8000508 <__aeabi_i2d>
 80226fe:	4602      	mov	r2, r0
 8022700:	460b      	mov	r3, r1
 8022702:	4620      	mov	r0, r4
 8022704:	4629      	mov	r1, r5
 8022706:	2400      	movs	r4, #0
 8022708:	2500      	movs	r5, #0
 802270a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802270e:	f7dd fdad 	bl	800026c <__aeabi_dsub>
 8022712:	2200      	movs	r2, #0
 8022714:	4b15      	ldr	r3, [pc, #84]	; (802276c <__ieee754_rem_pio2+0x404>)
 8022716:	f7dd ff61 	bl	80005dc <__aeabi_dmul>
 802271a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802271e:	4622      	mov	r2, r4
 8022720:	462b      	mov	r3, r5
 8022722:	46b9      	mov	r9, r7
 8022724:	3f01      	subs	r7, #1
 8022726:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 802272a:	f7de f9bf 	bl	8000aac <__aeabi_dcmpeq>
 802272e:	2800      	cmp	r0, #0
 8022730:	d1f5      	bne.n	802271e <__ieee754_rem_pio2+0x3b6>
 8022732:	4b0f      	ldr	r3, [pc, #60]	; (8022770 <__ieee754_rem_pio2+0x408>)
 8022734:	4632      	mov	r2, r6
 8022736:	4651      	mov	r1, sl
 8022738:	a804      	add	r0, sp, #16
 802273a:	9301      	str	r3, [sp, #4]
 802273c:	2302      	movs	r3, #2
 802273e:	9300      	str	r3, [sp, #0]
 8022740:	464b      	mov	r3, r9
 8022742:	f000 fc1d 	bl	8022f80 <__kernel_rem_pio2>
 8022746:	9b02      	ldr	r3, [sp, #8]
 8022748:	4683      	mov	fp, r0
 802274a:	2b00      	cmp	r3, #0
 802274c:	f6bf ae4c 	bge.w	80223e8 <__ieee754_rem_pio2+0x80>
 8022750:	e9da 2100 	ldrd	r2, r1, [sl]
 8022754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022758:	e9ca 2300 	strd	r2, r3, [sl]
 802275c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8022760:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022764:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8022768:	e73f      	b.n	80225ea <__ieee754_rem_pio2+0x282>
 802276a:	bf00      	nop
 802276c:	41700000 	.word	0x41700000
 8022770:	08025a98 	.word	0x08025a98

08022774 <fabs>:
 8022774:	ec51 0b10 	vmov	r0, r1, d0
 8022778:	ee10 2a10 	vmov	r2, s0
 802277c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022780:	ec43 2b10 	vmov	d0, r2, r3
 8022784:	4770      	bx	lr
	...

08022788 <__kernel_cosf>:
 8022788:	ee10 3a10 	vmov	r3, s0
 802278c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022794:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022798:	da05      	bge.n	80227a6 <__kernel_cosf+0x1e>
 802279a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802279e:	ee17 2a90 	vmov	r2, s15
 80227a2:	2a00      	cmp	r2, #0
 80227a4:	d03b      	beq.n	802281e <__kernel_cosf+0x96>
 80227a6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80227aa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8022824 <__kernel_cosf+0x9c>
 80227ae:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8022828 <__kernel_cosf+0xa0>
 80227b2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80227b6:	4a1d      	ldr	r2, [pc, #116]	; (802282c <__kernel_cosf+0xa4>)
 80227b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80227bc:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8022830 <__kernel_cosf+0xa8>
 80227c0:	4293      	cmp	r3, r2
 80227c2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80227c6:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8022834 <__kernel_cosf+0xac>
 80227ca:	eea7 6a87 	vfma.f32	s12, s15, s14
 80227ce:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8022838 <__kernel_cosf+0xb0>
 80227d2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80227d6:	ed9f 6a19 	vldr	s12, [pc, #100]	; 802283c <__kernel_cosf+0xb4>
 80227da:	eea7 6a87 	vfma.f32	s12, s15, s14
 80227de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80227e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80227e6:	ee26 6a07 	vmul.f32	s12, s12, s14
 80227ea:	eee7 0a06 	vfma.f32	s1, s14, s12
 80227ee:	dc04      	bgt.n	80227fa <__kernel_cosf+0x72>
 80227f0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80227f4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80227f8:	4770      	bx	lr
 80227fa:	4a11      	ldr	r2, [pc, #68]	; (8022840 <__kernel_cosf+0xb8>)
 80227fc:	4293      	cmp	r3, r2
 80227fe:	bfd6      	itet	le
 8022800:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8022804:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8022808:	ee07 3a10 	vmovle	s14, r3
 802280c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022810:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8022814:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8022818:	ee30 0a67 	vsub.f32	s0, s0, s15
 802281c:	4770      	bx	lr
 802281e:	eeb0 0a66 	vmov.f32	s0, s13
 8022822:	4770      	bx	lr
 8022824:	ad47d74e 	.word	0xad47d74e
 8022828:	310f74f6 	.word	0x310f74f6
 802282c:	3e999999 	.word	0x3e999999
 8022830:	b493f27c 	.word	0xb493f27c
 8022834:	37d00d01 	.word	0x37d00d01
 8022838:	bab60b61 	.word	0xbab60b61
 802283c:	3d2aaaab 	.word	0x3d2aaaab
 8022840:	3f480000 	.word	0x3f480000

08022844 <__kernel_sinf>:
 8022844:	ee10 3a10 	vmov	r3, s0
 8022848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802284c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022850:	da04      	bge.n	802285c <__kernel_sinf+0x18>
 8022852:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022856:	ee17 3a90 	vmov	r3, s15
 802285a:	b35b      	cbz	r3, 80228b4 <__kernel_sinf+0x70>
 802285c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022860:	eddf 7a15 	vldr	s15, [pc, #84]	; 80228b8 <__kernel_sinf+0x74>
 8022864:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80228bc <__kernel_sinf+0x78>
 8022868:	eea7 6a27 	vfma.f32	s12, s14, s15
 802286c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80228c0 <__kernel_sinf+0x7c>
 8022870:	ee60 6a07 	vmul.f32	s13, s0, s14
 8022874:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022878:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80228c4 <__kernel_sinf+0x80>
 802287c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022880:	eddf 7a11 	vldr	s15, [pc, #68]	; 80228c8 <__kernel_sinf+0x84>
 8022884:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022888:	b930      	cbnz	r0, 8022898 <__kernel_sinf+0x54>
 802288a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80228cc <__kernel_sinf+0x88>
 802288e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022892:	eea6 0a26 	vfma.f32	s0, s12, s13
 8022896:	4770      	bx	lr
 8022898:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802289c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80228a0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80228a4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80228a8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80228d0 <__kernel_sinf+0x8c>
 80228ac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80228b0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80228b4:	4770      	bx	lr
 80228b6:	bf00      	nop
 80228b8:	2f2ec9d3 	.word	0x2f2ec9d3
 80228bc:	b2d72f34 	.word	0xb2d72f34
 80228c0:	3638ef1b 	.word	0x3638ef1b
 80228c4:	b9500d01 	.word	0xb9500d01
 80228c8:	3c088889 	.word	0x3c088889
 80228cc:	be2aaaab 	.word	0xbe2aaaab
 80228d0:	3e2aaaab 	.word	0x3e2aaaab

080228d4 <__ieee754_atan2f>:
 80228d4:	ee10 2a90 	vmov	r2, s1
 80228d8:	eef0 7a40 	vmov.f32	s15, s0
 80228dc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80228e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80228e4:	b510      	push	{r4, lr}
 80228e6:	dc06      	bgt.n	80228f6 <__ieee754_atan2f+0x22>
 80228e8:	ee10 0a10 	vmov	r0, s0
 80228ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80228f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80228f4:	dd04      	ble.n	8022900 <__ieee754_atan2f+0x2c>
 80228f6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80228fa:	eeb0 0a67 	vmov.f32	s0, s15
 80228fe:	bd10      	pop	{r4, pc}
 8022900:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8022904:	d103      	bne.n	802290e <__ieee754_atan2f+0x3a>
 8022906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802290a:	f000 b9ab 	b.w	8022c64 <atanf>
 802290e:	1794      	asrs	r4, r2, #30
 8022910:	f004 0402 	and.w	r4, r4, #2
 8022914:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022918:	b93b      	cbnz	r3, 802292a <__ieee754_atan2f+0x56>
 802291a:	2c02      	cmp	r4, #2
 802291c:	d05c      	beq.n	80229d8 <__ieee754_atan2f+0x104>
 802291e:	2c03      	cmp	r4, #3
 8022920:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80229ec <__ieee754_atan2f+0x118>
 8022924:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8022928:	e7e7      	b.n	80228fa <__ieee754_atan2f+0x26>
 802292a:	b939      	cbnz	r1, 802293c <__ieee754_atan2f+0x68>
 802292c:	2800      	cmp	r0, #0
 802292e:	eddf 7a30 	vldr	s15, [pc, #192]	; 80229f0 <__ieee754_atan2f+0x11c>
 8022932:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80229f4 <__ieee754_atan2f+0x120>
 8022936:	fe67 7a87 	vselge.f32	s15, s15, s14
 802293a:	e7de      	b.n	80228fa <__ieee754_atan2f+0x26>
 802293c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022940:	d110      	bne.n	8022964 <__ieee754_atan2f+0x90>
 8022942:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022946:	f104 34ff 	add.w	r4, r4, #4294967295
 802294a:	d107      	bne.n	802295c <__ieee754_atan2f+0x88>
 802294c:	2c02      	cmp	r4, #2
 802294e:	d846      	bhi.n	80229de <__ieee754_atan2f+0x10a>
 8022950:	4b29      	ldr	r3, [pc, #164]	; (80229f8 <__ieee754_atan2f+0x124>)
 8022952:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022956:	edd3 7a00 	vldr	s15, [r3]
 802295a:	e7ce      	b.n	80228fa <__ieee754_atan2f+0x26>
 802295c:	2c02      	cmp	r4, #2
 802295e:	d841      	bhi.n	80229e4 <__ieee754_atan2f+0x110>
 8022960:	4b26      	ldr	r3, [pc, #152]	; (80229fc <__ieee754_atan2f+0x128>)
 8022962:	e7f6      	b.n	8022952 <__ieee754_atan2f+0x7e>
 8022964:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022968:	d0e0      	beq.n	802292c <__ieee754_atan2f+0x58>
 802296a:	1a5b      	subs	r3, r3, r1
 802296c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8022970:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022974:	da1a      	bge.n	80229ac <__ieee754_atan2f+0xd8>
 8022976:	2a00      	cmp	r2, #0
 8022978:	da01      	bge.n	802297e <__ieee754_atan2f+0xaa>
 802297a:	313c      	adds	r1, #60	; 0x3c
 802297c:	db19      	blt.n	80229b2 <__ieee754_atan2f+0xde>
 802297e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022982:	f000 fa43 	bl	8022e0c <fabsf>
 8022986:	f000 f96d 	bl	8022c64 <atanf>
 802298a:	eef0 7a40 	vmov.f32	s15, s0
 802298e:	2c01      	cmp	r4, #1
 8022990:	d012      	beq.n	80229b8 <__ieee754_atan2f+0xe4>
 8022992:	2c02      	cmp	r4, #2
 8022994:	d017      	beq.n	80229c6 <__ieee754_atan2f+0xf2>
 8022996:	2c00      	cmp	r4, #0
 8022998:	d0af      	beq.n	80228fa <__ieee754_atan2f+0x26>
 802299a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8022a00 <__ieee754_atan2f+0x12c>
 802299e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80229a2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8022a04 <__ieee754_atan2f+0x130>
 80229a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80229aa:	e7a6      	b.n	80228fa <__ieee754_atan2f+0x26>
 80229ac:	eddf 7a10 	vldr	s15, [pc, #64]	; 80229f0 <__ieee754_atan2f+0x11c>
 80229b0:	e7ed      	b.n	802298e <__ieee754_atan2f+0xba>
 80229b2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8022a08 <__ieee754_atan2f+0x134>
 80229b6:	e7ea      	b.n	802298e <__ieee754_atan2f+0xba>
 80229b8:	ee17 3a90 	vmov	r3, s15
 80229bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80229c0:	ee07 3a90 	vmov	s15, r3
 80229c4:	e799      	b.n	80228fa <__ieee754_atan2f+0x26>
 80229c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8022a00 <__ieee754_atan2f+0x12c>
 80229ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80229ce:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8022a04 <__ieee754_atan2f+0x130>
 80229d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80229d6:	e790      	b.n	80228fa <__ieee754_atan2f+0x26>
 80229d8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8022a04 <__ieee754_atan2f+0x130>
 80229dc:	e78d      	b.n	80228fa <__ieee754_atan2f+0x26>
 80229de:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8022a0c <__ieee754_atan2f+0x138>
 80229e2:	e78a      	b.n	80228fa <__ieee754_atan2f+0x26>
 80229e4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8022a08 <__ieee754_atan2f+0x134>
 80229e8:	e787      	b.n	80228fa <__ieee754_atan2f+0x26>
 80229ea:	bf00      	nop
 80229ec:	c0490fdb 	.word	0xc0490fdb
 80229f0:	3fc90fdb 	.word	0x3fc90fdb
 80229f4:	bfc90fdb 	.word	0xbfc90fdb
 80229f8:	08025ba0 	.word	0x08025ba0
 80229fc:	08025bac 	.word	0x08025bac
 8022a00:	33bbbd2e 	.word	0x33bbbd2e
 8022a04:	40490fdb 	.word	0x40490fdb
 8022a08:	00000000 	.word	0x00000000
 8022a0c:	3f490fdb 	.word	0x3f490fdb

08022a10 <__ieee754_rem_pio2f>:
 8022a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a12:	ee10 6a10 	vmov	r6, s0
 8022a16:	4b85      	ldr	r3, [pc, #532]	; (8022c2c <__ieee754_rem_pio2f+0x21c>)
 8022a18:	b087      	sub	sp, #28
 8022a1a:	4604      	mov	r4, r0
 8022a1c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8022a20:	429d      	cmp	r5, r3
 8022a22:	dc05      	bgt.n	8022a30 <__ieee754_rem_pio2f+0x20>
 8022a24:	2300      	movs	r3, #0
 8022a26:	ed80 0a00 	vstr	s0, [r0]
 8022a2a:	6043      	str	r3, [r0, #4]
 8022a2c:	2000      	movs	r0, #0
 8022a2e:	e020      	b.n	8022a72 <__ieee754_rem_pio2f+0x62>
 8022a30:	4b7f      	ldr	r3, [pc, #508]	; (8022c30 <__ieee754_rem_pio2f+0x220>)
 8022a32:	429d      	cmp	r5, r3
 8022a34:	dc38      	bgt.n	8022aa8 <__ieee754_rem_pio2f+0x98>
 8022a36:	2e00      	cmp	r6, #0
 8022a38:	f025 050f 	bic.w	r5, r5, #15
 8022a3c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8022c34 <__ieee754_rem_pio2f+0x224>
 8022a40:	4b7d      	ldr	r3, [pc, #500]	; (8022c38 <__ieee754_rem_pio2f+0x228>)
 8022a42:	dd18      	ble.n	8022a76 <__ieee754_rem_pio2f+0x66>
 8022a44:	429d      	cmp	r5, r3
 8022a46:	ee70 7a47 	vsub.f32	s15, s0, s14
 8022a4a:	bf09      	itett	eq
 8022a4c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8022c3c <__ieee754_rem_pio2f+0x22c>
 8022a50:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 8022c40 <__ieee754_rem_pio2f+0x230>
 8022a54:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8022a58:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 8022c44 <__ieee754_rem_pio2f+0x234>
 8022a5c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8022a60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022a64:	edc0 6a00 	vstr	s13, [r0]
 8022a68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022a6c:	edc0 7a01 	vstr	s15, [r0, #4]
 8022a70:	2001      	movs	r0, #1
 8022a72:	b007      	add	sp, #28
 8022a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a76:	429d      	cmp	r5, r3
 8022a78:	ee70 7a07 	vadd.f32	s15, s0, s14
 8022a7c:	bf09      	itett	eq
 8022a7e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8022c3c <__ieee754_rem_pio2f+0x22c>
 8022a82:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 8022c40 <__ieee754_rem_pio2f+0x230>
 8022a86:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8022a8a:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 8022c44 <__ieee754_rem_pio2f+0x234>
 8022a8e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8022a92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022a96:	edc0 6a00 	vstr	s13, [r0]
 8022a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022a9e:	edc0 7a01 	vstr	s15, [r0, #4]
 8022aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8022aa6:	e7e4      	b.n	8022a72 <__ieee754_rem_pio2f+0x62>
 8022aa8:	4b67      	ldr	r3, [pc, #412]	; (8022c48 <__ieee754_rem_pio2f+0x238>)
 8022aaa:	429d      	cmp	r5, r3
 8022aac:	dc70      	bgt.n	8022b90 <__ieee754_rem_pio2f+0x180>
 8022aae:	f000 f9ad 	bl	8022e0c <fabsf>
 8022ab2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022ab6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8022c4c <__ieee754_rem_pio2f+0x23c>
 8022aba:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022ac6:	ee17 0a90 	vmov	r0, s15
 8022aca:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8022c34 <__ieee754_rem_pio2f+0x224>
 8022ace:	281f      	cmp	r0, #31
 8022ad0:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022ad4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8022c40 <__ieee754_rem_pio2f+0x230>
 8022ad8:	eeb1 6a47 	vneg.f32	s12, s14
 8022adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022ae0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022ae4:	ee16 2a90 	vmov	r2, s13
 8022ae8:	dc1c      	bgt.n	8022b24 <__ieee754_rem_pio2f+0x114>
 8022aea:	1e47      	subs	r7, r0, #1
 8022aec:	4958      	ldr	r1, [pc, #352]	; (8022c50 <__ieee754_rem_pio2f+0x240>)
 8022aee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8022af2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8022af6:	428b      	cmp	r3, r1
 8022af8:	d014      	beq.n	8022b24 <__ieee754_rem_pio2f+0x114>
 8022afa:	6022      	str	r2, [r4, #0]
 8022afc:	ed94 7a00 	vldr	s14, [r4]
 8022b00:	2e00      	cmp	r6, #0
 8022b02:	ee30 0a47 	vsub.f32	s0, s0, s14
 8022b06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022b0a:	ed84 0a01 	vstr	s0, [r4, #4]
 8022b0e:	dab0      	bge.n	8022a72 <__ieee754_rem_pio2f+0x62>
 8022b10:	eeb1 7a47 	vneg.f32	s14, s14
 8022b14:	eeb1 0a40 	vneg.f32	s0, s0
 8022b18:	ed84 7a00 	vstr	s14, [r4]
 8022b1c:	ed84 0a01 	vstr	s0, [r4, #4]
 8022b20:	4240      	negs	r0, r0
 8022b22:	e7a6      	b.n	8022a72 <__ieee754_rem_pio2f+0x62>
 8022b24:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8022b28:	15eb      	asrs	r3, r5, #23
 8022b2a:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8022b2e:	2908      	cmp	r1, #8
 8022b30:	dde3      	ble.n	8022afa <__ieee754_rem_pio2f+0xea>
 8022b32:	eef0 6a40 	vmov.f32	s13, s0
 8022b36:	eddf 5a41 	vldr	s11, [pc, #260]	; 8022c3c <__ieee754_rem_pio2f+0x22c>
 8022b3a:	eee6 6a25 	vfma.f32	s13, s12, s11
 8022b3e:	ee70 7a66 	vsub.f32	s15, s0, s13
 8022b42:	eee6 7a25 	vfma.f32	s15, s12, s11
 8022b46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8022c44 <__ieee754_rem_pio2f+0x234>
 8022b4a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8022b4e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8022b52:	ee15 2a90 	vmov	r2, s11
 8022b56:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8022b5a:	1a5b      	subs	r3, r3, r1
 8022b5c:	2b19      	cmp	r3, #25
 8022b5e:	dc04      	bgt.n	8022b6a <__ieee754_rem_pio2f+0x15a>
 8022b60:	eeb0 0a66 	vmov.f32	s0, s13
 8022b64:	edc4 5a00 	vstr	s11, [r4]
 8022b68:	e7c8      	b.n	8022afc <__ieee754_rem_pio2f+0xec>
 8022b6a:	eeb0 0a66 	vmov.f32	s0, s13
 8022b6e:	eddf 5a39 	vldr	s11, [pc, #228]	; 8022c54 <__ieee754_rem_pio2f+0x244>
 8022b72:	eea6 0a25 	vfma.f32	s0, s12, s11
 8022b76:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8022b7a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8022c58 <__ieee754_rem_pio2f+0x248>
 8022b7e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8022b82:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8022b86:	ee30 7a67 	vsub.f32	s14, s0, s15
 8022b8a:	ed84 7a00 	vstr	s14, [r4]
 8022b8e:	e7b5      	b.n	8022afc <__ieee754_rem_pio2f+0xec>
 8022b90:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8022b94:	db06      	blt.n	8022ba4 <__ieee754_rem_pio2f+0x194>
 8022b96:	ee70 7a40 	vsub.f32	s15, s0, s0
 8022b9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8022b9e:	edc0 7a00 	vstr	s15, [r0]
 8022ba2:	e743      	b.n	8022a2c <__ieee754_rem_pio2f+0x1c>
 8022ba4:	15ea      	asrs	r2, r5, #23
 8022ba6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8022c5c <__ieee754_rem_pio2f+0x24c>
 8022baa:	3a86      	subs	r2, #134	; 0x86
 8022bac:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8022bb0:	ee07 3a90 	vmov	s15, r3
 8022bb4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022bb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022bc0:	ed8d 7a03 	vstr	s14, [sp, #12]
 8022bc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022bc8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022bcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022bd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022bd4:	ed8d 7a04 	vstr	s14, [sp, #16]
 8022bd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022bdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8022be0:	edcd 7a05 	vstr	s15, [sp, #20]
 8022be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022be8:	d11e      	bne.n	8022c28 <__ieee754_rem_pio2f+0x218>
 8022bea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8022bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bf2:	bf14      	ite	ne
 8022bf4:	2302      	movne	r3, #2
 8022bf6:	2301      	moveq	r3, #1
 8022bf8:	4919      	ldr	r1, [pc, #100]	; (8022c60 <__ieee754_rem_pio2f+0x250>)
 8022bfa:	a803      	add	r0, sp, #12
 8022bfc:	9101      	str	r1, [sp, #4]
 8022bfe:	2102      	movs	r1, #2
 8022c00:	9100      	str	r1, [sp, #0]
 8022c02:	4621      	mov	r1, r4
 8022c04:	f000 fd0e 	bl	8023624 <__kernel_rem_pio2f>
 8022c08:	2e00      	cmp	r6, #0
 8022c0a:	f6bf af32 	bge.w	8022a72 <__ieee754_rem_pio2f+0x62>
 8022c0e:	edd4 7a00 	vldr	s15, [r4]
 8022c12:	eef1 7a67 	vneg.f32	s15, s15
 8022c16:	edc4 7a00 	vstr	s15, [r4]
 8022c1a:	edd4 7a01 	vldr	s15, [r4, #4]
 8022c1e:	eef1 7a67 	vneg.f32	s15, s15
 8022c22:	edc4 7a01 	vstr	s15, [r4, #4]
 8022c26:	e77b      	b.n	8022b20 <__ieee754_rem_pio2f+0x110>
 8022c28:	2303      	movs	r3, #3
 8022c2a:	e7e5      	b.n	8022bf8 <__ieee754_rem_pio2f+0x1e8>
 8022c2c:	3f490fd8 	.word	0x3f490fd8
 8022c30:	4016cbe3 	.word	0x4016cbe3
 8022c34:	3fc90f80 	.word	0x3fc90f80
 8022c38:	3fc90fd0 	.word	0x3fc90fd0
 8022c3c:	37354400 	.word	0x37354400
 8022c40:	37354443 	.word	0x37354443
 8022c44:	2e85a308 	.word	0x2e85a308
 8022c48:	43490f80 	.word	0x43490f80
 8022c4c:	3f22f984 	.word	0x3f22f984
 8022c50:	08025bb8 	.word	0x08025bb8
 8022c54:	2e85a300 	.word	0x2e85a300
 8022c58:	248d3132 	.word	0x248d3132
 8022c5c:	43800000 	.word	0x43800000
 8022c60:	08025c38 	.word	0x08025c38

08022c64 <atanf>:
 8022c64:	b538      	push	{r3, r4, r5, lr}
 8022c66:	ee10 5a10 	vmov	r5, s0
 8022c6a:	eef0 7a40 	vmov.f32	s15, s0
 8022c6e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8022c72:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8022c76:	db0f      	blt.n	8022c98 <atanf+0x34>
 8022c78:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8022c7c:	dd04      	ble.n	8022c88 <atanf+0x24>
 8022c7e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8022c82:	eeb0 0a67 	vmov.f32	s0, s15
 8022c86:	bd38      	pop	{r3, r4, r5, pc}
 8022c88:	2d00      	cmp	r5, #0
 8022c8a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8022dc0 <atanf+0x15c>
 8022c8e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8022dc4 <atanf+0x160>
 8022c92:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8022c96:	e7f4      	b.n	8022c82 <atanf+0x1e>
 8022c98:	4b4b      	ldr	r3, [pc, #300]	; (8022dc8 <atanf+0x164>)
 8022c9a:	429c      	cmp	r4, r3
 8022c9c:	dc10      	bgt.n	8022cc0 <atanf+0x5c>
 8022c9e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8022ca2:	da0a      	bge.n	8022cba <atanf+0x56>
 8022ca4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8022dcc <atanf+0x168>
 8022ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022cac:	ee30 7a07 	vadd.f32	s14, s0, s14
 8022cb0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8022cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cb8:	dce3      	bgt.n	8022c82 <atanf+0x1e>
 8022cba:	f04f 33ff 	mov.w	r3, #4294967295
 8022cbe:	e013      	b.n	8022ce8 <atanf+0x84>
 8022cc0:	f000 f8a4 	bl	8022e0c <fabsf>
 8022cc4:	4b42      	ldr	r3, [pc, #264]	; (8022dd0 <atanf+0x16c>)
 8022cc6:	429c      	cmp	r4, r3
 8022cc8:	dc4f      	bgt.n	8022d6a <atanf+0x106>
 8022cca:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8022cce:	429c      	cmp	r4, r3
 8022cd0:	dc41      	bgt.n	8022d56 <atanf+0xf2>
 8022cd2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8022cd6:	2300      	movs	r3, #0
 8022cd8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022cdc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022ce0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022ce4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022ce8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8022dd4 <atanf+0x170>
 8022cec:	1c5a      	adds	r2, r3, #1
 8022cee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8022dd8 <atanf+0x174>
 8022cf2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8022ddc <atanf+0x178>
 8022cf6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8022cfa:	ee66 6a06 	vmul.f32	s13, s12, s12
 8022cfe:	eee6 5a87 	vfma.f32	s11, s13, s14
 8022d02:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8022de0 <atanf+0x17c>
 8022d06:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022d0a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8022de4 <atanf+0x180>
 8022d0e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022d12:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8022de8 <atanf+0x184>
 8022d16:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022d1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8022dec <atanf+0x188>
 8022d1e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022d22:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8022df0 <atanf+0x18c>
 8022d26:	eea6 5a87 	vfma.f32	s10, s13, s14
 8022d2a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8022df4 <atanf+0x190>
 8022d2e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8022d32:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8022df8 <atanf+0x194>
 8022d36:	eea7 5a26 	vfma.f32	s10, s14, s13
 8022d3a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8022dfc <atanf+0x198>
 8022d3e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8022d42:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022d46:	eea5 7a86 	vfma.f32	s14, s11, s12
 8022d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8022d4e:	d121      	bne.n	8022d94 <atanf+0x130>
 8022d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022d54:	e795      	b.n	8022c82 <atanf+0x1e>
 8022d56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022d5a:	2301      	movs	r3, #1
 8022d5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8022d60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022d64:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022d68:	e7be      	b.n	8022ce8 <atanf+0x84>
 8022d6a:	4b25      	ldr	r3, [pc, #148]	; (8022e00 <atanf+0x19c>)
 8022d6c:	429c      	cmp	r4, r3
 8022d6e:	dc0b      	bgt.n	8022d88 <atanf+0x124>
 8022d70:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8022d74:	2302      	movs	r3, #2
 8022d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022d7a:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022d7e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022d86:	e7af      	b.n	8022ce8 <atanf+0x84>
 8022d88:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022d8c:	2303      	movs	r3, #3
 8022d8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022d92:	e7a9      	b.n	8022ce8 <atanf+0x84>
 8022d94:	4a1b      	ldr	r2, [pc, #108]	; (8022e04 <atanf+0x1a0>)
 8022d96:	2d00      	cmp	r5, #0
 8022d98:	491b      	ldr	r1, [pc, #108]	; (8022e08 <atanf+0x1a4>)
 8022d9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022d9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022da2:	edd3 6a00 	vldr	s13, [r3]
 8022da6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022dae:	edd2 7a00 	vldr	s15, [r2]
 8022db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022db6:	bfb8      	it	lt
 8022db8:	eef1 7a67 	vneglt.f32	s15, s15
 8022dbc:	e761      	b.n	8022c82 <atanf+0x1e>
 8022dbe:	bf00      	nop
 8022dc0:	3fc90fdb 	.word	0x3fc90fdb
 8022dc4:	bfc90fdb 	.word	0xbfc90fdb
 8022dc8:	3edfffff 	.word	0x3edfffff
 8022dcc:	7149f2ca 	.word	0x7149f2ca
 8022dd0:	3f97ffff 	.word	0x3f97ffff
 8022dd4:	3c8569d7 	.word	0x3c8569d7
 8022dd8:	3d4bda59 	.word	0x3d4bda59
 8022ddc:	bd6ef16b 	.word	0xbd6ef16b
 8022de0:	3d886b35 	.word	0x3d886b35
 8022de4:	3dba2e6e 	.word	0x3dba2e6e
 8022de8:	3e124925 	.word	0x3e124925
 8022dec:	3eaaaaab 	.word	0x3eaaaaab
 8022df0:	bd15a221 	.word	0xbd15a221
 8022df4:	bd9d8795 	.word	0xbd9d8795
 8022df8:	bde38e38 	.word	0xbde38e38
 8022dfc:	be4ccccd 	.word	0xbe4ccccd
 8022e00:	401bffff 	.word	0x401bffff
 8022e04:	08025f50 	.word	0x08025f50
 8022e08:	08025f60 	.word	0x08025f60

08022e0c <fabsf>:
 8022e0c:	ee10 3a10 	vmov	r3, s0
 8022e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022e14:	ee00 3a10 	vmov	s0, r3
 8022e18:	4770      	bx	lr
 8022e1a:	0000      	movs	r0, r0
 8022e1c:	0000      	movs	r0, r0
	...

08022e20 <scalbn>:
 8022e20:	b570      	push	{r4, r5, r6, lr}
 8022e22:	ec55 4b10 	vmov	r4, r5, d0
 8022e26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8022e2a:	4606      	mov	r6, r0
 8022e2c:	462b      	mov	r3, r5
 8022e2e:	b999      	cbnz	r1, 8022e58 <scalbn+0x38>
 8022e30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022e34:	4323      	orrs	r3, r4
 8022e36:	d03f      	beq.n	8022eb8 <scalbn+0x98>
 8022e38:	4b35      	ldr	r3, [pc, #212]	; (8022f10 <scalbn+0xf0>)
 8022e3a:	4629      	mov	r1, r5
 8022e3c:	2200      	movs	r2, #0
 8022e3e:	ee10 0a10 	vmov	r0, s0
 8022e42:	f7dd fbcb 	bl	80005dc <__aeabi_dmul>
 8022e46:	4b33      	ldr	r3, [pc, #204]	; (8022f14 <scalbn+0xf4>)
 8022e48:	4604      	mov	r4, r0
 8022e4a:	460d      	mov	r5, r1
 8022e4c:	429e      	cmp	r6, r3
 8022e4e:	da10      	bge.n	8022e72 <scalbn+0x52>
 8022e50:	a327      	add	r3, pc, #156	; (adr r3, 8022ef0 <scalbn+0xd0>)
 8022e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e56:	e01f      	b.n	8022e98 <scalbn+0x78>
 8022e58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8022e5c:	4291      	cmp	r1, r2
 8022e5e:	d10c      	bne.n	8022e7a <scalbn+0x5a>
 8022e60:	ee10 2a10 	vmov	r2, s0
 8022e64:	4620      	mov	r0, r4
 8022e66:	4629      	mov	r1, r5
 8022e68:	f7dd fa02 	bl	8000270 <__adddf3>
 8022e6c:	4604      	mov	r4, r0
 8022e6e:	460d      	mov	r5, r1
 8022e70:	e022      	b.n	8022eb8 <scalbn+0x98>
 8022e72:	460b      	mov	r3, r1
 8022e74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8022e78:	3936      	subs	r1, #54	; 0x36
 8022e7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8022e7e:	4296      	cmp	r6, r2
 8022e80:	dd0d      	ble.n	8022e9e <scalbn+0x7e>
 8022e82:	2d00      	cmp	r5, #0
 8022e84:	a11c      	add	r1, pc, #112	; (adr r1, 8022ef8 <scalbn+0xd8>)
 8022e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022e8a:	da02      	bge.n	8022e92 <scalbn+0x72>
 8022e8c:	a11c      	add	r1, pc, #112	; (adr r1, 8022f00 <scalbn+0xe0>)
 8022e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022e92:	a319      	add	r3, pc, #100	; (adr r3, 8022ef8 <scalbn+0xd8>)
 8022e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e98:	f7dd fba0 	bl	80005dc <__aeabi_dmul>
 8022e9c:	e7e6      	b.n	8022e6c <scalbn+0x4c>
 8022e9e:	1872      	adds	r2, r6, r1
 8022ea0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8022ea4:	428a      	cmp	r2, r1
 8022ea6:	dcec      	bgt.n	8022e82 <scalbn+0x62>
 8022ea8:	2a00      	cmp	r2, #0
 8022eaa:	dd08      	ble.n	8022ebe <scalbn+0x9e>
 8022eac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022eb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022eb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022eb8:	ec45 4b10 	vmov	d0, r4, r5
 8022ebc:	bd70      	pop	{r4, r5, r6, pc}
 8022ebe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8022ec2:	da08      	bge.n	8022ed6 <scalbn+0xb6>
 8022ec4:	2d00      	cmp	r5, #0
 8022ec6:	a10a      	add	r1, pc, #40	; (adr r1, 8022ef0 <scalbn+0xd0>)
 8022ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022ecc:	dac0      	bge.n	8022e50 <scalbn+0x30>
 8022ece:	a10e      	add	r1, pc, #56	; (adr r1, 8022f08 <scalbn+0xe8>)
 8022ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022ed4:	e7bc      	b.n	8022e50 <scalbn+0x30>
 8022ed6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022eda:	3236      	adds	r2, #54	; 0x36
 8022edc:	4620      	mov	r0, r4
 8022ede:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022ee2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022ee6:	2200      	movs	r2, #0
 8022ee8:	4b0b      	ldr	r3, [pc, #44]	; (8022f18 <scalbn+0xf8>)
 8022eea:	e7d5      	b.n	8022e98 <scalbn+0x78>
 8022eec:	f3af 8000 	nop.w
 8022ef0:	c2f8f359 	.word	0xc2f8f359
 8022ef4:	01a56e1f 	.word	0x01a56e1f
 8022ef8:	8800759c 	.word	0x8800759c
 8022efc:	7e37e43c 	.word	0x7e37e43c
 8022f00:	8800759c 	.word	0x8800759c
 8022f04:	fe37e43c 	.word	0xfe37e43c
 8022f08:	c2f8f359 	.word	0xc2f8f359
 8022f0c:	81a56e1f 	.word	0x81a56e1f
 8022f10:	43500000 	.word	0x43500000
 8022f14:	ffff3cb0 	.word	0xffff3cb0
 8022f18:	3c900000 	.word	0x3c900000

08022f1c <with_errno>:
 8022f1c:	b570      	push	{r4, r5, r6, lr}
 8022f1e:	4604      	mov	r4, r0
 8022f20:	460d      	mov	r5, r1
 8022f22:	4616      	mov	r6, r2
 8022f24:	f001 f9cc 	bl	80242c0 <__errno>
 8022f28:	4629      	mov	r1, r5
 8022f2a:	6006      	str	r6, [r0, #0]
 8022f2c:	4620      	mov	r0, r4
 8022f2e:	bd70      	pop	{r4, r5, r6, pc}

08022f30 <xflow>:
 8022f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022f32:	4614      	mov	r4, r2
 8022f34:	461d      	mov	r5, r3
 8022f36:	b108      	cbz	r0, 8022f3c <xflow+0xc>
 8022f38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022f3c:	4620      	mov	r0, r4
 8022f3e:	4629      	mov	r1, r5
 8022f40:	e9cd 2300 	strd	r2, r3, [sp]
 8022f44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022f48:	f7dd fb48 	bl	80005dc <__aeabi_dmul>
 8022f4c:	2222      	movs	r2, #34	; 0x22
 8022f4e:	b003      	add	sp, #12
 8022f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022f54:	f7ff bfe2 	b.w	8022f1c <with_errno>

08022f58 <__math_uflow>:
 8022f58:	b508      	push	{r3, lr}
 8022f5a:	2200      	movs	r2, #0
 8022f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8022f60:	f7ff ffe6 	bl	8022f30 <xflow>
 8022f64:	ec41 0b10 	vmov	d0, r0, r1
 8022f68:	bd08      	pop	{r3, pc}

08022f6a <__math_oflow>:
 8022f6a:	b508      	push	{r3, lr}
 8022f6c:	2200      	movs	r2, #0
 8022f6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022f72:	f7ff ffdd 	bl	8022f30 <xflow>
 8022f76:	ec41 0b10 	vmov	d0, r0, r1
 8022f7a:	bd08      	pop	{r3, pc}
 8022f7c:	0000      	movs	r0, r0
	...

08022f80 <__kernel_rem_pio2>:
 8022f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f84:	ed2d 8b02 	vpush	{d8}
 8022f88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8022f8c:	f112 0f14 	cmn.w	r2, #20
 8022f90:	f04f 0500 	mov.w	r5, #0
 8022f94:	9306      	str	r3, [sp, #24]
 8022f96:	bfa8      	it	ge
 8022f98:	1ed4      	subge	r4, r2, #3
 8022f9a:	4bc5      	ldr	r3, [pc, #788]	; (80232b0 <__kernel_rem_pio2+0x330>)
 8022f9c:	bfb8      	it	lt
 8022f9e:	2400      	movlt	r4, #0
 8022fa0:	9104      	str	r1, [sp, #16]
 8022fa2:	ae20      	add	r6, sp, #128	; 0x80
 8022fa4:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8022fa6:	9009      	str	r0, [sp, #36]	; 0x24
 8022fa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022fac:	9300      	str	r3, [sp, #0]
 8022fae:	9b06      	ldr	r3, [sp, #24]
 8022fb0:	f103 33ff 	add.w	r3, r3, #4294967295
 8022fb4:	9305      	str	r3, [sp, #20]
 8022fb6:	bfa4      	itt	ge
 8022fb8:	2318      	movge	r3, #24
 8022fba:	fb94 f4f3 	sdivge	r4, r4, r3
 8022fbe:	f06f 0317 	mvn.w	r3, #23
 8022fc2:	fb04 3303 	mla	r3, r4, r3, r3
 8022fc6:	eb03 0a02 	add.w	sl, r3, r2
 8022fca:	9b00      	ldr	r3, [sp, #0]
 8022fcc:	9a05      	ldr	r2, [sp, #20]
 8022fce:	eb03 0802 	add.w	r8, r3, r2
 8022fd2:	1aa7      	subs	r7, r4, r2
 8022fd4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8022fd6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80232a0 <__kernel_rem_pio2+0x320>
 8022fda:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8022fde:	4545      	cmp	r5, r8
 8022fe0:	dd13      	ble.n	802300a <__kernel_rem_pio2+0x8a>
 8022fe2:	aa20      	add	r2, sp, #128	; 0x80
 8022fe4:	9b06      	ldr	r3, [sp, #24]
 8022fe6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8022fea:	f04f 0800 	mov.w	r8, #0
 8022fee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8022ff2:	9b00      	ldr	r3, [sp, #0]
 8022ff4:	4598      	cmp	r8, r3
 8022ff6:	dc30      	bgt.n	802305a <__kernel_rem_pio2+0xda>
 8022ff8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8022ffc:	462f      	mov	r7, r5
 8022ffe:	2600      	movs	r6, #0
 8023000:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 80232a0 <__kernel_rem_pio2+0x320>
 8023004:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023008:	e01b      	b.n	8023042 <__kernel_rem_pio2+0xc2>
 802300a:	42ef      	cmn	r7, r5
 802300c:	d407      	bmi.n	802301e <__kernel_rem_pio2+0x9e>
 802300e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8023012:	f7dd fa79 	bl	8000508 <__aeabi_i2d>
 8023016:	3501      	adds	r5, #1
 8023018:	e8e6 0102 	strd	r0, r1, [r6], #8
 802301c:	e7df      	b.n	8022fde <__kernel_rem_pio2+0x5e>
 802301e:	ec51 0b18 	vmov	r0, r1, d8
 8023022:	e7f8      	b.n	8023016 <__kernel_rem_pio2+0x96>
 8023024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023028:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 802302c:	3601      	adds	r6, #1
 802302e:	f7dd fad5 	bl	80005dc <__aeabi_dmul>
 8023032:	4602      	mov	r2, r0
 8023034:	460b      	mov	r3, r1
 8023036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802303a:	f7dd f919 	bl	8000270 <__adddf3>
 802303e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023042:	9b05      	ldr	r3, [sp, #20]
 8023044:	3f08      	subs	r7, #8
 8023046:	429e      	cmp	r6, r3
 8023048:	ddec      	ble.n	8023024 <__kernel_rem_pio2+0xa4>
 802304a:	f108 0801 	add.w	r8, r8, #1
 802304e:	3508      	adds	r5, #8
 8023050:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023054:	ecab 7b02 	vstmia	fp!, {d7}
 8023058:	e7cb      	b.n	8022ff2 <__kernel_rem_pio2+0x72>
 802305a:	9b00      	ldr	r3, [sp, #0]
 802305c:	aa0c      	add	r2, sp, #48	; 0x30
 802305e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023062:	930b      	str	r3, [sp, #44]	; 0x2c
 8023064:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8023066:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802306a:	9c00      	ldr	r4, [sp, #0]
 802306c:	930a      	str	r3, [sp, #40]	; 0x28
 802306e:	00e3      	lsls	r3, r4, #3
 8023070:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8023074:	46a1      	mov	r9, r4
 8023076:	9308      	str	r3, [sp, #32]
 8023078:	ab98      	add	r3, sp, #608	; 0x260
 802307a:	46c3      	mov	fp, r8
 802307c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023080:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8023084:	ab70      	add	r3, sp, #448	; 0x1c0
 8023086:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802308a:	f1b9 0f00 	cmp.w	r9, #0
 802308e:	f1a5 0508 	sub.w	r5, r5, #8
 8023092:	dc77      	bgt.n	8023184 <__kernel_rem_pio2+0x204>
 8023094:	4650      	mov	r0, sl
 8023096:	ec47 6b10 	vmov	d0, r6, r7
 802309a:	f7ff fec1 	bl	8022e20 <scalbn>
 802309e:	2200      	movs	r2, #0
 80230a0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80230a4:	ee10 0a10 	vmov	r0, s0
 80230a8:	ec57 6b10 	vmov	r6, r7, d0
 80230ac:	4639      	mov	r1, r7
 80230ae:	f7dd fa95 	bl	80005dc <__aeabi_dmul>
 80230b2:	ec41 0b10 	vmov	d0, r0, r1
 80230b6:	f000 fd8f 	bl	8023bd8 <floor>
 80230ba:	2200      	movs	r2, #0
 80230bc:	4b7d      	ldr	r3, [pc, #500]	; (80232b4 <__kernel_rem_pio2+0x334>)
 80230be:	ec51 0b10 	vmov	r0, r1, d0
 80230c2:	f7dd fa8b 	bl	80005dc <__aeabi_dmul>
 80230c6:	4602      	mov	r2, r0
 80230c8:	460b      	mov	r3, r1
 80230ca:	4630      	mov	r0, r6
 80230cc:	4639      	mov	r1, r7
 80230ce:	f7dd f8cd 	bl	800026c <__aeabi_dsub>
 80230d2:	460f      	mov	r7, r1
 80230d4:	4606      	mov	r6, r0
 80230d6:	f7dd fd31 	bl	8000b3c <__aeabi_d2iz>
 80230da:	9002      	str	r0, [sp, #8]
 80230dc:	f7dd fa14 	bl	8000508 <__aeabi_i2d>
 80230e0:	4602      	mov	r2, r0
 80230e2:	460b      	mov	r3, r1
 80230e4:	4630      	mov	r0, r6
 80230e6:	4639      	mov	r1, r7
 80230e8:	f7dd f8c0 	bl	800026c <__aeabi_dsub>
 80230ec:	f1ba 0f00 	cmp.w	sl, #0
 80230f0:	4606      	mov	r6, r0
 80230f2:	460f      	mov	r7, r1
 80230f4:	dd6d      	ble.n	80231d2 <__kernel_rem_pio2+0x252>
 80230f6:	1e61      	subs	r1, r4, #1
 80230f8:	ab0c      	add	r3, sp, #48	; 0x30
 80230fa:	f1ca 0018 	rsb	r0, sl, #24
 80230fe:	9d02      	ldr	r5, [sp, #8]
 8023100:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8023104:	fa43 f200 	asr.w	r2, r3, r0
 8023108:	4415      	add	r5, r2
 802310a:	4082      	lsls	r2, r0
 802310c:	1a9b      	subs	r3, r3, r2
 802310e:	aa0c      	add	r2, sp, #48	; 0x30
 8023110:	9502      	str	r5, [sp, #8]
 8023112:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8023116:	f1ca 0217 	rsb	r2, sl, #23
 802311a:	fa43 fb02 	asr.w	fp, r3, r2
 802311e:	f1bb 0f00 	cmp.w	fp, #0
 8023122:	dd65      	ble.n	80231f0 <__kernel_rem_pio2+0x270>
 8023124:	9b02      	ldr	r3, [sp, #8]
 8023126:	2200      	movs	r2, #0
 8023128:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 802312c:	3301      	adds	r3, #1
 802312e:	4615      	mov	r5, r2
 8023130:	9302      	str	r3, [sp, #8]
 8023132:	4294      	cmp	r4, r2
 8023134:	f300 809f 	bgt.w	8023276 <__kernel_rem_pio2+0x2f6>
 8023138:	f1ba 0f00 	cmp.w	sl, #0
 802313c:	dd07      	ble.n	802314e <__kernel_rem_pio2+0x1ce>
 802313e:	f1ba 0f01 	cmp.w	sl, #1
 8023142:	f000 80c3 	beq.w	80232cc <__kernel_rem_pio2+0x34c>
 8023146:	f1ba 0f02 	cmp.w	sl, #2
 802314a:	f000 80c9 	beq.w	80232e0 <__kernel_rem_pio2+0x360>
 802314e:	f1bb 0f02 	cmp.w	fp, #2
 8023152:	d14d      	bne.n	80231f0 <__kernel_rem_pio2+0x270>
 8023154:	4632      	mov	r2, r6
 8023156:	463b      	mov	r3, r7
 8023158:	2000      	movs	r0, #0
 802315a:	4957      	ldr	r1, [pc, #348]	; (80232b8 <__kernel_rem_pio2+0x338>)
 802315c:	f7dd f886 	bl	800026c <__aeabi_dsub>
 8023160:	4606      	mov	r6, r0
 8023162:	460f      	mov	r7, r1
 8023164:	2d00      	cmp	r5, #0
 8023166:	d043      	beq.n	80231f0 <__kernel_rem_pio2+0x270>
 8023168:	4650      	mov	r0, sl
 802316a:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 80232a8 <__kernel_rem_pio2+0x328>
 802316e:	f7ff fe57 	bl	8022e20 <scalbn>
 8023172:	4630      	mov	r0, r6
 8023174:	4639      	mov	r1, r7
 8023176:	ec53 2b10 	vmov	r2, r3, d0
 802317a:	f7dd f877 	bl	800026c <__aeabi_dsub>
 802317e:	4606      	mov	r6, r0
 8023180:	460f      	mov	r7, r1
 8023182:	e035      	b.n	80231f0 <__kernel_rem_pio2+0x270>
 8023184:	2200      	movs	r2, #0
 8023186:	4b4d      	ldr	r3, [pc, #308]	; (80232bc <__kernel_rem_pio2+0x33c>)
 8023188:	4630      	mov	r0, r6
 802318a:	4639      	mov	r1, r7
 802318c:	f7dd fa26 	bl	80005dc <__aeabi_dmul>
 8023190:	f109 39ff 	add.w	r9, r9, #4294967295
 8023194:	f7dd fcd2 	bl	8000b3c <__aeabi_d2iz>
 8023198:	f7dd f9b6 	bl	8000508 <__aeabi_i2d>
 802319c:	4602      	mov	r2, r0
 802319e:	460b      	mov	r3, r1
 80231a0:	ec43 2b18 	vmov	d8, r2, r3
 80231a4:	2200      	movs	r2, #0
 80231a6:	4b46      	ldr	r3, [pc, #280]	; (80232c0 <__kernel_rem_pio2+0x340>)
 80231a8:	f7dd fa18 	bl	80005dc <__aeabi_dmul>
 80231ac:	4602      	mov	r2, r0
 80231ae:	460b      	mov	r3, r1
 80231b0:	4630      	mov	r0, r6
 80231b2:	4639      	mov	r1, r7
 80231b4:	f7dd f85a 	bl	800026c <__aeabi_dsub>
 80231b8:	f7dd fcc0 	bl	8000b3c <__aeabi_d2iz>
 80231bc:	f84b 0b04 	str.w	r0, [fp], #4
 80231c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80231c4:	ec51 0b18 	vmov	r0, r1, d8
 80231c8:	f7dd f852 	bl	8000270 <__adddf3>
 80231cc:	4606      	mov	r6, r0
 80231ce:	460f      	mov	r7, r1
 80231d0:	e75b      	b.n	802308a <__kernel_rem_pio2+0x10a>
 80231d2:	d106      	bne.n	80231e2 <__kernel_rem_pio2+0x262>
 80231d4:	1e63      	subs	r3, r4, #1
 80231d6:	aa0c      	add	r2, sp, #48	; 0x30
 80231d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80231dc:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80231e0:	e79d      	b.n	802311e <__kernel_rem_pio2+0x19e>
 80231e2:	2200      	movs	r2, #0
 80231e4:	4b37      	ldr	r3, [pc, #220]	; (80232c4 <__kernel_rem_pio2+0x344>)
 80231e6:	f7dd fc7f 	bl	8000ae8 <__aeabi_dcmpge>
 80231ea:	2800      	cmp	r0, #0
 80231ec:	d140      	bne.n	8023270 <__kernel_rem_pio2+0x2f0>
 80231ee:	4683      	mov	fp, r0
 80231f0:	2200      	movs	r2, #0
 80231f2:	2300      	movs	r3, #0
 80231f4:	4630      	mov	r0, r6
 80231f6:	4639      	mov	r1, r7
 80231f8:	f7dd fc58 	bl	8000aac <__aeabi_dcmpeq>
 80231fc:	2800      	cmp	r0, #0
 80231fe:	f000 80c3 	beq.w	8023388 <__kernel_rem_pio2+0x408>
 8023202:	1e65      	subs	r5, r4, #1
 8023204:	2200      	movs	r2, #0
 8023206:	462b      	mov	r3, r5
 8023208:	9900      	ldr	r1, [sp, #0]
 802320a:	428b      	cmp	r3, r1
 802320c:	da6f      	bge.n	80232ee <__kernel_rem_pio2+0x36e>
 802320e:	2a00      	cmp	r2, #0
 8023210:	f000 808c 	beq.w	802332c <__kernel_rem_pio2+0x3ac>
 8023214:	ab0c      	add	r3, sp, #48	; 0x30
 8023216:	f1aa 0a18 	sub.w	sl, sl, #24
 802321a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802321e:	2b00      	cmp	r3, #0
 8023220:	f000 80b0 	beq.w	8023384 <__kernel_rem_pio2+0x404>
 8023224:	4650      	mov	r0, sl
 8023226:	462c      	mov	r4, r5
 8023228:	f04f 0800 	mov.w	r8, #0
 802322c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80232bc <__kernel_rem_pio2+0x33c>
 8023230:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 80232a8 <__kernel_rem_pio2+0x328>
 8023234:	f7ff fdf4 	bl	8022e20 <scalbn>
 8023238:	1c6b      	adds	r3, r5, #1
 802323a:	00da      	lsls	r2, r3, #3
 802323c:	9205      	str	r2, [sp, #20]
 802323e:	aa70      	add	r2, sp, #448	; 0x1c0
 8023240:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8023244:	ec57 6b10 	vmov	r6, r7, d0
 8023248:	2c00      	cmp	r4, #0
 802324a:	f280 80d6 	bge.w	80233fa <__kernel_rem_pio2+0x47a>
 802324e:	462c      	mov	r4, r5
 8023250:	2c00      	cmp	r4, #0
 8023252:	f2c0 8104 	blt.w	802345e <__kernel_rem_pio2+0x4de>
 8023256:	4b1c      	ldr	r3, [pc, #112]	; (80232c8 <__kernel_rem_pio2+0x348>)
 8023258:	f04f 0900 	mov.w	r9, #0
 802325c:	f04f 0a00 	mov.w	sl, #0
 8023260:	2700      	movs	r7, #0
 8023262:	461e      	mov	r6, r3
 8023264:	ab70      	add	r3, sp, #448	; 0x1c0
 8023266:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 802326a:	1b2b      	subs	r3, r5, r4
 802326c:	9306      	str	r3, [sp, #24]
 802326e:	e0e8      	b.n	8023442 <__kernel_rem_pio2+0x4c2>
 8023270:	f04f 0b02 	mov.w	fp, #2
 8023274:	e756      	b.n	8023124 <__kernel_rem_pio2+0x1a4>
 8023276:	f8d8 3000 	ldr.w	r3, [r8]
 802327a:	b955      	cbnz	r5, 8023292 <__kernel_rem_pio2+0x312>
 802327c:	b123      	cbz	r3, 8023288 <__kernel_rem_pio2+0x308>
 802327e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8023282:	f8c8 3000 	str.w	r3, [r8]
 8023286:	2301      	movs	r3, #1
 8023288:	3201      	adds	r2, #1
 802328a:	f108 0804 	add.w	r8, r8, #4
 802328e:	461d      	mov	r5, r3
 8023290:	e74f      	b.n	8023132 <__kernel_rem_pio2+0x1b2>
 8023292:	1acb      	subs	r3, r1, r3
 8023294:	f8c8 3000 	str.w	r3, [r8]
 8023298:	462b      	mov	r3, r5
 802329a:	e7f5      	b.n	8023288 <__kernel_rem_pio2+0x308>
 802329c:	f3af 8000 	nop.w
	...
 80232ac:	3ff00000 	.word	0x3ff00000
 80232b0:	08025fb0 	.word	0x08025fb0
 80232b4:	40200000 	.word	0x40200000
 80232b8:	3ff00000 	.word	0x3ff00000
 80232bc:	3e700000 	.word	0x3e700000
 80232c0:	41700000 	.word	0x41700000
 80232c4:	3fe00000 	.word	0x3fe00000
 80232c8:	08025f70 	.word	0x08025f70
 80232cc:	1e62      	subs	r2, r4, #1
 80232ce:	ab0c      	add	r3, sp, #48	; 0x30
 80232d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80232d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80232d8:	a90c      	add	r1, sp, #48	; 0x30
 80232da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80232de:	e736      	b.n	802314e <__kernel_rem_pio2+0x1ce>
 80232e0:	1e62      	subs	r2, r4, #1
 80232e2:	ab0c      	add	r3, sp, #48	; 0x30
 80232e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80232e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80232ec:	e7f4      	b.n	80232d8 <__kernel_rem_pio2+0x358>
 80232ee:	a90c      	add	r1, sp, #48	; 0x30
 80232f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80232f4:	3b01      	subs	r3, #1
 80232f6:	430a      	orrs	r2, r1
 80232f8:	e786      	b.n	8023208 <__kernel_rem_pio2+0x288>
 80232fa:	3301      	adds	r3, #1
 80232fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023300:	2900      	cmp	r1, #0
 8023302:	d0fa      	beq.n	80232fa <__kernel_rem_pio2+0x37a>
 8023304:	9a08      	ldr	r2, [sp, #32]
 8023306:	a920      	add	r1, sp, #128	; 0x80
 8023308:	18e3      	adds	r3, r4, r3
 802330a:	f104 0801 	add.w	r8, r4, #1
 802330e:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8023312:	9302      	str	r3, [sp, #8]
 8023314:	446a      	add	r2, sp
 8023316:	3a98      	subs	r2, #152	; 0x98
 8023318:	9208      	str	r2, [sp, #32]
 802331a:	9a06      	ldr	r2, [sp, #24]
 802331c:	18a2      	adds	r2, r4, r2
 802331e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8023322:	9b02      	ldr	r3, [sp, #8]
 8023324:	4543      	cmp	r3, r8
 8023326:	da04      	bge.n	8023332 <__kernel_rem_pio2+0x3b2>
 8023328:	461c      	mov	r4, r3
 802332a:	e6a0      	b.n	802306e <__kernel_rem_pio2+0xee>
 802332c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802332e:	2301      	movs	r3, #1
 8023330:	e7e4      	b.n	80232fc <__kernel_rem_pio2+0x37c>
 8023332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023334:	f04f 0900 	mov.w	r9, #0
 8023338:	2600      	movs	r6, #0
 802333a:	2700      	movs	r7, #0
 802333c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8023340:	f7dd f8e2 	bl	8000508 <__aeabi_i2d>
 8023344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023346:	e8e5 0102 	strd	r0, r1, [r5], #8
 802334a:	461c      	mov	r4, r3
 802334c:	46ab      	mov	fp, r5
 802334e:	9b05      	ldr	r3, [sp, #20]
 8023350:	4599      	cmp	r9, r3
 8023352:	dd06      	ble.n	8023362 <__kernel_rem_pio2+0x3e2>
 8023354:	9b08      	ldr	r3, [sp, #32]
 8023356:	f108 0801 	add.w	r8, r8, #1
 802335a:	e8e3 6702 	strd	r6, r7, [r3], #8
 802335e:	9308      	str	r3, [sp, #32]
 8023360:	e7df      	b.n	8023322 <__kernel_rem_pio2+0x3a2>
 8023362:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8023366:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802336a:	f7dd f937 	bl	80005dc <__aeabi_dmul>
 802336e:	4602      	mov	r2, r0
 8023370:	460b      	mov	r3, r1
 8023372:	4630      	mov	r0, r6
 8023374:	4639      	mov	r1, r7
 8023376:	f109 0901 	add.w	r9, r9, #1
 802337a:	f7dc ff79 	bl	8000270 <__adddf3>
 802337e:	4606      	mov	r6, r0
 8023380:	460f      	mov	r7, r1
 8023382:	e7e4      	b.n	802334e <__kernel_rem_pio2+0x3ce>
 8023384:	3d01      	subs	r5, #1
 8023386:	e745      	b.n	8023214 <__kernel_rem_pio2+0x294>
 8023388:	f1ca 0000 	rsb	r0, sl, #0
 802338c:	ec47 6b10 	vmov	d0, r6, r7
 8023390:	f7ff fd46 	bl	8022e20 <scalbn>
 8023394:	2200      	movs	r2, #0
 8023396:	4ba1      	ldr	r3, [pc, #644]	; (802361c <__kernel_rem_pio2+0x69c>)
 8023398:	ee10 0a10 	vmov	r0, s0
 802339c:	ec57 6b10 	vmov	r6, r7, d0
 80233a0:	4639      	mov	r1, r7
 80233a2:	f7dd fba1 	bl	8000ae8 <__aeabi_dcmpge>
 80233a6:	b1f8      	cbz	r0, 80233e8 <__kernel_rem_pio2+0x468>
 80233a8:	2200      	movs	r2, #0
 80233aa:	4b9d      	ldr	r3, [pc, #628]	; (8023620 <__kernel_rem_pio2+0x6a0>)
 80233ac:	4630      	mov	r0, r6
 80233ae:	4639      	mov	r1, r7
 80233b0:	f7dd f914 	bl	80005dc <__aeabi_dmul>
 80233b4:	1c65      	adds	r5, r4, #1
 80233b6:	f7dd fbc1 	bl	8000b3c <__aeabi_d2iz>
 80233ba:	4680      	mov	r8, r0
 80233bc:	f7dd f8a4 	bl	8000508 <__aeabi_i2d>
 80233c0:	2200      	movs	r2, #0
 80233c2:	4b96      	ldr	r3, [pc, #600]	; (802361c <__kernel_rem_pio2+0x69c>)
 80233c4:	f10a 0a18 	add.w	sl, sl, #24
 80233c8:	f7dd f908 	bl	80005dc <__aeabi_dmul>
 80233cc:	460b      	mov	r3, r1
 80233ce:	4602      	mov	r2, r0
 80233d0:	4639      	mov	r1, r7
 80233d2:	4630      	mov	r0, r6
 80233d4:	f7dc ff4a 	bl	800026c <__aeabi_dsub>
 80233d8:	f7dd fbb0 	bl	8000b3c <__aeabi_d2iz>
 80233dc:	ab0c      	add	r3, sp, #48	; 0x30
 80233de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80233e2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80233e6:	e71d      	b.n	8023224 <__kernel_rem_pio2+0x2a4>
 80233e8:	4630      	mov	r0, r6
 80233ea:	4639      	mov	r1, r7
 80233ec:	f7dd fba6 	bl	8000b3c <__aeabi_d2iz>
 80233f0:	ab0c      	add	r3, sp, #48	; 0x30
 80233f2:	4625      	mov	r5, r4
 80233f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80233f8:	e714      	b.n	8023224 <__kernel_rem_pio2+0x2a4>
 80233fa:	ab0c      	add	r3, sp, #48	; 0x30
 80233fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8023400:	3c01      	subs	r4, #1
 8023402:	f7dd f881 	bl	8000508 <__aeabi_i2d>
 8023406:	4632      	mov	r2, r6
 8023408:	463b      	mov	r3, r7
 802340a:	f7dd f8e7 	bl	80005dc <__aeabi_dmul>
 802340e:	4642      	mov	r2, r8
 8023410:	464b      	mov	r3, r9
 8023412:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8023416:	4630      	mov	r0, r6
 8023418:	4639      	mov	r1, r7
 802341a:	f7dd f8df 	bl	80005dc <__aeabi_dmul>
 802341e:	4606      	mov	r6, r0
 8023420:	460f      	mov	r7, r1
 8023422:	e711      	b.n	8023248 <__kernel_rem_pio2+0x2c8>
 8023424:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8023428:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 802342c:	f7dd f8d6 	bl	80005dc <__aeabi_dmul>
 8023430:	4602      	mov	r2, r0
 8023432:	460b      	mov	r3, r1
 8023434:	4648      	mov	r0, r9
 8023436:	4651      	mov	r1, sl
 8023438:	3701      	adds	r7, #1
 802343a:	f7dc ff19 	bl	8000270 <__adddf3>
 802343e:	4681      	mov	r9, r0
 8023440:	468a      	mov	sl, r1
 8023442:	9b00      	ldr	r3, [sp, #0]
 8023444:	429f      	cmp	r7, r3
 8023446:	dc02      	bgt.n	802344e <__kernel_rem_pio2+0x4ce>
 8023448:	9b06      	ldr	r3, [sp, #24]
 802344a:	429f      	cmp	r7, r3
 802344c:	ddea      	ble.n	8023424 <__kernel_rem_pio2+0x4a4>
 802344e:	ab48      	add	r3, sp, #288	; 0x120
 8023450:	9a06      	ldr	r2, [sp, #24]
 8023452:	3c01      	subs	r4, #1
 8023454:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8023458:	e9c6 9a00 	strd	r9, sl, [r6]
 802345c:	e6f8      	b.n	8023250 <__kernel_rem_pio2+0x2d0>
 802345e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8023460:	2b02      	cmp	r3, #2
 8023462:	dc0b      	bgt.n	802347c <__kernel_rem_pio2+0x4fc>
 8023464:	2b00      	cmp	r3, #0
 8023466:	dc39      	bgt.n	80234dc <__kernel_rem_pio2+0x55c>
 8023468:	d05d      	beq.n	8023526 <__kernel_rem_pio2+0x5a6>
 802346a:	9b02      	ldr	r3, [sp, #8]
 802346c:	f003 0007 	and.w	r0, r3, #7
 8023470:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8023474:	ecbd 8b02 	vpop	{d8}
 8023478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802347c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 802347e:	2b03      	cmp	r3, #3
 8023480:	d1f3      	bne.n	802346a <__kernel_rem_pio2+0x4ea>
 8023482:	9b05      	ldr	r3, [sp, #20]
 8023484:	9500      	str	r5, [sp, #0]
 8023486:	f503 7318 	add.w	r3, r3, #608	; 0x260
 802348a:	eb0d 0403 	add.w	r4, sp, r3
 802348e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8023492:	46a2      	mov	sl, r4
 8023494:	9b00      	ldr	r3, [sp, #0]
 8023496:	f1aa 0a08 	sub.w	sl, sl, #8
 802349a:	2b00      	cmp	r3, #0
 802349c:	dc69      	bgt.n	8023572 <__kernel_rem_pio2+0x5f2>
 802349e:	46aa      	mov	sl, r5
 80234a0:	f1ba 0f01 	cmp.w	sl, #1
 80234a4:	f1a4 0408 	sub.w	r4, r4, #8
 80234a8:	f300 8083 	bgt.w	80235b2 <__kernel_rem_pio2+0x632>
 80234ac:	9c05      	ldr	r4, [sp, #20]
 80234ae:	ab48      	add	r3, sp, #288	; 0x120
 80234b0:	2000      	movs	r0, #0
 80234b2:	2100      	movs	r1, #0
 80234b4:	441c      	add	r4, r3
 80234b6:	2d01      	cmp	r5, #1
 80234b8:	f300 809a 	bgt.w	80235f0 <__kernel_rem_pio2+0x670>
 80234bc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80234c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80234c4:	f1bb 0f00 	cmp.w	fp, #0
 80234c8:	f040 8098 	bne.w	80235fc <__kernel_rem_pio2+0x67c>
 80234cc:	9b04      	ldr	r3, [sp, #16]
 80234ce:	e9c3 7800 	strd	r7, r8, [r3]
 80234d2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80234d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80234da:	e7c6      	b.n	802346a <__kernel_rem_pio2+0x4ea>
 80234dc:	9e05      	ldr	r6, [sp, #20]
 80234de:	ab48      	add	r3, sp, #288	; 0x120
 80234e0:	462c      	mov	r4, r5
 80234e2:	2000      	movs	r0, #0
 80234e4:	441e      	add	r6, r3
 80234e6:	2100      	movs	r1, #0
 80234e8:	2c00      	cmp	r4, #0
 80234ea:	da33      	bge.n	8023554 <__kernel_rem_pio2+0x5d4>
 80234ec:	f1bb 0f00 	cmp.w	fp, #0
 80234f0:	d036      	beq.n	8023560 <__kernel_rem_pio2+0x5e0>
 80234f2:	4602      	mov	r2, r0
 80234f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80234f8:	9c04      	ldr	r4, [sp, #16]
 80234fa:	ae4a      	add	r6, sp, #296	; 0x128
 80234fc:	e9c4 2300 	strd	r2, r3, [r4]
 8023500:	2401      	movs	r4, #1
 8023502:	4602      	mov	r2, r0
 8023504:	460b      	mov	r3, r1
 8023506:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 802350a:	f7dc feaf 	bl	800026c <__aeabi_dsub>
 802350e:	42a5      	cmp	r5, r4
 8023510:	da29      	bge.n	8023566 <__kernel_rem_pio2+0x5e6>
 8023512:	f1bb 0f00 	cmp.w	fp, #0
 8023516:	d002      	beq.n	802351e <__kernel_rem_pio2+0x59e>
 8023518:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802351c:	4619      	mov	r1, r3
 802351e:	9b04      	ldr	r3, [sp, #16]
 8023520:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023524:	e7a1      	b.n	802346a <__kernel_rem_pio2+0x4ea>
 8023526:	9c05      	ldr	r4, [sp, #20]
 8023528:	ab48      	add	r3, sp, #288	; 0x120
 802352a:	2000      	movs	r0, #0
 802352c:	2100      	movs	r1, #0
 802352e:	441c      	add	r4, r3
 8023530:	2d00      	cmp	r5, #0
 8023532:	da09      	bge.n	8023548 <__kernel_rem_pio2+0x5c8>
 8023534:	f1bb 0f00 	cmp.w	fp, #0
 8023538:	d002      	beq.n	8023540 <__kernel_rem_pio2+0x5c0>
 802353a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802353e:	4619      	mov	r1, r3
 8023540:	9b04      	ldr	r3, [sp, #16]
 8023542:	e9c3 0100 	strd	r0, r1, [r3]
 8023546:	e790      	b.n	802346a <__kernel_rem_pio2+0x4ea>
 8023548:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802354c:	3d01      	subs	r5, #1
 802354e:	f7dc fe8f 	bl	8000270 <__adddf3>
 8023552:	e7ed      	b.n	8023530 <__kernel_rem_pio2+0x5b0>
 8023554:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8023558:	3c01      	subs	r4, #1
 802355a:	f7dc fe89 	bl	8000270 <__adddf3>
 802355e:	e7c3      	b.n	80234e8 <__kernel_rem_pio2+0x568>
 8023560:	4602      	mov	r2, r0
 8023562:	460b      	mov	r3, r1
 8023564:	e7c8      	b.n	80234f8 <__kernel_rem_pio2+0x578>
 8023566:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802356a:	3401      	adds	r4, #1
 802356c:	f7dc fe80 	bl	8000270 <__adddf3>
 8023570:	e7cd      	b.n	802350e <__kernel_rem_pio2+0x58e>
 8023572:	9b00      	ldr	r3, [sp, #0]
 8023574:	e9da 8900 	ldrd	r8, r9, [sl]
 8023578:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 802357c:	3b01      	subs	r3, #1
 802357e:	4640      	mov	r0, r8
 8023580:	4632      	mov	r2, r6
 8023582:	4649      	mov	r1, r9
 8023584:	9300      	str	r3, [sp, #0]
 8023586:	463b      	mov	r3, r7
 8023588:	f7dc fe72 	bl	8000270 <__adddf3>
 802358c:	4602      	mov	r2, r0
 802358e:	460b      	mov	r3, r1
 8023590:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023594:	4640      	mov	r0, r8
 8023596:	4649      	mov	r1, r9
 8023598:	f7dc fe68 	bl	800026c <__aeabi_dsub>
 802359c:	4632      	mov	r2, r6
 802359e:	463b      	mov	r3, r7
 80235a0:	f7dc fe66 	bl	8000270 <__adddf3>
 80235a4:	ed9d 7b06 	vldr	d7, [sp, #24]
 80235a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80235ac:	ed8a 7b00 	vstr	d7, [sl]
 80235b0:	e770      	b.n	8023494 <__kernel_rem_pio2+0x514>
 80235b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80235b6:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80235ba:	4640      	mov	r0, r8
 80235bc:	4649      	mov	r1, r9
 80235be:	4632      	mov	r2, r6
 80235c0:	463b      	mov	r3, r7
 80235c2:	f7dc fe55 	bl	8000270 <__adddf3>
 80235c6:	4602      	mov	r2, r0
 80235c8:	460b      	mov	r3, r1
 80235ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80235ce:	e9cd 0100 	strd	r0, r1, [sp]
 80235d2:	4640      	mov	r0, r8
 80235d4:	4649      	mov	r1, r9
 80235d6:	f7dc fe49 	bl	800026c <__aeabi_dsub>
 80235da:	4632      	mov	r2, r6
 80235dc:	463b      	mov	r3, r7
 80235de:	f7dc fe47 	bl	8000270 <__adddf3>
 80235e2:	ed9d 7b00 	vldr	d7, [sp]
 80235e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80235ea:	ed84 7b00 	vstr	d7, [r4]
 80235ee:	e757      	b.n	80234a0 <__kernel_rem_pio2+0x520>
 80235f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80235f4:	3d01      	subs	r5, #1
 80235f6:	f7dc fe3b 	bl	8000270 <__adddf3>
 80235fa:	e75c      	b.n	80234b6 <__kernel_rem_pio2+0x536>
 80235fc:	9b04      	ldr	r3, [sp, #16]
 80235fe:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8023602:	9a04      	ldr	r2, [sp, #16]
 8023604:	601f      	str	r7, [r3, #0]
 8023606:	605c      	str	r4, [r3, #4]
 8023608:	609d      	str	r5, [r3, #8]
 802360a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802360e:	6110      	str	r0, [r2, #16]
 8023610:	60d3      	str	r3, [r2, #12]
 8023612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023616:	6153      	str	r3, [r2, #20]
 8023618:	e727      	b.n	802346a <__kernel_rem_pio2+0x4ea>
 802361a:	bf00      	nop
 802361c:	41700000 	.word	0x41700000
 8023620:	3e700000 	.word	0x3e700000

08023624 <__kernel_rem_pio2f>:
 8023624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023628:	ed2d 8b04 	vpush	{d8-d9}
 802362c:	b0d9      	sub	sp, #356	; 0x164
 802362e:	4688      	mov	r8, r1
 8023630:	49b9      	ldr	r1, [pc, #740]	; (8023918 <__kernel_rem_pio2f+0x2f4>)
 8023632:	9002      	str	r0, [sp, #8]
 8023634:	9866      	ldr	r0, [sp, #408]	; 0x198
 8023636:	9301      	str	r3, [sp, #4]
 8023638:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 802363c:	9901      	ldr	r1, [sp, #4]
 802363e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8023640:	f101 3bff 	add.w	fp, r1, #4294967295
 8023644:	1d11      	adds	r1, r2, #4
 8023646:	db25      	blt.n	8023694 <__kernel_rem_pio2f+0x70>
 8023648:	1ed0      	subs	r0, r2, #3
 802364a:	bf48      	it	mi
 802364c:	1d10      	addmi	r0, r2, #4
 802364e:	10c0      	asrs	r0, r0, #3
 8023650:	1c45      	adds	r5, r0, #1
 8023652:	eba0 070b 	sub.w	r7, r0, fp
 8023656:	eb0a 0c0b 	add.w	ip, sl, fp
 802365a:	ae1c      	add	r6, sp, #112	; 0x70
 802365c:	00e9      	lsls	r1, r5, #3
 802365e:	2400      	movs	r4, #0
 8023660:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8023664:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8023928 <__kernel_rem_pio2f+0x304>
 8023668:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 802366c:	9103      	str	r1, [sp, #12]
 802366e:	4564      	cmp	r4, ip
 8023670:	dd12      	ble.n	8023698 <__kernel_rem_pio2f+0x74>
 8023672:	ac1c      	add	r4, sp, #112	; 0x70
 8023674:	9901      	ldr	r1, [sp, #4]
 8023676:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 802367a:	f04f 0c00 	mov.w	ip, #0
 802367e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8023682:	45d4      	cmp	ip, sl
 8023684:	dc29      	bgt.n	80236da <__kernel_rem_pio2f+0xb6>
 8023686:	f8dd e008 	ldr.w	lr, [sp, #8]
 802368a:	4627      	mov	r7, r4
 802368c:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8023928 <__kernel_rem_pio2f+0x304>
 8023690:	2600      	movs	r6, #0
 8023692:	e018      	b.n	80236c6 <__kernel_rem_pio2f+0xa2>
 8023694:	2000      	movs	r0, #0
 8023696:	e7db      	b.n	8023650 <__kernel_rem_pio2f+0x2c>
 8023698:	42e7      	cmn	r7, r4
 802369a:	bf54      	ite	pl
 802369c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80236a0:	eef0 7a47 	vmovmi.f32	s15, s14
 80236a4:	f104 0401 	add.w	r4, r4, #1
 80236a8:	bf5c      	itt	pl
 80236aa:	ee07 1a90 	vmovpl	s15, r1
 80236ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80236b2:	ece6 7a01 	vstmia	r6!, {s15}
 80236b6:	e7da      	b.n	802366e <__kernel_rem_pio2f+0x4a>
 80236b8:	ecfe 6a01 	vldmia	lr!, {s13}
 80236bc:	3601      	adds	r6, #1
 80236be:	ed97 7a00 	vldr	s14, [r7]
 80236c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80236c6:	455e      	cmp	r6, fp
 80236c8:	f1a7 0704 	sub.w	r7, r7, #4
 80236cc:	ddf4      	ble.n	80236b8 <__kernel_rem_pio2f+0x94>
 80236ce:	f10c 0c01 	add.w	ip, ip, #1
 80236d2:	3404      	adds	r4, #4
 80236d4:	ece9 7a01 	vstmia	r9!, {s15}
 80236d8:	e7d3      	b.n	8023682 <__kernel_rem_pio2f+0x5e>
 80236da:	a908      	add	r1, sp, #32
 80236dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80236e0:	4656      	mov	r6, sl
 80236e2:	eddf 8a90 	vldr	s17, [pc, #576]	; 8023924 <__kernel_rem_pio2f+0x300>
 80236e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80236ea:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8023920 <__kernel_rem_pio2f+0x2fc>
 80236ee:	9304      	str	r3, [sp, #16]
 80236f0:	9105      	str	r1, [sp, #20]
 80236f2:	00b3      	lsls	r3, r6, #2
 80236f4:	ac08      	add	r4, sp, #32
 80236f6:	4637      	mov	r7, r6
 80236f8:	9306      	str	r3, [sp, #24]
 80236fa:	ab58      	add	r3, sp, #352	; 0x160
 80236fc:	46a4      	mov	ip, r4
 80236fe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8023702:	ab44      	add	r3, sp, #272	; 0x110
 8023704:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8023708:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802370c:	2f00      	cmp	r7, #0
 802370e:	f1a0 0004 	sub.w	r0, r0, #4
 8023712:	dc4a      	bgt.n	80237aa <__kernel_rem_pio2f+0x186>
 8023714:	4628      	mov	r0, r5
 8023716:	9207      	str	r2, [sp, #28]
 8023718:	f000 f9f8 	bl	8023b0c <scalbnf>
 802371c:	eeb0 8a40 	vmov.f32	s16, s0
 8023720:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8023724:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023728:	f000 fad6 	bl	8023cd8 <floorf>
 802372c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8023730:	2d00      	cmp	r5, #0
 8023732:	9a07      	ldr	r2, [sp, #28]
 8023734:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023738:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802373c:	ee17 9a90 	vmov	r9, s15
 8023740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023744:	ee38 8a67 	vsub.f32	s16, s16, s15
 8023748:	dd41      	ble.n	80237ce <__kernel_rem_pio2f+0x1aa>
 802374a:	f106 3cff 	add.w	ip, r6, #4294967295
 802374e:	ab08      	add	r3, sp, #32
 8023750:	f1c5 0e08 	rsb	lr, r5, #8
 8023754:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8023758:	fa47 f00e 	asr.w	r0, r7, lr
 802375c:	4481      	add	r9, r0
 802375e:	fa00 f00e 	lsl.w	r0, r0, lr
 8023762:	1a3f      	subs	r7, r7, r0
 8023764:	f1c5 0007 	rsb	r0, r5, #7
 8023768:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 802376c:	4107      	asrs	r7, r0
 802376e:	2f00      	cmp	r7, #0
 8023770:	dd3c      	ble.n	80237ec <__kernel_rem_pio2f+0x1c8>
 8023772:	f04f 0e00 	mov.w	lr, #0
 8023776:	f109 0901 	add.w	r9, r9, #1
 802377a:	4671      	mov	r1, lr
 802377c:	4576      	cmp	r6, lr
 802377e:	dc67      	bgt.n	8023850 <__kernel_rem_pio2f+0x22c>
 8023780:	2d00      	cmp	r5, #0
 8023782:	dd03      	ble.n	802378c <__kernel_rem_pio2f+0x168>
 8023784:	2d01      	cmp	r5, #1
 8023786:	d074      	beq.n	8023872 <__kernel_rem_pio2f+0x24e>
 8023788:	2d02      	cmp	r5, #2
 802378a:	d07b      	beq.n	8023884 <__kernel_rem_pio2f+0x260>
 802378c:	2f02      	cmp	r7, #2
 802378e:	d12d      	bne.n	80237ec <__kernel_rem_pio2f+0x1c8>
 8023790:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023794:	ee30 8a48 	vsub.f32	s16, s0, s16
 8023798:	b341      	cbz	r1, 80237ec <__kernel_rem_pio2f+0x1c8>
 802379a:	4628      	mov	r0, r5
 802379c:	9207      	str	r2, [sp, #28]
 802379e:	f000 f9b5 	bl	8023b0c <scalbnf>
 80237a2:	9a07      	ldr	r2, [sp, #28]
 80237a4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80237a8:	e020      	b.n	80237ec <__kernel_rem_pio2f+0x1c8>
 80237aa:	ee60 7a28 	vmul.f32	s15, s0, s17
 80237ae:	3f01      	subs	r7, #1
 80237b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80237b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80237b8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80237bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80237c0:	ecac 0a01 	vstmia	ip!, {s0}
 80237c4:	ed90 0a00 	vldr	s0, [r0]
 80237c8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80237cc:	e79e      	b.n	802370c <__kernel_rem_pio2f+0xe8>
 80237ce:	d105      	bne.n	80237dc <__kernel_rem_pio2f+0x1b8>
 80237d0:	1e70      	subs	r0, r6, #1
 80237d2:	ab08      	add	r3, sp, #32
 80237d4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80237d8:	11ff      	asrs	r7, r7, #7
 80237da:	e7c8      	b.n	802376e <__kernel_rem_pio2f+0x14a>
 80237dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80237e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80237e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237e8:	da30      	bge.n	802384c <__kernel_rem_pio2f+0x228>
 80237ea:	2700      	movs	r7, #0
 80237ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80237f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237f4:	f040 809a 	bne.w	802392c <__kernel_rem_pio2f+0x308>
 80237f8:	1e74      	subs	r4, r6, #1
 80237fa:	2100      	movs	r1, #0
 80237fc:	46a4      	mov	ip, r4
 80237fe:	45d4      	cmp	ip, sl
 8023800:	da47      	bge.n	8023892 <__kernel_rem_pio2f+0x26e>
 8023802:	2900      	cmp	r1, #0
 8023804:	d063      	beq.n	80238ce <__kernel_rem_pio2f+0x2aa>
 8023806:	ab08      	add	r3, sp, #32
 8023808:	3d08      	subs	r5, #8
 802380a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802380e:	2b00      	cmp	r3, #0
 8023810:	d07f      	beq.n	8023912 <__kernel_rem_pio2f+0x2ee>
 8023812:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023816:	4628      	mov	r0, r5
 8023818:	f000 f978 	bl	8023b0c <scalbnf>
 802381c:	1c63      	adds	r3, r4, #1
 802381e:	aa44      	add	r2, sp, #272	; 0x110
 8023820:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8023924 <__kernel_rem_pio2f+0x300>
 8023824:	0099      	lsls	r1, r3, #2
 8023826:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802382a:	4623      	mov	r3, r4
 802382c:	2b00      	cmp	r3, #0
 802382e:	f280 80ad 	bge.w	802398c <__kernel_rem_pio2f+0x368>
 8023832:	4623      	mov	r3, r4
 8023834:	2b00      	cmp	r3, #0
 8023836:	f2c0 80cb 	blt.w	80239d0 <__kernel_rem_pio2f+0x3ac>
 802383a:	aa44      	add	r2, sp, #272	; 0x110
 802383c:	4e37      	ldr	r6, [pc, #220]	; (802391c <__kernel_rem_pio2f+0x2f8>)
 802383e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8023928 <__kernel_rem_pio2f+0x304>
 8023842:	2000      	movs	r0, #0
 8023844:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8023848:	1ae2      	subs	r2, r4, r3
 802384a:	e0b6      	b.n	80239ba <__kernel_rem_pio2f+0x396>
 802384c:	2702      	movs	r7, #2
 802384e:	e790      	b.n	8023772 <__kernel_rem_pio2f+0x14e>
 8023850:	6820      	ldr	r0, [r4, #0]
 8023852:	b949      	cbnz	r1, 8023868 <__kernel_rem_pio2f+0x244>
 8023854:	b118      	cbz	r0, 802385e <__kernel_rem_pio2f+0x23a>
 8023856:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802385a:	6020      	str	r0, [r4, #0]
 802385c:	2001      	movs	r0, #1
 802385e:	f10e 0e01 	add.w	lr, lr, #1
 8023862:	3404      	adds	r4, #4
 8023864:	4601      	mov	r1, r0
 8023866:	e789      	b.n	802377c <__kernel_rem_pio2f+0x158>
 8023868:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 802386c:	6020      	str	r0, [r4, #0]
 802386e:	4608      	mov	r0, r1
 8023870:	e7f5      	b.n	802385e <__kernel_rem_pio2f+0x23a>
 8023872:	1e74      	subs	r4, r6, #1
 8023874:	ab08      	add	r3, sp, #32
 8023876:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802387a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802387e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023882:	e783      	b.n	802378c <__kernel_rem_pio2f+0x168>
 8023884:	1e74      	subs	r4, r6, #1
 8023886:	ab08      	add	r3, sp, #32
 8023888:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802388c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8023890:	e7f5      	b.n	802387e <__kernel_rem_pio2f+0x25a>
 8023892:	ab08      	add	r3, sp, #32
 8023894:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8023898:	f10c 3cff 	add.w	ip, ip, #4294967295
 802389c:	4301      	orrs	r1, r0
 802389e:	e7ae      	b.n	80237fe <__kernel_rem_pio2f+0x1da>
 80238a0:	3001      	adds	r0, #1
 80238a2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80238a6:	2f00      	cmp	r7, #0
 80238a8:	d0fa      	beq.n	80238a0 <__kernel_rem_pio2f+0x27c>
 80238aa:	9b06      	ldr	r3, [sp, #24]
 80238ac:	f106 0c01 	add.w	ip, r6, #1
 80238b0:	4430      	add	r0, r6
 80238b2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80238b6:	eb0d 0403 	add.w	r4, sp, r3
 80238ba:	9b01      	ldr	r3, [sp, #4]
 80238bc:	18f7      	adds	r7, r6, r3
 80238be:	ab1c      	add	r3, sp, #112	; 0x70
 80238c0:	3c4c      	subs	r4, #76	; 0x4c
 80238c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80238c6:	4560      	cmp	r0, ip
 80238c8:	da04      	bge.n	80238d4 <__kernel_rem_pio2f+0x2b0>
 80238ca:	4606      	mov	r6, r0
 80238cc:	e711      	b.n	80236f2 <__kernel_rem_pio2f+0xce>
 80238ce:	9c05      	ldr	r4, [sp, #20]
 80238d0:	2001      	movs	r0, #1
 80238d2:	e7e6      	b.n	80238a2 <__kernel_rem_pio2f+0x27e>
 80238d4:	9b04      	ldr	r3, [sp, #16]
 80238d6:	2600      	movs	r6, #0
 80238d8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80238dc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80238e0:	ee07 3a90 	vmov	s15, r3
 80238e4:	9306      	str	r3, [sp, #24]
 80238e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80238ea:	ece7 7a01 	vstmia	r7!, {s15}
 80238ee:	46b9      	mov	r9, r7
 80238f0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8023928 <__kernel_rem_pio2f+0x304>
 80238f4:	455e      	cmp	r6, fp
 80238f6:	dd04      	ble.n	8023902 <__kernel_rem_pio2f+0x2de>
 80238f8:	f10c 0c01 	add.w	ip, ip, #1
 80238fc:	ece4 7a01 	vstmia	r4!, {s15}
 8023900:	e7e1      	b.n	80238c6 <__kernel_rem_pio2f+0x2a2>
 8023902:	ecfe 6a01 	vldmia	lr!, {s13}
 8023906:	3601      	adds	r6, #1
 8023908:	ed39 7a01 	vldmdb	r9!, {s14}
 802390c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023910:	e7f0      	b.n	80238f4 <__kernel_rem_pio2f+0x2d0>
 8023912:	3c01      	subs	r4, #1
 8023914:	e777      	b.n	8023806 <__kernel_rem_pio2f+0x1e2>
 8023916:	bf00      	nop
 8023918:	08025fec 	.word	0x08025fec
 802391c:	08025fc0 	.word	0x08025fc0
 8023920:	43800000 	.word	0x43800000
 8023924:	3b800000 	.word	0x3b800000
 8023928:	00000000 	.word	0x00000000
 802392c:	9b03      	ldr	r3, [sp, #12]
 802392e:	eeb0 0a48 	vmov.f32	s0, s16
 8023932:	1a98      	subs	r0, r3, r2
 8023934:	f000 f8ea 	bl	8023b0c <scalbnf>
 8023938:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8023920 <__kernel_rem_pio2f+0x2fc>
 802393c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8023940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023944:	db19      	blt.n	802397a <__kernel_rem_pio2f+0x356>
 8023946:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8023924 <__kernel_rem_pio2f+0x300>
 802394a:	aa08      	add	r2, sp, #32
 802394c:	1c74      	adds	r4, r6, #1
 802394e:	3508      	adds	r5, #8
 8023950:	ee60 7a27 	vmul.f32	s15, s0, s15
 8023954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802395c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8023960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023964:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023968:	ee10 3a10 	vmov	r3, s0
 802396c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8023970:	ee17 3a90 	vmov	r3, s15
 8023974:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8023978:	e74b      	b.n	8023812 <__kernel_rem_pio2f+0x1ee>
 802397a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802397e:	aa08      	add	r2, sp, #32
 8023980:	4634      	mov	r4, r6
 8023982:	ee10 3a10 	vmov	r3, s0
 8023986:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802398a:	e742      	b.n	8023812 <__kernel_rem_pio2f+0x1ee>
 802398c:	a808      	add	r0, sp, #32
 802398e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8023992:	3b01      	subs	r3, #1
 8023994:	ee07 0a90 	vmov	s15, r0
 8023998:	9001      	str	r0, [sp, #4]
 802399a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802399e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80239a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80239a6:	ed62 7a01 	vstmdb	r2!, {s15}
 80239aa:	e73f      	b.n	802382c <__kernel_rem_pio2f+0x208>
 80239ac:	ecf6 6a01 	vldmia	r6!, {s13}
 80239b0:	3001      	adds	r0, #1
 80239b2:	ecb5 7a01 	vldmia	r5!, {s14}
 80239b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80239ba:	4550      	cmp	r0, sl
 80239bc:	dc01      	bgt.n	80239c2 <__kernel_rem_pio2f+0x39e>
 80239be:	4290      	cmp	r0, r2
 80239c0:	ddf4      	ble.n	80239ac <__kernel_rem_pio2f+0x388>
 80239c2:	a858      	add	r0, sp, #352	; 0x160
 80239c4:	3b01      	subs	r3, #1
 80239c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80239ca:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80239ce:	e731      	b.n	8023834 <__kernel_rem_pio2f+0x210>
 80239d0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80239d2:	2b02      	cmp	r3, #2
 80239d4:	dc09      	bgt.n	80239ea <__kernel_rem_pio2f+0x3c6>
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	dc2b      	bgt.n	8023a32 <__kernel_rem_pio2f+0x40e>
 80239da:	d044      	beq.n	8023a66 <__kernel_rem_pio2f+0x442>
 80239dc:	f009 0007 	and.w	r0, r9, #7
 80239e0:	b059      	add	sp, #356	; 0x164
 80239e2:	ecbd 8b04 	vpop	{d8-d9}
 80239e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239ea:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80239ec:	2b03      	cmp	r3, #3
 80239ee:	d1f5      	bne.n	80239dc <__kernel_rem_pio2f+0x3b8>
 80239f0:	aa30      	add	r2, sp, #192	; 0xc0
 80239f2:	1f0b      	subs	r3, r1, #4
 80239f4:	4620      	mov	r0, r4
 80239f6:	4413      	add	r3, r2
 80239f8:	461a      	mov	r2, r3
 80239fa:	2800      	cmp	r0, #0
 80239fc:	f1a2 0204 	sub.w	r2, r2, #4
 8023a00:	dc52      	bgt.n	8023aa8 <__kernel_rem_pio2f+0x484>
 8023a02:	4622      	mov	r2, r4
 8023a04:	2a01      	cmp	r2, #1
 8023a06:	f1a3 0304 	sub.w	r3, r3, #4
 8023a0a:	dc5d      	bgt.n	8023ac8 <__kernel_rem_pio2f+0x4a4>
 8023a0c:	ab30      	add	r3, sp, #192	; 0xc0
 8023a0e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8023928 <__kernel_rem_pio2f+0x304>
 8023a12:	440b      	add	r3, r1
 8023a14:	2c01      	cmp	r4, #1
 8023a16:	dc67      	bgt.n	8023ae8 <__kernel_rem_pio2f+0x4c4>
 8023a18:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8023a1c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8023a20:	2f00      	cmp	r7, #0
 8023a22:	d167      	bne.n	8023af4 <__kernel_rem_pio2f+0x4d0>
 8023a24:	edc8 6a00 	vstr	s13, [r8]
 8023a28:	ed88 7a01 	vstr	s14, [r8, #4]
 8023a2c:	edc8 7a02 	vstr	s15, [r8, #8]
 8023a30:	e7d4      	b.n	80239dc <__kernel_rem_pio2f+0x3b8>
 8023a32:	ab30      	add	r3, sp, #192	; 0xc0
 8023a34:	4622      	mov	r2, r4
 8023a36:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8023928 <__kernel_rem_pio2f+0x304>
 8023a3a:	440b      	add	r3, r1
 8023a3c:	2a00      	cmp	r2, #0
 8023a3e:	da24      	bge.n	8023a8a <__kernel_rem_pio2f+0x466>
 8023a40:	b34f      	cbz	r7, 8023a96 <__kernel_rem_pio2f+0x472>
 8023a42:	eef1 7a47 	vneg.f32	s15, s14
 8023a46:	edc8 7a00 	vstr	s15, [r8]
 8023a4a:	aa31      	add	r2, sp, #196	; 0xc4
 8023a4c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8023a50:	2301      	movs	r3, #1
 8023a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023a56:	429c      	cmp	r4, r3
 8023a58:	da20      	bge.n	8023a9c <__kernel_rem_pio2f+0x478>
 8023a5a:	b10f      	cbz	r7, 8023a60 <__kernel_rem_pio2f+0x43c>
 8023a5c:	eef1 7a67 	vneg.f32	s15, s15
 8023a60:	edc8 7a01 	vstr	s15, [r8, #4]
 8023a64:	e7ba      	b.n	80239dc <__kernel_rem_pio2f+0x3b8>
 8023a66:	ab30      	add	r3, sp, #192	; 0xc0
 8023a68:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8023928 <__kernel_rem_pio2f+0x304>
 8023a6c:	440b      	add	r3, r1
 8023a6e:	2c00      	cmp	r4, #0
 8023a70:	da05      	bge.n	8023a7e <__kernel_rem_pio2f+0x45a>
 8023a72:	b10f      	cbz	r7, 8023a78 <__kernel_rem_pio2f+0x454>
 8023a74:	eef1 7a67 	vneg.f32	s15, s15
 8023a78:	edc8 7a00 	vstr	s15, [r8]
 8023a7c:	e7ae      	b.n	80239dc <__kernel_rem_pio2f+0x3b8>
 8023a7e:	ed33 7a01 	vldmdb	r3!, {s14}
 8023a82:	3c01      	subs	r4, #1
 8023a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023a88:	e7f1      	b.n	8023a6e <__kernel_rem_pio2f+0x44a>
 8023a8a:	ed73 7a01 	vldmdb	r3!, {s15}
 8023a8e:	3a01      	subs	r2, #1
 8023a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023a94:	e7d2      	b.n	8023a3c <__kernel_rem_pio2f+0x418>
 8023a96:	eef0 7a47 	vmov.f32	s15, s14
 8023a9a:	e7d4      	b.n	8023a46 <__kernel_rem_pio2f+0x422>
 8023a9c:	ecb2 7a01 	vldmia	r2!, {s14}
 8023aa0:	3301      	adds	r3, #1
 8023aa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023aa6:	e7d6      	b.n	8023a56 <__kernel_rem_pio2f+0x432>
 8023aa8:	edd2 7a00 	vldr	s15, [r2]
 8023aac:	3801      	subs	r0, #1
 8023aae:	edd2 6a01 	vldr	s13, [r2, #4]
 8023ab2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8023ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023aba:	ed82 7a00 	vstr	s14, [r2]
 8023abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023ac2:	edc2 7a01 	vstr	s15, [r2, #4]
 8023ac6:	e798      	b.n	80239fa <__kernel_rem_pio2f+0x3d6>
 8023ac8:	edd3 7a00 	vldr	s15, [r3]
 8023acc:	3a01      	subs	r2, #1
 8023ace:	edd3 6a01 	vldr	s13, [r3, #4]
 8023ad2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8023ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023ada:	ed83 7a00 	vstr	s14, [r3]
 8023ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023ae2:	edc3 7a01 	vstr	s15, [r3, #4]
 8023ae6:	e78d      	b.n	8023a04 <__kernel_rem_pio2f+0x3e0>
 8023ae8:	ed33 7a01 	vldmdb	r3!, {s14}
 8023aec:	3c01      	subs	r4, #1
 8023aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023af2:	e78f      	b.n	8023a14 <__kernel_rem_pio2f+0x3f0>
 8023af4:	eef1 6a66 	vneg.f32	s13, s13
 8023af8:	eeb1 7a47 	vneg.f32	s14, s14
 8023afc:	eef1 7a67 	vneg.f32	s15, s15
 8023b00:	edc8 6a00 	vstr	s13, [r8]
 8023b04:	ed88 7a01 	vstr	s14, [r8, #4]
 8023b08:	e790      	b.n	8023a2c <__kernel_rem_pio2f+0x408>
 8023b0a:	bf00      	nop

08023b0c <scalbnf>:
 8023b0c:	ee10 3a10 	vmov	r3, s0
 8023b10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8023b14:	d02a      	beq.n	8023b6c <scalbnf+0x60>
 8023b16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8023b1a:	d302      	bcc.n	8023b22 <scalbnf+0x16>
 8023b1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8023b20:	4770      	bx	lr
 8023b22:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8023b26:	d122      	bne.n	8023b6e <scalbnf+0x62>
 8023b28:	4b23      	ldr	r3, [pc, #140]	; (8023bb8 <scalbnf+0xac>)
 8023b2a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8023bbc <scalbnf+0xb0>
 8023b2e:	4298      	cmp	r0, r3
 8023b30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023b34:	db16      	blt.n	8023b64 <scalbnf+0x58>
 8023b36:	ee10 3a10 	vmov	r3, s0
 8023b3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023b3e:	3a19      	subs	r2, #25
 8023b40:	f24c 3150 	movw	r1, #50000	; 0xc350
 8023b44:	4288      	cmp	r0, r1
 8023b46:	dd14      	ble.n	8023b72 <scalbnf+0x66>
 8023b48:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8023bc0 <scalbnf+0xb4>
 8023b4c:	ee10 3a10 	vmov	r3, s0
 8023b50:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8023bc4 <scalbnf+0xb8>
 8023b54:	eeb0 7a67 	vmov.f32	s14, s15
 8023b58:	2b00      	cmp	r3, #0
 8023b5a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8023b5e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8023b62:	4770      	bx	lr
 8023b64:	eddf 7a18 	vldr	s15, [pc, #96]	; 8023bc8 <scalbnf+0xbc>
 8023b68:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023b6c:	4770      	bx	lr
 8023b6e:	0dd2      	lsrs	r2, r2, #23
 8023b70:	e7e6      	b.n	8023b40 <scalbnf+0x34>
 8023b72:	4410      	add	r0, r2
 8023b74:	28fe      	cmp	r0, #254	; 0xfe
 8023b76:	dce7      	bgt.n	8023b48 <scalbnf+0x3c>
 8023b78:	2800      	cmp	r0, #0
 8023b7a:	dd06      	ble.n	8023b8a <scalbnf+0x7e>
 8023b7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023b80:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8023b84:	ee00 3a10 	vmov	s0, r3
 8023b88:	4770      	bx	lr
 8023b8a:	f110 0f16 	cmn.w	r0, #22
 8023b8e:	da09      	bge.n	8023ba4 <scalbnf+0x98>
 8023b90:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8023bc8 <scalbnf+0xbc>
 8023b94:	ee10 3a10 	vmov	r3, s0
 8023b98:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8023bcc <scalbnf+0xc0>
 8023b9c:	eeb0 7a67 	vmov.f32	s14, s15
 8023ba0:	2b00      	cmp	r3, #0
 8023ba2:	e7da      	b.n	8023b5a <scalbnf+0x4e>
 8023ba4:	3019      	adds	r0, #25
 8023ba6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023baa:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8023bd0 <scalbnf+0xc4>
 8023bae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8023bb2:	ee07 3a90 	vmov	s15, r3
 8023bb6:	e7d7      	b.n	8023b68 <scalbnf+0x5c>
 8023bb8:	ffff3cb0 	.word	0xffff3cb0
 8023bbc:	4c000000 	.word	0x4c000000
 8023bc0:	7149f2ca 	.word	0x7149f2ca
 8023bc4:	f149f2ca 	.word	0xf149f2ca
 8023bc8:	0da24260 	.word	0x0da24260
 8023bcc:	8da24260 	.word	0x8da24260
 8023bd0:	33000000 	.word	0x33000000
 8023bd4:	00000000 	.word	0x00000000

08023bd8 <floor>:
 8023bd8:	ec51 0b10 	vmov	r0, r1, d0
 8023bdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023be4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8023be8:	460c      	mov	r4, r1
 8023bea:	ee10 5a10 	vmov	r5, s0
 8023bee:	ee10 8a10 	vmov	r8, s0
 8023bf2:	2e13      	cmp	r6, #19
 8023bf4:	dc32      	bgt.n	8023c5c <floor+0x84>
 8023bf6:	2e00      	cmp	r6, #0
 8023bf8:	da14      	bge.n	8023c24 <floor+0x4c>
 8023bfa:	a333      	add	r3, pc, #204	; (adr r3, 8023cc8 <floor+0xf0>)
 8023bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c00:	f7dc fb36 	bl	8000270 <__adddf3>
 8023c04:	2200      	movs	r2, #0
 8023c06:	2300      	movs	r3, #0
 8023c08:	f7dc ff78 	bl	8000afc <__aeabi_dcmpgt>
 8023c0c:	b138      	cbz	r0, 8023c1e <floor+0x46>
 8023c0e:	2c00      	cmp	r4, #0
 8023c10:	da54      	bge.n	8023cbc <floor+0xe4>
 8023c12:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8023c16:	4325      	orrs	r5, r4
 8023c18:	d053      	beq.n	8023cc2 <floor+0xea>
 8023c1a:	2500      	movs	r5, #0
 8023c1c:	4c2c      	ldr	r4, [pc, #176]	; (8023cd0 <floor+0xf8>)
 8023c1e:	4621      	mov	r1, r4
 8023c20:	4628      	mov	r0, r5
 8023c22:	e025      	b.n	8023c70 <floor+0x98>
 8023c24:	4f2b      	ldr	r7, [pc, #172]	; (8023cd4 <floor+0xfc>)
 8023c26:	4137      	asrs	r7, r6
 8023c28:	ea01 0307 	and.w	r3, r1, r7
 8023c2c:	4303      	orrs	r3, r0
 8023c2e:	d01f      	beq.n	8023c70 <floor+0x98>
 8023c30:	a325      	add	r3, pc, #148	; (adr r3, 8023cc8 <floor+0xf0>)
 8023c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c36:	f7dc fb1b 	bl	8000270 <__adddf3>
 8023c3a:	2200      	movs	r2, #0
 8023c3c:	2300      	movs	r3, #0
 8023c3e:	f7dc ff5d 	bl	8000afc <__aeabi_dcmpgt>
 8023c42:	2800      	cmp	r0, #0
 8023c44:	d0eb      	beq.n	8023c1e <floor+0x46>
 8023c46:	2c00      	cmp	r4, #0
 8023c48:	f04f 0500 	mov.w	r5, #0
 8023c4c:	bfbe      	ittt	lt
 8023c4e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8023c52:	4133      	asrlt	r3, r6
 8023c54:	18e4      	addlt	r4, r4, r3
 8023c56:	ea24 0407 	bic.w	r4, r4, r7
 8023c5a:	e7e0      	b.n	8023c1e <floor+0x46>
 8023c5c:	2e33      	cmp	r6, #51	; 0x33
 8023c5e:	dd0b      	ble.n	8023c78 <floor+0xa0>
 8023c60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8023c64:	d104      	bne.n	8023c70 <floor+0x98>
 8023c66:	ee10 2a10 	vmov	r2, s0
 8023c6a:	460b      	mov	r3, r1
 8023c6c:	f7dc fb00 	bl	8000270 <__adddf3>
 8023c70:	ec41 0b10 	vmov	d0, r0, r1
 8023c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023c78:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8023c7c:	f04f 37ff 	mov.w	r7, #4294967295
 8023c80:	40df      	lsrs	r7, r3
 8023c82:	4238      	tst	r0, r7
 8023c84:	d0f4      	beq.n	8023c70 <floor+0x98>
 8023c86:	a310      	add	r3, pc, #64	; (adr r3, 8023cc8 <floor+0xf0>)
 8023c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c8c:	f7dc faf0 	bl	8000270 <__adddf3>
 8023c90:	2200      	movs	r2, #0
 8023c92:	2300      	movs	r3, #0
 8023c94:	f7dc ff32 	bl	8000afc <__aeabi_dcmpgt>
 8023c98:	2800      	cmp	r0, #0
 8023c9a:	d0c0      	beq.n	8023c1e <floor+0x46>
 8023c9c:	2c00      	cmp	r4, #0
 8023c9e:	da0a      	bge.n	8023cb6 <floor+0xde>
 8023ca0:	2e14      	cmp	r6, #20
 8023ca2:	d101      	bne.n	8023ca8 <floor+0xd0>
 8023ca4:	3401      	adds	r4, #1
 8023ca6:	e006      	b.n	8023cb6 <floor+0xde>
 8023ca8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8023cac:	2301      	movs	r3, #1
 8023cae:	40b3      	lsls	r3, r6
 8023cb0:	441d      	add	r5, r3
 8023cb2:	45a8      	cmp	r8, r5
 8023cb4:	d8f6      	bhi.n	8023ca4 <floor+0xcc>
 8023cb6:	ea25 0507 	bic.w	r5, r5, r7
 8023cba:	e7b0      	b.n	8023c1e <floor+0x46>
 8023cbc:	2500      	movs	r5, #0
 8023cbe:	462c      	mov	r4, r5
 8023cc0:	e7ad      	b.n	8023c1e <floor+0x46>
 8023cc2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8023cc6:	e7aa      	b.n	8023c1e <floor+0x46>
 8023cc8:	8800759c 	.word	0x8800759c
 8023ccc:	7e37e43c 	.word	0x7e37e43c
 8023cd0:	bff00000 	.word	0xbff00000
 8023cd4:	000fffff 	.word	0x000fffff

08023cd8 <floorf>:
 8023cd8:	febb 0a40 	vrintm.f32	s0, s0
 8023cdc:	4770      	bx	lr

08023cde <abort>:
 8023cde:	2006      	movs	r0, #6
 8023ce0:	b508      	push	{r3, lr}
 8023ce2:	f000 fa7b 	bl	80241dc <raise>
 8023ce6:	2001      	movs	r0, #1
 8023ce8:	f7f0 f87c 	bl	8013de4 <_exit>

08023cec <malloc>:
 8023cec:	4b02      	ldr	r3, [pc, #8]	; (8023cf8 <malloc+0xc>)
 8023cee:	4601      	mov	r1, r0
 8023cf0:	6818      	ldr	r0, [r3, #0]
 8023cf2:	f000 b82b 	b.w	8023d4c <_malloc_r>
 8023cf6:	bf00      	nop
 8023cf8:	20000108 	.word	0x20000108

08023cfc <free>:
 8023cfc:	4b02      	ldr	r3, [pc, #8]	; (8023d08 <free+0xc>)
 8023cfe:	4601      	mov	r1, r0
 8023d00:	6818      	ldr	r0, [r3, #0]
 8023d02:	f000 bb35 	b.w	8024370 <_free_r>
 8023d06:	bf00      	nop
 8023d08:	20000108 	.word	0x20000108

08023d0c <sbrk_aligned>:
 8023d0c:	b570      	push	{r4, r5, r6, lr}
 8023d0e:	4e0e      	ldr	r6, [pc, #56]	; (8023d48 <sbrk_aligned+0x3c>)
 8023d10:	460c      	mov	r4, r1
 8023d12:	4605      	mov	r5, r0
 8023d14:	6831      	ldr	r1, [r6, #0]
 8023d16:	b911      	cbnz	r1, 8023d1e <sbrk_aligned+0x12>
 8023d18:	f000 fab0 	bl	802427c <_sbrk_r>
 8023d1c:	6030      	str	r0, [r6, #0]
 8023d1e:	4621      	mov	r1, r4
 8023d20:	4628      	mov	r0, r5
 8023d22:	f000 faab 	bl	802427c <_sbrk_r>
 8023d26:	1c43      	adds	r3, r0, #1
 8023d28:	d00a      	beq.n	8023d40 <sbrk_aligned+0x34>
 8023d2a:	1cc4      	adds	r4, r0, #3
 8023d2c:	f024 0403 	bic.w	r4, r4, #3
 8023d30:	42a0      	cmp	r0, r4
 8023d32:	d007      	beq.n	8023d44 <sbrk_aligned+0x38>
 8023d34:	1a21      	subs	r1, r4, r0
 8023d36:	4628      	mov	r0, r5
 8023d38:	f000 faa0 	bl	802427c <_sbrk_r>
 8023d3c:	3001      	adds	r0, #1
 8023d3e:	d101      	bne.n	8023d44 <sbrk_aligned+0x38>
 8023d40:	f04f 34ff 	mov.w	r4, #4294967295
 8023d44:	4620      	mov	r0, r4
 8023d46:	bd70      	pop	{r4, r5, r6, pc}
 8023d48:	20005d20 	.word	0x20005d20

08023d4c <_malloc_r>:
 8023d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d50:	1ccd      	adds	r5, r1, #3
 8023d52:	4607      	mov	r7, r0
 8023d54:	f025 0503 	bic.w	r5, r5, #3
 8023d58:	3508      	adds	r5, #8
 8023d5a:	2d0c      	cmp	r5, #12
 8023d5c:	bf38      	it	cc
 8023d5e:	250c      	movcc	r5, #12
 8023d60:	2d00      	cmp	r5, #0
 8023d62:	db01      	blt.n	8023d68 <_malloc_r+0x1c>
 8023d64:	42a9      	cmp	r1, r5
 8023d66:	d905      	bls.n	8023d74 <_malloc_r+0x28>
 8023d68:	230c      	movs	r3, #12
 8023d6a:	2600      	movs	r6, #0
 8023d6c:	603b      	str	r3, [r7, #0]
 8023d6e:	4630      	mov	r0, r6
 8023d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8023e48 <_malloc_r+0xfc>
 8023d78:	f000 f868 	bl	8023e4c <__malloc_lock>
 8023d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8023d80:	461c      	mov	r4, r3
 8023d82:	bb5c      	cbnz	r4, 8023ddc <_malloc_r+0x90>
 8023d84:	4629      	mov	r1, r5
 8023d86:	4638      	mov	r0, r7
 8023d88:	f7ff ffc0 	bl	8023d0c <sbrk_aligned>
 8023d8c:	1c43      	adds	r3, r0, #1
 8023d8e:	4604      	mov	r4, r0
 8023d90:	d155      	bne.n	8023e3e <_malloc_r+0xf2>
 8023d92:	f8d8 4000 	ldr.w	r4, [r8]
 8023d96:	4626      	mov	r6, r4
 8023d98:	2e00      	cmp	r6, #0
 8023d9a:	d145      	bne.n	8023e28 <_malloc_r+0xdc>
 8023d9c:	2c00      	cmp	r4, #0
 8023d9e:	d048      	beq.n	8023e32 <_malloc_r+0xe6>
 8023da0:	6823      	ldr	r3, [r4, #0]
 8023da2:	4631      	mov	r1, r6
 8023da4:	4638      	mov	r0, r7
 8023da6:	eb04 0903 	add.w	r9, r4, r3
 8023daa:	f000 fa67 	bl	802427c <_sbrk_r>
 8023dae:	4581      	cmp	r9, r0
 8023db0:	d13f      	bne.n	8023e32 <_malloc_r+0xe6>
 8023db2:	6821      	ldr	r1, [r4, #0]
 8023db4:	4638      	mov	r0, r7
 8023db6:	1a6d      	subs	r5, r5, r1
 8023db8:	4629      	mov	r1, r5
 8023dba:	f7ff ffa7 	bl	8023d0c <sbrk_aligned>
 8023dbe:	3001      	adds	r0, #1
 8023dc0:	d037      	beq.n	8023e32 <_malloc_r+0xe6>
 8023dc2:	6823      	ldr	r3, [r4, #0]
 8023dc4:	442b      	add	r3, r5
 8023dc6:	6023      	str	r3, [r4, #0]
 8023dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8023dcc:	2b00      	cmp	r3, #0
 8023dce:	d038      	beq.n	8023e42 <_malloc_r+0xf6>
 8023dd0:	685a      	ldr	r2, [r3, #4]
 8023dd2:	42a2      	cmp	r2, r4
 8023dd4:	d12b      	bne.n	8023e2e <_malloc_r+0xe2>
 8023dd6:	2200      	movs	r2, #0
 8023dd8:	605a      	str	r2, [r3, #4]
 8023dda:	e00f      	b.n	8023dfc <_malloc_r+0xb0>
 8023ddc:	6822      	ldr	r2, [r4, #0]
 8023dde:	1b52      	subs	r2, r2, r5
 8023de0:	d41f      	bmi.n	8023e22 <_malloc_r+0xd6>
 8023de2:	2a0b      	cmp	r2, #11
 8023de4:	d917      	bls.n	8023e16 <_malloc_r+0xca>
 8023de6:	1961      	adds	r1, r4, r5
 8023de8:	42a3      	cmp	r3, r4
 8023dea:	6025      	str	r5, [r4, #0]
 8023dec:	bf18      	it	ne
 8023dee:	6059      	strne	r1, [r3, #4]
 8023df0:	6863      	ldr	r3, [r4, #4]
 8023df2:	bf08      	it	eq
 8023df4:	f8c8 1000 	streq.w	r1, [r8]
 8023df8:	5162      	str	r2, [r4, r5]
 8023dfa:	604b      	str	r3, [r1, #4]
 8023dfc:	f104 060b 	add.w	r6, r4, #11
 8023e00:	4638      	mov	r0, r7
 8023e02:	f000 f829 	bl	8023e58 <__malloc_unlock>
 8023e06:	1d23      	adds	r3, r4, #4
 8023e08:	f026 0607 	bic.w	r6, r6, #7
 8023e0c:	1af2      	subs	r2, r6, r3
 8023e0e:	d0ae      	beq.n	8023d6e <_malloc_r+0x22>
 8023e10:	1b9b      	subs	r3, r3, r6
 8023e12:	50a3      	str	r3, [r4, r2]
 8023e14:	e7ab      	b.n	8023d6e <_malloc_r+0x22>
 8023e16:	42a3      	cmp	r3, r4
 8023e18:	6862      	ldr	r2, [r4, #4]
 8023e1a:	d1dd      	bne.n	8023dd8 <_malloc_r+0x8c>
 8023e1c:	f8c8 2000 	str.w	r2, [r8]
 8023e20:	e7ec      	b.n	8023dfc <_malloc_r+0xb0>
 8023e22:	4623      	mov	r3, r4
 8023e24:	6864      	ldr	r4, [r4, #4]
 8023e26:	e7ac      	b.n	8023d82 <_malloc_r+0x36>
 8023e28:	4634      	mov	r4, r6
 8023e2a:	6876      	ldr	r6, [r6, #4]
 8023e2c:	e7b4      	b.n	8023d98 <_malloc_r+0x4c>
 8023e2e:	4613      	mov	r3, r2
 8023e30:	e7cc      	b.n	8023dcc <_malloc_r+0x80>
 8023e32:	230c      	movs	r3, #12
 8023e34:	4638      	mov	r0, r7
 8023e36:	603b      	str	r3, [r7, #0]
 8023e38:	f000 f80e 	bl	8023e58 <__malloc_unlock>
 8023e3c:	e797      	b.n	8023d6e <_malloc_r+0x22>
 8023e3e:	6025      	str	r5, [r4, #0]
 8023e40:	e7dc      	b.n	8023dfc <_malloc_r+0xb0>
 8023e42:	605b      	str	r3, [r3, #4]
 8023e44:	deff      	udf	#255	; 0xff
 8023e46:	bf00      	nop
 8023e48:	20005d1c 	.word	0x20005d1c

08023e4c <__malloc_lock>:
 8023e4c:	4801      	ldr	r0, [pc, #4]	; (8023e54 <__malloc_lock+0x8>)
 8023e4e:	f000 ba62 	b.w	8024316 <__retarget_lock_acquire_recursive>
 8023e52:	bf00      	nop
 8023e54:	20005e64 	.word	0x20005e64

08023e58 <__malloc_unlock>:
 8023e58:	4801      	ldr	r0, [pc, #4]	; (8023e60 <__malloc_unlock+0x8>)
 8023e5a:	f000 ba5d 	b.w	8024318 <__retarget_lock_release_recursive>
 8023e5e:	bf00      	nop
 8023e60:	20005e64 	.word	0x20005e64

08023e64 <rand>:
 8023e64:	4b16      	ldr	r3, [pc, #88]	; (8023ec0 <rand+0x5c>)
 8023e66:	b510      	push	{r4, lr}
 8023e68:	681c      	ldr	r4, [r3, #0]
 8023e6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023e6c:	b9b3      	cbnz	r3, 8023e9c <rand+0x38>
 8023e6e:	2018      	movs	r0, #24
 8023e70:	f7ff ff3c 	bl	8023cec <malloc>
 8023e74:	4602      	mov	r2, r0
 8023e76:	6320      	str	r0, [r4, #48]	; 0x30
 8023e78:	b920      	cbnz	r0, 8023e84 <rand+0x20>
 8023e7a:	4b12      	ldr	r3, [pc, #72]	; (8023ec4 <rand+0x60>)
 8023e7c:	2152      	movs	r1, #82	; 0x52
 8023e7e:	4812      	ldr	r0, [pc, #72]	; (8023ec8 <rand+0x64>)
 8023e80:	f000 fa58 	bl	8024334 <__assert_func>
 8023e84:	4911      	ldr	r1, [pc, #68]	; (8023ecc <rand+0x68>)
 8023e86:	4b12      	ldr	r3, [pc, #72]	; (8023ed0 <rand+0x6c>)
 8023e88:	e9c0 1300 	strd	r1, r3, [r0]
 8023e8c:	4b11      	ldr	r3, [pc, #68]	; (8023ed4 <rand+0x70>)
 8023e8e:	2100      	movs	r1, #0
 8023e90:	6083      	str	r3, [r0, #8]
 8023e92:	230b      	movs	r3, #11
 8023e94:	8183      	strh	r3, [r0, #12]
 8023e96:	2001      	movs	r0, #1
 8023e98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023e9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023e9e:	480e      	ldr	r0, [pc, #56]	; (8023ed8 <rand+0x74>)
 8023ea0:	690b      	ldr	r3, [r1, #16]
 8023ea2:	694c      	ldr	r4, [r1, #20]
 8023ea4:	4a0d      	ldr	r2, [pc, #52]	; (8023edc <rand+0x78>)
 8023ea6:	4358      	muls	r0, r3
 8023ea8:	fb02 0004 	mla	r0, r2, r4, r0
 8023eac:	fba3 3202 	umull	r3, r2, r3, r2
 8023eb0:	3301      	adds	r3, #1
 8023eb2:	eb40 0002 	adc.w	r0, r0, r2
 8023eb6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8023eba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023ebe:	bd10      	pop	{r4, pc}
 8023ec0:	20000108 	.word	0x20000108
 8023ec4:	08025ff8 	.word	0x08025ff8
 8023ec8:	0802600f 	.word	0x0802600f
 8023ecc:	abcd330e 	.word	0xabcd330e
 8023ed0:	e66d1234 	.word	0xe66d1234
 8023ed4:	0005deec 	.word	0x0005deec
 8023ed8:	5851f42d 	.word	0x5851f42d
 8023edc:	4c957f2d 	.word	0x4c957f2d

08023ee0 <std>:
 8023ee0:	2300      	movs	r3, #0
 8023ee2:	b510      	push	{r4, lr}
 8023ee4:	4604      	mov	r4, r0
 8023ee6:	6083      	str	r3, [r0, #8]
 8023ee8:	8181      	strh	r1, [r0, #12]
 8023eea:	4619      	mov	r1, r3
 8023eec:	6643      	str	r3, [r0, #100]	; 0x64
 8023eee:	81c2      	strh	r2, [r0, #14]
 8023ef0:	2208      	movs	r2, #8
 8023ef2:	6183      	str	r3, [r0, #24]
 8023ef4:	e9c0 3300 	strd	r3, r3, [r0]
 8023ef8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023efc:	305c      	adds	r0, #92	; 0x5c
 8023efe:	f000 f93c 	bl	802417a <memset>
 8023f02:	4b0d      	ldr	r3, [pc, #52]	; (8023f38 <std+0x58>)
 8023f04:	6224      	str	r4, [r4, #32]
 8023f06:	6263      	str	r3, [r4, #36]	; 0x24
 8023f08:	4b0c      	ldr	r3, [pc, #48]	; (8023f3c <std+0x5c>)
 8023f0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8023f0c:	4b0c      	ldr	r3, [pc, #48]	; (8023f40 <std+0x60>)
 8023f0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023f10:	4b0c      	ldr	r3, [pc, #48]	; (8023f44 <std+0x64>)
 8023f12:	6323      	str	r3, [r4, #48]	; 0x30
 8023f14:	4b0c      	ldr	r3, [pc, #48]	; (8023f48 <std+0x68>)
 8023f16:	429c      	cmp	r4, r3
 8023f18:	d006      	beq.n	8023f28 <std+0x48>
 8023f1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8023f1e:	4294      	cmp	r4, r2
 8023f20:	d002      	beq.n	8023f28 <std+0x48>
 8023f22:	33d0      	adds	r3, #208	; 0xd0
 8023f24:	429c      	cmp	r4, r3
 8023f26:	d105      	bne.n	8023f34 <std+0x54>
 8023f28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f30:	f000 b9f0 	b.w	8024314 <__retarget_lock_init_recursive>
 8023f34:	bd10      	pop	{r4, pc}
 8023f36:	bf00      	nop
 8023f38:	080240bd 	.word	0x080240bd
 8023f3c:	080240e3 	.word	0x080240e3
 8023f40:	0802411b 	.word	0x0802411b
 8023f44:	0802413f 	.word	0x0802413f
 8023f48:	20005d24 	.word	0x20005d24

08023f4c <stdio_exit_handler>:
 8023f4c:	4a02      	ldr	r2, [pc, #8]	; (8023f58 <stdio_exit_handler+0xc>)
 8023f4e:	4903      	ldr	r1, [pc, #12]	; (8023f5c <stdio_exit_handler+0x10>)
 8023f50:	4803      	ldr	r0, [pc, #12]	; (8023f60 <stdio_exit_handler+0x14>)
 8023f52:	f000 b869 	b.w	8024028 <_fwalk_sglue>
 8023f56:	bf00      	nop
 8023f58:	200000b0 	.word	0x200000b0
 8023f5c:	08024b4d 	.word	0x08024b4d
 8023f60:	200000bc 	.word	0x200000bc

08023f64 <cleanup_stdio>:
 8023f64:	6841      	ldr	r1, [r0, #4]
 8023f66:	4b0c      	ldr	r3, [pc, #48]	; (8023f98 <cleanup_stdio+0x34>)
 8023f68:	4299      	cmp	r1, r3
 8023f6a:	b510      	push	{r4, lr}
 8023f6c:	4604      	mov	r4, r0
 8023f6e:	d001      	beq.n	8023f74 <cleanup_stdio+0x10>
 8023f70:	f000 fdec 	bl	8024b4c <_fflush_r>
 8023f74:	68a1      	ldr	r1, [r4, #8]
 8023f76:	4b09      	ldr	r3, [pc, #36]	; (8023f9c <cleanup_stdio+0x38>)
 8023f78:	4299      	cmp	r1, r3
 8023f7a:	d002      	beq.n	8023f82 <cleanup_stdio+0x1e>
 8023f7c:	4620      	mov	r0, r4
 8023f7e:	f000 fde5 	bl	8024b4c <_fflush_r>
 8023f82:	68e1      	ldr	r1, [r4, #12]
 8023f84:	4b06      	ldr	r3, [pc, #24]	; (8023fa0 <cleanup_stdio+0x3c>)
 8023f86:	4299      	cmp	r1, r3
 8023f88:	d004      	beq.n	8023f94 <cleanup_stdio+0x30>
 8023f8a:	4620      	mov	r0, r4
 8023f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f90:	f000 bddc 	b.w	8024b4c <_fflush_r>
 8023f94:	bd10      	pop	{r4, pc}
 8023f96:	bf00      	nop
 8023f98:	20005d24 	.word	0x20005d24
 8023f9c:	20005d8c 	.word	0x20005d8c
 8023fa0:	20005df4 	.word	0x20005df4

08023fa4 <global_stdio_init.part.0>:
 8023fa4:	b510      	push	{r4, lr}
 8023fa6:	4b0b      	ldr	r3, [pc, #44]	; (8023fd4 <global_stdio_init.part.0+0x30>)
 8023fa8:	2104      	movs	r1, #4
 8023faa:	4c0b      	ldr	r4, [pc, #44]	; (8023fd8 <global_stdio_init.part.0+0x34>)
 8023fac:	4a0b      	ldr	r2, [pc, #44]	; (8023fdc <global_stdio_init.part.0+0x38>)
 8023fae:	4620      	mov	r0, r4
 8023fb0:	601a      	str	r2, [r3, #0]
 8023fb2:	2200      	movs	r2, #0
 8023fb4:	f7ff ff94 	bl	8023ee0 <std>
 8023fb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8023fbc:	2201      	movs	r2, #1
 8023fbe:	2109      	movs	r1, #9
 8023fc0:	f7ff ff8e 	bl	8023ee0 <std>
 8023fc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8023fc8:	2202      	movs	r2, #2
 8023fca:	2112      	movs	r1, #18
 8023fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023fd0:	f7ff bf86 	b.w	8023ee0 <std>
 8023fd4:	20005e5c 	.word	0x20005e5c
 8023fd8:	20005d24 	.word	0x20005d24
 8023fdc:	08023f4d 	.word	0x08023f4d

08023fe0 <__sfp_lock_acquire>:
 8023fe0:	4801      	ldr	r0, [pc, #4]	; (8023fe8 <__sfp_lock_acquire+0x8>)
 8023fe2:	f000 b998 	b.w	8024316 <__retarget_lock_acquire_recursive>
 8023fe6:	bf00      	nop
 8023fe8:	20005e65 	.word	0x20005e65

08023fec <__sfp_lock_release>:
 8023fec:	4801      	ldr	r0, [pc, #4]	; (8023ff4 <__sfp_lock_release+0x8>)
 8023fee:	f000 b993 	b.w	8024318 <__retarget_lock_release_recursive>
 8023ff2:	bf00      	nop
 8023ff4:	20005e65 	.word	0x20005e65

08023ff8 <__sinit>:
 8023ff8:	b510      	push	{r4, lr}
 8023ffa:	4604      	mov	r4, r0
 8023ffc:	f7ff fff0 	bl	8023fe0 <__sfp_lock_acquire>
 8024000:	6a23      	ldr	r3, [r4, #32]
 8024002:	b11b      	cbz	r3, 802400c <__sinit+0x14>
 8024004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024008:	f7ff bff0 	b.w	8023fec <__sfp_lock_release>
 802400c:	4b04      	ldr	r3, [pc, #16]	; (8024020 <__sinit+0x28>)
 802400e:	6223      	str	r3, [r4, #32]
 8024010:	4b04      	ldr	r3, [pc, #16]	; (8024024 <__sinit+0x2c>)
 8024012:	681b      	ldr	r3, [r3, #0]
 8024014:	2b00      	cmp	r3, #0
 8024016:	d1f5      	bne.n	8024004 <__sinit+0xc>
 8024018:	f7ff ffc4 	bl	8023fa4 <global_stdio_init.part.0>
 802401c:	e7f2      	b.n	8024004 <__sinit+0xc>
 802401e:	bf00      	nop
 8024020:	08023f65 	.word	0x08023f65
 8024024:	20005e5c 	.word	0x20005e5c

08024028 <_fwalk_sglue>:
 8024028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802402c:	4607      	mov	r7, r0
 802402e:	4688      	mov	r8, r1
 8024030:	4614      	mov	r4, r2
 8024032:	2600      	movs	r6, #0
 8024034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024038:	f1b9 0901 	subs.w	r9, r9, #1
 802403c:	d505      	bpl.n	802404a <_fwalk_sglue+0x22>
 802403e:	6824      	ldr	r4, [r4, #0]
 8024040:	2c00      	cmp	r4, #0
 8024042:	d1f7      	bne.n	8024034 <_fwalk_sglue+0xc>
 8024044:	4630      	mov	r0, r6
 8024046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802404a:	89ab      	ldrh	r3, [r5, #12]
 802404c:	2b01      	cmp	r3, #1
 802404e:	d907      	bls.n	8024060 <_fwalk_sglue+0x38>
 8024050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024054:	3301      	adds	r3, #1
 8024056:	d003      	beq.n	8024060 <_fwalk_sglue+0x38>
 8024058:	4629      	mov	r1, r5
 802405a:	4638      	mov	r0, r7
 802405c:	47c0      	blx	r8
 802405e:	4306      	orrs	r6, r0
 8024060:	3568      	adds	r5, #104	; 0x68
 8024062:	e7e9      	b.n	8024038 <_fwalk_sglue+0x10>

08024064 <siscanf>:
 8024064:	b40e      	push	{r1, r2, r3}
 8024066:	b510      	push	{r4, lr}
 8024068:	b09f      	sub	sp, #124	; 0x7c
 802406a:	f44f 7101 	mov.w	r1, #516	; 0x204
 802406e:	ac21      	add	r4, sp, #132	; 0x84
 8024070:	f8ad 101c 	strh.w	r1, [sp, #28]
 8024074:	9004      	str	r0, [sp, #16]
 8024076:	f854 2b04 	ldr.w	r2, [r4], #4
 802407a:	9008      	str	r0, [sp, #32]
 802407c:	9201      	str	r2, [sp, #4]
 802407e:	f7dc f8e9 	bl	8000254 <strlen>
 8024082:	4b0c      	ldr	r3, [pc, #48]	; (80240b4 <siscanf+0x50>)
 8024084:	a904      	add	r1, sp, #16
 8024086:	9005      	str	r0, [sp, #20]
 8024088:	930d      	str	r3, [sp, #52]	; 0x34
 802408a:	2300      	movs	r3, #0
 802408c:	9009      	str	r0, [sp, #36]	; 0x24
 802408e:	9311      	str	r3, [sp, #68]	; 0x44
 8024090:	9316      	str	r3, [sp, #88]	; 0x58
 8024092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024096:	4808      	ldr	r0, [pc, #32]	; (80240b8 <siscanf+0x54>)
 8024098:	f8ad 301e 	strh.w	r3, [sp, #30]
 802409c:	4623      	mov	r3, r4
 802409e:	9a01      	ldr	r2, [sp, #4]
 80240a0:	6800      	ldr	r0, [r0, #0]
 80240a2:	9403      	str	r4, [sp, #12]
 80240a4:	f000 fa0a 	bl	80244bc <__ssvfiscanf_r>
 80240a8:	b01f      	add	sp, #124	; 0x7c
 80240aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80240ae:	b003      	add	sp, #12
 80240b0:	4770      	bx	lr
 80240b2:	bf00      	nop
 80240b4:	080240df 	.word	0x080240df
 80240b8:	20000108 	.word	0x20000108

080240bc <__sread>:
 80240bc:	b510      	push	{r4, lr}
 80240be:	460c      	mov	r4, r1
 80240c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80240c4:	f000 f8b4 	bl	8024230 <_read_r>
 80240c8:	2800      	cmp	r0, #0
 80240ca:	bfab      	itete	ge
 80240cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80240ce:	89a3      	ldrhlt	r3, [r4, #12]
 80240d0:	181b      	addge	r3, r3, r0
 80240d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80240d6:	bfac      	ite	ge
 80240d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80240da:	81a3      	strhlt	r3, [r4, #12]
 80240dc:	bd10      	pop	{r4, pc}

080240de <__seofread>:
 80240de:	2000      	movs	r0, #0
 80240e0:	4770      	bx	lr

080240e2 <__swrite>:
 80240e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80240e6:	461f      	mov	r7, r3
 80240e8:	898b      	ldrh	r3, [r1, #12]
 80240ea:	4605      	mov	r5, r0
 80240ec:	460c      	mov	r4, r1
 80240ee:	05db      	lsls	r3, r3, #23
 80240f0:	4616      	mov	r6, r2
 80240f2:	d505      	bpl.n	8024100 <__swrite+0x1e>
 80240f4:	2302      	movs	r3, #2
 80240f6:	2200      	movs	r2, #0
 80240f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80240fc:	f000 f886 	bl	802420c <_lseek_r>
 8024100:	89a3      	ldrh	r3, [r4, #12]
 8024102:	4632      	mov	r2, r6
 8024104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024108:	4628      	mov	r0, r5
 802410a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802410e:	81a3      	strh	r3, [r4, #12]
 8024110:	463b      	mov	r3, r7
 8024112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024116:	f000 b8c1 	b.w	802429c <_write_r>

0802411a <__sseek>:
 802411a:	b510      	push	{r4, lr}
 802411c:	460c      	mov	r4, r1
 802411e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024122:	f000 f873 	bl	802420c <_lseek_r>
 8024126:	1c43      	adds	r3, r0, #1
 8024128:	89a3      	ldrh	r3, [r4, #12]
 802412a:	bf15      	itete	ne
 802412c:	6560      	strne	r0, [r4, #84]	; 0x54
 802412e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024136:	81a3      	strheq	r3, [r4, #12]
 8024138:	bf18      	it	ne
 802413a:	81a3      	strhne	r3, [r4, #12]
 802413c:	bd10      	pop	{r4, pc}

0802413e <__sclose>:
 802413e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024142:	f000 b853 	b.w	80241ec <_close_r>

08024146 <memmove>:
 8024146:	4288      	cmp	r0, r1
 8024148:	b510      	push	{r4, lr}
 802414a:	eb01 0402 	add.w	r4, r1, r2
 802414e:	d902      	bls.n	8024156 <memmove+0x10>
 8024150:	4284      	cmp	r4, r0
 8024152:	4623      	mov	r3, r4
 8024154:	d807      	bhi.n	8024166 <memmove+0x20>
 8024156:	1e43      	subs	r3, r0, #1
 8024158:	42a1      	cmp	r1, r4
 802415a:	d008      	beq.n	802416e <memmove+0x28>
 802415c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024160:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024164:	e7f8      	b.n	8024158 <memmove+0x12>
 8024166:	4402      	add	r2, r0
 8024168:	4601      	mov	r1, r0
 802416a:	428a      	cmp	r2, r1
 802416c:	d100      	bne.n	8024170 <memmove+0x2a>
 802416e:	bd10      	pop	{r4, pc}
 8024170:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024174:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024178:	e7f7      	b.n	802416a <memmove+0x24>

0802417a <memset>:
 802417a:	4402      	add	r2, r0
 802417c:	4603      	mov	r3, r0
 802417e:	4293      	cmp	r3, r2
 8024180:	d100      	bne.n	8024184 <memset+0xa>
 8024182:	4770      	bx	lr
 8024184:	f803 1b01 	strb.w	r1, [r3], #1
 8024188:	e7f9      	b.n	802417e <memset+0x4>

0802418a <_raise_r>:
 802418a:	291f      	cmp	r1, #31
 802418c:	b538      	push	{r3, r4, r5, lr}
 802418e:	4604      	mov	r4, r0
 8024190:	460d      	mov	r5, r1
 8024192:	d904      	bls.n	802419e <_raise_r+0x14>
 8024194:	2316      	movs	r3, #22
 8024196:	6003      	str	r3, [r0, #0]
 8024198:	f04f 30ff 	mov.w	r0, #4294967295
 802419c:	bd38      	pop	{r3, r4, r5, pc}
 802419e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80241a0:	b112      	cbz	r2, 80241a8 <_raise_r+0x1e>
 80241a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80241a6:	b94b      	cbnz	r3, 80241bc <_raise_r+0x32>
 80241a8:	4620      	mov	r0, r4
 80241aa:	f000 f865 	bl	8024278 <_getpid_r>
 80241ae:	462a      	mov	r2, r5
 80241b0:	4601      	mov	r1, r0
 80241b2:	4620      	mov	r0, r4
 80241b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80241b8:	f000 b84c 	b.w	8024254 <_kill_r>
 80241bc:	2b01      	cmp	r3, #1
 80241be:	d00a      	beq.n	80241d6 <_raise_r+0x4c>
 80241c0:	1c59      	adds	r1, r3, #1
 80241c2:	d103      	bne.n	80241cc <_raise_r+0x42>
 80241c4:	2316      	movs	r3, #22
 80241c6:	6003      	str	r3, [r0, #0]
 80241c8:	2001      	movs	r0, #1
 80241ca:	e7e7      	b.n	802419c <_raise_r+0x12>
 80241cc:	2400      	movs	r4, #0
 80241ce:	4628      	mov	r0, r5
 80241d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80241d4:	4798      	blx	r3
 80241d6:	2000      	movs	r0, #0
 80241d8:	e7e0      	b.n	802419c <_raise_r+0x12>
	...

080241dc <raise>:
 80241dc:	4b02      	ldr	r3, [pc, #8]	; (80241e8 <raise+0xc>)
 80241de:	4601      	mov	r1, r0
 80241e0:	6818      	ldr	r0, [r3, #0]
 80241e2:	f7ff bfd2 	b.w	802418a <_raise_r>
 80241e6:	bf00      	nop
 80241e8:	20000108 	.word	0x20000108

080241ec <_close_r>:
 80241ec:	b538      	push	{r3, r4, r5, lr}
 80241ee:	2300      	movs	r3, #0
 80241f0:	4d05      	ldr	r5, [pc, #20]	; (8024208 <_close_r+0x1c>)
 80241f2:	4604      	mov	r4, r0
 80241f4:	4608      	mov	r0, r1
 80241f6:	602b      	str	r3, [r5, #0]
 80241f8:	f7ef fe37 	bl	8013e6a <_close>
 80241fc:	1c43      	adds	r3, r0, #1
 80241fe:	d102      	bne.n	8024206 <_close_r+0x1a>
 8024200:	682b      	ldr	r3, [r5, #0]
 8024202:	b103      	cbz	r3, 8024206 <_close_r+0x1a>
 8024204:	6023      	str	r3, [r4, #0]
 8024206:	bd38      	pop	{r3, r4, r5, pc}
 8024208:	20005e60 	.word	0x20005e60

0802420c <_lseek_r>:
 802420c:	b538      	push	{r3, r4, r5, lr}
 802420e:	4604      	mov	r4, r0
 8024210:	4d06      	ldr	r5, [pc, #24]	; (802422c <_lseek_r+0x20>)
 8024212:	4608      	mov	r0, r1
 8024214:	4611      	mov	r1, r2
 8024216:	2200      	movs	r2, #0
 8024218:	602a      	str	r2, [r5, #0]
 802421a:	461a      	mov	r2, r3
 802421c:	f7ef fe4c 	bl	8013eb8 <_lseek>
 8024220:	1c43      	adds	r3, r0, #1
 8024222:	d102      	bne.n	802422a <_lseek_r+0x1e>
 8024224:	682b      	ldr	r3, [r5, #0]
 8024226:	b103      	cbz	r3, 802422a <_lseek_r+0x1e>
 8024228:	6023      	str	r3, [r4, #0]
 802422a:	bd38      	pop	{r3, r4, r5, pc}
 802422c:	20005e60 	.word	0x20005e60

08024230 <_read_r>:
 8024230:	b538      	push	{r3, r4, r5, lr}
 8024232:	4604      	mov	r4, r0
 8024234:	4d06      	ldr	r5, [pc, #24]	; (8024250 <_read_r+0x20>)
 8024236:	4608      	mov	r0, r1
 8024238:	4611      	mov	r1, r2
 802423a:	2200      	movs	r2, #0
 802423c:	602a      	str	r2, [r5, #0]
 802423e:	461a      	mov	r2, r3
 8024240:	f7ef fdda 	bl	8013df8 <_read>
 8024244:	1c43      	adds	r3, r0, #1
 8024246:	d102      	bne.n	802424e <_read_r+0x1e>
 8024248:	682b      	ldr	r3, [r5, #0]
 802424a:	b103      	cbz	r3, 802424e <_read_r+0x1e>
 802424c:	6023      	str	r3, [r4, #0]
 802424e:	bd38      	pop	{r3, r4, r5, pc}
 8024250:	20005e60 	.word	0x20005e60

08024254 <_kill_r>:
 8024254:	b538      	push	{r3, r4, r5, lr}
 8024256:	2300      	movs	r3, #0
 8024258:	4d06      	ldr	r5, [pc, #24]	; (8024274 <_kill_r+0x20>)
 802425a:	4604      	mov	r4, r0
 802425c:	4608      	mov	r0, r1
 802425e:	4611      	mov	r1, r2
 8024260:	602b      	str	r3, [r5, #0]
 8024262:	f7ef fdaf 	bl	8013dc4 <_kill>
 8024266:	1c43      	adds	r3, r0, #1
 8024268:	d102      	bne.n	8024270 <_kill_r+0x1c>
 802426a:	682b      	ldr	r3, [r5, #0]
 802426c:	b103      	cbz	r3, 8024270 <_kill_r+0x1c>
 802426e:	6023      	str	r3, [r4, #0]
 8024270:	bd38      	pop	{r3, r4, r5, pc}
 8024272:	bf00      	nop
 8024274:	20005e60 	.word	0x20005e60

08024278 <_getpid_r>:
 8024278:	f7ef bd9c 	b.w	8013db4 <_getpid>

0802427c <_sbrk_r>:
 802427c:	b538      	push	{r3, r4, r5, lr}
 802427e:	2300      	movs	r3, #0
 8024280:	4d05      	ldr	r5, [pc, #20]	; (8024298 <_sbrk_r+0x1c>)
 8024282:	4604      	mov	r4, r0
 8024284:	4608      	mov	r0, r1
 8024286:	602b      	str	r3, [r5, #0]
 8024288:	f7ef fe24 	bl	8013ed4 <_sbrk>
 802428c:	1c43      	adds	r3, r0, #1
 802428e:	d102      	bne.n	8024296 <_sbrk_r+0x1a>
 8024290:	682b      	ldr	r3, [r5, #0]
 8024292:	b103      	cbz	r3, 8024296 <_sbrk_r+0x1a>
 8024294:	6023      	str	r3, [r4, #0]
 8024296:	bd38      	pop	{r3, r4, r5, pc}
 8024298:	20005e60 	.word	0x20005e60

0802429c <_write_r>:
 802429c:	b538      	push	{r3, r4, r5, lr}
 802429e:	4604      	mov	r4, r0
 80242a0:	4d06      	ldr	r5, [pc, #24]	; (80242bc <_write_r+0x20>)
 80242a2:	4608      	mov	r0, r1
 80242a4:	4611      	mov	r1, r2
 80242a6:	2200      	movs	r2, #0
 80242a8:	602a      	str	r2, [r5, #0]
 80242aa:	461a      	mov	r2, r3
 80242ac:	f7ef fdc1 	bl	8013e32 <_write>
 80242b0:	1c43      	adds	r3, r0, #1
 80242b2:	d102      	bne.n	80242ba <_write_r+0x1e>
 80242b4:	682b      	ldr	r3, [r5, #0]
 80242b6:	b103      	cbz	r3, 80242ba <_write_r+0x1e>
 80242b8:	6023      	str	r3, [r4, #0]
 80242ba:	bd38      	pop	{r3, r4, r5, pc}
 80242bc:	20005e60 	.word	0x20005e60

080242c0 <__errno>:
 80242c0:	4b01      	ldr	r3, [pc, #4]	; (80242c8 <__errno+0x8>)
 80242c2:	6818      	ldr	r0, [r3, #0]
 80242c4:	4770      	bx	lr
 80242c6:	bf00      	nop
 80242c8:	20000108 	.word	0x20000108

080242cc <__libc_init_array>:
 80242cc:	b570      	push	{r4, r5, r6, lr}
 80242ce:	4d0d      	ldr	r5, [pc, #52]	; (8024304 <__libc_init_array+0x38>)
 80242d0:	2600      	movs	r6, #0
 80242d2:	4c0d      	ldr	r4, [pc, #52]	; (8024308 <__libc_init_array+0x3c>)
 80242d4:	1b64      	subs	r4, r4, r5
 80242d6:	10a4      	asrs	r4, r4, #2
 80242d8:	42a6      	cmp	r6, r4
 80242da:	d109      	bne.n	80242f0 <__libc_init_array+0x24>
 80242dc:	4d0b      	ldr	r5, [pc, #44]	; (802430c <__libc_init_array+0x40>)
 80242de:	2600      	movs	r6, #0
 80242e0:	4c0b      	ldr	r4, [pc, #44]	; (8024310 <__libc_init_array+0x44>)
 80242e2:	f001 fa0b 	bl	80256fc <_init>
 80242e6:	1b64      	subs	r4, r4, r5
 80242e8:	10a4      	asrs	r4, r4, #2
 80242ea:	42a6      	cmp	r6, r4
 80242ec:	d105      	bne.n	80242fa <__libc_init_array+0x2e>
 80242ee:	bd70      	pop	{r4, r5, r6, pc}
 80242f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80242f4:	3601      	adds	r6, #1
 80242f6:	4798      	blx	r3
 80242f8:	e7ee      	b.n	80242d8 <__libc_init_array+0xc>
 80242fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80242fe:	3601      	adds	r6, #1
 8024300:	4798      	blx	r3
 8024302:	e7f2      	b.n	80242ea <__libc_init_array+0x1e>
 8024304:	080261fc 	.word	0x080261fc
 8024308:	080261fc 	.word	0x080261fc
 802430c:	080261fc 	.word	0x080261fc
 8024310:	0802620c 	.word	0x0802620c

08024314 <__retarget_lock_init_recursive>:
 8024314:	4770      	bx	lr

08024316 <__retarget_lock_acquire_recursive>:
 8024316:	4770      	bx	lr

08024318 <__retarget_lock_release_recursive>:
 8024318:	4770      	bx	lr

0802431a <memcpy>:
 802431a:	440a      	add	r2, r1
 802431c:	1e43      	subs	r3, r0, #1
 802431e:	4291      	cmp	r1, r2
 8024320:	d100      	bne.n	8024324 <memcpy+0xa>
 8024322:	4770      	bx	lr
 8024324:	b510      	push	{r4, lr}
 8024326:	f811 4b01 	ldrb.w	r4, [r1], #1
 802432a:	4291      	cmp	r1, r2
 802432c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024330:	d1f9      	bne.n	8024326 <memcpy+0xc>
 8024332:	bd10      	pop	{r4, pc}

08024334 <__assert_func>:
 8024334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024336:	4614      	mov	r4, r2
 8024338:	461a      	mov	r2, r3
 802433a:	4b09      	ldr	r3, [pc, #36]	; (8024360 <__assert_func+0x2c>)
 802433c:	4605      	mov	r5, r0
 802433e:	681b      	ldr	r3, [r3, #0]
 8024340:	68d8      	ldr	r0, [r3, #12]
 8024342:	b14c      	cbz	r4, 8024358 <__assert_func+0x24>
 8024344:	4b07      	ldr	r3, [pc, #28]	; (8024364 <__assert_func+0x30>)
 8024346:	9100      	str	r1, [sp, #0]
 8024348:	4907      	ldr	r1, [pc, #28]	; (8024368 <__assert_func+0x34>)
 802434a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802434e:	462b      	mov	r3, r5
 8024350:	f000 fc24 	bl	8024b9c <fiprintf>
 8024354:	f7ff fcc3 	bl	8023cde <abort>
 8024358:	4b04      	ldr	r3, [pc, #16]	; (802436c <__assert_func+0x38>)
 802435a:	461c      	mov	r4, r3
 802435c:	e7f3      	b.n	8024346 <__assert_func+0x12>
 802435e:	bf00      	nop
 8024360:	20000108 	.word	0x20000108
 8024364:	08026067 	.word	0x08026067
 8024368:	08026074 	.word	0x08026074
 802436c:	080260a2 	.word	0x080260a2

08024370 <_free_r>:
 8024370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024372:	2900      	cmp	r1, #0
 8024374:	d043      	beq.n	80243fe <_free_r+0x8e>
 8024376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802437a:	1f0c      	subs	r4, r1, #4
 802437c:	9001      	str	r0, [sp, #4]
 802437e:	2b00      	cmp	r3, #0
 8024380:	bfb8      	it	lt
 8024382:	18e4      	addlt	r4, r4, r3
 8024384:	f7ff fd62 	bl	8023e4c <__malloc_lock>
 8024388:	4a1e      	ldr	r2, [pc, #120]	; (8024404 <_free_r+0x94>)
 802438a:	9801      	ldr	r0, [sp, #4]
 802438c:	6813      	ldr	r3, [r2, #0]
 802438e:	b933      	cbnz	r3, 802439e <_free_r+0x2e>
 8024390:	6063      	str	r3, [r4, #4]
 8024392:	6014      	str	r4, [r2, #0]
 8024394:	b003      	add	sp, #12
 8024396:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802439a:	f7ff bd5d 	b.w	8023e58 <__malloc_unlock>
 802439e:	42a3      	cmp	r3, r4
 80243a0:	d908      	bls.n	80243b4 <_free_r+0x44>
 80243a2:	6825      	ldr	r5, [r4, #0]
 80243a4:	1961      	adds	r1, r4, r5
 80243a6:	428b      	cmp	r3, r1
 80243a8:	bf01      	itttt	eq
 80243aa:	6819      	ldreq	r1, [r3, #0]
 80243ac:	685b      	ldreq	r3, [r3, #4]
 80243ae:	1949      	addeq	r1, r1, r5
 80243b0:	6021      	streq	r1, [r4, #0]
 80243b2:	e7ed      	b.n	8024390 <_free_r+0x20>
 80243b4:	461a      	mov	r2, r3
 80243b6:	685b      	ldr	r3, [r3, #4]
 80243b8:	b10b      	cbz	r3, 80243be <_free_r+0x4e>
 80243ba:	42a3      	cmp	r3, r4
 80243bc:	d9fa      	bls.n	80243b4 <_free_r+0x44>
 80243be:	6811      	ldr	r1, [r2, #0]
 80243c0:	1855      	adds	r5, r2, r1
 80243c2:	42a5      	cmp	r5, r4
 80243c4:	d10b      	bne.n	80243de <_free_r+0x6e>
 80243c6:	6824      	ldr	r4, [r4, #0]
 80243c8:	4421      	add	r1, r4
 80243ca:	1854      	adds	r4, r2, r1
 80243cc:	6011      	str	r1, [r2, #0]
 80243ce:	42a3      	cmp	r3, r4
 80243d0:	d1e0      	bne.n	8024394 <_free_r+0x24>
 80243d2:	681c      	ldr	r4, [r3, #0]
 80243d4:	685b      	ldr	r3, [r3, #4]
 80243d6:	440c      	add	r4, r1
 80243d8:	6053      	str	r3, [r2, #4]
 80243da:	6014      	str	r4, [r2, #0]
 80243dc:	e7da      	b.n	8024394 <_free_r+0x24>
 80243de:	d902      	bls.n	80243e6 <_free_r+0x76>
 80243e0:	230c      	movs	r3, #12
 80243e2:	6003      	str	r3, [r0, #0]
 80243e4:	e7d6      	b.n	8024394 <_free_r+0x24>
 80243e6:	6825      	ldr	r5, [r4, #0]
 80243e8:	1961      	adds	r1, r4, r5
 80243ea:	428b      	cmp	r3, r1
 80243ec:	bf02      	ittt	eq
 80243ee:	6819      	ldreq	r1, [r3, #0]
 80243f0:	685b      	ldreq	r3, [r3, #4]
 80243f2:	1949      	addeq	r1, r1, r5
 80243f4:	6063      	str	r3, [r4, #4]
 80243f6:	bf08      	it	eq
 80243f8:	6021      	streq	r1, [r4, #0]
 80243fa:	6054      	str	r4, [r2, #4]
 80243fc:	e7ca      	b.n	8024394 <_free_r+0x24>
 80243fe:	b003      	add	sp, #12
 8024400:	bd30      	pop	{r4, r5, pc}
 8024402:	bf00      	nop
 8024404:	20005d1c 	.word	0x20005d1c

08024408 <_sungetc_r>:
 8024408:	b538      	push	{r3, r4, r5, lr}
 802440a:	1c4b      	adds	r3, r1, #1
 802440c:	4614      	mov	r4, r2
 802440e:	d103      	bne.n	8024418 <_sungetc_r+0x10>
 8024410:	f04f 35ff 	mov.w	r5, #4294967295
 8024414:	4628      	mov	r0, r5
 8024416:	bd38      	pop	{r3, r4, r5, pc}
 8024418:	8993      	ldrh	r3, [r2, #12]
 802441a:	b2cd      	uxtb	r5, r1
 802441c:	f023 0320 	bic.w	r3, r3, #32
 8024420:	8193      	strh	r3, [r2, #12]
 8024422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024424:	6852      	ldr	r2, [r2, #4]
 8024426:	b18b      	cbz	r3, 802444c <_sungetc_r+0x44>
 8024428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802442a:	4293      	cmp	r3, r2
 802442c:	dd08      	ble.n	8024440 <_sungetc_r+0x38>
 802442e:	6823      	ldr	r3, [r4, #0]
 8024430:	1e5a      	subs	r2, r3, #1
 8024432:	6022      	str	r2, [r4, #0]
 8024434:	f803 5c01 	strb.w	r5, [r3, #-1]
 8024438:	6863      	ldr	r3, [r4, #4]
 802443a:	3301      	adds	r3, #1
 802443c:	6063      	str	r3, [r4, #4]
 802443e:	e7e9      	b.n	8024414 <_sungetc_r+0xc>
 8024440:	4621      	mov	r1, r4
 8024442:	f000 fbf6 	bl	8024c32 <__submore>
 8024446:	2800      	cmp	r0, #0
 8024448:	d0f1      	beq.n	802442e <_sungetc_r+0x26>
 802444a:	e7e1      	b.n	8024410 <_sungetc_r+0x8>
 802444c:	6921      	ldr	r1, [r4, #16]
 802444e:	6823      	ldr	r3, [r4, #0]
 8024450:	b151      	cbz	r1, 8024468 <_sungetc_r+0x60>
 8024452:	4299      	cmp	r1, r3
 8024454:	d208      	bcs.n	8024468 <_sungetc_r+0x60>
 8024456:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802445a:	42a9      	cmp	r1, r5
 802445c:	d104      	bne.n	8024468 <_sungetc_r+0x60>
 802445e:	3b01      	subs	r3, #1
 8024460:	3201      	adds	r2, #1
 8024462:	6023      	str	r3, [r4, #0]
 8024464:	6062      	str	r2, [r4, #4]
 8024466:	e7d5      	b.n	8024414 <_sungetc_r+0xc>
 8024468:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802446c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024470:	6363      	str	r3, [r4, #52]	; 0x34
 8024472:	2303      	movs	r3, #3
 8024474:	63a3      	str	r3, [r4, #56]	; 0x38
 8024476:	4623      	mov	r3, r4
 8024478:	f803 5f46 	strb.w	r5, [r3, #70]!
 802447c:	6023      	str	r3, [r4, #0]
 802447e:	2301      	movs	r3, #1
 8024480:	e7dc      	b.n	802443c <_sungetc_r+0x34>

08024482 <__ssrefill_r>:
 8024482:	b510      	push	{r4, lr}
 8024484:	460c      	mov	r4, r1
 8024486:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024488:	b169      	cbz	r1, 80244a6 <__ssrefill_r+0x24>
 802448a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802448e:	4299      	cmp	r1, r3
 8024490:	d001      	beq.n	8024496 <__ssrefill_r+0x14>
 8024492:	f7ff ff6d 	bl	8024370 <_free_r>
 8024496:	2000      	movs	r0, #0
 8024498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802449a:	6360      	str	r0, [r4, #52]	; 0x34
 802449c:	6063      	str	r3, [r4, #4]
 802449e:	b113      	cbz	r3, 80244a6 <__ssrefill_r+0x24>
 80244a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80244a2:	6023      	str	r3, [r4, #0]
 80244a4:	bd10      	pop	{r4, pc}
 80244a6:	6923      	ldr	r3, [r4, #16]
 80244a8:	f04f 30ff 	mov.w	r0, #4294967295
 80244ac:	6023      	str	r3, [r4, #0]
 80244ae:	2300      	movs	r3, #0
 80244b0:	6063      	str	r3, [r4, #4]
 80244b2:	89a3      	ldrh	r3, [r4, #12]
 80244b4:	f043 0320 	orr.w	r3, r3, #32
 80244b8:	81a3      	strh	r3, [r4, #12]
 80244ba:	e7f3      	b.n	80244a4 <__ssrefill_r+0x22>

080244bc <__ssvfiscanf_r>:
 80244bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244c0:	460c      	mov	r4, r1
 80244c2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80244c6:	2100      	movs	r1, #0
 80244c8:	4606      	mov	r6, r0
 80244ca:	f10d 0804 	add.w	r8, sp, #4
 80244ce:	4fa6      	ldr	r7, [pc, #664]	; (8024768 <__ssvfiscanf_r+0x2ac>)
 80244d0:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8024774 <__ssvfiscanf_r+0x2b8>
 80244d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80244d8:	9300      	str	r3, [sp, #0]
 80244da:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80244de:	49a3      	ldr	r1, [pc, #652]	; (802476c <__ssvfiscanf_r+0x2b0>)
 80244e0:	91a0      	str	r1, [sp, #640]	; 0x280
 80244e2:	49a3      	ldr	r1, [pc, #652]	; (8024770 <__ssvfiscanf_r+0x2b4>)
 80244e4:	91a1      	str	r1, [sp, #644]	; 0x284
 80244e6:	7813      	ldrb	r3, [r2, #0]
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	f000 815a 	beq.w	80247a2 <__ssvfiscanf_r+0x2e6>
 80244ee:	5cf9      	ldrb	r1, [r7, r3]
 80244f0:	1c55      	adds	r5, r2, #1
 80244f2:	f011 0108 	ands.w	r1, r1, #8
 80244f6:	d019      	beq.n	802452c <__ssvfiscanf_r+0x70>
 80244f8:	6863      	ldr	r3, [r4, #4]
 80244fa:	2b00      	cmp	r3, #0
 80244fc:	dd0f      	ble.n	802451e <__ssvfiscanf_r+0x62>
 80244fe:	6823      	ldr	r3, [r4, #0]
 8024500:	781a      	ldrb	r2, [r3, #0]
 8024502:	5cba      	ldrb	r2, [r7, r2]
 8024504:	0712      	lsls	r2, r2, #28
 8024506:	d401      	bmi.n	802450c <__ssvfiscanf_r+0x50>
 8024508:	462a      	mov	r2, r5
 802450a:	e7ec      	b.n	80244e6 <__ssvfiscanf_r+0x2a>
 802450c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802450e:	3301      	adds	r3, #1
 8024510:	3201      	adds	r2, #1
 8024512:	6023      	str	r3, [r4, #0]
 8024514:	9245      	str	r2, [sp, #276]	; 0x114
 8024516:	6862      	ldr	r2, [r4, #4]
 8024518:	3a01      	subs	r2, #1
 802451a:	6062      	str	r2, [r4, #4]
 802451c:	e7ec      	b.n	80244f8 <__ssvfiscanf_r+0x3c>
 802451e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024520:	4621      	mov	r1, r4
 8024522:	4630      	mov	r0, r6
 8024524:	4798      	blx	r3
 8024526:	2800      	cmp	r0, #0
 8024528:	d0e9      	beq.n	80244fe <__ssvfiscanf_r+0x42>
 802452a:	e7ed      	b.n	8024508 <__ssvfiscanf_r+0x4c>
 802452c:	2b25      	cmp	r3, #37	; 0x25
 802452e:	d012      	beq.n	8024556 <__ssvfiscanf_r+0x9a>
 8024530:	469a      	mov	sl, r3
 8024532:	6863      	ldr	r3, [r4, #4]
 8024534:	2b00      	cmp	r3, #0
 8024536:	f340 8092 	ble.w	802465e <__ssvfiscanf_r+0x1a2>
 802453a:	6822      	ldr	r2, [r4, #0]
 802453c:	7813      	ldrb	r3, [r2, #0]
 802453e:	4553      	cmp	r3, sl
 8024540:	f040 812f 	bne.w	80247a2 <__ssvfiscanf_r+0x2e6>
 8024544:	6863      	ldr	r3, [r4, #4]
 8024546:	3201      	adds	r2, #1
 8024548:	3b01      	subs	r3, #1
 802454a:	6022      	str	r2, [r4, #0]
 802454c:	6063      	str	r3, [r4, #4]
 802454e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8024550:	3301      	adds	r3, #1
 8024552:	9345      	str	r3, [sp, #276]	; 0x114
 8024554:	e7d8      	b.n	8024508 <__ssvfiscanf_r+0x4c>
 8024556:	9141      	str	r1, [sp, #260]	; 0x104
 8024558:	9143      	str	r1, [sp, #268]	; 0x10c
 802455a:	7853      	ldrb	r3, [r2, #1]
 802455c:	2b2a      	cmp	r3, #42	; 0x2a
 802455e:	bf04      	itt	eq
 8024560:	2310      	moveq	r3, #16
 8024562:	1c95      	addeq	r5, r2, #2
 8024564:	f04f 020a 	mov.w	r2, #10
 8024568:	bf08      	it	eq
 802456a:	9341      	streq	r3, [sp, #260]	; 0x104
 802456c:	46aa      	mov	sl, r5
 802456e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8024572:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8024576:	2b09      	cmp	r3, #9
 8024578:	d91c      	bls.n	80245b4 <__ssvfiscanf_r+0xf8>
 802457a:	2203      	movs	r2, #3
 802457c:	487d      	ldr	r0, [pc, #500]	; (8024774 <__ssvfiscanf_r+0x2b8>)
 802457e:	f000 fb8f 	bl	8024ca0 <memchr>
 8024582:	b138      	cbz	r0, 8024594 <__ssvfiscanf_r+0xd8>
 8024584:	eba0 0009 	sub.w	r0, r0, r9
 8024588:	2301      	movs	r3, #1
 802458a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802458c:	4655      	mov	r5, sl
 802458e:	4083      	lsls	r3, r0
 8024590:	4313      	orrs	r3, r2
 8024592:	9341      	str	r3, [sp, #260]	; 0x104
 8024594:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024598:	2b78      	cmp	r3, #120	; 0x78
 802459a:	d806      	bhi.n	80245aa <__ssvfiscanf_r+0xee>
 802459c:	2b57      	cmp	r3, #87	; 0x57
 802459e:	d810      	bhi.n	80245c2 <__ssvfiscanf_r+0x106>
 80245a0:	2b25      	cmp	r3, #37	; 0x25
 80245a2:	d0c5      	beq.n	8024530 <__ssvfiscanf_r+0x74>
 80245a4:	d856      	bhi.n	8024654 <__ssvfiscanf_r+0x198>
 80245a6:	2b00      	cmp	r3, #0
 80245a8:	d064      	beq.n	8024674 <__ssvfiscanf_r+0x1b8>
 80245aa:	2303      	movs	r3, #3
 80245ac:	9347      	str	r3, [sp, #284]	; 0x11c
 80245ae:	230a      	movs	r3, #10
 80245b0:	9342      	str	r3, [sp, #264]	; 0x108
 80245b2:	e075      	b.n	80246a0 <__ssvfiscanf_r+0x1e4>
 80245b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80245b6:	4655      	mov	r5, sl
 80245b8:	fb02 1103 	mla	r1, r2, r3, r1
 80245bc:	3930      	subs	r1, #48	; 0x30
 80245be:	9143      	str	r1, [sp, #268]	; 0x10c
 80245c0:	e7d4      	b.n	802456c <__ssvfiscanf_r+0xb0>
 80245c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80245c6:	2a20      	cmp	r2, #32
 80245c8:	d8ef      	bhi.n	80245aa <__ssvfiscanf_r+0xee>
 80245ca:	a101      	add	r1, pc, #4	; (adr r1, 80245d0 <__ssvfiscanf_r+0x114>)
 80245cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80245d0:	08024683 	.word	0x08024683
 80245d4:	080245ab 	.word	0x080245ab
 80245d8:	080245ab 	.word	0x080245ab
 80245dc:	080246e1 	.word	0x080246e1
 80245e0:	080245ab 	.word	0x080245ab
 80245e4:	080245ab 	.word	0x080245ab
 80245e8:	080245ab 	.word	0x080245ab
 80245ec:	080245ab 	.word	0x080245ab
 80245f0:	080245ab 	.word	0x080245ab
 80245f4:	080245ab 	.word	0x080245ab
 80245f8:	080245ab 	.word	0x080245ab
 80245fc:	080246f7 	.word	0x080246f7
 8024600:	080246dd 	.word	0x080246dd
 8024604:	0802465b 	.word	0x0802465b
 8024608:	0802465b 	.word	0x0802465b
 802460c:	0802465b 	.word	0x0802465b
 8024610:	080245ab 	.word	0x080245ab
 8024614:	08024699 	.word	0x08024699
 8024618:	080245ab 	.word	0x080245ab
 802461c:	080245ab 	.word	0x080245ab
 8024620:	080245ab 	.word	0x080245ab
 8024624:	080245ab 	.word	0x080245ab
 8024628:	08024707 	.word	0x08024707
 802462c:	080246d5 	.word	0x080246d5
 8024630:	0802467b 	.word	0x0802467b
 8024634:	080245ab 	.word	0x080245ab
 8024638:	080245ab 	.word	0x080245ab
 802463c:	08024703 	.word	0x08024703
 8024640:	080245ab 	.word	0x080245ab
 8024644:	080246dd 	.word	0x080246dd
 8024648:	080245ab 	.word	0x080245ab
 802464c:	080245ab 	.word	0x080245ab
 8024650:	08024683 	.word	0x08024683
 8024654:	3b45      	subs	r3, #69	; 0x45
 8024656:	2b02      	cmp	r3, #2
 8024658:	d8a7      	bhi.n	80245aa <__ssvfiscanf_r+0xee>
 802465a:	2305      	movs	r3, #5
 802465c:	e01f      	b.n	802469e <__ssvfiscanf_r+0x1e2>
 802465e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024660:	4621      	mov	r1, r4
 8024662:	4630      	mov	r0, r6
 8024664:	4798      	blx	r3
 8024666:	2800      	cmp	r0, #0
 8024668:	f43f af67 	beq.w	802453a <__ssvfiscanf_r+0x7e>
 802466c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802466e:	2800      	cmp	r0, #0
 8024670:	f040 808d 	bne.w	802478e <__ssvfiscanf_r+0x2d2>
 8024674:	f04f 30ff 	mov.w	r0, #4294967295
 8024678:	e08f      	b.n	802479a <__ssvfiscanf_r+0x2de>
 802467a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802467c:	f042 0220 	orr.w	r2, r2, #32
 8024680:	9241      	str	r2, [sp, #260]	; 0x104
 8024682:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024688:	9241      	str	r2, [sp, #260]	; 0x104
 802468a:	2210      	movs	r2, #16
 802468c:	2b6f      	cmp	r3, #111	; 0x6f
 802468e:	9242      	str	r2, [sp, #264]	; 0x108
 8024690:	bf34      	ite	cc
 8024692:	2303      	movcc	r3, #3
 8024694:	2304      	movcs	r3, #4
 8024696:	e002      	b.n	802469e <__ssvfiscanf_r+0x1e2>
 8024698:	2300      	movs	r3, #0
 802469a:	9342      	str	r3, [sp, #264]	; 0x108
 802469c:	2303      	movs	r3, #3
 802469e:	9347      	str	r3, [sp, #284]	; 0x11c
 80246a0:	6863      	ldr	r3, [r4, #4]
 80246a2:	2b00      	cmp	r3, #0
 80246a4:	dd3e      	ble.n	8024724 <__ssvfiscanf_r+0x268>
 80246a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80246a8:	0659      	lsls	r1, r3, #25
 80246aa:	d404      	bmi.n	80246b6 <__ssvfiscanf_r+0x1fa>
 80246ac:	6823      	ldr	r3, [r4, #0]
 80246ae:	781a      	ldrb	r2, [r3, #0]
 80246b0:	5cba      	ldrb	r2, [r7, r2]
 80246b2:	0712      	lsls	r2, r2, #28
 80246b4:	d43d      	bmi.n	8024732 <__ssvfiscanf_r+0x276>
 80246b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80246b8:	2b02      	cmp	r3, #2
 80246ba:	dc4c      	bgt.n	8024756 <__ssvfiscanf_r+0x29a>
 80246bc:	466b      	mov	r3, sp
 80246be:	4622      	mov	r2, r4
 80246c0:	a941      	add	r1, sp, #260	; 0x104
 80246c2:	4630      	mov	r0, r6
 80246c4:	f000 f872 	bl	80247ac <_scanf_chars>
 80246c8:	2801      	cmp	r0, #1
 80246ca:	d06a      	beq.n	80247a2 <__ssvfiscanf_r+0x2e6>
 80246cc:	2802      	cmp	r0, #2
 80246ce:	f47f af1b 	bne.w	8024508 <__ssvfiscanf_r+0x4c>
 80246d2:	e7cb      	b.n	802466c <__ssvfiscanf_r+0x1b0>
 80246d4:	2308      	movs	r3, #8
 80246d6:	9342      	str	r3, [sp, #264]	; 0x108
 80246d8:	2304      	movs	r3, #4
 80246da:	e7e0      	b.n	802469e <__ssvfiscanf_r+0x1e2>
 80246dc:	220a      	movs	r2, #10
 80246de:	e7d5      	b.n	802468c <__ssvfiscanf_r+0x1d0>
 80246e0:	4629      	mov	r1, r5
 80246e2:	4640      	mov	r0, r8
 80246e4:	f000 fa6c 	bl	8024bc0 <__sccl>
 80246e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80246ea:	4605      	mov	r5, r0
 80246ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80246f0:	9341      	str	r3, [sp, #260]	; 0x104
 80246f2:	2301      	movs	r3, #1
 80246f4:	e7d3      	b.n	802469e <__ssvfiscanf_r+0x1e2>
 80246f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80246f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80246fc:	9341      	str	r3, [sp, #260]	; 0x104
 80246fe:	2300      	movs	r3, #0
 8024700:	e7cd      	b.n	802469e <__ssvfiscanf_r+0x1e2>
 8024702:	2302      	movs	r3, #2
 8024704:	e7cb      	b.n	802469e <__ssvfiscanf_r+0x1e2>
 8024706:	9841      	ldr	r0, [sp, #260]	; 0x104
 8024708:	06c3      	lsls	r3, r0, #27
 802470a:	f53f aefd 	bmi.w	8024508 <__ssvfiscanf_r+0x4c>
 802470e:	9b00      	ldr	r3, [sp, #0]
 8024710:	07c0      	lsls	r0, r0, #31
 8024712:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024714:	f103 0104 	add.w	r1, r3, #4
 8024718:	9100      	str	r1, [sp, #0]
 802471a:	681b      	ldr	r3, [r3, #0]
 802471c:	bf4c      	ite	mi
 802471e:	801a      	strhmi	r2, [r3, #0]
 8024720:	601a      	strpl	r2, [r3, #0]
 8024722:	e6f1      	b.n	8024508 <__ssvfiscanf_r+0x4c>
 8024724:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024726:	4621      	mov	r1, r4
 8024728:	4630      	mov	r0, r6
 802472a:	4798      	blx	r3
 802472c:	2800      	cmp	r0, #0
 802472e:	d0ba      	beq.n	80246a6 <__ssvfiscanf_r+0x1ea>
 8024730:	e79c      	b.n	802466c <__ssvfiscanf_r+0x1b0>
 8024732:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024734:	3201      	adds	r2, #1
 8024736:	9245      	str	r2, [sp, #276]	; 0x114
 8024738:	6862      	ldr	r2, [r4, #4]
 802473a:	3a01      	subs	r2, #1
 802473c:	2a00      	cmp	r2, #0
 802473e:	6062      	str	r2, [r4, #4]
 8024740:	dd02      	ble.n	8024748 <__ssvfiscanf_r+0x28c>
 8024742:	3301      	adds	r3, #1
 8024744:	6023      	str	r3, [r4, #0]
 8024746:	e7b1      	b.n	80246ac <__ssvfiscanf_r+0x1f0>
 8024748:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802474a:	4621      	mov	r1, r4
 802474c:	4630      	mov	r0, r6
 802474e:	4798      	blx	r3
 8024750:	2800      	cmp	r0, #0
 8024752:	d0ab      	beq.n	80246ac <__ssvfiscanf_r+0x1f0>
 8024754:	e78a      	b.n	802466c <__ssvfiscanf_r+0x1b0>
 8024756:	2b04      	cmp	r3, #4
 8024758:	dc0e      	bgt.n	8024778 <__ssvfiscanf_r+0x2bc>
 802475a:	466b      	mov	r3, sp
 802475c:	4622      	mov	r2, r4
 802475e:	a941      	add	r1, sp, #260	; 0x104
 8024760:	4630      	mov	r0, r6
 8024762:	f000 f87d 	bl	8024860 <_scanf_i>
 8024766:	e7af      	b.n	80246c8 <__ssvfiscanf_r+0x20c>
 8024768:	080260c3 	.word	0x080260c3
 802476c:	08024409 	.word	0x08024409
 8024770:	08024483 	.word	0x08024483
 8024774:	080260a3 	.word	0x080260a3
 8024778:	4b0b      	ldr	r3, [pc, #44]	; (80247a8 <__ssvfiscanf_r+0x2ec>)
 802477a:	2b00      	cmp	r3, #0
 802477c:	f43f aec4 	beq.w	8024508 <__ssvfiscanf_r+0x4c>
 8024780:	466b      	mov	r3, sp
 8024782:	4622      	mov	r2, r4
 8024784:	a941      	add	r1, sp, #260	; 0x104
 8024786:	4630      	mov	r0, r6
 8024788:	f3af 8000 	nop.w
 802478c:	e79c      	b.n	80246c8 <__ssvfiscanf_r+0x20c>
 802478e:	89a3      	ldrh	r3, [r4, #12]
 8024790:	f013 0f40 	tst.w	r3, #64	; 0x40
 8024794:	bf18      	it	ne
 8024796:	f04f 30ff 	movne.w	r0, #4294967295
 802479a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802479e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80247a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80247a4:	e7f9      	b.n	802479a <__ssvfiscanf_r+0x2de>
 80247a6:	bf00      	nop
 80247a8:	00000000 	.word	0x00000000

080247ac <_scanf_chars>:
 80247ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80247b0:	4615      	mov	r5, r2
 80247b2:	688a      	ldr	r2, [r1, #8]
 80247b4:	4680      	mov	r8, r0
 80247b6:	460c      	mov	r4, r1
 80247b8:	b932      	cbnz	r2, 80247c8 <_scanf_chars+0x1c>
 80247ba:	698a      	ldr	r2, [r1, #24]
 80247bc:	2a00      	cmp	r2, #0
 80247be:	bf0c      	ite	eq
 80247c0:	2201      	moveq	r2, #1
 80247c2:	f04f 32ff 	movne.w	r2, #4294967295
 80247c6:	608a      	str	r2, [r1, #8]
 80247c8:	6822      	ldr	r2, [r4, #0]
 80247ca:	2700      	movs	r7, #0
 80247cc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 802485c <_scanf_chars+0xb0>
 80247d0:	06d1      	lsls	r1, r2, #27
 80247d2:	bf5f      	itttt	pl
 80247d4:	681a      	ldrpl	r2, [r3, #0]
 80247d6:	1d11      	addpl	r1, r2, #4
 80247d8:	6019      	strpl	r1, [r3, #0]
 80247da:	6816      	ldrpl	r6, [r2, #0]
 80247dc:	69a0      	ldr	r0, [r4, #24]
 80247de:	b188      	cbz	r0, 8024804 <_scanf_chars+0x58>
 80247e0:	2801      	cmp	r0, #1
 80247e2:	d107      	bne.n	80247f4 <_scanf_chars+0x48>
 80247e4:	682a      	ldr	r2, [r5, #0]
 80247e6:	7811      	ldrb	r1, [r2, #0]
 80247e8:	6962      	ldr	r2, [r4, #20]
 80247ea:	5c52      	ldrb	r2, [r2, r1]
 80247ec:	b952      	cbnz	r2, 8024804 <_scanf_chars+0x58>
 80247ee:	2f00      	cmp	r7, #0
 80247f0:	d031      	beq.n	8024856 <_scanf_chars+0xaa>
 80247f2:	e022      	b.n	802483a <_scanf_chars+0x8e>
 80247f4:	2802      	cmp	r0, #2
 80247f6:	d120      	bne.n	802483a <_scanf_chars+0x8e>
 80247f8:	682b      	ldr	r3, [r5, #0]
 80247fa:	781b      	ldrb	r3, [r3, #0]
 80247fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024800:	071b      	lsls	r3, r3, #28
 8024802:	d41a      	bmi.n	802483a <_scanf_chars+0x8e>
 8024804:	6823      	ldr	r3, [r4, #0]
 8024806:	3701      	adds	r7, #1
 8024808:	06da      	lsls	r2, r3, #27
 802480a:	bf5e      	ittt	pl
 802480c:	682b      	ldrpl	r3, [r5, #0]
 802480e:	781b      	ldrbpl	r3, [r3, #0]
 8024810:	f806 3b01 	strbpl.w	r3, [r6], #1
 8024814:	682a      	ldr	r2, [r5, #0]
 8024816:	686b      	ldr	r3, [r5, #4]
 8024818:	3201      	adds	r2, #1
 802481a:	3b01      	subs	r3, #1
 802481c:	602a      	str	r2, [r5, #0]
 802481e:	68a2      	ldr	r2, [r4, #8]
 8024820:	606b      	str	r3, [r5, #4]
 8024822:	3a01      	subs	r2, #1
 8024824:	60a2      	str	r2, [r4, #8]
 8024826:	b142      	cbz	r2, 802483a <_scanf_chars+0x8e>
 8024828:	2b00      	cmp	r3, #0
 802482a:	dcd7      	bgt.n	80247dc <_scanf_chars+0x30>
 802482c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024830:	4629      	mov	r1, r5
 8024832:	4640      	mov	r0, r8
 8024834:	4798      	blx	r3
 8024836:	2800      	cmp	r0, #0
 8024838:	d0d0      	beq.n	80247dc <_scanf_chars+0x30>
 802483a:	6823      	ldr	r3, [r4, #0]
 802483c:	f013 0310 	ands.w	r3, r3, #16
 8024840:	d105      	bne.n	802484e <_scanf_chars+0xa2>
 8024842:	68e2      	ldr	r2, [r4, #12]
 8024844:	3201      	adds	r2, #1
 8024846:	60e2      	str	r2, [r4, #12]
 8024848:	69a2      	ldr	r2, [r4, #24]
 802484a:	b102      	cbz	r2, 802484e <_scanf_chars+0xa2>
 802484c:	7033      	strb	r3, [r6, #0]
 802484e:	6923      	ldr	r3, [r4, #16]
 8024850:	2000      	movs	r0, #0
 8024852:	443b      	add	r3, r7
 8024854:	6123      	str	r3, [r4, #16]
 8024856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802485a:	bf00      	nop
 802485c:	080260c3 	.word	0x080260c3

08024860 <_scanf_i>:
 8024860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024864:	4698      	mov	r8, r3
 8024866:	b087      	sub	sp, #28
 8024868:	4b72      	ldr	r3, [pc, #456]	; (8024a34 <_scanf_i+0x1d4>)
 802486a:	460c      	mov	r4, r1
 802486c:	4682      	mov	sl, r0
 802486e:	4616      	mov	r6, r2
 8024870:	4627      	mov	r7, r4
 8024872:	f04f 0b00 	mov.w	fp, #0
 8024876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802487a:	ab03      	add	r3, sp, #12
 802487c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8024880:	4b6d      	ldr	r3, [pc, #436]	; (8024a38 <_scanf_i+0x1d8>)
 8024882:	69a1      	ldr	r1, [r4, #24]
 8024884:	4a6d      	ldr	r2, [pc, #436]	; (8024a3c <_scanf_i+0x1dc>)
 8024886:	2903      	cmp	r1, #3
 8024888:	bf18      	it	ne
 802488a:	461a      	movne	r2, r3
 802488c:	68a3      	ldr	r3, [r4, #8]
 802488e:	9201      	str	r2, [sp, #4]
 8024890:	1e5a      	subs	r2, r3, #1
 8024892:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8024896:	bf89      	itett	hi
 8024898:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802489c:	f04f 0900 	movls.w	r9, #0
 80248a0:	eb03 0905 	addhi.w	r9, r3, r5
 80248a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80248a8:	bf88      	it	hi
 80248aa:	60a3      	strhi	r3, [r4, #8]
 80248ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80248b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80248b4:	463d      	mov	r5, r7
 80248b6:	6023      	str	r3, [r4, #0]
 80248b8:	6831      	ldr	r1, [r6, #0]
 80248ba:	ab03      	add	r3, sp, #12
 80248bc:	2202      	movs	r2, #2
 80248be:	7809      	ldrb	r1, [r1, #0]
 80248c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80248c4:	f000 f9ec 	bl	8024ca0 <memchr>
 80248c8:	b328      	cbz	r0, 8024916 <_scanf_i+0xb6>
 80248ca:	f1bb 0f01 	cmp.w	fp, #1
 80248ce:	d159      	bne.n	8024984 <_scanf_i+0x124>
 80248d0:	6862      	ldr	r2, [r4, #4]
 80248d2:	b92a      	cbnz	r2, 80248e0 <_scanf_i+0x80>
 80248d4:	6822      	ldr	r2, [r4, #0]
 80248d6:	2308      	movs	r3, #8
 80248d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80248dc:	6063      	str	r3, [r4, #4]
 80248de:	6022      	str	r2, [r4, #0]
 80248e0:	6822      	ldr	r2, [r4, #0]
 80248e2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80248e6:	6022      	str	r2, [r4, #0]
 80248e8:	68a2      	ldr	r2, [r4, #8]
 80248ea:	1e51      	subs	r1, r2, #1
 80248ec:	60a1      	str	r1, [r4, #8]
 80248ee:	b192      	cbz	r2, 8024916 <_scanf_i+0xb6>
 80248f0:	6832      	ldr	r2, [r6, #0]
 80248f2:	1c51      	adds	r1, r2, #1
 80248f4:	6031      	str	r1, [r6, #0]
 80248f6:	7812      	ldrb	r2, [r2, #0]
 80248f8:	f805 2b01 	strb.w	r2, [r5], #1
 80248fc:	6872      	ldr	r2, [r6, #4]
 80248fe:	3a01      	subs	r2, #1
 8024900:	2a00      	cmp	r2, #0
 8024902:	6072      	str	r2, [r6, #4]
 8024904:	dc07      	bgt.n	8024916 <_scanf_i+0xb6>
 8024906:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802490a:	4631      	mov	r1, r6
 802490c:	4650      	mov	r0, sl
 802490e:	4790      	blx	r2
 8024910:	2800      	cmp	r0, #0
 8024912:	f040 8085 	bne.w	8024a20 <_scanf_i+0x1c0>
 8024916:	f10b 0b01 	add.w	fp, fp, #1
 802491a:	f1bb 0f03 	cmp.w	fp, #3
 802491e:	d1cb      	bne.n	80248b8 <_scanf_i+0x58>
 8024920:	6863      	ldr	r3, [r4, #4]
 8024922:	b90b      	cbnz	r3, 8024928 <_scanf_i+0xc8>
 8024924:	230a      	movs	r3, #10
 8024926:	6063      	str	r3, [r4, #4]
 8024928:	6863      	ldr	r3, [r4, #4]
 802492a:	f04f 0b00 	mov.w	fp, #0
 802492e:	4944      	ldr	r1, [pc, #272]	; (8024a40 <_scanf_i+0x1e0>)
 8024930:	6960      	ldr	r0, [r4, #20]
 8024932:	1ac9      	subs	r1, r1, r3
 8024934:	f000 f944 	bl	8024bc0 <__sccl>
 8024938:	68a3      	ldr	r3, [r4, #8]
 802493a:	6822      	ldr	r2, [r4, #0]
 802493c:	2b00      	cmp	r3, #0
 802493e:	d03d      	beq.n	80249bc <_scanf_i+0x15c>
 8024940:	6831      	ldr	r1, [r6, #0]
 8024942:	6960      	ldr	r0, [r4, #20]
 8024944:	f891 c000 	ldrb.w	ip, [r1]
 8024948:	f810 000c 	ldrb.w	r0, [r0, ip]
 802494c:	2800      	cmp	r0, #0
 802494e:	d035      	beq.n	80249bc <_scanf_i+0x15c>
 8024950:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8024954:	d124      	bne.n	80249a0 <_scanf_i+0x140>
 8024956:	0510      	lsls	r0, r2, #20
 8024958:	d522      	bpl.n	80249a0 <_scanf_i+0x140>
 802495a:	f10b 0b01 	add.w	fp, fp, #1
 802495e:	f1b9 0f00 	cmp.w	r9, #0
 8024962:	d003      	beq.n	802496c <_scanf_i+0x10c>
 8024964:	3301      	adds	r3, #1
 8024966:	f109 39ff 	add.w	r9, r9, #4294967295
 802496a:	60a3      	str	r3, [r4, #8]
 802496c:	6873      	ldr	r3, [r6, #4]
 802496e:	3b01      	subs	r3, #1
 8024970:	2b00      	cmp	r3, #0
 8024972:	6073      	str	r3, [r6, #4]
 8024974:	dd1b      	ble.n	80249ae <_scanf_i+0x14e>
 8024976:	6833      	ldr	r3, [r6, #0]
 8024978:	3301      	adds	r3, #1
 802497a:	6033      	str	r3, [r6, #0]
 802497c:	68a3      	ldr	r3, [r4, #8]
 802497e:	3b01      	subs	r3, #1
 8024980:	60a3      	str	r3, [r4, #8]
 8024982:	e7d9      	b.n	8024938 <_scanf_i+0xd8>
 8024984:	f1bb 0f02 	cmp.w	fp, #2
 8024988:	d1ae      	bne.n	80248e8 <_scanf_i+0x88>
 802498a:	6822      	ldr	r2, [r4, #0]
 802498c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8024990:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8024994:	d1bf      	bne.n	8024916 <_scanf_i+0xb6>
 8024996:	2310      	movs	r3, #16
 8024998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802499c:	6063      	str	r3, [r4, #4]
 802499e:	e7a2      	b.n	80248e6 <_scanf_i+0x86>
 80249a0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80249a4:	6022      	str	r2, [r4, #0]
 80249a6:	780b      	ldrb	r3, [r1, #0]
 80249a8:	f805 3b01 	strb.w	r3, [r5], #1
 80249ac:	e7de      	b.n	802496c <_scanf_i+0x10c>
 80249ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80249b2:	4631      	mov	r1, r6
 80249b4:	4650      	mov	r0, sl
 80249b6:	4798      	blx	r3
 80249b8:	2800      	cmp	r0, #0
 80249ba:	d0df      	beq.n	802497c <_scanf_i+0x11c>
 80249bc:	6823      	ldr	r3, [r4, #0]
 80249be:	05d9      	lsls	r1, r3, #23
 80249c0:	d50d      	bpl.n	80249de <_scanf_i+0x17e>
 80249c2:	42bd      	cmp	r5, r7
 80249c4:	d909      	bls.n	80249da <_scanf_i+0x17a>
 80249c6:	f105 39ff 	add.w	r9, r5, #4294967295
 80249ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80249ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80249d2:	4632      	mov	r2, r6
 80249d4:	464d      	mov	r5, r9
 80249d6:	4650      	mov	r0, sl
 80249d8:	4798      	blx	r3
 80249da:	42bd      	cmp	r5, r7
 80249dc:	d028      	beq.n	8024a30 <_scanf_i+0x1d0>
 80249de:	6822      	ldr	r2, [r4, #0]
 80249e0:	f012 0210 	ands.w	r2, r2, #16
 80249e4:	d113      	bne.n	8024a0e <_scanf_i+0x1ae>
 80249e6:	702a      	strb	r2, [r5, #0]
 80249e8:	4639      	mov	r1, r7
 80249ea:	6863      	ldr	r3, [r4, #4]
 80249ec:	4650      	mov	r0, sl
 80249ee:	9e01      	ldr	r6, [sp, #4]
 80249f0:	47b0      	blx	r6
 80249f2:	f8d8 3000 	ldr.w	r3, [r8]
 80249f6:	6821      	ldr	r1, [r4, #0]
 80249f8:	1d1a      	adds	r2, r3, #4
 80249fa:	f011 0f20 	tst.w	r1, #32
 80249fe:	f8c8 2000 	str.w	r2, [r8]
 8024a02:	681b      	ldr	r3, [r3, #0]
 8024a04:	d00f      	beq.n	8024a26 <_scanf_i+0x1c6>
 8024a06:	6018      	str	r0, [r3, #0]
 8024a08:	68e3      	ldr	r3, [r4, #12]
 8024a0a:	3301      	adds	r3, #1
 8024a0c:	60e3      	str	r3, [r4, #12]
 8024a0e:	1bed      	subs	r5, r5, r7
 8024a10:	6923      	ldr	r3, [r4, #16]
 8024a12:	2000      	movs	r0, #0
 8024a14:	445d      	add	r5, fp
 8024a16:	442b      	add	r3, r5
 8024a18:	6123      	str	r3, [r4, #16]
 8024a1a:	b007      	add	sp, #28
 8024a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a20:	f04f 0b00 	mov.w	fp, #0
 8024a24:	e7ca      	b.n	80249bc <_scanf_i+0x15c>
 8024a26:	07ca      	lsls	r2, r1, #31
 8024a28:	bf4c      	ite	mi
 8024a2a:	8018      	strhmi	r0, [r3, #0]
 8024a2c:	6018      	strpl	r0, [r3, #0]
 8024a2e:	e7eb      	b.n	8024a08 <_scanf_i+0x1a8>
 8024a30:	2001      	movs	r0, #1
 8024a32:	e7f2      	b.n	8024a1a <_scanf_i+0x1ba>
 8024a34:	080258b4 	.word	0x080258b4
 8024a38:	08024f09 	.word	0x08024f09
 8024a3c:	08024e21 	.word	0x08024e21
 8024a40:	080260b7 	.word	0x080260b7

08024a44 <__sflush_r>:
 8024a44:	898a      	ldrh	r2, [r1, #12]
 8024a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a4a:	4605      	mov	r5, r0
 8024a4c:	0710      	lsls	r0, r2, #28
 8024a4e:	460c      	mov	r4, r1
 8024a50:	d458      	bmi.n	8024b04 <__sflush_r+0xc0>
 8024a52:	684b      	ldr	r3, [r1, #4]
 8024a54:	2b00      	cmp	r3, #0
 8024a56:	dc05      	bgt.n	8024a64 <__sflush_r+0x20>
 8024a58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	dc02      	bgt.n	8024a64 <__sflush_r+0x20>
 8024a5e:	2000      	movs	r0, #0
 8024a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024a66:	2e00      	cmp	r6, #0
 8024a68:	d0f9      	beq.n	8024a5e <__sflush_r+0x1a>
 8024a6a:	2300      	movs	r3, #0
 8024a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024a70:	682f      	ldr	r7, [r5, #0]
 8024a72:	6a21      	ldr	r1, [r4, #32]
 8024a74:	602b      	str	r3, [r5, #0]
 8024a76:	d032      	beq.n	8024ade <__sflush_r+0x9a>
 8024a78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024a7a:	89a3      	ldrh	r3, [r4, #12]
 8024a7c:	075a      	lsls	r2, r3, #29
 8024a7e:	d505      	bpl.n	8024a8c <__sflush_r+0x48>
 8024a80:	6863      	ldr	r3, [r4, #4]
 8024a82:	1ac0      	subs	r0, r0, r3
 8024a84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024a86:	b10b      	cbz	r3, 8024a8c <__sflush_r+0x48>
 8024a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024a8a:	1ac0      	subs	r0, r0, r3
 8024a8c:	2300      	movs	r3, #0
 8024a8e:	4602      	mov	r2, r0
 8024a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024a92:	4628      	mov	r0, r5
 8024a94:	6a21      	ldr	r1, [r4, #32]
 8024a96:	47b0      	blx	r6
 8024a98:	1c43      	adds	r3, r0, #1
 8024a9a:	89a3      	ldrh	r3, [r4, #12]
 8024a9c:	d106      	bne.n	8024aac <__sflush_r+0x68>
 8024a9e:	6829      	ldr	r1, [r5, #0]
 8024aa0:	291d      	cmp	r1, #29
 8024aa2:	d82b      	bhi.n	8024afc <__sflush_r+0xb8>
 8024aa4:	4a28      	ldr	r2, [pc, #160]	; (8024b48 <__sflush_r+0x104>)
 8024aa6:	410a      	asrs	r2, r1
 8024aa8:	07d6      	lsls	r6, r2, #31
 8024aaa:	d427      	bmi.n	8024afc <__sflush_r+0xb8>
 8024aac:	2200      	movs	r2, #0
 8024aae:	04d9      	lsls	r1, r3, #19
 8024ab0:	6062      	str	r2, [r4, #4]
 8024ab2:	6922      	ldr	r2, [r4, #16]
 8024ab4:	6022      	str	r2, [r4, #0]
 8024ab6:	d504      	bpl.n	8024ac2 <__sflush_r+0x7e>
 8024ab8:	1c42      	adds	r2, r0, #1
 8024aba:	d101      	bne.n	8024ac0 <__sflush_r+0x7c>
 8024abc:	682b      	ldr	r3, [r5, #0]
 8024abe:	b903      	cbnz	r3, 8024ac2 <__sflush_r+0x7e>
 8024ac0:	6560      	str	r0, [r4, #84]	; 0x54
 8024ac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024ac4:	602f      	str	r7, [r5, #0]
 8024ac6:	2900      	cmp	r1, #0
 8024ac8:	d0c9      	beq.n	8024a5e <__sflush_r+0x1a>
 8024aca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024ace:	4299      	cmp	r1, r3
 8024ad0:	d002      	beq.n	8024ad8 <__sflush_r+0x94>
 8024ad2:	4628      	mov	r0, r5
 8024ad4:	f7ff fc4c 	bl	8024370 <_free_r>
 8024ad8:	2000      	movs	r0, #0
 8024ada:	6360      	str	r0, [r4, #52]	; 0x34
 8024adc:	e7c0      	b.n	8024a60 <__sflush_r+0x1c>
 8024ade:	2301      	movs	r3, #1
 8024ae0:	4628      	mov	r0, r5
 8024ae2:	47b0      	blx	r6
 8024ae4:	1c41      	adds	r1, r0, #1
 8024ae6:	d1c8      	bne.n	8024a7a <__sflush_r+0x36>
 8024ae8:	682b      	ldr	r3, [r5, #0]
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d0c5      	beq.n	8024a7a <__sflush_r+0x36>
 8024aee:	2b1d      	cmp	r3, #29
 8024af0:	d001      	beq.n	8024af6 <__sflush_r+0xb2>
 8024af2:	2b16      	cmp	r3, #22
 8024af4:	d101      	bne.n	8024afa <__sflush_r+0xb6>
 8024af6:	602f      	str	r7, [r5, #0]
 8024af8:	e7b1      	b.n	8024a5e <__sflush_r+0x1a>
 8024afa:	89a3      	ldrh	r3, [r4, #12]
 8024afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024b00:	81a3      	strh	r3, [r4, #12]
 8024b02:	e7ad      	b.n	8024a60 <__sflush_r+0x1c>
 8024b04:	690f      	ldr	r7, [r1, #16]
 8024b06:	2f00      	cmp	r7, #0
 8024b08:	d0a9      	beq.n	8024a5e <__sflush_r+0x1a>
 8024b0a:	0793      	lsls	r3, r2, #30
 8024b0c:	680e      	ldr	r6, [r1, #0]
 8024b0e:	600f      	str	r7, [r1, #0]
 8024b10:	bf0c      	ite	eq
 8024b12:	694b      	ldreq	r3, [r1, #20]
 8024b14:	2300      	movne	r3, #0
 8024b16:	eba6 0807 	sub.w	r8, r6, r7
 8024b1a:	608b      	str	r3, [r1, #8]
 8024b1c:	f1b8 0f00 	cmp.w	r8, #0
 8024b20:	dd9d      	ble.n	8024a5e <__sflush_r+0x1a>
 8024b22:	4643      	mov	r3, r8
 8024b24:	463a      	mov	r2, r7
 8024b26:	6a21      	ldr	r1, [r4, #32]
 8024b28:	4628      	mov	r0, r5
 8024b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024b2c:	47b0      	blx	r6
 8024b2e:	2800      	cmp	r0, #0
 8024b30:	dc06      	bgt.n	8024b40 <__sflush_r+0xfc>
 8024b32:	89a3      	ldrh	r3, [r4, #12]
 8024b34:	f04f 30ff 	mov.w	r0, #4294967295
 8024b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024b3c:	81a3      	strh	r3, [r4, #12]
 8024b3e:	e78f      	b.n	8024a60 <__sflush_r+0x1c>
 8024b40:	4407      	add	r7, r0
 8024b42:	eba8 0800 	sub.w	r8, r8, r0
 8024b46:	e7e9      	b.n	8024b1c <__sflush_r+0xd8>
 8024b48:	dfbffffe 	.word	0xdfbffffe

08024b4c <_fflush_r>:
 8024b4c:	b538      	push	{r3, r4, r5, lr}
 8024b4e:	690b      	ldr	r3, [r1, #16]
 8024b50:	4605      	mov	r5, r0
 8024b52:	460c      	mov	r4, r1
 8024b54:	b913      	cbnz	r3, 8024b5c <_fflush_r+0x10>
 8024b56:	2500      	movs	r5, #0
 8024b58:	4628      	mov	r0, r5
 8024b5a:	bd38      	pop	{r3, r4, r5, pc}
 8024b5c:	b118      	cbz	r0, 8024b66 <_fflush_r+0x1a>
 8024b5e:	6a03      	ldr	r3, [r0, #32]
 8024b60:	b90b      	cbnz	r3, 8024b66 <_fflush_r+0x1a>
 8024b62:	f7ff fa49 	bl	8023ff8 <__sinit>
 8024b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	d0f3      	beq.n	8024b56 <_fflush_r+0xa>
 8024b6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024b70:	07d0      	lsls	r0, r2, #31
 8024b72:	d404      	bmi.n	8024b7e <_fflush_r+0x32>
 8024b74:	0599      	lsls	r1, r3, #22
 8024b76:	d402      	bmi.n	8024b7e <_fflush_r+0x32>
 8024b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024b7a:	f7ff fbcc 	bl	8024316 <__retarget_lock_acquire_recursive>
 8024b7e:	4628      	mov	r0, r5
 8024b80:	4621      	mov	r1, r4
 8024b82:	f7ff ff5f 	bl	8024a44 <__sflush_r>
 8024b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024b88:	4605      	mov	r5, r0
 8024b8a:	07da      	lsls	r2, r3, #31
 8024b8c:	d4e4      	bmi.n	8024b58 <_fflush_r+0xc>
 8024b8e:	89a3      	ldrh	r3, [r4, #12]
 8024b90:	059b      	lsls	r3, r3, #22
 8024b92:	d4e1      	bmi.n	8024b58 <_fflush_r+0xc>
 8024b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024b96:	f7ff fbbf 	bl	8024318 <__retarget_lock_release_recursive>
 8024b9a:	e7dd      	b.n	8024b58 <_fflush_r+0xc>

08024b9c <fiprintf>:
 8024b9c:	b40e      	push	{r1, r2, r3}
 8024b9e:	b503      	push	{r0, r1, lr}
 8024ba0:	ab03      	add	r3, sp, #12
 8024ba2:	4601      	mov	r1, r0
 8024ba4:	4805      	ldr	r0, [pc, #20]	; (8024bbc <fiprintf+0x20>)
 8024ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8024baa:	6800      	ldr	r0, [r0, #0]
 8024bac:	9301      	str	r3, [sp, #4]
 8024bae:	f000 f9d7 	bl	8024f60 <_vfiprintf_r>
 8024bb2:	b002      	add	sp, #8
 8024bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8024bb8:	b003      	add	sp, #12
 8024bba:	4770      	bx	lr
 8024bbc:	20000108 	.word	0x20000108

08024bc0 <__sccl>:
 8024bc0:	b570      	push	{r4, r5, r6, lr}
 8024bc2:	780b      	ldrb	r3, [r1, #0]
 8024bc4:	4604      	mov	r4, r0
 8024bc6:	3801      	subs	r0, #1
 8024bc8:	2b5e      	cmp	r3, #94	; 0x5e
 8024bca:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8024bce:	bf13      	iteet	ne
 8024bd0:	1c4a      	addne	r2, r1, #1
 8024bd2:	1c8a      	addeq	r2, r1, #2
 8024bd4:	784b      	ldrbeq	r3, [r1, #1]
 8024bd6:	2100      	movne	r1, #0
 8024bd8:	bf08      	it	eq
 8024bda:	2101      	moveq	r1, #1
 8024bdc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8024be0:	42a8      	cmp	r0, r5
 8024be2:	d1fb      	bne.n	8024bdc <__sccl+0x1c>
 8024be4:	b90b      	cbnz	r3, 8024bea <__sccl+0x2a>
 8024be6:	1e50      	subs	r0, r2, #1
 8024be8:	bd70      	pop	{r4, r5, r6, pc}
 8024bea:	f081 0101 	eor.w	r1, r1, #1
 8024bee:	4610      	mov	r0, r2
 8024bf0:	54e1      	strb	r1, [r4, r3]
 8024bf2:	4602      	mov	r2, r0
 8024bf4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8024bf8:	2d2d      	cmp	r5, #45	; 0x2d
 8024bfa:	d005      	beq.n	8024c08 <__sccl+0x48>
 8024bfc:	2d5d      	cmp	r5, #93	; 0x5d
 8024bfe:	d016      	beq.n	8024c2e <__sccl+0x6e>
 8024c00:	2d00      	cmp	r5, #0
 8024c02:	d0f1      	beq.n	8024be8 <__sccl+0x28>
 8024c04:	462b      	mov	r3, r5
 8024c06:	e7f2      	b.n	8024bee <__sccl+0x2e>
 8024c08:	7846      	ldrb	r6, [r0, #1]
 8024c0a:	2e5d      	cmp	r6, #93	; 0x5d
 8024c0c:	d0fa      	beq.n	8024c04 <__sccl+0x44>
 8024c0e:	42b3      	cmp	r3, r6
 8024c10:	dcf8      	bgt.n	8024c04 <__sccl+0x44>
 8024c12:	3002      	adds	r0, #2
 8024c14:	461a      	mov	r2, r3
 8024c16:	3201      	adds	r2, #1
 8024c18:	4296      	cmp	r6, r2
 8024c1a:	54a1      	strb	r1, [r4, r2]
 8024c1c:	dcfb      	bgt.n	8024c16 <__sccl+0x56>
 8024c1e:	1af2      	subs	r2, r6, r3
 8024c20:	1c5d      	adds	r5, r3, #1
 8024c22:	3a01      	subs	r2, #1
 8024c24:	42b3      	cmp	r3, r6
 8024c26:	bfa8      	it	ge
 8024c28:	2200      	movge	r2, #0
 8024c2a:	18ab      	adds	r3, r5, r2
 8024c2c:	e7e1      	b.n	8024bf2 <__sccl+0x32>
 8024c2e:	4610      	mov	r0, r2
 8024c30:	e7da      	b.n	8024be8 <__sccl+0x28>

08024c32 <__submore>:
 8024c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c36:	460c      	mov	r4, r1
 8024c38:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024c3e:	4299      	cmp	r1, r3
 8024c40:	d11a      	bne.n	8024c78 <__submore+0x46>
 8024c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024c46:	f7ff f881 	bl	8023d4c <_malloc_r>
 8024c4a:	b918      	cbnz	r0, 8024c54 <__submore+0x22>
 8024c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8024c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024c58:	6360      	str	r0, [r4, #52]	; 0x34
 8024c5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8024c5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8024c60:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8024c64:	7083      	strb	r3, [r0, #2]
 8024c66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8024c6a:	7043      	strb	r3, [r0, #1]
 8024c6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8024c70:	7003      	strb	r3, [r0, #0]
 8024c72:	6020      	str	r0, [r4, #0]
 8024c74:	2000      	movs	r0, #0
 8024c76:	e7eb      	b.n	8024c50 <__submore+0x1e>
 8024c78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8024c7a:	0077      	lsls	r7, r6, #1
 8024c7c:	463a      	mov	r2, r7
 8024c7e:	f000 f81d 	bl	8024cbc <_realloc_r>
 8024c82:	4605      	mov	r5, r0
 8024c84:	2800      	cmp	r0, #0
 8024c86:	d0e1      	beq.n	8024c4c <__submore+0x1a>
 8024c88:	eb00 0806 	add.w	r8, r0, r6
 8024c8c:	4601      	mov	r1, r0
 8024c8e:	4632      	mov	r2, r6
 8024c90:	4640      	mov	r0, r8
 8024c92:	f7ff fb42 	bl	802431a <memcpy>
 8024c96:	f8c4 8000 	str.w	r8, [r4]
 8024c9a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8024c9e:	e7e9      	b.n	8024c74 <__submore+0x42>

08024ca0 <memchr>:
 8024ca0:	b2c9      	uxtb	r1, r1
 8024ca2:	4402      	add	r2, r0
 8024ca4:	b510      	push	{r4, lr}
 8024ca6:	4290      	cmp	r0, r2
 8024ca8:	4603      	mov	r3, r0
 8024caa:	d101      	bne.n	8024cb0 <memchr+0x10>
 8024cac:	2300      	movs	r3, #0
 8024cae:	e003      	b.n	8024cb8 <memchr+0x18>
 8024cb0:	781c      	ldrb	r4, [r3, #0]
 8024cb2:	3001      	adds	r0, #1
 8024cb4:	428c      	cmp	r4, r1
 8024cb6:	d1f6      	bne.n	8024ca6 <memchr+0x6>
 8024cb8:	4618      	mov	r0, r3
 8024cba:	bd10      	pop	{r4, pc}

08024cbc <_realloc_r>:
 8024cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024cc0:	4680      	mov	r8, r0
 8024cc2:	4614      	mov	r4, r2
 8024cc4:	460e      	mov	r6, r1
 8024cc6:	b921      	cbnz	r1, 8024cd2 <_realloc_r+0x16>
 8024cc8:	4611      	mov	r1, r2
 8024cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024cce:	f7ff b83d 	b.w	8023d4c <_malloc_r>
 8024cd2:	b92a      	cbnz	r2, 8024ce0 <_realloc_r+0x24>
 8024cd4:	4625      	mov	r5, r4
 8024cd6:	f7ff fb4b 	bl	8024370 <_free_r>
 8024cda:	4628      	mov	r0, r5
 8024cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ce0:	f000 fc80 	bl	80255e4 <_malloc_usable_size_r>
 8024ce4:	4284      	cmp	r4, r0
 8024ce6:	4607      	mov	r7, r0
 8024ce8:	d802      	bhi.n	8024cf0 <_realloc_r+0x34>
 8024cea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8024cee:	d812      	bhi.n	8024d16 <_realloc_r+0x5a>
 8024cf0:	4621      	mov	r1, r4
 8024cf2:	4640      	mov	r0, r8
 8024cf4:	f7ff f82a 	bl	8023d4c <_malloc_r>
 8024cf8:	4605      	mov	r5, r0
 8024cfa:	2800      	cmp	r0, #0
 8024cfc:	d0ed      	beq.n	8024cda <_realloc_r+0x1e>
 8024cfe:	42bc      	cmp	r4, r7
 8024d00:	4622      	mov	r2, r4
 8024d02:	4631      	mov	r1, r6
 8024d04:	bf28      	it	cs
 8024d06:	463a      	movcs	r2, r7
 8024d08:	f7ff fb07 	bl	802431a <memcpy>
 8024d0c:	4631      	mov	r1, r6
 8024d0e:	4640      	mov	r0, r8
 8024d10:	f7ff fb2e 	bl	8024370 <_free_r>
 8024d14:	e7e1      	b.n	8024cda <_realloc_r+0x1e>
 8024d16:	4635      	mov	r5, r6
 8024d18:	e7df      	b.n	8024cda <_realloc_r+0x1e>
	...

08024d1c <_strtol_l.constprop.0>:
 8024d1c:	2b01      	cmp	r3, #1
 8024d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024d22:	d001      	beq.n	8024d28 <_strtol_l.constprop.0+0xc>
 8024d24:	2b24      	cmp	r3, #36	; 0x24
 8024d26:	d906      	bls.n	8024d36 <_strtol_l.constprop.0+0x1a>
 8024d28:	f7ff faca 	bl	80242c0 <__errno>
 8024d2c:	2316      	movs	r3, #22
 8024d2e:	6003      	str	r3, [r0, #0]
 8024d30:	2000      	movs	r0, #0
 8024d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d36:	460d      	mov	r5, r1
 8024d38:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8024e1c <_strtol_l.constprop.0+0x100>
 8024d3c:	462e      	mov	r6, r5
 8024d3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024d42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8024d46:	f017 0708 	ands.w	r7, r7, #8
 8024d4a:	d1f7      	bne.n	8024d3c <_strtol_l.constprop.0+0x20>
 8024d4c:	2c2d      	cmp	r4, #45	; 0x2d
 8024d4e:	d132      	bne.n	8024db6 <_strtol_l.constprop.0+0x9a>
 8024d50:	782c      	ldrb	r4, [r5, #0]
 8024d52:	2701      	movs	r7, #1
 8024d54:	1cb5      	adds	r5, r6, #2
 8024d56:	2b00      	cmp	r3, #0
 8024d58:	d05b      	beq.n	8024e12 <_strtol_l.constprop.0+0xf6>
 8024d5a:	2b10      	cmp	r3, #16
 8024d5c:	d109      	bne.n	8024d72 <_strtol_l.constprop.0+0x56>
 8024d5e:	2c30      	cmp	r4, #48	; 0x30
 8024d60:	d107      	bne.n	8024d72 <_strtol_l.constprop.0+0x56>
 8024d62:	782c      	ldrb	r4, [r5, #0]
 8024d64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8024d68:	2c58      	cmp	r4, #88	; 0x58
 8024d6a:	d14d      	bne.n	8024e08 <_strtol_l.constprop.0+0xec>
 8024d6c:	786c      	ldrb	r4, [r5, #1]
 8024d6e:	2310      	movs	r3, #16
 8024d70:	3502      	adds	r5, #2
 8024d72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8024d76:	f04f 0e00 	mov.w	lr, #0
 8024d7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8024d7e:	4676      	mov	r6, lr
 8024d80:	fbb8 f9f3 	udiv	r9, r8, r3
 8024d84:	fb03 8a19 	mls	sl, r3, r9, r8
 8024d88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8024d8c:	f1bc 0f09 	cmp.w	ip, #9
 8024d90:	d816      	bhi.n	8024dc0 <_strtol_l.constprop.0+0xa4>
 8024d92:	4664      	mov	r4, ip
 8024d94:	42a3      	cmp	r3, r4
 8024d96:	dd24      	ble.n	8024de2 <_strtol_l.constprop.0+0xc6>
 8024d98:	f1be 3fff 	cmp.w	lr, #4294967295
 8024d9c:	d008      	beq.n	8024db0 <_strtol_l.constprop.0+0x94>
 8024d9e:	45b1      	cmp	r9, r6
 8024da0:	d31c      	bcc.n	8024ddc <_strtol_l.constprop.0+0xc0>
 8024da2:	d101      	bne.n	8024da8 <_strtol_l.constprop.0+0x8c>
 8024da4:	45a2      	cmp	sl, r4
 8024da6:	db19      	blt.n	8024ddc <_strtol_l.constprop.0+0xc0>
 8024da8:	fb06 4603 	mla	r6, r6, r3, r4
 8024dac:	f04f 0e01 	mov.w	lr, #1
 8024db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024db4:	e7e8      	b.n	8024d88 <_strtol_l.constprop.0+0x6c>
 8024db6:	2c2b      	cmp	r4, #43	; 0x2b
 8024db8:	bf04      	itt	eq
 8024dba:	782c      	ldrbeq	r4, [r5, #0]
 8024dbc:	1cb5      	addeq	r5, r6, #2
 8024dbe:	e7ca      	b.n	8024d56 <_strtol_l.constprop.0+0x3a>
 8024dc0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8024dc4:	f1bc 0f19 	cmp.w	ip, #25
 8024dc8:	d801      	bhi.n	8024dce <_strtol_l.constprop.0+0xb2>
 8024dca:	3c37      	subs	r4, #55	; 0x37
 8024dcc:	e7e2      	b.n	8024d94 <_strtol_l.constprop.0+0x78>
 8024dce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8024dd2:	f1bc 0f19 	cmp.w	ip, #25
 8024dd6:	d804      	bhi.n	8024de2 <_strtol_l.constprop.0+0xc6>
 8024dd8:	3c57      	subs	r4, #87	; 0x57
 8024dda:	e7db      	b.n	8024d94 <_strtol_l.constprop.0+0x78>
 8024ddc:	f04f 3eff 	mov.w	lr, #4294967295
 8024de0:	e7e6      	b.n	8024db0 <_strtol_l.constprop.0+0x94>
 8024de2:	f1be 3fff 	cmp.w	lr, #4294967295
 8024de6:	d105      	bne.n	8024df4 <_strtol_l.constprop.0+0xd8>
 8024de8:	2322      	movs	r3, #34	; 0x22
 8024dea:	4646      	mov	r6, r8
 8024dec:	6003      	str	r3, [r0, #0]
 8024dee:	b942      	cbnz	r2, 8024e02 <_strtol_l.constprop.0+0xe6>
 8024df0:	4630      	mov	r0, r6
 8024df2:	e79e      	b.n	8024d32 <_strtol_l.constprop.0+0x16>
 8024df4:	b107      	cbz	r7, 8024df8 <_strtol_l.constprop.0+0xdc>
 8024df6:	4276      	negs	r6, r6
 8024df8:	2a00      	cmp	r2, #0
 8024dfa:	d0f9      	beq.n	8024df0 <_strtol_l.constprop.0+0xd4>
 8024dfc:	f1be 0f00 	cmp.w	lr, #0
 8024e00:	d000      	beq.n	8024e04 <_strtol_l.constprop.0+0xe8>
 8024e02:	1e69      	subs	r1, r5, #1
 8024e04:	6011      	str	r1, [r2, #0]
 8024e06:	e7f3      	b.n	8024df0 <_strtol_l.constprop.0+0xd4>
 8024e08:	2430      	movs	r4, #48	; 0x30
 8024e0a:	2b00      	cmp	r3, #0
 8024e0c:	d1b1      	bne.n	8024d72 <_strtol_l.constprop.0+0x56>
 8024e0e:	2308      	movs	r3, #8
 8024e10:	e7af      	b.n	8024d72 <_strtol_l.constprop.0+0x56>
 8024e12:	2c30      	cmp	r4, #48	; 0x30
 8024e14:	d0a5      	beq.n	8024d62 <_strtol_l.constprop.0+0x46>
 8024e16:	230a      	movs	r3, #10
 8024e18:	e7ab      	b.n	8024d72 <_strtol_l.constprop.0+0x56>
 8024e1a:	bf00      	nop
 8024e1c:	080260c3 	.word	0x080260c3

08024e20 <_strtol_r>:
 8024e20:	f7ff bf7c 	b.w	8024d1c <_strtol_l.constprop.0>

08024e24 <_strtoul_l.constprop.0>:
 8024e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024e28:	4686      	mov	lr, r0
 8024e2a:	460d      	mov	r5, r1
 8024e2c:	4f35      	ldr	r7, [pc, #212]	; (8024f04 <_strtoul_l.constprop.0+0xe0>)
 8024e2e:	4628      	mov	r0, r5
 8024e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024e34:	5d3e      	ldrb	r6, [r7, r4]
 8024e36:	f016 0608 	ands.w	r6, r6, #8
 8024e3a:	d1f8      	bne.n	8024e2e <_strtoul_l.constprop.0+0xa>
 8024e3c:	2c2d      	cmp	r4, #45	; 0x2d
 8024e3e:	d130      	bne.n	8024ea2 <_strtoul_l.constprop.0+0x7e>
 8024e40:	782c      	ldrb	r4, [r5, #0]
 8024e42:	2601      	movs	r6, #1
 8024e44:	1c85      	adds	r5, r0, #2
 8024e46:	2b00      	cmp	r3, #0
 8024e48:	d057      	beq.n	8024efa <_strtoul_l.constprop.0+0xd6>
 8024e4a:	2b10      	cmp	r3, #16
 8024e4c:	d109      	bne.n	8024e62 <_strtoul_l.constprop.0+0x3e>
 8024e4e:	2c30      	cmp	r4, #48	; 0x30
 8024e50:	d107      	bne.n	8024e62 <_strtoul_l.constprop.0+0x3e>
 8024e52:	7828      	ldrb	r0, [r5, #0]
 8024e54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8024e58:	2858      	cmp	r0, #88	; 0x58
 8024e5a:	d149      	bne.n	8024ef0 <_strtoul_l.constprop.0+0xcc>
 8024e5c:	786c      	ldrb	r4, [r5, #1]
 8024e5e:	2310      	movs	r3, #16
 8024e60:	3502      	adds	r5, #2
 8024e62:	f04f 38ff 	mov.w	r8, #4294967295
 8024e66:	2700      	movs	r7, #0
 8024e68:	fbb8 f8f3 	udiv	r8, r8, r3
 8024e6c:	fb03 f908 	mul.w	r9, r3, r8
 8024e70:	4638      	mov	r0, r7
 8024e72:	ea6f 0909 	mvn.w	r9, r9
 8024e76:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8024e7a:	f1bc 0f09 	cmp.w	ip, #9
 8024e7e:	d815      	bhi.n	8024eac <_strtoul_l.constprop.0+0x88>
 8024e80:	4664      	mov	r4, ip
 8024e82:	42a3      	cmp	r3, r4
 8024e84:	dd23      	ble.n	8024ece <_strtoul_l.constprop.0+0xaa>
 8024e86:	f1b7 3fff 	cmp.w	r7, #4294967295
 8024e8a:	d007      	beq.n	8024e9c <_strtoul_l.constprop.0+0x78>
 8024e8c:	4580      	cmp	r8, r0
 8024e8e:	d31b      	bcc.n	8024ec8 <_strtoul_l.constprop.0+0xa4>
 8024e90:	d101      	bne.n	8024e96 <_strtoul_l.constprop.0+0x72>
 8024e92:	45a1      	cmp	r9, r4
 8024e94:	db18      	blt.n	8024ec8 <_strtoul_l.constprop.0+0xa4>
 8024e96:	fb00 4003 	mla	r0, r0, r3, r4
 8024e9a:	2701      	movs	r7, #1
 8024e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024ea0:	e7e9      	b.n	8024e76 <_strtoul_l.constprop.0+0x52>
 8024ea2:	2c2b      	cmp	r4, #43	; 0x2b
 8024ea4:	bf04      	itt	eq
 8024ea6:	782c      	ldrbeq	r4, [r5, #0]
 8024ea8:	1c85      	addeq	r5, r0, #2
 8024eaa:	e7cc      	b.n	8024e46 <_strtoul_l.constprop.0+0x22>
 8024eac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8024eb0:	f1bc 0f19 	cmp.w	ip, #25
 8024eb4:	d801      	bhi.n	8024eba <_strtoul_l.constprop.0+0x96>
 8024eb6:	3c37      	subs	r4, #55	; 0x37
 8024eb8:	e7e3      	b.n	8024e82 <_strtoul_l.constprop.0+0x5e>
 8024eba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8024ebe:	f1bc 0f19 	cmp.w	ip, #25
 8024ec2:	d804      	bhi.n	8024ece <_strtoul_l.constprop.0+0xaa>
 8024ec4:	3c57      	subs	r4, #87	; 0x57
 8024ec6:	e7dc      	b.n	8024e82 <_strtoul_l.constprop.0+0x5e>
 8024ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8024ecc:	e7e6      	b.n	8024e9c <_strtoul_l.constprop.0+0x78>
 8024ece:	1c7b      	adds	r3, r7, #1
 8024ed0:	d106      	bne.n	8024ee0 <_strtoul_l.constprop.0+0xbc>
 8024ed2:	2322      	movs	r3, #34	; 0x22
 8024ed4:	4638      	mov	r0, r7
 8024ed6:	f8ce 3000 	str.w	r3, [lr]
 8024eda:	b932      	cbnz	r2, 8024eea <_strtoul_l.constprop.0+0xc6>
 8024edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024ee0:	b106      	cbz	r6, 8024ee4 <_strtoul_l.constprop.0+0xc0>
 8024ee2:	4240      	negs	r0, r0
 8024ee4:	2a00      	cmp	r2, #0
 8024ee6:	d0f9      	beq.n	8024edc <_strtoul_l.constprop.0+0xb8>
 8024ee8:	b107      	cbz	r7, 8024eec <_strtoul_l.constprop.0+0xc8>
 8024eea:	1e69      	subs	r1, r5, #1
 8024eec:	6011      	str	r1, [r2, #0]
 8024eee:	e7f5      	b.n	8024edc <_strtoul_l.constprop.0+0xb8>
 8024ef0:	2430      	movs	r4, #48	; 0x30
 8024ef2:	2b00      	cmp	r3, #0
 8024ef4:	d1b5      	bne.n	8024e62 <_strtoul_l.constprop.0+0x3e>
 8024ef6:	2308      	movs	r3, #8
 8024ef8:	e7b3      	b.n	8024e62 <_strtoul_l.constprop.0+0x3e>
 8024efa:	2c30      	cmp	r4, #48	; 0x30
 8024efc:	d0a9      	beq.n	8024e52 <_strtoul_l.constprop.0+0x2e>
 8024efe:	230a      	movs	r3, #10
 8024f00:	e7af      	b.n	8024e62 <_strtoul_l.constprop.0+0x3e>
 8024f02:	bf00      	nop
 8024f04:	080260c3 	.word	0x080260c3

08024f08 <_strtoul_r>:
 8024f08:	f7ff bf8c 	b.w	8024e24 <_strtoul_l.constprop.0>

08024f0c <__sfputc_r>:
 8024f0c:	6893      	ldr	r3, [r2, #8]
 8024f0e:	3b01      	subs	r3, #1
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	6093      	str	r3, [r2, #8]
 8024f14:	b410      	push	{r4}
 8024f16:	da08      	bge.n	8024f2a <__sfputc_r+0x1e>
 8024f18:	6994      	ldr	r4, [r2, #24]
 8024f1a:	42a3      	cmp	r3, r4
 8024f1c:	db01      	blt.n	8024f22 <__sfputc_r+0x16>
 8024f1e:	290a      	cmp	r1, #10
 8024f20:	d103      	bne.n	8024f2a <__sfputc_r+0x1e>
 8024f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f26:	f000 bac7 	b.w	80254b8 <__swbuf_r>
 8024f2a:	6813      	ldr	r3, [r2, #0]
 8024f2c:	1c58      	adds	r0, r3, #1
 8024f2e:	6010      	str	r0, [r2, #0]
 8024f30:	4608      	mov	r0, r1
 8024f32:	7019      	strb	r1, [r3, #0]
 8024f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f38:	4770      	bx	lr

08024f3a <__sfputs_r>:
 8024f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f3c:	4606      	mov	r6, r0
 8024f3e:	460f      	mov	r7, r1
 8024f40:	4614      	mov	r4, r2
 8024f42:	18d5      	adds	r5, r2, r3
 8024f44:	42ac      	cmp	r4, r5
 8024f46:	d101      	bne.n	8024f4c <__sfputs_r+0x12>
 8024f48:	2000      	movs	r0, #0
 8024f4a:	e007      	b.n	8024f5c <__sfputs_r+0x22>
 8024f4c:	463a      	mov	r2, r7
 8024f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024f52:	4630      	mov	r0, r6
 8024f54:	f7ff ffda 	bl	8024f0c <__sfputc_r>
 8024f58:	1c43      	adds	r3, r0, #1
 8024f5a:	d1f3      	bne.n	8024f44 <__sfputs_r+0xa>
 8024f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024f60 <_vfiprintf_r>:
 8024f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f64:	460d      	mov	r5, r1
 8024f66:	b09d      	sub	sp, #116	; 0x74
 8024f68:	4614      	mov	r4, r2
 8024f6a:	4698      	mov	r8, r3
 8024f6c:	4606      	mov	r6, r0
 8024f6e:	b118      	cbz	r0, 8024f78 <_vfiprintf_r+0x18>
 8024f70:	6a03      	ldr	r3, [r0, #32]
 8024f72:	b90b      	cbnz	r3, 8024f78 <_vfiprintf_r+0x18>
 8024f74:	f7ff f840 	bl	8023ff8 <__sinit>
 8024f78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024f7a:	07d9      	lsls	r1, r3, #31
 8024f7c:	d405      	bmi.n	8024f8a <_vfiprintf_r+0x2a>
 8024f7e:	89ab      	ldrh	r3, [r5, #12]
 8024f80:	059a      	lsls	r2, r3, #22
 8024f82:	d402      	bmi.n	8024f8a <_vfiprintf_r+0x2a>
 8024f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024f86:	f7ff f9c6 	bl	8024316 <__retarget_lock_acquire_recursive>
 8024f8a:	89ab      	ldrh	r3, [r5, #12]
 8024f8c:	071b      	lsls	r3, r3, #28
 8024f8e:	d501      	bpl.n	8024f94 <_vfiprintf_r+0x34>
 8024f90:	692b      	ldr	r3, [r5, #16]
 8024f92:	b99b      	cbnz	r3, 8024fbc <_vfiprintf_r+0x5c>
 8024f94:	4629      	mov	r1, r5
 8024f96:	4630      	mov	r0, r6
 8024f98:	f000 facc 	bl	8025534 <__swsetup_r>
 8024f9c:	b170      	cbz	r0, 8024fbc <_vfiprintf_r+0x5c>
 8024f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024fa0:	07dc      	lsls	r4, r3, #31
 8024fa2:	d504      	bpl.n	8024fae <_vfiprintf_r+0x4e>
 8024fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8024fa8:	b01d      	add	sp, #116	; 0x74
 8024faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fae:	89ab      	ldrh	r3, [r5, #12]
 8024fb0:	0598      	lsls	r0, r3, #22
 8024fb2:	d4f7      	bmi.n	8024fa4 <_vfiprintf_r+0x44>
 8024fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024fb6:	f7ff f9af 	bl	8024318 <__retarget_lock_release_recursive>
 8024fba:	e7f3      	b.n	8024fa4 <_vfiprintf_r+0x44>
 8024fbc:	2300      	movs	r3, #0
 8024fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8024fc2:	f04f 0901 	mov.w	r9, #1
 8024fc6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8025180 <_vfiprintf_r+0x220>
 8024fca:	9309      	str	r3, [sp, #36]	; 0x24
 8024fcc:	2320      	movs	r3, #32
 8024fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024fd2:	2330      	movs	r3, #48	; 0x30
 8024fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024fd8:	4623      	mov	r3, r4
 8024fda:	469a      	mov	sl, r3
 8024fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024fe0:	b10a      	cbz	r2, 8024fe6 <_vfiprintf_r+0x86>
 8024fe2:	2a25      	cmp	r2, #37	; 0x25
 8024fe4:	d1f9      	bne.n	8024fda <_vfiprintf_r+0x7a>
 8024fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8024fea:	d00b      	beq.n	8025004 <_vfiprintf_r+0xa4>
 8024fec:	465b      	mov	r3, fp
 8024fee:	4622      	mov	r2, r4
 8024ff0:	4629      	mov	r1, r5
 8024ff2:	4630      	mov	r0, r6
 8024ff4:	f7ff ffa1 	bl	8024f3a <__sfputs_r>
 8024ff8:	3001      	adds	r0, #1
 8024ffa:	f000 80a9 	beq.w	8025150 <_vfiprintf_r+0x1f0>
 8024ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025000:	445a      	add	r2, fp
 8025002:	9209      	str	r2, [sp, #36]	; 0x24
 8025004:	f89a 3000 	ldrb.w	r3, [sl]
 8025008:	2b00      	cmp	r3, #0
 802500a:	f000 80a1 	beq.w	8025150 <_vfiprintf_r+0x1f0>
 802500e:	2300      	movs	r3, #0
 8025010:	f04f 32ff 	mov.w	r2, #4294967295
 8025014:	f10a 0a01 	add.w	sl, sl, #1
 8025018:	9304      	str	r3, [sp, #16]
 802501a:	9307      	str	r3, [sp, #28]
 802501c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025020:	931a      	str	r3, [sp, #104]	; 0x68
 8025022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025026:	4654      	mov	r4, sl
 8025028:	2205      	movs	r2, #5
 802502a:	4855      	ldr	r0, [pc, #340]	; (8025180 <_vfiprintf_r+0x220>)
 802502c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025030:	f7ff fe36 	bl	8024ca0 <memchr>
 8025034:	9a04      	ldr	r2, [sp, #16]
 8025036:	b9d8      	cbnz	r0, 8025070 <_vfiprintf_r+0x110>
 8025038:	06d1      	lsls	r1, r2, #27
 802503a:	bf44      	itt	mi
 802503c:	2320      	movmi	r3, #32
 802503e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025042:	0713      	lsls	r3, r2, #28
 8025044:	bf44      	itt	mi
 8025046:	232b      	movmi	r3, #43	; 0x2b
 8025048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802504c:	f89a 3000 	ldrb.w	r3, [sl]
 8025050:	2b2a      	cmp	r3, #42	; 0x2a
 8025052:	d015      	beq.n	8025080 <_vfiprintf_r+0x120>
 8025054:	9a07      	ldr	r2, [sp, #28]
 8025056:	4654      	mov	r4, sl
 8025058:	2000      	movs	r0, #0
 802505a:	f04f 0c0a 	mov.w	ip, #10
 802505e:	4621      	mov	r1, r4
 8025060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025064:	3b30      	subs	r3, #48	; 0x30
 8025066:	2b09      	cmp	r3, #9
 8025068:	d94d      	bls.n	8025106 <_vfiprintf_r+0x1a6>
 802506a:	b1b0      	cbz	r0, 802509a <_vfiprintf_r+0x13a>
 802506c:	9207      	str	r2, [sp, #28]
 802506e:	e014      	b.n	802509a <_vfiprintf_r+0x13a>
 8025070:	eba0 0308 	sub.w	r3, r0, r8
 8025074:	46a2      	mov	sl, r4
 8025076:	fa09 f303 	lsl.w	r3, r9, r3
 802507a:	4313      	orrs	r3, r2
 802507c:	9304      	str	r3, [sp, #16]
 802507e:	e7d2      	b.n	8025026 <_vfiprintf_r+0xc6>
 8025080:	9b03      	ldr	r3, [sp, #12]
 8025082:	1d19      	adds	r1, r3, #4
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	2b00      	cmp	r3, #0
 8025088:	9103      	str	r1, [sp, #12]
 802508a:	bfbb      	ittet	lt
 802508c:	425b      	neglt	r3, r3
 802508e:	f042 0202 	orrlt.w	r2, r2, #2
 8025092:	9307      	strge	r3, [sp, #28]
 8025094:	9307      	strlt	r3, [sp, #28]
 8025096:	bfb8      	it	lt
 8025098:	9204      	strlt	r2, [sp, #16]
 802509a:	7823      	ldrb	r3, [r4, #0]
 802509c:	2b2e      	cmp	r3, #46	; 0x2e
 802509e:	d10c      	bne.n	80250ba <_vfiprintf_r+0x15a>
 80250a0:	7863      	ldrb	r3, [r4, #1]
 80250a2:	2b2a      	cmp	r3, #42	; 0x2a
 80250a4:	d134      	bne.n	8025110 <_vfiprintf_r+0x1b0>
 80250a6:	9b03      	ldr	r3, [sp, #12]
 80250a8:	3402      	adds	r4, #2
 80250aa:	1d1a      	adds	r2, r3, #4
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	2b00      	cmp	r3, #0
 80250b0:	9203      	str	r2, [sp, #12]
 80250b2:	bfb8      	it	lt
 80250b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80250b8:	9305      	str	r3, [sp, #20]
 80250ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8025190 <_vfiprintf_r+0x230>
 80250be:	2203      	movs	r2, #3
 80250c0:	7821      	ldrb	r1, [r4, #0]
 80250c2:	4650      	mov	r0, sl
 80250c4:	f7ff fdec 	bl	8024ca0 <memchr>
 80250c8:	b138      	cbz	r0, 80250da <_vfiprintf_r+0x17a>
 80250ca:	eba0 000a 	sub.w	r0, r0, sl
 80250ce:	2240      	movs	r2, #64	; 0x40
 80250d0:	9b04      	ldr	r3, [sp, #16]
 80250d2:	3401      	adds	r4, #1
 80250d4:	4082      	lsls	r2, r0
 80250d6:	4313      	orrs	r3, r2
 80250d8:	9304      	str	r3, [sp, #16]
 80250da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80250de:	2206      	movs	r2, #6
 80250e0:	4828      	ldr	r0, [pc, #160]	; (8025184 <_vfiprintf_r+0x224>)
 80250e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80250e6:	f7ff fddb 	bl	8024ca0 <memchr>
 80250ea:	2800      	cmp	r0, #0
 80250ec:	d03f      	beq.n	802516e <_vfiprintf_r+0x20e>
 80250ee:	4b26      	ldr	r3, [pc, #152]	; (8025188 <_vfiprintf_r+0x228>)
 80250f0:	bb1b      	cbnz	r3, 802513a <_vfiprintf_r+0x1da>
 80250f2:	9b03      	ldr	r3, [sp, #12]
 80250f4:	3307      	adds	r3, #7
 80250f6:	f023 0307 	bic.w	r3, r3, #7
 80250fa:	3308      	adds	r3, #8
 80250fc:	9303      	str	r3, [sp, #12]
 80250fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025100:	443b      	add	r3, r7
 8025102:	9309      	str	r3, [sp, #36]	; 0x24
 8025104:	e768      	b.n	8024fd8 <_vfiprintf_r+0x78>
 8025106:	fb0c 3202 	mla	r2, ip, r2, r3
 802510a:	460c      	mov	r4, r1
 802510c:	2001      	movs	r0, #1
 802510e:	e7a6      	b.n	802505e <_vfiprintf_r+0xfe>
 8025110:	2300      	movs	r3, #0
 8025112:	3401      	adds	r4, #1
 8025114:	f04f 0c0a 	mov.w	ip, #10
 8025118:	4619      	mov	r1, r3
 802511a:	9305      	str	r3, [sp, #20]
 802511c:	4620      	mov	r0, r4
 802511e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025122:	3a30      	subs	r2, #48	; 0x30
 8025124:	2a09      	cmp	r2, #9
 8025126:	d903      	bls.n	8025130 <_vfiprintf_r+0x1d0>
 8025128:	2b00      	cmp	r3, #0
 802512a:	d0c6      	beq.n	80250ba <_vfiprintf_r+0x15a>
 802512c:	9105      	str	r1, [sp, #20]
 802512e:	e7c4      	b.n	80250ba <_vfiprintf_r+0x15a>
 8025130:	fb0c 2101 	mla	r1, ip, r1, r2
 8025134:	4604      	mov	r4, r0
 8025136:	2301      	movs	r3, #1
 8025138:	e7f0      	b.n	802511c <_vfiprintf_r+0x1bc>
 802513a:	ab03      	add	r3, sp, #12
 802513c:	462a      	mov	r2, r5
 802513e:	a904      	add	r1, sp, #16
 8025140:	4630      	mov	r0, r6
 8025142:	9300      	str	r3, [sp, #0]
 8025144:	4b11      	ldr	r3, [pc, #68]	; (802518c <_vfiprintf_r+0x22c>)
 8025146:	f3af 8000 	nop.w
 802514a:	4607      	mov	r7, r0
 802514c:	1c78      	adds	r0, r7, #1
 802514e:	d1d6      	bne.n	80250fe <_vfiprintf_r+0x19e>
 8025150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025152:	07d9      	lsls	r1, r3, #31
 8025154:	d405      	bmi.n	8025162 <_vfiprintf_r+0x202>
 8025156:	89ab      	ldrh	r3, [r5, #12]
 8025158:	059a      	lsls	r2, r3, #22
 802515a:	d402      	bmi.n	8025162 <_vfiprintf_r+0x202>
 802515c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802515e:	f7ff f8db 	bl	8024318 <__retarget_lock_release_recursive>
 8025162:	89ab      	ldrh	r3, [r5, #12]
 8025164:	065b      	lsls	r3, r3, #25
 8025166:	f53f af1d 	bmi.w	8024fa4 <_vfiprintf_r+0x44>
 802516a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802516c:	e71c      	b.n	8024fa8 <_vfiprintf_r+0x48>
 802516e:	ab03      	add	r3, sp, #12
 8025170:	462a      	mov	r2, r5
 8025172:	a904      	add	r1, sp, #16
 8025174:	4630      	mov	r0, r6
 8025176:	9300      	str	r3, [sp, #0]
 8025178:	4b04      	ldr	r3, [pc, #16]	; (802518c <_vfiprintf_r+0x22c>)
 802517a:	f000 f87d 	bl	8025278 <_printf_i>
 802517e:	e7e4      	b.n	802514a <_vfiprintf_r+0x1ea>
 8025180:	080261c3 	.word	0x080261c3
 8025184:	080261c9 	.word	0x080261c9
 8025188:	00000000 	.word	0x00000000
 802518c:	08024f3b 	.word	0x08024f3b
 8025190:	080260a3 	.word	0x080260a3

08025194 <_printf_common>:
 8025194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025198:	4616      	mov	r6, r2
 802519a:	4699      	mov	r9, r3
 802519c:	688a      	ldr	r2, [r1, #8]
 802519e:	4607      	mov	r7, r0
 80251a0:	690b      	ldr	r3, [r1, #16]
 80251a2:	460c      	mov	r4, r1
 80251a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80251a8:	4293      	cmp	r3, r2
 80251aa:	bfb8      	it	lt
 80251ac:	4613      	movlt	r3, r2
 80251ae:	6033      	str	r3, [r6, #0]
 80251b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80251b4:	b10a      	cbz	r2, 80251ba <_printf_common+0x26>
 80251b6:	3301      	adds	r3, #1
 80251b8:	6033      	str	r3, [r6, #0]
 80251ba:	6823      	ldr	r3, [r4, #0]
 80251bc:	0699      	lsls	r1, r3, #26
 80251be:	bf42      	ittt	mi
 80251c0:	6833      	ldrmi	r3, [r6, #0]
 80251c2:	3302      	addmi	r3, #2
 80251c4:	6033      	strmi	r3, [r6, #0]
 80251c6:	6825      	ldr	r5, [r4, #0]
 80251c8:	f015 0506 	ands.w	r5, r5, #6
 80251cc:	d106      	bne.n	80251dc <_printf_common+0x48>
 80251ce:	f104 0a19 	add.w	sl, r4, #25
 80251d2:	68e3      	ldr	r3, [r4, #12]
 80251d4:	6832      	ldr	r2, [r6, #0]
 80251d6:	1a9b      	subs	r3, r3, r2
 80251d8:	42ab      	cmp	r3, r5
 80251da:	dc2b      	bgt.n	8025234 <_printf_common+0xa0>
 80251dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80251e0:	1e13      	subs	r3, r2, #0
 80251e2:	6822      	ldr	r2, [r4, #0]
 80251e4:	bf18      	it	ne
 80251e6:	2301      	movne	r3, #1
 80251e8:	0692      	lsls	r2, r2, #26
 80251ea:	d430      	bmi.n	802524e <_printf_common+0xba>
 80251ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80251f0:	4649      	mov	r1, r9
 80251f2:	4638      	mov	r0, r7
 80251f4:	47c0      	blx	r8
 80251f6:	3001      	adds	r0, #1
 80251f8:	d023      	beq.n	8025242 <_printf_common+0xae>
 80251fa:	6823      	ldr	r3, [r4, #0]
 80251fc:	341a      	adds	r4, #26
 80251fe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8025202:	f003 0306 	and.w	r3, r3, #6
 8025206:	2b04      	cmp	r3, #4
 8025208:	bf0a      	itet	eq
 802520a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802520e:	2500      	movne	r5, #0
 8025210:	6833      	ldreq	r3, [r6, #0]
 8025212:	f04f 0600 	mov.w	r6, #0
 8025216:	bf08      	it	eq
 8025218:	1aed      	subeq	r5, r5, r3
 802521a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802521e:	bf08      	it	eq
 8025220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025224:	4293      	cmp	r3, r2
 8025226:	bfc4      	itt	gt
 8025228:	1a9b      	subgt	r3, r3, r2
 802522a:	18ed      	addgt	r5, r5, r3
 802522c:	42b5      	cmp	r5, r6
 802522e:	d11a      	bne.n	8025266 <_printf_common+0xd2>
 8025230:	2000      	movs	r0, #0
 8025232:	e008      	b.n	8025246 <_printf_common+0xb2>
 8025234:	2301      	movs	r3, #1
 8025236:	4652      	mov	r2, sl
 8025238:	4649      	mov	r1, r9
 802523a:	4638      	mov	r0, r7
 802523c:	47c0      	blx	r8
 802523e:	3001      	adds	r0, #1
 8025240:	d103      	bne.n	802524a <_printf_common+0xb6>
 8025242:	f04f 30ff 	mov.w	r0, #4294967295
 8025246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802524a:	3501      	adds	r5, #1
 802524c:	e7c1      	b.n	80251d2 <_printf_common+0x3e>
 802524e:	18e1      	adds	r1, r4, r3
 8025250:	1c5a      	adds	r2, r3, #1
 8025252:	2030      	movs	r0, #48	; 0x30
 8025254:	3302      	adds	r3, #2
 8025256:	4422      	add	r2, r4
 8025258:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802525c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025264:	e7c2      	b.n	80251ec <_printf_common+0x58>
 8025266:	2301      	movs	r3, #1
 8025268:	4622      	mov	r2, r4
 802526a:	4649      	mov	r1, r9
 802526c:	4638      	mov	r0, r7
 802526e:	47c0      	blx	r8
 8025270:	3001      	adds	r0, #1
 8025272:	d0e6      	beq.n	8025242 <_printf_common+0xae>
 8025274:	3601      	adds	r6, #1
 8025276:	e7d9      	b.n	802522c <_printf_common+0x98>

08025278 <_printf_i>:
 8025278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802527c:	7e0f      	ldrb	r7, [r1, #24]
 802527e:	4691      	mov	r9, r2
 8025280:	4680      	mov	r8, r0
 8025282:	460c      	mov	r4, r1
 8025284:	2f78      	cmp	r7, #120	; 0x78
 8025286:	469a      	mov	sl, r3
 8025288:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802528a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802528e:	d807      	bhi.n	80252a0 <_printf_i+0x28>
 8025290:	2f62      	cmp	r7, #98	; 0x62
 8025292:	d80a      	bhi.n	80252aa <_printf_i+0x32>
 8025294:	2f00      	cmp	r7, #0
 8025296:	f000 80d3 	beq.w	8025440 <_printf_i+0x1c8>
 802529a:	2f58      	cmp	r7, #88	; 0x58
 802529c:	f000 80bf 	beq.w	802541e <_printf_i+0x1a6>
 80252a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80252a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80252a8:	e03a      	b.n	8025320 <_printf_i+0xa8>
 80252aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80252ae:	2b15      	cmp	r3, #21
 80252b0:	d8f6      	bhi.n	80252a0 <_printf_i+0x28>
 80252b2:	a101      	add	r1, pc, #4	; (adr r1, 80252b8 <_printf_i+0x40>)
 80252b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80252b8:	08025311 	.word	0x08025311
 80252bc:	08025325 	.word	0x08025325
 80252c0:	080252a1 	.word	0x080252a1
 80252c4:	080252a1 	.word	0x080252a1
 80252c8:	080252a1 	.word	0x080252a1
 80252cc:	080252a1 	.word	0x080252a1
 80252d0:	08025325 	.word	0x08025325
 80252d4:	080252a1 	.word	0x080252a1
 80252d8:	080252a1 	.word	0x080252a1
 80252dc:	080252a1 	.word	0x080252a1
 80252e0:	080252a1 	.word	0x080252a1
 80252e4:	08025427 	.word	0x08025427
 80252e8:	08025351 	.word	0x08025351
 80252ec:	080253e3 	.word	0x080253e3
 80252f0:	080252a1 	.word	0x080252a1
 80252f4:	080252a1 	.word	0x080252a1
 80252f8:	08025449 	.word	0x08025449
 80252fc:	080252a1 	.word	0x080252a1
 8025300:	08025351 	.word	0x08025351
 8025304:	080252a1 	.word	0x080252a1
 8025308:	080252a1 	.word	0x080252a1
 802530c:	080253eb 	.word	0x080253eb
 8025310:	682b      	ldr	r3, [r5, #0]
 8025312:	1d1a      	adds	r2, r3, #4
 8025314:	681b      	ldr	r3, [r3, #0]
 8025316:	602a      	str	r2, [r5, #0]
 8025318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802531c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025320:	2301      	movs	r3, #1
 8025322:	e09e      	b.n	8025462 <_printf_i+0x1ea>
 8025324:	6820      	ldr	r0, [r4, #0]
 8025326:	682b      	ldr	r3, [r5, #0]
 8025328:	0607      	lsls	r7, r0, #24
 802532a:	f103 0104 	add.w	r1, r3, #4
 802532e:	6029      	str	r1, [r5, #0]
 8025330:	d501      	bpl.n	8025336 <_printf_i+0xbe>
 8025332:	681e      	ldr	r6, [r3, #0]
 8025334:	e003      	b.n	802533e <_printf_i+0xc6>
 8025336:	0646      	lsls	r6, r0, #25
 8025338:	d5fb      	bpl.n	8025332 <_printf_i+0xba>
 802533a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802533e:	2e00      	cmp	r6, #0
 8025340:	da03      	bge.n	802534a <_printf_i+0xd2>
 8025342:	232d      	movs	r3, #45	; 0x2d
 8025344:	4276      	negs	r6, r6
 8025346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802534a:	4859      	ldr	r0, [pc, #356]	; (80254b0 <_printf_i+0x238>)
 802534c:	230a      	movs	r3, #10
 802534e:	e012      	b.n	8025376 <_printf_i+0xfe>
 8025350:	682b      	ldr	r3, [r5, #0]
 8025352:	6820      	ldr	r0, [r4, #0]
 8025354:	1d19      	adds	r1, r3, #4
 8025356:	6029      	str	r1, [r5, #0]
 8025358:	0605      	lsls	r5, r0, #24
 802535a:	d501      	bpl.n	8025360 <_printf_i+0xe8>
 802535c:	681e      	ldr	r6, [r3, #0]
 802535e:	e002      	b.n	8025366 <_printf_i+0xee>
 8025360:	0641      	lsls	r1, r0, #25
 8025362:	d5fb      	bpl.n	802535c <_printf_i+0xe4>
 8025364:	881e      	ldrh	r6, [r3, #0]
 8025366:	2f6f      	cmp	r7, #111	; 0x6f
 8025368:	4851      	ldr	r0, [pc, #324]	; (80254b0 <_printf_i+0x238>)
 802536a:	bf0c      	ite	eq
 802536c:	2308      	moveq	r3, #8
 802536e:	230a      	movne	r3, #10
 8025370:	2100      	movs	r1, #0
 8025372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025376:	6865      	ldr	r5, [r4, #4]
 8025378:	2d00      	cmp	r5, #0
 802537a:	60a5      	str	r5, [r4, #8]
 802537c:	bfa2      	ittt	ge
 802537e:	6821      	ldrge	r1, [r4, #0]
 8025380:	f021 0104 	bicge.w	r1, r1, #4
 8025384:	6021      	strge	r1, [r4, #0]
 8025386:	b90e      	cbnz	r6, 802538c <_printf_i+0x114>
 8025388:	2d00      	cmp	r5, #0
 802538a:	d04a      	beq.n	8025422 <_printf_i+0x1aa>
 802538c:	4615      	mov	r5, r2
 802538e:	fbb6 f1f3 	udiv	r1, r6, r3
 8025392:	fb03 6711 	mls	r7, r3, r1, r6
 8025396:	5dc7      	ldrb	r7, [r0, r7]
 8025398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802539c:	4637      	mov	r7, r6
 802539e:	460e      	mov	r6, r1
 80253a0:	42bb      	cmp	r3, r7
 80253a2:	d9f4      	bls.n	802538e <_printf_i+0x116>
 80253a4:	2b08      	cmp	r3, #8
 80253a6:	d10b      	bne.n	80253c0 <_printf_i+0x148>
 80253a8:	6823      	ldr	r3, [r4, #0]
 80253aa:	07de      	lsls	r6, r3, #31
 80253ac:	d508      	bpl.n	80253c0 <_printf_i+0x148>
 80253ae:	6923      	ldr	r3, [r4, #16]
 80253b0:	6861      	ldr	r1, [r4, #4]
 80253b2:	4299      	cmp	r1, r3
 80253b4:	bfde      	ittt	le
 80253b6:	2330      	movle	r3, #48	; 0x30
 80253b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80253bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80253c0:	1b52      	subs	r2, r2, r5
 80253c2:	6122      	str	r2, [r4, #16]
 80253c4:	464b      	mov	r3, r9
 80253c6:	aa03      	add	r2, sp, #12
 80253c8:	4621      	mov	r1, r4
 80253ca:	4640      	mov	r0, r8
 80253cc:	f8cd a000 	str.w	sl, [sp]
 80253d0:	f7ff fee0 	bl	8025194 <_printf_common>
 80253d4:	3001      	adds	r0, #1
 80253d6:	d149      	bne.n	802546c <_printf_i+0x1f4>
 80253d8:	f04f 30ff 	mov.w	r0, #4294967295
 80253dc:	b004      	add	sp, #16
 80253de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80253e2:	6823      	ldr	r3, [r4, #0]
 80253e4:	f043 0320 	orr.w	r3, r3, #32
 80253e8:	6023      	str	r3, [r4, #0]
 80253ea:	2778      	movs	r7, #120	; 0x78
 80253ec:	4831      	ldr	r0, [pc, #196]	; (80254b4 <_printf_i+0x23c>)
 80253ee:	6823      	ldr	r3, [r4, #0]
 80253f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80253f4:	061f      	lsls	r7, r3, #24
 80253f6:	6829      	ldr	r1, [r5, #0]
 80253f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80253fc:	d402      	bmi.n	8025404 <_printf_i+0x18c>
 80253fe:	065f      	lsls	r7, r3, #25
 8025400:	bf48      	it	mi
 8025402:	b2b6      	uxthmi	r6, r6
 8025404:	07df      	lsls	r7, r3, #31
 8025406:	6029      	str	r1, [r5, #0]
 8025408:	bf44      	itt	mi
 802540a:	f043 0320 	orrmi.w	r3, r3, #32
 802540e:	6023      	strmi	r3, [r4, #0]
 8025410:	b91e      	cbnz	r6, 802541a <_printf_i+0x1a2>
 8025412:	6823      	ldr	r3, [r4, #0]
 8025414:	f023 0320 	bic.w	r3, r3, #32
 8025418:	6023      	str	r3, [r4, #0]
 802541a:	2310      	movs	r3, #16
 802541c:	e7a8      	b.n	8025370 <_printf_i+0xf8>
 802541e:	4824      	ldr	r0, [pc, #144]	; (80254b0 <_printf_i+0x238>)
 8025420:	e7e5      	b.n	80253ee <_printf_i+0x176>
 8025422:	4615      	mov	r5, r2
 8025424:	e7be      	b.n	80253a4 <_printf_i+0x12c>
 8025426:	682b      	ldr	r3, [r5, #0]
 8025428:	6826      	ldr	r6, [r4, #0]
 802542a:	1d18      	adds	r0, r3, #4
 802542c:	6961      	ldr	r1, [r4, #20]
 802542e:	6028      	str	r0, [r5, #0]
 8025430:	0635      	lsls	r5, r6, #24
 8025432:	681b      	ldr	r3, [r3, #0]
 8025434:	d501      	bpl.n	802543a <_printf_i+0x1c2>
 8025436:	6019      	str	r1, [r3, #0]
 8025438:	e002      	b.n	8025440 <_printf_i+0x1c8>
 802543a:	0670      	lsls	r0, r6, #25
 802543c:	d5fb      	bpl.n	8025436 <_printf_i+0x1be>
 802543e:	8019      	strh	r1, [r3, #0]
 8025440:	2300      	movs	r3, #0
 8025442:	4615      	mov	r5, r2
 8025444:	6123      	str	r3, [r4, #16]
 8025446:	e7bd      	b.n	80253c4 <_printf_i+0x14c>
 8025448:	682b      	ldr	r3, [r5, #0]
 802544a:	2100      	movs	r1, #0
 802544c:	1d1a      	adds	r2, r3, #4
 802544e:	602a      	str	r2, [r5, #0]
 8025450:	681d      	ldr	r5, [r3, #0]
 8025452:	6862      	ldr	r2, [r4, #4]
 8025454:	4628      	mov	r0, r5
 8025456:	f7ff fc23 	bl	8024ca0 <memchr>
 802545a:	b108      	cbz	r0, 8025460 <_printf_i+0x1e8>
 802545c:	1b40      	subs	r0, r0, r5
 802545e:	6060      	str	r0, [r4, #4]
 8025460:	6863      	ldr	r3, [r4, #4]
 8025462:	6123      	str	r3, [r4, #16]
 8025464:	2300      	movs	r3, #0
 8025466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802546a:	e7ab      	b.n	80253c4 <_printf_i+0x14c>
 802546c:	6923      	ldr	r3, [r4, #16]
 802546e:	462a      	mov	r2, r5
 8025470:	4649      	mov	r1, r9
 8025472:	4640      	mov	r0, r8
 8025474:	47d0      	blx	sl
 8025476:	3001      	adds	r0, #1
 8025478:	d0ae      	beq.n	80253d8 <_printf_i+0x160>
 802547a:	6823      	ldr	r3, [r4, #0]
 802547c:	079b      	lsls	r3, r3, #30
 802547e:	d413      	bmi.n	80254a8 <_printf_i+0x230>
 8025480:	68e0      	ldr	r0, [r4, #12]
 8025482:	9b03      	ldr	r3, [sp, #12]
 8025484:	4298      	cmp	r0, r3
 8025486:	bfb8      	it	lt
 8025488:	4618      	movlt	r0, r3
 802548a:	e7a7      	b.n	80253dc <_printf_i+0x164>
 802548c:	2301      	movs	r3, #1
 802548e:	4632      	mov	r2, r6
 8025490:	4649      	mov	r1, r9
 8025492:	4640      	mov	r0, r8
 8025494:	47d0      	blx	sl
 8025496:	3001      	adds	r0, #1
 8025498:	d09e      	beq.n	80253d8 <_printf_i+0x160>
 802549a:	3501      	adds	r5, #1
 802549c:	68e3      	ldr	r3, [r4, #12]
 802549e:	9903      	ldr	r1, [sp, #12]
 80254a0:	1a5b      	subs	r3, r3, r1
 80254a2:	42ab      	cmp	r3, r5
 80254a4:	dcf2      	bgt.n	802548c <_printf_i+0x214>
 80254a6:	e7eb      	b.n	8025480 <_printf_i+0x208>
 80254a8:	2500      	movs	r5, #0
 80254aa:	f104 0619 	add.w	r6, r4, #25
 80254ae:	e7f5      	b.n	802549c <_printf_i+0x224>
 80254b0:	080261d0 	.word	0x080261d0
 80254b4:	080261e1 	.word	0x080261e1

080254b8 <__swbuf_r>:
 80254b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254ba:	460e      	mov	r6, r1
 80254bc:	4614      	mov	r4, r2
 80254be:	4605      	mov	r5, r0
 80254c0:	b118      	cbz	r0, 80254ca <__swbuf_r+0x12>
 80254c2:	6a03      	ldr	r3, [r0, #32]
 80254c4:	b90b      	cbnz	r3, 80254ca <__swbuf_r+0x12>
 80254c6:	f7fe fd97 	bl	8023ff8 <__sinit>
 80254ca:	69a3      	ldr	r3, [r4, #24]
 80254cc:	60a3      	str	r3, [r4, #8]
 80254ce:	89a3      	ldrh	r3, [r4, #12]
 80254d0:	071a      	lsls	r2, r3, #28
 80254d2:	d525      	bpl.n	8025520 <__swbuf_r+0x68>
 80254d4:	6923      	ldr	r3, [r4, #16]
 80254d6:	b31b      	cbz	r3, 8025520 <__swbuf_r+0x68>
 80254d8:	6823      	ldr	r3, [r4, #0]
 80254da:	b2f6      	uxtb	r6, r6
 80254dc:	6922      	ldr	r2, [r4, #16]
 80254de:	4637      	mov	r7, r6
 80254e0:	1a98      	subs	r0, r3, r2
 80254e2:	6963      	ldr	r3, [r4, #20]
 80254e4:	4283      	cmp	r3, r0
 80254e6:	dc04      	bgt.n	80254f2 <__swbuf_r+0x3a>
 80254e8:	4621      	mov	r1, r4
 80254ea:	4628      	mov	r0, r5
 80254ec:	f7ff fb2e 	bl	8024b4c <_fflush_r>
 80254f0:	b9e0      	cbnz	r0, 802552c <__swbuf_r+0x74>
 80254f2:	68a3      	ldr	r3, [r4, #8]
 80254f4:	3b01      	subs	r3, #1
 80254f6:	60a3      	str	r3, [r4, #8]
 80254f8:	6823      	ldr	r3, [r4, #0]
 80254fa:	1c5a      	adds	r2, r3, #1
 80254fc:	6022      	str	r2, [r4, #0]
 80254fe:	701e      	strb	r6, [r3, #0]
 8025500:	1c43      	adds	r3, r0, #1
 8025502:	6962      	ldr	r2, [r4, #20]
 8025504:	429a      	cmp	r2, r3
 8025506:	d004      	beq.n	8025512 <__swbuf_r+0x5a>
 8025508:	89a3      	ldrh	r3, [r4, #12]
 802550a:	07db      	lsls	r3, r3, #31
 802550c:	d506      	bpl.n	802551c <__swbuf_r+0x64>
 802550e:	2e0a      	cmp	r6, #10
 8025510:	d104      	bne.n	802551c <__swbuf_r+0x64>
 8025512:	4621      	mov	r1, r4
 8025514:	4628      	mov	r0, r5
 8025516:	f7ff fb19 	bl	8024b4c <_fflush_r>
 802551a:	b938      	cbnz	r0, 802552c <__swbuf_r+0x74>
 802551c:	4638      	mov	r0, r7
 802551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025520:	4621      	mov	r1, r4
 8025522:	4628      	mov	r0, r5
 8025524:	f000 f806 	bl	8025534 <__swsetup_r>
 8025528:	2800      	cmp	r0, #0
 802552a:	d0d5      	beq.n	80254d8 <__swbuf_r+0x20>
 802552c:	f04f 37ff 	mov.w	r7, #4294967295
 8025530:	e7f4      	b.n	802551c <__swbuf_r+0x64>
	...

08025534 <__swsetup_r>:
 8025534:	b538      	push	{r3, r4, r5, lr}
 8025536:	4b2a      	ldr	r3, [pc, #168]	; (80255e0 <__swsetup_r+0xac>)
 8025538:	4605      	mov	r5, r0
 802553a:	460c      	mov	r4, r1
 802553c:	6818      	ldr	r0, [r3, #0]
 802553e:	b118      	cbz	r0, 8025548 <__swsetup_r+0x14>
 8025540:	6a03      	ldr	r3, [r0, #32]
 8025542:	b90b      	cbnz	r3, 8025548 <__swsetup_r+0x14>
 8025544:	f7fe fd58 	bl	8023ff8 <__sinit>
 8025548:	89a3      	ldrh	r3, [r4, #12]
 802554a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802554e:	0718      	lsls	r0, r3, #28
 8025550:	d422      	bmi.n	8025598 <__swsetup_r+0x64>
 8025552:	06d9      	lsls	r1, r3, #27
 8025554:	d407      	bmi.n	8025566 <__swsetup_r+0x32>
 8025556:	2309      	movs	r3, #9
 8025558:	602b      	str	r3, [r5, #0]
 802555a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802555e:	f04f 30ff 	mov.w	r0, #4294967295
 8025562:	81a3      	strh	r3, [r4, #12]
 8025564:	e034      	b.n	80255d0 <__swsetup_r+0x9c>
 8025566:	0758      	lsls	r0, r3, #29
 8025568:	d512      	bpl.n	8025590 <__swsetup_r+0x5c>
 802556a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802556c:	b141      	cbz	r1, 8025580 <__swsetup_r+0x4c>
 802556e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025572:	4299      	cmp	r1, r3
 8025574:	d002      	beq.n	802557c <__swsetup_r+0x48>
 8025576:	4628      	mov	r0, r5
 8025578:	f7fe fefa 	bl	8024370 <_free_r>
 802557c:	2300      	movs	r3, #0
 802557e:	6363      	str	r3, [r4, #52]	; 0x34
 8025580:	89a3      	ldrh	r3, [r4, #12]
 8025582:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025586:	81a3      	strh	r3, [r4, #12]
 8025588:	2300      	movs	r3, #0
 802558a:	6063      	str	r3, [r4, #4]
 802558c:	6923      	ldr	r3, [r4, #16]
 802558e:	6023      	str	r3, [r4, #0]
 8025590:	89a3      	ldrh	r3, [r4, #12]
 8025592:	f043 0308 	orr.w	r3, r3, #8
 8025596:	81a3      	strh	r3, [r4, #12]
 8025598:	6923      	ldr	r3, [r4, #16]
 802559a:	b94b      	cbnz	r3, 80255b0 <__swsetup_r+0x7c>
 802559c:	89a3      	ldrh	r3, [r4, #12]
 802559e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80255a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80255a6:	d003      	beq.n	80255b0 <__swsetup_r+0x7c>
 80255a8:	4621      	mov	r1, r4
 80255aa:	4628      	mov	r0, r5
 80255ac:	f000 f847 	bl	802563e <__smakebuf_r>
 80255b0:	89a0      	ldrh	r0, [r4, #12]
 80255b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80255b6:	f010 0301 	ands.w	r3, r0, #1
 80255ba:	d00a      	beq.n	80255d2 <__swsetup_r+0x9e>
 80255bc:	2300      	movs	r3, #0
 80255be:	60a3      	str	r3, [r4, #8]
 80255c0:	6963      	ldr	r3, [r4, #20]
 80255c2:	425b      	negs	r3, r3
 80255c4:	61a3      	str	r3, [r4, #24]
 80255c6:	6923      	ldr	r3, [r4, #16]
 80255c8:	b943      	cbnz	r3, 80255dc <__swsetup_r+0xa8>
 80255ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80255ce:	d1c4      	bne.n	802555a <__swsetup_r+0x26>
 80255d0:	bd38      	pop	{r3, r4, r5, pc}
 80255d2:	0781      	lsls	r1, r0, #30
 80255d4:	bf58      	it	pl
 80255d6:	6963      	ldrpl	r3, [r4, #20]
 80255d8:	60a3      	str	r3, [r4, #8]
 80255da:	e7f4      	b.n	80255c6 <__swsetup_r+0x92>
 80255dc:	2000      	movs	r0, #0
 80255de:	e7f7      	b.n	80255d0 <__swsetup_r+0x9c>
 80255e0:	20000108 	.word	0x20000108

080255e4 <_malloc_usable_size_r>:
 80255e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80255e8:	1f18      	subs	r0, r3, #4
 80255ea:	2b00      	cmp	r3, #0
 80255ec:	bfbc      	itt	lt
 80255ee:	580b      	ldrlt	r3, [r1, r0]
 80255f0:	18c0      	addlt	r0, r0, r3
 80255f2:	4770      	bx	lr

080255f4 <__swhatbuf_r>:
 80255f4:	b570      	push	{r4, r5, r6, lr}
 80255f6:	460c      	mov	r4, r1
 80255f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255fc:	b096      	sub	sp, #88	; 0x58
 80255fe:	4615      	mov	r5, r2
 8025600:	2900      	cmp	r1, #0
 8025602:	461e      	mov	r6, r3
 8025604:	da0c      	bge.n	8025620 <__swhatbuf_r+0x2c>
 8025606:	89a3      	ldrh	r3, [r4, #12]
 8025608:	2100      	movs	r1, #0
 802560a:	f013 0f80 	tst.w	r3, #128	; 0x80
 802560e:	bf0c      	ite	eq
 8025610:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8025614:	2340      	movne	r3, #64	; 0x40
 8025616:	2000      	movs	r0, #0
 8025618:	6031      	str	r1, [r6, #0]
 802561a:	602b      	str	r3, [r5, #0]
 802561c:	b016      	add	sp, #88	; 0x58
 802561e:	bd70      	pop	{r4, r5, r6, pc}
 8025620:	466a      	mov	r2, sp
 8025622:	f000 f849 	bl	80256b8 <_fstat_r>
 8025626:	2800      	cmp	r0, #0
 8025628:	dbed      	blt.n	8025606 <__swhatbuf_r+0x12>
 802562a:	9901      	ldr	r1, [sp, #4]
 802562c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8025630:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8025634:	4259      	negs	r1, r3
 8025636:	4159      	adcs	r1, r3
 8025638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802563c:	e7eb      	b.n	8025616 <__swhatbuf_r+0x22>

0802563e <__smakebuf_r>:
 802563e:	898b      	ldrh	r3, [r1, #12]
 8025640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025642:	079d      	lsls	r5, r3, #30
 8025644:	4606      	mov	r6, r0
 8025646:	460c      	mov	r4, r1
 8025648:	d507      	bpl.n	802565a <__smakebuf_r+0x1c>
 802564a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802564e:	6023      	str	r3, [r4, #0]
 8025650:	6123      	str	r3, [r4, #16]
 8025652:	2301      	movs	r3, #1
 8025654:	6163      	str	r3, [r4, #20]
 8025656:	b002      	add	sp, #8
 8025658:	bd70      	pop	{r4, r5, r6, pc}
 802565a:	ab01      	add	r3, sp, #4
 802565c:	466a      	mov	r2, sp
 802565e:	f7ff ffc9 	bl	80255f4 <__swhatbuf_r>
 8025662:	9900      	ldr	r1, [sp, #0]
 8025664:	4605      	mov	r5, r0
 8025666:	4630      	mov	r0, r6
 8025668:	f7fe fb70 	bl	8023d4c <_malloc_r>
 802566c:	b948      	cbnz	r0, 8025682 <__smakebuf_r+0x44>
 802566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025672:	059a      	lsls	r2, r3, #22
 8025674:	d4ef      	bmi.n	8025656 <__smakebuf_r+0x18>
 8025676:	f023 0303 	bic.w	r3, r3, #3
 802567a:	f043 0302 	orr.w	r3, r3, #2
 802567e:	81a3      	strh	r3, [r4, #12]
 8025680:	e7e3      	b.n	802564a <__smakebuf_r+0xc>
 8025682:	89a3      	ldrh	r3, [r4, #12]
 8025684:	6020      	str	r0, [r4, #0]
 8025686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802568a:	6120      	str	r0, [r4, #16]
 802568c:	81a3      	strh	r3, [r4, #12]
 802568e:	9b00      	ldr	r3, [sp, #0]
 8025690:	6163      	str	r3, [r4, #20]
 8025692:	9b01      	ldr	r3, [sp, #4]
 8025694:	b15b      	cbz	r3, 80256ae <__smakebuf_r+0x70>
 8025696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802569a:	4630      	mov	r0, r6
 802569c:	f000 f81e 	bl	80256dc <_isatty_r>
 80256a0:	b128      	cbz	r0, 80256ae <__smakebuf_r+0x70>
 80256a2:	89a3      	ldrh	r3, [r4, #12]
 80256a4:	f023 0303 	bic.w	r3, r3, #3
 80256a8:	f043 0301 	orr.w	r3, r3, #1
 80256ac:	81a3      	strh	r3, [r4, #12]
 80256ae:	89a3      	ldrh	r3, [r4, #12]
 80256b0:	431d      	orrs	r5, r3
 80256b2:	81a5      	strh	r5, [r4, #12]
 80256b4:	e7cf      	b.n	8025656 <__smakebuf_r+0x18>
	...

080256b8 <_fstat_r>:
 80256b8:	b538      	push	{r3, r4, r5, lr}
 80256ba:	2300      	movs	r3, #0
 80256bc:	4d06      	ldr	r5, [pc, #24]	; (80256d8 <_fstat_r+0x20>)
 80256be:	4604      	mov	r4, r0
 80256c0:	4608      	mov	r0, r1
 80256c2:	4611      	mov	r1, r2
 80256c4:	602b      	str	r3, [r5, #0]
 80256c6:	f7ee fbdc 	bl	8013e82 <_fstat>
 80256ca:	1c43      	adds	r3, r0, #1
 80256cc:	d102      	bne.n	80256d4 <_fstat_r+0x1c>
 80256ce:	682b      	ldr	r3, [r5, #0]
 80256d0:	b103      	cbz	r3, 80256d4 <_fstat_r+0x1c>
 80256d2:	6023      	str	r3, [r4, #0]
 80256d4:	bd38      	pop	{r3, r4, r5, pc}
 80256d6:	bf00      	nop
 80256d8:	20005e60 	.word	0x20005e60

080256dc <_isatty_r>:
 80256dc:	b538      	push	{r3, r4, r5, lr}
 80256de:	2300      	movs	r3, #0
 80256e0:	4d05      	ldr	r5, [pc, #20]	; (80256f8 <_isatty_r+0x1c>)
 80256e2:	4604      	mov	r4, r0
 80256e4:	4608      	mov	r0, r1
 80256e6:	602b      	str	r3, [r5, #0]
 80256e8:	f7ee fbdb 	bl	8013ea2 <_isatty>
 80256ec:	1c43      	adds	r3, r0, #1
 80256ee:	d102      	bne.n	80256f6 <_isatty_r+0x1a>
 80256f0:	682b      	ldr	r3, [r5, #0]
 80256f2:	b103      	cbz	r3, 80256f6 <_isatty_r+0x1a>
 80256f4:	6023      	str	r3, [r4, #0]
 80256f6:	bd38      	pop	{r3, r4, r5, pc}
 80256f8:	20005e60 	.word	0x20005e60

080256fc <_init>:
 80256fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256fe:	bf00      	nop
 8025700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025702:	bc08      	pop	{r3}
 8025704:	469e      	mov	lr, r3
 8025706:	4770      	bx	lr

08025708 <_fini>:
 8025708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802570a:	bf00      	nop
 802570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802570e:	bc08      	pop	{r3}
 8025710:	469e      	mov	lr, r3
 8025712:	4770      	bx	lr
